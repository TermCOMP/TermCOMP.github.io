MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/qqYKo.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

main(g,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (4) Prolog
    (5) PrologToPiTRSProof [SOUND, 0 ms]
    (6) PiTRS
        (7) DependencyPairsProof [EQUIVALENT, 12 ms]
        (8) PiDP
        (9) DependencyGraphProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) PiDP
        (13) PiDPToQDPProof [SOUND, 0 ms]
        (14) QDP
        (15) TransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) TransformationProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) TransformationProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QReductionProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) TransformationProof [EQUIVALENT, 0 ms]
        (30) QDP
        (31) UsableRulesProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) QReductionProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) NonTerminationLoopProof [COMPLETE, 0 ms]
        (36) NO
    (37) PrologToPiTRSProof [SOUND, 0 ms]
    (38) PiTRS
        (39) DependencyPairsProof [EQUIVALENT, 9 ms]
        (40) PiDP
        (41) DependencyGraphProof [EQUIVALENT, 0 ms]
        (42) PiDP
        (43) UsableRulesProof [EQUIVALENT, 0 ms]
        (44) PiDP
        (45) PiDPToQDPProof [SOUND, 0 ms]
        (46) QDP
        (47) TransformationProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) UsableRulesProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) QReductionProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) TransformationProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) TransformationProof [EQUIVALENT, 0 ms]
        (56) QDP
        (57) UsableRulesProof [EQUIVALENT, 0 ms]
        (58) QDP
        (59) QReductionProof [EQUIVALENT, 0 ms]
        (60) QDP
        (61) TransformationProof [EQUIVALENT, 0 ms]
        (62) QDP
        (63) UsableRulesProof [EQUIVALENT, 0 ms]
        (64) QDP
        (65) QReductionProof [EQUIVALENT, 0 ms]
        (66) QDP
(67) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(68) Prolog
    (69) NotTransformerProof [EQUIVALENT, 0 ms]
    (70) Prolog
    (71) CallTransformerProof [EQUIVALENT, 0 ms]
    (72) Prolog
    (73) CutEliminatorProof [SOUND, 0 ms]
    (74) Prolog
    (75) FailTransformerProof [EQUIVALENT, 0 ms]
    (76) Prolog
    (77) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (78) Prolog
    (79) PrologToPiTRSProof [SOUND, 0 ms]
    (80) PiTRS
        (81) DependencyPairsProof [EQUIVALENT, 108 ms]
        (82) PiDP
        (83) DependencyGraphProof [EQUIVALENT, 0 ms]
        (84) AND
            (85) PiDP
                (86) UsableRulesProof [EQUIVALENT, 0 ms]
                (87) PiDP
                (88) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (89) QDP
                (90) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (91) YES
            (92) PiDP
                (93) UsableRulesProof [EQUIVALENT, 0 ms]
                (94) PiDP
                (95) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (96) QDP
                (97) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (98) YES
            (99) PiDP
                (100) UsableRulesProof [EQUIVALENT, 0 ms]
                (101) PiDP
                (102) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (103) QDP
                (104) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (105) YES
            (106) PiDP
                (107) UsableRulesProof [EQUIVALENT, 0 ms]
                (108) PiDP
                (109) PiDPToQDPProof [SOUND, 0 ms]
                (110) QDP
                (111) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (112) YES
            (113) PiDP
                (114) UsableRulesProof [EQUIVALENT, 0 ms]
                (115) PiDP
                (116) PiDPToQDPProof [SOUND, 0 ms]
                (117) QDP
                (118) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (119) YES
            (120) PiDP
                (121) UsableRulesProof [EQUIVALENT, 0 ms]
                (122) PiDP
                (123) PiDPToQDPProof [SOUND, 0 ms]
                (124) QDP
                (125) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (126) YES
            (127) PiDP
                (128) UsableRulesProof [EQUIVALENT, 0 ms]
                (129) PiDP
                (130) PiDPToQDPProof [SOUND, 0 ms]
                (131) QDP
                (132) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (133) YES
            (134) PiDP
                (135) UsableRulesProof [EQUIVALENT, 0 ms]
                (136) PiDP
                (137) PiDPToQDPProof [SOUND, 0 ms]
                (138) QDP
                (139) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (140) YES
            (141) PiDP
                (142) UsableRulesProof [EQUIVALENT, 0 ms]
                (143) PiDP
                (144) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (145) QDP
                (146) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (147) YES
            (148) PiDP
                (149) UsableRulesProof [EQUIVALENT, 0 ms]
                (150) PiDP
                (151) PiDPToQDPProof [SOUND, 0 ms]
                (152) QDP
                (153) TransformationProof [EQUIVALENT, 2 ms]
                (154) QDP
                (155) TransformationProof [EQUIVALENT, 0 ms]
                (156) QDP
                (157) TransformationProof [EQUIVALENT, 0 ms]
                (158) QDP
                (159) TransformationProof [EQUIVALENT, 0 ms]
                (160) QDP
                (161) UsableRulesProof [EQUIVALENT, 0 ms]
                (162) QDP
                (163) QReductionProof [EQUIVALENT, 0 ms]
                (164) QDP
                (165) TransformationProof [SOUND, 0 ms]
                (166) QDP
                (167) TransformationProof [SOUND, 0 ms]
                (168) QDP
                (169) UsableRulesProof [EQUIVALENT, 0 ms]
                (170) QDP
                (171) QReductionProof [EQUIVALENT, 0 ms]
                (172) QDP
                (173) TransformationProof [SOUND, 0 ms]
                (174) QDP
                (175) UsableRulesProof [EQUIVALENT, 0 ms]
                (176) QDP
                (177) QReductionProof [EQUIVALENT, 0 ms]
                (178) QDP
                (179) TransformationProof [EQUIVALENT, 0 ms]
                (180) QDP
                (181) UsableRulesProof [EQUIVALENT, 0 ms]
                (182) QDP
                (183) QReductionProof [EQUIVALENT, 0 ms]
                (184) QDP
                (185) TransformationProof [EQUIVALENT, 0 ms]
                (186) QDP
                (187) TransformationProof [SOUND, 0 ms]
                (188) QDP
                (189) UsableRulesProof [EQUIVALENT, 0 ms]
                (190) QDP
                (191) QReductionProof [EQUIVALENT, 1 ms]
                (192) QDP
                (193) TransformationProof [EQUIVALENT, 0 ms]
                (194) QDP
                (195) UsableRulesProof [EQUIVALENT, 0 ms]
                (196) QDP
                (197) QReductionProof [EQUIVALENT, 0 ms]
                (198) QDP
                (199) TransformationProof [EQUIVALENT, 0 ms]
                (200) QDP
                (201) UsableRulesProof [EQUIVALENT, 0 ms]
                (202) QDP
                (203) QReductionProof [EQUIVALENT, 0 ms]
                (204) QDP
                (205) TransformationProof [EQUIVALENT, 0 ms]
                (206) QDP
                (207) DependencyGraphProof [EQUIVALENT, 0 ms]
                (208) QDP
                (209) UsableRulesProof [EQUIVALENT, 0 ms]
                (210) QDP
                (211) QReductionProof [EQUIVALENT, 0 ms]
                (212) QDP
                (213) TransformationProof [EQUIVALENT, 0 ms]
                (214) QDP
                (215) TransformationProof [EQUIVALENT, 0 ms]
                (216) QDP
                (217) TransformationProof [EQUIVALENT, 0 ms]
                (218) QDP
                (219) TransformationProof [EQUIVALENT, 0 ms]
                (220) QDP
                (221) TransformationProof [EQUIVALENT, 0 ms]
                (222) QDP
                (223) TransformationProof [EQUIVALENT, 0 ms]
                (224) QDP
                (225) TransformationProof [EQUIVALENT, 0 ms]
                (226) QDP
                (227) TransformationProof [EQUIVALENT, 0 ms]
                (228) QDP
                (229) TransformationProof [EQUIVALENT, 0 ms]
                (230) QDP
                (231) QDPQMonotonicMRRProof [EQUIVALENT, 63 ms]
                (232) QDP
                (233) UsableRulesProof [EQUIVALENT, 0 ms]
                (234) QDP
                (235) QReductionProof [EQUIVALENT, 0 ms]
                (236) QDP
                (237) QDPQMonotonicMRRProof [EQUIVALENT, 23 ms]
                (238) QDP
                (239) UsableRulesProof [EQUIVALENT, 0 ms]
                (240) QDP
                (241) QReductionProof [EQUIVALENT, 0 ms]
                (242) QDP
    (243) PrologToPiTRSProof [SOUND, 16 ms]
    (244) PiTRS
        (245) DependencyPairsProof [EQUIVALENT, 88 ms]
        (246) PiDP
        (247) DependencyGraphProof [EQUIVALENT, 0 ms]
        (248) AND
            (249) PiDP
                (250) UsableRulesProof [EQUIVALENT, 0 ms]
                (251) PiDP
                (252) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (253) QDP
                (254) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (255) YES
            (256) PiDP
                (257) UsableRulesProof [EQUIVALENT, 0 ms]
                (258) PiDP
                (259) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (260) QDP
                (261) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (262) YES
            (263) PiDP
                (264) UsableRulesProof [EQUIVALENT, 0 ms]
                (265) PiDP
                (266) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (267) QDP
                (268) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (269) YES
            (270) PiDP
                (271) UsableRulesProof [EQUIVALENT, 0 ms]
                (272) PiDP
                (273) PiDPToQDPProof [SOUND, 0 ms]
                (274) QDP
                (275) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (276) YES
            (277) PiDP
                (278) UsableRulesProof [EQUIVALENT, 0 ms]
                (279) PiDP
                (280) PiDPToQDPProof [SOUND, 0 ms]
                (281) QDP
                (282) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (283) YES
            (284) PiDP
                (285) UsableRulesProof [EQUIVALENT, 0 ms]
                (286) PiDP
                (287) PiDPToQDPProof [SOUND, 0 ms]
                (288) QDP
                (289) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (290) YES
            (291) PiDP
                (292) UsableRulesProof [EQUIVALENT, 0 ms]
                (293) PiDP
                (294) PiDPToQDPProof [SOUND, 0 ms]
                (295) QDP
                (296) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (297) YES
            (298) PiDP
                (299) UsableRulesProof [EQUIVALENT, 0 ms]
                (300) PiDP
                (301) PiDPToQDPProof [SOUND, 0 ms]
                (302) QDP
                (303) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (304) YES
            (305) PiDP
                (306) UsableRulesProof [EQUIVALENT, 0 ms]
                (307) PiDP
                (308) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (309) QDP
                (310) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (311) YES
            (312) PiDP
                (313) UsableRulesProof [EQUIVALENT, 0 ms]
                (314) PiDP
                (315) PiDPToQDPProof [SOUND, 0 ms]
                (316) QDP
                (317) TransformationProof [EQUIVALENT, 0 ms]
                (318) QDP
                (319) TransformationProof [EQUIVALENT, 0 ms]
                (320) QDP
                (321) TransformationProof [EQUIVALENT, 0 ms]
                (322) QDP
                (323) TransformationProof [EQUIVALENT, 0 ms]
                (324) QDP
                (325) UsableRulesProof [EQUIVALENT, 0 ms]
                (326) QDP
                (327) QReductionProof [EQUIVALENT, 0 ms]
                (328) QDP
                (329) TransformationProof [SOUND, 0 ms]
                (330) QDP
                (331) TransformationProof [SOUND, 0 ms]
                (332) QDP
                (333) UsableRulesProof [EQUIVALENT, 0 ms]
                (334) QDP
                (335) QReductionProof [EQUIVALENT, 0 ms]
                (336) QDP
                (337) TransformationProof [SOUND, 0 ms]
                (338) QDP
                (339) UsableRulesProof [EQUIVALENT, 0 ms]
                (340) QDP
                (341) QReductionProof [EQUIVALENT, 0 ms]
                (342) QDP
                (343) TransformationProof [EQUIVALENT, 0 ms]
                (344) QDP
                (345) UsableRulesProof [EQUIVALENT, 0 ms]
                (346) QDP
                (347) QReductionProof [EQUIVALENT, 0 ms]
                (348) QDP
                (349) TransformationProof [EQUIVALENT, 0 ms]
                (350) QDP
                (351) TransformationProof [SOUND, 0 ms]
                (352) QDP
                (353) UsableRulesProof [EQUIVALENT, 0 ms]
                (354) QDP
                (355) QReductionProof [EQUIVALENT, 1 ms]
                (356) QDP
                (357) TransformationProof [EQUIVALENT, 0 ms]
                (358) QDP
                (359) UsableRulesProof [EQUIVALENT, 0 ms]
                (360) QDP
                (361) QReductionProof [EQUIVALENT, 0 ms]
                (362) QDP
                (363) TransformationProof [EQUIVALENT, 0 ms]
                (364) QDP
                (365) UsableRulesProof [EQUIVALENT, 0 ms]
                (366) QDP
                (367) QReductionProof [EQUIVALENT, 0 ms]
                (368) QDP
                (369) TransformationProof [EQUIVALENT, 0 ms]
                (370) QDP
                (371) DependencyGraphProof [EQUIVALENT, 0 ms]
                (372) QDP
                (373) UsableRulesProof [EQUIVALENT, 0 ms]
                (374) QDP
                (375) QReductionProof [EQUIVALENT, 0 ms]
                (376) QDP
                (377) TransformationProof [EQUIVALENT, 0 ms]
                (378) QDP
                (379) TransformationProof [EQUIVALENT, 0 ms]
                (380) QDP
                (381) TransformationProof [EQUIVALENT, 0 ms]
                (382) QDP
                (383) TransformationProof [EQUIVALENT, 0 ms]
                (384) QDP
                (385) TransformationProof [EQUIVALENT, 0 ms]
                (386) QDP
                (387) TransformationProof [EQUIVALENT, 0 ms]
                (388) QDP
                (389) TransformationProof [EQUIVALENT, 0 ms]
                (390) QDP
                (391) TransformationProof [EQUIVALENT, 0 ms]
                (392) QDP
                (393) QDPQMonotonicMRRProof [EQUIVALENT, 23 ms]
                (394) QDP
(395) PrologToIRSwTTransformerProof [SOUND, 20 ms]
(396) IRSwT
    (397) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (398) IRSwT
    (399) IntTRSCompressionProof [EQUIVALENT, 10 ms]
    (400) IRSwT
    (401) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (402) IRSwT
    (403) IRSwTTerminationDigraphProof [EQUIVALENT, 14 ms]
    (404) IRSwT
    (405) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (406) IRSwT
    (407) TempFilterProof [SOUND, 35 ms]
    (408) IRSwT
    (409) IRSwTTerminationDigraphProof [EQUIVALENT, 1 ms]
    (410) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

main(X, Ret) :- twoWay(1, X, Ret).
twoWay(Terminate, N, 1) :- ','(<(N, 0), !).
twoWay(Terminate, N, Ret) :- ','(=:=(Terminate, 1), ','(!, ','(is(M, -(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M)))))).
twoWay(Terminate, N, Ret) :- ','(=\=(Terminate, 1), ','(!, ','(is(M, +(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M)))))).


Query: main(g,a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

main(X, Ret) :- twoWay(1, X, Ret).
twoWay(Terminate, N, 1) :- <(N, 0).
twoWay(Terminate, N, Ret) :- ','(=:=(Terminate, 1), ','(is(M, -(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M))))).
twoWay(Terminate, N, Ret) :- ','(=\=(Terminate, 1), ','(is(M, +(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M))))).


Query: main(g,a)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

main(X, Ret) :- twoWay(1, X, Ret).
twoWay(Terminate, N, 1) :- <(N, 0).
twoWay(Terminate, N, Ret) :- ','(=:=(Terminate, 1), ','(is(M, -(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M))))).
twoWay(Terminate, N, Ret) :- ','(=\=(Terminate, 1), ','(is(M, +(N, 1)), ','(twoWay(Terminate, M, Ret1), is(Ret, *(Ret1, M))))).
<(X0, X1).
=:=(X0, X1).
is(X0, X1).
=\=(X0, X1).


Query: main(g,a)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,f)

twoWay_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(1, X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(1, X, Ret)
   TWOWAY_IN_GGA(Terminate, N, 1) -> U2_GGA(Terminate, N, <_in_gg(N, 0))
   TWOWAY_IN_GGA(Terminate, N, 1) -> <_IN_GG(N, 0)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U3_GGA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GGA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, 1) -> U2_GAA(Terminate, N, <_in_ag(N, 0))
   TWOWAY_IN_GAA(Terminate, N, 1) -> <_IN_AG(N, 0)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U7_GGA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GGA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U2_GAA(x1, x2, x3)  =  U2_GAA(x3)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U5_GAA(x1, x2, x3, x4, x5)  =  U5_GAA(x5)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

=\=_IN_GG(x1, x2)  =  =\=_IN_GG(x1, x2)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4, x5)  =  U9_GAA(x5)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x4)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x4)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x4)

U9_GGA(x1, x2, x3, x4, x5)  =  U9_GGA(x5)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(1, X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(1, X, Ret)
   TWOWAY_IN_GGA(Terminate, N, 1) -> U2_GGA(Terminate, N, <_in_gg(N, 0))
   TWOWAY_IN_GGA(Terminate, N, 1) -> <_IN_GG(N, 0)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U3_GGA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GGA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, 1) -> U2_GAA(Terminate, N, <_in_ag(N, 0))
   TWOWAY_IN_GAA(Terminate, N, 1) -> <_IN_AG(N, 0)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U7_GGA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GGA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U2_GAA(x1, x2, x3)  =  U2_GAA(x3)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U5_GAA(x1, x2, x3, x4, x5)  =  U5_GAA(x5)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

=\=_IN_GG(x1, x2)  =  =\=_IN_GG(x1, x2)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4, x5)  =  U9_GAA(x5)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x4)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x4)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x4)

U9_GGA(x1, x2, x3, x4, x5)  =  U9_GGA(x5)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 32 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

1  =  1

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg

+(x1, x2)  =  +(x2)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_in_gg(Terminate, 1)) at position [1] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg),TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =:=_in_gg(x0, x1)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_in_ag(-(1))) at position [1] we obtained the following new rules [LPAR04]:

   (U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag),U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1)) at position [1] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg),TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   =\=_in_gg(X0, X1) -> =\=_out_gg

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =\=_in_gg(x0, x1)


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_in_ag(+(1))) at position [1] we obtained the following new rules [LPAR04]:

   (U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_out_ag),U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_out_ag))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_out_ag)

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
   U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg)
   U7_GAA(Terminate, =\=_out_gg) -> U8_GAA(Terminate, is_out_ag)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = TWOWAY_IN_GAA(Terminate) evaluates to  t =TWOWAY_IN_GAA(Terminate)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg)
with rule TWOWAY_IN_GAA(Terminate') -> U3_GAA(Terminate', =:=_out_gg) at position [] and matcher [Terminate' / Terminate]

U3_GAA(Terminate, =:=_out_gg) -> U4_GAA(Terminate, is_out_ag)
with rule U3_GAA(Terminate', =:=_out_gg) -> U4_GAA(Terminate', is_out_ag) at position [] and matcher [Terminate' / Terminate]

U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)
with rule U4_GAA(Terminate, is_out_ag) -> TWOWAY_IN_GAA(Terminate)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(36)
NO

----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,f)

twoWay_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x2, x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x1, x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x1, x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x1, x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x1, x2, x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x2, x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x1, x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x1, x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x1, x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x1, x2, x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(1, X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(1, X, Ret)
   TWOWAY_IN_GGA(Terminate, N, 1) -> U2_GGA(Terminate, N, <_in_gg(N, 0))
   TWOWAY_IN_GGA(Terminate, N, 1) -> <_IN_GG(N, 0)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U3_GGA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GGA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, 1) -> U2_GAA(Terminate, N, <_in_ag(N, 0))
   TWOWAY_IN_GAA(Terminate, N, 1) -> <_IN_AG(N, 0)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U7_GGA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GGA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x2, x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x1, x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x1, x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x1, x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x1, x2, x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x2, x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x1, x2, x5)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U2_GAA(x1, x2, x3)  =  U2_GAA(x1, x3)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U5_GAA(x1, x2, x3, x4, x5)  =  U5_GAA(x1, x5)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

=\=_IN_GG(x1, x2)  =  =\=_IN_GG(x1, x2)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4, x5)  =  U9_GAA(x1, x5)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4, x5)  =  U9_GGA(x1, x2, x5)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(1, X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(1, X, Ret)
   TWOWAY_IN_GGA(Terminate, N, 1) -> U2_GGA(Terminate, N, <_in_gg(N, 0))
   TWOWAY_IN_GGA(Terminate, N, 1) -> <_IN_GG(N, 0)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U3_GGA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GGA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GGA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GGA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, 1) -> U2_GAA(Terminate, N, <_in_ag(N, 0))
   TWOWAY_IN_GAA(Terminate, N, 1) -> <_IN_AG(N, 0)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =:=_IN_GG(Terminate, 1)
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> IS_IN_AG(M, -(N, 1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GAA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GAA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GAA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GAA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U5_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U7_GGA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =\=_IN_GG(Terminate, 1)
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GGA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U7_GGA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> IS_IN_AG(M, +(N, 1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_GGA(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U8_GGA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_GGA(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U9_GGA(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> IS_IN_AG(Ret, *(Ret1, M))

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x2, x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x1, x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x1, x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x1, x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x1, x2, x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x2, x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x1, x2, x5)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U2_GAA(x1, x2, x3)  =  U2_GAA(x1, x3)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U5_GAA(x1, x2, x3, x4, x5)  =  U5_GAA(x1, x5)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

=\=_IN_GG(x1, x2)  =  =\=_IN_GG(x1, x2)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4, x5)  =  U9_GAA(x1, x5)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4, x5)  =  U9_GGA(x1, x2, x5)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 32 less nodes.
----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(1, X, Ret))
   twoWay_in_gga(Terminate, N, 1) -> U2_gga(Terminate, N, <_in_gg(N, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U2_gga(Terminate, N, <_out_gg(N, 0)) -> twoWay_out_gga(Terminate, N, 1)
   twoWay_in_gga(Terminate, N, Ret) -> U3_gga(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U3_gga(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gga(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_gga(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, 1) -> U2_gaa(Terminate, N, <_in_ag(N, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U2_gaa(Terminate, N, <_out_ag(N, 0)) -> twoWay_out_gaa(Terminate, N, 1)
   twoWay_in_gaa(Terminate, N, Ret) -> U3_gaa(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_gaa(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_gaa(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_gaa(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> U5_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   twoWay_in_gaa(Terminate, N, Ret) -> U7_gaa(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)
   U7_gaa(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gaa(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gaa(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gaa(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gaa(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gaa(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gaa(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gaa(Terminate, N, Ret)
   U5_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U6_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U6_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   twoWay_in_gga(Terminate, N, Ret) -> U7_gga(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_gga(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_gga(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_gga(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> U9_gga(Terminate, N, Ret, M, twoWay_in_gaa(Terminate, M, Ret1))
   U9_gga(Terminate, N, Ret, M, twoWay_out_gaa(Terminate, M, Ret1)) -> U10_gga(Terminate, N, Ret, is_in_ag(Ret, *(Ret1, M)))
   U10_gga(Terminate, N, Ret, is_out_ag(Ret, *(Ret1, M))) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(1, X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

0  =  0

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x2, x5)

twoWay_in_gaa(x1, x2, x3)  =  twoWay_in_gaa(x1)

U2_gaa(x1, x2, x3)  =  U2_gaa(x1, x3)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

twoWay_out_gaa(x1, x2, x3)  =  twoWay_out_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

U5_gaa(x1, x2, x3, x4, x5)  =  U5_gaa(x1, x5)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

+(x1, x2)  =  +(x2)

U9_gaa(x1, x2, x3, x4, x5)  =  U9_gaa(x1, x5)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

*(x1, x2)  =  *

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5)  =  U9_gga(x1, x2, x5)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate, N, Ret) -> U3_GAA(Terminate, N, Ret, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, N, Ret, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, N, Ret, is_in_ag(M, -(N, 1)))
   U4_GAA(Terminate, N, Ret, is_out_ag(M, -(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)
   TWOWAY_IN_GAA(Terminate, N, Ret) -> U7_GAA(Terminate, N, Ret, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, N, Ret, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, N, Ret, is_in_ag(M, +(N, 1)))
   U8_GAA(Terminate, N, Ret, is_out_ag(M, +(N, 1))) -> TWOWAY_IN_GAA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

1  =  1

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x2)

=\=_in_gg(x1, x2)  =  =\=_in_gg(x1, x2)

=\=_out_gg(x1, x2)  =  =\=_out_gg(x1, x2)

+(x1, x2)  =  +(x2)

TWOWAY_IN_GAA(x1, x2, x3)  =  TWOWAY_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_in_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_in_gg(Terminate, 1)) at position [1] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1)),TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1)))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =:=_in_gg(x0, x1)


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_in_ag(-(1)))
   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_in_ag(-(1))) at position [1] we obtained the following new rules [LPAR04]:

   (U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1))),U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1))))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_in_gg(Terminate, 1)) at position [1] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1)),TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1)))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   =\=_in_gg(X0, X1) -> =\=_out_gg(X0, X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   =\=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =\=_in_gg(x0, x1)


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1)))
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_in_ag(+(1))) at position [1] we obtained the following new rules [LPAR04]:

   (U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_out_ag(+(1))),U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_out_ag(+(1))))


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_out_ag(+(1)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_out_ag(+(1)))

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(65) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GAA(Terminate, is_out_ag(-(1))) -> TWOWAY_IN_GAA(Terminate)
   U8_GAA(Terminate, is_out_ag(+(1))) -> TWOWAY_IN_GAA(Terminate)
   TWOWAY_IN_GAA(Terminate) -> U3_GAA(Terminate, =:=_out_gg(Terminate, 1))
   U3_GAA(Terminate, =:=_out_gg(Terminate, 1)) -> U4_GAA(Terminate, is_out_ag(-(1)))
   TWOWAY_IN_GAA(Terminate) -> U7_GAA(Terminate, =\=_out_gg(Terminate, 1))
   U7_GAA(Terminate, =\=_out_gg(Terminate, 1)) -> U8_GAA(Terminate, is_out_ag(+(1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(67) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(68)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), ','(isLess(X, X1), !))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(!, ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(!, ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
nounify(X, Y) :- \+(=(X, Y)).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: main(g,a)
----------------------------------------

(69) NotTransformerProof (EQUIVALENT)
Transformed all not-constructs [PROLOG].
----------------------------------------

(70)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), ','(isLess(X, X1), !))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(!, ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(!, ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not(X, Y) :- ','(call(=(X, Y)), ','(!, fail)).
not(X, Y).


Query: main(g,a)
----------------------------------------

(71) CallTransformerProof (EQUIVALENT)
Transformed all call-constructs [PROLOG].
----------------------------------------

(72)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), ','(isLess(X, X1), !))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(!, ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(!, ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not(X, Y) :- ','(call1(X, Y), ','(!, fail)).
not(X, Y).
call1(X, Y) :- =(X, Y).


Query: main(g,a)
----------------------------------------

(73) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(74)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), isLess(X, X1))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).


Query: main(g,a)
----------------------------------------

(75) FailTransformerProof (EQUIVALENT)
Added clauses for the built-in fail predicate [PROLOG].
----------------------------------------

(76)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), isLess(X, X1))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).
fail :- failure(a).
failure(b).


Query: main(g,a)
----------------------------------------

(77) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(78)
Obligation:
Clauses:

main(X, Ret) :- twoWay(succ(zero), X, Ret).
twoWay(Terminate, N, succ(zero)) :- ','(=(X, N), ','(=(X1, zero), isLess(X, X1))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(=(X, X1), ','(isMinus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
twoWay(Terminate, N, Ret) :- ','(=(X, Terminate), ','(=(X1, succ(zero)), ','(nounify(X, X1), ','(isPlus(N, succ(zero), U), ','(=(M, U), ','(twoWay(Terminate, M, Ret1), ','(isTimes(Ret1, M, U), =(Ret, U)))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).
fail :- failure(a).
failure(b).
=(X, X).


Query: main(g,a)
----------------------------------------

(79) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,f)

twoWay_in_3: (b,b,f)

isLess_in_2: (b,b)

isMinus_in_3: (b,b,f) (b,b,b)

isTimes_in_3: (b,b,b) (b,b,f)

isPlus_in_3: (b,b,f) (b,b,b)

nounify_in_2: (b,b)

not_in_2: (b,b)

call1_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(80)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)



----------------------------------------

(81) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(succ(zero), X, Ret)
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> U2_GGA(Terminate, N, =_in_ag(X, N))
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> =_IN_AG(X, N)
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> U3_GGA(Terminate, N, X, =_in_ag(X1, zero))
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> U4_GGA(Terminate, N, isLess_in_gg(X, X1))
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U53_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U54_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =_IN_AG(X, Terminate)
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> =_IN_AG(X1, succ(zero))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> =_IN_GG(X, X1)
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(N, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U24_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U25_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U26_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U27_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U28_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U29_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> U30_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> U30_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> U32_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> U34_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> U36_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGA(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGA(A, pred(X), Z)
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGA(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGA(A, pred(X), Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U20_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U21_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U22_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGA(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGA(A, succ(X), Z)
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGA(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGA(A, succ(X), Z)
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGG(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGG(A, succ(X), Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U20_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U21_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U22_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> U32_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGG(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGG(A, succ(X), Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U24_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U25_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U26_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U27_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U28_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U29_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> U34_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGG(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGG(A, pred(X), Z)
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> U36_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGG(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGG(A, pred(X), Z)
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> NOUNIFY_IN_GG(X, X1)
   NOUNIFY_IN_GG(X, Y) -> U19_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U55_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U57_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> U56_GG(X, Y, fail_in_)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U58_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x3, x4)

U4_GGA(x1, x2, x3)  =  U4_GGA(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x2, x6)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U24_GGA(x1, x2, x3)  =  U24_GGA(x1, x3)

U25_GGA(x1, x2, x3)  =  U25_GGA(x1, x3)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x1, x2, x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x1, x2, x4)

U28_GGA(x1, x2, x3, x4)  =  U28_GGA(x1, x2, x4)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x2, x6, x7)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x1, x2, x4, x5, x6)

U11_GGA(x1, x2, x3, x4, x5)  =  U11_GGA(x1, x2, x4, x5)

ISTIMES_IN_GGG(x1, x2, x3)  =  ISTIMES_IN_GGG(x1, x2, x3)

U30_GGG(x1, x2, x3, x4)  =  U30_GGG(x1, x2, x3, x4)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4)  =  U32_GGA(x1, x2, x4)

U34_GGA(x1, x2, x3, x4)  =  U34_GGA(x1, x2, x4)

U36_GGA(x1, x2, x3, x4)  =  U36_GGA(x1, x2, x4)

U37_GGA(x1, x2, x3, x4)  =  U37_GGA(x1, x2, x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x1, x2, x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U20_GGA(x1, x2, x3, x4)  =  U20_GGA(x1, x2, x4)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4)  =  U22_GGA(x1, x2, x4)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U33_GGA(x1, x2, x3, x4)  =  U33_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U31_GGG(x1, x2, x3, x4)  =  U31_GGG(x1, x2, x3, x4)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U20_GGG(x1, x2, x3, x4)  =  U20_GGG(x1, x2, x3, x4)

U21_GGG(x1, x2, x3, x4)  =  U21_GGG(x1, x2, x3, x4)

U22_GGG(x1, x2, x3, x4)  =  U22_GGG(x1, x2, x3, x4)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x1, x2, x3, x4)

U32_GGG(x1, x2, x3, x4)  =  U32_GGG(x1, x2, x3, x4)

U33_GGG(x1, x2, x3, x4)  =  U33_GGG(x1, x2, x3, x4)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U24_GGG(x1, x2, x3)  =  U24_GGG(x1, x2, x3)

U25_GGG(x1, x2, x3)  =  U25_GGG(x1, x2, x3)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x1, x2, x3, x4)

U27_GGG(x1, x2, x3, x4)  =  U27_GGG(x1, x2, x3, x4)

U28_GGG(x1, x2, x3, x4)  =  U28_GGG(x1, x2, x3, x4)

U29_GGG(x1, x2, x3, x4)  =  U29_GGG(x1, x2, x3, x4)

U34_GGG(x1, x2, x3, x4)  =  U34_GGG(x1, x2, x3, x4)

U35_GGG(x1, x2, x3, x4)  =  U35_GGG(x1, x2, x3, x4)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x2, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x1, x2, x3, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U55_GG(x1, x2, x3)  =  U55_GG(x1, x2, x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x1, x2, x3)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

FAIL_IN_  =  FAIL_IN_

U58_^1(x1)  =  U58_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x2, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x2, x6, x7)

U16_GGA(x1, x2, x3, x4, x5, x6)  =  U16_GGA(x1, x2, x4, x5, x6)

U17_GGA(x1, x2, x3, x4, x5)  =  U17_GGA(x1, x2, x4, x5)

U18_GGA(x1, x2, x3, x4)  =  U18_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(82)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(succ(zero), X, Ret)
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> U2_GGA(Terminate, N, =_in_ag(X, N))
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> =_IN_AG(X, N)
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> U3_GGA(Terminate, N, X, =_in_ag(X1, zero))
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> U4_GGA(Terminate, N, isLess_in_gg(X, X1))
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U53_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U54_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =_IN_AG(X, Terminate)
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> =_IN_AG(X1, succ(zero))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> =_IN_GG(X, X1)
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(N, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U24_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U25_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U26_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U27_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U28_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U29_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> U30_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> U30_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> U32_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> U34_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> U36_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGA(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGA(A, pred(X), Z)
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGA(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGA(A, pred(X), Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U20_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U21_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U22_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGA(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGA(A, succ(X), Z)
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGA(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGA(A, succ(X), Z)
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGG(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGG(A, succ(X), Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U20_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U21_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U22_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> U32_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGG(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGG(A, succ(X), Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U24_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U25_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U26_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U27_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U28_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U29_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> U34_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGG(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGG(A, pred(X), Z)
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> U36_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGG(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGG(A, pred(X), Z)
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> NOUNIFY_IN_GG(X, X1)
   NOUNIFY_IN_GG(X, Y) -> U19_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U55_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U57_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> U56_GG(X, Y, fail_in_)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U58_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x3, x4)

U4_GGA(x1, x2, x3)  =  U4_GGA(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x2, x6)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U24_GGA(x1, x2, x3)  =  U24_GGA(x1, x3)

U25_GGA(x1, x2, x3)  =  U25_GGA(x1, x3)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x1, x2, x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x1, x2, x4)

U28_GGA(x1, x2, x3, x4)  =  U28_GGA(x1, x2, x4)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x2, x6, x7)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x1, x2, x4, x5, x6)

U11_GGA(x1, x2, x3, x4, x5)  =  U11_GGA(x1, x2, x4, x5)

ISTIMES_IN_GGG(x1, x2, x3)  =  ISTIMES_IN_GGG(x1, x2, x3)

U30_GGG(x1, x2, x3, x4)  =  U30_GGG(x1, x2, x3, x4)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4)  =  U32_GGA(x1, x2, x4)

U34_GGA(x1, x2, x3, x4)  =  U34_GGA(x1, x2, x4)

U36_GGA(x1, x2, x3, x4)  =  U36_GGA(x1, x2, x4)

U37_GGA(x1, x2, x3, x4)  =  U37_GGA(x1, x2, x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x1, x2, x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U20_GGA(x1, x2, x3, x4)  =  U20_GGA(x1, x2, x4)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4)  =  U22_GGA(x1, x2, x4)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U33_GGA(x1, x2, x3, x4)  =  U33_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U31_GGG(x1, x2, x3, x4)  =  U31_GGG(x1, x2, x3, x4)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U20_GGG(x1, x2, x3, x4)  =  U20_GGG(x1, x2, x3, x4)

U21_GGG(x1, x2, x3, x4)  =  U21_GGG(x1, x2, x3, x4)

U22_GGG(x1, x2, x3, x4)  =  U22_GGG(x1, x2, x3, x4)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x1, x2, x3, x4)

U32_GGG(x1, x2, x3, x4)  =  U32_GGG(x1, x2, x3, x4)

U33_GGG(x1, x2, x3, x4)  =  U33_GGG(x1, x2, x3, x4)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U24_GGG(x1, x2, x3)  =  U24_GGG(x1, x2, x3)

U25_GGG(x1, x2, x3)  =  U25_GGG(x1, x2, x3)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x1, x2, x3, x4)

U27_GGG(x1, x2, x3, x4)  =  U27_GGG(x1, x2, x3, x4)

U28_GGG(x1, x2, x3, x4)  =  U28_GGG(x1, x2, x3, x4)

U29_GGG(x1, x2, x3, x4)  =  U29_GGG(x1, x2, x3, x4)

U34_GGG(x1, x2, x3, x4)  =  U34_GGG(x1, x2, x3, x4)

U35_GGG(x1, x2, x3, x4)  =  U35_GGG(x1, x2, x3, x4)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x2, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x1, x2, x3, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U55_GG(x1, x2, x3)  =  U55_GG(x1, x2, x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x1, x2, x3)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

FAIL_IN_  =  FAIL_IN_

U58_^1(x1)  =  U58_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x2, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x2, x6, x7)

U16_GGA(x1, x2, x3, x4, x5, x6)  =  U16_GGA(x1, x2, x4, x5, x6)

U17_GGA(x1, x2, x3, x4, x5)  =  U17_GGA(x1, x2, x4, x5)

U18_GGA(x1, x2, x3, x4)  =  U18_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(83) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 10 SCCs with 86 less nodes.
----------------------------------------

(84)
Complex Obligation (AND)

----------------------------------------

(85)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(86) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(87)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(88) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(90) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


----------------------------------------

(91)
YES

----------------------------------------

(92)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(93) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(94)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(95) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(97) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


----------------------------------------

(98)
YES

----------------------------------------

(99)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(100) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(101)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(102) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(103)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(104) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


----------------------------------------

(105)
YES

----------------------------------------

(106)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(107) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(108)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(109) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(111) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(112)
YES

----------------------------------------

(113)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(114) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(115)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(116) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(117)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(118) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(119)
YES

----------------------------------------

(120)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(121) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(122)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(123) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(125) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(126)
YES

----------------------------------------

(127)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(128) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(129)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(130) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(131)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
   ISTIMES_IN_GGA(succ(X), succ(Y)) -> ISTIMES_IN_GGA(succ(X), Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(132) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISTIMES_IN_GGA(succ(X), pred(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISTIMES_IN_GGA(succ(X), succ(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(133)
YES

----------------------------------------

(134)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(135) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(136)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(137) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
   ISTIMES_IN_GGA(pred(X), succ(Y)) -> ISTIMES_IN_GGA(pred(X), Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(139) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISTIMES_IN_GGA(pred(X), pred(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISTIMES_IN_GGA(pred(X), succ(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(140)
YES

----------------------------------------

(141)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(142) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(143)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(144) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(145)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(146) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(147)
YES

----------------------------------------

(148)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x1, x2, x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x2, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x2, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x1, x2, x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg(x1, x2, x3)

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x2, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x1, x2, x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x2, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x2, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x2, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x1, x2, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x1, x2, x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x1, x2, x3, x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x1, x2, x3, x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x1, x2, x3, x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x1, x2, x3, x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x1, x2, x3, x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x2, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x1, x2, x3, x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U24_ggg(x1, x2, x3)  =  U24_ggg(x1, x2, x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x1, x2, x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x1, x2, x3, x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x1, x2, x3, x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x1, x2, x3, x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x1, x2, x3, x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x2, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x1, x2, x3, x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x2, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x2, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x1, x2, x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x1, x2, x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x1, x2, x4)

main_out_ga(x1, x2)  =  main_out_ga(x1, x2)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x2, x6)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x2, x6, x7)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x2, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x2, x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(149) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(150)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

zero  =  zero

pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U24_gga(x1, x2, x3)  =  U24_gga(x1, x3)

U25_gga(x1, x2, x3)  =  U25_gga(x1, x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x1, x2, x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x1, x2, x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x1, x2, x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x1, x2, x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

call1_out_gg(x1, x2)  =  call1_out_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg(x1, x2)

nounify_out_gg(x1, x2)  =  nounify_out_gg(x1, x2)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x2, x6)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x2, x6, x7)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x2, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x2, x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(151) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(152)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_in_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero)))
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_in_ag(U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_in_ag(U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(153) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_in_ag(Terminate)) at position [2] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate)),TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate)))


----------------------------------------

(154)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero)))
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_in_ag(U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_in_ag(U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(155) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero))) at position [3] we obtained the following new rules [LPAR04]:

   (U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero))),U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero))))


----------------------------------------

(156)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_in_ag(U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_in_ag(U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(157) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_in_ag(U)) at position [3] we obtained the following new rules [LPAR04]:

   (U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U)),U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U)))


----------------------------------------

(158)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_in_ag(U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(159) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_in_ag(U)) at position [3] we obtained the following new rules [LPAR04]:

   (U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U)),U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U)))


----------------------------------------

(160)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(161) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(162)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(163) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(164)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(165) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, =_in_gg(X, X1)) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0)),U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0)))


----------------------------------------

(166)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(167) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(Terminate, N, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1)) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1))),U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1))))


----------------------------------------

(168)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(169) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(170)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(171) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   nounify_in_gg(x0, x1)


----------------------------------------

(172)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(173) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_in_gg(x0, x1))) at position [2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1)))),U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1)))))
   (U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1))),U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1))))


----------------------------------------

(174)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(175) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(176)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))

The TRS R consists of the following rules:

   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   not_in_gg(x0, x1)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(177) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   not_in_gg(x0, x1)


----------------------------------------

(178)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))

The TRS R consists of the following rules:

   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(179) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, call1_in_gg(x0, x1)))) at position [2,2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1))))),U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1))))))


----------------------------------------

(180)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(181) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(182)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   call1_in_gg(x0, x1)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(183) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   call1_in_gg(x0, x1)


----------------------------------------

(184)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(185) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, not_out_gg(x0, x1))) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1)),U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1)))


----------------------------------------

(186)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1)))))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(187) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x1, U55_gg(x0, x1, U57_gg(x0, x1, =_in_gg(x0, x1))))) at position [2,2,2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0))))),U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0))))))


----------------------------------------

(188)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0)))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg(X, X)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(189) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(190)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0)))))

The TRS R consists of the following rules:

   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(191) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_gg(x0, x1)


----------------------------------------

(192)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0)))))

The TRS R consists of the following rules:

   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(193) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, U57_gg(x0, x0, =_out_gg(x0, x0))))) at position [2,2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0)))),U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0)))))


----------------------------------------

(194)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0))))

The TRS R consists of the following rules:

   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(195) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(196)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0))))

The TRS R consists of the following rules:

   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   U57_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(197) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U57_gg(x0, x1, x2)


----------------------------------------

(198)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0))))

The TRS R consists of the following rules:

   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(199) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U55_gg(x0, x0, call1_out_gg(x0, x0)))) at position [2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_))),U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_))))


----------------------------------------

(200)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_)))

The TRS R consists of the following rules:

   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(201) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(202)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_)))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U55_gg(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(203) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U55_gg(x0, x1, x2)


----------------------------------------

(204)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_)))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(205) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, fail_in_))) at position [2,2,2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, U58_(failure_in_g(a))))),U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, U58_(failure_in_g(a))))))


----------------------------------------

(206)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U13_GGA(y0, y1, U19_gg(x0, x0, U56_gg(x0, x0, U58_(failure_in_g(a)))))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(207) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(208)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(209) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(210)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U19_gg(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(211) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U19_gg(x0, x1, x2)
   U56_gg(x0, x1, x2)
   fail_in_


----------------------------------------

(212)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(213) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U9_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M) we obtained the following new rules [LPAR04]:

   (U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2),U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2))


----------------------------------------

(214)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(215) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U5_GGA(Terminate, N, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero), succ(zero))) we obtained the following new rules [LPAR04]:

   (U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))),U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))))


----------------------------------------

(216)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(217) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0, succ(zero))) -> U7_GGA(y0, y1, =_out_gg(x0, x0)) we obtained the following new rules [LPAR04]:

   (U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero))),U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero))))


----------------------------------------

(218)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(219) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGA(Terminate, N, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, isMinus_in_gga(N, succ(zero))) we obtained the following new rules [LPAR04]:

   (U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero))),U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero))))


----------------------------------------

(220)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(221) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGA(Terminate, N, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, U, =_out_ag(U, U)) we obtained the following new rules [LPAR04]:

   (U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2)),U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2)))


----------------------------------------

(222)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(223) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1, succ(zero))) -> U13_GGA(y0, y1, nounify_out_gg(x0, x1)) we obtained the following new rules [LPAR04]:

   (U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))),U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))))


----------------------------------------

(224)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(225) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_GGA(Terminate, N, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, isPlus_in_gga(N, succ(zero))) we obtained the following new rules [LPAR04]:

   (U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero))),U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero))))


----------------------------------------

(226)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(227) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U15_GGA(Terminate, N, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M) we obtained the following new rules [LPAR04]:

   (U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2),U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2))


----------------------------------------

(228)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(229) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U9_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2) we obtained the following new rules [LPAR04]:

   (U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1),U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1))


----------------------------------------

(230)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(231) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(zero, pred(Y)) -> U25_gga(Y, isMinus_in_gga(zero, Y))
   U29_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U27_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1, x_2)) = 0
   POL(=_out_gg(x_1, x_2)) = 2
   POL(TWOWAY_IN_GGA(x_1, x_2)) = 0
   POL(U13_GGA(x_1, x_2, x_3)) = 0
   POL(U14_GGA(x_1, x_2, x_3)) = 0
   POL(U15_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(U20_gga(x_1, x_2, x_3)) = 0
   POL(U21_gga(x_1, x_2, x_3)) = 0
   POL(U22_gga(x_1, x_2, x_3)) = 0
   POL(U23_gga(x_1, x_2, x_3)) = 0
   POL(U24_gga(x_1, x_2)) = 2*x_2
   POL(U25_gga(x_1, x_2)) = x_2
   POL(U26_gga(x_1, x_2, x_3)) = 2*x_3
   POL(U27_gga(x_1, x_2, x_3)) = 2 + x_3
   POL(U28_gga(x_1, x_2, x_3)) = x_3
   POL(U29_gga(x_1, x_2, x_3)) = 2 + x_3
   POL(U5_GGA(x_1, x_2, x_3)) = 0
   POL(U6_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(U7_GGA(x_1, x_2, x_3)) = 0
   POL(U8_GGA(x_1, x_2, x_3)) = 2*x_3
   POL(U9_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(isMinus_in_gga(x_1, x_2)) = x_2
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(isPlus_in_gga(x_1, x_2)) = 0
   POL(isPlus_out_gga(x_1, x_2, x_3)) = 0
   POL(nounify_out_gg(x_1, x_2)) = 1 + x_1
   POL(pred(x_1)) = 2 + x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(232)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U25_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(233) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(234)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U25_gga(x0, x1)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(235) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U25_gga(x0, x1)


----------------------------------------

(236)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(237) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(X, Y, isPlus_in_gga(X, Y))
   U21_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1, x_2)) = 0
   POL(=_out_gg(x_1, x_2)) = 2
   POL(TWOWAY_IN_GGA(x_1, x_2)) = 0
   POL(U13_GGA(x_1, x_2, x_3)) = 0
   POL(U14_GGA(x_1, x_2, x_3)) = 2*x_3
   POL(U15_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(U20_gga(x_1, x_2, x_3)) = x_3
   POL(U21_gga(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U22_gga(x_1, x_2, x_3)) = x_3
   POL(U23_gga(x_1, x_2, x_3)) = 2*x_3
   POL(U24_gga(x_1, x_2)) = 0
   POL(U26_gga(x_1, x_2, x_3)) = 0
   POL(U27_gga(x_1, x_2, x_3)) = 0
   POL(U28_gga(x_1, x_2, x_3)) = 0
   POL(U29_gga(x_1, x_2, x_3)) = 0
   POL(U5_GGA(x_1, x_2, x_3)) = 0
   POL(U6_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(U7_GGA(x_1, x_2, x_3)) = 0
   POL(U8_GGA(x_1, x_2, x_3)) = 0
   POL(U9_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(isMinus_in_gga(x_1, x_2)) = 0
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(isPlus_in_gga(x_1, x_2)) = x_2
   POL(isPlus_out_gga(x_1, x_2, x_3)) = 0
   POL(nounify_out_gg(x_1, x_2)) = 2 + x_1
   POL(pred(x_1)) = 2 + 2*x_1
   POL(succ(x_1)) = x_1
   POL(zero) = 0


----------------------------------------

(238)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U23_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(239) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(240)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)
   U23_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(241) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U23_gga(x0, x1, x2)


----------------------------------------

(242)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate, Terminate))
   U14_GGA(Terminate, N, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, U, =_out_ag(U, U))
   U5_GGA(z0, z1, =_out_ag(z0, z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero), succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg(succ(zero), succ(zero)))
   U7_GGA(succ(zero), z0, =_out_gg(succ(zero), succ(zero))) -> U8_GGA(succ(zero), z0, isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), z0, isMinus_out_gga(z0, succ(zero), x2)) -> U9_GGA(succ(zero), z0, x2, =_out_ag(x2, x2))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero), succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero)))
   U13_GGA(z0, z1, nounify_out_gg(z0, succ(zero))) -> U14_GGA(z0, z1, isPlus_in_gga(z1, succ(zero)))
   U15_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> TWOWAY_IN_GGA(z0, z2)
   U9_GGA(succ(zero), z0, z1, =_out_ag(z1, z1)) -> TWOWAY_IN_GGA(succ(zero), z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   U22_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U20_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(X, Y, isMinus_in_gga(X, Y))
   U28_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U26_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U24_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0, x1)
   U26_gga(x0, x1, x2)
   U28_gga(x0, x1, x2)
   U20_gga(x0, x1, x2)
   U22_gga(x0, x1, x2)
   U27_gga(x0, x1, x2)
   U29_gga(x0, x1, x2)
   U21_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(243) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,f)

twoWay_in_3: (b,b,f)

isLess_in_2: (b,b)

isMinus_in_3: (b,b,f) (b,b,b)

isTimes_in_3: (b,b,b) (b,b,f)

isPlus_in_3: (b,b,f) (b,b,b)

nounify_in_2: (b,b)

not_in_2: (b,b)

call1_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(244)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)



----------------------------------------

(245) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(succ(zero), X, Ret)
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> U2_GGA(Terminate, N, =_in_ag(X, N))
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> =_IN_AG(X, N)
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> U3_GGA(Terminate, N, X, =_in_ag(X1, zero))
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> U4_GGA(Terminate, N, isLess_in_gg(X, X1))
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U53_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U54_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =_IN_AG(X, Terminate)
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> =_IN_AG(X1, succ(zero))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> =_IN_GG(X, X1)
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(N, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U24_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U25_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U26_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U27_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U28_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U29_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> U30_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> U30_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> U32_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> U34_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> U36_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGA(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGA(A, pred(X), Z)
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGA(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGA(A, pred(X), Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U20_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U21_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U22_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGA(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGA(A, succ(X), Z)
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGA(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGA(A, succ(X), Z)
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGG(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGG(A, succ(X), Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U20_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U21_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U22_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> U32_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGG(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGG(A, succ(X), Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U24_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U25_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U26_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U27_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U28_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U29_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> U34_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGG(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGG(A, pred(X), Z)
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> U36_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGG(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGG(A, pred(X), Z)
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> NOUNIFY_IN_GG(X, X1)
   NOUNIFY_IN_GG(X, Y) -> U19_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U55_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U57_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> U56_GG(X, Y, fail_in_)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U58_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x3, x4)

U4_GGA(x1, x2, x3)  =  U4_GGA(x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U53_GG(x1, x2, x3)  =  U53_GG(x3)

U54_GG(x1, x2, x3)  =  U54_GG(x3)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x6)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U24_GGA(x1, x2, x3)  =  U24_GGA(x3)

U25_GGA(x1, x2, x3)  =  U25_GGA(x3)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x4)

U28_GGA(x1, x2, x3, x4)  =  U28_GGA(x4)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x4)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x6, x7)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x4, x5, x6)

U11_GGA(x1, x2, x3, x4, x5)  =  U11_GGA(x4, x5)

ISTIMES_IN_GGG(x1, x2, x3)  =  ISTIMES_IN_GGG(x1, x2, x3)

U30_GGG(x1, x2, x3, x4)  =  U30_GGG(x1, x3, x4)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4)  =  U32_GGA(x1, x4)

U34_GGA(x1, x2, x3, x4)  =  U34_GGA(x1, x4)

U36_GGA(x1, x2, x3, x4)  =  U36_GGA(x1, x4)

U37_GGA(x1, x2, x3, x4)  =  U37_GGA(x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U20_GGA(x1, x2, x3, x4)  =  U20_GGA(x4)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x4)

U22_GGA(x1, x2, x3, x4)  =  U22_GGA(x4)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x4)

U33_GGA(x1, x2, x3, x4)  =  U33_GGA(x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x4)

U31_GGG(x1, x2, x3, x4)  =  U31_GGG(x4)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U20_GGG(x1, x2, x3, x4)  =  U20_GGG(x4)

U21_GGG(x1, x2, x3, x4)  =  U21_GGG(x4)

U22_GGG(x1, x2, x3, x4)  =  U22_GGG(x4)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x4)

U32_GGG(x1, x2, x3, x4)  =  U32_GGG(x1, x3, x4)

U33_GGG(x1, x2, x3, x4)  =  U33_GGG(x4)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U24_GGG(x1, x2, x3)  =  U24_GGG(x3)

U25_GGG(x1, x2, x3)  =  U25_GGG(x3)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x4)

U27_GGG(x1, x2, x3, x4)  =  U27_GGG(x4)

U28_GGG(x1, x2, x3, x4)  =  U28_GGG(x4)

U29_GGG(x1, x2, x3, x4)  =  U29_GGG(x4)

U34_GGG(x1, x2, x3, x4)  =  U34_GGG(x1, x3, x4)

U35_GGG(x1, x2, x3, x4)  =  U35_GGG(x4)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U19_GG(x1, x2, x3)  =  U19_GG(x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U55_GG(x1, x2, x3)  =  U55_GG(x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

U56_GG(x1, x2, x3)  =  U56_GG(x3)

FAIL_IN_  =  FAIL_IN_

U58_^1(x1)  =  U58_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x6, x7)

U16_GGA(x1, x2, x3, x4, x5, x6)  =  U16_GGA(x4, x5, x6)

U17_GGA(x1, x2, x3, x4, x5)  =  U17_GGA(x4, x5)

U18_GGA(x1, x2, x3, x4)  =  U18_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(246)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GA(X, Ret) -> U1_GA(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   MAIN_IN_GA(X, Ret) -> TWOWAY_IN_GGA(succ(zero), X, Ret)
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> U2_GGA(Terminate, N, =_in_ag(X, N))
   TWOWAY_IN_GGA(Terminate, N, succ(zero)) -> =_IN_AG(X, N)
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> U3_GGA(Terminate, N, X, =_in_ag(X1, zero))
   U2_GGA(Terminate, N, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> U4_GGA(Terminate, N, isLess_in_gg(X, X1))
   U3_GGA(Terminate, N, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U53_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U54_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   TWOWAY_IN_GGA(Terminate, N, Ret) -> =_IN_AG(X, Terminate)
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> =_IN_AG(X1, succ(zero))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> =_IN_GG(X, X1)
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(N, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U24_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U25_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U26_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U27_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U28_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U29_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U10_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> U30_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> U30_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> U32_GGA(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> U34_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> U36_GGA(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGA(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U36_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGA(A, pred(X), Z)
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGA(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   U34_GGA(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGA(A, pred(X), Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U20_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U21_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U22_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGA(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U32_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGA(A, succ(X), Z)
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGA(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U30_GGA(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGA(A, succ(X), Z)
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_GGG(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   U30_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISPLUS_IN_GGG(A, succ(X), Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U20_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U21_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U22_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> U32_GGG(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   ISTIMES_IN_GGG(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_GGG(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   U32_GGG(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> ISMINUS_IN_GGG(A, succ(X), Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U24_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U25_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U26_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U27_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U28_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U29_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> U34_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_GGG(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U34_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISPLUS_IN_GGG(A, pred(X), Z)
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> U36_GGG(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   ISTIMES_IN_GGG(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_GGG(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U36_GGG(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> ISMINUS_IN_GGG(A, pred(X), Z)
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U11_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> NOUNIFY_IN_GG(X, X1)
   NOUNIFY_IN_GG(X, Y) -> U19_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U55_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U57_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> U56_GG(X, Y, fail_in_)
   U55_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U58_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(M, U)
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_GGA(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_GGA(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U16_GGA(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> ISTIMES_IN_GGG(Ret1, M, U)
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_GGA(Terminate, N, Ret, =_in_ag(Ret, U))
   U17_GGA(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> =_IN_AG(Ret, U)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

MAIN_IN_GA(x1, x2)  =  MAIN_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x3, x4)

U4_GGA(x1, x2, x3)  =  U4_GGA(x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U53_GG(x1, x2, x3)  =  U53_GG(x3)

U54_GG(x1, x2, x3)  =  U54_GG(x3)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x6)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U24_GGA(x1, x2, x3)  =  U24_GGA(x3)

U25_GGA(x1, x2, x3)  =  U25_GGA(x3)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x4)

U28_GGA(x1, x2, x3, x4)  =  U28_GGA(x4)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x4)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x6, x7)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x4, x5, x6)

U11_GGA(x1, x2, x3, x4, x5)  =  U11_GGA(x4, x5)

ISTIMES_IN_GGG(x1, x2, x3)  =  ISTIMES_IN_GGG(x1, x2, x3)

U30_GGG(x1, x2, x3, x4)  =  U30_GGG(x1, x3, x4)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4)  =  U32_GGA(x1, x4)

U34_GGA(x1, x2, x3, x4)  =  U34_GGA(x1, x4)

U36_GGA(x1, x2, x3, x4)  =  U36_GGA(x1, x4)

U37_GGA(x1, x2, x3, x4)  =  U37_GGA(x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U20_GGA(x1, x2, x3, x4)  =  U20_GGA(x4)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x4)

U22_GGA(x1, x2, x3, x4)  =  U22_GGA(x4)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x4)

U33_GGA(x1, x2, x3, x4)  =  U33_GGA(x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x4)

U31_GGG(x1, x2, x3, x4)  =  U31_GGG(x4)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U20_GGG(x1, x2, x3, x4)  =  U20_GGG(x4)

U21_GGG(x1, x2, x3, x4)  =  U21_GGG(x4)

U22_GGG(x1, x2, x3, x4)  =  U22_GGG(x4)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x4)

U32_GGG(x1, x2, x3, x4)  =  U32_GGG(x1, x3, x4)

U33_GGG(x1, x2, x3, x4)  =  U33_GGG(x4)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U24_GGG(x1, x2, x3)  =  U24_GGG(x3)

U25_GGG(x1, x2, x3)  =  U25_GGG(x3)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x4)

U27_GGG(x1, x2, x3, x4)  =  U27_GGG(x4)

U28_GGG(x1, x2, x3, x4)  =  U28_GGG(x4)

U29_GGG(x1, x2, x3, x4)  =  U29_GGG(x4)

U34_GGG(x1, x2, x3, x4)  =  U34_GGG(x1, x3, x4)

U35_GGG(x1, x2, x3, x4)  =  U35_GGG(x4)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U19_GG(x1, x2, x3)  =  U19_GG(x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U55_GG(x1, x2, x3)  =  U55_GG(x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

U56_GG(x1, x2, x3)  =  U56_GG(x3)

FAIL_IN_  =  FAIL_IN_

U58_^1(x1)  =  U58_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x6, x7)

U16_GGA(x1, x2, x3, x4, x5, x6)  =  U16_GGA(x4, x5, x6)

U17_GGA(x1, x2, x3, x4, x5)  =  U17_GGA(x4, x5)

U18_GGA(x1, x2, x3, x4)  =  U18_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(247) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 10 SCCs with 86 less nodes.
----------------------------------------

(248)
Complex Obligation (AND)

----------------------------------------

(249)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(250) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(251)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(252) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(253)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(254) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


----------------------------------------

(255)
YES

----------------------------------------

(256)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(257) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(258)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(259) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(260)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(261) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


----------------------------------------

(262)
YES

----------------------------------------

(263)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(264) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(265)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(266) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(267)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(268) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


----------------------------------------

(269)
YES

----------------------------------------

(270)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(271) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(272)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(273) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(274)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(275) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(276)
YES

----------------------------------------

(277)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(278) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(279)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(280) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(281)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(282) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(283)
YES

----------------------------------------

(284)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(285) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(286)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(287) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(288)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(289) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(290)
YES

----------------------------------------

(291)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(292) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(293)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)
   ISTIMES_IN_GGA(succ(X), succ(Y), Z) -> ISTIMES_IN_GGA(succ(X), Y, A)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(294) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(295)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(succ(X), pred(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
   ISTIMES_IN_GGA(succ(X), succ(Y)) -> ISTIMES_IN_GGA(succ(X), Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(296) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISTIMES_IN_GGA(succ(X), pred(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISTIMES_IN_GGA(succ(X), succ(Y)) -> ISTIMES_IN_GGA(succ(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(297)
YES

----------------------------------------

(298)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(299) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(300)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)
   ISTIMES_IN_GGA(pred(X), succ(Y), Z) -> ISTIMES_IN_GGA(pred(X), Y, A)

R is empty.
The argument filtering Pi contains the following mapping:
pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

ISTIMES_IN_GGA(x1, x2, x3)  =  ISTIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(301) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(302)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISTIMES_IN_GGA(pred(X), pred(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
   ISTIMES_IN_GGA(pred(X), succ(Y)) -> ISTIMES_IN_GGA(pred(X), Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(303) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISTIMES_IN_GGA(pred(X), pred(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISTIMES_IN_GGA(pred(X), succ(Y)) -> ISTIMES_IN_GGA(pred(X), Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(304)
YES

----------------------------------------

(305)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(306) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(307)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(308) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(309)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(310) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(311)
YES

----------------------------------------

(312)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   main_in_ga(X, Ret) -> U1_ga(X, Ret, twoWay_in_gga(succ(zero), X, Ret))
   twoWay_in_gga(Terminate, N, succ(zero)) -> U2_gga(Terminate, N, =_in_ag(X, N))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U2_gga(Terminate, N, =_out_ag(X, N)) -> U3_gga(Terminate, N, X, =_in_ag(X1, zero))
   U3_gga(Terminate, N, X, =_out_ag(X1, zero)) -> U4_gga(Terminate, N, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U53_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U54_gg(X, Y, isLess_in_gg(X, Y))
   U54_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U53_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U4_gga(Terminate, N, isLess_out_gg(X, X1)) -> twoWay_out_gga(Terminate, N, succ(zero))
   twoWay_in_gga(Terminate, N, Ret) -> U5_gga(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_gga(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_gga(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_gga(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U7_gga(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_gga(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U8_gga(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U10_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U10_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U11_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   isTimes_in_ggg(X, zero, zero) -> isTimes_out_ggg(X, zero, zero)
   isTimes_in_ggg(zero, succ(Y), zero) -> isTimes_out_ggg(zero, succ(Y), zero)
   isTimes_in_ggg(zero, pred(Y), zero) -> isTimes_out_ggg(zero, pred(Y), zero)
   isTimes_in_ggg(succ(X), succ(Y), Z) -> U30_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(X, zero, zero) -> isTimes_out_gga(X, zero, zero)
   isTimes_in_gga(zero, succ(Y), zero) -> isTimes_out_gga(zero, succ(Y), zero)
   isTimes_in_gga(zero, pred(Y), zero) -> isTimes_out_gga(zero, pred(Y), zero)
   isTimes_in_gga(succ(X), succ(Y), Z) -> U30_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(succ(X), pred(Y), Z) -> U32_gga(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   isTimes_in_gga(pred(X), succ(Y), Z) -> U34_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   isTimes_in_gga(pred(X), pred(Y), Z) -> U36_gga(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_gga(X, Y, Z, isMinus_in_gga(A, pred(X), Z))
   U37_gga(X, Y, Z, isMinus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), pred(Y), Z)
   U34_gga(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_gga(X, Y, Z, isPlus_in_gga(A, pred(X), Z))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U35_gga(X, Y, Z, isPlus_out_gga(A, pred(X), Z)) -> isTimes_out_gga(pred(X), succ(Y), Z)
   U32_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_gga(X, Y, Z, isMinus_in_gga(A, succ(X), Z))
   U33_gga(X, Y, Z, isMinus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), pred(Y), Z)
   U30_gga(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_gga(X, Y, Z, isPlus_in_gga(A, succ(X), Z))
   U31_gga(X, Y, Z, isPlus_out_gga(A, succ(X), Z)) -> isTimes_out_gga(succ(X), succ(Y), Z)
   U30_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U31_ggg(X, Y, Z, isPlus_in_ggg(A, succ(X), Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U20_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U21_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U22_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U22_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U21_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U20_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U31_ggg(X, Y, Z, isPlus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), succ(Y), Z)
   isTimes_in_ggg(succ(X), pred(Y), Z) -> U32_ggg(X, Y, Z, isTimes_in_gga(succ(X), Y, A))
   U32_ggg(X, Y, Z, isTimes_out_gga(succ(X), Y, A)) -> U33_ggg(X, Y, Z, isMinus_in_ggg(A, succ(X), Z))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U24_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U25_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U26_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U27_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U28_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U29_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U29_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U28_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U27_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U26_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U25_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U24_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U33_ggg(X, Y, Z, isMinus_out_ggg(A, succ(X), Z)) -> isTimes_out_ggg(succ(X), pred(Y), Z)
   isTimes_in_ggg(pred(X), succ(Y), Z) -> U34_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U34_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U35_ggg(X, Y, Z, isPlus_in_ggg(A, pred(X), Z))
   U35_ggg(X, Y, Z, isPlus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), succ(Y), Z)
   isTimes_in_ggg(pred(X), pred(Y), Z) -> U36_ggg(X, Y, Z, isTimes_in_gga(pred(X), Y, A))
   U36_ggg(X, Y, Z, isTimes_out_gga(pred(X), Y, A)) -> U37_ggg(X, Y, Z, isMinus_in_ggg(A, pred(X), Z))
   U37_ggg(X, Y, Z, isMinus_out_ggg(A, pred(X), Z)) -> isTimes_out_ggg(pred(X), pred(Y), Z)
   U11_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U12_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U12_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U6_gga(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_gga(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U58_(failure_out_g(a)) -> fail_out_
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U13_gga(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_gga(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_gga(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_gga(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_gga(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> U16_gga(Terminate, N, Ret, U, M, twoWay_in_gga(Terminate, M, Ret1))
   U16_gga(Terminate, N, Ret, U, M, twoWay_out_gga(Terminate, M, Ret1)) -> U17_gga(Terminate, N, Ret, U, isTimes_in_ggg(Ret1, M, U))
   U17_gga(Terminate, N, Ret, U, isTimes_out_ggg(Ret1, M, U)) -> U18_gga(Terminate, N, Ret, =_in_ag(Ret, U))
   U18_gga(Terminate, N, Ret, =_out_ag(Ret, U)) -> twoWay_out_gga(Terminate, N, Ret)
   U1_ga(X, Ret, twoWay_out_gga(succ(zero), X, Ret)) -> main_out_ga(X, Ret)

The argument filtering Pi contains the following mapping:
main_in_ga(x1, x2)  =  main_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

twoWay_in_gga(x1, x2, x3)  =  twoWay_in_gga(x1, x2)

U2_gga(x1, x2, x3)  =  U2_gga(x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x3, x4)

zero  =  zero

U4_gga(x1, x2, x3)  =  U4_gga(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

pred(x1)  =  pred(x1)

isLess_out_gg(x1, x2)  =  isLess_out_gg

succ(x1)  =  succ(x1)

U53_gg(x1, x2, x3)  =  U53_gg(x3)

U54_gg(x1, x2, x3)  =  U54_gg(x3)

twoWay_out_gga(x1, x2, x3)  =  twoWay_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

U6_gga(x1, x2, x3, x4, x5)  =  U6_gga(x1, x2, x4, x5)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x2, x6)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x6)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

U9_gga(x1, x2, x3, x4, x5, x6, x7)  =  U9_gga(x1, x6, x7)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x4, x5, x6)

U11_gga(x1, x2, x3, x4, x5)  =  U11_gga(x4, x5)

isTimes_in_ggg(x1, x2, x3)  =  isTimes_in_ggg(x1, x2, x3)

isTimes_out_ggg(x1, x2, x3)  =  isTimes_out_ggg

U30_ggg(x1, x2, x3, x4)  =  U30_ggg(x1, x3, x4)

isTimes_in_gga(x1, x2, x3)  =  isTimes_in_gga(x1, x2)

isTimes_out_gga(x1, x2, x3)  =  isTimes_out_gga(x3)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x4)

U32_gga(x1, x2, x3, x4)  =  U32_gga(x1, x4)

U34_gga(x1, x2, x3, x4)  =  U34_gga(x1, x4)

U36_gga(x1, x2, x3, x4)  =  U36_gga(x1, x4)

U37_gga(x1, x2, x3, x4)  =  U37_gga(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

U33_gga(x1, x2, x3, x4)  =  U33_gga(x4)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x4)

U31_ggg(x1, x2, x3, x4)  =  U31_ggg(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U20_ggg(x1, x2, x3, x4)  =  U20_ggg(x4)

U21_ggg(x1, x2, x3, x4)  =  U21_ggg(x4)

U22_ggg(x1, x2, x3, x4)  =  U22_ggg(x4)

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U32_ggg(x1, x2, x3, x4)  =  U32_ggg(x1, x3, x4)

U33_ggg(x1, x2, x3, x4)  =  U33_ggg(x4)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U24_ggg(x1, x2, x3)  =  U24_ggg(x3)

U25_ggg(x1, x2, x3)  =  U25_ggg(x3)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U27_ggg(x1, x2, x3, x4)  =  U27_ggg(x4)

U28_ggg(x1, x2, x3, x4)  =  U28_ggg(x4)

U29_ggg(x1, x2, x3, x4)  =  U29_ggg(x4)

U34_ggg(x1, x2, x3, x4)  =  U34_ggg(x1, x3, x4)

U35_ggg(x1, x2, x3, x4)  =  U35_ggg(x4)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4, x5, x6)  =  U13_gga(x1, x2, x6)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U14_gga(x1, x2, x3, x4, x5, x6)  =  U14_gga(x1, x6)

U15_gga(x1, x2, x3, x4, x5, x6, x7)  =  U15_gga(x1, x6, x7)

U16_gga(x1, x2, x3, x4, x5, x6)  =  U16_gga(x4, x5, x6)

U17_gga(x1, x2, x3, x4, x5)  =  U17_gga(x4, x5)

U18_gga(x1, x2, x3, x4)  =  U18_gga(x4)

main_out_ga(x1, x2)  =  main_out_ga(x2)

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x6)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x6, x7)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(313) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(314)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N, Ret) -> U5_GGA(Terminate, N, Ret, =_in_ag(X, Terminate))
   U5_GGA(Terminate, N, Ret, =_out_ag(X, Terminate)) -> U6_GGA(Terminate, N, Ret, X, =_in_ag(X1, succ(zero)))
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U7_GGA(Terminate, N, Ret, X, X1, =_in_gg(X, X1))
   U7_GGA(Terminate, N, Ret, X, X1, =_out_gg(X, X1)) -> U8_GGA(Terminate, N, Ret, X, X1, isMinus_in_gga(N, succ(zero), U))
   U8_GGA(Terminate, N, Ret, X, X1, isMinus_out_gga(N, succ(zero), U)) -> U9_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U9_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)
   U6_GGA(Terminate, N, Ret, X, =_out_ag(X1, succ(zero))) -> U13_GGA(Terminate, N, Ret, X, X1, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, Ret, X, X1, nounify_out_gg(X, X1)) -> U14_GGA(Terminate, N, Ret, X, X1, isPlus_in_gga(N, succ(zero), U))
   U14_GGA(Terminate, N, Ret, X, X1, isPlus_out_gga(N, succ(zero), U)) -> U15_GGA(Terminate, N, Ret, X, X1, U, =_in_ag(M, U))
   U15_GGA(Terminate, N, Ret, X, X1, U, =_out_ag(M, U)) -> TWOWAY_IN_GGA(Terminate, M, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U24_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U26_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U28_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   nounify_in_gg(X, Y) -> U19_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U20_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U22_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U24_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U26_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U28_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U19_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U20_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U22_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U25_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U27_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U29_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   not_in_gg(X, Y) -> U55_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U21_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U25_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U27_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U29_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U55_gg(X, Y, call1_out_gg(X, Y)) -> U56_gg(X, Y, fail_in_)
   U21_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(X, Y, =_in_gg(X, Y))
   U56_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U57_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U58_(failure_in_g(a))

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

zero  =  zero

pred(x1)  =  pred(x1)

succ(x1)  =  succ(x1)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U24_gga(x1, x2, x3)  =  U24_gga(x3)

U25_gga(x1, x2, x3)  =  U25_gga(x3)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4)  =  U28_gga(x4)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U20_gga(x1, x2, x3, x4)  =  U20_gga(x4)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x4)

U22_gga(x1, x2, x3, x4)  =  U22_gga(x4)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U19_gg(x1, x2, x3)  =  U19_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U55_gg(x1, x2, x3)  =  U55_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

call1_out_gg(x1, x2)  =  call1_out_gg

U56_gg(x1, x2, x3)  =  U56_gg(x3)

fail_in_  =  fail_in_

U58_(x1)  =  U58_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

TWOWAY_IN_GGA(x1, x2, x3)  =  TWOWAY_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

U6_GGA(x1, x2, x3, x4, x5)  =  U6_GGA(x1, x2, x4, x5)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x6)

U9_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U9_GGA(x1, x6, x7)

U13_GGA(x1, x2, x3, x4, x5, x6)  =  U13_GGA(x1, x2, x6)

U14_GGA(x1, x2, x3, x4, x5, x6)  =  U14_GGA(x1, x6)

U15_GGA(x1, x2, x3, x4, x5, x6, x7)  =  U15_GGA(x1, x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(315) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(316)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_in_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero)))
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_in_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_in_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U19_gg(not_out_gg) -> nounify_out_gg
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U56_gg(fail_out_) -> not_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(317) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_in_ag(Terminate)) at position [2] we obtained the following new rules [LPAR04]:

   (TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate)),TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate)))


----------------------------------------

(318)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero)))
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_in_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_in_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U19_gg(not_out_gg) -> nounify_out_gg
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U56_gg(fail_out_) -> not_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(319) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_in_ag(succ(zero))) at position [3] we obtained the following new rules [LPAR04]:

   (U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero))),U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero))))


----------------------------------------

(320)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_in_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_in_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U19_gg(not_out_gg) -> nounify_out_gg
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U56_gg(fail_out_) -> not_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(321) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U)),U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U)))


----------------------------------------

(322)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_in_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U19_gg(not_out_gg) -> nounify_out_gg
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U56_gg(fail_out_) -> not_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(323) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U)),U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U)))


----------------------------------------

(324)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U19_gg(not_out_gg) -> nounify_out_gg
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U56_gg(fail_out_) -> not_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U58_(failure_in_g(a))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(325) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(326)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(327) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(328)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(329) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U7_GGA(Terminate, N, =_in_gg(X, X1)) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg),U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg))


----------------------------------------

(330)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(331) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(Terminate, N, X, =_out_ag(X1)) -> U13_GGA(Terminate, N, nounify_in_gg(X, X1)) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1))),U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1))))


----------------------------------------

(332)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   nounify_in_gg(X, Y) -> U19_gg(not_in_gg(X, Y))
   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(333) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(334)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(335) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   nounify_in_gg(x0, x1)


----------------------------------------

(336)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1)))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(337) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_in_gg(x0, x1))) at position [2,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1)))),U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1)))))
   (U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg)),U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg)))


----------------------------------------

(338)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))

The TRS R consists of the following rules:

   not_in_gg(X, Y) -> U55_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(339) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(340)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))

The TRS R consists of the following rules:

   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   not_in_gg(x0, x1)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(341) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   not_in_gg(x0, x1)


----------------------------------------

(342)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1))))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))

The TRS R consists of the following rules:

   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(343) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_in_gg(x0, x1)))) at position [2,0,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1))))),U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1))))))


----------------------------------------

(344)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   U19_gg(not_out_gg) -> nounify_out_gg
   call1_in_gg(X, Y) -> U57_gg(=_in_gg(X, Y))
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(345) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(346)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   call1_in_gg(x0, x1)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(347) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   call1_in_gg(x0, x1)


----------------------------------------

(348)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1)))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(349) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(not_out_gg)) at position [2] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg),U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg))


----------------------------------------

(350)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1)))))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(351) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_in_gg(x0, x1))))) at position [2,0,0,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg)))),U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg)))))


----------------------------------------

(352)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg))))

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg
   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(353) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(354)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg))))

The TRS R consists of the following rules:

   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(355) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_gg(x0, x1)


----------------------------------------

(356)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg))))

The TRS R consists of the following rules:

   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(357) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(U57_gg(=_out_gg)))) at position [2,0,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg))),U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg))))


----------------------------------------

(358)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg)))

The TRS R consists of the following rules:

   U57_gg(=_out_gg) -> call1_out_gg
   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(359) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(360)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg)))

The TRS R consists of the following rules:

   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   U57_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(361) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U57_gg(x0)


----------------------------------------

(362)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg)))

The TRS R consists of the following rules:

   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(363) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U55_gg(call1_out_gg))) at position [2,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_))),U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_))))


----------------------------------------

(364)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_)))

The TRS R consists of the following rules:

   U55_gg(call1_out_gg) -> U56_gg(fail_in_)
   U19_gg(not_out_gg) -> nounify_out_gg
   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(365) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(366)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_)))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U55_gg(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(367) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U55_gg(x0)


----------------------------------------

(368)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_)))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(369) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(fail_in_))) at position [2,0,0] we obtained the following new rules [LPAR04]:

   (U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(U58_(failure_in_g(a))))),U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(U58_(failure_in_g(a))))))


----------------------------------------

(370)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U13_GGA(y0, y1, U19_gg(U56_gg(U58_(failure_in_g(a)))))

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(371) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(372)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   fail_in_ -> U58_(failure_in_g(a))
   U56_gg(fail_out_) -> not_out_gg
   U19_gg(not_out_gg) -> nounify_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(373) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(374)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U19_gg(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)
   U56_gg(x0)
   fail_in_

We have to consider all (P,Q,R)-chains.
----------------------------------------

(375) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U19_gg(x0)
   U56_gg(x0)
   fail_in_


----------------------------------------

(376)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(377) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U9_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M) we obtained the following new rules [LPAR04]:

   (U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1),U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1))


----------------------------------------

(378)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(379) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U5_GGA(Terminate, N, =_out_ag(X)) -> U6_GGA(Terminate, N, X, =_out_ag(succ(zero))) we obtained the following new rules [LPAR04]:

   (U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero))),U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero))))


----------------------------------------

(380)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg)
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(381) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x0)) -> U7_GGA(y0, y1, =_out_gg) we obtained the following new rules [LPAR04]:

   (U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg),U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg))


----------------------------------------

(382)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero)))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(383) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGA(Terminate, N, =_out_gg) -> U8_GGA(Terminate, isMinus_in_gga(N, succ(zero))) we obtained the following new rules [LPAR04]:

   (U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero))),U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero))))


----------------------------------------

(384)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U))
   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(385) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGA(Terminate, isMinus_out_gga(U)) -> U9_GGA(Terminate, U, =_out_ag(U)) we obtained the following new rules [LPAR04]:

   (U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1)),U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1)))


----------------------------------------

(386)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg)
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1))

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(387) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGA(y0, y1, x0, =_out_ag(x1)) -> U13_GGA(y0, y1, nounify_out_gg) we obtained the following new rules [LPAR04]:

   (U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg),U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg))


----------------------------------------

(388)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M)
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(389) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U15_GGA(Terminate, U, =_out_ag(M)) -> TWOWAY_IN_GGA(Terminate, M) we obtained the following new rules [LPAR04]:

   (U15_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1),U15_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1))


----------------------------------------

(390)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg)
   U15_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(391) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U9_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1) we obtained the following new rules [LPAR04]:

   (U9_GGA(succ(zero), z0, =_out_ag(z0)) -> TWOWAY_IN_GGA(succ(zero), z0),U9_GGA(succ(zero), z0, =_out_ag(z0)) -> TWOWAY_IN_GGA(succ(zero), z0))


----------------------------------------

(392)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg)
   U15_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U9_GGA(succ(zero), z0, =_out_ag(z0)) -> TWOWAY_IN_GGA(succ(zero), z0)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(393) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U21_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = 0
   POL(=_out_gg) = 2
   POL(TWOWAY_IN_GGA(x_1, x_2)) = 0
   POL(U13_GGA(x_1, x_2, x_3)) = x_3
   POL(U14_GGA(x_1, x_2)) = 2*x_2
   POL(U15_GGA(x_1, x_2, x_3)) = 0
   POL(U20_gga(x_1)) = x_1
   POL(U21_gga(x_1)) = 2 + 2*x_1
   POL(U22_gga(x_1)) = x_1
   POL(U23_gga(x_1)) = 2 + 2*x_1
   POL(U24_gga(x_1)) = 0
   POL(U25_gga(x_1)) = 0
   POL(U26_gga(x_1)) = 0
   POL(U27_gga(x_1)) = 0
   POL(U28_gga(x_1)) = 0
   POL(U29_gga(x_1)) = 0
   POL(U5_GGA(x_1, x_2, x_3)) = 0
   POL(U6_GGA(x_1, x_2, x_3, x_4)) = 0
   POL(U7_GGA(x_1, x_2, x_3)) = 0
   POL(U8_GGA(x_1, x_2)) = 0
   POL(U9_GGA(x_1, x_2, x_3)) = 0
   POL(isMinus_in_gga(x_1, x_2)) = 0
   POL(isMinus_out_gga(x_1)) = 0
   POL(isPlus_in_gga(x_1, x_2)) = x_2
   POL(isPlus_out_gga(x_1)) = 0
   POL(nounify_out_gg) = 0
   POL(pred(x_1)) = 2 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(394)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TWOWAY_IN_GGA(Terminate, N) -> U5_GGA(Terminate, N, =_out_ag(Terminate))
   U13_GGA(Terminate, N, nounify_out_gg) -> U14_GGA(Terminate, isPlus_in_gga(N, succ(zero)))
   U14_GGA(Terminate, isPlus_out_gga(U)) -> U15_GGA(Terminate, U, =_out_ag(U))
   U5_GGA(z0, z1, =_out_ag(z0)) -> U6_GGA(z0, z1, z0, =_out_ag(succ(zero)))
   U6_GGA(succ(zero), z1, succ(zero), =_out_ag(succ(zero))) -> U7_GGA(succ(zero), z1, =_out_gg)
   U7_GGA(succ(zero), z0, =_out_gg) -> U8_GGA(succ(zero), isMinus_in_gga(z0, succ(zero)))
   U8_GGA(succ(zero), isMinus_out_gga(x1)) -> U9_GGA(succ(zero), x1, =_out_ag(x1))
   U6_GGA(z0, z1, z0, =_out_ag(succ(zero))) -> U13_GGA(z0, z1, nounify_out_gg)
   U15_GGA(z0, z1, =_out_ag(z1)) -> TWOWAY_IN_GGA(z0, z1)
   U9_GGA(succ(zero), z0, =_out_ag(z0)) -> TWOWAY_IN_GGA(succ(zero), z0)

The TRS R consists of the following rules:

   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U20_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U22_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U21_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   U22_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U20_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   isMinus_in_gga(zero, succ(Y)) -> U24_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U26_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U28_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U25_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U27_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U29_gga(isMinus_in_gga(X, Y))
   U28_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U29_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U27_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U25_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U26_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U24_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   isPlus_in_gga(x0, x1)
   U24_gga(x0)
   U26_gga(x0)
   U28_gga(x0)
   U20_gga(x0)
   U22_gga(x0)
   U25_gga(x0)
   U27_gga(x0)
   U29_gga(x0)
   U21_gga(x0)
   U23_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(395) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(main X Ret)",
                "(twoWay (1) X Ret)"
            ],
            [
                "(twoWay Terminate N (1))",
                "(',' (< N (0)) (!))"
            ],
            [
                "(twoWay Terminate N Ret)",
                "(',' (=:= Terminate (1)) (',' (!) (',' (is M (- N (1))) (',' (twoWay Terminate M Ret1) (is Ret (* Ret1 M))))))"
            ],
            [
                "(twoWay Terminate N Ret)",
                "(',' (=\\= Terminate (1)) (',' (!) (',' (is M (+ N (1))) (',' (twoWay Terminate M Ret1) (is Ret (* Ret1 M))))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "2991": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3266": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=:= (1) (1)) (',' (!_2) (',' (is X74 (- T52 (1))) (',' (twoWay (1) X74 X75) (is T54 (* X75 X74))))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T52 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T52"],
                    "free": [
                        "X15",
                        "X16",
                        "X74",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "3464": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3265": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(twoWay (1) T9 T11)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T9 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "3463": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X74 (- T52 (1))) (',' (twoWay (1) X74 X75) (is T54 (* X75 X74))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T52 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T52"],
                    "free": [
                        "X15",
                        "X16",
                        "X74",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "3264": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(twoWay (1) T9 T11)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T9 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "3462": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_2) (',' (is X74 (- T52 (1))) (',' (twoWay (1) X74 X75) (is T54 (* X75 X74)))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T52 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T52"],
                    "free": [
                        "X15",
                        "X16",
                        "X74",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "3263": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T39"],
                    "free": [
                        "X53",
                        "X54"
                    ],
                    "exprvars": [
                        "T39",
                        "T15"
                    ]
                }
            },
            "type": "Nodes",
            "2988": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(is T28 (* T31 T29))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T29",
                        "T31"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2943": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=:= (1) (1)) (',' (!_2) (',' (is X36 (- T26 (1))) (',' (twoWay (1) X36 X37) (is T28 (* X37 X36))))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T26"],
                    "free": [
                        "X36",
                        "X37"
                    ],
                    "exprvars": [
                        "T15",
                        "T26"
                    ]
                }
            },
            "2987": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(twoWay (1) T29 X37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T29",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T26",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T29"],
                    "free": ["X37"],
                    "exprvars": [
                        "T29",
                        "T15",
                        "T26"
                    ]
                }
            },
            "2942": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(twoWay (1) T15 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "2941": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(twoWay (1) T15 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "2940": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "2981": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (twoWay (1) T29 X37) (is T28 (* X37 T29)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T29",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T26",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T29",
                        "T26"
                    ],
                    "free": [
                        "X36",
                        "X37"
                    ],
                    "exprvars": [
                        "T29",
                        "T15",
                        "T26"
                    ]
                }
            },
            "3498": {
                "goal": [],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T62 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T62"],
                    "free": [
                        "X15",
                        "X16",
                        "X89",
                        "X90"
                    ],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(twoWay (1) T9 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(twoWay (1) T9 T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(twoWay (1) T9 T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(twoWay (1) T9 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (< T15 (0)) (!_2))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3495": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=\\= (1) (1)) (',' (!_2) (',' (is X89 (+ T62 (1))) (',' (twoWay (1) X89 X90) (is T64 (* X90 X89))))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T62 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T62"],
                    "free": [
                        "X15",
                        "X16",
                        "X89",
                        "X90"
                    ],
                    "exprvars": []
                }
            },
            "2954": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X36 (- T26 (1))) (',' (twoWay (1) X36 X37) (is T28 (* X37 X36))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T26"],
                    "free": [
                        "X36",
                        "X37"
                    ],
                    "exprvars": [
                        "T15",
                        "T26"
                    ]
                }
            },
            "2953": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_2) (',' (is X36 (- T26 (1))) (',' (twoWay (1) X36 X37) (is T28 (* X37 X36)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T26"],
                    "free": [
                        "X36",
                        "X37"
                    ],
                    "exprvars": [
                        "T15",
                        "T26"
                    ]
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2994": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T33",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T31",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "name": "T29",
                                        "type": "PlainIntegerVariable"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "*"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T31",
                        "T29",
                        "T33"
                    ]
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2993": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T31",
                        "T29"
                    ],
                    "free": [],
                    "exprvars": [
                        "T31",
                        "T29"
                    ]
                }
            },
            "3004": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=\\= (1) (1)) (',' (!_2) (',' (is X53 (+ T39 (1))) (',' (twoWay (1) X53 X54) (is T41 (* X54 X53))))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": ["T39"],
                    "free": [
                        "X53",
                        "X54"
                    ],
                    "exprvars": [
                        "T39",
                        "T15"
                    ]
                }
            },
            "2992": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T33",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T31",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "name": "T29",
                                        "type": "PlainIntegerVariable"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "*"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T31",
                        "T29",
                        "T33"
                    ],
                    "free": [],
                    "exprvars": [
                        "T31",
                        "T29",
                        "T33"
                    ]
                }
            },
            "3465": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (twoWay (1) T55 X75) (is T54 (* X75 T55)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T52 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T55",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T52",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [
                        "T52",
                        "T55"
                    ],
                    "free": [
                        "X15",
                        "X16",
                        "X74",
                        "X75"
                    ],
                    "exprvars": [
                        "T52",
                        "T55"
                    ]
                }
            },
            "2939": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "2938": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "2937": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_2)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(twoWay (1) T15 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T15",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": ["T15"]
                }
            },
            "20": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(twoWay (1) T9 T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(twoWay (1) T9 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(twoWay (1) T9 T11)",
                        "(twoWay X15 X16 (1))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 17,
                "label": "ONLY EVAL with clause\nmain(X7, X8) :- twoWay(1, X7, X8).\nand substitutionT1 -> T9,\nX7 -> T9,\nT2 -> T11,\nX8 -> T11,\nT10 -> T11"
            },
            {
                "from": 17,
                "to": 18,
                "label": "CASE"
            },
            {
                "from": 18,
                "to": 19,
                "label": "EVAL with clause\ntwoWay(X15, X16, 1) :- ','(<(X16, 0), !_2).\nand substitutionX15 -> 1,\nT9 -> T15,\nX16 -> T15,\nT11 -> 1"
            },
            {
                "from": 18,
                "to": 20,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 21,
                "label": "IS ERROR"
            },
            {
                "from": 19,
                "to": 2937,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 19,
                "to": 2938,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 20,
                "to": 3264,
                "label": "PARALLEL"
            },
            {
                "from": 20,
                "to": 3265,
                "label": "PARALLEL"
            },
            {
                "from": 2937,
                "to": 2939,
                "label": "CUT"
            },
            {
                "from": 2938,
                "to": 2941,
                "label": "PARALLEL"
            },
            {
                "from": 2938,
                "to": 2942,
                "label": "PARALLEL"
            },
            {
                "from": 2939,
                "to": 2940,
                "label": "SUCCESS"
            },
            {
                "from": 2941,
                "to": 2943,
                "label": "ONLY EVAL with clause\ntwoWay(X33, X34, X35) :- ','(=:=(X33, 1), ','(!_2, ','(is(X36, -(X34, 1)), ','(twoWay(X33, X36, X37), is(X35, *(X37, X36)))))).\nand substitutionX33 -> 1,\nT15 -> T26,\nX34 -> T26,\nT11 -> T28,\nX35 -> T28,\nT27 -> T28"
            },
            {
                "from": 2942,
                "to": 3004,
                "label": "ONLY EVAL with clause\ntwoWay(X50, X51, X52) :- ','(=\\=(X50, 1), ','(!_2, ','(is(X53, +(X51, 1)), ','(twoWay(X50, X53, X54), is(X52, *(X54, X53)))))).\nand substitutionX50 -> 1,\nT15 -> T39,\nX51 -> T39,\nT11 -> T41,\nX52 -> T41,\nT40 -> T41"
            },
            {
                "from": 2943,
                "to": 2953,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2953,
                "to": 2954,
                "label": "CUT"
            },
            {
                "from": 2954,
                "to": 2981,
                "label": "\nX36 -> T29"
            },
            {
                "from": 2981,
                "to": 2987,
                "label": "SPLIT 1"
            },
            {
                "from": 2981,
                "to": 2988,
                "label": "SPLIT 2\nnew knowledge:\nT29 is ground\nT31 is ground\nreplacements:X37 -> T31"
            },
            {
                "from": 2987,
                "to": 17,
                "label": "INSTANCE with matching:\nT9 -> T29\nT11 -> X37"
            },
            {
                "from": 2988,
                "to": 2991,
                "label": "IS ERROR"
            },
            {
                "from": 2988,
                "to": 2992,
                "label": "\nT28 -> T33"
            },
            {
                "from": 2988,
                "to": 2993,
                "label": "IS FAIL"
            },
            {
                "from": 2992,
                "to": 2994,
                "label": "SUCCESS"
            },
            {
                "from": 3004,
                "to": 3263,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3264,
                "to": 3266,
                "label": "ONLY EVAL with clause\ntwoWay(X71, X72, X73) :- ','(=:=(X71, 1), ','(!_2, ','(is(X74, -(X72, 1)), ','(twoWay(X71, X74, X75), is(X73, *(X75, X74)))))).\nand substitutionX71 -> 1,\nT9 -> T52,\nX72 -> T52,\nT11 -> T54,\nX73 -> T54,\nT53 -> T54"
            },
            {
                "from": 3265,
                "to": 3495,
                "label": "ONLY EVAL with clause\ntwoWay(X86, X87, X88) :- ','(=\\=(X86, 1), ','(!_2, ','(is(X89, +(X87, 1)), ','(twoWay(X86, X89, X90), is(X88, *(X90, X89)))))).\nand substitutionX86 -> 1,\nT9 -> T62,\nX87 -> T62,\nT11 -> T64,\nX88 -> T64,\nT63 -> T64"
            },
            {
                "from": 3266,
                "to": 3462,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3462,
                "to": 3463,
                "label": "CUT"
            },
            {
                "from": 3463,
                "to": 3464,
                "label": "IS ERROR"
            },
            {
                "from": 3463,
                "to": 3465,
                "label": "\nX74 -> T55"
            },
            {
                "from": 3465,
                "to": 2981,
                "label": "INSTANCE with matching:\nT29 -> T55\nX37 -> X75\nT28 -> T54\nX36 -> X15"
            },
            {
                "from": 3495,
                "to": 3498,
                "label": "ARITHCOMP FAIL"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(396)
Obligation:
Rules:
f2987_in(T29) -> f17_in(T29) :|: TRUE
f17_out(x) -> f2987_out(x) :|: TRUE
f3266_out(T52) -> f3264_out(T52) :|: TRUE
f3264_in(x1) -> f3266_in(x1) :|: TRUE
f3465_out(x2, x3) -> f3463_out(x3) :|: TRUE
f3463_in(x4) -> f3464_in :|: TRUE
f3463_in(x5) -> f3465_in(x6, x5) :|: x6 = x5 - 1
f3464_out -> f3463_out(x7) :|: TRUE
f20_in(T9) -> f3264_in(T9) :|: TRUE
f20_in(x8) -> f3265_in(x8) :|: TRUE
f3264_out(x9) -> f20_out(x9) :|: TRUE
f3265_out(x10) -> f20_out(x10) :|: TRUE
f2988_in(x11, x12) -> f2992_in(x11, x12, x13) :|: x13 = x11 * x12
f2993_out(x14, x15) -> f2988_out(x14, x15) :|: TRUE
f2991_out -> f2988_out(x16, x17) :|: TRUE
f2992_out(x18, x19, x20) -> f2988_out(x18, x19) :|: TRUE
f2988_in(x21, x22) -> f2991_in :|: TRUE
f2988_in(x23, x24) -> f2993_in(x23, x24) :|: !(x25 = x23 * x24)
f20_out(x26) -> f18_out(x26) :|: TRUE
f18_in(T15) -> f19_in(T15) :|: TRUE
f19_out(x27) -> f18_out(x27) :|: TRUE
f18_in(x28) -> f20_in(x28) :|: TRUE
f2953_out(T26) -> f2943_out(T26) :|: 1 = 1
f2943_in(x29) -> f2953_in(x29) :|: 1 = 1
f3462_in(x30) -> f3463_in(x30) :|: TRUE
f3463_out(x31) -> f3462_out(x31) :|: TRUE
f3462_out(x32) -> f3266_out(x32) :|: 1 = 1
f3266_in(x33) -> f3462_in(x33) :|: 1 = 1
f2981_out(x34, x35) -> f3465_out(x34, x36) :|: TRUE
f3465_in(x37, x38) -> f2981_in(x37, x39) :|: TRUE
f18_out(x40) -> f17_out(x40) :|: TRUE
f17_in(x41) -> f18_in(x41) :|: TRUE
f2941_in(x42) -> f2943_in(x42) :|: TRUE
f2943_out(x43) -> f2941_out(x43) :|: TRUE
f2988_out(x44, x45) -> f2981_out(x45, x46) :|: TRUE
f2981_in(x47, x48) -> f2987_in(x47) :|: TRUE
f2987_out(x49) -> f2988_in(x50, x49) :|: TRUE
f2938_in(x51) -> f2941_in(x51) :|: TRUE
f2938_in(x52) -> f2942_in(x52) :|: TRUE
f2941_out(x53) -> f2938_out(x53) :|: TRUE
f2942_out(x54) -> f2938_out(x54) :|: TRUE
f21_out -> f19_out(x55) :|: TRUE
f2938_out(x56) -> f19_out(x56) :|: x56 >= 0
f19_in(x57) -> f2938_in(x57) :|: x57 >= 0
f19_in(x58) -> f21_in :|: TRUE
f19_in(x59) -> f2937_in(x59) :|: x59 < 0
f2937_out(x60) -> f19_out(x60) :|: x60 < 0
f2981_out(x61, x62) -> f2954_out(x62) :|: TRUE
f2954_in(x63) -> f2981_in(x64, x63) :|: x64 = x63 - 1
f2992_in(x65, x66, x67) -> f2992_out(x65, x66, x67) :|: TRUE
f2954_out(x68) -> f2953_out(x68) :|: TRUE
f2953_in(x69) -> f2954_in(x69) :|: TRUE
f5_in(T1) -> f6_in(T1) :|: TRUE
f6_out(x70) -> f5_out(x70) :|: TRUE
f6_in(x71) -> f17_in(x71) :|: TRUE
f17_out(x72) -> f6_out(x72) :|: TRUE
Start term: f5_in(T1)

----------------------------------------

(397) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f2987_in(T29) -> f17_in(T29) :|: TRUE
f3264_in(x1) -> f3266_in(x1) :|: TRUE
f3463_in(x5) -> f3465_in(x6, x5) :|: x6 = x5 - 1
f20_in(T9) -> f3264_in(T9) :|: TRUE
f18_in(T15) -> f19_in(T15) :|: TRUE
f18_in(x28) -> f20_in(x28) :|: TRUE
f2943_in(x29) -> f2953_in(x29) :|: 1 = 1
f3462_in(x30) -> f3463_in(x30) :|: TRUE
f3266_in(x33) -> f3462_in(x33) :|: 1 = 1
f3465_in(x37, x38) -> f2981_in(x37, x39) :|: TRUE
f17_in(x41) -> f18_in(x41) :|: TRUE
f2941_in(x42) -> f2943_in(x42) :|: TRUE
f2981_in(x47, x48) -> f2987_in(x47) :|: TRUE
f2938_in(x51) -> f2941_in(x51) :|: TRUE
f19_in(x57) -> f2938_in(x57) :|: x57 >= 0
f2954_in(x63) -> f2981_in(x64, x63) :|: x64 = x63 - 1
f2953_in(x69) -> f2954_in(x69) :|: TRUE


----------------------------------------

(398)
Obligation:
Rules:
f2987_in(T29) -> f17_in(T29) :|: TRUE
f3264_in(x1) -> f3266_in(x1) :|: TRUE
f3463_in(x5) -> f3465_in(x6, x5) :|: x6 = x5 - 1
f20_in(T9) -> f3264_in(T9) :|: TRUE
f18_in(T15) -> f19_in(T15) :|: TRUE
f18_in(x28) -> f20_in(x28) :|: TRUE
f2943_in(x29) -> f2953_in(x29) :|: 1 = 1
f3462_in(x30) -> f3463_in(x30) :|: TRUE
f3266_in(x33) -> f3462_in(x33) :|: 1 = 1
f3465_in(x37, x38) -> f2981_in(x37, x39) :|: TRUE
f17_in(x41) -> f18_in(x41) :|: TRUE
f2941_in(x42) -> f2943_in(x42) :|: TRUE
f2981_in(x47, x48) -> f2987_in(x47) :|: TRUE
f2938_in(x51) -> f2941_in(x51) :|: TRUE
f19_in(x57) -> f2938_in(x57) :|: x57 >= 0
f2954_in(x63) -> f2981_in(x64, x63) :|: x64 = x63 - 1
f2953_in(x69) -> f2954_in(x69) :|: TRUE

----------------------------------------

(399) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(400)
Obligation:
Rules:
f2987_in(T29:0) -> f2987_in(T29:0 - 1) :|: TRUE
f2987_in(x) -> f2987_in(x - 1) :|: x > -1

----------------------------------------

(401) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(402)
Obligation:
Rules:
f2987_in(T29:0) -> f2987_in(arith) :|: TRUE && arith = T29:0 - 1
f2987_in(x1) -> f2987_in(x2) :|: x1 > -1 && x2 = x1 - 1

----------------------------------------

(403) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2987_in(T29:0) -> f2987_in(arith) :|: TRUE && arith = T29:0 - 1
(2) f2987_in(x1) -> f2987_in(x2) :|: x1 > -1 && x2 = x1 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(404)
Obligation:

Termination digraph:
Nodes:
(1) f2987_in(T29:0) -> f2987_in(arith) :|: TRUE && arith = T29:0 - 1
(2) f2987_in(x1) -> f2987_in(x2) :|: x1 > -1 && x2 = x1 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(405) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(406)
Obligation:
Rules:
f2987_in(T29:0:0) -> f2987_in(T29:0:0 - 1) :|: TRUE
f2987_in(x1:0) -> f2987_in(x1:0 - 1) :|: x1:0 > -1

----------------------------------------

(407) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2987_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IntTRS could not be shown:



- IntTRS
  - RankingReductionPairProof

Rules:
f2987_in(T29:0:0) -> f2987_in(c) :|: c = T29:0:0 - 1 && TRUE
f2987_in(x1:0) -> f2987_in(c1) :|: c1 = x1:0 - 1 && x1:0 > -1

Interpretation:
[ f2987_in ] = f2987_in_1 + 1

The following rules are decreasing:
f2987_in(T29:0:0) -> f2987_in(c) :|: c = T29:0:0 - 1 && TRUE
f2987_in(x1:0) -> f2987_in(c1) :|: c1 = x1:0 - 1 && x1:0 > -1

The following rules are bounded:
f2987_in(x1:0) -> f2987_in(c1) :|: c1 = x1:0 - 1 && x1:0 > -1



- IntTRS
  - RankingReductionPairProof
    - IntTRS

Rules:
f2987_in(T29:0:0) -> f2987_in(c) :|: c = T29:0:0 - 1 && TRUE



----------------------------------------

(408)
Obligation:
Rules:
f2987_in(T29:0:0) -> f2987_in(T29:0:0 - 1) :|: TRUE

----------------------------------------

(409) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2987_in(T29:0:0) -> f2987_in(T29:0:0 - 1) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(410)
Obligation:

Termination digraph:
Nodes:
(1) f2987_in(T29:0:0) -> f2987_in(T29:0:0 - 1) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
