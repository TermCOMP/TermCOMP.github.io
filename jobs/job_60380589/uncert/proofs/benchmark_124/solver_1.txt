YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/JtuMt.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

evenSpacedWithDiff(g,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [EQUIVALENT, 1 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 39 ms]
(14) QDP
(15) DependencyGraphProof [EQUIVALENT, 0 ms]
(16) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

evenSpacedWithDiff(.(X, .(Y, [])), Diff) :- =:=(Diff, -(Y, X)).
evenSpacedWithDiff(.(X, .(Y, Tail)), Diff) :- ','(=:=(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Tail), Diff)).


Query: evenSpacedWithDiff(g,g)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

evenSpacedWithDiff(.(X, .(Y, [])), Diff) :- =:=(Diff, -(Y, X)).
evenSpacedWithDiff(.(X, .(Y, Tail)), Diff) :- ','(=:=(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Tail), Diff)).
=:=(X0, X1).


Query: evenSpacedWithDiff(g,g)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

evenSpacedWithDiff_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpacedWithDiff_in_gg(.(X, .(Y, [])), Diff) -> U1_gg(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U1_gg(X, Y, Diff, =:=_out_gg(Diff, -(Y, X))) -> evenSpacedWithDiff_out_gg(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_gg(.(X, .(Y, Tail)), Diff) -> U2_gg(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_gg(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_out_gg(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_gg(.(X, .(Y, Tail)), Diff)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpacedWithDiff_in_gg(.(X, .(Y, [])), Diff) -> U1_gg(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U1_gg(X, Y, Diff, =:=_out_gg(Diff, -(Y, X))) -> evenSpacedWithDiff_out_gg(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_gg(.(X, .(Y, Tail)), Diff) -> U2_gg(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_gg(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_out_gg(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_gg(.(X, .(Y, Tail)), Diff)

Pi is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, [])), Diff) -> U1_GG(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, [])), Diff) -> =:=_IN_GG(Diff, -(Y, X))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> =:=_IN_GG(Diff, -(Y, X))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_GG(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpacedWithDiff_in_gg(.(X, .(Y, [])), Diff) -> U1_gg(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U1_gg(X, Y, Diff, =:=_out_gg(Diff, -(Y, X))) -> evenSpacedWithDiff_out_gg(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_gg(.(X, .(Y, Tail)), Diff) -> U2_gg(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_gg(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_out_gg(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_gg(.(X, .(Y, Tail)), Diff)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, [])), Diff) -> U1_GG(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, [])), Diff) -> =:=_IN_GG(Diff, -(Y, X))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> =:=_IN_GG(Diff, -(Y, X))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_GG(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpacedWithDiff_in_gg(.(X, .(Y, [])), Diff) -> U1_gg(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U1_gg(X, Y, Diff, =:=_out_gg(Diff, -(Y, X))) -> evenSpacedWithDiff_out_gg(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_gg(.(X, .(Y, Tail)), Diff) -> U2_gg(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_gg(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_out_gg(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_gg(.(X, .(Y, Tail)), Diff)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpacedWithDiff_in_gg(.(X, .(Y, [])), Diff) -> U1_gg(X, Y, Diff, =:=_in_gg(Diff, -(Y, X)))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U1_gg(X, Y, Diff, =:=_out_gg(Diff, -(Y, X))) -> evenSpacedWithDiff_out_gg(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_gg(.(X, .(Y, Tail)), Diff) -> U2_gg(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_gg(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_in_gg(.(Y, Tail), Diff))
   U3_gg(X, Y, Tail, Diff, evenSpacedWithDiff_out_gg(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_gg(.(X, .(Y, Tail)), Diff)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))
   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   EVENSPACEDWITHDIFF_IN_GG(.(X, .(Y, Tail)), Diff) -> U2_GG(X, Y, Tail, Diff, =:=_in_gg(Diff, -(Y, X)))

Strictly oriented rules of the TRS R:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)

Used ordering: Polynomial interpretation [POLO]:

   POL(-(x_1, x_2)) = 2 + x_1 + x_2
   POL(.(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(=:=_in_gg(x_1, x_2)) = 1 + x_1 + x_2
   POL(=:=_out_gg(x_1, x_2)) = x_1 + x_2
   POL(EVENSPACEDWITHDIFF_IN_GG(x_1, x_2)) = x_1 + 2*x_2
   POL(U2_GG(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + x_3 + x_4 + x_5


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GG(X, Y, Tail, Diff, =:=_out_gg(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GG(.(Y, Tail), Diff)

R is empty.
The set Q consists of the following terms:

   =:=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(16)
TRUE
