MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/CQkNS.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

mergesort(g,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
    (3) PrologToPiTRSProof [SOUND, 0 ms]
    (4) PiTRS
        (5) DependencyPairsProof [EQUIVALENT, 15 ms]
        (6) PiDP
        (7) DependencyGraphProof [EQUIVALENT, 0 ms]
        (8) AND
            (9) PiDP
                (10) UsableRulesProof [EQUIVALENT, 0 ms]
                (11) PiDP
                (12) PiDPToQDPProof [SOUND, 0 ms]
                (13) QDP
                (14) MRRProof [EQUIVALENT, 18 ms]
                (15) QDP
                (16) PisEmptyProof [EQUIVALENT, 0 ms]
                (17) YES
            (18) PiDP
                (19) UsableRulesProof [EQUIVALENT, 0 ms]
                (20) PiDP
                (21) PiDPToQDPProof [SOUND, 0 ms]
                (22) QDP
                (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (24) YES
            (25) PiDP
                (26) PiDPToQDPProof [SOUND, 0 ms]
                (27) QDP
                (28) MRRProof [EQUIVALENT, 12 ms]
                (29) QDP
                (30) QDPQMonotonicMRRProof [EQUIVALENT, 14 ms]
                (31) QDP
                (32) UsableRulesProof [EQUIVALENT, 0 ms]
                (33) QDP
                (34) QReductionProof [EQUIVALENT, 0 ms]
                (35) QDP
                (36) MRRProof [EQUIVALENT, 0 ms]
                (37) QDP
                (38) UsableRulesProof [EQUIVALENT, 0 ms]
                (39) QDP
                (40) QReductionProof [EQUIVALENT, 0 ms]
                (41) QDP
                (42) QDPQMonotonicMRRProof [EQUIVALENT, 10 ms]
                (43) QDP
                (44) UsableRulesProof [EQUIVALENT, 0 ms]
                (45) QDP
                (46) QReductionProof [EQUIVALENT, 0 ms]
                (47) QDP
                (48) MRRProof [EQUIVALENT, 9 ms]
                (49) QDP
                (50) UsableRulesProof [EQUIVALENT, 0 ms]
                (51) QDP
                (52) QReductionProof [EQUIVALENT, 0 ms]
                (53) QDP
                (54) TransformationProof [SOUND, 0 ms]
                (55) QDP
                (56) TransformationProof [SOUND, 0 ms]
                (57) QDP
                (58) TransformationProof [EQUIVALENT, 0 ms]
                (59) QDP
                (60) TransformationProof [EQUIVALENT, 0 ms]
                (61) QDP
                (62) TransformationProof [EQUIVALENT, 0 ms]
                (63) QDP
                (64) DependencyGraphProof [EQUIVALENT, 0 ms]
                (65) QDP
                (66) TransformationProof [EQUIVALENT, 0 ms]
                (67) QDP
                (68) DependencyGraphProof [EQUIVALENT, 0 ms]
                (69) AND
                    (70) QDP
                        (71) TransformationProof [EQUIVALENT, 0 ms]
                        (72) QDP
                        (73) TransformationProof [EQUIVALENT, 0 ms]
                        (74) QDP
                        (75) TransformationProof [EQUIVALENT, 0 ms]
                        (76) QDP
                    (77) QDP
                        (78) MRRProof [EQUIVALENT, 2 ms]
                        (79) QDP
                        (80) DependencyGraphProof [EQUIVALENT, 0 ms]
                        (81) QDP
                        (82) UsableRulesProof [EQUIVALENT, 0 ms]
                        (83) QDP
                        (84) QReductionProof [EQUIVALENT, 0 ms]
                        (85) QDP
    (86) PrologToPiTRSProof [SOUND, 0 ms]
    (87) PiTRS
        (88) DependencyPairsProof [EQUIVALENT, 9 ms]
        (89) PiDP
        (90) DependencyGraphProof [EQUIVALENT, 0 ms]
        (91) AND
            (92) PiDP
                (93) UsableRulesProof [EQUIVALENT, 0 ms]
                (94) PiDP
                (95) PiDPToQDPProof [SOUND, 0 ms]
                (96) QDP
                (97) MRRProof [EQUIVALENT, 5 ms]
                (98) QDP
                (99) PisEmptyProof [EQUIVALENT, 0 ms]
                (100) YES
            (101) PiDP
                (102) UsableRulesProof [EQUIVALENT, 0 ms]
                (103) PiDP
                (104) PiDPToQDPProof [SOUND, 0 ms]
                (105) QDP
                (106) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (107) YES
            (108) PiDP
                (109) PiDPToQDPProof [SOUND, 0 ms]
                (110) QDP
                (111) QDPQMonotonicMRRProof [EQUIVALENT, 26 ms]
                (112) QDP
                (113) QDPQMonotonicMRRProof [EQUIVALENT, 23 ms]
                (114) QDP
                (115) QDPQMonotonicMRRProof [EQUIVALENT, 16 ms]
                (116) QDP
                (117) UsableRulesProof [EQUIVALENT, 0 ms]
                (118) QDP
                (119) QReductionProof [EQUIVALENT, 0 ms]
                (120) QDP
                (121) QDPQMonotonicMRRProof [EQUIVALENT, 0 ms]
                (122) QDP
                (123) QDPQMonotonicMRRProof [EQUIVALENT, 9 ms]
                (124) QDP
                (125) UsableRulesProof [EQUIVALENT, 0 ms]
                (126) QDP
                (127) QReductionProof [EQUIVALENT, 0 ms]
                (128) QDP
                (129) QDPQMonotonicMRRProof [EQUIVALENT, 6 ms]
                (130) QDP
                (131) QReductionProof [EQUIVALENT, 0 ms]
                (132) QDP
(133) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(134) Prolog
    (135) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (136) Prolog
    (137) OrTransformerProof [EQUIVALENT, 0 ms]
    (138) Prolog
    (139) PrologToPiTRSProof [SOUND, 0 ms]
    (140) PiTRS
        (141) DependencyPairsProof [EQUIVALENT, 5 ms]
        (142) PiDP
        (143) DependencyGraphProof [EQUIVALENT, 0 ms]
        (144) AND
            (145) PiDP
                (146) UsableRulesProof [EQUIVALENT, 0 ms]
                (147) PiDP
                (148) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (149) QDP
                (150) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (151) YES
            (152) PiDP
                (153) UsableRulesProof [EQUIVALENT, 0 ms]
                (154) PiDP
                (155) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (156) QDP
                (157) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (158) YES
            (159) PiDP
                (160) UsableRulesProof [EQUIVALENT, 0 ms]
                (161) PiDP
                (162) PiDPToQDPProof [SOUND, 0 ms]
                (163) QDP
                (164) TransformationProof [EQUIVALENT, 0 ms]
                (165) QDP
                (166) TransformationProof [EQUIVALENT, 0 ms]
                (167) QDP
                (168) TransformationProof [EQUIVALENT, 0 ms]
                (169) QDP
                (170) TransformationProof [EQUIVALENT, 0 ms]
                (171) QDP
                (172) UsableRulesProof [EQUIVALENT, 0 ms]
                (173) QDP
                (174) QReductionProof [EQUIVALENT, 0 ms]
                (175) QDP
                (176) TransformationProof [SOUND, 0 ms]
                (177) QDP
                (178) UsableRulesProof [EQUIVALENT, 0 ms]
                (179) QDP
                (180) QReductionProof [EQUIVALENT, 0 ms]
                (181) QDP
                (182) TransformationProof [EQUIVALENT, 0 ms]
                (183) QDP
                (184) TransformationProof [EQUIVALENT, 0 ms]
                (185) QDP
                (186) TransformationProof [EQUIVALENT, 0 ms]
                (187) QDP
                (188) TransformationProof [EQUIVALENT, 0 ms]
                (189) QDP
                (190) TransformationProof [EQUIVALENT, 0 ms]
                (191) QDP
                (192) TransformationProof [EQUIVALENT, 0 ms]
                (193) QDP
                (194) TransformationProof [EQUIVALENT, 0 ms]
                (195) QDP
                (196) TransformationProof [EQUIVALENT, 0 ms]
                (197) QDP
                (198) TransformationProof [EQUIVALENT, 0 ms]
                (199) QDP
                (200) QDPOrderProof [EQUIVALENT, 38 ms]
                (201) QDP
                (202) DependencyGraphProof [EQUIVALENT, 0 ms]
                (203) TRUE
            (204) PiDP
                (205) UsableRulesProof [EQUIVALENT, 0 ms]
                (206) PiDP
                (207) PiDPToQDPProof [SOUND, 0 ms]
                (208) QDP
                (209) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (210) YES
            (211) PiDP
                (212) PiDPToQDPProof [SOUND, 0 ms]
                (213) QDP
                (214) QDPQMonotonicMRRProof [EQUIVALENT, 86 ms]
                (215) QDP
                (216) QDPQMonotonicMRRProof [EQUIVALENT, 83 ms]
                (217) QDP
                (218) UsableRulesProof [EQUIVALENT, 0 ms]
                (219) QDP
                (220) QReductionProof [EQUIVALENT, 0 ms]
                (221) QDP
                (222) QDPQMonotonicMRRProof [EQUIVALENT, 52 ms]
                (223) QDP
                (224) UsableRulesProof [EQUIVALENT, 0 ms]
                (225) QDP
                (226) QReductionProof [EQUIVALENT, 0 ms]
                (227) QDP
                (228) QDPQMonotonicMRRProof [EQUIVALENT, 48 ms]
                (229) QDP
                (230) UsableRulesProof [EQUIVALENT, 0 ms]
                (231) QDP
                (232) QReductionProof [EQUIVALENT, 0 ms]
                (233) QDP
                (234) QDPQMonotonicMRRProof [EQUIVALENT, 42 ms]
                (235) QDP
                (236) QDPQMonotonicMRRProof [EQUIVALENT, 37 ms]
                (237) QDP
                (238) UsableRulesProof [EQUIVALENT, 0 ms]
                (239) QDP
                (240) QReductionProof [EQUIVALENT, 0 ms]
                (241) QDP
                (242) QDPQMonotonicMRRProof [EQUIVALENT, 47 ms]
                (243) QDP
                (244) UsableRulesProof [EQUIVALENT, 0 ms]
                (245) QDP
                (246) QReductionProof [EQUIVALENT, 0 ms]
                (247) QDP
                (248) QDPQMonotonicMRRProof [EQUIVALENT, 48 ms]
                (249) QDP
                (250) QDPQMonotonicMRRProof [EQUIVALENT, 50 ms]
                (251) QDP
                (252) UsableRulesProof [EQUIVALENT, 0 ms]
                (253) QDP
                (254) QReductionProof [EQUIVALENT, 0 ms]
                (255) QDP
                (256) QDPQMonotonicMRRProof [EQUIVALENT, 23 ms]
                (257) QDP
                (258) QDPQMonotonicMRRProof [EQUIVALENT, 13 ms]
                (259) QDP
                (260) QDPQMonotonicMRRProof [EQUIVALENT, 11 ms]
                (261) QDP
                (262) QDPQMonotonicMRRProof [EQUIVALENT, 10 ms]
                (263) QDP
                (264) QReductionProof [EQUIVALENT, 0 ms]
                (265) QDP
                (266) QDPQMonotonicMRRProof [EQUIVALENT, 9 ms]
                (267) QDP
                (268) QDPQMonotonicMRRProof [EQUIVALENT, 8 ms]
                (269) QDP
                (270) UsableRulesProof [EQUIVALENT, 0 ms]
                (271) QDP
                (272) QReductionProof [EQUIVALENT, 0 ms]
                (273) QDP
    (274) PrologToPiTRSProof [SOUND, 0 ms]
    (275) PiTRS
        (276) DependencyPairsProof [EQUIVALENT, 4 ms]
        (277) PiDP
        (278) DependencyGraphProof [EQUIVALENT, 0 ms]
        (279) AND
            (280) PiDP
                (281) UsableRulesProof [EQUIVALENT, 0 ms]
                (282) PiDP
                (283) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (284) QDP
                (285) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (286) YES
            (287) PiDP
                (288) UsableRulesProof [EQUIVALENT, 0 ms]
                (289) PiDP
                (290) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (291) QDP
                (292) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (293) YES
            (294) PiDP
                (295) UsableRulesProof [EQUIVALENT, 0 ms]
                (296) PiDP
                (297) PiDPToQDPProof [SOUND, 0 ms]
                (298) QDP
                (299) TransformationProof [EQUIVALENT, 0 ms]
                (300) QDP
                (301) TransformationProof [EQUIVALENT, 0 ms]
                (302) QDP
                (303) TransformationProof [EQUIVALENT, 0 ms]
                (304) QDP
                (305) TransformationProof [EQUIVALENT, 0 ms]
                (306) QDP
                (307) UsableRulesProof [EQUIVALENT, 0 ms]
                (308) QDP
                (309) QReductionProof [EQUIVALENT, 0 ms]
                (310) QDP
                (311) TransformationProof [SOUND, 0 ms]
                (312) QDP
                (313) UsableRulesProof [EQUIVALENT, 0 ms]
                (314) QDP
                (315) QReductionProof [EQUIVALENT, 0 ms]
                (316) QDP
                (317) TransformationProof [EQUIVALENT, 0 ms]
                (318) QDP
                (319) TransformationProof [EQUIVALENT, 0 ms]
                (320) QDP
                (321) TransformationProof [EQUIVALENT, 0 ms]
                (322) QDP
                (323) TransformationProof [EQUIVALENT, 0 ms]
                (324) QDP
                (325) TransformationProof [EQUIVALENT, 0 ms]
                (326) QDP
                (327) TransformationProof [EQUIVALENT, 0 ms]
                (328) QDP
                (329) TransformationProof [EQUIVALENT, 0 ms]
                (330) QDP
                (331) TransformationProof [EQUIVALENT, 0 ms]
                (332) QDP
                (333) QDPQMonotonicMRRProof [EQUIVALENT, 13 ms]
                (334) QDP
                (335) DependencyGraphProof [EQUIVALENT, 0 ms]
                (336) QDP
                (337) UsableRulesProof [EQUIVALENT, 0 ms]
                (338) QDP
                (339) QReductionProof [EQUIVALENT, 0 ms]
                (340) QDP
                (341) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (342) YES
            (343) PiDP
                (344) UsableRulesProof [EQUIVALENT, 0 ms]
                (345) PiDP
                (346) PiDPToQDPProof [SOUND, 0 ms]
                (347) QDP
                (348) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (349) YES
            (350) PiDP
                (351) PiDPToQDPProof [SOUND, 0 ms]
                (352) QDP
                (353) QDPQMonotonicMRRProof [EQUIVALENT, 71 ms]
                (354) QDP
                (355) QDPQMonotonicMRRProof [EQUIVALENT, 64 ms]
                (356) QDP
                (357) QDPQMonotonicMRRProof [EQUIVALENT, 28 ms]
                (358) QDP
                (359) UsableRulesProof [EQUIVALENT, 0 ms]
                (360) QDP
                (361) QReductionProof [EQUIVALENT, 0 ms]
                (362) QDP
                (363) QDPQMonotonicMRRProof [EQUIVALENT, 10 ms]
                (364) QDP
                (365) QDPQMonotonicMRRProof [EQUIVALENT, 10 ms]
                (366) QDP
                (367) UsableRulesProof [EQUIVALENT, 0 ms]
                (368) QDP
                (369) QReductionProof [EQUIVALENT, 0 ms]
                (370) QDP
                (371) MRRProof [EQUIVALENT, 4 ms]
                (372) QDP
                (373) UsableRulesProof [EQUIVALENT, 0 ms]
                (374) QDP
                (375) QReductionProof [EQUIVALENT, 0 ms]
                (376) QDP
(377) PrologToTRSTransformerProof [SOUND, 62 ms]
(378) QTRS
    (379) DependencyPairsProof [EQUIVALENT, 0 ms]
    (380) QDP
    (381) DependencyGraphProof [EQUIVALENT, 0 ms]
    (382) AND
        (383) QDP
            (384) UsableRulesProof [EQUIVALENT, 0 ms]
            (385) QDP
            (386) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (387) YES
        (388) QDP
            (389) UsableRulesProof [EQUIVALENT, 0 ms]
            (390) QDP
            (391) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (392) YES
        (393) QDP
            (394) UsableRulesProof [EQUIVALENT, 0 ms]
            (395) QDP
            (396) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (397) YES
        (398) QDP
            (399) NonTerminationLoopProof [COMPLETE, 0 ms]
            (400) NO
(401) PrologToIRSwTTransformerProof [SOUND, 53 ms]
(402) AND
    (403) IRSwT
        (404) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (405) TRUE
    (406) IRSwT
        (407) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (408) TRUE
    (409) IRSwT
        (410) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (411) IRSwT
        (412) IntTRSCompressionProof [EQUIVALENT, 10 ms]
        (413) IRSwT
        (414) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (415) IRSwT
        (416) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (417) IRSwT
        (418) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (419) IRSwT
        (420) TempFilterProof [SOUND, 1 ms]
        (421) IRSwT
        (422) IRSwTToQDPProof [SOUND, 0 ms]
        (423) QDP
        (424) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (425) YES
    (426) IRSwT
        (427) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (428) IRSwT
        (429) IntTRSCompressionProof [EQUIVALENT, 7 ms]
        (430) IRSwT
        (431) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (432) IRSwT
        (433) IRSwTTerminationDigraphProof [EQUIVALENT, 15 ms]
        (434) IRSwT
        (435) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (436) IRSwT
        (437) IRSwTToIntTRSProof [SOUND, 12 ms]
        (438) IRSwT
(439) PrologToDTProblemTransformerProof [SOUND, 71 ms]
(440) TRIPLES
    (441) TriplesToPiDPProof [SOUND, 25 ms]
    (442) PiDP
    (443) DependencyGraphProof [EQUIVALENT, 0 ms]
    (444) AND
        (445) PiDP
            (446) UsableRulesProof [EQUIVALENT, 0 ms]
            (447) PiDP
            (448) PiDPToQDPProof [SOUND, 0 ms]
            (449) QDP
            (450) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (451) YES
        (452) PiDP
            (453) UsableRulesProof [EQUIVALENT, 0 ms]
            (454) PiDP
            (455) PiDPToQDPProof [SOUND, 0 ms]
            (456) QDP
            (457) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (458) YES
        (459) PiDP
            (460) UsableRulesProof [EQUIVALENT, 0 ms]
            (461) PiDP
            (462) PiDPToQDPProof [SOUND, 0 ms]
            (463) QDP
            (464) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (465) YES
        (466) PiDP
            (467) UsableRulesProof [EQUIVALENT, 0 ms]
            (468) PiDP
            (469) PiDPToQDPProof [SOUND, 0 ms]
            (470) QDP
            (471) QDPQMonotonicMRRProof [EQUIVALENT, 30 ms]
            (472) QDP
            (473) QDPQMonotonicMRRProof [EQUIVALENT, 20 ms]
            (474) QDP
            (475) UsableRulesProof [EQUIVALENT, 0 ms]
            (476) QDP
            (477) QReductionProof [EQUIVALENT, 0 ms]
            (478) QDP
        (479) PiDP


----------------------------------------

(0)
Obligation:
Clauses:

mergesort([], [], Ls).
mergesort(.(X, []), .(X, []), Ls).
mergesort(Xs, Ys, .(H, Ls)) :- ','(split(Xs, X1s, X2s, .(H, Ls)), ','(mergesort(X1s, Y1s, Ls), ','(mergesort(X2s, Y2s, Ls), merge(Y1s, Y2s, Ys, .(H, Ls))))).
split([], [], [], Ls).
split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls).
merge([], Xs, Xs, Ls).
merge(Xs, [], Xs, Ls).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=<(X, Y), merge(Xs, .(Y, Ys), Zs, Ls)).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) :- ','(>(X, Y), merge(.(X, Xs), Ys, Zs, Ls)).


Query: mergesort(g,a,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

mergesort([], [], Ls).
mergesort(.(X, []), .(X, []), Ls).
mergesort(Xs, Ys, .(H, Ls)) :- ','(split(Xs, X1s, X2s, .(H, Ls)), ','(mergesort(X1s, Y1s, Ls), ','(mergesort(X2s, Y2s, Ls), merge(Y1s, Y2s, Ys, .(H, Ls))))).
split([], [], [], Ls).
split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls).
merge([], Xs, Xs, Ls).
merge(Xs, [], Xs, Ls).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=<(X, Y), merge(Xs, .(Y, Ys), Zs, Ls)).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) :- ','(>(X, Y), merge(.(X, Xs), Ys, Zs, Ls)).
=<(X0, X1).
>(X0, X1).


Query: mergesort(g,a,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesort_in_3: (b,f,f)

split_in_4: (b,f,f,f)

merge_in_4: (b,b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =<_IN_AA(X, Y)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> >_IN_AA(X, Y)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

=<_IN_AA(x1, x2)  =  =<_IN_AA

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)

>_IN_AA(x1, x2)  =  >_IN_AA

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =<_IN_AA(X, Y)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> >_IN_AA(X, Y)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

=<_IN_AA(x1, x2)  =  =<_IN_AA

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)

>_IN_AA(x1, x2)  =  >_IN_AA

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(11)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(12) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGAA(Xs, Ys, =<_out_aa) -> MERGE_IN_GGAA(Xs, .(Ys))
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U6_GGAA(Xs, Ys, =<_in_aa)
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U8_GGAA(Xs, Ys, >_in_aa)
   U8_GGAA(Xs, Ys, >_out_aa) -> MERGE_IN_GGAA(.(Xs), Ys)

The TRS R consists of the following rules:

   =<_in_aa -> =<_out_aa
   >_in_aa -> >_out_aa

The set Q consists of the following terms:

   =<_in_aa
   >_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U6_GGAA(Xs, Ys, =<_out_aa) -> MERGE_IN_GGAA(Xs, .(Ys))
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U6_GGAA(Xs, Ys, =<_in_aa)
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U8_GGAA(Xs, Ys, >_in_aa)
   U8_GGAA(Xs, Ys, >_out_aa) -> MERGE_IN_GGAA(.(Xs), Ys)

Strictly oriented rules of the TRS R:

   =<_in_aa -> =<_out_aa
   >_in_aa -> >_out_aa

Used ordering: Knuth-Bendix order [KBO] with precedence:U8_GGAA_3 > >_in_aa > >_out_aa > =<_in_aa > =<_out_aa > ._1 > MERGE_IN_GGAA_2 > U6_GGAA_3

and weight map:

   =<_in_aa=1
   =<_out_aa=1
   >_in_aa=1
   >_out_aa=1
   ._1=1
   U6_GGAA_3=1
   MERGE_IN_GGAA_2=0
   U8_GGAA_3=0

The variable weight is 1

----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   =<_in_aa
   >_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(Xs)) -> SPLIT_IN_GAAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAAA(.(Xs)) -> SPLIT_IN_GAAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(.([])) -> mergesort_out_gaa(.([]))
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(merge_in_ggaa(.(Xs), Ys))
   U9_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   mergesort_in_gaa(.([])) -> mergesort_out_gaa(.([]))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 0
   POL(=<_out_aa) = 0
   POL(>_in_aa) = 2
   POL(>_out_aa) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 2*x_1
   POL(U1_GAA(x_1)) = 2*x_1
   POL(U1_gaa(x_1)) = 2*x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = x_1 + x_2
   POL(U4_gaa(x_1)) = x_1
   POL(U5_gaaa(x_1)) = 1 + x_1
   POL(U6_ggaa(x_1, x_2, x_3)) = 2 + x_1 + x_2 + 2*x_3
   POL(U7_ggaa(x_1)) = 1 + x_1
   POL(U8_ggaa(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U9_ggaa(x_1)) = 1 + x_1
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 2*x_1
   POL(mergesort_out_gaa(x_1)) = x_1
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2)) = x_1 + x_2


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(merge_in_ggaa(.(Xs), Ys))
   U9_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(merge_in_ggaa(.(Xs), Ys))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2 + x_1
   POL(=<_in_aa) = 2
   POL(=<_out_aa) = 2
   POL(>_in_aa) = 2
   POL(>_out_aa) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U4_gaa(x_1)) = 2*x_1
   POL(U5_gaaa(x_1)) = 1
   POL(U6_ggaa(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U7_ggaa(x_1)) = 2 + x_1
   POL(U8_ggaa(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U9_ggaa(x_1)) = 2 + x_1
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2)) = 0


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U9_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   >_in_aa -> >_out_aa
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U9_ggaa(x0)


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   >_in_aa -> >_out_aa
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 1
   POL(=<_out_aa) = 1
   POL(>_in_aa) = 0
   POL(>_out_aa) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 2*x_1
   POL(U1_GAA(x_1)) = x_1
   POL(U1_gaa(x_1)) = x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_gaa(x_1)) = 2*x_1
   POL(U5_gaaa(x_1)) = 2 + x_1
   POL(U6_ggaa(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(U7_ggaa(x_1)) = 1 + x_1
   POL(U8_ggaa(x_1, x_2, x_3)) = 1 + x_1 + x_2 + x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 2*x_1
   POL(mergesort_out_gaa(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = 2*x_1
   POL(split_out_gaaa(x_1, x_2)) = 2*x_1 + 2*x_2


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   >_in_aa -> >_out_aa
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   >_in_aa
   U8_ggaa(x0, x1, x2)


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(merge_in_ggaa(Xs, .(Ys)))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 1
   POL(=<_out_aa) = 1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_gaa(x_1)) = x_1
   POL(U5_gaaa(x_1)) = 0
   POL(U6_ggaa(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + x_3
   POL(U7_ggaa(x_1)) = 1 + x_1
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2)) = 0


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa
   U7_ggaa(merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U7_ggaa(x0)


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 0
   POL(=<_out_aa) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 2*x_1
   POL(U1_GAA(x_1)) = x_1
   POL(U1_gaa(x_1)) = x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_gaa(x_1)) = 2*x_1
   POL(U5_gaaa(x_1)) = 2 + x_1
   POL(U6_ggaa(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 2*x_1
   POL(mergesort_out_gaa(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = 2*x_1
   POL(split_out_gaaa(x_1, x_2)) = 2*x_1 + 2*x_2


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =<_in_aa -> =<_out_aa

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(50) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =<_in_aa
   U6_ggaa(x0, x1, x2)


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s)) at position [1] we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([])),U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([])))
   (U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0))),U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0))))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)
   U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(56) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs)) at position [0] we obtained the following new rules [LPAR04]:

   (MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], [])),MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], [])))
   (MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0))),MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0))))


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)
   U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(58) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s) we obtained the following new rules [LPAR04]:

   (U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([]),U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([]))
   (U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0)),U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0)))


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)
   U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(60) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s) we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([]),U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([]))
   (U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0)),U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0)))


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))
   U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule U1_GAA(split_out_gaaa([], y1)) -> U2_GAA(y1, mergesort_out_gaa([])) we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([])),U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([])))
   (U1_GAA(split_out_gaaa([], .(y_0))) -> U2_GAA(.(y_0), mergesort_out_gaa([])),U1_GAA(split_out_gaaa([], .(y_0))) -> U2_GAA(.(y_0), mergesort_out_gaa([])))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))
   U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa([], .(y_0))) -> U2_GAA(.(y_0), mergesort_out_gaa([]))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(64) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0)))
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule U1_GAA(split_out_gaaa(x0, y1)) -> U2_GAA(y1, U1_gaa(split_in_gaaa(x0))) we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0))),U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0))))
   (U1_GAA(split_out_gaaa(x0, .(y_0))) -> U2_GAA(.(y_0), U1_gaa(split_in_gaaa(x0))),U1_GAA(split_out_gaaa(x0, .(y_0))) -> U2_GAA(.(y_0), U1_gaa(split_in_gaaa(x0))))


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(x0, .(y_0))) -> U2_GAA(.(y_0), U1_gaa(split_in_gaaa(x0)))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(68) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(69)
Complex Obligation (AND)

----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0)))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(71) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U1_GAA(split_out_gaaa([], x1)) -> MERGESORT_IN_GAA([]) we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], [])) -> MERGESORT_IN_GAA([]),U1_GAA(split_out_gaaa([], [])) -> MERGESORT_IN_GAA([]))


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa([], [])) -> MERGESORT_IN_GAA([])

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U1_GAA(split_out_gaaa(x0, [])) -> U2_GAA([], U1_gaa(split_in_gaaa(x0))) we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_in_gaaa([]))),U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_in_gaaa([]))))


----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa([], [])) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_in_gaaa([])))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(75) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_in_gaaa([]))) at position [1,0] we obtained the following new rules [LPAR04]:

   (U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_out_gaaa([], []))),U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_out_gaaa([], []))))


----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA([]) -> U1_GAA(split_out_gaaa([], []))
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], mergesort_out_gaa([]))
   U2_GAA([], mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa([], [])) -> MERGESORT_IN_GAA([])
   U1_GAA(split_out_gaaa([], [])) -> U2_GAA([], U1_gaa(split_out_gaaa([], [])))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(x0, .(y_0))) -> U2_GAA(.(y_0), U1_gaa(split_in_gaaa(x0)))
   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(78) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U2_GAA(.(y_0), mergesort_out_gaa(x1)) -> MERGESORT_IN_GAA(.(y_0))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + 2*x_1
   POL(MERGESORT_IN_GAA(x_1)) = x_1
   POL(U1_GAA(x_1)) = x_1
   POL(U1_gaa(x_1)) = x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_gaa(x_1)) = 2*x_1
   POL(U5_gaaa(x_1)) = 1 + 2*x_1
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = x_1
   POL(mergesort_out_gaa(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2)) = x_1 + 2*x_2


----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))
   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(x0, .(y_0))) -> U2_GAA(.(y_0), U1_gaa(split_in_gaaa(x0)))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(80) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(82) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(84) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   mergesort_in_gaa(x0)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)


----------------------------------------

(85)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(.(x0)) -> U1_GAA(U5_gaaa(split_in_gaaa(x0)))
   U1_GAA(split_out_gaaa(.(y_0), x1)) -> MERGESORT_IN_GAA(.(y_0))

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(split_in_gaaa(Xs))
   U5_gaaa(split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(Ys), Zs)

The set Q consists of the following terms:

   split_in_gaaa(x0)
   U5_gaaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(86) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesort_in_3: (b,f,f)

split_in_4: (b,f,f,f)

merge_in_4: (b,b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(87)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)



----------------------------------------

(88) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =<_IN_AA(X, Y)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> >_IN_AA(X, Y)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x2, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x1, x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

=<_IN_AA(x1, x2)  =  =<_IN_AA

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)

>_IN_AA(x1, x2)  =  >_IN_AA

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(89)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =<_IN_AA(X, Y)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> >_IN_AA(X, Y)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x2, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x1, x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

=<_IN_AA(x1, x2)  =  =<_IN_AA

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)

>_IN_AA(x1, x2)  =  >_IN_AA

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(90) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(91)
Complex Obligation (AND)

----------------------------------------

(92)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(93) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(94)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)

The TRS R consists of the following rules:

   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x2, x4, x8)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x2, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(95) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGAA(Xs, Ys, =<_out_aa) -> MERGE_IN_GGAA(Xs, .(Ys))
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U6_GGAA(Xs, Ys, =<_in_aa)
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U8_GGAA(Xs, Ys, >_in_aa)
   U8_GGAA(Xs, Ys, >_out_aa) -> MERGE_IN_GGAA(.(Xs), Ys)

The TRS R consists of the following rules:

   =<_in_aa -> =<_out_aa
   >_in_aa -> >_out_aa

The set Q consists of the following terms:

   =<_in_aa
   >_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(97) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U6_GGAA(Xs, Ys, =<_out_aa) -> MERGE_IN_GGAA(Xs, .(Ys))
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U6_GGAA(Xs, Ys, =<_in_aa)
   MERGE_IN_GGAA(.(Xs), .(Ys)) -> U8_GGAA(Xs, Ys, >_in_aa)
   U8_GGAA(Xs, Ys, >_out_aa) -> MERGE_IN_GGAA(.(Xs), Ys)

Strictly oriented rules of the TRS R:

   =<_in_aa -> =<_out_aa
   >_in_aa -> >_out_aa

Used ordering: Knuth-Bendix order [KBO] with precedence:U8_GGAA_3 > >_in_aa > >_out_aa > =<_in_aa > =<_out_aa > ._1 > MERGE_IN_GGAA_2 > U6_GGAA_3

and weight map:

   =<_in_aa=1
   =<_out_aa=1
   >_in_aa=1
   >_out_aa=1
   ._1=1
   U6_GGAA_3=1
   MERGE_IN_GGAA_2=0
   U8_GGAA_3=0

The variable weight is 1

----------------------------------------

(98)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   =<_in_aa
   >_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(99) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(100)
YES

----------------------------------------

(101)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(102) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(103)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(104) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(Xs)) -> SPLIT_IN_GAAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(106) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAAA(.(Xs)) -> SPLIT_IN_GAAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(107)
YES

----------------------------------------

(108)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_in_aa(X, Y))
   =<_in_aa(X0, X1) -> =<_out_aa(X0, X1)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =<_out_aa(X, Y)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_in_aa(X, Y))
   >_in_aa(X0, X1) -> >_out_aa(X0, X1)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, >_out_aa(X, Y)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x2, x4, x8)

=<_in_aa(x1, x2)  =  =<_in_aa

=<_out_aa(x1, x2)  =  =<_out_aa

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x2, x4, x8)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x2, x4, x8)

>_in_aa(x1, x2)  =  >_in_aa

>_out_aa(x1, x2)  =  >_out_aa

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x2, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(109) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(.([])) -> mergesort_out_gaa(.([]), .([]))
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(Xs, Ys, merge_in_ggaa(.(Xs), Ys))
   U9_ggaa(Xs, Ys, merge_out_ggaa(.(Xs), Ys, Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(111) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mergesort_in_gaa(.([])) -> mergesort_out_gaa(.([]), .([]))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2 + x_1
   POL(=<_in_aa) = 2
   POL(=<_out_aa) = 2
   POL(>_in_aa) = 2
   POL(>_out_aa) = 0
   POL(MERGESORT_IN_GAA(x_1)) = x_1
   POL(U1_GAA(x_1, x_2)) = x_2
   POL(U1_gaa(x_1, x_2)) = x_2
   POL(U2_GAA(x_1, x_2, x_3)) = x_2 + x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_2 + x_3
   POL(U3_gaa(x_1, x_2, x_3)) = x_3
   POL(U4_gaa(x_1, x_2)) = 0
   POL(U5_gaaa(x_1, x_2)) = 2 + x_2
   POL(U6_ggaa(x_1, x_2, x_3)) = x_3
   POL(U7_ggaa(x_1, x_2, x_3)) = 1
   POL(U8_ggaa(x_1, x_2, x_3)) = 2*x_1
   POL(U9_ggaa(x_1, x_2, x_3)) = 2*x_1
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1
   POL(merge_out_ggaa(x_1, x_2, x_3)) = 0
   POL(mergesort_in_gaa(x_1)) = x_1
   POL(mergesort_out_gaa(x_1, x_2)) = 0
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2, x_3)) = x_2 + x_3


----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(Xs, Ys, merge_in_ggaa(.(Xs), Ys))
   U9_ggaa(Xs, Ys, merge_out_ggaa(.(Xs), Ys, Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(113) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U9_ggaa(Xs, Ys, merge_out_ggaa(.(Xs), Ys, Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 1
   POL(=<_out_aa) = 1
   POL(>_in_aa) = 1
   POL(>_out_aa) = 1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + 2*x_3
   POL(U7_ggaa(x_1, x_2, x_3)) = 1 + x_3
   POL(U8_ggaa(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2 + 2*x_3
   POL(U9_ggaa(x_1, x_2, x_3)) = 2 + x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   >_in_aa -> >_out_aa
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(Xs, Ys, merge_in_ggaa(.(Xs), Ys))
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(115) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(Xs), .(Ys)) -> U8_ggaa(Xs, Ys, >_in_aa)
   U8_ggaa(Xs, Ys, >_out_aa) -> U9_ggaa(Xs, Ys, merge_in_ggaa(.(Xs), Ys))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2 + x_1
   POL(=<_in_aa) = 2
   POL(=<_out_aa) = 2
   POL(>_in_aa) = 2
   POL(>_out_aa) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U7_ggaa(x_1, x_2, x_3)) = 2 + x_3
   POL(U8_ggaa(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U9_ggaa(x_1, x_2, x_3)) = x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   >_in_aa -> >_out_aa
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(117) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(119) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   >_in_aa
   U8_ggaa(x0, x1, x2)
   U9_ggaa(x0, x1, x2)


----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))
   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(121) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U7_ggaa(Xs, Ys, merge_out_ggaa(Xs, .(Ys), Zs)) -> merge_out_ggaa(.(Xs), .(Ys), .(Zs))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 1 + x_1
   POL(=<_in_aa) = 2
   POL(=<_out_aa) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U5_gaaa(x_1, x_2)) = x_1
   POL(U6_ggaa(x_1, x_2, x_3)) = 1 + 2*x_1 + x_2 + x_3
   POL(U7_ggaa(x_1, x_2, x_3)) = 2 + x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = x_2
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =<_in_aa -> =<_out_aa
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(123) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   =<_in_aa -> =<_out_aa

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2 + 2*x_1
   POL(=<_in_aa) = 2
   POL(=<_out_aa) = 1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3)) = x_1 + 2*x_2 + 2*x_3
   POL(U7_ggaa(x_1, x_2, x_3)) = x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   U6_ggaa(Xs, Ys, =<_out_aa) -> U7_ggaa(Xs, Ys, merge_in_ggaa(Xs, .(Ys)))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(125) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U7_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(127) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U7_ggaa(x0, x1, x2)


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(Xs), .(Ys)) -> U6_ggaa(Xs, Ys, =<_in_aa)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2
   POL(=<_in_aa) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3)) = x_3
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = 2*x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =<_in_aa
   U6_ggaa(x0, x1, x2)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(131) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =<_in_aa
   U6_ggaa(x0, x1, x2)


----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(Xs)) -> U5_gaaa(Xs, split_in_gaaa(Xs))
   U5_gaaa(Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(Xs), .(Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(133) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(134)
Obligation:
Clauses:

mergesort([], [], Ls).
mergesort(.(X, []), .(X, []), Ls).
mergesort(Xs, Ys, .(H, Ls)) :- ','(split(Xs, X1s, X2s, .(H, Ls)), ','(mergesort(X1s, Y1s, Ls), ','(mergesort(X2s, Y2s, Ls), merge(Y1s, Y2s, Ys, .(H, Ls))))).
split([], [], [], Ls).
split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls).
merge([], Xs, Xs, Ls).
merge(Xs, [], Xs, Ls).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(;(=(X1, X2), isLess(X1, X2)), merge(Xs, .(Y, Ys), Zs, Ls)))).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(isGreater(X1, X2), merge(.(X, Xs), Ys, Zs, Ls)))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: mergesort(g,a,a)
----------------------------------------

(135) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(136)
Obligation:
Clauses:

mergesort([], [], Ls).
mergesort(.(X, []), .(X, []), Ls).
mergesort(Xs, Ys, .(H, Ls)) :- ','(split(Xs, X1s, X2s, .(H, Ls)), ','(mergesort(X1s, Y1s, Ls), ','(mergesort(X2s, Y2s, Ls), merge(Y1s, Y2s, Ys, .(H, Ls))))).
split([], [], [], Ls).
split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls).
merge([], Xs, Xs, Ls).
merge(Xs, [], Xs, Ls).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(;(=(X1, X2), isLess(X1, X2)), merge(Xs, .(Y, Ys), Zs, Ls)))).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(isGreater(X1, X2), merge(.(X, Xs), Ys, Zs, Ls)))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: mergesort(g,a,a)
----------------------------------------

(137) OrTransformerProof (EQUIVALENT)
Transformed all or-constructs[PROLOG].
----------------------------------------

(138)
Obligation:
Clauses:

mergesort([], [], Ls).
mergesort(.(X, []), .(X, []), Ls).
mergesort(Xs, Ys, .(H, Ls)) :- ','(split(Xs, X1s, X2s, .(H, Ls)), ','(mergesort(X1s, Y1s, Ls), ','(mergesort(X2s, Y2s, Ls), merge(Y1s, Y2s, Ys, .(H, Ls))))).
split([], [], [], Ls).
split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls).
merge([], Xs, Xs, Ls).
merge(Xs, [], Xs, Ls).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(=(X1, X2), merge(Xs, .(Y, Ys), Zs, Ls)))).
merge(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(isLess(X1, X2), merge(Xs, .(Y, Ys), Zs, Ls)))).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) :- ','(=(X1, X), ','(=(X2, Y), ','(isGreater(X1, X2), merge(.(X, Xs), Ys, Zs, Ls)))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: mergesort(g,a,a)
----------------------------------------

(139) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesort_in_3: (b,f,f)

split_in_4: (b,f,f,f)

merge_in_4: (b,b,f,f)

isGreater_in_2: (b,b)

isLess_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(140)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)



----------------------------------------

(141) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> =_IN_GG(X1, X2)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISGREATER_IN_GG(X1, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U49_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U50_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISLESS_IN_GG(X1, X2)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U51_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U52_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x1, x2, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x1, x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x1, x2, x3)

U15_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x1, x2, x3)

U11_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(142)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> =_IN_GG(X1, X2)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISGREATER_IN_GG(X1, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U49_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U50_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISLESS_IN_GG(X1, X2)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U51_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U52_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x1, x2, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x1, x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x1, x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x1, x2, x3)

U15_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x1, x2, x3)

U11_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(143) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 19 less nodes.
----------------------------------------

(144)
Complex Obligation (AND)

----------------------------------------

(145)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(146) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(147)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(148) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(149)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(150) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(151)
YES

----------------------------------------

(152)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(153) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(154)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(155) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(156)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(157) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(158)
YES

----------------------------------------

(159)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(160) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(161)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(162) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(163)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(164) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y)) at position [5] we obtained the following new rules [LPAR04]:

   (U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)),U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)))


----------------------------------------

(165)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(166) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X)) at position [4] we obtained the following new rules [LPAR04]:

   (MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X)),MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X)))


----------------------------------------

(167)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(168) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X)) at position [4] we obtained the following new rules [LPAR04]:

   (MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X)),MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X)))


----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(170) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y)) at position [5] we obtained the following new rules [LPAR04]:

   (U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)),U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)))


----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(172) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   =_in_gg(X, X) -> =_out_gg(X, X)

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(174) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   =_in_gg(X, X) -> =_out_gg(X, X)

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(176) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2)) at position [4] we obtained the following new rules [LPAR04]:

   (U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0)),U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0)))


----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   =_in_gg(X, X) -> =_out_gg(X, X)

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(178) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(179)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(180) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_gg(x0, x1)


----------------------------------------

(181)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(182) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGAA(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys)) we obtained the following new rules [LPAR04]:

   (U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3)),U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3)))


----------------------------------------

(183)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(184) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2)) we obtained the following new rules [LPAR04]:

   (U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)),U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)))


----------------------------------------

(185)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(186) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2)) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)),U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)))


----------------------------------------

(187)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(188) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)) we obtained the following new rules [LPAR04]:

   (U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)),U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)))


----------------------------------------

(189)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(190) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y, Y)) we obtained the following new rules [LPAR04]:

   (U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)),U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)))


----------------------------------------

(191)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(192) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0, y2)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg(x0, x0)) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0)),U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0)))


----------------------------------------

(193)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(194) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGAA(z0, z1, z2, z3, =_out_gg(z4, z4)) -> MERGE_IN_GGAA(z1, .(z2, z3)) we obtained the following new rules [LPAR04]:

   (U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2)),U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2)))


----------------------------------------

(195)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0))
   U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(196) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)) we obtained the following new rules [LPAR04]:

   (U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2)),U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2)))


----------------------------------------

(197)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0))
   U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(198) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2)),U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2)))


----------------------------------------

(199)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0))
   U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(200) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U8_GGAA(z0, z1, z0, z2, =_out_gg(z0, z0)) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U14_GGAA_5(x_1, ..., x_5) ) = x_2 + 2x_4 + 2
POL( isGreater_in_gg_2(x_1, x_2) ) = 0
POL( succ_1(x_1) ) = 0
POL( zero ) = 0
POL( isGreater_out_gg_2(x_1, x_2) ) = max{0, -2}
POL( pred_1(x_1) ) = 0
POL( U49_gg_3(x_1, ..., x_3) ) = 2x_2
POL( U50_gg_3(x_1, ..., x_3) ) = max{0, x_2 - 2}
POL( U10_GGAA_5(x_1, ..., x_5) ) = x_2 + 2x_4 + 2x_5 + 1
POL( isLess_in_gg_2(x_1, x_2) ) = 2
POL( isLess_out_gg_2(x_1, x_2) ) = 2
POL( U51_gg_3(x_1, ..., x_3) ) = 2
POL( U52_gg_3(x_1, ..., x_3) ) = max{0, 2x_3 - 2}
POL( MERGE_IN_GGAA_2(x_1, x_2) ) = x_1 + 2x_2
POL( ._2(x_1, x_2) ) = x_2 + 2
POL( U6_GGAA_5(x_1, ..., x_5) ) = x_2 + 2x_4 + 2x_5 + 2
POL( =_out_ag_2(x_1, x_2) ) = 2
POL( U12_GGAA_5(x_1, ..., x_5) ) = x_2 + 2x_4 + 2x_5 + 2
POL( U7_GGAA_6(x_1, ..., x_6) ) = x_2 + 2x_4 + 2x_6 + 2
POL( U13_GGAA_6(x_1, ..., x_6) ) = x_2 + 2x_4 + 2x_6 + 2
POL( U8_GGAA_5(x_1, ..., x_5) ) = x_2 + 2x_4 + 2x_5 + 2
POL( =_out_gg_2(x_1, x_2) ) = 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))


----------------------------------------

(201)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X, X))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0, z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2, z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0, z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg(z0, z0))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0, x1, x2)
   U50_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U52_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(202) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 6 less nodes.
----------------------------------------

(203)
TRUE

----------------------------------------

(204)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(205) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(206)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(207) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(208)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs)) -> SPLIT_IN_GAAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(209) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAAA(.(X, Xs)) -> SPLIT_IN_GAAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(210)
YES

----------------------------------------

(211)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x1, x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x2, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x1, x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x1, x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x1, x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x1, x2, x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x2, x3, x4, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x1, x2, x3, x4, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x2, x3, x4, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x1, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(212) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(213)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(.(X, [])) -> mergesort_out_gaa(.(X, []), .(X, []))
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U9_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(214) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mergesort_in_gaa(.(X, [])) -> mergesort_out_gaa(.(X, []), .(X, []))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 0
   POL(=_in_gg(x_1, x_2)) = x_1 + 2*x_2
   POL(=_out_ag(x_1, x_2)) = 0
   POL(=_out_gg(x_1, x_2)) = x_1 + 2*x_2
   POL(MERGESORT_IN_GAA(x_1)) = 2*x_1
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U11_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U1_GAA(x_1, x_2)) = 2*x_2
   POL(U1_gaa(x_1, x_2)) = x_2
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_2 + x_3
   POL(U3_gaa(x_1, x_2, x_3)) = x_3
   POL(U49_gg(x_1, x_2, x_3)) = 2
   POL(U4_gaa(x_1, x_2)) = 0
   POL(U50_gg(x_1, x_2, x_3)) = 1
   POL(U51_gg(x_1, x_2, x_3)) = 1
   POL(U52_gg(x_1, x_2, x_3)) = 1
   POL(U5_gaaa(x_1, x_2, x_3)) = 1 + x_3
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2
   POL(U8_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U9_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(isLess_in_gg(x_1, x_2)) = x_1
   POL(isLess_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1
   POL(merge_out_ggaa(x_1, x_2, x_3)) = 0
   POL(mergesort_in_gaa(x_1)) = x_1
   POL(mergesort_out_gaa(x_1, x_2)) = 0
   POL(pred(x_1)) = 2
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2, x_3)) = x_2 + x_3
   POL(succ(x_1)) = 2
   POL(zero) = 2


----------------------------------------

(215)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U9_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(216) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 2
   POL(=_in_gg(x_1, x_2)) = 1
   POL(=_out_ag(x_1, x_2)) = 2
   POL(=_out_gg(x_1, x_2)) = 1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + 2*x_4 + x_5
   POL(U11_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U49_gg(x_1, x_2, x_3)) = 2
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = 1
   POL(U51_gg(x_1, x_2, x_3)) = 2
   POL(U52_gg(x_1, x_2, x_3)) = 1
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2 + 2*x_4 + 2*x_6
   POL(U8_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + 2*x_2 + 2*x_4 + 2*x_5
   POL(U9_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2
   POL(isGreater_out_gg(x_1, x_2)) = 1
   POL(isLess_in_gg(x_1, x_2)) = 2
   POL(isLess_out_gg(x_1, x_2)) = 1
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = x_2
   POL(pred(x_1)) = 0
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 0


----------------------------------------

(217)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U9_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(218) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(219)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(220) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(221)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(222) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + x_3 + x_4 + x_5
   POL(U11_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_5
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + x_3 + x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_1 + 2*x_2 + x_3 + x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + x_3 + x_4
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U49_gg(x_1, x_2, x_3)) = 0
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = x_3
   POL(U51_gg(x_1, x_2, x_3)) = 2*x_3
   POL(U52_gg(x_1, x_2, x_3)) = 2*x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + x_3 + x_4 + x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + 2*x_2 + x_3 + x_4 + x_5
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_1
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(isLess_in_gg(x_1, x_2)) = x_1
   POL(isLess_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = x_2
   POL(pred(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 1 + 2*x_1
   POL(zero) = 0


----------------------------------------

(223)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(224) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(225)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U52_gg(x0, x1, x2)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(226) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U52_gg(x0, x1, x2)


----------------------------------------

(227)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(228) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, merge_in_ggaa(Xs, .(Y, Ys)))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 2
   POL(=_out_ag(x_1, x_2)) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U11_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U49_gg(x_1, x_2, x_3)) = 1
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = 1
   POL(U51_gg(x_1, x_2, x_3)) = 2
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2 + 2*x_4 + 2*x_6
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2
   POL(isGreater_out_gg(x_1, x_2)) = 1 + x_1
   POL(isLess_in_gg(x_1, x_2)) = 2
   POL(isLess_out_gg(x_1, x_2)) = 2
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = x_2
   POL(pred(x_1)) = 0
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 1


----------------------------------------

(229)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U11_ggaa(X, Xs, Y, Ys, merge_out_ggaa(Xs, .(Y, Ys), Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(230) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(231)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(232) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U11_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(233)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(234) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + x_5
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U49_gg(x_1, x_2, x_3)) = 0
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = 2 + x_2
   POL(U51_gg(x_1, x_2, x_3)) = 2 + x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2 + 2*x_4 + x_5
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_2
   POL(isGreater_out_gg(x_1, x_2)) = x_2
   POL(isLess_in_gg(x_1, x_2)) = x_1
   POL(isLess_out_gg(x_1, x_2)) = 1 + x_2
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = 2*x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 2 + x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 1


----------------------------------------

(235)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(236) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + x_5
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U49_gg(x_1, x_2, x_3)) = 0
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = 0
   POL(U51_gg(x_1, x_2, x_3)) = 1 + 2*x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2 + 2*x_4 + x_5
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 0
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(isLess_in_gg(x_1, x_2)) = x_1
   POL(isLess_out_gg(x_1, x_2)) = 1 + x_2
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = 2*x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 2 + 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 1


----------------------------------------

(237)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(238) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(239)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U51_gg(x0, x1, x2)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(240) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U51_gg(x0, x1, x2)


----------------------------------------

(241)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(242) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 0
   POL(=_out_ag(x_1, x_2)) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + x_2 + x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + x_4
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U49_gg(x_1, x_2, x_3)) = 2*x_1
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 2*x_1
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 0
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_1 + x_2
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(isLess_in_gg(x_1, x_2)) = x_1
   POL(isLess_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 2 + 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 2 + 2*x_1
   POL(zero) = 0


----------------------------------------

(243)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(244) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(245)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   isLess_in_gg(x0, x1)
   U10_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(246) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U7_ggaa(x0, x1, x2, x3, x4, x5)
   isLess_in_gg(x0, x1)
   U10_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(247)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(248) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = 2*x_1
   POL(=_out_ag(x_1, x_2)) = x_1 + x_2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + x_3 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U49_gg(x_1, x_2, x_3)) = x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3 + 2*x_4
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = x_1
   POL(zero) = 2


----------------------------------------

(249)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(250) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + x_2 + x_3 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + x_3 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = x_2 + 2*x_3
   POL(U49_gg(x_1, x_2, x_3)) = 2*x_3
   POL(U4_gaa(x_1, x_2)) = x_2
   POL(U50_gg(x_1, x_2, x_3)) = x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3 + 2*x_4
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = x_2
   POL(pred(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 2 + 2*x_1
   POL(zero) = 0


----------------------------------------

(251)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(252) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(253)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U49_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(254) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U49_gg(x0, x1, x2)


----------------------------------------

(255)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(256) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U15_ggaa(X, Xs, Y, Ys, merge_out_ggaa(.(X, Xs), Ys, Zs)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = 2*x_1
   POL(=_out_ag(x_1, x_2)) = x_1 + x_2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + x_3 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_3 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 2
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_3 + 2*x_4
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 2
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 2
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 0


----------------------------------------

(257)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(258) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + x_2 + 2*x_4 + 2*x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + x_2 + 2*x_4 + 2*x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 1 + 2*x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3 + 2*x_4
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 1
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 1 + 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 0


----------------------------------------

(259)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(260) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + 2*x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_1 + 2*x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 1 + x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + 2*x_3 + x_4
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = x_1
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 1 + 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 1
   POL(zero) = 0


----------------------------------------

(261)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(262) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, merge_in_ggaa(.(X, Xs), Ys))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 0
   POL(=_out_ag(x_1, x_2)) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + x_2 + x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + x_4
   POL(U15_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 0
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_2
   POL(isGreater_out_gg(x_1, x_2)) = 2 + 2*x_1
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 2 + x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0


----------------------------------------

(263)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(264) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U15_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(265)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(266) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1, x_2)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_3
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_5
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 1 + x_3
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_3
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = x_2
   POL(isGreater_out_gg(x_1, x_2)) = 0
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = 1 + x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0
   POL(succ(x_1)) = 0


----------------------------------------

(267)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   =_in_ag(X) -> =_out_ag(X, X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(268) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   =_in_ag(X) -> =_out_ag(X, X)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1
   POL(=_in_ag(x_1)) = 1
   POL(=_out_ag(x_1, x_2)) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U1_GAA(x_1, x_2)) = 0
   POL(U1_gaa(x_1, x_2)) = 0
   POL(U2_GAA(x_1, x_2, x_3)) = 2*x_3
   POL(U2_gaa(x_1, x_2, x_3)) = 2*x_3
   POL(U3_gaa(x_1, x_2, x_3)) = 2*x_2 + 2*x_3
   POL(U4_gaa(x_1, x_2)) = 2*x_2
   POL(U50_gg(x_1, x_2, x_3)) = 0
   POL(U5_gaaa(x_1, x_2, x_3)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_5
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_2
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1, x_2, x_3)) = x_3
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1, x_2)) = 2*x_2
   POL(pred(x_1)) = x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2, x_3)) = 0


----------------------------------------

(269)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(270) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(271)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(272) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0, x1, x2)
   U14_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(273)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_GAA(Xs, X2s, mergesort_in_gaa(X1s))
   U2_GAA(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(Xs, split_in_gaaa(Xs))
   U1_GAA(Xs, split_out_gaaa(Xs, X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, Xs, split_in_gaaa(Xs))
   U5_gaaa(X, Xs, split_out_gaaa(Xs, Zs, Ys)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([], [])
   mergesort_in_gaa(Xs) -> U1_gaa(Xs, split_in_gaaa(Xs))
   U1_gaa(Xs, split_out_gaaa(Xs, X1s, X2s)) -> U2_gaa(Xs, X2s, mergesort_in_gaa(X1s))
   U2_gaa(Xs, X2s, mergesort_out_gaa(X1s, Y1s)) -> U3_gaa(Xs, Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Xs, Y1s, mergesort_out_gaa(X2s, Y2s)) -> U4_gaa(Xs, merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa([], Xs, Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs, [], Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(Xs, merge_out_ggaa(Y1s, Y2s, Ys)) -> mergesort_out_gaa(Xs, Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1, x2)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1, x2)
   U3_gaa(x0, x1, x2)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(274) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesort_in_3: (b,f,f)

split_in_4: (b,f,f,f)

merge_in_4: (b,b,f,f)

isGreater_in_2: (b,b)

isLess_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(275)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)



----------------------------------------

(276) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> =_IN_GG(X1, X2)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISGREATER_IN_GG(X1, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U49_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U50_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISLESS_IN_GG(X1, X2)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U51_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U52_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x1, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x1, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U49_GG(x1, x2, x3)  =  U49_GG(x3)

U50_GG(x1, x2, x3)  =  U50_GG(x3)

U15_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_GGAA(x3, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U51_GG(x1, x2, x3)  =  U51_GG(x3)

U52_GG(x1, x2, x3)  =  U52_GG(x3)

U11_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_GGAA(x1, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(277)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, X1s, X2s, .(H, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_GAAA(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_GAA(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   U3_GAA(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> MERGE_IN_GGAA(Y1s, Y2s, Ys, .(H, Ls))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> =_IN_GG(X1, X2)
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> =_IN_AG(X1, X)
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> =_IN_AG(X2, Y)
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISGREATER_IN_GG(X1, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U49_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U50_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> ISLESS_IN_GG(X1, X2)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U51_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U52_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_GGAA(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)

U5_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U5_GAAA(x1, x7)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)

U3_GAA(x1, x2, x3, x4, x5, x6)  =  U3_GAA(x5, x6)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x5)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U9_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_GGAA(x1, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U49_GG(x1, x2, x3)  =  U49_GG(x3)

U50_GG(x1, x2, x3)  =  U50_GG(x3)

U15_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_GGAA(x3, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U51_GG(x1, x2, x3)  =  U51_GG(x3)

U52_GG(x1, x2, x3)  =  U52_GG(x3)

U11_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_GGAA(x1, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(278) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 19 less nodes.
----------------------------------------

(279)
Complex Obligation (AND)

----------------------------------------

(280)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(281) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(282)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(283) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(284)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(285) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(286)
YES

----------------------------------------

(287)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(288) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(289)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(290) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(291)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(292) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(293)
YES

----------------------------------------

(294)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(295) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(296)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_GGAA(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> MERGE_IN_GGAA(.(X, Xs), Ys, Zs, Ls)
   U7_GGAA(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> MERGE_IN_GGAA(Xs, .(Y, Ys), Zs, Ls)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

MERGE_IN_GGAA(x1, x2, x3, x4)  =  MERGE_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_GGAA(x1, x2, x3, x4, x8)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_GGAA(x1, x2, x3, x4, x8, x9)

U8_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAA(x1, x2, x3, x4, x8)

U12_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_GGAA(x1, x2, x3, x4, x8)

U13_GGAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_GGAA(x1, x2, x3, x4, x8, x9)

U14_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_GGAA(x1, x2, x3, x4, x8)

U10_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_GGAA(x1, x2, x3, x4, x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(297) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(298)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U52_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(299) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y)) at position [5] we obtained the following new rules [LPAR04]:

   (U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)),U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)))


----------------------------------------

(300)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U52_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(301) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_in_ag(X)) at position [4] we obtained the following new rules [LPAR04]:

   (MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X)),MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X)))


----------------------------------------

(302)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U52_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(303) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_in_ag(X)) at position [4] we obtained the following new rules [LPAR04]:

   (MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X)),MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X)))


----------------------------------------

(304)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U52_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(305) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_in_ag(Y)) at position [5] we obtained the following new rules [LPAR04]:

   (U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)),U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)))


----------------------------------------

(306)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U52_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(307) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(308)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   =_in_gg(X, X) -> =_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(309) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(310)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2))
   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   =_in_gg(X, X) -> =_out_gg

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(311) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_GGAA(X, Xs, Y, Ys, =_in_gg(X1, X2)) at position [4] we obtained the following new rules [LPAR04]:

   (U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg),U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg))


----------------------------------------

(312)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   =_in_gg(X, X) -> =_out_gg

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(313) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(314)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(315) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_gg(x0, x1)


----------------------------------------

(316)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(317) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_GGAA(X, Xs, Y, Ys, isGreater_in_gg(X1, X2)) we obtained the following new rules [LPAR04]:

   (U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)),U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)))


----------------------------------------

(318)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(319) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_GGAA(X, Xs, Y, Ys, isLess_in_gg(X1, X2)) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)),U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)))


----------------------------------------

(320)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(321) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)) we obtained the following new rules [LPAR04]:

   (U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)),U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)))


----------------------------------------

(322)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(323) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U12_GGAA(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_GGAA(X, Xs, Y, Ys, X1, =_out_ag(Y)) we obtained the following new rules [LPAR04]:

   (U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)),U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)))


----------------------------------------

(324)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg)
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(325) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(y0, y1, y2, y3, x0, =_out_ag(x0)) -> U8_GGAA(y0, y1, y2, y3, =_out_gg) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg),U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg))


----------------------------------------

(326)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(327) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGAA(X, Xs, Y, Ys, =_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys)) we obtained the following new rules [LPAR04]:

   (U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2)),U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2)))


----------------------------------------

(328)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg)
   U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(329) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z4, z2)) we obtained the following new rules [LPAR04]:

   (U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2)),U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2)))


----------------------------------------

(330)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg)
   U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(331) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U7_GGAA(z0, z1, z2, z3, z4, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z4, z2)) we obtained the following new rules [LPAR04]:

   (U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2)),U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2)))


----------------------------------------

(332)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg)
   U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(333) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   U8_GGAA(z0, z1, z0, z2, =_out_gg) -> MERGE_IN_GGAA(z1, .(z0, z2))
   U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U10_GGAA(z0, z1, z2, z3, isLess_in_gg(z0, z2))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_out_ag(x_1)) = 0
   POL(=_out_gg) = 1
   POL(MERGE_IN_GGAA(x_1, x_2)) = x_1
   POL(U10_GGAA(x_1, x_2, x_3, x_4, x_5)) = x_2
   POL(U12_GGAA(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2
   POL(U13_GGAA(x_1, x_2, x_3, x_4, x_5, x_6)) = 1 + x_2
   POL(U14_GGAA(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2
   POL(U49_gg(x_1)) = 0
   POL(U50_gg(x_1)) = 0
   POL(U51_gg(x_1)) = 0
   POL(U52_gg(x_1)) = 2
   POL(U6_GGAA(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2
   POL(U7_GGAA(x_1, x_2, x_3, x_4, x_5, x_6)) = 1 + x_2
   POL(U8_GGAA(x_1, x_2, x_3, x_4, x_5)) = x_2 + x_5
   POL(isGreater_in_gg(x_1, x_2)) = 0
   POL(isGreater_out_gg) = 0
   POL(isLess_in_gg(x_1, x_2)) = 2 + x_1
   POL(isLess_out_gg) = 0
   POL(pred(x_1)) = 0
   POL(succ(x_1)) = 2 + 2*x_1
   POL(zero) = 0


----------------------------------------

(334)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
   U10_GGAA(X, Xs, Y, Ys, isLess_out_gg) -> MERGE_IN_GGAA(Xs, .(Y, Ys))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U6_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U6_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U7_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U7_GGAA(z0, z1, z0, z3, z0, =_out_ag(z0)) -> U8_GGAA(z0, z1, z0, z3, =_out_gg)
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(335) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(336)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(337) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(338)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)

The TRS R consists of the following rules:

   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   isLess_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)
   U51_gg(x0)
   U52_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(339) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isLess_in_gg(x0, x1)
   U51_gg(x0)
   U52_gg(x0)


----------------------------------------

(340)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
   U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
   U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
   U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)

The TRS R consists of the following rules:

   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   isGreater_in_gg(x0, x1)
   U49_gg(x0)
   U50_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(341) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U12_GGAA(z0, z1, z2, z3, =_out_ag(z0)) -> U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2))
The graph contains the following edges 1 >= 1, 5 > 1, 2 >= 2, 3 >= 3, 4 >= 4, 1 >= 5, 5 > 5


*U14_GGAA(X, Xs, Y, Ys, isGreater_out_gg) -> MERGE_IN_GGAA(.(X, Xs), Ys)
The graph contains the following edges 4 >= 2


*U13_GGAA(z0, z1, z2, z3, z0, =_out_ag(z2)) -> U14_GGAA(z0, z1, z2, z3, isGreater_in_gg(z0, z2))
The graph contains the following edges 1 >= 1, 5 >= 1, 2 >= 2, 3 >= 3, 6 > 3, 4 >= 4


*MERGE_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U12_GGAA(X, Xs, Y, Ys, =_out_ag(X))
The graph contains the following edges 1 > 1, 1 > 2, 2 > 3, 2 > 4


----------------------------------------

(342)
YES

----------------------------------------

(343)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(344) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(345)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> SPLIT_IN_GAAA(Xs, Zs, Ys, Ls)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SPLIT_IN_GAAA(x1, x2, x3, x4)  =  SPLIT_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(346) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(347)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAAA(.(X, Xs)) -> SPLIT_IN_GAAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(348) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAAA(.(X, Xs)) -> SPLIT_IN_GAAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(349)
YES

----------------------------------------

(350)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_GAA(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> MERGESORT_IN_GAA(X2s, Y2s, Ls)
   MERGESORT_IN_GAA(Xs, Ys, .(H, Ls)) -> U1_GAA(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   U1_GAA(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> MERGESORT_IN_GAA(X1s, Y1s, Ls)

The TRS R consists of the following rules:

   mergesort_in_gaa([], [], Ls) -> mergesort_out_gaa([], [], Ls)
   mergesort_in_gaa(.(X, []), .(X, []), Ls) -> mergesort_out_gaa(.(X, []), .(X, []), Ls)
   mergesort_in_gaa(Xs, Ys, .(H, Ls)) -> U1_gaa(Xs, Ys, H, Ls, split_in_gaaa(Xs, X1s, X2s, .(H, Ls)))
   split_in_gaaa([], [], [], Ls) -> split_out_gaaa([], [], [], Ls)
   split_in_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) -> U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_in_gaaa(Xs, Zs, Ys, Ls))
   U5_gaaa(X, Xs, Ys, Zs, H, Ls, split_out_gaaa(Xs, Zs, Ys, Ls)) -> split_out_gaaa(.(X, Xs), .(X, Ys), Zs, .(H, Ls))
   U1_gaa(Xs, Ys, H, Ls, split_out_gaaa(Xs, X1s, X2s, .(H, Ls))) -> U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_in_gaa(X1s, Y1s, Ls))
   U2_gaa(Xs, Ys, H, Ls, X2s, mergesort_out_gaa(X1s, Y1s, Ls)) -> U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_in_gaa(X2s, Y2s, Ls))
   U3_gaa(Xs, Ys, H, Ls, Y1s, mergesort_out_gaa(X2s, Y2s, Ls)) -> U4_gaa(Xs, Ys, H, Ls, merge_in_ggaa(Y1s, Y2s, Ys, .(H, Ls)))
   merge_in_ggaa([], Xs, Xs, Ls) -> merge_out_ggaa([], Xs, Xs, Ls)
   merge_in_ggaa(Xs, [], Xs, Ls) -> merge_out_ggaa(Xs, [], Xs, Ls)
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls)) -> U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U6_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U8_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_gg(X1, X2)) -> U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   merge_in_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls)) -> U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_in_ag(X1, X))
   U12_ggaa(X, Xs, Y, Ys, Zs, H, Ls, =_out_ag(X1, X)) -> U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_in_ag(X2, Y))
   U13_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(X, Y, isGreater_in_gg(X, Y))
   U50_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U49_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U14_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isGreater_out_gg(X1, X2)) -> U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(.(X, Xs), Ys, Zs, Ls))
   U15_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(.(X, Xs), Ys, Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(Y, Zs), .(H, Ls))
   U9_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U7_ggaa(X, Xs, Y, Ys, Zs, H, Ls, X1, =_out_ag(X2, Y)) -> U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(X, Y, isLess_in_gg(X, Y))
   U52_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U51_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U10_ggaa(X, Xs, Y, Ys, Zs, H, Ls, isLess_out_gg(X1, X2)) -> U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_in_ggaa(Xs, .(Y, Ys), Zs, Ls))
   U11_ggaa(X, Xs, Y, Ys, Zs, H, Ls, merge_out_ggaa(Xs, .(Y, Ys), Zs, Ls)) -> merge_out_ggaa(.(X, Xs), .(Y, Ys), .(X, Zs), .(H, Ls))
   U4_gaa(Xs, Ys, H, Ls, merge_out_ggaa(Y1s, Y2s, Ys, .(H, Ls))) -> mergesort_out_gaa(Xs, Ys, .(H, Ls))

The argument filtering Pi contains the following mapping:
mergesort_in_gaa(x1, x2, x3)  =  mergesort_in_gaa(x1)

[]  =  []

mergesort_out_gaa(x1, x2, x3)  =  mergesort_out_gaa(x2)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

split_in_gaaa(x1, x2, x3, x4)  =  split_in_gaaa(x1)

split_out_gaaa(x1, x2, x3, x4)  =  split_out_gaaa(x2, x3)

U5_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U5_gaaa(x1, x7)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x5, x6)

U3_gaa(x1, x2, x3, x4, x5, x6)  =  U3_gaa(x5, x6)

U4_gaa(x1, x2, x3, x4, x5)  =  U4_gaa(x5)

merge_in_ggaa(x1, x2, x3, x4)  =  merge_in_ggaa(x1, x2)

merge_out_ggaa(x1, x2, x3, x4)  =  merge_out_ggaa(x3)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_ggaa(x1, x2, x3, x4, x8)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U7_ggaa(x1, x2, x3, x4, x8, x9)

U8_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_ggaa(x1, x2, x3, x4, x8)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U9_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U9_ggaa(x1, x8)

U12_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U12_ggaa(x1, x2, x3, x4, x8)

U13_ggaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U13_ggaa(x1, x2, x3, x4, x8, x9)

U14_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ggaa(x1, x2, x3, x4, x8)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

zero  =  zero

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U49_gg(x1, x2, x3)  =  U49_gg(x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U15_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U15_ggaa(x3, x8)

U10_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U10_ggaa(x1, x2, x3, x4, x8)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U51_gg(x1, x2, x3)  =  U51_gg(x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U11_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U11_ggaa(x1, x8)

MERGESORT_IN_GAA(x1, x2, x3)  =  MERGESORT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(351) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(352)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(.(X, [])) -> mergesort_out_gaa(.(X, []))
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg
   U8_ggaa(X, Xs, Y, Ys, =_out_gg) -> U9_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(Y, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Y, Zs))
   U9_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg) -> U11_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(353) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mergesort_in_gaa(.(X, [])) -> mergesort_out_gaa(.(X, []))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + 2*x_2
   POL(=_in_ag(x_1)) = 0
   POL(=_in_gg(x_1, x_2)) = x_1 + x_2
   POL(=_out_ag(x_1)) = 0
   POL(=_out_gg) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 2*x_1
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_4
   POL(U11_ggaa(x_1, x_2)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_4
   POL(U15_ggaa(x_1, x_2)) = 0
   POL(U1_GAA(x_1)) = 2*x_1
   POL(U1_gaa(x_1)) = x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = x_2
   POL(U49_gg(x_1)) = 1
   POL(U4_gaa(x_1)) = 0
   POL(U50_gg(x_1)) = 2
   POL(U51_gg(x_1)) = 0
   POL(U52_gg(x_1)) = 0
   POL(U5_gaaa(x_1, x_2)) = 1 + 2*x_2
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + 2*x_4
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 1 + 2*x_4
   POL(U8_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_4
   POL(U9_ggaa(x_1, x_2)) = 0
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2
   POL(isGreater_out_gg) = 0
   POL(isLess_in_gg(x_1, x_2)) = 2*x_2
   POL(isLess_out_gg) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_2
   POL(merge_out_ggaa(x_1)) = 0
   POL(mergesort_in_gaa(x_1)) = x_1
   POL(mergesort_out_gaa(x_1)) = 0
   POL(pred(x_1)) = 2
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2)) = x_1 + x_2
   POL(succ(x_1)) = 0
   POL(zero) = 0


----------------------------------------

(354)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg
   U8_ggaa(X, Xs, Y, Ys, =_out_gg) -> U9_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U15_ggaa(Y, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Y, Zs))
   U9_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg) -> U11_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(355) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U15_ggaa(Y, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(Y, Zs))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 2
   POL(=_in_gg(x_1, x_2)) = 1
   POL(=_out_ag(x_1)) = 2
   POL(=_out_gg) = 1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + 2*x_4 + x_5
   POL(U11_ggaa(x_1, x_2)) = 1 + x_2
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2 + 2*x_4 + x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 1 + x_2 + 2*x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2)) = 2 + x_2
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = x_2
   POL(U3_gaa(x_1, x_2)) = x_1 + 2*x_2
   POL(U49_gg(x_1)) = 2
   POL(U4_gaa(x_1)) = x_1
   POL(U50_gg(x_1)) = 2
   POL(U51_gg(x_1)) = 1
   POL(U52_gg(x_1)) = x_1
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + x_2 + 2*x_4 + x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 1 + x_2 + 2*x_4 + x_6
   POL(U8_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + x_2 + 2*x_4 + x_5
   POL(U9_ggaa(x_1, x_2)) = 1 + x_2
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2
   POL(isGreater_out_gg) = 2
   POL(isLess_in_gg(x_1, x_2)) = 1
   POL(isLess_out_gg) = 1
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + 2*x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = x_1
   POL(pred(x_1)) = 0
   POL(split_in_gaaa(x_1)) = x_1
   POL(split_out_gaaa(x_1, x_2)) = 0
   POL(succ(x_1)) = 0
   POL(zero) = 0


----------------------------------------

(356)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   =_in_ag(X) -> =_out_ag(X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg
   U8_ggaa(X, Xs, Y, Ys, =_out_gg) -> U9_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U9_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg) -> U11_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(357) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U6_ggaa(X, Xs, Y, Ys, =_in_ag(X))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(=_in_ag(x_1)) = 1
   POL(=_in_gg(x_1, x_2)) = 2 + x_1 + x_2
   POL(=_out_ag(x_1)) = 1
   POL(=_out_gg) = 0
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U10_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + x_4
   POL(U11_ggaa(x_1, x_2)) = 1 + x_2
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + x_4 + x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_2 + x_4 + x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + 2*x_2 + x_4 + x_5
   POL(U15_ggaa(x_1, x_2)) = x_2
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U49_gg(x_1)) = 1
   POL(U4_gaa(x_1)) = x_1
   POL(U50_gg(x_1)) = 2
   POL(U51_gg(x_1)) = 0
   POL(U52_gg(x_1)) = 0
   POL(U5_gaaa(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4, x_5)) = 1 + 2*x_2 + x_4 + x_5
   POL(U7_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_2 + x_4 + 2*x_6
   POL(U8_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + x_4
   POL(U9_ggaa(x_1, x_2)) = 1 + x_2
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2
   POL(isGreater_out_gg) = 1
   POL(isLess_in_gg(x_1, x_2)) = 0
   POL(isLess_out_gg) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = x_1
   POL(pred(x_1)) = 0
   POL(split_in_gaaa(x_1)) = 1 + x_1
   POL(split_out_gaaa(x_1, x_2)) = 0
   POL(succ(x_1)) = x_1
   POL(zero) = 0


----------------------------------------

(358)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   =_in_ag(X) -> =_out_ag(X)
   U6_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U7_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U8_ggaa(X, Xs, Y, Ys, =_in_gg(X1, X2))
   =_in_gg(X, X) -> =_out_gg
   U8_ggaa(X, Xs, Y, Ys, =_out_gg) -> U9_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U9_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U7_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U10_ggaa(X, Xs, Y, Ys, isLess_in_gg(X1, X2))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U51_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U52_gg(isLess_in_gg(X, Y))
   U52_gg(isLess_out_gg) -> isLess_out_gg
   U51_gg(isLess_out_gg) -> isLess_out_gg
   U10_ggaa(X, Xs, Y, Ys, isLess_out_gg) -> U11_ggaa(X, merge_in_ggaa(Xs, .(Y, Ys)))
   U11_ggaa(X, merge_out_ggaa(Zs)) -> merge_out_ggaa(.(X, Zs))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(359) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(360)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(361) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U6_ggaa(x0, x1, x2, x3, x4)
   U7_ggaa(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   U8_ggaa(x0, x1, x2, x3, x4)
   U9_ggaa(x0, x1)
   isLess_in_gg(x0, x1)
   U52_gg(x0)
   U51_gg(x0)
   U10_ggaa(x0, x1, x2, x3, x4)
   U11_ggaa(x0, x1)


----------------------------------------

(362)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U50_gg(isGreater_out_gg) -> isGreater_out_gg
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(363) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U50_gg(isGreater_out_gg) -> isGreater_out_gg

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2*x_1 + 2*x_2 + 2*x_4 + 2*x_6
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + 2*x_4 + x_5
   POL(U15_ggaa(x_1, x_2)) = 2 + x_2
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U49_gg(x_1)) = x_1
   POL(U4_gaa(x_1)) = x_1
   POL(U50_gg(x_1)) = 2 + 2*x_1
   POL(U5_gaaa(x_1, x_2)) = 0
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_2
   POL(isGreater_out_gg) = 2
   POL(merge_in_ggaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1)) = 2*x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = 2*x_1
   POL(pred(x_1)) = 1 + 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2)) = 0
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 1


----------------------------------------

(364)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)
   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(365) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U12_ggaa(X, Xs, Y, Ys, =_out_ag(X1)) -> U13_ggaa(X, Xs, Y, Ys, X1, =_in_ag(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2 + 2*x_2
   POL(=_in_ag(x_1)) = 2
   POL(=_out_ag(x_1)) = 2
   POL(MERGESORT_IN_GAA(x_1)) = 0
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2*x_2 + 2*x_4 + 2*x_5
   POL(U13_ggaa(x_1, x_2, x_3, x_4, x_5, x_6)) = 2 + 2*x_2 + 2*x_4
   POL(U14_ggaa(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_2 + 2*x_4
   POL(U15_ggaa(x_1, x_2)) = x_2
   POL(U1_GAA(x_1)) = 0
   POL(U1_gaa(x_1)) = 0
   POL(U2_GAA(x_1, x_2)) = 2*x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U49_gg(x_1)) = 2*x_1
   POL(U4_gaa(x_1)) = 2*x_1
   POL(U50_gg(x_1)) = x_1
   POL(U5_gaaa(x_1, x_2)) = 0
   POL([]) = 0
   POL(isGreater_in_gg(x_1, x_2)) = 2*x_1
   POL(isGreater_out_gg) = 1
   POL(merge_in_ggaa(x_1, x_2)) = x_1 + x_2
   POL(merge_out_ggaa(x_1)) = x_1
   POL(mergesort_in_gaa(x_1)) = 0
   POL(mergesort_out_gaa(x_1)) = x_1
   POL(pred(x_1)) = 2*x_1
   POL(split_in_gaaa(x_1)) = 0
   POL(split_out_gaaa(x_1, x_2)) = 0
   POL(succ(x_1)) = 2 + 2*x_1
   POL(zero) = 1


----------------------------------------

(366)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)
   U13_ggaa(X, Xs, Y, Ys, X1, =_out_ag(X2)) -> U14_ggaa(X, Xs, Y, Ys, isGreater_in_gg(X1, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(succ(X), succ(Y)) -> U49_gg(isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg
   isGreater_in_gg(pred(X), pred(Y)) -> U50_gg(isGreater_in_gg(X, Y))
   U14_ggaa(X, Xs, Y, Ys, isGreater_out_gg) -> U15_ggaa(Y, merge_in_ggaa(.(X, Xs), Ys))
   U49_gg(isGreater_out_gg) -> isGreater_out_gg

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(367) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(368)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(369) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U13_ggaa(x0, x1, x2, x3, x4, x5)
   isGreater_in_gg(x0, x1)
   U50_gg(x0)
   U49_gg(x0)
   U14_ggaa(x0, x1, x2, x3, x4)
   U15_ggaa(x0, x1)


----------------------------------------

(370)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(371) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   merge_in_ggaa(.(X, Xs), .(Y, Ys)) -> U12_ggaa(X, Xs, Y, Ys, =_in_ag(X))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(=_in_ag(x_1)) = x_1
   POL(=_out_ag(x_1)) = x_1
   POL(MERGESORT_IN_GAA(x_1)) = 1 + 2*x_1
   POL(U12_ggaa(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + 2*x_3 + 2*x_4 + x_5
   POL(U1_GAA(x_1)) = 1 + x_1
   POL(U1_gaa(x_1)) = 1 + x_1
   POL(U2_GAA(x_1, x_2)) = 2*x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_gaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_gaa(x_1)) = x_1
   POL(U5_gaaa(x_1, x_2)) = 2*x_1 + x_2
   POL([]) = 0
   POL(merge_in_ggaa(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(merge_out_ggaa(x_1)) = 1 + 2*x_1
   POL(mergesort_in_gaa(x_1)) = 1 + 2*x_1
   POL(mergesort_out_gaa(x_1)) = 1 + 2*x_1
   POL(split_in_gaaa(x_1)) = 2*x_1
   POL(split_out_gaaa(x_1, x_2)) = 2*x_1 + 2*x_2


----------------------------------------

(372)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)
   =_in_ag(X) -> =_out_ag(X)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(373) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(374)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(375) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)
   U12_ggaa(x0, x1, x2, x3, x4)


----------------------------------------

(376)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(split_out_gaaa(X1s, X2s)) -> U2_GAA(X2s, mergesort_in_gaa(X1s))
   U2_GAA(X2s, mergesort_out_gaa(Y1s)) -> MERGESORT_IN_GAA(X2s)
   MERGESORT_IN_GAA(Xs) -> U1_GAA(split_in_gaaa(Xs))
   U1_GAA(split_out_gaaa(X1s, X2s)) -> MERGESORT_IN_GAA(X1s)

The TRS R consists of the following rules:

   split_in_gaaa([]) -> split_out_gaaa([], [])
   split_in_gaaa(.(X, Xs)) -> U5_gaaa(X, split_in_gaaa(Xs))
   U5_gaaa(X, split_out_gaaa(Zs, Ys)) -> split_out_gaaa(.(X, Ys), Zs)
   mergesort_in_gaa([]) -> mergesort_out_gaa([])
   mergesort_in_gaa(Xs) -> U1_gaa(split_in_gaaa(Xs))
   U1_gaa(split_out_gaaa(X1s, X2s)) -> U2_gaa(X2s, mergesort_in_gaa(X1s))
   U2_gaa(X2s, mergesort_out_gaa(Y1s)) -> U3_gaa(Y1s, mergesort_in_gaa(X2s))
   U3_gaa(Y1s, mergesort_out_gaa(Y2s)) -> U4_gaa(merge_in_ggaa(Y1s, Y2s))
   merge_in_ggaa([], Xs) -> merge_out_ggaa(Xs)
   merge_in_ggaa(Xs, []) -> merge_out_ggaa(Xs)
   U4_gaa(merge_out_ggaa(Ys)) -> mergesort_out_gaa(Ys)

The set Q consists of the following terms:

   mergesort_in_gaa(x0)
   split_in_gaaa(x0)
   U5_gaaa(x0, x1)
   U1_gaa(x0)
   U2_gaa(x0, x1)
   U3_gaa(x0, x1)
   merge_in_ggaa(x0, x1)
   U4_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(377) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(mergesort ([]) ([]) Ls)",
                null
            ],
            [
                "(mergesort (. X ([])) (. X ([])) Ls)",
                null
            ],
            [
                "(mergesort Xs Ys (. H Ls))",
                "(',' (split Xs X1s X2s (. H Ls)) (',' (mergesort X1s Y1s Ls) (',' (mergesort X2s Y2s Ls) (merge Y1s Y2s Ys (. H Ls)))))"
            ],
            [
                "(split ([]) ([]) ([]) Ls)",
                null
            ],
            [
                "(split (. X Xs) (. X Ys) Zs (. H Ls))",
                "(split Xs Zs Ys Ls)"
            ],
            [
                "(merge ([]) Xs Xs Ls)",
                null
            ],
            [
                "(merge Xs ([]) Xs Ls)",
                null
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. X Zs) (. H Ls))",
                "(',' (=< X Y) (merge Xs (. Y Ys) Zs Ls))"
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. Y Zs) (. H Ls))",
                "(',' (> X Y) (merge (. X Xs) Ys Zs Ls))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "511": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3478": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T314",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T314",
                        "T312",
                        "T313",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T314",
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "512": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3477": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T313 (. T314 T315) T319 T320)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T314",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T314",
                        "T312",
                        "T313",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T314",
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3998": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T417 (. T418 T419) T423 T424)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T418",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T418",
                        "T417",
                        "T416",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T418",
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "2429": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T172 T174) (merge T173 (. T174 T175) T179 T180))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T172",
                        "T173",
                        "T174",
                        "T175"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3999": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T418",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            }
                        ]
                    },
                    "ground": [
                        "T418",
                        "T417",
                        "T416",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T418",
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3134": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3133": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3132": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T260 T262) (merge (. T260 T261) T263 T267 T268))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T260",
                        "T261",
                        "T262",
                        "T263"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174",
                        "T262"
                    ]
                }
            },
            "1503": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3406": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1502": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3405": {
                "goal": [{
                    "clause": 6,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3925": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T366",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3404": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3926": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T366",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1500": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "3403": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3402": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260",
                        "T262"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3401": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260",
                        "T262"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3409": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T281",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T281",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3408": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1504": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3407": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T281",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T281",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "22": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2331": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T39 X35 T95)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T39"],
                    "free": ["X35"],
                    "exprvars": []
                }
            },
            "2327": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T39 X35 T95) (merge T94 X35 T96 (. T97 T95)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T39",
                        "T94"
                    ],
                    "free": ["X35"],
                    "exprvars": []
                }
            },
            "2325": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T38 X34 T40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": ["X34"],
                    "exprvars": []
                }
            },
            "3414": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3413": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3412": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T312 T314) (merge T313 (. T314 T315) T319 T320))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T312",
                        "T313",
                        "T314",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3411": {
                "goal": [{
                    "clause": 8,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3410": {
                "goal": [{
                    "clause": 7,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3657": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T341 T342) T344 T348 T349)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T344",
                        "T343"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262",
                        "T343"
                    ]
                }
            },
            "3658": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T344",
                        "T343"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262",
                        "T343"
                    ]
                }
            },
            "4084": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T447",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T446",
                        "T445",
                        "T448",
                        "T447"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366",
                        "T447"
                    ]
                }
            },
            "2342": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2341": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2340": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "1491": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(split T66 X68 X67 T69)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(split T66 X68 X67 T69)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "4083": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T445 T446) T448 T452 T453)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T447",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T446",
                        "T445",
                        "T448",
                        "T447"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366",
                        "T447"
                    ]
                }
            },
            "2339": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2338": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3826": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T364 T366) (merge (. T364 T365) T367 T371 T372))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T364",
                        "T365",
                        "T366",
                        "T367"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2337": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3827": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2336": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3828": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2335": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2334": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2333": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2332": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "1528": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1527": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T86 X99 X98 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T86"],
                    "free": [
                        "X98",
                        "X99"
                    ],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split T27 X32 X33 (. T31 T32)) (',' (mergesort X32 X34 T32) (',' (mergesort X33 X35 T32) (merge X34 X35 T33 (. T31 T32)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33",
                        "X34",
                        "X35"
                    ],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3040": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T231",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T232",
                        "T231",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T231",
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "2867": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T172",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "1499": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "3039": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T232 (. T233 T234) T238 T239)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T231",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T232",
                        "T231",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T231",
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "2345": {
                "goal": [{
                    "clause": 8,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2344": {
                "goal": [{
                    "clause": 7,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2343": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4006": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T445 T447) (merge (. T445 T446) T448 T452 T453))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T445",
                        "T446",
                        "T447",
                        "T448"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366"
                    ]
                }
            },
            "4007": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "4008": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2868": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">"
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T172",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3970": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T416 T418) (merge T417 (. T418 T419) T423 T424))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T416",
                        "T417",
                        "T418",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "2881": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T199",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T199",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3968": {
                "goal": [{
                    "clause": 7,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "1425": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "2877": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3969": {
                "goal": [{
                    "clause": 8,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "2873": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3961": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 6,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3962": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3963": {
                "goal": [{
                    "clause": 6,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3964": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3965": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T385",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T385",
                        "T364",
                        "T366"
                    ]
                }
            },
            "3966": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "1427": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2879": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3967": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T385",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T385",
                        "T364",
                        "T366"
                    ]
                }
            },
            "2892": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2891": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2890": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T231 T233) (merge T232 (. T233 T234) T238 T239))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T231",
                        "T232",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "2491": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2490": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "176": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T38 X34 T40) (',' (mergesort T39 X35 T40) (merge X34 X35 T41 (. T42 T40))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [
                        "X34",
                        "X35"
                    ],
                    "exprvars": []
                }
            },
            "2886": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2885": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2884": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3577": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2883": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T199",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T199",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3576": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2882": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3575": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T341 T343) (merge (. T341 T342) T344 T348 T349))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T343",
                        "T344"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3971": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3972": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(split T27 X32 X33 (. T31 T32))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(split T27 X32 X33 (. T31 T32))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "505": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "506": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "509": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 4,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 5,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 15,
                "label": "EVAL with clause\nmergesort([], [], X5).\nand substitutionT1 -> [],\nT2 -> [],\nT3 -> T8,\nX5 -> T8"
            },
            {
                "from": 4,
                "to": 16,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 5,
                "to": 18,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 19,
                "label": "PARALLEL"
            },
            {
                "from": 15,
                "to": 17,
                "label": "SUCCESS"
            },
            {
                "from": 18,
                "to": 20,
                "label": "EVAL with clause\nmergesort(.(X14, []), .(X14, []), X15).\nand substitutionX14 -> T17,\nT1 -> .(T17, []),\nT2 -> .(T17, []),\nT3 -> T18,\nX15 -> T18"
            },
            {
                "from": 18,
                "to": 21,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 47,
                "label": "EVAL with clause\nmergesort(X28, X29, .(X30, X31)) :- ','(split(X28, X32, X33, .(X30, X31)), ','(mergesort(X32, X34, X31), ','(mergesort(X33, X35, X31), merge(X34, X35, X29, .(X30, X31))))).\nand substitutionT1 -> T27,\nX28 -> T27,\nT2 -> T33,\nX29 -> T33,\nX30 -> T31,\nX31 -> T32,\nT3 -> .(T31, T32),\nT29 -> T31,\nT30 -> T32,\nT28 -> T33"
            },
            {
                "from": 19,
                "to": 48,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 20,
                "to": 22,
                "label": "SUCCESS"
            },
            {
                "from": 47,
                "to": 176,
                "label": "SPLIT 1"
            },
            {
                "from": 47,
                "to": 178,
                "label": "SPLIT 2\nnew knowledge:\nT27 is ground\nT38 is ground\nT39 is ground\nreplacements:X32 -> T38,\nX33 -> T39,\nT32 -> T40,\nT33 -> T41,\nT31 -> T42"
            },
            {
                "from": 176,
                "to": 229,
                "label": "CASE"
            },
            {
                "from": 178,
                "to": 2325,
                "label": "SPLIT 1"
            },
            {
                "from": 178,
                "to": 2327,
                "label": "SPLIT 2\nnew knowledge:\nT38 is ground\nT94 is ground\nreplacements:X34 -> T94,\nT40 -> T95,\nT41 -> T96,\nT42 -> T97"
            },
            {
                "from": 229,
                "to": 505,
                "label": "PARALLEL"
            },
            {
                "from": 229,
                "to": 506,
                "label": "PARALLEL"
            },
            {
                "from": 505,
                "to": 509,
                "label": "EVAL with clause\nsplit([], [], [], X44).\nand substitutionT27 -> [],\nX32 -> [],\nX33 -> [],\nT31 -> T55,\nT32 -> T56,\nX44 -> .(T55, T56)"
            },
            {
                "from": 505,
                "to": 511,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 506,
                "to": 1425,
                "label": "EVAL with clause\nsplit(.(X61, X62), .(X61, X63), X64, .(X65, X66)) :- split(X62, X64, X63, X66).\nand substitutionX61 -> T65,\nX62 -> T66,\nT27 -> .(T65, T66),\nX63 -> X67,\nX32 -> .(T65, X67),\nX33 -> X68,\nX64 -> X68,\nT31 -> T67,\nX65 -> T67,\nT32 -> T69,\nX66 -> T69,\nT68 -> T69"
            },
            {
                "from": 506,
                "to": 1427,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 509,
                "to": 512,
                "label": "SUCCESS"
            },
            {
                "from": 1425,
                "to": 1491,
                "label": "CASE"
            },
            {
                "from": 1491,
                "to": 1499,
                "label": "PARALLEL"
            },
            {
                "from": 1491,
                "to": 1500,
                "label": "PARALLEL"
            },
            {
                "from": 1499,
                "to": 1502,
                "label": "EVAL with clause\nsplit([], [], [], X75).\nand substitutionT66 -> [],\nX68 -> [],\nX67 -> [],\nT69 -> T76,\nX75 -> T76"
            },
            {
                "from": 1499,
                "to": 1503,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1500,
                "to": 1527,
                "label": "EVAL with clause\nsplit(.(X92, X93), .(X92, X94), X95, .(X96, X97)) :- split(X93, X95, X94, X97).\nand substitutionX92 -> T85,\nX93 -> T86,\nT66 -> .(T85, T86),\nX94 -> X98,\nX68 -> .(T85, X98),\nX67 -> X99,\nX95 -> X99,\nX96 -> T87,\nX97 -> T89,\nT69 -> .(T87, T89),\nT88 -> T89"
            },
            {
                "from": 1500,
                "to": 1528,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1502,
                "to": 1504,
                "label": "SUCCESS"
            },
            {
                "from": 1527,
                "to": 1425,
                "label": "INSTANCE with matching:\nT66 -> T86\nX68 -> X99\nX67 -> X98\nT69 -> T89"
            },
            {
                "from": 2325,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T38\nT2 -> X34\nT3 -> T40"
            },
            {
                "from": 2327,
                "to": 2331,
                "label": "SPLIT 1"
            },
            {
                "from": 2327,
                "to": 2332,
                "label": "SPLIT 2\nnew knowledge:\nT39 is ground\nT102 is ground\nreplacements:X35 -> T102,\nT96 -> T103,\nT97 -> T104,\nT95 -> T105"
            },
            {
                "from": 2331,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T39\nT2 -> X35\nT3 -> T95"
            },
            {
                "from": 2332,
                "to": 2333,
                "label": "CASE"
            },
            {
                "from": 2333,
                "to": 2334,
                "label": "PARALLEL"
            },
            {
                "from": 2333,
                "to": 2335,
                "label": "PARALLEL"
            },
            {
                "from": 2334,
                "to": 2336,
                "label": "EVAL with clause\nmerge([], X122, X122, X123).\nand substitutionT94 -> [],\nT102 -> T126,\nX122 -> T126,\nT103 -> T126,\nT104 -> T127,\nT105 -> T128,\nX123 -> .(T127, T128)"
            },
            {
                "from": 2334,
                "to": 2337,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2335,
                "to": 2339,
                "label": "PARALLEL"
            },
            {
                "from": 2335,
                "to": 2340,
                "label": "PARALLEL"
            },
            {
                "from": 2336,
                "to": 2338,
                "label": "SUCCESS"
            },
            {
                "from": 2339,
                "to": 2341,
                "label": "EVAL with clause\nmerge(X132, [], X132, X133).\nand substitutionT94 -> T141,\nX132 -> T141,\nT102 -> [],\nT103 -> T141,\nT104 -> T142,\nT105 -> T143,\nX133 -> .(T142, T143)"
            },
            {
                "from": 2339,
                "to": 2342,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2340,
                "to": 2344,
                "label": "PARALLEL"
            },
            {
                "from": 2340,
                "to": 2345,
                "label": "PARALLEL"
            },
            {
                "from": 2341,
                "to": 2343,
                "label": "SUCCESS"
            },
            {
                "from": 2344,
                "to": 2429,
                "label": "EVAL with clause\nmerge(.(X162, X163), .(X164, X165), .(X162, X166), .(X167, X168)) :- ','(=<(X162, X164), merge(X163, .(X164, X165), X166, X168)).\nand substitutionX162 -> T172,\nX163 -> T173,\nT94 -> .(T172, T173),\nX164 -> T174,\nX165 -> T175,\nT102 -> .(T174, T175),\nX166 -> T179,\nT103 -> .(T172, T179),\nT104 -> T177,\nX167 -> T177,\nT105 -> T180,\nX168 -> T180,\nT176 -> T179,\nT178 -> T180"
            },
            {
                "from": 2344,
                "to": 2490,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2345,
                "to": 3826,
                "label": "EVAL with clause\nmerge(.(X339, X340), .(X341, X342), .(X341, X343), .(X344, X345)) :- ','(>(X339, X341), merge(.(X339, X340), X342, X343, X345)).\nand substitutionX339 -> T364,\nX340 -> T365,\nT94 -> .(T364, T365),\nX341 -> T366,\nX342 -> T367,\nT102 -> .(T366, T367),\nX343 -> T371,\nT103 -> .(T366, T371),\nT104 -> T369,\nX344 -> T369,\nT105 -> T372,\nX345 -> T372,\nT368 -> T371,\nT370 -> T372"
            },
            {
                "from": 2345,
                "to": 3827,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2429,
                "to": 2491,
                "label": "IS ERROR"
            },
            {
                "from": 2429,
                "to": 2867,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2429,
                "to": 2868,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 2867,
                "to": 2873,
                "label": "CASE"
            },
            {
                "from": 2873,
                "to": 2877,
                "label": "PARALLEL"
            },
            {
                "from": 2873,
                "to": 2879,
                "label": "PARALLEL"
            },
            {
                "from": 2877,
                "to": 2881,
                "label": "EVAL with clause\nmerge([], X181, X181, X182).\nand substitutionT173 -> [],\nT174 -> T199,\nT175 -> T200,\nX181 -> .(T199, T200),\nT179 -> .(T199, T200),\nT180 -> T201,\nX182 -> T201"
            },
            {
                "from": 2877,
                "to": 2882,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2879,
                "to": 2884,
                "label": "BACKTRACK\nfor clause: merge(Xs, [], Xs, Ls)because of non-unification"
            },
            {
                "from": 2881,
                "to": 2883,
                "label": "SUCCESS"
            },
            {
                "from": 2884,
                "to": 2885,
                "label": "PARALLEL"
            },
            {
                "from": 2884,
                "to": 2886,
                "label": "PARALLEL"
            },
            {
                "from": 2885,
                "to": 2890,
                "label": "EVAL with clause\nmerge(.(X213, X214), .(X215, X216), .(X213, X217), .(X218, X219)) :- ','(=<(X213, X215), merge(X214, .(X215, X216), X217, X219)).\nand substitutionX213 -> T231,\nX214 -> T232,\nT173 -> .(T231, T232),\nT174 -> T233,\nX215 -> T233,\nT175 -> T234,\nX216 -> T234,\nX217 -> T238,\nT179 -> .(T231, T238),\nX218 -> T236,\nX219 -> T239,\nT180 -> .(T236, T239),\nT235 -> T238,\nT237 -> T239"
            },
            {
                "from": 2885,
                "to": 2891,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2886,
                "to": 3132,
                "label": "EVAL with clause\nmerge(.(X238, X239), .(X240, X241), .(X240, X242), .(X243, X244)) :- ','(>(X238, X240), merge(.(X238, X239), X241, X242, X244)).\nand substitutionX238 -> T260,\nX239 -> T261,\nT173 -> .(T260, T261),\nT174 -> T262,\nX240 -> T262,\nT175 -> T263,\nX241 -> T263,\nX242 -> T267,\nT179 -> .(T262, T267),\nX243 -> T265,\nX244 -> T268,\nT180 -> .(T265, T268),\nT264 -> T267,\nT266 -> T268"
            },
            {
                "from": 2886,
                "to": 3133,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2890,
                "to": 2892,
                "label": "IS ERROR"
            },
            {
                "from": 2890,
                "to": 3039,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2890,
                "to": 3040,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3039,
                "to": 2867,
                "label": "INSTANCE with matching:\nT173 -> T232\nT174 -> T233\nT175 -> T234\nT179 -> T238\nT180 -> T239"
            },
            {
                "from": 3132,
                "to": 3134,
                "label": "IS ERROR"
            },
            {
                "from": 3132,
                "to": 3401,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3132,
                "to": 3402,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3401,
                "to": 3403,
                "label": "CASE"
            },
            {
                "from": 3403,
                "to": 3404,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3404,
                "to": 3405,
                "label": "PARALLEL"
            },
            {
                "from": 3404,
                "to": 3406,
                "label": "PARALLEL"
            },
            {
                "from": 3405,
                "to": 3407,
                "label": "EVAL with clause\nmerge(X259, [], X259, X260).\nand substitutionT260 -> T281,\nT261 -> T282,\nX259 -> .(T281, T282),\nT263 -> [],\nT267 -> .(T281, T282),\nT268 -> T283,\nX260 -> T283"
            },
            {
                "from": 3405,
                "to": 3408,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3406,
                "to": 3410,
                "label": "PARALLEL"
            },
            {
                "from": 3406,
                "to": 3411,
                "label": "PARALLEL"
            },
            {
                "from": 3407,
                "to": 3409,
                "label": "SUCCESS"
            },
            {
                "from": 3410,
                "to": 3412,
                "label": "EVAL with clause\nmerge(.(X289, X290), .(X291, X292), .(X289, X293), .(X294, X295)) :- ','(=<(X289, X291), merge(X290, .(X291, X292), X293, X295)).\nand substitutionT260 -> T312,\nX289 -> T312,\nT261 -> T313,\nX290 -> T313,\nX291 -> T314,\nX292 -> T315,\nT263 -> .(T314, T315),\nX293 -> T319,\nT267 -> .(T312, T319),\nX294 -> T317,\nX295 -> T320,\nT268 -> .(T317, T320),\nT316 -> T319,\nT318 -> T320"
            },
            {
                "from": 3410,
                "to": 3413,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3411,
                "to": 3575,
                "label": "EVAL with clause\nmerge(.(X314, X315), .(X316, X317), .(X316, X318), .(X319, X320)) :- ','(>(X314, X316), merge(.(X314, X315), X317, X318, X320)).\nand substitutionT260 -> T341,\nX314 -> T341,\nT261 -> T342,\nX315 -> T342,\nX316 -> T343,\nX317 -> T344,\nT263 -> .(T343, T344),\nX318 -> T348,\nT267 -> .(T343, T348),\nX319 -> T346,\nX320 -> T349,\nT268 -> .(T346, T349),\nT345 -> T348,\nT347 -> T349"
            },
            {
                "from": 3411,
                "to": 3576,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3412,
                "to": 3414,
                "label": "IS ERROR"
            },
            {
                "from": 3412,
                "to": 3477,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3412,
                "to": 3478,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3477,
                "to": 2867,
                "label": "INSTANCE with matching:\nT173 -> T313\nT174 -> T314\nT175 -> T315\nT179 -> T319\nT180 -> T320"
            },
            {
                "from": 3575,
                "to": 3577,
                "label": "IS ERROR"
            },
            {
                "from": 3575,
                "to": 3657,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3575,
                "to": 3658,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3657,
                "to": 3401,
                "label": "INSTANCE with matching:\nT260 -> T341\nT261 -> T342\nT263 -> T344\nT267 -> T348\nT268 -> T349"
            },
            {
                "from": 3826,
                "to": 3828,
                "label": "IS ERROR"
            },
            {
                "from": 3826,
                "to": 3925,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3826,
                "to": 3926,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3925,
                "to": 3961,
                "label": "CASE"
            },
            {
                "from": 3961,
                "to": 3962,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3962,
                "to": 3963,
                "label": "PARALLEL"
            },
            {
                "from": 3962,
                "to": 3964,
                "label": "PARALLEL"
            },
            {
                "from": 3963,
                "to": 3965,
                "label": "EVAL with clause\nmerge(X360, [], X360, X361).\nand substitutionT364 -> T385,\nT365 -> T386,\nX360 -> .(T385, T386),\nT367 -> [],\nT371 -> .(T385, T386),\nT372 -> T387,\nX361 -> T387"
            },
            {
                "from": 3963,
                "to": 3966,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3964,
                "to": 3968,
                "label": "PARALLEL"
            },
            {
                "from": 3964,
                "to": 3969,
                "label": "PARALLEL"
            },
            {
                "from": 3965,
                "to": 3967,
                "label": "SUCCESS"
            },
            {
                "from": 3968,
                "to": 3970,
                "label": "EVAL with clause\nmerge(.(X390, X391), .(X392, X393), .(X390, X394), .(X395, X396)) :- ','(=<(X390, X392), merge(X391, .(X392, X393), X394, X396)).\nand substitutionT364 -> T416,\nX390 -> T416,\nT365 -> T417,\nX391 -> T417,\nX392 -> T418,\nX393 -> T419,\nT367 -> .(T418, T419),\nX394 -> T423,\nT371 -> .(T416, T423),\nX395 -> T421,\nX396 -> T424,\nT372 -> .(T421, T424),\nT420 -> T423,\nT422 -> T424"
            },
            {
                "from": 3968,
                "to": 3971,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3969,
                "to": 4006,
                "label": "EVAL with clause\nmerge(.(X415, X416), .(X417, X418), .(X417, X419), .(X420, X421)) :- ','(>(X415, X417), merge(.(X415, X416), X418, X419, X421)).\nand substitutionT364 -> T445,\nX415 -> T445,\nT365 -> T446,\nX416 -> T446,\nX417 -> T447,\nX418 -> T448,\nT367 -> .(T447, T448),\nX419 -> T452,\nT371 -> .(T447, T452),\nX420 -> T450,\nX421 -> T453,\nT372 -> .(T450, T453),\nT449 -> T452,\nT451 -> T453"
            },
            {
                "from": 3969,
                "to": 4007,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3970,
                "to": 3972,
                "label": "IS ERROR"
            },
            {
                "from": 3970,
                "to": 3998,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3970,
                "to": 3999,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3998,
                "to": 2867,
                "label": "INSTANCE with matching:\nT173 -> T417\nT174 -> T418\nT175 -> T419\nT179 -> T423\nT180 -> T424"
            },
            {
                "from": 4006,
                "to": 4008,
                "label": "IS ERROR"
            },
            {
                "from": 4006,
                "to": 4083,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4006,
                "to": 4084,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4083,
                "to": 3925,
                "label": "INSTANCE with matching:\nT364 -> T445\nT365 -> T446\nT367 -> T448\nT371 -> T452\nT372 -> T453"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(378)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.

----------------------------------------

(379) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(380)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T27) -> U1^1(f47_in(T27), T27)
   F1_IN(T27) -> F47_IN(T27)
   F1425_IN(.(T85, T86)) -> U2^1(f1425_in(T86), .(T85, T86))
   F1425_IN(.(T85, T86)) -> F1425_IN(T86)
   F2867_IN(.(T231, T232), T233, T234) -> U3^1(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   F2867_IN(.(T231, T232), T233, T234) -> F2867_IN(T232, T233, T234)
   F2867_IN(.(T260, T261), T262, T263) -> U4^1(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   F2867_IN(.(T260, T261), T262, T263) -> F3401_IN(T260, T261, T263)
   F3401_IN(T312, T313, .(T314, T315)) -> U5^1(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   F3401_IN(T312, T313, .(T314, T315)) -> F2867_IN(T313, T314, T315)
   F3401_IN(T341, T342, .(T343, T344)) -> U6^1(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   F3401_IN(T341, T342, .(T343, T344)) -> F3401_IN(T341, T342, T344)
   F3925_IN(T416, T417, .(T418, T419)) -> U7^1(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   F3925_IN(T416, T417, .(T418, T419)) -> F2867_IN(T417, T418, T419)
   F3925_IN(T445, T446, .(T447, T448)) -> U8^1(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   F3925_IN(T445, T446, .(T447, T448)) -> F3925_IN(T445, T446, T448)
   F176_IN(.(T65, T66)) -> U9^1(f1425_in(T66), .(T65, T66))
   F176_IN(.(T65, T66)) -> F1425_IN(T66)
   F2332_IN(.(T172, T173), .(T174, T175)) -> U10^1(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   F2332_IN(.(T172, T173), .(T174, T175)) -> F2867_IN(T173, T174, T175)
   F2332_IN(.(T364, T365), .(T366, T367)) -> U11^1(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   F2332_IN(.(T364, T365), .(T366, T367)) -> F3925_IN(T364, T365, T367)
   F47_IN(T27) -> U12^1(f176_in(T27), T27)
   F47_IN(T27) -> F176_IN(T27)
   U12^1(f176_out1(T38, T39), T27) -> U13^1(f178_in(T38, T39), T27, T38, T39)
   U12^1(f176_out1(T38, T39), T27) -> F178_IN(T38, T39)
   F178_IN(T38, T39) -> U14^1(f1_in(T38), T38, T39)
   F178_IN(T38, T39) -> F1_IN(T38)
   U14^1(f1_out1(T94), T38, T39) -> U15^1(f2327_in(T39, T94), T38, T39, T94)
   U14^1(f1_out1(T94), T38, T39) -> F2327_IN(T39, T94)
   F2327_IN(T39, T94) -> U16^1(f1_in(T39), T39, T94)
   F2327_IN(T39, T94) -> F1_IN(T39)
   U16^1(f1_out1(T102), T39, T94) -> U17^1(f2332_in(T94, T102), T39, T94, T102)
   U16^1(f1_out1(T102), T39, T94) -> F2332_IN(T94, T102)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(381) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 21 less nodes.
----------------------------------------

(382)
Complex Obligation (AND)

----------------------------------------

(383)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2867_IN(.(T260, T261), T262, T263) -> F3401_IN(T260, T261, T263)
   F3401_IN(T312, T313, .(T314, T315)) -> F2867_IN(T313, T314, T315)
   F2867_IN(.(T231, T232), T233, T234) -> F2867_IN(T232, T233, T234)
   F3401_IN(T341, T342, .(T343, T344)) -> F3401_IN(T341, T342, T344)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(384) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(385)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2867_IN(.(T260, T261), T262, T263) -> F3401_IN(T260, T261, T263)
   F3401_IN(T312, T313, .(T314, T315)) -> F2867_IN(T313, T314, T315)
   F2867_IN(.(T231, T232), T233, T234) -> F2867_IN(T232, T233, T234)
   F3401_IN(T341, T342, .(T343, T344)) -> F3401_IN(T341, T342, T344)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(386) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F3401_IN(T312, T313, .(T314, T315)) -> F2867_IN(T313, T314, T315)
The graph contains the following edges 2 >= 1, 3 > 2, 3 > 3


*F3401_IN(T341, T342, .(T343, T344)) -> F3401_IN(T341, T342, T344)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*F2867_IN(.(T231, T232), T233, T234) -> F2867_IN(T232, T233, T234)
The graph contains the following edges 1 > 1, 2 >= 2, 3 >= 3


*F2867_IN(.(T260, T261), T262, T263) -> F3401_IN(T260, T261, T263)
The graph contains the following edges 1 > 1, 1 > 2, 3 >= 3


----------------------------------------

(387)
YES

----------------------------------------

(388)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3925_IN(T445, T446, .(T447, T448)) -> F3925_IN(T445, T446, T448)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(389) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(390)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3925_IN(T445, T446, .(T447, T448)) -> F3925_IN(T445, T446, T448)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(391) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F3925_IN(T445, T446, .(T447, T448)) -> F3925_IN(T445, T446, T448)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(392)
YES

----------------------------------------

(393)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1425_IN(.(T85, T86)) -> F1425_IN(T86)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(394) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(395)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1425_IN(.(T85, T86)) -> F1425_IN(T86)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(396) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F1425_IN(.(T85, T86)) -> F1425_IN(T86)
The graph contains the following edges 1 > 1


----------------------------------------

(397)
YES

----------------------------------------

(398)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T27) -> F47_IN(T27)
   F47_IN(T27) -> U12^1(f176_in(T27), T27)
   U12^1(f176_out1(T38, T39), T27) -> F178_IN(T38, T39)
   F178_IN(T38, T39) -> U14^1(f1_in(T38), T38, T39)
   U14^1(f1_out1(T94), T38, T39) -> F2327_IN(T39, T94)
   F2327_IN(T39, T94) -> F1_IN(T39)
   F178_IN(T38, T39) -> F1_IN(T38)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1([])
   f1_in(.(T17, [])) -> f1_out1(.(T17, []))
   f1_in(T27) -> U1(f47_in(T27), T27)
   U1(f47_out1(X32, X33, X34, X35, T33), T27) -> f1_out1(T33)
   f1425_in([]) -> f1425_out1([], [])
   f1425_in(.(T85, T86)) -> U2(f1425_in(T86), .(T85, T86))
   U2(f1425_out1(X99, X98), .(T85, T86)) -> f1425_out1(.(T85, X98), X99)
   f2867_in([], T199, T200) -> f2867_out1(.(T199, T200))
   f2867_in(.(T231, T232), T233, T234) -> U3(f2867_in(T232, T233, T234), .(T231, T232), T233, T234)
   U3(f2867_out1(T238), .(T231, T232), T233, T234) -> f2867_out1(.(T231, T238))
   f2867_in(.(T260, T261), T262, T263) -> U4(f3401_in(T260, T261, T263), .(T260, T261), T262, T263)
   U4(f3401_out1(T267), .(T260, T261), T262, T263) -> f2867_out1(.(T262, T267))
   f3401_in(T281, T282, []) -> f3401_out1(.(T281, T282))
   f3401_in(T312, T313, .(T314, T315)) -> U5(f2867_in(T313, T314, T315), T312, T313, .(T314, T315))
   U5(f2867_out1(T319), T312, T313, .(T314, T315)) -> f3401_out1(.(T312, T319))
   f3401_in(T341, T342, .(T343, T344)) -> U6(f3401_in(T341, T342, T344), T341, T342, .(T343, T344))
   U6(f3401_out1(T348), T341, T342, .(T343, T344)) -> f3401_out1(.(T343, T348))
   f3925_in(T385, T386, []) -> f3925_out1(.(T385, T386))
   f3925_in(T416, T417, .(T418, T419)) -> U7(f2867_in(T417, T418, T419), T416, T417, .(T418, T419))
   U7(f2867_out1(T423), T416, T417, .(T418, T419)) -> f3925_out1(.(T416, T423))
   f3925_in(T445, T446, .(T447, T448)) -> U8(f3925_in(T445, T446, T448), T445, T446, .(T447, T448))
   U8(f3925_out1(T452), T445, T446, .(T447, T448)) -> f3925_out1(.(T447, T452))
   f176_in([]) -> f176_out1([], [])
   f176_in(.(T65, T66)) -> U9(f1425_in(T66), .(T65, T66))
   U9(f1425_out1(X68, X67), .(T65, T66)) -> f176_out1(.(T65, X67), X68)
   f2332_in([], T126) -> f2332_out1(T126)
   f2332_in(T141, []) -> f2332_out1(T141)
   f2332_in(.(T172, T173), .(T174, T175)) -> U10(f2867_in(T173, T174, T175), .(T172, T173), .(T174, T175))
   U10(f2867_out1(T179), .(T172, T173), .(T174, T175)) -> f2332_out1(.(T172, T179))
   f2332_in(.(T364, T365), .(T366, T367)) -> U11(f3925_in(T364, T365, T367), .(T364, T365), .(T366, T367))
   U11(f3925_out1(T371), .(T364, T365), .(T366, T367)) -> f2332_out1(.(T366, T371))
   f47_in(T27) -> U12(f176_in(T27), T27)
   U12(f176_out1(T38, T39), T27) -> U13(f178_in(T38, T39), T27, T38, T39)
   U13(f178_out1(X34, X35, T41), T27, T38, T39) -> f47_out1(T38, T39, X34, X35, T41)
   f178_in(T38, T39) -> U14(f1_in(T38), T38, T39)
   U14(f1_out1(T94), T38, T39) -> U15(f2327_in(T39, T94), T38, T39, T94)
   U15(f2327_out1(X35, T96), T38, T39, T94) -> f178_out1(T94, X35, T96)
   f2327_in(T39, T94) -> U16(f1_in(T39), T39, T94)
   U16(f1_out1(T102), T39, T94) -> U17(f2332_in(T94, T102), T39, T94, T102)
   U17(f2332_out1(T103), T39, T94, T102) -> f2327_out1(T102, T103)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(399) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F47_IN([]) evaluates to  t =F47_IN([])

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F47_IN([]) -> U12^1(f176_in([]), [])
with rule F47_IN(T27') -> U12^1(f176_in(T27'), T27') at position [] and matcher [T27' / []]

U12^1(f176_in([]), []) -> U12^1(f176_out1([], []), [])
with rule f176_in([]) -> f176_out1([], []) at position [0] and matcher [ ]

U12^1(f176_out1([], []), []) -> F178_IN([], [])
with rule U12^1(f176_out1(T38', T39'), T27) -> F178_IN(T38', T39') at position [] and matcher [T38' / [], T39' / [], T27 / []]

F178_IN([], []) -> F1_IN([])
with rule F178_IN(T38, T39) -> F1_IN(T38) at position [] and matcher [T38 / [], T39 / []]

F1_IN([]) -> F47_IN([])
with rule F1_IN(T27) -> F47_IN(T27)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(400)
NO

----------------------------------------

(401) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(mergesort ([]) ([]) Ls)",
                null
            ],
            [
                "(mergesort (. X ([])) (. X ([])) Ls)",
                null
            ],
            [
                "(mergesort Xs Ys (. H Ls))",
                "(',' (split Xs X1s X2s (. H Ls)) (',' (mergesort X1s Y1s Ls) (',' (mergesort X2s Y2s Ls) (merge Y1s Y2s Ys (. H Ls)))))"
            ],
            [
                "(split ([]) ([]) ([]) Ls)",
                null
            ],
            [
                "(split (. X Xs) (. X Ys) Zs (. H Ls))",
                "(split Xs Zs Ys Ls)"
            ],
            [
                "(merge ([]) Xs Xs Ls)",
                null
            ],
            [
                "(merge Xs ([]) Xs Ls)",
                null
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. X Zs) (. H Ls))",
                "(',' (=< X Y) (merge Xs (. Y Ys) Zs Ls))"
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. Y Zs) (. H Ls))",
                "(',' (> X Y) (merge (. X Xs) Ys Zs Ls))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "2396": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3599": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3598": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3597": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T341 T343) (merge (. T341 T342) T344 T348 T349))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T343",
                        "T344"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3996": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T417 (. T418 T419) T423 T424)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T418",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T418",
                        "T417",
                        "T416",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T418",
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "3997": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T418",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            }
                        ]
                    },
                    "ground": [
                        "T418",
                        "T417",
                        "T416",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T418",
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "3911": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T366",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "10": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3912": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T366",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "11": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2441": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2440": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2438": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2437": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2436": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2435": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2434": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2433": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T94 T102 T103 (. T104 T105))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2432": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2439": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2330": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "2328": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(split T66 X68 X67 T69)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(split T66 X68 X67 T69)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "2326": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2324": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "2323": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2322": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2321": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2329": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(split T66 X68 X67 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "3670": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T341 T342) T344 T348 T349)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T344",
                        "T343"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262",
                        "T343"
                    ]
                }
            },
            "4000": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T445 T447) (merge (. T445 T446) T448 T452 T453))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T445",
                        "T446",
                        "T447",
                        "T448"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366"
                    ]
                }
            },
            "3671": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T341",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T341",
                        "T342",
                        "T344",
                        "T343"
                    ],
                    "free": [],
                    "exprvars": [
                        "T341",
                        "T172",
                        "T260",
                        "T174",
                        "T262",
                        "T343"
                    ]
                }
            },
            "4001": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "4002": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2463": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3431": {
                "goal": [{
                    "clause": 6,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2462": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T172 T174) (merge T173 (. T174 T175) T179 T180))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T172",
                        "T173",
                        "T174",
                        "T175"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3430": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2461": {
                "goal": [{
                    "clause": 8,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2460": {
                "goal": [{
                    "clause": 7,
                    "scope": 4,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4081": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T445 T446) T448 T452 T453)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T447",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T446",
                        "T445",
                        "T448",
                        "T447"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366",
                        "T447"
                    ]
                }
            },
            "4082": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T447",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T445",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T446",
                        "T445",
                        "T448",
                        "T447"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T445",
                        "T366",
                        "T447"
                    ]
                }
            },
            "3428": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260",
                        "T262"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2855": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">"
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T172",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3427": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260",
                        "T262"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2854": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T172",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3949": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 6,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3429": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2870": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2351": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3440": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2350": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3042": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T231",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T232",
                        "T231",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T231",
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3041": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T232 (. T233 T234) T238 T239)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T231",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T232",
                        "T231",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T231",
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3161": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3160": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3439": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3957": {
                "goal": [{
                    "clause": 8,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "2349": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3438": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T312 T314) (merge T313 (. T314 T315) T319 T320))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T312",
                        "T313",
                        "T314",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3958": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T416 T418) (merge T417 (. T418 T419) T423 T424))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T416",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T416",
                        "T417",
                        "T418",
                        "T419"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366",
                        "T416"
                    ]
                }
            },
            "3437": {
                "goal": [{
                    "clause": 8,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3959": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "2864": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3436": {
                "goal": [{
                    "clause": 7,
                    "scope": 6,
                    "term": "(merge (. T260 T261) T263 T267 T268)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2863": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3435": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T281",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T281",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2862": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3159": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T260 T262) (merge (. T260 T261) T263 T267 T268))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T260",
                        "T261",
                        "T262",
                        "T263"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3434": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3433": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T281",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T281",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2464": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3432": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T260 T261) T263 T267 T268)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T263",
                        "T261",
                        "T260"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "3950": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3951": {
                "goal": [{
                    "clause": 6,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3952": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    },
                    {
                        "clause": 8,
                        "scope": 7,
                        "term": "(merge (. T364 T365) T367 T371 T372)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "3953": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T385",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T385",
                        "T364",
                        "T366"
                    ]
                }
            },
            "3954": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "2869": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T199",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T199",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3955": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T366",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T385",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T364",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T385",
                        "T364",
                        "T366"
                    ]
                }
            },
            "3956": {
                "goal": [{
                    "clause": 7,
                    "scope": 7,
                    "term": "(merge (. T364 T365) T367 T371 T372)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T366",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T364",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T364",
                        "T367",
                        "T365"
                    ],
                    "free": [],
                    "exprvars": [
                        "T364",
                        "T366"
                    ]
                }
            },
            "2880": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2878": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(merge T173 (. T174 T175) T179 T180)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2872": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T173 (. T174 T175) T179 T180)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T175",
                        "T173",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "2871": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T199",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T199",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3960": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2373": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T39 X35 T95) (merge T94 X35 T96 (. T97 T95)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T39",
                        "T94"
                    ],
                    "free": ["X35"],
                    "exprvars": []
                }
            },
            "2372": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T38 X34 T40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": ["X34"],
                    "exprvars": []
                }
            },
            "2371": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3581": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T314",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T314",
                        "T312",
                        "T313",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T314",
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2370": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T86 X99 X98 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T86"],
                    "free": [
                        "X98",
                        "X99"
                    ],
                    "exprvars": []
                }
            },
            "3580": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T313 (. T314 T315) T319 T320)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T260",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T262",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T312",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T314",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T314",
                        "T312",
                        "T313",
                        "T315"
                    ],
                    "free": [],
                    "exprvars": [
                        "T314",
                        "T312",
                        "T172",
                        "T260",
                        "T174",
                        "T262"
                    ]
                }
            },
            "2889": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3737": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T364 T366) (merge (. T364 T365) T367 T371 T372))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T364",
                        "T365",
                        "T366",
                        "T367"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "2888": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T172",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T174",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T172",
                        "T174"
                    ]
                }
            },
            "3738": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2128": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "2887": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T231 T233) (merge T232 (. T233 T234) T238 T239))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T172",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T233",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T174",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T231",
                        "T232",
                        "T233",
                        "T234"
                    ],
                    "free": [],
                    "exprvars": [
                        "T233",
                        "T172",
                        "T174"
                    ]
                }
            },
            "3739": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "179": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T38 X34 T40) (',' (mergesort T39 X35 T40) (merge X34 X35 T41 (. T42 T40))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [
                        "X34",
                        "X35"
                    ],
                    "exprvars": []
                }
            },
            "2127": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(split T27 X32 X33 (. T31 T32))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "2126": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(split T27 X32 X33 (. T31 T32))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(split T27 X32 X33 (. T31 T32))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33"
                    ],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split T27 X32 X33 (. T31 T32)) (',' (mergesort X32 X34 T32) (',' (mergesort X33 X35 T32) (merge X34 X35 T33 (. T31 T32)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T27"],
                    "free": [
                        "X32",
                        "X33",
                        "X34",
                        "X35"
                    ],
                    "exprvars": []
                }
            },
            "2380": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T94 T102 T103 (. T104 T105))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T102"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2379": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T39 X35 T95)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T39"],
                    "free": ["X35"],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 9,
                "label": "EVAL with clause\nmergesort([], [], X5).\nand substitutionT1 -> [],\nT2 -> [],\nT3 -> T8,\nX5 -> T8"
            },
            {
                "from": 7,
                "to": 10,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 9,
                "to": 11,
                "label": "SUCCESS"
            },
            {
                "from": 12,
                "to": 23,
                "label": "EVAL with clause\nmergesort(.(X14, []), .(X14, []), X15).\nand substitutionX14 -> T17,\nT1 -> .(T17, []),\nT2 -> .(T17, []),\nT3 -> T18,\nX15 -> T18"
            },
            {
                "from": 12,
                "to": 24,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 70,
                "label": "EVAL with clause\nmergesort(X28, X29, .(X30, X31)) :- ','(split(X28, X32, X33, .(X30, X31)), ','(mergesort(X32, X34, X31), ','(mergesort(X33, X35, X31), merge(X34, X35, X29, .(X30, X31))))).\nand substitutionT1 -> T27,\nX28 -> T27,\nT2 -> T33,\nX29 -> T33,\nX30 -> T31,\nX31 -> T32,\nT3 -> .(T31, T32),\nT29 -> T31,\nT30 -> T32,\nT28 -> T33"
            },
            {
                "from": 13,
                "to": 82,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 23,
                "to": 27,
                "label": "SUCCESS"
            },
            {
                "from": 70,
                "to": 177,
                "label": "SPLIT 1"
            },
            {
                "from": 70,
                "to": 179,
                "label": "SPLIT 2\nnew knowledge:\nT27 is ground\nT38 is ground\nT39 is ground\nreplacements:X32 -> T38,\nX33 -> T39,\nT32 -> T40,\nT33 -> T41,\nT31 -> T42"
            },
            {
                "from": 177,
                "to": 2126,
                "label": "CASE"
            },
            {
                "from": 179,
                "to": 2372,
                "label": "SPLIT 1"
            },
            {
                "from": 179,
                "to": 2373,
                "label": "SPLIT 2\nnew knowledge:\nT38 is ground\nT94 is ground\nreplacements:X34 -> T94,\nT40 -> T95,\nT41 -> T96,\nT42 -> T97"
            },
            {
                "from": 2126,
                "to": 2127,
                "label": "PARALLEL"
            },
            {
                "from": 2126,
                "to": 2128,
                "label": "PARALLEL"
            },
            {
                "from": 2127,
                "to": 2321,
                "label": "EVAL with clause\nsplit([], [], [], X44).\nand substitutionT27 -> [],\nX32 -> [],\nX33 -> [],\nT31 -> T55,\nT32 -> T56,\nX44 -> .(T55, T56)"
            },
            {
                "from": 2127,
                "to": 2322,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2128,
                "to": 2324,
                "label": "EVAL with clause\nsplit(.(X61, X62), .(X61, X63), X64, .(X65, X66)) :- split(X62, X64, X63, X66).\nand substitutionX61 -> T65,\nX62 -> T66,\nT27 -> .(T65, T66),\nX63 -> X67,\nX32 -> .(T65, X67),\nX33 -> X68,\nX64 -> X68,\nT31 -> T67,\nX65 -> T67,\nT32 -> T69,\nX66 -> T69,\nT68 -> T69"
            },
            {
                "from": 2128,
                "to": 2326,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2321,
                "to": 2323,
                "label": "SUCCESS"
            },
            {
                "from": 2324,
                "to": 2328,
                "label": "CASE"
            },
            {
                "from": 2328,
                "to": 2329,
                "label": "PARALLEL"
            },
            {
                "from": 2328,
                "to": 2330,
                "label": "PARALLEL"
            },
            {
                "from": 2329,
                "to": 2349,
                "label": "EVAL with clause\nsplit([], [], [], X75).\nand substitutionT66 -> [],\nX68 -> [],\nX67 -> [],\nT69 -> T76,\nX75 -> T76"
            },
            {
                "from": 2329,
                "to": 2350,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2330,
                "to": 2370,
                "label": "EVAL with clause\nsplit(.(X92, X93), .(X92, X94), X95, .(X96, X97)) :- split(X93, X95, X94, X97).\nand substitutionX92 -> T85,\nX93 -> T86,\nT66 -> .(T85, T86),\nX94 -> X98,\nX68 -> .(T85, X98),\nX67 -> X99,\nX95 -> X99,\nX96 -> T87,\nX97 -> T89,\nT69 -> .(T87, T89),\nT88 -> T89"
            },
            {
                "from": 2330,
                "to": 2371,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2349,
                "to": 2351,
                "label": "SUCCESS"
            },
            {
                "from": 2370,
                "to": 2324,
                "label": "INSTANCE with matching:\nT66 -> T86\nX68 -> X99\nX67 -> X98\nT69 -> T89"
            },
            {
                "from": 2372,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T38\nT2 -> X34\nT3 -> T40"
            },
            {
                "from": 2373,
                "to": 2379,
                "label": "SPLIT 1"
            },
            {
                "from": 2373,
                "to": 2380,
                "label": "SPLIT 2\nnew knowledge:\nT39 is ground\nT102 is ground\nreplacements:X35 -> T102,\nT96 -> T103,\nT97 -> T104,\nT95 -> T105"
            },
            {
                "from": 2379,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T39\nT2 -> X35\nT3 -> T95"
            },
            {
                "from": 2380,
                "to": 2396,
                "label": "CASE"
            },
            {
                "from": 2396,
                "to": 2432,
                "label": "PARALLEL"
            },
            {
                "from": 2396,
                "to": 2433,
                "label": "PARALLEL"
            },
            {
                "from": 2432,
                "to": 2434,
                "label": "EVAL with clause\nmerge([], X122, X122, X123).\nand substitutionT94 -> [],\nT102 -> T126,\nX122 -> T126,\nT103 -> T126,\nT104 -> T127,\nT105 -> T128,\nX123 -> .(T127, T128)"
            },
            {
                "from": 2432,
                "to": 2435,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2433,
                "to": 2437,
                "label": "PARALLEL"
            },
            {
                "from": 2433,
                "to": 2438,
                "label": "PARALLEL"
            },
            {
                "from": 2434,
                "to": 2436,
                "label": "SUCCESS"
            },
            {
                "from": 2437,
                "to": 2439,
                "label": "EVAL with clause\nmerge(X132, [], X132, X133).\nand substitutionT94 -> T141,\nX132 -> T141,\nT102 -> [],\nT103 -> T141,\nT104 -> T142,\nT105 -> T143,\nX133 -> .(T142, T143)"
            },
            {
                "from": 2437,
                "to": 2440,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2438,
                "to": 2460,
                "label": "PARALLEL"
            },
            {
                "from": 2438,
                "to": 2461,
                "label": "PARALLEL"
            },
            {
                "from": 2439,
                "to": 2441,
                "label": "SUCCESS"
            },
            {
                "from": 2460,
                "to": 2462,
                "label": "EVAL with clause\nmerge(.(X162, X163), .(X164, X165), .(X162, X166), .(X167, X168)) :- ','(=<(X162, X164), merge(X163, .(X164, X165), X166, X168)).\nand substitutionX162 -> T172,\nX163 -> T173,\nT94 -> .(T172, T173),\nX164 -> T174,\nX165 -> T175,\nT102 -> .(T174, T175),\nX166 -> T179,\nT103 -> .(T172, T179),\nT104 -> T177,\nX167 -> T177,\nT105 -> T180,\nX168 -> T180,\nT176 -> T179,\nT178 -> T180"
            },
            {
                "from": 2460,
                "to": 2463,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2461,
                "to": 3737,
                "label": "EVAL with clause\nmerge(.(X339, X340), .(X341, X342), .(X341, X343), .(X344, X345)) :- ','(>(X339, X341), merge(.(X339, X340), X342, X343, X345)).\nand substitutionX339 -> T364,\nX340 -> T365,\nT94 -> .(T364, T365),\nX341 -> T366,\nX342 -> T367,\nT102 -> .(T366, T367),\nX343 -> T371,\nT103 -> .(T366, T371),\nT104 -> T369,\nX344 -> T369,\nT105 -> T372,\nX345 -> T372,\nT368 -> T371,\nT370 -> T372"
            },
            {
                "from": 2461,
                "to": 3738,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2462,
                "to": 2464,
                "label": "IS ERROR"
            },
            {
                "from": 2462,
                "to": 2854,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2462,
                "to": 2855,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 2854,
                "to": 2862,
                "label": "CASE"
            },
            {
                "from": 2862,
                "to": 2863,
                "label": "PARALLEL"
            },
            {
                "from": 2862,
                "to": 2864,
                "label": "PARALLEL"
            },
            {
                "from": 2863,
                "to": 2869,
                "label": "EVAL with clause\nmerge([], X181, X181, X182).\nand substitutionT173 -> [],\nT174 -> T199,\nT175 -> T200,\nX181 -> .(T199, T200),\nT179 -> .(T199, T200),\nT180 -> T201,\nX182 -> T201"
            },
            {
                "from": 2863,
                "to": 2870,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2864,
                "to": 2872,
                "label": "BACKTRACK\nfor clause: merge(Xs, [], Xs, Ls)because of non-unification"
            },
            {
                "from": 2869,
                "to": 2871,
                "label": "SUCCESS"
            },
            {
                "from": 2872,
                "to": 2878,
                "label": "PARALLEL"
            },
            {
                "from": 2872,
                "to": 2880,
                "label": "PARALLEL"
            },
            {
                "from": 2878,
                "to": 2887,
                "label": "EVAL with clause\nmerge(.(X213, X214), .(X215, X216), .(X213, X217), .(X218, X219)) :- ','(=<(X213, X215), merge(X214, .(X215, X216), X217, X219)).\nand substitutionX213 -> T231,\nX214 -> T232,\nT173 -> .(T231, T232),\nT174 -> T233,\nX215 -> T233,\nT175 -> T234,\nX216 -> T234,\nX217 -> T238,\nT179 -> .(T231, T238),\nX218 -> T236,\nX219 -> T239,\nT180 -> .(T236, T239),\nT235 -> T238,\nT237 -> T239"
            },
            {
                "from": 2878,
                "to": 2888,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2880,
                "to": 3159,
                "label": "EVAL with clause\nmerge(.(X238, X239), .(X240, X241), .(X240, X242), .(X243, X244)) :- ','(>(X238, X240), merge(.(X238, X239), X241, X242, X244)).\nand substitutionX238 -> T260,\nX239 -> T261,\nT173 -> .(T260, T261),\nT174 -> T262,\nX240 -> T262,\nT175 -> T263,\nX241 -> T263,\nX242 -> T267,\nT179 -> .(T262, T267),\nX243 -> T265,\nX244 -> T268,\nT180 -> .(T265, T268),\nT264 -> T267,\nT266 -> T268"
            },
            {
                "from": 2880,
                "to": 3160,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2887,
                "to": 2889,
                "label": "IS ERROR"
            },
            {
                "from": 2887,
                "to": 3041,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2887,
                "to": 3042,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3041,
                "to": 2854,
                "label": "INSTANCE with matching:\nT173 -> T232\nT174 -> T233\nT175 -> T234\nT179 -> T238\nT180 -> T239"
            },
            {
                "from": 3159,
                "to": 3161,
                "label": "IS ERROR"
            },
            {
                "from": 3159,
                "to": 3427,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3159,
                "to": 3428,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3427,
                "to": 3429,
                "label": "CASE"
            },
            {
                "from": 3429,
                "to": 3430,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3430,
                "to": 3431,
                "label": "PARALLEL"
            },
            {
                "from": 3430,
                "to": 3432,
                "label": "PARALLEL"
            },
            {
                "from": 3431,
                "to": 3433,
                "label": "EVAL with clause\nmerge(X259, [], X259, X260).\nand substitutionT260 -> T281,\nT261 -> T282,\nX259 -> .(T281, T282),\nT263 -> [],\nT267 -> .(T281, T282),\nT268 -> T283,\nX260 -> T283"
            },
            {
                "from": 3431,
                "to": 3434,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3432,
                "to": 3436,
                "label": "PARALLEL"
            },
            {
                "from": 3432,
                "to": 3437,
                "label": "PARALLEL"
            },
            {
                "from": 3433,
                "to": 3435,
                "label": "SUCCESS"
            },
            {
                "from": 3436,
                "to": 3438,
                "label": "EVAL with clause\nmerge(.(X289, X290), .(X291, X292), .(X289, X293), .(X294, X295)) :- ','(=<(X289, X291), merge(X290, .(X291, X292), X293, X295)).\nand substitutionT260 -> T312,\nX289 -> T312,\nT261 -> T313,\nX290 -> T313,\nX291 -> T314,\nX292 -> T315,\nT263 -> .(T314, T315),\nX293 -> T319,\nT267 -> .(T312, T319),\nX294 -> T317,\nX295 -> T320,\nT268 -> .(T317, T320),\nT316 -> T319,\nT318 -> T320"
            },
            {
                "from": 3436,
                "to": 3439,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3437,
                "to": 3597,
                "label": "EVAL with clause\nmerge(.(X314, X315), .(X316, X317), .(X316, X318), .(X319, X320)) :- ','(>(X314, X316), merge(.(X314, X315), X317, X318, X320)).\nand substitutionT260 -> T341,\nX314 -> T341,\nT261 -> T342,\nX315 -> T342,\nX316 -> T343,\nX317 -> T344,\nT263 -> .(T343, T344),\nX318 -> T348,\nT267 -> .(T343, T348),\nX319 -> T346,\nX320 -> T349,\nT268 -> .(T346, T349),\nT345 -> T348,\nT347 -> T349"
            },
            {
                "from": 3437,
                "to": 3598,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3438,
                "to": 3440,
                "label": "IS ERROR"
            },
            {
                "from": 3438,
                "to": 3580,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3438,
                "to": 3581,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3580,
                "to": 2854,
                "label": "INSTANCE with matching:\nT173 -> T313\nT174 -> T314\nT175 -> T315\nT179 -> T319\nT180 -> T320"
            },
            {
                "from": 3597,
                "to": 3599,
                "label": "IS ERROR"
            },
            {
                "from": 3597,
                "to": 3670,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3597,
                "to": 3671,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3670,
                "to": 3427,
                "label": "INSTANCE with matching:\nT260 -> T341\nT261 -> T342\nT263 -> T344\nT267 -> T348\nT268 -> T349"
            },
            {
                "from": 3737,
                "to": 3739,
                "label": "IS ERROR"
            },
            {
                "from": 3737,
                "to": 3911,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3737,
                "to": 3912,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3911,
                "to": 3949,
                "label": "CASE"
            },
            {
                "from": 3949,
                "to": 3950,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3950,
                "to": 3951,
                "label": "PARALLEL"
            },
            {
                "from": 3950,
                "to": 3952,
                "label": "PARALLEL"
            },
            {
                "from": 3951,
                "to": 3953,
                "label": "EVAL with clause\nmerge(X360, [], X360, X361).\nand substitutionT364 -> T385,\nT365 -> T386,\nX360 -> .(T385, T386),\nT367 -> [],\nT371 -> .(T385, T386),\nT372 -> T387,\nX361 -> T387"
            },
            {
                "from": 3951,
                "to": 3954,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3952,
                "to": 3956,
                "label": "PARALLEL"
            },
            {
                "from": 3952,
                "to": 3957,
                "label": "PARALLEL"
            },
            {
                "from": 3953,
                "to": 3955,
                "label": "SUCCESS"
            },
            {
                "from": 3956,
                "to": 3958,
                "label": "EVAL with clause\nmerge(.(X390, X391), .(X392, X393), .(X390, X394), .(X395, X396)) :- ','(=<(X390, X392), merge(X391, .(X392, X393), X394, X396)).\nand substitutionT364 -> T416,\nX390 -> T416,\nT365 -> T417,\nX391 -> T417,\nX392 -> T418,\nX393 -> T419,\nT367 -> .(T418, T419),\nX394 -> T423,\nT371 -> .(T416, T423),\nX395 -> T421,\nX396 -> T424,\nT372 -> .(T421, T424),\nT420 -> T423,\nT422 -> T424"
            },
            {
                "from": 3956,
                "to": 3959,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3957,
                "to": 4000,
                "label": "EVAL with clause\nmerge(.(X415, X416), .(X417, X418), .(X417, X419), .(X420, X421)) :- ','(>(X415, X417), merge(.(X415, X416), X418, X419, X421)).\nand substitutionT364 -> T445,\nX415 -> T445,\nT365 -> T446,\nX416 -> T446,\nX417 -> T447,\nX418 -> T448,\nT367 -> .(T447, T448),\nX419 -> T452,\nT371 -> .(T447, T452),\nX420 -> T450,\nX421 -> T453,\nT372 -> .(T450, T453),\nT449 -> T452,\nT451 -> T453"
            },
            {
                "from": 3957,
                "to": 4001,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3958,
                "to": 3960,
                "label": "IS ERROR"
            },
            {
                "from": 3958,
                "to": 3996,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3958,
                "to": 3997,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3996,
                "to": 2854,
                "label": "INSTANCE with matching:\nT173 -> T417\nT174 -> T418\nT175 -> T419\nT179 -> T423\nT180 -> T424"
            },
            {
                "from": 4000,
                "to": 4002,
                "label": "IS ERROR"
            },
            {
                "from": 4000,
                "to": 4081,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4000,
                "to": 4082,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4081,
                "to": 3911,
                "label": "INSTANCE with matching:\nT364 -> T445\nT365 -> T446\nT367 -> T448\nT371 -> T452\nT372 -> T453"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(402)
Complex Obligation (AND)

----------------------------------------

(403)
Obligation:
Rules:
f3438_in(T312, T314, T313, T315) -> f3580_in(T313, T314, T315, T312) :|: T312 <= T314
f3581_out(x, x1, x2, x3) -> f3438_out(x1, x, x2, x3) :|: x1 > x
f3580_out(x4, x5, x6, x7) -> f3438_out(x7, x5, x4, x6) :|: x7 <= x5
f3438_in(x8, x9, x10, x11) -> f3581_in(x9, x8, x10, x11) :|: x8 > x9
f3440_out -> f3438_out(x12, x13, x14, x15) :|: TRUE
f3438_in(x16, x17, x18, x19) -> f3440_in :|: TRUE
f3430_out(T260, T261, T263) -> f3429_out(T260, T261, T263) :|: TRUE
f3429_in(x20, x21, x22) -> f3430_in(x20, x21, x22) :|: TRUE
f3580_in(x23, x24, x25, x26) -> f2854_in(x23, x24, x25, x27) :|: TRUE
f2854_out(x28, x29, x30, x31) -> f3580_out(x28, x29, x30, x32) :|: TRUE
f2863_out(T173, T174, T175) -> f2862_out(T173, T174, T175) :|: TRUE
f2862_in(x33, x34, x35) -> f2863_in(x33, x34, x35) :|: TRUE
f2862_in(x36, x37, x38) -> f2864_in(x36, x37, x38) :|: TRUE
f2864_out(x39, x40, x41) -> f2862_out(x39, x40, x41) :|: TRUE
f3430_in(x42, x43, x44) -> f3431_in(x42, x43, x44) :|: TRUE
f3430_in(x45, x46, x47) -> f3432_in(x45, x46, x47) :|: TRUE
f3432_out(x48, x49, x50) -> f3430_out(x48, x49, x50) :|: TRUE
f3431_out(x51, x52, x53) -> f3430_out(x51, x52, x53) :|: TRUE
f2864_in(x54, x55, x56) -> f2872_in(x54, x55, x56) :|: TRUE
f2872_out(x57, x58, x59) -> f2864_out(x57, x58, x59) :|: TRUE
f2872_in(x60, x61, x62) -> f2880_in(x60, x61, x62) :|: TRUE
f2872_in(x63, x64, x65) -> f2878_in(x63, x64, x65) :|: TRUE
f2878_out(x66, x67, x68) -> f2872_out(x66, x67, x68) :|: TRUE
f2880_out(x69, x70, x71) -> f2872_out(x69, x70, x71) :|: TRUE
f2887_in(T231, T233, T232, T234) -> f3042_in(T232, T231, T233, T234) :|: T231 > T233
f2887_in(x72, x73, x74, x75) -> f2889_in :|: TRUE
f3041_out(x76, x77, x78, x79) -> f2887_out(x79, x77, x76, x78) :|: x79 <= x77
f2889_out -> f2887_out(x80, x81, x82, x83) :|: TRUE
f3042_out(x84, x85, x86, x87) -> f2887_out(x85, x86, x84, x87) :|: x85 > x86
f2887_in(x88, x89, x90, x91) -> f3041_in(x90, x89, x91, x88) :|: x88 <= x89
f3429_out(x92, x93, x94) -> f3427_out(x92, x93, x94, x95) :|: TRUE
f3427_in(x96, x97, x98, x99) -> f3429_in(x96, x97, x98) :|: TRUE
f3159_out(x100, x101, x102, x103) -> f2880_out(.(x100, x102), x101, x103) :|: TRUE
f2880_in(x104, x105, x106) -> f3160_in :|: TRUE
f2880_in(.(x107, x108), x109, x110) -> f3159_in(x107, x109, x108, x110) :|: TRUE
f3160_out -> f2880_out(x111, x112, x113) :|: TRUE
f2854_in(x114, x115, x116, x117) -> f2862_in(x114, x115, x116) :|: TRUE
f2862_out(x118, x119, x120) -> f2854_out(x118, x119, x120, x121) :|: TRUE
f3159_in(x122, x123, x124, x125) -> f3428_in(x125, x124, x122, x123) :|: x122 <= x123
f3159_in(x126, x127, x128, x129) -> f3161_in :|: TRUE
f3161_out -> f3159_out(x130, x131, x132, x133) :|: TRUE
f3428_out(x134, x135, x136, x137) -> f3159_out(x136, x137, x135, x134) :|: x136 <= x137
f3159_in(x138, x139, x140, x141) -> f3427_in(x138, x140, x141, x139) :|: x138 > x139
f3427_out(x142, x143, x144, x145) -> f3159_out(x142, x145, x143, x144) :|: x142 > x145
f3437_in(x146, x147, x148) -> f3598_in :|: TRUE
f3437_in(T341, T342, .(T343, T344)) -> f3597_in(T341, T343, T342, T344) :|: TRUE
f3597_out(x149, x150, x151, x152) -> f3437_out(x149, x151, .(x150, x152)) :|: TRUE
f3598_out -> f3437_out(x153, x154, x155) :|: TRUE
f3436_out(x156, x157, x158) -> f3432_out(x156, x157, x158) :|: TRUE
f3432_in(x159, x160, x161) -> f3437_in(x159, x160, x161) :|: TRUE
f3432_in(x162, x163, x164) -> f3436_in(x162, x163, x164) :|: TRUE
f3437_out(x165, x166, x167) -> f3432_out(x165, x166, x167) :|: TRUE
f3670_in(x168, x169, x170, x171) -> f3427_in(x168, x169, x170, x172) :|: TRUE
f3427_out(x173, x174, x175, x176) -> f3670_out(x173, x174, x175, x177) :|: TRUE
f2887_out(x178, x179, x180, x181) -> f2878_out(.(x178, x180), x179, x181) :|: TRUE
f2878_in(x182, x183, x184) -> f2888_in :|: TRUE
f2888_out -> f2878_out(x185, x186, x187) :|: TRUE
f2878_in(.(x188, x189), x190, x191) -> f2887_in(x188, x190, x189, x191) :|: TRUE
f3041_in(x192, x193, x194, x195) -> f2854_in(x192, x193, x194, x196) :|: TRUE
f2854_out(x197, x198, x199, x200) -> f3041_out(x197, x198, x199, x201) :|: TRUE
f3436_in(x202, x203, .(x204, x205)) -> f3438_in(x202, x204, x203, x205) :|: TRUE
f3438_out(x206, x207, x208, x209) -> f3436_out(x206, x208, .(x207, x209)) :|: TRUE
f3439_out -> f3436_out(x210, x211, x212) :|: TRUE
f3436_in(x213, x214, x215) -> f3439_in :|: TRUE
f3597_in(x216, x217, x218, x219) -> f3671_in(x216, x218, x219, x217) :|: x216 <= x217
f3670_out(x220, x221, x222, x223) -> f3597_out(x220, x223, x221, x222) :|: x220 > x223
f3671_out(x224, x225, x226, x227) -> f3597_out(x224, x227, x225, x226) :|: x224 <= x227
f3597_in(x228, x229, x230, x231) -> f3670_in(x228, x230, x231, x229) :|: x228 > x229
f3597_in(x232, x233, x234, x235) -> f3599_in :|: TRUE
f3599_out -> f3597_out(x236, x237, x238, x239) :|: TRUE
f2_in(T1) -> f6_in(T1) :|: TRUE
f6_out(x240) -> f2_out(x240) :|: TRUE
f6_in(x241) -> f8_in(x241) :|: TRUE
f8_out(x242) -> f6_out(x242) :|: TRUE
f6_in(x243) -> f7_in(x243) :|: TRUE
f7_out(x244) -> f6_out(x244) :|: TRUE
f8_in(x245) -> f12_in(x245) :|: TRUE
f13_out(x246) -> f8_out(x246) :|: TRUE
f8_in(x247) -> f13_in(x247) :|: TRUE
f12_out(x248) -> f8_out(x248) :|: TRUE
f70_out(T27) -> f13_out(T27) :|: TRUE
f82_out -> f13_out(x249) :|: TRUE
f13_in(x250) -> f70_in(x250) :|: TRUE
f13_in(x251) -> f82_in :|: TRUE
f179_out(x252, x253) -> f70_out(x254) :|: TRUE
f177_out(x255) -> f179_in(x256, x257) :|: TRUE
f70_in(x258) -> f177_in(x258) :|: TRUE
f2373_out(T39, T94) -> f179_out(T38, T39) :|: TRUE
f179_in(x259, x260) -> f2372_in(x259) :|: TRUE
f2372_out(x261) -> f2373_in(x262, x263) :|: TRUE
f2379_out(x264) -> f2380_in(x265, x266) :|: TRUE
f2373_in(x267, x268) -> f2379_in(x267) :|: TRUE
f2380_out(x269, x270) -> f2373_out(x271, x269) :|: TRUE
f2380_in(x272, x273) -> f2396_in(x272, x273) :|: TRUE
f2396_out(x274, x275) -> f2380_out(x274, x275) :|: TRUE
f2433_out(x276, x277) -> f2396_out(x276, x277) :|: TRUE
f2432_out(x278, x279) -> f2396_out(x278, x279) :|: TRUE
f2396_in(x280, x281) -> f2432_in(x280, x281) :|: TRUE
f2396_in(x282, x283) -> f2433_in(x282, x283) :|: TRUE
f2437_out(x284, x285) -> f2433_out(x284, x285) :|: TRUE
f2438_out(x286, x287) -> f2433_out(x286, x287) :|: TRUE
f2433_in(x288, x289) -> f2438_in(x288, x289) :|: TRUE
f2433_in(x290, x291) -> f2437_in(x290, x291) :|: TRUE
f2438_in(x292, x293) -> f2461_in(x292, x293) :|: TRUE
f2460_out(x294, x295) -> f2438_out(x294, x295) :|: TRUE
f2438_in(x296, x297) -> f2460_in(x296, x297) :|: TRUE
f2461_out(x298, x299) -> f2438_out(x298, x299) :|: TRUE
f2460_in(x300, x301) -> f2463_in :|: TRUE
f2460_in(.(x302, x303), .(x304, x305)) -> f2462_in(x302, x304, x303, x305) :|: TRUE
f2462_out(x306, x307, x308, x309) -> f2460_out(.(x306, x308), .(x307, x309)) :|: TRUE
f2463_out -> f2460_out(x310, x311) :|: TRUE
f2854_out(x312, x313, x314, x315) -> f2462_out(x315, x313, x312, x314) :|: x315 <= x313
f2462_in(x316, x317, x318, x319) -> f2855_in(x319, x318, x316, x317) :|: x316 > x317
f2462_in(x320, x321, x322, x323) -> f2854_in(x322, x321, x323, x320) :|: x320 <= x321
f2855_out(x324, x325, x326, x327) -> f2462_out(x326, x327, x325, x324) :|: x326 > x327
f2462_in(x328, x329, x330, x331) -> f2464_in :|: TRUE
f2464_out -> f2462_out(x332, x333, x334, x335) :|: TRUE
f3738_out -> f2461_out(x336, x337) :|: TRUE
f3737_out(T364, T366, T365, T367) -> f2461_out(.(T364, T365), .(T366, T367)) :|: TRUE
f2461_in(.(x338, x339), .(x340, x341)) -> f3737_in(x338, x340, x339, x341) :|: TRUE
f2461_in(x342, x343) -> f3738_in :|: TRUE
f3737_in(x344, x345, x346, x347) -> f3911_in(x344, x346, x347, x345) :|: x344 > x345
f3737_in(x348, x349, x350, x351) -> f3739_in :|: TRUE
f3912_out(x352, x353, x354, x355) -> f3737_out(x352, x354, x355, x353) :|: x352 <= x354
f3911_out(x356, x357, x358, x359) -> f3737_out(x356, x359, x357, x358) :|: x356 > x359
f3737_in(x360, x361, x362, x363) -> f3912_in(x360, x363, x361, x362) :|: x360 <= x361
f3739_out -> f3737_out(x364, x365, x366, x367) :|: TRUE
f3949_out(x368, x369, x370) -> f3911_out(x368, x369, x370, x371) :|: TRUE
f3911_in(x372, x373, x374, x375) -> f3949_in(x372, x373, x374) :|: TRUE
f3949_in(x376, x377, x378) -> f3950_in(x376, x377, x378) :|: TRUE
f3950_out(x379, x380, x381) -> f3949_out(x379, x380, x381) :|: TRUE
f3952_out(x382, x383, x384) -> f3950_out(x382, x383, x384) :|: TRUE
f3951_out(x385, x386, x387) -> f3950_out(x385, x386, x387) :|: TRUE
f3950_in(x388, x389, x390) -> f3952_in(x388, x389, x390) :|: TRUE
f3950_in(x391, x392, x393) -> f3951_in(x391, x392, x393) :|: TRUE
f3952_in(x394, x395, x396) -> f3956_in(x394, x395, x396) :|: TRUE
f3956_out(x397, x398, x399) -> f3952_out(x397, x398, x399) :|: TRUE
f3952_in(x400, x401, x402) -> f3957_in(x400, x401, x402) :|: TRUE
f3957_out(x403, x404, x405) -> f3952_out(x403, x404, x405) :|: TRUE
f3959_out -> f3956_out(x406, x407, x408) :|: TRUE
f3956_in(T416, T417, .(T418, T419)) -> f3958_in(T416, T418, T417, T419) :|: TRUE
f3956_in(x409, x410, x411) -> f3959_in :|: TRUE
f3958_out(x412, x413, x414, x415) -> f3956_out(x412, x414, .(x413, x415)) :|: TRUE
f3960_out -> f3958_out(x416, x417, x418, x419) :|: TRUE
f3958_in(x420, x421, x422, x423) -> f3996_in(x422, x421, x423, x420) :|: x420 <= x421
f3958_in(x424, x425, x426, x427) -> f3960_in :|: TRUE
f3996_out(x428, x429, x430, x431) -> f3958_out(x431, x429, x428, x430) :|: x431 <= x429
f3958_in(x432, x433, x434, x435) -> f3997_in(x433, x434, x432, x435) :|: x432 > x433
f3997_out(x436, x437, x438, x439) -> f3958_out(x438, x436, x437, x439) :|: x438 > x436
f3996_in(x440, x441, x442, x443) -> f2854_in(x440, x441, x442, x444) :|: TRUE
f2854_out(x445, x446, x447, x448) -> f3996_out(x445, x446, x447, x449) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(404) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(405)
TRUE

----------------------------------------

(406)
Obligation:
Rules:
f3952_out(T364, T365, T367) -> f3950_out(T364, T365, T367) :|: TRUE
f3951_out(x, x1, x2) -> f3950_out(x, x1, x2) :|: TRUE
f3950_in(x3, x4, x5) -> f3952_in(x3, x4, x5) :|: TRUE
f3950_in(x6, x7, x8) -> f3951_in(x6, x7, x8) :|: TRUE
f3952_in(x9, x10, x11) -> f3956_in(x9, x10, x11) :|: TRUE
f3956_out(x12, x13, x14) -> f3952_out(x12, x13, x14) :|: TRUE
f3952_in(x15, x16, x17) -> f3957_in(x15, x16, x17) :|: TRUE
f3957_out(x18, x19, x20) -> f3952_out(x18, x19, x20) :|: TRUE
f4002_out -> f4000_out(T445, T447, T446, T448) :|: TRUE
f4000_in(x21, x22, x23, x24) -> f4082_in(x23, x21, x24, x22) :|: x21 <= x22
f4082_out(x25, x26, x27, x28) -> f4000_out(x26, x28, x25, x27) :|: x26 <= x28
f4000_in(x29, x30, x31, x32) -> f4002_in :|: TRUE
f4000_in(x33, x34, x35, x36) -> f4081_in(x33, x35, x36, x34) :|: x33 > x34
f4081_out(x37, x38, x39, x40) -> f4000_out(x37, x40, x38, x39) :|: x37 > x40
f3949_out(x41, x42, x43) -> f3911_out(x41, x42, x43, x44) :|: TRUE
f3911_in(x45, x46, x47, x48) -> f3949_in(x45, x46, x47) :|: TRUE
f4000_out(x49, x50, x51, x52) -> f3957_out(x49, x51, .(x50, x52)) :|: TRUE
f4001_out -> f3957_out(x53, x54, x55) :|: TRUE
f3957_in(x56, x57, .(x58, x59)) -> f4000_in(x56, x58, x57, x59) :|: TRUE
f3957_in(x60, x61, x62) -> f4001_in :|: TRUE
f3911_out(x63, x64, x65, x66) -> f4081_out(x63, x64, x65, x67) :|: TRUE
f4081_in(x68, x69, x70, x71) -> f3911_in(x68, x69, x70, x72) :|: TRUE
f3949_in(x73, x74, x75) -> f3950_in(x73, x74, x75) :|: TRUE
f3950_out(x76, x77, x78) -> f3949_out(x76, x77, x78) :|: TRUE
f2_in(T1) -> f6_in(T1) :|: TRUE
f6_out(x79) -> f2_out(x79) :|: TRUE
f6_in(x80) -> f8_in(x80) :|: TRUE
f8_out(x81) -> f6_out(x81) :|: TRUE
f6_in(x82) -> f7_in(x82) :|: TRUE
f7_out(x83) -> f6_out(x83) :|: TRUE
f8_in(x84) -> f12_in(x84) :|: TRUE
f13_out(x85) -> f8_out(x85) :|: TRUE
f8_in(x86) -> f13_in(x86) :|: TRUE
f12_out(x87) -> f8_out(x87) :|: TRUE
f70_out(T27) -> f13_out(T27) :|: TRUE
f82_out -> f13_out(x88) :|: TRUE
f13_in(x89) -> f70_in(x89) :|: TRUE
f13_in(x90) -> f82_in :|: TRUE
f179_out(x91, x92) -> f70_out(x93) :|: TRUE
f177_out(x94) -> f179_in(x95, x96) :|: TRUE
f70_in(x97) -> f177_in(x97) :|: TRUE
f2373_out(T39, T94) -> f179_out(T38, T39) :|: TRUE
f179_in(x98, x99) -> f2372_in(x98) :|: TRUE
f2372_out(x100) -> f2373_in(x101, x102) :|: TRUE
f2379_out(x103) -> f2380_in(x104, x105) :|: TRUE
f2373_in(x106, x107) -> f2379_in(x106) :|: TRUE
f2380_out(x108, x109) -> f2373_out(x110, x108) :|: TRUE
f2380_in(x111, x112) -> f2396_in(x111, x112) :|: TRUE
f2396_out(x113, x114) -> f2380_out(x113, x114) :|: TRUE
f2433_out(x115, x116) -> f2396_out(x115, x116) :|: TRUE
f2432_out(x117, x118) -> f2396_out(x117, x118) :|: TRUE
f2396_in(x119, x120) -> f2432_in(x119, x120) :|: TRUE
f2396_in(x121, x122) -> f2433_in(x121, x122) :|: TRUE
f2437_out(x123, x124) -> f2433_out(x123, x124) :|: TRUE
f2438_out(x125, x126) -> f2433_out(x125, x126) :|: TRUE
f2433_in(x127, x128) -> f2438_in(x127, x128) :|: TRUE
f2433_in(x129, x130) -> f2437_in(x129, x130) :|: TRUE
f2438_in(x131, x132) -> f2461_in(x131, x132) :|: TRUE
f2460_out(x133, x134) -> f2438_out(x133, x134) :|: TRUE
f2438_in(x135, x136) -> f2460_in(x135, x136) :|: TRUE
f2461_out(x137, x138) -> f2438_out(x137, x138) :|: TRUE
f3738_out -> f2461_out(x139, x140) :|: TRUE
f3737_out(x141, x142, x143, x144) -> f2461_out(.(x141, x143), .(x142, x144)) :|: TRUE
f2461_in(.(x145, x146), .(x147, x148)) -> f3737_in(x145, x147, x146, x148) :|: TRUE
f2461_in(x149, x150) -> f3738_in :|: TRUE
f3737_in(x151, x152, x153, x154) -> f3911_in(x151, x153, x154, x152) :|: x151 > x152
f3737_in(x155, x156, x157, x158) -> f3739_in :|: TRUE
f3912_out(x159, x160, x161, x162) -> f3737_out(x159, x161, x162, x160) :|: x159 <= x161
f3911_out(x163, x164, x165, x166) -> f3737_out(x163, x166, x164, x165) :|: x163 > x166
f3737_in(x167, x168, x169, x170) -> f3912_in(x167, x170, x168, x169) :|: x167 <= x168
f3739_out -> f3737_out(x171, x172, x173, x174) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(407) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(408)
TRUE

----------------------------------------

(409)
Obligation:
Rules:
f2324_in(T66) -> f2328_in(T66) :|: TRUE
f2328_out(x) -> f2324_out(x) :|: TRUE
f2328_in(x1) -> f2329_in(x1) :|: TRUE
f2329_out(x2) -> f2328_out(x2) :|: TRUE
f2330_out(x3) -> f2328_out(x3) :|: TRUE
f2328_in(x4) -> f2330_in(x4) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2324_out(x5) -> f2370_out(x5) :|: TRUE
f2371_out -> f2330_out(x6) :|: TRUE
f2330_in(x7) -> f2371_in :|: TRUE
f2330_in(.(x8, x9)) -> f2370_in(x9) :|: TRUE
f2370_out(x10) -> f2330_out(.(x11, x10)) :|: TRUE
f2_in(T1) -> f6_in(T1) :|: TRUE
f6_out(x12) -> f2_out(x12) :|: TRUE
f6_in(x13) -> f8_in(x13) :|: TRUE
f8_out(x14) -> f6_out(x14) :|: TRUE
f6_in(x15) -> f7_in(x15) :|: TRUE
f7_out(x16) -> f6_out(x16) :|: TRUE
f8_in(x17) -> f12_in(x17) :|: TRUE
f13_out(x18) -> f8_out(x18) :|: TRUE
f8_in(x19) -> f13_in(x19) :|: TRUE
f12_out(x20) -> f8_out(x20) :|: TRUE
f70_out(T27) -> f13_out(T27) :|: TRUE
f82_out -> f13_out(x21) :|: TRUE
f13_in(x22) -> f70_in(x22) :|: TRUE
f13_in(x23) -> f82_in :|: TRUE
f179_out(x24, x25) -> f70_out(x26) :|: TRUE
f177_out(x27) -> f179_in(x28, x29) :|: TRUE
f70_in(x30) -> f177_in(x30) :|: TRUE
f2126_out(x31) -> f177_out(x31) :|: TRUE
f177_in(x32) -> f2126_in(x32) :|: TRUE
f2126_in(x33) -> f2128_in(x33) :|: TRUE
f2128_out(x34) -> f2126_out(x34) :|: TRUE
f2127_out(x35) -> f2126_out(x35) :|: TRUE
f2126_in(x36) -> f2127_in(x36) :|: TRUE
f2324_out(x37) -> f2128_out(.(x38, x37)) :|: TRUE
f2128_in(.(x39, x40)) -> f2324_in(x40) :|: TRUE
f2128_in(x41) -> f2326_in :|: TRUE
f2326_out -> f2128_out(x42) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(410) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f2324_in(T66) -> f2328_in(T66) :|: TRUE
f2328_in(x4) -> f2330_in(x4) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2330_in(.(x8, x9)) -> f2370_in(x9) :|: TRUE


----------------------------------------

(411)
Obligation:
Rules:
f2324_in(T66) -> f2328_in(T66) :|: TRUE
f2328_in(x4) -> f2330_in(x4) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2330_in(.(x8, x9)) -> f2370_in(x9) :|: TRUE

----------------------------------------

(412) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(413)
Obligation:
Rules:
f2370_in(.(x8:0, x9:0)) -> f2370_in(x9:0) :|: TRUE

----------------------------------------

(414) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(415)
Obligation:
Rules:
f2370_in(.(x8:0, x9:0)) -> f2370_in(x9:0) :|: TRUE

----------------------------------------

(416) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2370_in(.(x8:0, x9:0)) -> f2370_in(x9:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(417)
Obligation:

Termination digraph:
Nodes:
(1) f2370_in(.(x8:0, x9:0)) -> f2370_in(x9:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(418) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(419)
Obligation:
Rules:
f2370_in(.(x9:0)) -> f2370_in(x9:0) :|: TRUE

----------------------------------------

(420) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2370_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(421)
Obligation:
Rules:
f2370_in(.(x9:0)) -> f2370_in(x9:0)

----------------------------------------

(422) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(423)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f2370_in(.(x9:0)) -> f2370_in(x9:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(424) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f2370_in(.(x9:0)) -> f2370_in(x9:0)
The graph contains the following edges 1 > 1


----------------------------------------

(425)
YES

----------------------------------------

(426)
Obligation:
Rules:
f2433_out(T94, T102) -> f2396_out(T94, T102) :|: TRUE
f2432_out(x, x1) -> f2396_out(x, x1) :|: TRUE
f2396_in(x2, x3) -> f2432_in(x2, x3) :|: TRUE
f2396_in(x4, x5) -> f2433_in(x4, x5) :|: TRUE
f3580_in(T313, T314, T315, T312) -> f2854_in(T313, T314, T315, T172) :|: TRUE
f2854_out(x6, x7, x8, x9) -> f3580_out(x6, x7, x8, x10) :|: TRUE
f8_in(T1) -> f12_in(T1) :|: TRUE
f13_out(x11) -> f8_out(x11) :|: TRUE
f8_in(x12) -> f13_in(x12) :|: TRUE
f12_out(x13) -> f8_out(x13) :|: TRUE
f3433_in -> f3433_out :|: TRUE
f2854_in(x14, x15, x16, x17) -> f2862_in(x14, x15, x16) :|: TRUE
f2862_out(x18, x19, x20) -> f2854_out(x18, x19, x20, x21) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2324_out(x22) -> f2370_out(x22) :|: TRUE
f2373_out(x23, x24) -> f179_out(x25, x23) :|: TRUE
f179_in(T38, T39) -> f2372_in(T38) :|: TRUE
f2372_out(x26) -> f2373_in(x27, x28) :|: TRUE
f2887_out(T231, T233, T232, T234) -> f2878_out(.(T231, T232), T233, T234) :|: TRUE
f2878_in(T173, T174, T175) -> f2888_in :|: TRUE
f2888_out -> f2878_out(x29, x30, x31) :|: TRUE
f2878_in(.(x32, x33), x34, x35) -> f2887_in(x32, x34, x33, x35) :|: TRUE
f2324_out(T66) -> f2128_out(.(T65, T66)) :|: TRUE
f2128_in(.(x36, x37)) -> f2324_in(x37) :|: TRUE
f2128_in(T27) -> f2326_in :|: TRUE
f2326_out -> f2128_out(x38) :|: TRUE
f2328_in(x39) -> f2329_in(x39) :|: TRUE
f2329_out(x40) -> f2328_out(x40) :|: TRUE
f2330_out(x41) -> f2328_out(x41) :|: TRUE
f2328_in(x42) -> f2330_in(x42) :|: TRUE
f3949_out(T364, T365, T367) -> f3911_out(T364, T365, T367, T366) :|: TRUE
f3911_in(x43, x44, x45, x46) -> f3949_in(x43, x44, x45) :|: TRUE
f3949_in(x47, x48, x49) -> f3950_in(x47, x48, x49) :|: TRUE
f3950_out(x50, x51, x52) -> f3949_out(x50, x51, x52) :|: TRUE
f70_out(x53) -> f13_out(x53) :|: TRUE
f82_out -> f13_out(x54) :|: TRUE
f13_in(x55) -> f70_in(x55) :|: TRUE
f13_in(x56) -> f82_in :|: TRUE
f3438_in(x57, x58, x59, x60) -> f3580_in(x59, x58, x60, x57) :|: x57 <= x58
f3581_out(x61, x62, x63, x64) -> f3438_out(x62, x61, x63, x64) :|: x62 > x61
f3580_out(x65, x66, x67, x68) -> f3438_out(x68, x66, x65, x67) :|: x68 <= x66
f3438_in(x69, x70, x71, x72) -> f3581_in(x70, x69, x71, x72) :|: x69 > x70
f3440_out -> f3438_out(x73, x74, x75, x76) :|: TRUE
f3438_in(x77, x78, x79, x80) -> f3440_in :|: TRUE
f2126_in(x81) -> f2128_in(x81) :|: TRUE
f2128_out(x82) -> f2126_out(x82) :|: TRUE
f2127_out(x83) -> f2126_out(x83) :|: TRUE
f2126_in(x84) -> f2127_in(x84) :|: TRUE
f2324_in(x85) -> f2328_in(x85) :|: TRUE
f2328_out(x86) -> f2324_out(x86) :|: TRUE
f3737_in(x87, x88, x89, x90) -> f3911_in(x87, x89, x90, x88) :|: x87 > x88
f3737_in(x91, x92, x93, x94) -> f3739_in :|: TRUE
f3912_out(x95, x96, x97, x98) -> f3737_out(x95, x97, x98, x96) :|: x95 <= x97
f3911_out(x99, x100, x101, x102) -> f3737_out(x99, x102, x100, x101) :|: x99 > x102
f3737_in(x103, x104, x105, x106) -> f3912_in(x103, x106, x104, x105) :|: x103 <= x104
f3739_out -> f3737_out(x107, x108, x109, x110) :|: TRUE
f3041_in(x111, x112, x113, x114) -> f2854_in(x111, x112, x113, x115) :|: TRUE
f2854_out(x116, x117, x118, x119) -> f3041_out(x116, x117, x118, x120) :|: TRUE
f2380_in(x121, x122) -> f2396_in(x121, x122) :|: TRUE
f2396_out(x123, x124) -> f2380_out(x123, x124) :|: TRUE
f2437_out(x125, x126) -> f2433_out(x125, x126) :|: TRUE
f2438_out(x127, x128) -> f2433_out(x127, x128) :|: TRUE
f2433_in(x129, x130) -> f2438_in(x129, x130) :|: TRUE
f2433_in(x131, x132) -> f2437_in(x131, x132) :|: TRUE
f3953_in -> f3953_out :|: TRUE
f2863_out(x133, x134, x135) -> f2862_out(x133, x134, x135) :|: TRUE
f2862_in(x136, x137, x138) -> f2863_in(x136, x137, x138) :|: TRUE
f2862_in(x139, x140, x141) -> f2864_in(x139, x140, x141) :|: TRUE
f2864_out(x142, x143, x144) -> f2862_out(x142, x143, x144) :|: TRUE
f3430_in(T260, T261, T263) -> f3431_in(T260, T261, T263) :|: TRUE
f3430_in(x145, x146, x147) -> f3432_in(x145, x146, x147) :|: TRUE
f3432_out(x148, x149, x150) -> f3430_out(x148, x149, x150) :|: TRUE
f3431_out(x151, x152, x153) -> f3430_out(x151, x152, x153) :|: TRUE
f2371_out -> f2330_out(x154) :|: TRUE
f2330_in(x155) -> f2371_in :|: TRUE
f2330_in(.(x156, x157)) -> f2370_in(x157) :|: TRUE
f2370_out(x158) -> f2330_out(.(x159, x158)) :|: TRUE
f2321_in -> f2321_out :|: TRUE
f2869_in -> f2869_out :|: TRUE
f3436_in(x160, x161, .(x162, x163)) -> f3438_in(x160, x162, x161, x163) :|: TRUE
f3438_out(x164, x165, x166, x167) -> f3436_out(x164, x166, .(x165, x167)) :|: TRUE
f3439_out -> f3436_out(x168, x169, x170) :|: TRUE
f3436_in(x171, x172, x173) -> f3439_in :|: TRUE
f2440_out -> f2437_out(x174, x175) :|: TRUE
f2437_in(T141, []) -> f2439_in :|: TRUE
f2439_out -> f2437_out(x176, []) :|: TRUE
f2437_in(x177, x178) -> f2440_in :|: TRUE
f2379_in(x179) -> f2_in(x179) :|: TRUE
f2_out(x180) -> f2379_out(x180) :|: TRUE
f4000_out(T445, T447, T446, T448) -> f3957_out(T445, T446, .(T447, T448)) :|: TRUE
f4001_out -> f3957_out(x181, x182, x183) :|: TRUE
f3957_in(x184, x185, .(x186, x187)) -> f4000_in(x184, x186, x185, x187) :|: TRUE
f3957_in(x188, x189, x190) -> f4001_in :|: TRUE
f2379_out(x191) -> f2380_in(x192, x193) :|: TRUE
f2373_in(x194, x195) -> f2379_in(x194) :|: TRUE
f2380_out(x196, x197) -> f2373_out(x198, x196) :|: TRUE
f4002_out -> f4000_out(x199, x200, x201, x202) :|: TRUE
f4000_in(x203, x204, x205, x206) -> f4082_in(x205, x203, x206, x204) :|: x203 <= x204
f4082_out(x207, x208, x209, x210) -> f4000_out(x208, x210, x207, x209) :|: x208 <= x210
f4000_in(x211, x212, x213, x214) -> f4002_in :|: TRUE
f4000_in(x215, x216, x217, x218) -> f4081_in(x215, x217, x218, x216) :|: x215 > x216
f4081_out(x219, x220, x221, x222) -> f4000_out(x219, x222, x220, x221) :|: x219 > x222
f179_out(x223, x224) -> f70_out(x225) :|: TRUE
f177_out(x226) -> f179_in(x227, x228) :|: TRUE
f70_in(x229) -> f177_in(x229) :|: TRUE
f2854_out(x230, x231, x232, x233) -> f2462_out(x233, x231, x230, x232) :|: x233 <= x231
f2462_in(x234, x235, x236, x237) -> f2855_in(x237, x236, x234, x235) :|: x234 > x235
f2462_in(x238, x239, x240, x241) -> f2854_in(x240, x239, x241, x238) :|: x238 <= x239
f2855_out(x242, x243, x244, x245) -> f2462_out(x244, x245, x243, x242) :|: x244 > x245
f2462_in(x246, x247, x248, x249) -> f2464_in :|: TRUE
f2464_out -> f2462_out(x250, x251, x252, x253) :|: TRUE
f3951_in(T385, T386, []) -> f3953_in :|: TRUE
f3954_out -> f3951_out(x254, x255, x256) :|: TRUE
f3953_out -> f3951_out(x257, x258, []) :|: TRUE
f3951_in(x259, x260, x261) -> f3954_in :|: TRUE
f6_in(x262) -> f8_in(x262) :|: TRUE
f8_out(x263) -> f6_out(x263) :|: TRUE
f6_in(x264) -> f7_in(x264) :|: TRUE
f7_out(x265) -> f6_out(x265) :|: TRUE
f3597_in(T341, T343, T342, T344) -> f3671_in(T341, T342, T344, T343) :|: T341 <= T343
f3670_out(x266, x267, x268, x269) -> f3597_out(x266, x269, x267, x268) :|: x266 > x269
f3671_out(x270, x271, x272, x273) -> f3597_out(x270, x273, x271, x272) :|: x270 <= x273
f3597_in(x274, x275, x276, x277) -> f3670_in(x274, x276, x277, x275) :|: x274 > x275
f3597_in(x278, x279, x280, x281) -> f3599_in :|: TRUE
f3599_out -> f3597_out(x282, x283, x284, x285) :|: TRUE
f3952_out(x286, x287, x288) -> f3950_out(x286, x287, x288) :|: TRUE
f3951_out(x289, x290, x291) -> f3950_out(x289, x290, x291) :|: TRUE
f3950_in(x292, x293, x294) -> f3952_in(x292, x293, x294) :|: TRUE
f3950_in(x295, x296, x297) -> f3951_in(x295, x296, x297) :|: TRUE
f3960_out -> f3958_out(T416, T418, T417, T419) :|: TRUE
f3958_in(x298, x299, x300, x301) -> f3996_in(x300, x299, x301, x298) :|: x298 <= x299
f3958_in(x302, x303, x304, x305) -> f3960_in :|: TRUE
f3996_out(x306, x307, x308, x309) -> f3958_out(x309, x307, x306, x308) :|: x309 <= x307
f3958_in(x310, x311, x312, x313) -> f3997_in(x311, x312, x310, x313) :|: x310 > x311
f3997_out(x314, x315, x316, x317) -> f3958_out(x316, x314, x315, x317) :|: x316 > x314
f2872_in(x318, x319, x320) -> f2880_in(x318, x319, x320) :|: TRUE
f2872_in(x321, x322, x323) -> f2878_in(x321, x322, x323) :|: TRUE
f2878_out(x324, x325, x326) -> f2872_out(x324, x325, x326) :|: TRUE
f2880_out(x327, x328, x329) -> f2872_out(x327, x328, x329) :|: TRUE
f3159_out(x330, x331, x332, x333) -> f2880_out(.(x330, x332), x331, x333) :|: TRUE
f2880_in(x334, x335, x336) -> f3160_in :|: TRUE
f2880_in(.(x337, x338), x339, x340) -> f3159_in(x337, x339, x338, x340) :|: TRUE
f3160_out -> f2880_out(x341, x342, x343) :|: TRUE
f2439_in -> f2439_out :|: TRUE
f2460_in(x344, x345) -> f2463_in :|: TRUE
f2460_in(.(x346, x347), .(x348, x349)) -> f2462_in(x346, x348, x347, x349) :|: TRUE
f2462_out(x350, x351, x352, x353) -> f2460_out(.(x350, x352), .(x351, x353)) :|: TRUE
f2463_out -> f2460_out(x354, x355) :|: TRUE
f2_in(x356) -> f6_in(x356) :|: TRUE
f6_out(x357) -> f2_out(x357) :|: TRUE
f2349_in -> f2349_out :|: TRUE
f3433_out -> f3431_out(T281, T282, []) :|: TRUE
f3431_in(x358, x359, x360) -> f3434_in :|: TRUE
f3434_out -> f3431_out(x361, x362, x363) :|: TRUE
f3431_in(x364, x365, []) -> f3433_in :|: TRUE
f2434_out -> f2432_out([], T126) :|: TRUE
f2435_out -> f2432_out(x366, x367) :|: TRUE
f2432_in([], x368) -> f2434_in :|: TRUE
f2432_in(x369, x370) -> f2435_in :|: TRUE
f2887_in(x371, x372, x373, x374) -> f3042_in(x373, x371, x372, x374) :|: x371 > x372
f2887_in(x375, x376, x377, x378) -> f2889_in :|: TRUE
f3041_out(x379, x380, x381, x382) -> f2887_out(x382, x380, x379, x381) :|: x382 <= x380
f2889_out -> f2887_out(x383, x384, x385, x386) :|: TRUE
f3042_out(x387, x388, x389, x390) -> f2887_out(x388, x389, x387, x390) :|: x388 > x389
f2887_in(x391, x392, x393, x394) -> f3041_in(x393, x392, x394, x391) :|: x391 <= x392
f2349_out -> f2329_out([]) :|: TRUE
f2329_in(x395) -> f2350_in :|: TRUE
f2329_in([]) -> f2349_in :|: TRUE
f2350_out -> f2329_out(x396) :|: TRUE
f3429_out(x397, x398, x399) -> f3427_out(x397, x398, x399, x400) :|: TRUE
f3427_in(x401, x402, x403, x404) -> f3429_in(x401, x402, x403) :|: TRUE
f2_out(x405) -> f2372_out(x405) :|: TRUE
f2372_in(x406) -> f2_in(x406) :|: TRUE
f3911_out(x407, x408, x409, x410) -> f4081_out(x407, x408, x409, x411) :|: TRUE
f4081_in(x412, x413, x414, x415) -> f3911_in(x412, x413, x414, x416) :|: TRUE
f3437_in(x417, x418, x419) -> f3598_in :|: TRUE
f3437_in(x420, x421, .(x422, x423)) -> f3597_in(x420, x422, x421, x423) :|: TRUE
f3597_out(x424, x425, x426, x427) -> f3437_out(x424, x426, .(x425, x427)) :|: TRUE
f3598_out -> f3437_out(x428, x429, x430) :|: TRUE
f2438_in(x431, x432) -> f2461_in(x431, x432) :|: TRUE
f2460_out(x433, x434) -> f2438_out(x433, x434) :|: TRUE
f2438_in(x435, x436) -> f2460_in(x435, x436) :|: TRUE
f2461_out(x437, x438) -> f2438_out(x437, x438) :|: TRUE
f2869_out -> f2863_out([], T199, T200) :|: TRUE
f2863_in(x439, x440, x441) -> f2870_in :|: TRUE
f2863_in([], x442, x443) -> f2869_in :|: TRUE
f2870_out -> f2863_out(x444, x445, x446) :|: TRUE
f3996_in(x447, x448, x449, x450) -> f2854_in(x447, x448, x449, x451) :|: TRUE
f2854_out(x452, x453, x454, x455) -> f3996_out(x452, x453, x454, x456) :|: TRUE
f2126_out(x457) -> f177_out(x457) :|: TRUE
f177_in(x458) -> f2126_in(x458) :|: TRUE
f2864_in(x459, x460, x461) -> f2872_in(x459, x460, x461) :|: TRUE
f2872_out(x462, x463, x464) -> f2864_out(x462, x463, x464) :|: TRUE
f3738_out -> f2461_out(x465, x466) :|: TRUE
f3737_out(x467, x468, x469, x470) -> f2461_out(.(x467, x469), .(x468, x470)) :|: TRUE
f2461_in(.(x471, x472), .(x473, x474)) -> f3737_in(x471, x473, x472, x474) :|: TRUE
f2461_in(x475, x476) -> f3738_in :|: TRUE
f3159_in(x477, x478, x479, x480) -> f3428_in(x480, x479, x477, x478) :|: x477 <= x478
f3159_in(x481, x482, x483, x484) -> f3161_in :|: TRUE
f3161_out -> f3159_out(x485, x486, x487, x488) :|: TRUE
f3428_out(x489, x490, x491, x492) -> f3159_out(x491, x492, x490, x489) :|: x491 <= x492
f3159_in(x493, x494, x495, x496) -> f3427_in(x493, x495, x496, x494) :|: x493 > x494
f3427_out(x497, x498, x499, x500) -> f3159_out(x497, x500, x498, x499) :|: x497 > x500
f2322_out -> f2127_out(x501) :|: TRUE
f2127_in(x502) -> f2322_in :|: TRUE
f2321_out -> f2127_out([]) :|: TRUE
f2127_in([]) -> f2321_in :|: TRUE
f3959_out -> f3956_out(x503, x504, x505) :|: TRUE
f3956_in(x506, x507, .(x508, x509)) -> f3958_in(x506, x508, x507, x509) :|: TRUE
f3956_in(x510, x511, x512) -> f3959_in :|: TRUE
f3958_out(x513, x514, x515, x516) -> f3956_out(x513, x515, .(x514, x516)) :|: TRUE
f2434_in -> f2434_out :|: TRUE
f3430_out(x517, x518, x519) -> f3429_out(x517, x518, x519) :|: TRUE
f3429_in(x520, x521, x522) -> f3430_in(x520, x521, x522) :|: TRUE
f3952_in(x523, x524, x525) -> f3956_in(x523, x524, x525) :|: TRUE
f3956_out(x526, x527, x528) -> f3952_out(x526, x527, x528) :|: TRUE
f3952_in(x529, x530, x531) -> f3957_in(x529, x530, x531) :|: TRUE
f3957_out(x532, x533, x534) -> f3952_out(x532, x533, x534) :|: TRUE
f3436_out(x535, x536, x537) -> f3432_out(x535, x536, x537) :|: TRUE
f3432_in(x538, x539, x540) -> f3437_in(x538, x539, x540) :|: TRUE
f3432_in(x541, x542, x543) -> f3436_in(x541, x542, x543) :|: TRUE
f3437_out(x544, x545, x546) -> f3432_out(x544, x545, x546) :|: TRUE
f3670_in(x547, x548, x549, x550) -> f3427_in(x547, x548, x549, x551) :|: TRUE
f3427_out(x552, x553, x554, x555) -> f3670_out(x552, x553, x554, x556) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(427) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f8_in(x12) -> f13_in(x12) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2324_out(x22) -> f2370_out(x22) :|: TRUE
f179_in(T38, T39) -> f2372_in(T38) :|: TRUE
f2324_out(T66) -> f2128_out(.(T65, T66)) :|: TRUE
f2128_in(.(x36, x37)) -> f2324_in(x37) :|: TRUE
f2328_in(x39) -> f2329_in(x39) :|: TRUE
f2329_out(x40) -> f2328_out(x40) :|: TRUE
f2330_out(x41) -> f2328_out(x41) :|: TRUE
f2328_in(x42) -> f2330_in(x42) :|: TRUE
f13_in(x55) -> f70_in(x55) :|: TRUE
f2126_in(x81) -> f2128_in(x81) :|: TRUE
f2128_out(x82) -> f2126_out(x82) :|: TRUE
f2127_out(x83) -> f2126_out(x83) :|: TRUE
f2126_in(x84) -> f2127_in(x84) :|: TRUE
f2324_in(x85) -> f2328_in(x85) :|: TRUE
f2328_out(x86) -> f2324_out(x86) :|: TRUE
f2330_in(.(x156, x157)) -> f2370_in(x157) :|: TRUE
f2370_out(x158) -> f2330_out(.(x159, x158)) :|: TRUE
f2321_in -> f2321_out :|: TRUE
f177_out(x226) -> f179_in(x227, x228) :|: TRUE
f70_in(x229) -> f177_in(x229) :|: TRUE
f6_in(x262) -> f8_in(x262) :|: TRUE
f2_in(x356) -> f6_in(x356) :|: TRUE
f2349_in -> f2349_out :|: TRUE
f2349_out -> f2329_out([]) :|: TRUE
f2329_in([]) -> f2349_in :|: TRUE
f2372_in(x406) -> f2_in(x406) :|: TRUE
f2126_out(x457) -> f177_out(x457) :|: TRUE
f177_in(x458) -> f2126_in(x458) :|: TRUE
f2321_out -> f2127_out([]) :|: TRUE
f2127_in([]) -> f2321_in :|: TRUE


----------------------------------------

(428)
Obligation:
Rules:
f8_in(x12) -> f13_in(x12) :|: TRUE
f2370_in(T86) -> f2324_in(T86) :|: TRUE
f2324_out(x22) -> f2370_out(x22) :|: TRUE
f179_in(T38, T39) -> f2372_in(T38) :|: TRUE
f2324_out(T66) -> f2128_out(.(T65, T66)) :|: TRUE
f2128_in(.(x36, x37)) -> f2324_in(x37) :|: TRUE
f2328_in(x39) -> f2329_in(x39) :|: TRUE
f2329_out(x40) -> f2328_out(x40) :|: TRUE
f2330_out(x41) -> f2328_out(x41) :|: TRUE
f2328_in(x42) -> f2330_in(x42) :|: TRUE
f13_in(x55) -> f70_in(x55) :|: TRUE
f2126_in(x81) -> f2128_in(x81) :|: TRUE
f2128_out(x82) -> f2126_out(x82) :|: TRUE
f2127_out(x83) -> f2126_out(x83) :|: TRUE
f2126_in(x84) -> f2127_in(x84) :|: TRUE
f2324_in(x85) -> f2328_in(x85) :|: TRUE
f2328_out(x86) -> f2324_out(x86) :|: TRUE
f2330_in(.(x156, x157)) -> f2370_in(x157) :|: TRUE
f2370_out(x158) -> f2330_out(.(x159, x158)) :|: TRUE
f2321_in -> f2321_out :|: TRUE
f177_out(x226) -> f179_in(x227, x228) :|: TRUE
f70_in(x229) -> f177_in(x229) :|: TRUE
f6_in(x262) -> f8_in(x262) :|: TRUE
f2_in(x356) -> f6_in(x356) :|: TRUE
f2349_in -> f2349_out :|: TRUE
f2349_out -> f2329_out([]) :|: TRUE
f2329_in([]) -> f2349_in :|: TRUE
f2372_in(x406) -> f2_in(x406) :|: TRUE
f2126_out(x457) -> f177_out(x457) :|: TRUE
f177_in(x458) -> f2126_in(x458) :|: TRUE
f2321_out -> f2127_out([]) :|: TRUE
f2127_in([]) -> f2321_in :|: TRUE

----------------------------------------

(429) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(430)
Obligation:
Rules:
f2328_in([]) -> f2324_out([]) :|: TRUE
f2328_in(.(x156:0, x157:0)) -> f2328_in(x157:0) :|: TRUE
f2324_out(T66:0) -> f2126_in(x227:0) :|: TRUE
f2126_in([]) -> f2126_in(x) :|: TRUE
f2126_in(.(x36:0, x37:0)) -> f2328_in(x37:0) :|: TRUE
f2324_out(x22:0) -> f2324_out(.(x159:0, x22:0)) :|: TRUE

----------------------------------------

(431) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(432)
Obligation:
Rules:
f2328_in([]) -> f2324_out([]) :|: TRUE
f2328_in(.(x156:0, x157:0)) -> f2328_in(x157:0) :|: TRUE
f2324_out(T66:0) -> f2126_in(x227:0) :|: TRUE
f2126_in([]) -> f2126_in(x) :|: TRUE
f2126_in(.(x36:0, x37:0)) -> f2328_in(x37:0) :|: TRUE
f2324_out(x22:0) -> f2324_out(.(x159:0, x22:0)) :|: TRUE

----------------------------------------

(433) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2328_in([]) -> f2324_out([]) :|: TRUE
(2) f2328_in(.(x156:0, x157:0)) -> f2328_in(x157:0) :|: TRUE
(3) f2324_out(T66:0) -> f2126_in(x227:0) :|: TRUE
(4) f2126_in([]) -> f2126_in(x) :|: TRUE
(5) f2126_in(.(x36:0, x37:0)) -> f2328_in(x37:0) :|: TRUE
(6) f2324_out(x22:0) -> f2324_out(.(x159:0, x22:0)) :|: TRUE

Arcs:
(1) -> (3), (6)
(2) -> (1), (2)
(3) -> (4), (5)
(4) -> (4), (5)
(5) -> (1), (2)
(6) -> (3), (6)

This digraph is fully evaluated!
----------------------------------------

(434)
Obligation:

Termination digraph:
Nodes:
(1) f2328_in([]) -> f2324_out([]) :|: TRUE
(2) f2328_in(.(x156:0, x157:0)) -> f2328_in(x157:0) :|: TRUE
(3) f2126_in(.(x36:0, x37:0)) -> f2328_in(x37:0) :|: TRUE
(4) f2126_in([]) -> f2126_in(x) :|: TRUE
(5) f2324_out(T66:0) -> f2126_in(x227:0) :|: TRUE
(6) f2324_out(x22:0) -> f2324_out(.(x159:0, x22:0)) :|: TRUE

Arcs:
(1) -> (5), (6)
(2) -> (1), (2)
(3) -> (1), (2)
(4) -> (3), (4)
(5) -> (3), (4)
(6) -> (5), (6)

This digraph is fully evaluated!

----------------------------------------

(435) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(436)
Obligation:
Rules:
f2328_in([]) -> f2324_out([]) :|: TRUE
f2328_in(.(x157:0)) -> f2328_in(x157:0) :|: TRUE
f2126_in(.(x37:0)) -> f2328_in(x37:0) :|: TRUE
f2126_in([]) -> f2126_in(x) :|: TRUE
f2324_out(T66:0) -> f2126_in(x227:0) :|: TRUE
f2324_out(x22:0) -> f2324_out(.(x22:0)) :|: TRUE

----------------------------------------

(437) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(438)
Obligation:
Rules:
f2328_in([]) -> f2324_out([]) :|: TRUE
f2328_in(.(x)) -> f2328_in(x) :|: TRUE
f2126_in(.(x1)) -> f2328_in(x1) :|: TRUE
f2126_in([]) -> f2126_in(x2) :|: TRUE
f2324_out(x3) -> f2126_in(x4) :|: TRUE
f2324_out(x5) -> f2324_out(.(x5)) :|: TRUE

----------------------------------------

(439) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 14,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(mergesort ([]) ([]) Ls)",
                null
            ],
            [
                "(mergesort (. X ([])) (. X ([])) Ls)",
                null
            ],
            [
                "(mergesort Xs Ys (. H Ls))",
                "(',' (split Xs X1s X2s (. H Ls)) (',' (mergesort X1s Y1s Ls) (',' (mergesort X2s Y2s Ls) (merge Y1s Y2s Ys (. H Ls)))))"
            ],
            [
                "(split ([]) ([]) ([]) Ls)",
                null
            ],
            [
                "(split (. X Xs) (. X Ys) Zs (. H Ls))",
                "(split Xs Zs Ys Ls)"
            ],
            [
                "(merge ([]) Xs Xs Ls)",
                null
            ],
            [
                "(merge Xs ([]) Xs Ls)",
                null
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. X Zs) (. H Ls))",
                "(',' (=< X Y) (merge Xs (. Y Ys) Zs Ls))"
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. Y Zs) (. H Ls))",
                "(',' (> X Y) (merge (. X Xs) Ys Zs Ls))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "3913": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3914": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3915": {
                "goal": [{
                    "clause": 6,
                    "scope": 6,
                    "term": "(merge (. T322 T323) T325 T329 T330)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3916": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(merge (. T322 T323) T325 T329 T330)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3917": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322",
                        "T343"
                    ]
                }
            },
            "3918": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "633": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3919": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T343",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322",
                        "T343"
                    ]
                }
            },
            "634": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "635": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(mergesort T1 T2 T3)",
                        "(mergesort ([]) ([]) X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "636": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2 T3)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3994": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T375 (. T376 T377) T381 T382)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T374",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T374",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T376",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T374",
                        "T375",
                        "T377",
                        "T376"
                    ],
                    "free": [],
                    "exprvars": [
                        "T374",
                        "T324",
                        "T322",
                        "T376"
                    ]
                }
            },
            "637": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort ([]) T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3995": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T374",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T374",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T376",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            }
                        ]
                    },
                    "ground": [
                        "T374",
                        "T375",
                        "T377",
                        "T376"
                    ],
                    "free": [],
                    "exprvars": [
                        "T374",
                        "T324",
                        "T322",
                        "T376"
                    ]
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4100": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4101": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4102": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort (. T437 T445) X382 T446)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T437",
                        "T445"
                    ],
                    "free": ["X382"],
                    "exprvars": []
                }
            },
            "3924": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1501": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort ([]) X15 T41) (',' (mergesort ([]) X16 T41) (merge X15 X16 T42 (. T43 T41))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "1985": {
                "goal": [{
                    "clause": 6,
                    "scope": 3,
                    "term": "(merge T49 T61 T62 (. T63 T64))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3920": {
                "goal": [{
                    "clause": 7,
                    "scope": 6,
                    "term": "(merge (. T322 T323) T325 T329 T330)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3921": {
                "goal": [{
                    "clause": 8,
                    "scope": 6,
                    "term": "(merge (. T322 T323) T325 T329 T330)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "3922": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T374 T376) (merge T375 (. T376 T377) T381 T382))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T374",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T374",
                        "T375",
                        "T376",
                        "T377"
                    ],
                    "free": [],
                    "exprvars": [
                        "T374",
                        "T324",
                        "T322"
                    ]
                }
            },
            "3923": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "4110": {
                "goal": [{
                    "clause": 4,
                    "scope": 9,
                    "term": "(',' (split T477 X447 X448 (. T481 T482)) (',' (mergesort X447 X449 T482) (',' (mergesort X448 X450 T482) (merge X449 X450 T483 (. T481 T482)))))"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort ([]) ([]) X2)"
                        ],
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T477"],
                    "free": [
                        "X2",
                        "X370",
                        "X371",
                        "X447",
                        "X448",
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "4111": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort ([]) X449 T494) (',' (mergesort ([]) X450 T494) (merge X449 X450 T495 (. T496 T494))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "4112": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4113": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split T511 X484 X483 T514) (',' (mergesort (. T510 X483) X449 T514) (',' (mergesort X484 X450 T514) (merge X449 X450 T515 (. T516 T514)))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T2 T3)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X449",
                        "X450",
                        "X483",
                        "X484"
                    ],
                    "exprvars": []
                }
            },
            "1991": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 8,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4103": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T444 X383 T456) (merge T455 X383 T457 (. T458 T456)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T444",
                        "T455"
                    ],
                    "free": ["X383"],
                    "exprvars": []
                }
            },
            "4104": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T444 X383 T456)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T444"],
                    "free": ["X383"],
                    "exprvars": []
                }
            },
            "4105": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T455 T461 T462 (. T463 T464))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T455",
                        "T461"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4106": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split T477 X447 X448 (. T481 T482)) (',' (mergesort X447 X449 T482) (',' (mergesort X448 X450 T482) (merge X449 X450 T483 (. T481 T482)))))"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort ([]) ([]) X2)"
                        ],
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T477"],
                    "free": [
                        "X2",
                        "X370",
                        "X371",
                        "X447",
                        "X448",
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "1914": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2849": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T131 (. T132 T133) T137 T138)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132",
                        "T130"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "4107": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4108": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 9,
                        "term": "(',' (split T477 X447 X448 (. T481 T482)) (',' (mergesort X447 X449 T482) (',' (mergesort X448 X450 T482) (merge X449 X450 T483 (. T481 T482)))))"
                    },
                    {
                        "clause": 4,
                        "scope": 9,
                        "term": "(',' (split T477 X447 X448 (. T481 T482)) (',' (mergesort X447 X449 T482) (',' (mergesort X448 X450 T482) (merge X449 X450 T483 (. T481 T482)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort ([]) ([]) X2)"
                        ],
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T477"],
                    "free": [
                        "X2",
                        "X370",
                        "X371",
                        "X447",
                        "X448",
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "4109": {
                "goal": [{
                    "clause": 3,
                    "scope": 9,
                    "term": "(',' (split T477 X447 X448 (. T481 T482)) (',' (mergesort X447 X449 T482) (',' (mergesort X448 X450 T482) (merge X449 X450 T483 (. T481 T482)))))"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort ([]) ([]) X2)"
                        ],
                        [
                            "(mergesort T477 T2 T3)",
                            "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T477"],
                    "free": [
                        "X2",
                        "X370",
                        "X371",
                        "X447",
                        "X448",
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "4085": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4086": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort (. T414 ([])) T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T414"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4087": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T1 T2 T3)",
                            "(mergesort ([]) ([]) X2)"
                        ],
                        [
                            "(mergesort T1 T2 T3)",
                            "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X2",
                        "X370",
                        "X371"
                    ],
                    "exprvars": []
                }
            },
            "4120": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4088": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort (. T414 ([])) T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T414"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4121": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4089": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split (. T420 ([])) X380 X381 (. T424 T425)) (',' (mergesort X380 X382 T425) (',' (mergesort X381 X383 T425) (merge X382 X383 T426 (. T424 T425)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T420"],
                    "free": [
                        "X380",
                        "X381",
                        "X382",
                        "X383"
                    ],
                    "exprvars": []
                }
            },
            "4122": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4123": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T542 X517 X516 T545)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T542"],
                    "free": [
                        "X516",
                        "X517"
                    ],
                    "exprvars": []
                }
            },
            "4003": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T403 T405) (merge (. T403 T404) T406 T410 T411))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T403",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T403",
                        "T404",
                        "T405",
                        "T406"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322",
                        "T403"
                    ]
                }
            },
            "4124": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3035": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T189",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T191",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T191",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T192",
                        "T189",
                        "T191",
                        "T190"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T189",
                        "T191",
                        "T130"
                    ]
                }
            },
            "3034": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T190 (. T191 T192) T196 T197)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T191",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T189",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T191",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T192",
                        "T189",
                        "T191",
                        "T190"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T189",
                        "T191",
                        "T130"
                    ]
                }
            },
            "1524": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort ([]) X15 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "2853": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "2852": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(merge T131 (. T132 T133) T137 T138)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3829": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T322 T323) T325 T329 T330)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T324",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "2851": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "2850": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">"
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132",
                        "T130"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "4114": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4115": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T511 X484 X483 T514)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T2 T3)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X483",
                        "X484"
                    ],
                    "exprvars": []
                }
            },
            "4116": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort (. T510 T520) X449 T521) (',' (mergesort T519 X450 T521) (merge X449 X450 T522 (. T523 T521))))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T524 T525)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511",
                        "T519",
                        "T520"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X449",
                        "X450"
                    ],
                    "exprvars": []
                }
            },
            "4117": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 10,
                        "term": "(split T511 X484 X483 T514)"
                    },
                    {
                        "clause": 4,
                        "scope": 10,
                        "term": "(split T511 X484 X483 T514)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T2 T3)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X483",
                        "X484"
                    ],
                    "exprvars": []
                }
            },
            "1925": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4118": {
                "goal": [{
                    "clause": 3,
                    "scope": 10,
                    "term": "(split T511 X484 X483 T514)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T2 T3)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X483",
                        "X484"
                    ],
                    "exprvars": []
                }
            },
            "2859": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "4119": {
                "goal": [{
                    "clause": 4,
                    "scope": 10,
                    "term": "(split T511 X484 X483 T514)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(mergesort (. T510 T511) T2 T3)",
                        "(mergesort (. X370 ([])) (. X370 ([])) X371)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T510",
                        "T511"
                    ],
                    "free": [
                        "X370",
                        "X371",
                        "X483",
                        "X484"
                    ],
                    "exprvars": []
                }
            },
            "2858": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T157",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130",
                        "T157"
                    ]
                }
            },
            "1526": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort ([]) X16 T50) (merge T49 X16 T51 (. T52 T50)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T49"],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "4095": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort (. T437 T445) X382 T446) (',' (mergesort T444 X383 T446) (merge X382 X383 T447 (. T448 T446))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T437",
                        "T444",
                        "T445"
                    ],
                    "free": [
                        "X382",
                        "X383"
                    ],
                    "exprvars": []
                }
            },
            "4096": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 8,
                        "term": "(split ([]) X411 X410 T440)"
                    },
                    {
                        "clause": 4,
                        "scope": 8,
                        "term": "(split ([]) X411 X410 T440)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X410",
                        "X411"
                    ],
                    "exprvars": []
                }
            },
            "4097": {
                "goal": [{
                    "clause": 3,
                    "scope": 8,
                    "term": "(split ([]) X411 X410 T440)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X410",
                        "X411"
                    ],
                    "exprvars": []
                }
            },
            "4130": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4098": {
                "goal": [{
                    "clause": 4,
                    "scope": 8,
                    "term": "(split ([]) X411 X410 T440)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X410",
                        "X411"
                    ],
                    "exprvars": []
                }
            },
            "4131": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T562 X548 X547 T565)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T562"],
                    "free": [
                        "X547",
                        "X548"
                    ],
                    "exprvars": []
                }
            },
            "4099": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4132": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3321": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(merge (. T218 T219) T221 T225 T226)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "3320": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(merge (. T218 T219) T221 T225 T226)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "4090": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4091": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 7,
                        "term": "(',' (split (. T420 ([])) X380 X381 (. T424 T425)) (',' (mergesort X380 X382 T425) (',' (mergesort X381 X383 T425) (merge X382 X383 T426 (. T424 T425)))))"
                    },
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(',' (split (. T420 ([])) X380 X381 (. T424 T425)) (',' (mergesort X380 X382 T425) (',' (mergesort X381 X383 T425) (merge X382 X383 T426 (. T424 T425)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T420"],
                    "free": [
                        "X380",
                        "X381",
                        "X382",
                        "X383"
                    ],
                    "exprvars": []
                }
            },
            "4092": {
                "goal": [{
                    "clause": 4,
                    "scope": 7,
                    "term": "(',' (split (. T420 ([])) X380 X381 (. T424 T425)) (',' (mergesort X380 X382 T425) (',' (mergesort X381 X383 T425) (merge X382 X383 T426 (. T424 T425)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T420"],
                    "free": [
                        "X380",
                        "X381",
                        "X382",
                        "X383"
                    ],
                    "exprvars": []
                }
            },
            "4093": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split ([]) X411 X410 T440) (',' (mergesort (. T437 X410) X382 T440) (',' (mergesort X411 X383 T440) (merge X382 X383 T441 (. T442 T440)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T437"],
                    "free": [
                        "X382",
                        "X383",
                        "X410",
                        "X411"
                    ],
                    "exprvars": []
                }
            },
            "4094": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split ([]) X411 X410 T440)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X410",
                        "X411"
                    ],
                    "exprvars": []
                }
            },
            "3318": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2866": {
                "goal": [{
                    "clause": 8,
                    "scope": 4,
                    "term": "(merge T131 (. T132 T133) T137 T138)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3317": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T239",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130",
                        "T239"
                    ]
                }
            },
            "1930": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2348": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2865": {
                "goal": [{
                    "clause": 7,
                    "scope": 4,
                    "term": "(merge T131 (. T132 T133) T137 T138)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3316": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2347": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3315": {
                "goal": [{
                    "clause": 6,
                    "scope": 5,
                    "term": "(merge (. T218 T219) T221 T225 T226)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2346": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T130 T132) (merge T131 (. T132 T133) T137 T138))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T130",
                        "T131",
                        "T132",
                        "T133"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3314": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "3038": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3313": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge (. T218 T219) T221 T225 T226)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2861": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    },
                    {
                        "clause": 8,
                        "scope": 4,
                        "term": "(merge T131 (. T132 T133) T137 T138)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T131",
                        "T133",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3037": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3312": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T220",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2860": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T157",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130",
                        "T157"
                    ]
                }
            },
            "3036": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T218 T220) (merge (. T218 T219) T221 T225 T226))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T218",
                        "T219",
                        "T220",
                        "T221"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T130"
                    ]
                }
            },
            "3311": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T218 T219) T221 T225 T226)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T219",
                        "T221",
                        "T220",
                        "T218"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "4004": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "4125": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 11,
                        "term": "(split T542 X517 X516 T545)"
                    },
                    {
                        "clause": 4,
                        "scope": 11,
                        "term": "(split T542 X517 X516 T545)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T542"],
                    "free": [
                        "X516",
                        "X517"
                    ],
                    "exprvars": []
                }
            },
            "4005": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4126": {
                "goal": [{
                    "clause": 3,
                    "scope": 11,
                    "term": "(split T542 X517 X516 T545)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T542"],
                    "free": [
                        "X516",
                        "X517"
                    ],
                    "exprvars": []
                }
            },
            "3830": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T324",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T322",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": [
                        "T325",
                        "T323",
                        "T324",
                        "T322"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322"
                    ]
                }
            },
            "4127": {
                "goal": [{
                    "clause": 4,
                    "scope": 11,
                    "term": "(split T542 X517 X516 T545)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T542"],
                    "free": [
                        "X516",
                        "X517"
                    ],
                    "exprvars": []
                }
            },
            "4128": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4129": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3319": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T239",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130",
                        "T239"
                    ]
                }
            },
            "3332": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T270 T272) (merge T271 (. T272 T273) T277 T278))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T270",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T270",
                        "T271",
                        "T272",
                        "T273"
                    ],
                    "free": [],
                    "exprvars": [
                        "T270",
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2083": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1426": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (split ([]) X13 X14 (. T12 T13)) (',' (mergesort X13 X15 T13) (',' (mergesort X14 X16 T13) (merge X15 X16 T14 (. T12 T13)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X13",
                        "X14",
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "1424": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (split ([]) X13 X14 (. T12 T13)) (',' (mergesort X13 X15 T13) (',' (mergesort X14 X16 T13) (merge X15 X16 T14 (. T12 T13)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X13",
                        "X14",
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "2876": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2875": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T130",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T132",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T130"
                    ]
                }
            },
            "3601": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T299",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T301",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T299",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T301",
                        "T302",
                        "T299",
                        "T300"
                    ],
                    "free": [],
                    "exprvars": [
                        "T301",
                        "T132",
                        "T220",
                        "T299",
                        "T218",
                        "T130"
                    ]
                }
            },
            "1422": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (split ([]) X13 X14 (. T12 T13)) (',' (mergesort X13 X15 T13) (',' (mergesort X14 X16 T13) (merge X15 X16 T14 (. T12 T13)))))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (split ([]) X13 X14 (. T12 T13)) (',' (mergesort X13 X15 T13) (',' (mergesort X14 X16 T13) (merge X15 X16 T14 (. T12 T13)))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X13",
                        "X14",
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            },
            "2874": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T189 T191) (merge T190 (. T191 T192) T196 T197))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T191",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T189",
                        "T190",
                        "T191",
                        "T192"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T191",
                        "T130"
                    ]
                }
            },
            "3600": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T299 T300) T302 T306 T307)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T299",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T301",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T299",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T301",
                        "T302",
                        "T299",
                        "T300"
                    ],
                    "free": [],
                    "exprvars": [
                        "T301",
                        "T132",
                        "T220",
                        "T299",
                        "T218",
                        "T130"
                    ]
                }
            },
            "1421": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1784": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 6,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 7,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 8,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2092": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2098": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3579": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T270",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T270",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T272",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T270",
                        "T272",
                        "T271",
                        "T273"
                    ],
                    "free": [],
                    "exprvars": [
                        "T270",
                        "T132",
                        "T220",
                        "T272",
                        "T218",
                        "T130"
                    ]
                }
            },
            "3578": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T271 (. T272 T273) T277 T278)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T270",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T270",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T272",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T270",
                        "T272",
                        "T271",
                        "T273"
                    ],
                    "free": [],
                    "exprvars": [
                        "T270",
                        "T132",
                        "T220",
                        "T272",
                        "T218",
                        "T130"
                    ]
                }
            },
            "2125": {
                "goal": [{
                    "clause": 8,
                    "scope": 3,
                    "term": "(merge T49 T61 T62 (. T63 T64))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2124": {
                "goal": [{
                    "clause": 7,
                    "scope": 3,
                    "term": "(merge T49 T61 T62 (. T63 T64))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3334": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3333": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "1718": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T49 T61 T62 (. T63 T64))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3734": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T322 T324) (merge (. T322 T323) T325 T329 T330))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T322",
                        "T323",
                        "T324",
                        "T325"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "1835": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(merge T49 T61 T62 (. T63 T64))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3735": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1713": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort ([]) X16 T50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "3736": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4044": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T403 T404) T406 T410 T411)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T403",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T405",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T403",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T406",
                        "T404",
                        "T405",
                        "T403"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322",
                        "T405",
                        "T403"
                    ]
                }
            },
            "4045": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T324",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T403",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T322",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T405",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T403",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">="
                            }
                        ]
                    },
                    "ground": [
                        "T406",
                        "T404",
                        "T405",
                        "T403"
                    ],
                    "free": [],
                    "exprvars": [
                        "T324",
                        "T322",
                        "T405",
                        "T403"
                    ]
                }
            },
            "3596": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3595": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T218",
                        "T130"
                    ]
                }
            },
            "3594": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T299 T301) (merge (. T299 T300) T302 T306 T307))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T299",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T218",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            },
                            {
                                "lhs": {
                                    "name": "T130",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T220",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T132",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T299",
                        "T300",
                        "T301",
                        "T302"
                    ],
                    "free": [],
                    "exprvars": [
                        "T132",
                        "T220",
                        "T299",
                        "T218",
                        "T130"
                    ]
                }
            },
            "1840": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 7,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    },
                    {
                        "clause": 8,
                        "scope": 3,
                        "term": "(merge T49 T61 T62 (. T63 T64))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T49",
                        "T61"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "743": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split ([]) X13 X14 (. T12 T13)) (',' (mergesort X13 X15 T13) (',' (mergesort X14 X16 T13) (merge X15 X16 T14 (. T12 T13)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X13",
                        "X14",
                        "X15",
                        "X16"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 14,
                "to": 633,
                "label": "CASE"
            },
            {
                "from": 633,
                "to": 634,
                "label": "EVAL with clause\nmergesort([], [], X2).\nand substitutionT1 -> [],\nT2 -> [],\nT3 -> T5,\nX2 -> T5"
            },
            {
                "from": 633,
                "to": 635,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 634,
                "to": 636,
                "label": "SUCCESS"
            },
            {
                "from": 635,
                "to": 4086,
                "label": "EVAL with clause\nmergesort(.(X370, []), .(X370, []), X371).\nand substitutionX370 -> T414,\nT1 -> .(T414, []),\nT2 -> .(T414, []),\nT3 -> T415,\nX371 -> T415"
            },
            {
                "from": 635,
                "to": 4087,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 636,
                "to": 637,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, []), .(X, []), Ls)because of non-unification"
            },
            {
                "from": 637,
                "to": 743,
                "label": "EVAL with clause\nmergesort(X9, X10, .(X11, X12)) :- ','(split(X9, X13, X14, .(X11, X12)), ','(mergesort(X13, X15, X12), ','(mergesort(X14, X16, X12), merge(X15, X16, X10, .(X11, X12))))).\nand substitutionX9 -> [],\nT2 -> T14,\nX10 -> T14,\nX11 -> T12,\nX12 -> T13,\nT3 -> .(T12, T13),\nT10 -> T12,\nT11 -> T13,\nT9 -> T14"
            },
            {
                "from": 637,
                "to": 1421,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 743,
                "to": 1422,
                "label": "CASE"
            },
            {
                "from": 1422,
                "to": 1424,
                "label": "PARALLEL"
            },
            {
                "from": 1422,
                "to": 1426,
                "label": "PARALLEL"
            },
            {
                "from": 1424,
                "to": 1501,
                "label": "ONLY EVAL with clause\nsplit([], [], [], X31).\nand substitutionX13 -> [],\nX14 -> [],\nT12 -> T43,\nT13 -> T41,\nX31 -> .(T43, T41),\nT40 -> T41,\nT14 -> T42,\nT39 -> T43"
            },
            {
                "from": 1426,
                "to": 4085,
                "label": "BACKTRACK\nfor clause: split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls)because of non-unification"
            },
            {
                "from": 1501,
                "to": 1524,
                "label": "SPLIT 1"
            },
            {
                "from": 1501,
                "to": 1526,
                "label": "SPLIT 2\nnew knowledge:\nT49 is ground\nreplacements:X15 -> T49,\nT41 -> T50,\nT42 -> T51,\nT43 -> T52"
            },
            {
                "from": 1524,
                "to": 14,
                "label": "INSTANCE with matching:\nT1 -> []\nT2 -> X15\nT3 -> T41"
            },
            {
                "from": 1526,
                "to": 1713,
                "label": "SPLIT 1"
            },
            {
                "from": 1526,
                "to": 1718,
                "label": "SPLIT 2\nnew knowledge:\nT61 is ground\nreplacements:X16 -> T61,\nT51 -> T62,\nT52 -> T63,\nT50 -> T64"
            },
            {
                "from": 1713,
                "to": 14,
                "label": "INSTANCE with matching:\nT1 -> []\nT2 -> X16\nT3 -> T50"
            },
            {
                "from": 1718,
                "to": 1784,
                "label": "CASE"
            },
            {
                "from": 1784,
                "to": 1835,
                "label": "PARALLEL"
            },
            {
                "from": 1784,
                "to": 1840,
                "label": "PARALLEL"
            },
            {
                "from": 1835,
                "to": 1914,
                "label": "EVAL with clause\nmerge([], X58, X58, X59).\nand substitutionT49 -> [],\nT61 -> T84,\nX58 -> T84,\nT62 -> T84,\nT63 -> T85,\nT64 -> T86,\nX59 -> .(T85, T86)"
            },
            {
                "from": 1835,
                "to": 1925,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1840,
                "to": 1985,
                "label": "PARALLEL"
            },
            {
                "from": 1840,
                "to": 1991,
                "label": "PARALLEL"
            },
            {
                "from": 1914,
                "to": 1930,
                "label": "SUCCESS"
            },
            {
                "from": 1985,
                "to": 2083,
                "label": "EVAL with clause\nmerge(X68, [], X68, X69).\nand substitutionT49 -> T99,\nX68 -> T99,\nT61 -> [],\nT62 -> T99,\nT63 -> T100,\nT64 -> T101,\nX69 -> .(T100, T101)"
            },
            {
                "from": 1985,
                "to": 2092,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1991,
                "to": 2124,
                "label": "PARALLEL"
            },
            {
                "from": 1991,
                "to": 2125,
                "label": "PARALLEL"
            },
            {
                "from": 2083,
                "to": 2098,
                "label": "SUCCESS"
            },
            {
                "from": 2124,
                "to": 2346,
                "label": "EVAL with clause\nmerge(.(X98, X99), .(X100, X101), .(X98, X102), .(X103, X104)) :- ','(=<(X98, X100), merge(X99, .(X100, X101), X102, X104)).\nand substitutionX98 -> T130,\nX99 -> T131,\nT49 -> .(T130, T131),\nX100 -> T132,\nX101 -> T133,\nT61 -> .(T132, T133),\nX102 -> T137,\nT62 -> .(T130, T137),\nT63 -> T135,\nX103 -> T135,\nT64 -> T138,\nX104 -> T138,\nT134 -> T137,\nT136 -> T138"
            },
            {
                "from": 2124,
                "to": 2347,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2125,
                "to": 3734,
                "label": "EVAL with clause\nmerge(.(X275, X276), .(X277, X278), .(X277, X279), .(X280, X281)) :- ','(>(X275, X277), merge(.(X275, X276), X278, X279, X281)).\nand substitutionX275 -> T322,\nX276 -> T323,\nT49 -> .(T322, T323),\nX277 -> T324,\nX278 -> T325,\nT61 -> .(T324, T325),\nX279 -> T329,\nT62 -> .(T324, T329),\nT63 -> T327,\nX280 -> T327,\nT64 -> T330,\nX281 -> T330,\nT326 -> T329,\nT328 -> T330"
            },
            {
                "from": 2125,
                "to": 3735,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2346,
                "to": 2348,
                "label": "IS ERROR"
            },
            {
                "from": 2346,
                "to": 2849,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2346,
                "to": 2850,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 2849,
                "to": 2851,
                "label": "CASE"
            },
            {
                "from": 2851,
                "to": 2852,
                "label": "PARALLEL"
            },
            {
                "from": 2851,
                "to": 2853,
                "label": "PARALLEL"
            },
            {
                "from": 2852,
                "to": 2858,
                "label": "EVAL with clause\nmerge([], X117, X117, X118).\nand substitutionT131 -> [],\nT132 -> T157,\nT133 -> T158,\nX117 -> .(T157, T158),\nT137 -> .(T157, T158),\nT138 -> T159,\nX118 -> T159"
            },
            {
                "from": 2852,
                "to": 2859,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2853,
                "to": 2861,
                "label": "BACKTRACK\nfor clause: merge(Xs, [], Xs, Ls)because of non-unification"
            },
            {
                "from": 2858,
                "to": 2860,
                "label": "SUCCESS"
            },
            {
                "from": 2861,
                "to": 2865,
                "label": "PARALLEL"
            },
            {
                "from": 2861,
                "to": 2866,
                "label": "PARALLEL"
            },
            {
                "from": 2865,
                "to": 2874,
                "label": "EVAL with clause\nmerge(.(X149, X150), .(X151, X152), .(X149, X153), .(X154, X155)) :- ','(=<(X149, X151), merge(X150, .(X151, X152), X153, X155)).\nand substitutionX149 -> T189,\nX150 -> T190,\nT131 -> .(T189, T190),\nT132 -> T191,\nX151 -> T191,\nT133 -> T192,\nX152 -> T192,\nX153 -> T196,\nT137 -> .(T189, T196),\nX154 -> T194,\nX155 -> T197,\nT138 -> .(T194, T197),\nT193 -> T196,\nT195 -> T197"
            },
            {
                "from": 2865,
                "to": 2875,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2866,
                "to": 3036,
                "label": "EVAL with clause\nmerge(.(X174, X175), .(X176, X177), .(X176, X178), .(X179, X180)) :- ','(>(X174, X176), merge(.(X174, X175), X177, X178, X180)).\nand substitutionX174 -> T218,\nX175 -> T219,\nT131 -> .(T218, T219),\nT132 -> T220,\nX176 -> T220,\nT133 -> T221,\nX177 -> T221,\nX178 -> T225,\nT137 -> .(T220, T225),\nX179 -> T223,\nX180 -> T226,\nT138 -> .(T223, T226),\nT222 -> T225,\nT224 -> T226"
            },
            {
                "from": 2866,
                "to": 3037,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 2874,
                "to": 2876,
                "label": "IS ERROR"
            },
            {
                "from": 2874,
                "to": 3034,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 2874,
                "to": 3035,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3034,
                "to": 2849,
                "label": "INSTANCE with matching:\nT131 -> T190\nT132 -> T191\nT133 -> T192\nT137 -> T196\nT138 -> T197"
            },
            {
                "from": 3036,
                "to": 3038,
                "label": "IS ERROR"
            },
            {
                "from": 3036,
                "to": 3311,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3036,
                "to": 3312,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3311,
                "to": 3313,
                "label": "CASE"
            },
            {
                "from": 3313,
                "to": 3314,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3314,
                "to": 3315,
                "label": "PARALLEL"
            },
            {
                "from": 3314,
                "to": 3316,
                "label": "PARALLEL"
            },
            {
                "from": 3315,
                "to": 3317,
                "label": "EVAL with clause\nmerge(X195, [], X195, X196).\nand substitutionT218 -> T239,\nT219 -> T240,\nX195 -> .(T239, T240),\nT221 -> [],\nT225 -> .(T239, T240),\nT226 -> T241,\nX196 -> T241"
            },
            {
                "from": 3315,
                "to": 3318,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3316,
                "to": 3320,
                "label": "PARALLEL"
            },
            {
                "from": 3316,
                "to": 3321,
                "label": "PARALLEL"
            },
            {
                "from": 3317,
                "to": 3319,
                "label": "SUCCESS"
            },
            {
                "from": 3320,
                "to": 3332,
                "label": "EVAL with clause\nmerge(.(X225, X226), .(X227, X228), .(X225, X229), .(X230, X231)) :- ','(=<(X225, X227), merge(X226, .(X227, X228), X229, X231)).\nand substitutionT218 -> T270,\nX225 -> T270,\nT219 -> T271,\nX226 -> T271,\nX227 -> T272,\nX228 -> T273,\nT221 -> .(T272, T273),\nX229 -> T277,\nT225 -> .(T270, T277),\nX230 -> T275,\nX231 -> T278,\nT226 -> .(T275, T278),\nT274 -> T277,\nT276 -> T278"
            },
            {
                "from": 3320,
                "to": 3333,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3321,
                "to": 3594,
                "label": "EVAL with clause\nmerge(.(X250, X251), .(X252, X253), .(X252, X254), .(X255, X256)) :- ','(>(X250, X252), merge(.(X250, X251), X253, X254, X256)).\nand substitutionT218 -> T299,\nX250 -> T299,\nT219 -> T300,\nX251 -> T300,\nX252 -> T301,\nX253 -> T302,\nT221 -> .(T301, T302),\nX254 -> T306,\nT225 -> .(T301, T306),\nX255 -> T304,\nX256 -> T307,\nT226 -> .(T304, T307),\nT303 -> T306,\nT305 -> T307"
            },
            {
                "from": 3321,
                "to": 3595,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3332,
                "to": 3334,
                "label": "IS ERROR"
            },
            {
                "from": 3332,
                "to": 3578,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3332,
                "to": 3579,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3578,
                "to": 2849,
                "label": "INSTANCE with matching:\nT131 -> T271\nT132 -> T272\nT133 -> T273\nT137 -> T277\nT138 -> T278"
            },
            {
                "from": 3594,
                "to": 3596,
                "label": "IS ERROR"
            },
            {
                "from": 3594,
                "to": 3600,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3594,
                "to": 3601,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3600,
                "to": 3311,
                "label": "INSTANCE with matching:\nT218 -> T299\nT219 -> T300\nT221 -> T302\nT225 -> T306\nT226 -> T307"
            },
            {
                "from": 3734,
                "to": 3736,
                "label": "IS ERROR"
            },
            {
                "from": 3734,
                "to": 3829,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3734,
                "to": 3830,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3829,
                "to": 3913,
                "label": "CASE"
            },
            {
                "from": 3913,
                "to": 3914,
                "label": "BACKTRACK\nfor clause: merge([], Xs, Xs, Ls)because of non-unification"
            },
            {
                "from": 3914,
                "to": 3915,
                "label": "PARALLEL"
            },
            {
                "from": 3914,
                "to": 3916,
                "label": "PARALLEL"
            },
            {
                "from": 3915,
                "to": 3917,
                "label": "EVAL with clause\nmerge(X296, [], X296, X297).\nand substitutionT322 -> T343,\nT323 -> T344,\nX296 -> .(T343, T344),\nT325 -> [],\nT329 -> .(T343, T344),\nT330 -> T345,\nX297 -> T345"
            },
            {
                "from": 3915,
                "to": 3918,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3916,
                "to": 3920,
                "label": "PARALLEL"
            },
            {
                "from": 3916,
                "to": 3921,
                "label": "PARALLEL"
            },
            {
                "from": 3917,
                "to": 3919,
                "label": "SUCCESS"
            },
            {
                "from": 3920,
                "to": 3922,
                "label": "EVAL with clause\nmerge(.(X326, X327), .(X328, X329), .(X326, X330), .(X331, X332)) :- ','(=<(X326, X328), merge(X327, .(X328, X329), X330, X332)).\nand substitutionT322 -> T374,\nX326 -> T374,\nT323 -> T375,\nX327 -> T375,\nX328 -> T376,\nX329 -> T377,\nT325 -> .(T376, T377),\nX330 -> T381,\nT329 -> .(T374, T381),\nX331 -> T379,\nX332 -> T382,\nT330 -> .(T379, T382),\nT378 -> T381,\nT380 -> T382"
            },
            {
                "from": 3920,
                "to": 3923,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3921,
                "to": 4003,
                "label": "EVAL with clause\nmerge(.(X351, X352), .(X353, X354), .(X353, X355), .(X356, X357)) :- ','(>(X351, X353), merge(.(X351, X352), X354, X355, X357)).\nand substitutionT322 -> T403,\nX351 -> T403,\nT323 -> T404,\nX352 -> T404,\nX353 -> T405,\nX354 -> T406,\nT325 -> .(T405, T406),\nX355 -> T410,\nT329 -> .(T405, T410),\nX356 -> T408,\nX357 -> T411,\nT330 -> .(T408, T411),\nT407 -> T410,\nT409 -> T411"
            },
            {
                "from": 3921,
                "to": 4004,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 3922,
                "to": 3924,
                "label": "IS ERROR"
            },
            {
                "from": 3922,
                "to": 3994,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 3922,
                "to": 3995,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 3994,
                "to": 2849,
                "label": "INSTANCE with matching:\nT131 -> T375\nT132 -> T376\nT133 -> T377\nT137 -> T381\nT138 -> T382"
            },
            {
                "from": 4003,
                "to": 4005,
                "label": "IS ERROR"
            },
            {
                "from": 4003,
                "to": 4044,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4003,
                "to": 4045,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4044,
                "to": 3829,
                "label": "INSTANCE with matching:\nT322 -> T403\nT323 -> T404\nT325 -> T406\nT329 -> T410\nT330 -> T411"
            },
            {
                "from": 4086,
                "to": 4088,
                "label": "SUCCESS"
            },
            {
                "from": 4087,
                "to": 4106,
                "label": "EVAL with clause\nmergesort(X443, X444, .(X445, X446)) :- ','(split(X443, X447, X448, .(X445, X446)), ','(mergesort(X447, X449, X446), ','(mergesort(X448, X450, X446), merge(X449, X450, X444, .(X445, X446))))).\nand substitutionT1 -> T477,\nX443 -> T477,\nT2 -> T483,\nX444 -> T483,\nX445 -> T481,\nX446 -> T482,\nT3 -> .(T481, T482),\nT479 -> T481,\nT480 -> T482,\nT478 -> T483"
            },
            {
                "from": 4087,
                "to": 4107,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4088,
                "to": 4089,
                "label": "EVAL with clause\nmergesort(X376, X377, .(X378, X379)) :- ','(split(X376, X380, X381, .(X378, X379)), ','(mergesort(X380, X382, X379), ','(mergesort(X381, X383, X379), merge(X382, X383, X377, .(X378, X379))))).\nand substitutionT414 -> T420,\nX376 -> .(T420, []),\nT2 -> T426,\nX377 -> T426,\nX378 -> T424,\nX379 -> T425,\nT3 -> .(T424, T425),\nT422 -> T424,\nT423 -> T425,\nT421 -> T426"
            },
            {
                "from": 4088,
                "to": 4090,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4089,
                "to": 4091,
                "label": "CASE"
            },
            {
                "from": 4091,
                "to": 4092,
                "label": "BACKTRACK\nfor clause: split([], [], [], Ls)because of non-unification"
            },
            {
                "from": 4092,
                "to": 4093,
                "label": "ONLY EVAL with clause\nsplit(.(X404, X405), .(X404, X406), X407, .(X408, X409)) :- split(X405, X407, X406, X409).\nand substitutionT420 -> T437,\nX404 -> T437,\nX405 -> [],\nX406 -> X410,\nX380 -> .(T437, X410),\nX381 -> X411,\nX407 -> X411,\nT424 -> T442,\nX408 -> T442,\nT425 -> T440,\nX409 -> T440,\nT439 -> T440,\nT426 -> T441,\nT438 -> T442"
            },
            {
                "from": 4093,
                "to": 4094,
                "label": "SPLIT 1"
            },
            {
                "from": 4093,
                "to": 4095,
                "label": "SPLIT 2\nnew knowledge:\nT444 is ground\nT445 is ground\nreplacements:X411 -> T444,\nX410 -> T445,\nT440 -> T446,\nT441 -> T447,\nT442 -> T448"
            },
            {
                "from": 4094,
                "to": 4096,
                "label": "CASE"
            },
            {
                "from": 4095,
                "to": 4102,
                "label": "SPLIT 1"
            },
            {
                "from": 4095,
                "to": 4103,
                "label": "SPLIT 2\nnew knowledge:\nT437 is ground\nT445 is ground\nT455 is ground\nreplacements:X382 -> T455,\nT446 -> T456,\nT447 -> T457,\nT448 -> T458"
            },
            {
                "from": 4096,
                "to": 4097,
                "label": "PARALLEL"
            },
            {
                "from": 4096,
                "to": 4098,
                "label": "PARALLEL"
            },
            {
                "from": 4097,
                "to": 4099,
                "label": "ONLY EVAL with clause\nsplit([], [], [], X420).\nand substitutionX411 -> [],\nX410 -> [],\nT440 -> T454,\nX420 -> T454"
            },
            {
                "from": 4098,
                "to": 4101,
                "label": "BACKTRACK\nfor clause: split(.(X, Xs), .(X, Ys), Zs, .(H, Ls)) :- split(Xs, Zs, Ys, Ls)because of non-unification"
            },
            {
                "from": 4099,
                "to": 4100,
                "label": "SUCCESS"
            },
            {
                "from": 4102,
                "to": 14,
                "label": "INSTANCE with matching:\nT1 -> .(T437, T445)\nT2 -> X382\nT3 -> T446"
            },
            {
                "from": 4103,
                "to": 4104,
                "label": "SPLIT 1"
            },
            {
                "from": 4103,
                "to": 4105,
                "label": "SPLIT 2\nnew knowledge:\nT444 is ground\nT461 is ground\nreplacements:X383 -> T461,\nT457 -> T462,\nT458 -> T463,\nT456 -> T464"
            },
            {
                "from": 4104,
                "to": 14,
                "label": "INSTANCE with matching:\nT1 -> T444\nT2 -> X383\nT3 -> T456"
            },
            {
                "from": 4105,
                "to": 1718,
                "label": "INSTANCE with matching:\nT49 -> T455\nT61 -> T461\nT62 -> T462\nT63 -> T463\nT64 -> T464"
            },
            {
                "from": 4106,
                "to": 4108,
                "label": "CASE"
            },
            {
                "from": 4108,
                "to": 4109,
                "label": "PARALLEL"
            },
            {
                "from": 4108,
                "to": 4110,
                "label": "PARALLEL"
            },
            {
                "from": 4109,
                "to": 4111,
                "label": "EVAL with clause\nsplit([], [], [], X455).\nand substitutionT477 -> [],\nX447 -> [],\nX448 -> [],\nT481 -> T496,\nT482 -> T494,\nX455 -> .(T496, T494),\nT493 -> T494,\nT483 -> T495,\nT492 -> T496"
            },
            {
                "from": 4109,
                "to": 4112,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4110,
                "to": 4113,
                "label": "EVAL with clause\nsplit(.(X477, X478), .(X477, X479), X480, .(X481, X482)) :- split(X478, X480, X479, X482).\nand substitutionX477 -> T510,\nX478 -> T511,\nT477 -> .(T510, T511),\nX479 -> X483,\nX447 -> .(T510, X483),\nX448 -> X484,\nX480 -> X484,\nT481 -> T516,\nX481 -> T516,\nT482 -> T514,\nX482 -> T514,\nT513 -> T514,\nT483 -> T515,\nT512 -> T516"
            },
            {
                "from": 4110,
                "to": 4114,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4111,
                "to": 1501,
                "label": "INSTANCE with matching:\nX15 -> X449\nT41 -> T494\nX16 -> X450\nT42 -> T495\nT43 -> T496"
            },
            {
                "from": 4113,
                "to": 4115,
                "label": "SPLIT 1"
            },
            {
                "from": 4113,
                "to": 4116,
                "label": "SPLIT 2\nnew knowledge:\nT511 is ground\nT519 is ground\nT520 is ground\nreplacements:X484 -> T519,\nX483 -> T520,\nT514 -> T521,\nT515 -> T522,\nT516 -> T523,\nT2 -> T524,\nT3 -> T525"
            },
            {
                "from": 4115,
                "to": 4117,
                "label": "CASE"
            },
            {
                "from": 4116,
                "to": 4095,
                "label": "INSTANCE with matching:\nT437 -> T510\nT445 -> T520\nX382 -> X449\nT446 -> T521\nT444 -> T519\nX383 -> X450\nT447 -> T522\nT448 -> T523"
            },
            {
                "from": 4117,
                "to": 4118,
                "label": "PARALLEL"
            },
            {
                "from": 4117,
                "to": 4119,
                "label": "PARALLEL"
            },
            {
                "from": 4118,
                "to": 4120,
                "label": "EVAL with clause\nsplit([], [], [], X493).\nand substitutionT511 -> [],\nX484 -> [],\nX483 -> [],\nT514 -> T532,\nX493 -> T532"
            },
            {
                "from": 4118,
                "to": 4121,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4119,
                "to": 4123,
                "label": "EVAL with clause\nsplit(.(X510, X511), .(X510, X512), X513, .(X514, X515)) :- split(X511, X513, X512, X515).\nand substitutionX510 -> T541,\nX511 -> T542,\nT511 -> .(T541, T542),\nX512 -> X516,\nX484 -> .(T541, X516),\nX483 -> X517,\nX513 -> X517,\nX514 -> T543,\nX515 -> T545,\nT514 -> .(T543, T545),\nT544 -> T545"
            },
            {
                "from": 4119,
                "to": 4124,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4120,
                "to": 4122,
                "label": "SUCCESS"
            },
            {
                "from": 4123,
                "to": 4125,
                "label": "CASE"
            },
            {
                "from": 4125,
                "to": 4126,
                "label": "PARALLEL"
            },
            {
                "from": 4125,
                "to": 4127,
                "label": "PARALLEL"
            },
            {
                "from": 4126,
                "to": 4128,
                "label": "EVAL with clause\nsplit([], [], [], X524).\nand substitutionT542 -> [],\nX517 -> [],\nX516 -> [],\nT545 -> T552,\nX524 -> T552"
            },
            {
                "from": 4126,
                "to": 4129,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4127,
                "to": 4131,
                "label": "EVAL with clause\nsplit(.(X541, X542), .(X541, X543), X544, .(X545, X546)) :- split(X542, X544, X543, X546).\nand substitutionX541 -> T561,\nX542 -> T562,\nT542 -> .(T561, T562),\nX543 -> X547,\nX517 -> .(T561, X547),\nX516 -> X548,\nX544 -> X548,\nX545 -> T563,\nX546 -> T565,\nT545 -> .(T563, T565),\nT564 -> T565"
            },
            {
                "from": 4127,
                "to": 4132,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4128,
                "to": 4130,
                "label": "SUCCESS"
            },
            {
                "from": 4131,
                "to": 4123,
                "label": "INSTANCE with matching:\nT542 -> T562\nX517 -> X548\nX516 -> X547\nT545 -> T565"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(440)
Obligation:
Triples:

mergeF(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) :- mergeF(X2, X3, X4, X5, X7).
mergeF(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) :- mergeG(X1, X2, X4, X5, X7).
mergeG(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) :- mergeF(X2, X3, X4, X5, X7).
mergeG(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) :- mergeG(X1, X2, X4, X5, X7).
mergeH(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) :- mergeF(X2, X3, X4, X5, X7).
mergeH(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) :- mergeH(X1, X2, X4, X5, X7).
mergeI(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) :- mergeF(X2, X3, X4, X5, X7).
mergeI(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) :- mergeH(X1, X2, X4, X5, X7).
pB(X1, X2, X3, X4, X5) :- mergesortA([], X1, X2).
pB(X1, X2, X3, X4, X5) :- ','(mergesortcA([], X1, X2), mergesortA([], X3, X2)).
pB(X1, X2, X3, X4, X5) :- ','(mergesortcA([], X1, X2), ','(mergesortcA([], X3, X2), mergeI(X1, X3, X4, X5, X2))).
pC(X1, X2, X3, X4, X5, X6, X7, X8) :- mergesortA(.(X1, X2), X3, X4).
pC(X1, X2, X3, X4, X5, X6, X7, X8) :- ','(mergesortcA(.(X1, X2), X3, X4), mergesortA(X5, X6, X4)).
pC(X1, X2, X3, X4, X5, X6, X7, X8) :- ','(mergesortcA(.(X1, X2), X3, X4), ','(mergesortcA(X5, X6, X4), mergeI(X3, X6, X7, X8, X4))).
splitJ(.(X1, X2), .(X1, X3), X4, .(X5, X6)) :- splitJ(X2, X4, X3, X6).
mergesortA([], X1, .(X2, X3)) :- pB(X4, X3, X5, X1, X2).
mergesortA(.(X1, []), X2, .(X3, X4)) :- ','(splitcD(X5, X6, X4), pC(X1, X6, X7, X4, X5, X8, X2, X3)).
mergesortA([], X1, .(X2, X3)) :- pB(X4, X3, X5, X1, X2).
mergesortA(.(X1, .(X2, X3)), X4, .(X5, .(X6, X7))) :- splitJ(X3, X8, X9, X7).
mergesortA(.(X1, X2), X3, .(X4, X5)) :- ','(splitcE(X2, X6, X7, X5), pC(X1, X7, X8, X5, X6, X9, X3, X4)).

Clauses:

mergesortcA([], [], X1).
mergesortcA([], X1, .(X2, X3)) :- qcB(X4, X3, X5, X1, X2).
mergesortcA(.(X1, []), .(X1, []), X2).
mergesortcA(.(X1, []), X2, .(X3, X4)) :- ','(splitcD(X5, X6, X4), qcC(X1, X6, X7, X4, X5, X8, X2, X3)).
mergesortcA([], X1, .(X2, X3)) :- qcB(X4, X3, X5, X1, X2).
mergesortcA(.(X1, X2), X3, .(X4, X5)) :- ','(splitcE(X2, X6, X7, X5), qcC(X1, X7, X8, X5, X6, X9, X3, X4)).
mergecF([], X1, X2, .(X1, X2), X3).
mergecF(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) :- mergecF(X2, X3, X4, X5, X7).
mergecF(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) :- mergecG(X1, X2, X4, X5, X7).
mergecG(X1, X2, [], .(X1, X2), X3).
mergecG(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) :- mergecF(X2, X3, X4, X5, X7).
mergecG(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) :- mergecG(X1, X2, X4, X5, X7).
mergecH(X1, X2, [], .(X1, X2), X3).
mergecH(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) :- mergecF(X2, X3, X4, X5, X7).
mergecH(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) :- mergecH(X1, X2, X4, X5, X7).
mergecI([], X1, X1, X2, X3).
mergecI(X1, [], X1, X2, X3).
mergecI(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) :- mergecF(X2, X3, X4, X5, X7).
mergecI(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) :- mergecH(X1, X2, X4, X5, X7).
qcB(X1, X2, X3, X4, X5) :- ','(mergesortcA([], X1, X2), ','(mergesortcA([], X3, X2), mergecI(X1, X3, X4, X5, X2))).
qcC(X1, X2, X3, X4, X5, X6, X7, X8) :- ','(mergesortcA(.(X1, X2), X3, X4), ','(mergesortcA(X5, X6, X4), mergecI(X3, X6, X7, X8, X4))).
splitcJ([], [], [], X1).
splitcJ(.(X1, X2), .(X1, X3), X4, .(X5, X6)) :- splitcJ(X2, X4, X3, X6).
splitcD([], [], X1).
splitcE([], [], [], X1).
splitcE(.(X1, X2), .(X1, X3), X4, .(X5, X6)) :- splitcJ(X2, X4, X3, X6).

Afs:

mergesortA(x1, x2, x3)  =  mergesortA(x1)


----------------------------------------

(441) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesortA_in_3: (b,f,f)

pB_in_5: (f,f,f,f,f)

pC_in_8: (f,b,f,f,b,f,f,f)

splitJ_in_4: (b,f,f,f)

splitcE_in_4: (b,f,f,f)

splitcJ_in_4: (b,f,f,f)

mergesortcA_in_3: (b,f,f)

qcB_in_5: (f,f,f,f,f)

qcC_in_8: (f,b,f,f,b,f,f,f)

mergecI_in_5: (b,b,f,f,f)

mergecF_in_5: (b,f,b,f,f)

mergecG_in_5: (f,b,b,f,f)

mergecH_in_5: (f,b,b,f,f)

mergeI_in_5: (b,b,f,f,f)

mergeF_in_5: (b,f,b,f,f)

mergeG_in_5: (f,b,b,f,f)

mergeH_in_5: (f,b,b,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> U20_GAA(X1, X2, X3, pB_in_aaaaa(X4, X3, X5, X1, X2))
   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> PB_IN_AAAAA(X4, X3, X5, X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U9_AAAAA(X1, X2, X3, X4, X5, mergesortA_in_gaa([], X1, X2))
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> MERGESORTA_IN_GAA([], X1, X2)
   MERGESORTA_IN_GAA(.(X1, []), X2, .(X3, X4)) -> U21_GAA(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U21_GAA(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U22_GAA(X1, X2, X3, X4, pC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   U21_GAA(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> PC_IN_AGAAGAAA(X1, X6, X7, X4, X5, X8, X2, X3)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> U14_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortA_in_gaa(.(X1, X2), X3, X4))
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> MERGESORTA_IN_GAA(.(X1, X2), X3, X4)
   MERGESORTA_IN_GAA(.(X1, .(X2, X3)), X4, .(X5, .(X6, X7))) -> U23_GAA(X1, X2, X3, X4, X5, X6, X7, splitJ_in_gaaa(X3, X8, X9, X7))
   MERGESORTA_IN_GAA(.(X1, .(X2, X3)), X4, .(X5, .(X6, X7))) -> SPLITJ_IN_GAAA(X3, X8, X9, X7)
   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U19_GAAA(X1, X2, X3, X4, X5, X6, splitJ_in_gaaa(X2, X4, X3, X6))
   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> SPLITJ_IN_GAAA(X2, X4, X3, X6)
   MERGESORTA_IN_GAA(.(X1, X2), X3, .(X4, X5)) -> U24_GAA(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U24_GAA(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U25_GAA(X1, X2, X3, X4, X5, pC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U24_GAA(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> PC_IN_AGAAGAAA(X1, X7, X8, X5, X6, X9, X3, X4)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U16_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortA_in_gaa(X5, X6, X4))
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> MERGESORTA_IN_GAA(X5, X6, X4)
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U18_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergeI_in_ggaaa(X3, X6, X7, X8, X4))
   U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> MERGEI_IN_GGAAA(X3, X6, X7, X8, X4)
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U7_GGAAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U1_GAGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U2_GAGAA(X1, X2, X3, X4, X5, X6, X7, mergeG_in_aggaa(X1, X2, X4, X5, X7))
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U3_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U4_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeG_in_aggaa(X1, X2, X4, X5, X7))
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U8_GGAAA(X1, X2, X3, X4, X5, X6, X7, mergeH_in_aggaa(X1, X2, X4, X5, X7))
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U5_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U6_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeH_in_aggaa(X1, X2, X4, X5, X7))
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U11_AAAAA(X1, X2, X3, X4, X5, mergesortA_in_gaa([], X3, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> MERGESORTA_IN_GAA([], X3, X2)
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U13_AAAAA(X1, X2, X3, X4, X5, mergeI_in_ggaaa(X1, X3, X4, X5, X2))
   U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> MERGEI_IN_GGAAA(X1, X3, X4, X5, X2)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
mergesortA_in_gaa(x1, x2, x3)  =  mergesortA_in_gaa(x1)

[]  =  []

pB_in_aaaaa(x1, x2, x3, x4, x5)  =  pB_in_aaaaa

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitJ_in_gaaa(x1, x2, x3, x4)  =  splitJ_in_gaaa(x1)

pC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  pC_in_agaagaaa(x2, x5)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

mergeI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergeI_in_ggaaa(x1, x2)

mergeF_in_gagaa(x1, x2, x3, x4, x5)  =  mergeF_in_gagaa(x1, x3)

mergeG_in_aggaa(x1, x2, x3, x4, x5)  =  mergeG_in_aggaa(x2, x3)

mergeH_in_aggaa(x1, x2, x3, x4, x5)  =  mergeH_in_aggaa(x2, x3)

MERGESORTA_IN_GAA(x1, x2, x3)  =  MERGESORTA_IN_GAA(x1)

U20_GAA(x1, x2, x3, x4)  =  U20_GAA(x4)

PB_IN_AAAAA(x1, x2, x3, x4, x5)  =  PB_IN_AAAAA

U9_AAAAA(x1, x2, x3, x4, x5, x6)  =  U9_AAAAA(x6)

U21_GAA(x1, x2, x3, x4, x5)  =  U21_GAA(x5)

U22_GAA(x1, x2, x3, x4, x5)  =  U22_GAA(x5)

PC_IN_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  PC_IN_AGAAGAAA(x2, x5)

U14_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U14_AGAAGAAA(x2, x5, x9)

U23_GAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U23_GAA(x3, x8)

SPLITJ_IN_GAAA(x1, x2, x3, x4)  =  SPLITJ_IN_GAAA(x1)

U19_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U19_GAAA(x2, x7)

U24_GAA(x1, x2, x3, x4, x5, x6)  =  U24_GAA(x2, x6)

U25_GAA(x1, x2, x3, x4, x5, x6)  =  U25_GAA(x2, x6)

U15_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U15_AGAAGAAA(x2, x5, x9)

U16_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U16_AGAAGAAA(x2, x5, x9)

U17_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U17_AGAAGAAA(x2, x3, x5, x9)

U18_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U18_AGAAGAAA(x2, x5, x9)

MERGEI_IN_GGAAA(x1, x2, x3, x4, x5)  =  MERGEI_IN_GGAAA(x1, x2)

U7_GGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAAA(x2, x4, x8)

MERGEF_IN_GAGAA(x1, x2, x3, x4, x5)  =  MERGEF_IN_GAGAA(x1, x3)

U1_GAGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U1_GAGAA(x2, x4, x8)

U2_GAGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U2_GAGAA(x2, x4, x8)

MERGEG_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEG_IN_AGGAA(x2, x3)

U3_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U3_AGGAA(x2, x4, x8)

U4_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U4_AGGAA(x2, x4, x8)

U8_GGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAAA(x2, x4, x8)

MERGEH_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEH_IN_AGGAA(x2, x3)

U5_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U5_AGGAA(x2, x4, x8)

U6_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_AGGAA(x2, x4, x8)

U10_AAAAA(x1, x2, x3, x4, x5, x6)  =  U10_AAAAA(x6)

U11_AAAAA(x1, x2, x3, x4, x5, x6)  =  U11_AAAAA(x6)

U12_AAAAA(x1, x2, x3, x4, x5, x6)  =  U12_AAAAA(x1, x6)

U13_AAAAA(x1, x2, x3, x4, x5, x6)  =  U13_AAAAA(x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(442)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> U20_GAA(X1, X2, X3, pB_in_aaaaa(X4, X3, X5, X1, X2))
   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> PB_IN_AAAAA(X4, X3, X5, X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U9_AAAAA(X1, X2, X3, X4, X5, mergesortA_in_gaa([], X1, X2))
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> MERGESORTA_IN_GAA([], X1, X2)
   MERGESORTA_IN_GAA(.(X1, []), X2, .(X3, X4)) -> U21_GAA(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U21_GAA(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U22_GAA(X1, X2, X3, X4, pC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   U21_GAA(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> PC_IN_AGAAGAAA(X1, X6, X7, X4, X5, X8, X2, X3)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> U14_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortA_in_gaa(.(X1, X2), X3, X4))
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> MERGESORTA_IN_GAA(.(X1, X2), X3, X4)
   MERGESORTA_IN_GAA(.(X1, .(X2, X3)), X4, .(X5, .(X6, X7))) -> U23_GAA(X1, X2, X3, X4, X5, X6, X7, splitJ_in_gaaa(X3, X8, X9, X7))
   MERGESORTA_IN_GAA(.(X1, .(X2, X3)), X4, .(X5, .(X6, X7))) -> SPLITJ_IN_GAAA(X3, X8, X9, X7)
   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U19_GAAA(X1, X2, X3, X4, X5, X6, splitJ_in_gaaa(X2, X4, X3, X6))
   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> SPLITJ_IN_GAAA(X2, X4, X3, X6)
   MERGESORTA_IN_GAA(.(X1, X2), X3, .(X4, X5)) -> U24_GAA(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U24_GAA(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U25_GAA(X1, X2, X3, X4, X5, pC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U24_GAA(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> PC_IN_AGAAGAAA(X1, X7, X8, X5, X6, X9, X3, X4)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U16_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortA_in_gaa(X5, X6, X4))
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> MERGESORTA_IN_GAA(X5, X6, X4)
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U18_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergeI_in_ggaaa(X3, X6, X7, X8, X4))
   U17_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> MERGEI_IN_GGAAA(X3, X6, X7, X8, X4)
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U7_GGAAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U1_GAGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U2_GAGAA(X1, X2, X3, X4, X5, X6, X7, mergeG_in_aggaa(X1, X2, X4, X5, X7))
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U3_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U4_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeG_in_aggaa(X1, X2, X4, X5, X7))
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U8_GGAAA(X1, X2, X3, X4, X5, X6, X7, mergeH_in_aggaa(X1, X2, X4, X5, X7))
   MERGEI_IN_GGAAA(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U5_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeF_in_gagaa(X2, X3, X4, X5, X7))
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U6_AGGAA(X1, X2, X3, X4, X5, X6, X7, mergeH_in_aggaa(X1, X2, X4, X5, X7))
   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U11_AAAAA(X1, X2, X3, X4, X5, mergesortA_in_gaa([], X3, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> MERGESORTA_IN_GAA([], X3, X2)
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U13_AAAAA(X1, X2, X3, X4, X5, mergeI_in_ggaaa(X1, X3, X4, X5, X2))
   U12_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> MERGEI_IN_GGAAA(X1, X3, X4, X5, X2)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
mergesortA_in_gaa(x1, x2, x3)  =  mergesortA_in_gaa(x1)

[]  =  []

pB_in_aaaaa(x1, x2, x3, x4, x5)  =  pB_in_aaaaa

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitJ_in_gaaa(x1, x2, x3, x4)  =  splitJ_in_gaaa(x1)

pC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  pC_in_agaagaaa(x2, x5)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

mergeI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergeI_in_ggaaa(x1, x2)

mergeF_in_gagaa(x1, x2, x3, x4, x5)  =  mergeF_in_gagaa(x1, x3)

mergeG_in_aggaa(x1, x2, x3, x4, x5)  =  mergeG_in_aggaa(x2, x3)

mergeH_in_aggaa(x1, x2, x3, x4, x5)  =  mergeH_in_aggaa(x2, x3)

MERGESORTA_IN_GAA(x1, x2, x3)  =  MERGESORTA_IN_GAA(x1)

U20_GAA(x1, x2, x3, x4)  =  U20_GAA(x4)

PB_IN_AAAAA(x1, x2, x3, x4, x5)  =  PB_IN_AAAAA

U9_AAAAA(x1, x2, x3, x4, x5, x6)  =  U9_AAAAA(x6)

U21_GAA(x1, x2, x3, x4, x5)  =  U21_GAA(x5)

U22_GAA(x1, x2, x3, x4, x5)  =  U22_GAA(x5)

PC_IN_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  PC_IN_AGAAGAAA(x2, x5)

U14_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U14_AGAAGAAA(x2, x5, x9)

U23_GAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U23_GAA(x3, x8)

SPLITJ_IN_GAAA(x1, x2, x3, x4)  =  SPLITJ_IN_GAAA(x1)

U19_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U19_GAAA(x2, x7)

U24_GAA(x1, x2, x3, x4, x5, x6)  =  U24_GAA(x2, x6)

U25_GAA(x1, x2, x3, x4, x5, x6)  =  U25_GAA(x2, x6)

U15_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U15_AGAAGAAA(x2, x5, x9)

U16_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U16_AGAAGAAA(x2, x5, x9)

U17_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U17_AGAAGAAA(x2, x3, x5, x9)

U18_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U18_AGAAGAAA(x2, x5, x9)

MERGEI_IN_GGAAA(x1, x2, x3, x4, x5)  =  MERGEI_IN_GGAAA(x1, x2)

U7_GGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAAA(x2, x4, x8)

MERGEF_IN_GAGAA(x1, x2, x3, x4, x5)  =  MERGEF_IN_GAGAA(x1, x3)

U1_GAGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U1_GAGAA(x2, x4, x8)

U2_GAGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U2_GAGAA(x2, x4, x8)

MERGEG_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEG_IN_AGGAA(x2, x3)

U3_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U3_AGGAA(x2, x4, x8)

U4_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U4_AGGAA(x2, x4, x8)

U8_GGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U8_GGAAA(x2, x4, x8)

MERGEH_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEH_IN_AGGAA(x2, x3)

U5_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U5_AGGAA(x2, x4, x8)

U6_AGGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U6_AGGAA(x2, x4, x8)

U10_AAAAA(x1, x2, x3, x4, x5, x6)  =  U10_AAAAA(x6)

U11_AAAAA(x1, x2, x3, x4, x5, x6)  =  U11_AAAAA(x6)

U12_AAAAA(x1, x2, x3, x4, x5, x6)  =  U12_AAAAA(x1, x6)

U13_AAAAA(x1, x2, x3, x4, x5, x6)  =  U13_AAAAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(443) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 27 less nodes.
----------------------------------------

(444)
Complex Obligation (AND)

----------------------------------------

(445)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

MERGEF_IN_GAGAA(x1, x2, x3, x4, x5)  =  MERGEF_IN_GAGAA(x1, x3)

MERGEG_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEG_IN_AGGAA(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(446) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(447)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEF_IN_GAGAA(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> MERGEF_IN_GAGAA(X2, X3, X4, X5, X7)
   MERGEG_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEG_IN_AGGAA(X1, X2, X4, X5, X7)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

MERGEF_IN_GAGAA(x1, x2, x3, x4, x5)  =  MERGEF_IN_GAGAA(x1, x3)

MERGEG_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEG_IN_AGGAA(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(448) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(449)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEF_IN_GAGAA(.(X2), X4) -> MERGEG_IN_AGGAA(X2, X4)
   MERGEG_IN_AGGAA(X2, .(X4)) -> MERGEF_IN_GAGAA(X2, X4)
   MERGEF_IN_GAGAA(.(X2), X4) -> MERGEF_IN_GAGAA(X2, X4)
   MERGEG_IN_AGGAA(X2, .(X4)) -> MERGEG_IN_AGGAA(X2, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(450) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MERGEG_IN_AGGAA(X2, .(X4)) -> MERGEF_IN_GAGAA(X2, X4)
The graph contains the following edges 1 >= 1, 2 > 2


*MERGEG_IN_AGGAA(X2, .(X4)) -> MERGEG_IN_AGGAA(X2, X4)
The graph contains the following edges 1 >= 1, 2 > 2


*MERGEF_IN_GAGAA(.(X2), X4) -> MERGEF_IN_GAGAA(X2, X4)
The graph contains the following edges 1 > 1, 2 >= 2


*MERGEF_IN_GAGAA(.(X2), X4) -> MERGEG_IN_AGGAA(X2, X4)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(451)
YES

----------------------------------------

(452)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

MERGEH_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEH_IN_AGGAA(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(453) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(454)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEH_IN_AGGAA(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> MERGEH_IN_AGGAA(X1, X2, X4, X5, X7)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

MERGEH_IN_AGGAA(x1, x2, x3, x4, x5)  =  MERGEH_IN_AGGAA(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(455) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(456)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEH_IN_AGGAA(X2, .(X4)) -> MERGEH_IN_AGGAA(X2, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(457) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MERGEH_IN_AGGAA(X2, .(X4)) -> MERGEH_IN_AGGAA(X2, X4)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(458)
YES

----------------------------------------

(459)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> SPLITJ_IN_GAAA(X2, X4, X3, X6)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

SPLITJ_IN_GAAA(x1, x2, x3, x4)  =  SPLITJ_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(460) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(461)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITJ_IN_GAAA(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> SPLITJ_IN_GAAA(X2, X4, X3, X6)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

SPLITJ_IN_GAAA(x1, x2, x3, x4)  =  SPLITJ_IN_GAAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(462) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(463)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLITJ_IN_GAAA(.(X2)) -> SPLITJ_IN_GAAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(464) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLITJ_IN_GAAA(.(X2)) -> SPLITJ_IN_GAAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(465)
YES

----------------------------------------

(466)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> PB_IN_AAAAA(X4, X3, X5, X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> MERGESORTA_IN_GAA([], X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> MERGESORTA_IN_GAA([], X3, X2)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

MERGESORTA_IN_GAA(x1, x2, x3)  =  MERGESORTA_IN_GAA(x1)

PB_IN_AAAAA(x1, x2, x3, x4, x5)  =  PB_IN_AAAAA

U10_AAAAA(x1, x2, x3, x4, x5, x6)  =  U10_AAAAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(467) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(468)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([], X1, .(X2, X3)) -> PB_IN_AAAAA(X4, X3, X5, X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> MERGESORTA_IN_GAA([], X1, X2)
   PB_IN_AAAAA(X1, X2, X3, X4, X5) -> U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   U10_AAAAA(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> MERGESORTA_IN_GAA([], X3, X2)

The TRS R consists of the following rules:

   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

MERGESORTA_IN_GAA(x1, x2, x3)  =  MERGESORTA_IN_GAA(x1)

PB_IN_AAAAA(x1, x2, x3, x4, x5)  =  PB_IN_AAAAA

U10_AAAAA(x1, x2, x3, x4, x5, x6)  =  U10_AAAAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(469) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(470)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([]) -> PB_IN_AAAAA
   PB_IN_AAAAA -> MERGESORTA_IN_GAA([])
   PB_IN_AAAAA -> U10_AAAAA(mergesortcA_in_gaa([]))
   U10_AAAAA(mergesortcA_out_gaa([], X1)) -> MERGESORTA_IN_GAA([])

The TRS R consists of the following rules:

   mergesortcA_in_gaa([]) -> mergesortcA_out_gaa([], [])
   mergesortcA_in_gaa([]) -> U27_gaa(qcB_in_aaaaa)
   U27_gaa(qcB_out_aaaaa(X4, X5, X1)) -> mergesortcA_out_gaa([], X1)
   qcB_in_aaaaa -> U40_aaaaa(mergesortcA_in_gaa([]))
   U40_aaaaa(mergesortcA_out_gaa([], X1)) -> U41_aaaaa(X1, mergesortcA_in_gaa([]))
   U41_aaaaa(X1, mergesortcA_out_gaa([], X3)) -> U42_aaaaa(X1, X3, mergecI_in_ggaaa(X1, X3))
   U42_aaaaa(X1, X3, mergecI_out_ggaaa(X1, X3, X4)) -> qcB_out_aaaaa(X1, X3, X4)
   mergecI_in_ggaaa([], X1) -> mergecI_out_ggaaa([], X1, X1)
   mergecI_in_ggaaa(X1, []) -> mergecI_out_ggaaa(X1, [], X1)
   mergecI_in_ggaaa(.(X2), .(X4)) -> U38_ggaaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecI_in_ggaaa(.(X2), .(X4)) -> U39_ggaaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U38_ggaaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecI_out_ggaaa(.(X2), .(X4), .(X5))
   U39_ggaaa(X2, X4, mergecH_out_aggaa(X2, X4, X5)) -> mergecI_out_ggaaa(.(X2), .(X4), .(X5))
   mergecF_in_gagaa([], X2) -> mergecF_out_gagaa([], X2, .(X2))
   mergecF_in_gagaa(.(X2), X4) -> U32_gagaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecF_in_gagaa(.(X2), X4) -> U33_gagaa(X2, X4, mergecG_in_aggaa(X2, X4))
   mergecH_in_aggaa(X2, []) -> mergecH_out_aggaa(X2, [], .(X2))
   mergecH_in_aggaa(X2, .(X4)) -> U36_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecH_in_aggaa(X2, .(X4)) -> U37_aggaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U32_gagaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U33_gagaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U36_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   U37_aggaa(X2, X4, mergecH_out_aggaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   mergecG_in_aggaa(X2, []) -> mergecG_out_aggaa(X2, [], .(X2))
   mergecG_in_aggaa(X2, .(X4)) -> U34_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecG_in_aggaa(X2, .(X4)) -> U35_aggaa(X2, X4, mergecG_in_aggaa(X2, X4))
   U34_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))
   U35_aggaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))

The set Q consists of the following terms:

   mergesortcA_in_gaa(x0)
   U27_gaa(x0)
   qcB_in_aaaaa
   U40_aaaaa(x0)
   U41_aaaaa(x0, x1)
   U42_aaaaa(x0, x1, x2)
   mergecI_in_ggaaa(x0, x1)
   U38_ggaaa(x0, x1, x2)
   U39_ggaaa(x0, x1, x2)
   mergecF_in_gagaa(x0, x1)
   mergecH_in_aggaa(x0, x1)
   U32_gagaa(x0, x1, x2)
   U33_gagaa(x0, x1, x2)
   U36_aggaa(x0, x1, x2)
   U37_aggaa(x0, x1, x2)
   mergecG_in_aggaa(x0, x1)
   U34_aggaa(x0, x1, x2)
   U35_aggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(471) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U39_ggaaa(X2, X4, mergecH_out_aggaa(X2, X4, X5)) -> mergecI_out_ggaaa(.(X2), .(X4), .(X5))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2
   POL(MERGESORTA_IN_GAA(x_1)) = x_1
   POL(PB_IN_AAAAA) = 0
   POL(U10_AAAAA(x_1)) = 2*x_1
   POL(U27_gaa(x_1)) = 2*x_1
   POL(U32_gagaa(x_1, x_2, x_3)) = 2
   POL(U33_gagaa(x_1, x_2, x_3)) = 1
   POL(U34_aggaa(x_1, x_2, x_3)) = 1
   POL(U35_aggaa(x_1, x_2, x_3)) = 2
   POL(U36_aggaa(x_1, x_2, x_3)) = 2
   POL(U37_aggaa(x_1, x_2, x_3)) = x_3
   POL(U38_ggaaa(x_1, x_2, x_3)) = 2 + x_3
   POL(U39_ggaaa(x_1, x_2, x_3)) = 2*x_3
   POL(U40_aaaaa(x_1)) = x_1
   POL(U41_aaaaa(x_1, x_2)) = 2*x_1 + x_2
   POL(U42_aaaaa(x_1, x_2, x_3)) = 2*x_3
   POL([]) = 0
   POL(mergecF_in_gagaa(x_1, x_2)) = 2
   POL(mergecF_out_gagaa(x_1, x_2, x_3)) = 0
   POL(mergecG_in_aggaa(x_1, x_2)) = 2 + 2*x_2
   POL(mergecG_out_aggaa(x_1, x_2, x_3)) = 0
   POL(mergecH_in_aggaa(x_1, x_2)) = 2
   POL(mergecH_out_aggaa(x_1, x_2, x_3)) = 2
   POL(mergecI_in_ggaaa(x_1, x_2)) = x_1 + x_2
   POL(mergecI_out_ggaaa(x_1, x_2, x_3)) = x_3
   POL(mergesortcA_in_gaa(x_1)) = 0
   POL(mergesortcA_out_gaa(x_1, x_2)) = 2*x_2
   POL(qcB_in_aaaaa) = 0
   POL(qcB_out_aaaaa(x_1, x_2, x_3)) = 2*x_3


----------------------------------------

(472)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([]) -> PB_IN_AAAAA
   PB_IN_AAAAA -> MERGESORTA_IN_GAA([])
   PB_IN_AAAAA -> U10_AAAAA(mergesortcA_in_gaa([]))
   U10_AAAAA(mergesortcA_out_gaa([], X1)) -> MERGESORTA_IN_GAA([])

The TRS R consists of the following rules:

   mergesortcA_in_gaa([]) -> mergesortcA_out_gaa([], [])
   mergesortcA_in_gaa([]) -> U27_gaa(qcB_in_aaaaa)
   U27_gaa(qcB_out_aaaaa(X4, X5, X1)) -> mergesortcA_out_gaa([], X1)
   qcB_in_aaaaa -> U40_aaaaa(mergesortcA_in_gaa([]))
   U40_aaaaa(mergesortcA_out_gaa([], X1)) -> U41_aaaaa(X1, mergesortcA_in_gaa([]))
   U41_aaaaa(X1, mergesortcA_out_gaa([], X3)) -> U42_aaaaa(X1, X3, mergecI_in_ggaaa(X1, X3))
   U42_aaaaa(X1, X3, mergecI_out_ggaaa(X1, X3, X4)) -> qcB_out_aaaaa(X1, X3, X4)
   mergecI_in_ggaaa([], X1) -> mergecI_out_ggaaa([], X1, X1)
   mergecI_in_ggaaa(X1, []) -> mergecI_out_ggaaa(X1, [], X1)
   mergecI_in_ggaaa(.(X2), .(X4)) -> U38_ggaaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecI_in_ggaaa(.(X2), .(X4)) -> U39_ggaaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U38_ggaaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecI_out_ggaaa(.(X2), .(X4), .(X5))
   mergecF_in_gagaa([], X2) -> mergecF_out_gagaa([], X2, .(X2))
   mergecF_in_gagaa(.(X2), X4) -> U32_gagaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecF_in_gagaa(.(X2), X4) -> U33_gagaa(X2, X4, mergecG_in_aggaa(X2, X4))
   mergecH_in_aggaa(X2, []) -> mergecH_out_aggaa(X2, [], .(X2))
   mergecH_in_aggaa(X2, .(X4)) -> U36_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecH_in_aggaa(X2, .(X4)) -> U37_aggaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U32_gagaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U33_gagaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U36_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   U37_aggaa(X2, X4, mergecH_out_aggaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   mergecG_in_aggaa(X2, []) -> mergecG_out_aggaa(X2, [], .(X2))
   mergecG_in_aggaa(X2, .(X4)) -> U34_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecG_in_aggaa(X2, .(X4)) -> U35_aggaa(X2, X4, mergecG_in_aggaa(X2, X4))
   U34_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))
   U35_aggaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))

The set Q consists of the following terms:

   mergesortcA_in_gaa(x0)
   U27_gaa(x0)
   qcB_in_aaaaa
   U40_aaaaa(x0)
   U41_aaaaa(x0, x1)
   U42_aaaaa(x0, x1, x2)
   mergecI_in_ggaaa(x0, x1)
   U38_ggaaa(x0, x1, x2)
   U39_ggaaa(x0, x1, x2)
   mergecF_in_gagaa(x0, x1)
   mergecH_in_aggaa(x0, x1)
   U32_gagaa(x0, x1, x2)
   U33_gagaa(x0, x1, x2)
   U36_aggaa(x0, x1, x2)
   U37_aggaa(x0, x1, x2)
   mergecG_in_aggaa(x0, x1)
   U34_aggaa(x0, x1, x2)
   U35_aggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(473) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mergecI_in_ggaaa(.(X2), .(X4)) -> U38_ggaaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecI_in_ggaaa(.(X2), .(X4)) -> U39_ggaaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U38_ggaaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecI_out_ggaaa(.(X2), .(X4), .(X5))

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1)) = 2
   POL(MERGESORTA_IN_GAA(x_1)) = x_1
   POL(PB_IN_AAAAA) = 0
   POL(U10_AAAAA(x_1)) = 2*x_1
   POL(U27_gaa(x_1)) = x_1
   POL(U32_gagaa(x_1, x_2, x_3)) = 2
   POL(U33_gagaa(x_1, x_2, x_3)) = 2
   POL(U34_aggaa(x_1, x_2, x_3)) = 0
   POL(U35_aggaa(x_1, x_2, x_3)) = 0
   POL(U36_aggaa(x_1, x_2, x_3)) = 0
   POL(U37_aggaa(x_1, x_2, x_3)) = 0
   POL(U38_ggaaa(x_1, x_2, x_3)) = 2*x_3
   POL(U39_ggaaa(x_1, x_2, x_3)) = 2
   POL(U40_aaaaa(x_1)) = 2*x_1
   POL(U41_aaaaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U42_aaaaa(x_1, x_2, x_3)) = x_3
   POL([]) = 0
   POL(mergecF_in_gagaa(x_1, x_2)) = 2
   POL(mergecF_out_gagaa(x_1, x_2, x_3)) = 2
   POL(mergecG_in_aggaa(x_1, x_2)) = 0
   POL(mergecG_out_aggaa(x_1, x_2, x_3)) = 0
   POL(mergecH_in_aggaa(x_1, x_2)) = 2*x_2
   POL(mergecH_out_aggaa(x_1, x_2, x_3)) = 0
   POL(mergecI_in_ggaaa(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(mergecI_out_ggaaa(x_1, x_2, x_3)) = x_3
   POL(mergesortcA_in_gaa(x_1)) = 0
   POL(mergesortcA_out_gaa(x_1, x_2)) = x_2
   POL(qcB_in_aaaaa) = 0
   POL(qcB_out_aaaaa(x_1, x_2, x_3)) = x_3


----------------------------------------

(474)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([]) -> PB_IN_AAAAA
   PB_IN_AAAAA -> MERGESORTA_IN_GAA([])
   PB_IN_AAAAA -> U10_AAAAA(mergesortcA_in_gaa([]))
   U10_AAAAA(mergesortcA_out_gaa([], X1)) -> MERGESORTA_IN_GAA([])

The TRS R consists of the following rules:

   mergesortcA_in_gaa([]) -> mergesortcA_out_gaa([], [])
   mergesortcA_in_gaa([]) -> U27_gaa(qcB_in_aaaaa)
   U27_gaa(qcB_out_aaaaa(X4, X5, X1)) -> mergesortcA_out_gaa([], X1)
   qcB_in_aaaaa -> U40_aaaaa(mergesortcA_in_gaa([]))
   U40_aaaaa(mergesortcA_out_gaa([], X1)) -> U41_aaaaa(X1, mergesortcA_in_gaa([]))
   U41_aaaaa(X1, mergesortcA_out_gaa([], X3)) -> U42_aaaaa(X1, X3, mergecI_in_ggaaa(X1, X3))
   U42_aaaaa(X1, X3, mergecI_out_ggaaa(X1, X3, X4)) -> qcB_out_aaaaa(X1, X3, X4)
   mergecI_in_ggaaa([], X1) -> mergecI_out_ggaaa([], X1, X1)
   mergecI_in_ggaaa(X1, []) -> mergecI_out_ggaaa(X1, [], X1)
   mergecF_in_gagaa([], X2) -> mergecF_out_gagaa([], X2, .(X2))
   mergecF_in_gagaa(.(X2), X4) -> U32_gagaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecF_in_gagaa(.(X2), X4) -> U33_gagaa(X2, X4, mergecG_in_aggaa(X2, X4))
   mergecH_in_aggaa(X2, []) -> mergecH_out_aggaa(X2, [], .(X2))
   mergecH_in_aggaa(X2, .(X4)) -> U36_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecH_in_aggaa(X2, .(X4)) -> U37_aggaa(X2, X4, mergecH_in_aggaa(X2, X4))
   U32_gagaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U33_gagaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecF_out_gagaa(.(X2), X4, .(X5))
   U36_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   U37_aggaa(X2, X4, mergecH_out_aggaa(X2, X4, X5)) -> mergecH_out_aggaa(X2, .(X4), .(X5))
   mergecG_in_aggaa(X2, []) -> mergecG_out_aggaa(X2, [], .(X2))
   mergecG_in_aggaa(X2, .(X4)) -> U34_aggaa(X2, X4, mergecF_in_gagaa(X2, X4))
   mergecG_in_aggaa(X2, .(X4)) -> U35_aggaa(X2, X4, mergecG_in_aggaa(X2, X4))
   U34_aggaa(X2, X4, mergecF_out_gagaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))
   U35_aggaa(X2, X4, mergecG_out_aggaa(X2, X4, X5)) -> mergecG_out_aggaa(X2, .(X4), .(X5))

The set Q consists of the following terms:

   mergesortcA_in_gaa(x0)
   U27_gaa(x0)
   qcB_in_aaaaa
   U40_aaaaa(x0)
   U41_aaaaa(x0, x1)
   U42_aaaaa(x0, x1, x2)
   mergecI_in_ggaaa(x0, x1)
   U38_ggaaa(x0, x1, x2)
   U39_ggaaa(x0, x1, x2)
   mergecF_in_gagaa(x0, x1)
   mergecH_in_aggaa(x0, x1)
   U32_gagaa(x0, x1, x2)
   U33_gagaa(x0, x1, x2)
   U36_aggaa(x0, x1, x2)
   U37_aggaa(x0, x1, x2)
   mergecG_in_aggaa(x0, x1)
   U34_aggaa(x0, x1, x2)
   U35_aggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(475) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(476)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([]) -> PB_IN_AAAAA
   PB_IN_AAAAA -> MERGESORTA_IN_GAA([])
   PB_IN_AAAAA -> U10_AAAAA(mergesortcA_in_gaa([]))
   U10_AAAAA(mergesortcA_out_gaa([], X1)) -> MERGESORTA_IN_GAA([])

The TRS R consists of the following rules:

   mergesortcA_in_gaa([]) -> mergesortcA_out_gaa([], [])
   mergesortcA_in_gaa([]) -> U27_gaa(qcB_in_aaaaa)
   qcB_in_aaaaa -> U40_aaaaa(mergesortcA_in_gaa([]))
   U27_gaa(qcB_out_aaaaa(X4, X5, X1)) -> mergesortcA_out_gaa([], X1)
   U40_aaaaa(mergesortcA_out_gaa([], X1)) -> U41_aaaaa(X1, mergesortcA_in_gaa([]))
   U41_aaaaa(X1, mergesortcA_out_gaa([], X3)) -> U42_aaaaa(X1, X3, mergecI_in_ggaaa(X1, X3))
   mergecI_in_ggaaa([], X1) -> mergecI_out_ggaaa([], X1, X1)
   mergecI_in_ggaaa(X1, []) -> mergecI_out_ggaaa(X1, [], X1)
   U42_aaaaa(X1, X3, mergecI_out_ggaaa(X1, X3, X4)) -> qcB_out_aaaaa(X1, X3, X4)

The set Q consists of the following terms:

   mergesortcA_in_gaa(x0)
   U27_gaa(x0)
   qcB_in_aaaaa
   U40_aaaaa(x0)
   U41_aaaaa(x0, x1)
   U42_aaaaa(x0, x1, x2)
   mergecI_in_ggaaa(x0, x1)
   U38_ggaaa(x0, x1, x2)
   U39_ggaaa(x0, x1, x2)
   mergecF_in_gagaa(x0, x1)
   mergecH_in_aggaa(x0, x1)
   U32_gagaa(x0, x1, x2)
   U33_gagaa(x0, x1, x2)
   U36_aggaa(x0, x1, x2)
   U37_aggaa(x0, x1, x2)
   mergecG_in_aggaa(x0, x1)
   U34_aggaa(x0, x1, x2)
   U35_aggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(477) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U38_ggaaa(x0, x1, x2)
   U39_ggaaa(x0, x1, x2)
   mergecF_in_gagaa(x0, x1)
   mergecH_in_aggaa(x0, x1)
   U32_gagaa(x0, x1, x2)
   U33_gagaa(x0, x1, x2)
   U36_aggaa(x0, x1, x2)
   U37_aggaa(x0, x1, x2)
   mergecG_in_aggaa(x0, x1)
   U34_aggaa(x0, x1, x2)
   U35_aggaa(x0, x1, x2)


----------------------------------------

(478)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA([]) -> PB_IN_AAAAA
   PB_IN_AAAAA -> MERGESORTA_IN_GAA([])
   PB_IN_AAAAA -> U10_AAAAA(mergesortcA_in_gaa([]))
   U10_AAAAA(mergesortcA_out_gaa([], X1)) -> MERGESORTA_IN_GAA([])

The TRS R consists of the following rules:

   mergesortcA_in_gaa([]) -> mergesortcA_out_gaa([], [])
   mergesortcA_in_gaa([]) -> U27_gaa(qcB_in_aaaaa)
   qcB_in_aaaaa -> U40_aaaaa(mergesortcA_in_gaa([]))
   U27_gaa(qcB_out_aaaaa(X4, X5, X1)) -> mergesortcA_out_gaa([], X1)
   U40_aaaaa(mergesortcA_out_gaa([], X1)) -> U41_aaaaa(X1, mergesortcA_in_gaa([]))
   U41_aaaaa(X1, mergesortcA_out_gaa([], X3)) -> U42_aaaaa(X1, X3, mergecI_in_ggaaa(X1, X3))
   mergecI_in_ggaaa([], X1) -> mergecI_out_ggaaa([], X1, X1)
   mergecI_in_ggaaa(X1, []) -> mergecI_out_ggaaa(X1, [], X1)
   U42_aaaaa(X1, X3, mergecI_out_ggaaa(X1, X3, X4)) -> qcB_out_aaaaa(X1, X3, X4)

The set Q consists of the following terms:

   mergesortcA_in_gaa(x0)
   U27_gaa(x0)
   qcB_in_aaaaa
   U40_aaaaa(x0)
   U41_aaaaa(x0, x1)
   U42_aaaaa(x0, x1, x2)
   mergecI_in_ggaaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(479)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTA_IN_GAA(.(X1, []), X2, .(X3, X4)) -> U21_GAA(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U21_GAA(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> PC_IN_AGAAGAAA(X1, X6, X7, X4, X5, X8, X2, X3)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> MERGESORTA_IN_GAA(.(X1, X2), X3, X4)
   MERGESORTA_IN_GAA(.(X1, X2), X3, .(X4, X5)) -> U24_GAA(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U24_GAA(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> PC_IN_AGAAGAAA(X1, X7, X8, X5, X6, X9, X3, X4)
   PC_IN_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8) -> U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   U15_AGAAGAAA(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> MERGESORTA_IN_GAA(X5, X6, X4)

The TRS R consists of the following rules:

   splitcD_in_aaa([], [], X1) -> splitcD_out_aaa([], [], X1)
   splitcE_in_gaaa([], [], [], X1) -> splitcE_out_gaaa([], [], [], X1)
   splitcE_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   splitcJ_in_gaaa([], [], [], X1) -> splitcJ_out_gaaa([], [], [], X1)
   splitcJ_in_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6)) -> U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_in_gaaa(X2, X4, X3, X6))
   U46_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcJ_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   U47_gaaa(X1, X2, X3, X4, X5, X6, splitcJ_out_gaaa(X2, X4, X3, X6)) -> splitcE_out_gaaa(.(X1, X2), .(X1, X3), X4, .(X5, X6))
   mergesortcA_in_gaa([], [], X1) -> mergesortcA_out_gaa([], [], X1)
   mergesortcA_in_gaa([], X1, .(X2, X3)) -> U27_gaa(X1, X2, X3, qcB_in_aaaaa(X4, X3, X5, X1, X2))
   qcB_in_aaaaa(X1, X2, X3, X4, X5) -> U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X1, X2))
   mergesortcA_in_gaa(.(X1, []), .(X1, []), X2) -> mergesortcA_out_gaa(.(X1, []), .(X1, []), X2)
   mergesortcA_in_gaa(.(X1, []), X2, .(X3, X4)) -> U28_gaa(X1, X2, X3, X4, splitcD_in_aaa(X5, X6, X4))
   U28_gaa(X1, X2, X3, X4, splitcD_out_aaa(X5, X6, X4)) -> U29_gaa(X1, X2, X3, X4, qcC_in_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3))
   qcC_in_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8) -> U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(.(X1, X2), X3, X4))
   mergesortcA_in_gaa(.(X1, X2), X3, .(X4, X5)) -> U30_gaa(X1, X2, X3, X4, X5, splitcE_in_gaaa(X2, X6, X7, X5))
   U30_gaa(X1, X2, X3, X4, X5, splitcE_out_gaaa(X2, X6, X7, X5)) -> U31_gaa(X1, X2, X3, X4, X5, qcC_in_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4))
   U31_gaa(X1, X2, X3, X4, X5, qcC_out_agaagaaa(X1, X7, X8, X5, X6, X9, X3, X4)) -> mergesortcA_out_gaa(.(X1, X2), X3, .(X4, X5))
   U43_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(.(X1, X2), X3, X4)) -> U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_in_gaa(X5, X6, X4))
   U44_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergesortcA_out_gaa(X5, X6, X4)) -> U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_in_ggaaa(X3, X6, X7, X8, X4))
   mergecI_in_ggaaa([], X1, X1, X2, X3) -> mergecI_out_ggaaa([], X1, X1, X2, X3)
   mergecI_in_ggaaa(X1, [], X1, X2, X3) -> mergecI_out_ggaaa(X1, [], X1, X2, X3)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7) -> U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa([], X1, X2, .(X1, X2), X3) -> mergecF_out_gagaa([], X1, X2, .(X1, X2), X3)
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7)) -> U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   mergecF_in_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7)) -> U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   mergecG_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecG_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U34_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecG_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_in_aggaa(X1, X2, X4, X5, X7))
   U35_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecG_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U33_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecG_out_aggaa(X1, X2, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X3, X5), .(X6, X7))
   U32_gagaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecF_out_gagaa(.(X1, X2), X3, X4, .(X1, X5), .(X6, X7))
   U38_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X1, X5), X6, X7)
   mergecI_in_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7) -> U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   mergecH_in_aggaa(X1, X2, [], .(X1, X2), X3) -> mergecH_out_aggaa(X1, X2, [], .(X1, X2), X3)
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7)) -> U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_in_gagaa(X2, X3, X4, X5, X7))
   U36_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecF_out_gagaa(X2, X3, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X1, X5), .(X6, X7))
   mergecH_in_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7)) -> U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_in_aggaa(X1, X2, X4, X5, X7))
   U37_aggaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecH_out_aggaa(X1, X2, .(X3, X4), .(X3, X5), .(X6, X7))
   U39_ggaaa(X1, X2, X3, X4, X5, X6, X7, mergecH_out_aggaa(X1, X2, X4, X5, X7)) -> mergecI_out_ggaaa(.(X1, X2), .(X3, X4), .(X3, X5), X6, X7)
   U45_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8, mergecI_out_ggaaa(X3, X6, X7, X8, X4)) -> qcC_out_agaagaaa(X1, X2, X3, X4, X5, X6, X7, X8)
   U29_gaa(X1, X2, X3, X4, qcC_out_agaagaaa(X1, X6, X7, X4, X5, X8, X2, X3)) -> mergesortcA_out_gaa(.(X1, []), X2, .(X3, X4))
   U40_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X1, X2)) -> U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_in_gaa([], X3, X2))
   U41_aaaaa(X1, X2, X3, X4, X5, mergesortcA_out_gaa([], X3, X2)) -> U42_aaaaa(X1, X2, X3, X4, X5, mergecI_in_ggaaa(X1, X3, X4, X5, X2))
   U42_aaaaa(X1, X2, X3, X4, X5, mergecI_out_ggaaa(X1, X3, X4, X5, X2)) -> qcB_out_aaaaa(X1, X2, X3, X4, X5)
   U27_gaa(X1, X2, X3, qcB_out_aaaaa(X4, X3, X5, X1, X2)) -> mergesortcA_out_gaa([], X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x2)

splitcD_in_aaa(x1, x2, x3)  =  splitcD_in_aaa

splitcD_out_aaa(x1, x2, x3)  =  splitcD_out_aaa(x1, x2)

splitcE_in_gaaa(x1, x2, x3, x4)  =  splitcE_in_gaaa(x1)

splitcE_out_gaaa(x1, x2, x3, x4)  =  splitcE_out_gaaa(x1, x2, x3)

U47_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U47_gaaa(x2, x7)

splitcJ_in_gaaa(x1, x2, x3, x4)  =  splitcJ_in_gaaa(x1)

splitcJ_out_gaaa(x1, x2, x3, x4)  =  splitcJ_out_gaaa(x1, x2, x3)

U46_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U46_gaaa(x2, x7)

mergesortcA_in_gaa(x1, x2, x3)  =  mergesortcA_in_gaa(x1)

mergesortcA_out_gaa(x1, x2, x3)  =  mergesortcA_out_gaa(x1, x2)

U27_gaa(x1, x2, x3, x4)  =  U27_gaa(x4)

qcB_in_aaaaa(x1, x2, x3, x4, x5)  =  qcB_in_aaaaa

U40_aaaaa(x1, x2, x3, x4, x5, x6)  =  U40_aaaaa(x6)

U28_gaa(x1, x2, x3, x4, x5)  =  U28_gaa(x5)

U29_gaa(x1, x2, x3, x4, x5)  =  U29_gaa(x5)

qcC_in_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_in_agaagaaa(x2, x5)

U43_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U43_agaagaaa(x2, x5, x9)

U30_gaa(x1, x2, x3, x4, x5, x6)  =  U30_gaa(x2, x6)

U31_gaa(x1, x2, x3, x4, x5, x6)  =  U31_gaa(x2, x6)

qcC_out_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  qcC_out_agaagaaa(x2, x3, x5, x6, x7)

U44_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U44_agaagaaa(x2, x3, x5, x9)

U45_agaagaaa(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U45_agaagaaa(x2, x3, x5, x6, x9)

mergecI_in_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_in_ggaaa(x1, x2)

mergecI_out_ggaaa(x1, x2, x3, x4, x5)  =  mergecI_out_ggaaa(x1, x2, x3)

U38_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U38_ggaaa(x2, x4, x8)

mergecF_in_gagaa(x1, x2, x3, x4, x5)  =  mergecF_in_gagaa(x1, x3)

mergecF_out_gagaa(x1, x2, x3, x4, x5)  =  mergecF_out_gagaa(x1, x3, x4)

U32_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U32_gagaa(x2, x4, x8)

U33_gagaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U33_gagaa(x2, x4, x8)

mergecG_in_aggaa(x1, x2, x3, x4, x5)  =  mergecG_in_aggaa(x2, x3)

mergecG_out_aggaa(x1, x2, x3, x4, x5)  =  mergecG_out_aggaa(x2, x3, x4)

U34_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U34_aggaa(x2, x4, x8)

U35_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U35_aggaa(x2, x4, x8)

U39_ggaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U39_ggaaa(x2, x4, x8)

mergecH_in_aggaa(x1, x2, x3, x4, x5)  =  mergecH_in_aggaa(x2, x3)

mergecH_out_aggaa(x1, x2, x3, x4, x5)  =  mergecH_out_aggaa(x2, x3, x4)

U36_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U36_aggaa(x2, x4, x8)

U37_aggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U37_aggaa(x2, x4, x8)

U41_aaaaa(x1, x2, x3, x4, x5, x6)  =  U41_aaaaa(x1, x6)

U42_aaaaa(x1, x2, x3, x4, x5, x6)  =  U42_aaaaa(x1, x3, x6)

qcB_out_aaaaa(x1, x2, x3, x4, x5)  =  qcB_out_aaaaa(x1, x3, x4)

MERGESORTA_IN_GAA(x1, x2, x3)  =  MERGESORTA_IN_GAA(x1)

U21_GAA(x1, x2, x3, x4, x5)  =  U21_GAA(x5)

PC_IN_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  PC_IN_AGAAGAAA(x2, x5)

U24_GAA(x1, x2, x3, x4, x5, x6)  =  U24_GAA(x2, x6)

U15_AGAAGAAA(x1, x2, x3, x4, x5, x6, x7, x8, x9)  =  U15_AGAAGAAA(x2, x5, x9)


We have to consider all (P,R,Pi)-chains