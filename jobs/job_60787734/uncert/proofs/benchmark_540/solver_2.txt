YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/tMf3t.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 96 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 107 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 106 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QDPOrderProof [EQUIVALENT, 70 ms]
(14) QDP
(15) DependencyGraphProof [EQUIVALENT, 0 ms]
(16) AND
    (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 34 ms]
        (19) QDP
        (20) QDPOrderProof [EQUIVALENT, 1746 ms]
        (21) QDP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) QDPOrderProof [EQUIVALENT, 50 ms]
        (26) QDP
        (27) QDPOrderProof [EQUIVALENT, 28 ms]
        (28) QDP
        (29) QDPOrderProof [EQUIVALENT, 24 ms]
        (30) QDP
        (31) PisEmptyProof [EQUIVALENT, 0 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(0(0(x1))) -> 0^1(0(1(0(1(x1)))))
   0^1(0(0(x1))) -> 0^1(1(0(1(x1))))
   0^1(0(0(x1))) -> 0^1(1(x1))
   0^1(2(0(x1))) -> 0^1(0(2(1(1(x1)))))
   0^1(2(0(x1))) -> 0^1(2(1(1(x1))))
   0^1(3(2(x1))) -> 3^1(0(x1))
   0^1(3(2(x1))) -> 0^1(x1)
   0^1(4(2(x1))) -> 4^1(1(1(1(0(2(x1))))))
   0^1(4(2(x1))) -> 0^1(2(x1))
   3^1(0(4(x1))) -> 0^1(1(3(4(1(x1)))))
   3^1(0(4(x1))) -> 3^1(4(1(x1)))
   3^1(0(4(x1))) -> 4^1(1(x1))
   3^1(2(0(x1))) -> 0^1(2(1(3(x1))))
   3^1(2(0(x1))) -> 3^1(x1)
   3^1(2(0(x1))) -> 3^1(0(2(1(x1))))
   3^1(2(0(x1))) -> 0^1(2(1(x1)))
   3^1(2(0(x1))) -> 0^1(1(2(1(3(x1)))))
   3^1(2(0(x1))) -> 3^1(0(1(2(1(4(x1))))))
   3^1(2(0(x1))) -> 0^1(1(2(1(4(x1)))))
   3^1(2(0(x1))) -> 4^1(x1)
   3^1(2(4(x1))) -> 3^1(3(4(x1)))
   3^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(4(x1))) -> 4^1(1(2(1(1(3(x1))))))
   3^1(2(4(x1))) -> 3^1(x1)
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 5^1(2(x1))
   3^1(2(5(x1))) -> 3^1(1(4(5(2(x1)))))
   3^1(2(5(x1))) -> 4^1(5(2(x1)))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 4^1(5(4(2(x1))))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   3^1(2(5(x1))) -> 4^1(2(x1))
   3^1(5(0(x1))) -> 3^1(1(0(5(1(1(x1))))))
   3^1(5(0(x1))) -> 0^1(5(1(1(x1))))
   3^1(5(0(x1))) -> 5^1(1(1(x1)))
   5^1(0(2(x1))) -> 0^1(2(5(x1)))
   5^1(0(2(x1))) -> 5^1(x1)
   5^1(0(4(x1))) -> 0^1(5(4(1(1(x1)))))
   5^1(0(4(x1))) -> 5^1(4(1(1(x1))))
   5^1(0(4(x1))) -> 4^1(1(1(x1)))
   5^1(2(4(x1))) -> 5^1(2(1(1(3(4(x1))))))
   5^1(2(4(x1))) -> 3^1(4(x1))
   5^1(3(2(x1))) -> 3^1(5(1(2(x1))))
   5^1(3(2(x1))) -> 5^1(1(2(x1)))
   5^1(5(0(x1))) -> 5^1(1(1(5(0(x1)))))
   0^1(0(2(4(x1)))) -> 0^1(4(0(2(1(1(x1))))))
   0^1(0(2(4(x1)))) -> 4^1(0(2(1(1(x1)))))
   0^1(0(2(4(x1)))) -> 0^1(2(1(1(x1))))
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   0^1(3(1(2(x1)))) -> 0^1(2(x1))
   0^1(3(2(4(x1)))) -> 3^1(0(4(4(x1))))
   0^1(3(2(4(x1)))) -> 0^1(4(4(x1)))
   0^1(3(2(4(x1)))) -> 4^1(4(x1))
   0^1(4(3(2(x1)))) -> 3^1(4(0(1(x1))))
   0^1(4(3(2(x1)))) -> 4^1(0(1(x1)))
   0^1(4(3(2(x1)))) -> 0^1(1(x1))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(2(4(x1)))) -> 0^1(4(2(1(1(x1)))))
   3^1(0(2(4(x1)))) -> 4^1(2(1(1(x1))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 4^1(0(5(1(3(x1)))))
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   3^1(0(5(4(x1)))) -> 5^1(1(3(x1)))
   3^1(0(5(4(x1)))) -> 3^1(x1)
   3^1(1(0(0(x1)))) -> 0^1(1(1(3(0(1(x1))))))
   3^1(1(0(0(x1)))) -> 3^1(0(1(x1)))
   3^1(1(0(0(x1)))) -> 0^1(1(x1))
   3^1(2(4(0(x1)))) -> 3^1(1(0(4(2(x1)))))
   3^1(2(4(0(x1)))) -> 0^1(4(2(x1)))
   3^1(2(4(0(x1)))) -> 4^1(2(x1))
   3^1(2(4(5(x1)))) -> 3^1(1(4(2(1(5(x1))))))
   3^1(2(4(5(x1)))) -> 4^1(2(1(5(x1))))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 4^1(3(5(2(x1))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(2(5(4(x1)))) -> 5^1(2(x1))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(3(2(x1)))) -> 0^1(2(5(x1)))
   3^1(5(3(2(x1)))) -> 5^1(x1)
   4^1(0(4(2(x1)))) -> 4^1(4(2(1(3(0(x1))))))
   4^1(0(4(2(x1)))) -> 4^1(2(1(3(0(x1)))))
   4^1(0(4(2(x1)))) -> 3^1(0(x1))
   4^1(0(4(2(x1)))) -> 0^1(x1)
   4^1(3(2(0(x1)))) -> 0^1(2(1(3(4(x1)))))
   4^1(3(2(0(x1)))) -> 3^1(4(x1))
   4^1(3(2(0(x1)))) -> 4^1(x1)
   5^1(4(1(0(x1)))) -> 5^1(1(1(4(0(1(x1))))))
   5^1(4(1(0(x1)))) -> 4^1(0(1(x1)))
   5^1(4(1(0(x1)))) -> 0^1(1(x1))
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   5^1(5(0(0(x1)))) -> 5^1(0(x1))
   5^1(5(2(2(x1)))) -> 5^1(5(1(1(2(2(x1))))))
   5^1(5(2(2(x1)))) -> 5^1(1(1(2(2(x1)))))
   0^1(0(1(2(4(x1))))) -> 0^1(0(2(1(1(4(x1))))))
   0^1(0(1(2(4(x1))))) -> 0^1(2(1(1(4(x1)))))
   0^1(5(3(1(2(x1))))) -> 5^1(2(1(3(1(0(x1))))))
   0^1(5(3(1(2(x1))))) -> 3^1(1(0(x1)))
   0^1(5(3(1(2(x1))))) -> 0^1(x1)
   0^1(5(5(1(0(x1))))) -> 5^1(0(0(5(1(1(x1))))))
   0^1(5(5(1(0(x1))))) -> 0^1(0(5(1(1(x1)))))
   0^1(5(5(1(0(x1))))) -> 0^1(5(1(1(x1))))
   0^1(5(5(1(0(x1))))) -> 5^1(1(1(x1)))
   3^1(0(1(4(5(x1))))) -> 3^1(4(0(5(1(1(x1))))))
   3^1(0(1(4(5(x1))))) -> 4^1(0(5(1(1(x1)))))
   3^1(0(1(4(5(x1))))) -> 0^1(5(1(1(x1))))
   3^1(0(1(4(5(x1))))) -> 5^1(1(1(x1)))
   3^1(0(3(1(2(x1))))) -> 0^1(2(1(1(3(3(x1))))))
   3^1(0(3(1(2(x1))))) -> 3^1(3(x1))
   3^1(0(3(1(2(x1))))) -> 3^1(x1)
   3^1(2(2(0(4(x1))))) -> 3^1(2(2(0(1(4(x1))))))
   3^1(2(2(0(4(x1))))) -> 0^1(1(4(x1)))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 4^1(5(0(x1)))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   3^1(5(3(0(4(x1))))) -> 3^1(0(1(5(3(4(x1))))))
   3^1(5(3(0(4(x1))))) -> 0^1(1(5(3(4(x1)))))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))
   3^1(5(3(0(4(x1))))) -> 3^1(4(x1))
   5^1(1(0(2(4(x1))))) -> 5^1(4(0(3(x1))))
   5^1(1(0(2(4(x1))))) -> 4^1(0(3(x1)))
   5^1(1(0(2(4(x1))))) -> 0^1(3(x1))
   5^1(1(0(2(4(x1))))) -> 3^1(x1)
   5^1(1(3(2(0(x1))))) -> 3^1(5(0(1(1(x1)))))
   5^1(1(3(2(0(x1))))) -> 5^1(0(1(1(x1))))
   5^1(1(3(2(0(x1))))) -> 0^1(1(1(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(4(2(0(2(x1))))) -> 0^1(4(2(1(2(x1)))))
   5^1(4(2(0(2(x1))))) -> 4^1(2(1(2(x1))))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 78 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(3(2(x1))) -> 3^1(0(x1))
   3^1(2(0(x1))) -> 3^1(x1)
   3^1(2(0(x1))) -> 4^1(x1)
   4^1(0(4(2(x1)))) -> 3^1(0(x1))
   3^1(2(4(x1))) -> 3^1(3(4(x1)))
   3^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(4(x1))) -> 3^1(x1)
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 5^1(2(x1))
   5^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(5(x1))) -> 4^1(5(2(x1)))
   4^1(0(4(2(x1)))) -> 0^1(x1)
   0^1(3(2(x1))) -> 0^1(x1)
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 4^1(5(4(2(x1))))
   4^1(3(2(0(x1)))) -> 3^1(4(x1))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(0(2(x1))) -> 5^1(x1)
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   0^1(3(2(4(x1)))) -> 3^1(0(4(4(x1))))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 4^1(0(5(1(3(x1)))))
   4^1(3(2(0(x1)))) -> 4^1(x1)
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   0^1(3(2(4(x1)))) -> 0^1(4(4(x1)))
   0^1(3(2(4(x1)))) -> 4^1(4(x1))
   0^1(5(3(1(2(x1))))) -> 0^1(x1)
   3^1(0(5(4(x1)))) -> 5^1(1(3(x1)))
   5^1(1(0(2(4(x1))))) -> 5^1(4(0(3(x1))))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   5^1(5(0(0(x1)))) -> 5^1(0(x1))
   5^1(1(0(2(4(x1))))) -> 4^1(0(3(x1)))
   5^1(1(0(2(4(x1))))) -> 0^1(3(x1))
   5^1(1(0(2(4(x1))))) -> 3^1(x1)
   3^1(0(5(4(x1)))) -> 3^1(x1)
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 4^1(3(5(2(x1))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(2(5(4(x1)))) -> 5^1(2(x1))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(3(2(x1)))) -> 5^1(x1)
   3^1(0(3(1(2(x1))))) -> 3^1(3(x1))
   3^1(0(3(1(2(x1))))) -> 3^1(x1)
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 4^1(5(0(x1)))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))
   3^1(5(3(0(4(x1))))) -> 3^1(4(x1))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   5^1(2(4(x1))) -> 3^1(4(x1))
   0^1(5(3(1(2(x1))))) -> 0^1(x1)
   5^1(5(0(0(x1)))) -> 5^1(0(x1))
   5^1(1(0(2(4(x1))))) -> 4^1(0(3(x1)))
   5^1(1(0(2(4(x1))))) -> 0^1(3(x1))
   5^1(1(0(2(4(x1))))) -> 3^1(x1)
   3^1(0(5(4(x1)))) -> 3^1(x1)
   3^1(5(3(0(4(x1))))) -> 3^1(4(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = x_1
   POL(2(x_1)) = x_1
   POL(3(x_1)) = x_1
   POL(3^1(x_1)) = x_1
   POL(4(x_1)) = x_1
   POL(4^1(x_1)) = x_1
   POL(5(x_1)) = 1 + x_1
   POL(5^1(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(3(2(x1))) -> 3^1(0(x1))
   3^1(2(0(x1))) -> 3^1(x1)
   3^1(2(0(x1))) -> 4^1(x1)
   4^1(0(4(2(x1)))) -> 3^1(0(x1))
   3^1(2(4(x1))) -> 3^1(3(4(x1)))
   3^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(4(x1))) -> 3^1(x1)
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 5^1(2(x1))
   3^1(2(5(x1))) -> 4^1(5(2(x1)))
   4^1(0(4(2(x1)))) -> 0^1(x1)
   0^1(3(2(x1))) -> 0^1(x1)
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 4^1(5(4(2(x1))))
   4^1(3(2(0(x1)))) -> 3^1(4(x1))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(0(2(x1))) -> 5^1(x1)
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   0^1(3(2(4(x1)))) -> 3^1(0(4(4(x1))))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 4^1(0(5(1(3(x1)))))
   4^1(3(2(0(x1)))) -> 4^1(x1)
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   0^1(3(2(4(x1)))) -> 0^1(4(4(x1)))
   0^1(3(2(4(x1)))) -> 4^1(4(x1))
   3^1(0(5(4(x1)))) -> 5^1(1(3(x1)))
   5^1(1(0(2(4(x1))))) -> 5^1(4(0(3(x1))))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 4^1(3(5(2(x1))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(2(5(4(x1)))) -> 5^1(2(x1))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(3(2(x1)))) -> 5^1(x1)
   3^1(0(3(1(2(x1))))) -> 3^1(3(x1))
   3^1(0(3(1(2(x1))))) -> 3^1(x1)
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 4^1(5(0(x1)))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(2(0(x1))) -> 3^1(x1)
   3^1(2(0(x1))) -> 4^1(x1)
   4^1(0(4(2(x1)))) -> 3^1(0(x1))
   3^1(2(4(x1))) -> 3^1(3(4(x1)))
   3^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(4(x1))) -> 3^1(x1)
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 4^1(5(2(x1)))
   4^1(0(4(2(x1)))) -> 0^1(x1)
   0^1(3(2(x1))) -> 3^1(0(x1))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 4^1(5(4(2(x1))))
   4^1(3(2(0(x1)))) -> 3^1(4(x1))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(0(2(x1))) -> 5^1(x1)
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   0^1(3(2(x1))) -> 0^1(x1)
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 4^1(0(5(1(3(x1)))))
   4^1(3(2(0(x1)))) -> 4^1(x1)
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   0^1(3(2(4(x1)))) -> 3^1(0(4(4(x1))))
   3^1(0(5(4(x1)))) -> 5^1(1(3(x1)))
   5^1(1(0(2(4(x1))))) -> 5^1(4(0(3(x1))))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 4^1(3(5(2(x1))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(3(2(x1)))) -> 5^1(x1)
   3^1(0(3(1(2(x1))))) -> 3^1(3(x1))
   3^1(0(3(1(2(x1))))) -> 3^1(x1)
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 4^1(5(0(x1)))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))
   0^1(3(2(4(x1)))) -> 0^1(4(4(x1)))
   0^1(3(2(4(x1)))) -> 4^1(4(x1))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   3^1(2(0(x1))) -> 3^1(x1)
   3^1(2(0(x1))) -> 4^1(x1)
   3^1(2(4(x1))) -> 3^1(3(4(x1)))
   3^1(2(4(x1))) -> 3^1(4(x1))
   3^1(2(4(x1))) -> 3^1(x1)
   3^1(2(5(x1))) -> 4^1(5(2(x1)))
   0^1(3(2(x1))) -> 3^1(0(x1))
   3^1(2(5(x1))) -> 4^1(5(4(2(x1))))
   5^1(0(2(x1))) -> 5^1(x1)
   0^1(3(2(x1))) -> 0^1(x1)
   3^1(0(5(4(x1)))) -> 4^1(0(5(1(3(x1)))))
   4^1(3(2(0(x1)))) -> 4^1(x1)
   0^1(3(2(4(x1)))) -> 3^1(0(4(4(x1))))
   5^1(1(0(2(4(x1))))) -> 5^1(4(0(3(x1))))
   3^1(2(5(4(x1)))) -> 4^1(3(5(2(x1))))
   3^1(5(3(2(x1)))) -> 5^1(x1)
   3^1(0(3(1(2(x1))))) -> 3^1(3(x1))
   3^1(0(3(1(2(x1))))) -> 3^1(x1)
   3^1(5(1(4(0(x1))))) -> 4^1(5(0(x1)))
   0^1(3(2(4(x1)))) -> 0^1(4(4(x1)))
   0^1(3(2(4(x1)))) -> 4^1(4(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(0^1(x_1)) = 1 + x_1
   POL(1(x_1)) = x_1
   POL(2(x_1)) = 1 + x_1
   POL(3(x_1)) = x_1
   POL(3^1(x_1)) = 1 + x_1
   POL(4(x_1)) = x_1
   POL(4^1(x_1)) = x_1
   POL(5(x_1)) = x_1
   POL(5^1(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   4^1(0(4(2(x1)))) -> 3^1(0(x1))
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   4^1(0(4(2(x1)))) -> 0^1(x1)
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   4^1(3(2(0(x1)))) -> 3^1(4(x1))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   3^1(0(5(4(x1)))) -> 5^1(1(3(x1)))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   0^1(3(1(2(x1)))) -> 3^1(0(2(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = 0
   POL(2(x_1)) = 0
   POL(3(x_1)) = 1
   POL(3^1(x_1)) = 0
   POL(4(x_1)) = 0
   POL(5(x_1)) = 0
   POL(5^1(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(x1))) -> 5^1(4(2(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
   5^1(5(0(0(x1)))) -> 0^1(5(5(0(x1))))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(0(5(4(x1)))) -> 0^1(5(1(3(x1))))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
   3^1(5(1(4(0(x1))))) -> 5^1(0(x1))
   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   3^1(5(3(0(4(x1))))) -> 5^1(3(4(x1)))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(16)
Complex Obligation (AND)

----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   5^1(4(2(0(2(x1))))) -> 5^1(0(4(2(1(2(x1))))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 0
   POL(2(x_1)) = 1 + x_1
   POL(3(x_1)) = 0
   POL(4(x_1)) = 1 + x_1
   POL(5(x_1)) = 1
   POL(5^1(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))


----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   5^1(5(0(0(x1)))) -> 5^1(5(0(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(5^1(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(5(x_1)) =  	[[1A], [-I], [-I]] 	 +  	[[0A, 0A, 0A], [-I, -I, 0A], [0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(0(x_1)) =  	[[0A], [1A], [0A]] 	 +  	[[0A, 0A, 1A], [0A, 0A, 1A], [-I, -I, 1A]] 	* 	x_1
>>>

   <<<
 POL(1(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, -I, -I], [-I, -I, -I], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(2(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, -I, 0A], [-I, 0A, -I], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(3(x_1)) =  	[[0A], [-I], [0A]] 	 +  	[[0A, 0A, 0A], [-I, -I, -I], [0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(4(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))


----------------------------------------

(21)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   3^1(2(5(x1))) -> 3^1(5(2(x1)))
   3^1(2(5(x1))) -> 3^1(3(5(2(x1))))
   3^1(2(5(x1))) -> 3^1(4(5(4(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(4(3(5(2(x1)))))
   3^1(2(5(4(x1)))) -> 3^1(5(2(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(2(x_1)) = 1
   POL(3(x_1)) = 0
   POL(3^1(x_1)) = x_1
   POL(4(x_1)) = 0
   POL(5(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   3^1(5(3(2(x1)))) -> 3^1(3(0(2(5(x1)))))
   3^1(5(3(2(x1)))) -> 3^1(0(2(5(x1))))
   3^1(5(1(4(0(x1))))) -> 3^1(3(4(5(0(x1)))))
   3^1(5(1(4(0(x1))))) -> 3^1(4(5(0(x1))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(2(x_1)) = 0
   POL(3(x_1)) = 0
   POL(3^1(x_1)) = x_1
   POL(4(x_1)) = 0
   POL(5(x_1)) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))

The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   3^1(0(2(4(x1)))) -> 3^1(0(4(2(1(1(x1))))))
   3^1(0(5(4(x1)))) -> 3^1(4(0(5(1(3(x1))))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 0
   POL(2(x_1)) = 1 + x_1
   POL(3(x_1)) = 0
   POL(3^1(x_1)) = x_1
   POL(4(x_1)) = 1
   POL(5(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))


----------------------------------------

(30)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   0(0(0(x1))) -> 0(0(1(0(1(x1)))))
   0(2(0(x1))) -> 0(0(2(1(1(x1)))))
   0(3(2(x1))) -> 2(1(3(0(x1))))
   0(4(2(x1))) -> 4(1(1(1(0(2(x1))))))
   3(0(4(x1))) -> 0(1(3(4(1(x1)))))
   3(2(0(x1))) -> 0(2(1(3(x1))))
   3(2(0(x1))) -> 3(0(2(1(x1))))
   3(2(0(x1))) -> 0(1(2(1(3(x1)))))
   3(2(0(x1))) -> 3(0(1(2(1(4(x1))))))
   3(2(4(x1))) -> 1(2(1(3(3(4(x1))))))
   3(2(4(x1))) -> 4(1(2(1(1(3(x1))))))
   3(2(5(x1))) -> 1(3(5(2(x1))))
   3(2(5(x1))) -> 3(1(4(5(2(x1)))))
   3(2(5(x1))) -> 1(1(3(3(5(2(x1))))))
   3(2(5(x1))) -> 1(3(4(5(4(2(x1))))))
   3(5(0(x1))) -> 3(1(0(5(1(1(x1))))))
   5(0(2(x1))) -> 1(1(0(2(5(x1)))))
   5(0(4(x1))) -> 0(5(4(1(1(x1)))))
   5(2(4(x1))) -> 5(2(1(1(3(4(x1))))))
   5(3(2(x1))) -> 1(1(3(5(1(2(x1))))))
   5(5(0(x1))) -> 5(1(1(5(0(x1)))))
   0(0(2(4(x1)))) -> 0(4(0(2(1(1(x1))))))
   0(3(1(2(x1)))) -> 1(1(3(0(2(x1)))))
   0(3(2(4(x1)))) -> 2(1(3(0(4(4(x1))))))
   0(4(3(2(x1)))) -> 2(3(4(0(1(x1)))))
   3(0(2(4(x1)))) -> 3(0(4(2(1(1(x1))))))
   3(0(5(4(x1)))) -> 3(4(0(5(1(3(x1))))))
   3(1(0(0(x1)))) -> 0(1(1(3(0(1(x1))))))
   3(2(4(0(x1)))) -> 3(1(0(4(2(x1)))))
   3(2(4(5(x1)))) -> 3(1(4(2(1(5(x1))))))
   3(2(5(4(x1)))) -> 3(4(3(5(2(x1)))))
   3(5(3(2(x1)))) -> 3(3(0(2(5(x1)))))
   4(0(4(2(x1)))) -> 4(4(2(1(3(0(x1))))))
   4(3(2(0(x1)))) -> 0(2(1(3(4(x1)))))
   5(4(1(0(x1)))) -> 5(1(1(4(0(1(x1))))))
   5(5(0(0(x1)))) -> 1(1(0(5(5(0(x1))))))
   5(5(2(2(x1)))) -> 5(5(1(1(2(2(x1))))))
   0(0(1(2(4(x1))))) -> 0(0(2(1(1(4(x1))))))
   0(5(3(1(2(x1))))) -> 5(2(1(3(1(0(x1))))))
   0(5(5(1(0(x1))))) -> 5(0(0(5(1(1(x1))))))
   3(0(1(4(5(x1))))) -> 3(4(0(5(1(1(x1))))))
   3(0(3(1(2(x1))))) -> 0(2(1(1(3(3(x1))))))
   3(2(2(0(4(x1))))) -> 3(2(2(0(1(4(x1))))))
   3(5(1(4(0(x1))))) -> 1(3(3(4(5(0(x1))))))
   3(5(3(0(4(x1))))) -> 3(0(1(5(3(4(x1))))))
   5(1(0(2(4(x1))))) -> 2(1(5(4(0(3(x1))))))
   5(1(3(2(0(x1))))) -> 2(3(5(0(1(1(x1))))))
   5(4(2(0(2(x1))))) -> 5(0(4(2(1(2(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(32)
YES
