YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/5KuEg.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 29 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 10 ms]
(10) QDP
(11) QDPOrderProof [EQUIVALENT, 449 ms]
(12) QDP
(13) DependencyGraphProof [EQUIVALENT, 0 ms]
(14) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   d(a(x1)) -> b(d(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> a(d(x1))
   b(d(d(x1))) -> c(c(d(d(c(x1)))))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(d(x1)) -> D(b(x1))
   A(d(x1)) -> B(x1)
   B(x1) -> A(a(a(x1)))
   B(x1) -> A(a(x1))
   B(x1) -> A(x1)
   C(d(c(x1))) -> D(a(x1))
   C(d(c(x1))) -> A(x1)
   D(d(b(x1))) -> C(d(d(c(c(x1)))))
   D(d(b(x1))) -> D(d(c(c(x1))))
   D(d(b(x1))) -> D(c(c(x1)))
   D(d(b(x1))) -> C(c(x1))
   D(d(b(x1))) -> C(x1)

The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(d(x1)) -> B(x1)
   C(d(c(x1))) -> A(x1)
   D(d(b(x1))) -> D(c(c(x1)))
   D(d(b(x1))) -> C(c(x1))
   D(d(b(x1))) -> C(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = x_1
   POL(D(x_1)) = 1 + x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1
   POL(d(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b(x1) -> a(a(a(x1)))
   a(d(x1)) -> d(b(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))
   c(d(c(x1))) -> d(a(x1))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(d(x1)) -> D(b(x1))
   B(x1) -> A(a(a(x1)))
   B(x1) -> A(a(x1))
   B(x1) -> A(x1)
   C(d(c(x1))) -> D(a(x1))
   D(d(b(x1))) -> C(d(d(c(c(x1)))))
   D(d(b(x1))) -> D(d(c(c(x1))))

The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(d(b(x1))) -> C(d(d(c(c(x1)))))
   C(d(c(x1))) -> D(a(x1))
   D(d(b(x1))) -> D(d(c(c(x1))))

The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   D(d(b(x1))) -> D(d(c(c(x1))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( C_1(x_1) ) = 1
POL( D_1(x_1) ) = max{0, 2x_1 - 1}
POL( d_1(x_1) ) = max{0, x_1 - 1}
POL( b_1(x_1) ) = 2
POL( c_1(x_1) ) = max{0, -2}
POL( a_1(x_1) ) = 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   d(d(b(x1))) -> c(d(d(c(c(x1)))))
   c(d(c(x1))) -> d(a(x1))
   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(d(b(x1))) -> C(d(d(c(c(x1)))))
   C(d(c(x1))) -> D(a(x1))

The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(d(c(x1))) -> D(a(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(D(x_1)) =  	[[0A]] 	 +  	[[-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[0A], [0A], [1A]] 	 +  	[[-I, 0A, 0A], [1A, -I, 0A], [0A, 0A, 1A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [1A], [0A]] 	 +  	[[0A, 0A, 1A], [0A, 0A, 1A], [-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [-I, -I, 0A], [-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, -I, 0A], [0A, 0A, 1A], [-I, -I, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   d(d(b(x1))) -> c(d(d(c(c(x1)))))
   c(d(c(x1))) -> d(a(x1))
   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(d(b(x1))) -> C(d(d(c(c(x1)))))

The TRS R consists of the following rules:

   a(d(x1)) -> d(b(x1))
   b(x1) -> a(a(a(x1)))
   c(d(c(x1))) -> d(a(x1))
   d(d(b(x1))) -> c(d(d(c(c(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(14)
TRUE
