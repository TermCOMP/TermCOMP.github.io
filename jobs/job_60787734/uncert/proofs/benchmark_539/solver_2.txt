YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VVUei.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 91 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (7) YES
    (8) QDP
        (9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(0(1(x1))) -> 0(2(3(0(1(x1)))))
   0(0(1(x1))) -> 0(4(0(5(4(1(x1))))))
   0(0(1(x1))) -> 2(1(0(0(3(4(x1))))))
   0(0(1(x1))) -> 4(0(5(4(0(1(x1))))))
   0(1(0(x1))) -> 0(0(2(1(2(x1)))))
   0(1(0(x1))) -> 1(0(0(5(4(x1)))))
   0(1(0(x1))) -> 0(0(2(5(4(1(x1))))))
   0(1(1(x1))) -> 1(0(3(4(1(x1)))))
   0(1(1(x1))) -> 5(0(3(4(1(1(x1))))))
   5(0(1(x1))) -> 0(5(4(1(x1))))
   5(0(1(x1))) -> 2(5(4(0(1(x1)))))
   5(0(1(x1))) -> 5(0(2(1(2(x1)))))
   5(0(1(x1))) -> 0(1(4(5(4(4(x1))))))
   5(0(1(x1))) -> 0(5(4(1(4(4(x1))))))
   5(0(1(x1))) -> 5(0(4(3(0(1(x1))))))
   5(1(0(x1))) -> 5(0(2(2(1(x1)))))
   5(1(0(x1))) -> 5(0(5(4(1(x1)))))
   5(1(0(x1))) -> 0(5(0(2(2(1(x1))))))
   5(1(0(x1))) -> 1(4(0(5(2(3(x1))))))
   5(1(0(x1))) -> 1(5(0(4(4(2(x1))))))
   5(1(0(x1))) -> 4(4(1(0(4(5(x1))))))
   5(1(1(x1))) -> 1(1(5(4(x1))))
   5(1(1(x1))) -> 5(4(1(1(x1))))
   5(1(1(x1))) -> 1(5(3(4(1(x1)))))
   5(1(1(x1))) -> 1(1(4(5(4(4(x1))))))
   5(1(1(x1))) -> 3(5(2(3(1(1(x1))))))
   5(1(1(x1))) -> 4(1(2(1(5(4(x1))))))
   0(1(3(0(x1)))) -> 0(2(0(2(1(3(x1))))))
   0(1(5(0(x1)))) -> 0(0(5(4(1(5(x1))))))
   0(1(5(0(x1)))) -> 0(5(4(2(1(0(x1))))))
   0(3(0(1(x1)))) -> 0(0(4(1(3(0(x1))))))
   0(3(1(0(x1)))) -> 0(0(2(3(1(x1)))))
   0(3(1(1(x1)))) -> 5(1(1(0(3(4(x1))))))
   5(0(1(0(x1)))) -> 5(0(0(4(1(3(x1))))))
   5(1(2(0(x1)))) -> 1(4(0(5(4(2(x1))))))
   5(1(2(0(x1)))) -> 5(0(4(2(2(1(x1))))))
   5(1(4(0(x1)))) -> 1(5(4(0(2(3(x1))))))
   5(1(4(0(x1)))) -> 4(5(2(1(3(0(x1))))))
   5(1(5(1(x1)))) -> 5(4(1(5(1(x1)))))
   5(3(0(1(x1)))) -> 0(1(5(2(3(x1)))))
   5(3(1(0(x1)))) -> 1(4(3(5(0(x1)))))
   5(3(1(0(x1)))) -> 1(5(0(4(3(x1)))))
   5(3(1(0(x1)))) -> 5(4(3(1(0(x1)))))
   5(3(1(0(x1)))) -> 1(3(0(4(3(5(x1))))))
   5(3(1(1(x1)))) -> 1(1(5(3(3(4(x1))))))
   0(1(2(5(0(x1))))) -> 1(5(4(0(2(0(x1))))))
   0(1(4(2(0(x1))))) -> 1(0(4(2(3(0(x1))))))
   1(4(5(1(0(x1))))) -> 5(4(2(1(1(0(x1))))))
   5(0(1(4(0(x1))))) -> 1(4(5(4(0(0(x1))))))
   5(5(1(0(0(x1))))) -> 5(5(0(4(1(0(x1))))))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(0(1(x1))) -> 0^1(2(3(0(1(x1)))))
   0^1(0(1(x1))) -> 0^1(4(0(5(4(1(x1))))))
   0^1(0(1(x1))) -> 0^1(5(4(1(x1))))
   0^1(0(1(x1))) -> 5^1(4(1(x1)))
   0^1(0(1(x1))) -> 1^1(0(0(3(4(x1)))))
   0^1(0(1(x1))) -> 0^1(0(3(4(x1))))
   0^1(0(1(x1))) -> 0^1(3(4(x1)))
   0^1(0(1(x1))) -> 0^1(5(4(0(1(x1)))))
   0^1(0(1(x1))) -> 5^1(4(0(1(x1))))
   0^1(1(0(x1))) -> 0^1(0(2(1(2(x1)))))
   0^1(1(0(x1))) -> 0^1(2(1(2(x1))))
   0^1(1(0(x1))) -> 1^1(2(x1))
   0^1(1(0(x1))) -> 1^1(0(0(5(4(x1)))))
   0^1(1(0(x1))) -> 0^1(0(5(4(x1))))
   0^1(1(0(x1))) -> 0^1(5(4(x1)))
   0^1(1(0(x1))) -> 5^1(4(x1))
   0^1(1(0(x1))) -> 0^1(0(2(5(4(1(x1))))))
   0^1(1(0(x1))) -> 0^1(2(5(4(1(x1)))))
   0^1(1(0(x1))) -> 5^1(4(1(x1)))
   0^1(1(0(x1))) -> 1^1(x1)
   0^1(1(1(x1))) -> 1^1(0(3(4(1(x1)))))
   0^1(1(1(x1))) -> 0^1(3(4(1(x1))))
   0^1(1(1(x1))) -> 5^1(0(3(4(1(1(x1))))))
   0^1(1(1(x1))) -> 0^1(3(4(1(1(x1)))))
   5^1(0(1(x1))) -> 0^1(5(4(1(x1))))
   5^1(0(1(x1))) -> 5^1(4(1(x1)))
   5^1(0(1(x1))) -> 5^1(4(0(1(x1))))
   5^1(0(1(x1))) -> 5^1(0(2(1(2(x1)))))
   5^1(0(1(x1))) -> 0^1(2(1(2(x1))))
   5^1(0(1(x1))) -> 1^1(2(x1))
   5^1(0(1(x1))) -> 0^1(1(4(5(4(4(x1))))))
   5^1(0(1(x1))) -> 1^1(4(5(4(4(x1)))))
   5^1(0(1(x1))) -> 5^1(4(4(x1)))
   5^1(0(1(x1))) -> 0^1(5(4(1(4(4(x1))))))
   5^1(0(1(x1))) -> 5^1(4(1(4(4(x1)))))
   5^1(0(1(x1))) -> 1^1(4(4(x1)))
   5^1(0(1(x1))) -> 5^1(0(4(3(0(1(x1))))))
   5^1(0(1(x1))) -> 0^1(4(3(0(1(x1)))))
   5^1(1(0(x1))) -> 5^1(0(2(2(1(x1)))))
   5^1(1(0(x1))) -> 0^1(2(2(1(x1))))
   5^1(1(0(x1))) -> 1^1(x1)
   5^1(1(0(x1))) -> 5^1(0(5(4(1(x1)))))
   5^1(1(0(x1))) -> 0^1(5(4(1(x1))))
   5^1(1(0(x1))) -> 5^1(4(1(x1)))
   5^1(1(0(x1))) -> 0^1(5(0(2(2(1(x1))))))
   5^1(1(0(x1))) -> 1^1(4(0(5(2(3(x1))))))
   5^1(1(0(x1))) -> 0^1(5(2(3(x1))))
   5^1(1(0(x1))) -> 5^1(2(3(x1)))
   5^1(1(0(x1))) -> 1^1(5(0(4(4(2(x1))))))
   5^1(1(0(x1))) -> 5^1(0(4(4(2(x1)))))
   5^1(1(0(x1))) -> 0^1(4(4(2(x1))))
   5^1(1(0(x1))) -> 1^1(0(4(5(x1))))
   5^1(1(0(x1))) -> 0^1(4(5(x1)))
   5^1(1(0(x1))) -> 5^1(x1)
   5^1(1(1(x1))) -> 1^1(1(5(4(x1))))
   5^1(1(1(x1))) -> 1^1(5(4(x1)))
   5^1(1(1(x1))) -> 5^1(4(x1))
   5^1(1(1(x1))) -> 5^1(4(1(1(x1))))
   5^1(1(1(x1))) -> 1^1(5(3(4(1(x1)))))
   5^1(1(1(x1))) -> 5^1(3(4(1(x1))))
   5^1(1(1(x1))) -> 1^1(1(4(5(4(4(x1))))))
   5^1(1(1(x1))) -> 1^1(4(5(4(4(x1)))))
   5^1(1(1(x1))) -> 5^1(4(4(x1)))
   5^1(1(1(x1))) -> 5^1(2(3(1(1(x1)))))
   5^1(1(1(x1))) -> 1^1(2(1(5(4(x1)))))
   0^1(1(3(0(x1)))) -> 0^1(2(0(2(1(3(x1))))))
   0^1(1(3(0(x1)))) -> 0^1(2(1(3(x1))))
   0^1(1(3(0(x1)))) -> 1^1(3(x1))
   0^1(1(5(0(x1)))) -> 0^1(0(5(4(1(5(x1))))))
   0^1(1(5(0(x1)))) -> 0^1(5(4(1(5(x1)))))
   0^1(1(5(0(x1)))) -> 5^1(4(1(5(x1))))
   0^1(1(5(0(x1)))) -> 1^1(5(x1))
   0^1(1(5(0(x1)))) -> 5^1(x1)
   0^1(1(5(0(x1)))) -> 0^1(5(4(2(1(0(x1))))))
   0^1(1(5(0(x1)))) -> 5^1(4(2(1(0(x1)))))
   0^1(1(5(0(x1)))) -> 1^1(0(x1))
   0^1(3(0(1(x1)))) -> 0^1(0(4(1(3(0(x1))))))
   0^1(3(0(1(x1)))) -> 0^1(4(1(3(0(x1)))))
   0^1(3(0(1(x1)))) -> 1^1(3(0(x1)))
   0^1(3(0(1(x1)))) -> 0^1(x1)
   0^1(3(1(0(x1)))) -> 0^1(0(2(3(1(x1)))))
   0^1(3(1(0(x1)))) -> 0^1(2(3(1(x1))))
   0^1(3(1(0(x1)))) -> 1^1(x1)
   0^1(3(1(1(x1)))) -> 5^1(1(1(0(3(4(x1))))))
   0^1(3(1(1(x1)))) -> 1^1(1(0(3(4(x1)))))
   0^1(3(1(1(x1)))) -> 1^1(0(3(4(x1))))
   0^1(3(1(1(x1)))) -> 0^1(3(4(x1)))
   5^1(0(1(0(x1)))) -> 5^1(0(0(4(1(3(x1))))))
   5^1(0(1(0(x1)))) -> 0^1(0(4(1(3(x1)))))
   5^1(0(1(0(x1)))) -> 0^1(4(1(3(x1))))
   5^1(0(1(0(x1)))) -> 1^1(3(x1))
   5^1(1(2(0(x1)))) -> 1^1(4(0(5(4(2(x1))))))
   5^1(1(2(0(x1)))) -> 0^1(5(4(2(x1))))
   5^1(1(2(0(x1)))) -> 5^1(4(2(x1)))
   5^1(1(2(0(x1)))) -> 5^1(0(4(2(2(1(x1))))))
   5^1(1(2(0(x1)))) -> 0^1(4(2(2(1(x1)))))
   5^1(1(2(0(x1)))) -> 1^1(x1)
   5^1(1(4(0(x1)))) -> 1^1(5(4(0(2(3(x1))))))
   5^1(1(4(0(x1)))) -> 5^1(4(0(2(3(x1)))))
   5^1(1(4(0(x1)))) -> 0^1(2(3(x1)))
   5^1(1(4(0(x1)))) -> 5^1(2(1(3(0(x1)))))
   5^1(1(4(0(x1)))) -> 1^1(3(0(x1)))
   5^1(1(5(1(x1)))) -> 5^1(4(1(5(1(x1)))))
   5^1(3(0(1(x1)))) -> 0^1(1(5(2(3(x1)))))
   5^1(3(0(1(x1)))) -> 1^1(5(2(3(x1))))
   5^1(3(0(1(x1)))) -> 5^1(2(3(x1)))
   5^1(3(1(0(x1)))) -> 1^1(4(3(5(0(x1)))))
   5^1(3(1(0(x1)))) -> 5^1(0(x1))
   5^1(3(1(0(x1)))) -> 1^1(5(0(4(3(x1)))))
   5^1(3(1(0(x1)))) -> 5^1(0(4(3(x1))))
   5^1(3(1(0(x1)))) -> 0^1(4(3(x1)))
   5^1(3(1(0(x1)))) -> 5^1(4(3(1(0(x1)))))
   5^1(3(1(0(x1)))) -> 1^1(3(0(4(3(5(x1))))))
   5^1(3(1(0(x1)))) -> 0^1(4(3(5(x1))))
   5^1(3(1(0(x1)))) -> 5^1(x1)
   5^1(3(1(1(x1)))) -> 1^1(1(5(3(3(4(x1))))))
   5^1(3(1(1(x1)))) -> 1^1(5(3(3(4(x1)))))
   5^1(3(1(1(x1)))) -> 5^1(3(3(4(x1))))
   0^1(1(2(5(0(x1))))) -> 1^1(5(4(0(2(0(x1))))))
   0^1(1(2(5(0(x1))))) -> 5^1(4(0(2(0(x1)))))
   0^1(1(2(5(0(x1))))) -> 0^1(2(0(x1)))
   0^1(1(4(2(0(x1))))) -> 1^1(0(4(2(3(0(x1))))))
   0^1(1(4(2(0(x1))))) -> 0^1(4(2(3(0(x1)))))
   1^1(4(5(1(0(x1))))) -> 5^1(4(2(1(1(0(x1))))))
   1^1(4(5(1(0(x1))))) -> 1^1(1(0(x1)))
   5^1(0(1(4(0(x1))))) -> 1^1(4(5(4(0(0(x1))))))
   5^1(0(1(4(0(x1))))) -> 5^1(4(0(0(x1))))
   5^1(0(1(4(0(x1))))) -> 0^1(0(x1))
   5^1(5(1(0(0(x1))))) -> 5^1(5(0(4(1(0(x1))))))
   5^1(5(1(0(0(x1))))) -> 5^1(0(4(1(0(x1)))))
   5^1(5(1(0(0(x1))))) -> 0^1(4(1(0(x1))))
   5^1(5(1(0(0(x1))))) -> 1^1(0(x1))

The TRS R consists of the following rules:

   0(0(1(x1))) -> 0(2(3(0(1(x1)))))
   0(0(1(x1))) -> 0(4(0(5(4(1(x1))))))
   0(0(1(x1))) -> 2(1(0(0(3(4(x1))))))
   0(0(1(x1))) -> 4(0(5(4(0(1(x1))))))
   0(1(0(x1))) -> 0(0(2(1(2(x1)))))
   0(1(0(x1))) -> 1(0(0(5(4(x1)))))
   0(1(0(x1))) -> 0(0(2(5(4(1(x1))))))
   0(1(1(x1))) -> 1(0(3(4(1(x1)))))
   0(1(1(x1))) -> 5(0(3(4(1(1(x1))))))
   5(0(1(x1))) -> 0(5(4(1(x1))))
   5(0(1(x1))) -> 2(5(4(0(1(x1)))))
   5(0(1(x1))) -> 5(0(2(1(2(x1)))))
   5(0(1(x1))) -> 0(1(4(5(4(4(x1))))))
   5(0(1(x1))) -> 0(5(4(1(4(4(x1))))))
   5(0(1(x1))) -> 5(0(4(3(0(1(x1))))))
   5(1(0(x1))) -> 5(0(2(2(1(x1)))))
   5(1(0(x1))) -> 5(0(5(4(1(x1)))))
   5(1(0(x1))) -> 0(5(0(2(2(1(x1))))))
   5(1(0(x1))) -> 1(4(0(5(2(3(x1))))))
   5(1(0(x1))) -> 1(5(0(4(4(2(x1))))))
   5(1(0(x1))) -> 4(4(1(0(4(5(x1))))))
   5(1(1(x1))) -> 1(1(5(4(x1))))
   5(1(1(x1))) -> 5(4(1(1(x1))))
   5(1(1(x1))) -> 1(5(3(4(1(x1)))))
   5(1(1(x1))) -> 1(1(4(5(4(4(x1))))))
   5(1(1(x1))) -> 3(5(2(3(1(1(x1))))))
   5(1(1(x1))) -> 4(1(2(1(5(4(x1))))))
   0(1(3(0(x1)))) -> 0(2(0(2(1(3(x1))))))
   0(1(5(0(x1)))) -> 0(0(5(4(1(5(x1))))))
   0(1(5(0(x1)))) -> 0(5(4(2(1(0(x1))))))
   0(3(0(1(x1)))) -> 0(0(4(1(3(0(x1))))))
   0(3(1(0(x1)))) -> 0(0(2(3(1(x1)))))
   0(3(1(1(x1)))) -> 5(1(1(0(3(4(x1))))))
   5(0(1(0(x1)))) -> 5(0(0(4(1(3(x1))))))
   5(1(2(0(x1)))) -> 1(4(0(5(4(2(x1))))))
   5(1(2(0(x1)))) -> 5(0(4(2(2(1(x1))))))
   5(1(4(0(x1)))) -> 1(5(4(0(2(3(x1))))))
   5(1(4(0(x1)))) -> 4(5(2(1(3(0(x1))))))
   5(1(5(1(x1)))) -> 5(4(1(5(1(x1)))))
   5(3(0(1(x1)))) -> 0(1(5(2(3(x1)))))
   5(3(1(0(x1)))) -> 1(4(3(5(0(x1)))))
   5(3(1(0(x1)))) -> 1(5(0(4(3(x1)))))
   5(3(1(0(x1)))) -> 5(4(3(1(0(x1)))))
   5(3(1(0(x1)))) -> 1(3(0(4(3(5(x1))))))
   5(3(1(1(x1)))) -> 1(1(5(3(3(4(x1))))))
   0(1(2(5(0(x1))))) -> 1(5(4(0(2(0(x1))))))
   0(1(4(2(0(x1))))) -> 1(0(4(2(3(0(x1))))))
   1(4(5(1(0(x1))))) -> 5(4(2(1(1(0(x1))))))
   5(0(1(4(0(x1))))) -> 1(4(5(4(0(0(x1))))))
   5(5(1(0(0(x1))))) -> 5(5(0(4(1(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 125 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   1^1(4(5(1(0(x1))))) -> 1^1(1(0(x1)))

The TRS R consists of the following rules:

   0(0(1(x1))) -> 0(2(3(0(1(x1)))))
   0(0(1(x1))) -> 0(4(0(5(4(1(x1))))))
   0(0(1(x1))) -> 2(1(0(0(3(4(x1))))))
   0(0(1(x1))) -> 4(0(5(4(0(1(x1))))))
   0(1(0(x1))) -> 0(0(2(1(2(x1)))))
   0(1(0(x1))) -> 1(0(0(5(4(x1)))))
   0(1(0(x1))) -> 0(0(2(5(4(1(x1))))))
   0(1(1(x1))) -> 1(0(3(4(1(x1)))))
   0(1(1(x1))) -> 5(0(3(4(1(1(x1))))))
   5(0(1(x1))) -> 0(5(4(1(x1))))
   5(0(1(x1))) -> 2(5(4(0(1(x1)))))
   5(0(1(x1))) -> 5(0(2(1(2(x1)))))
   5(0(1(x1))) -> 0(1(4(5(4(4(x1))))))
   5(0(1(x1))) -> 0(5(4(1(4(4(x1))))))
   5(0(1(x1))) -> 5(0(4(3(0(1(x1))))))
   5(1(0(x1))) -> 5(0(2(2(1(x1)))))
   5(1(0(x1))) -> 5(0(5(4(1(x1)))))
   5(1(0(x1))) -> 0(5(0(2(2(1(x1))))))
   5(1(0(x1))) -> 1(4(0(5(2(3(x1))))))
   5(1(0(x1))) -> 1(5(0(4(4(2(x1))))))
   5(1(0(x1))) -> 4(4(1(0(4(5(x1))))))
   5(1(1(x1))) -> 1(1(5(4(x1))))
   5(1(1(x1))) -> 5(4(1(1(x1))))
   5(1(1(x1))) -> 1(5(3(4(1(x1)))))
   5(1(1(x1))) -> 1(1(4(5(4(4(x1))))))
   5(1(1(x1))) -> 3(5(2(3(1(1(x1))))))
   5(1(1(x1))) -> 4(1(2(1(5(4(x1))))))
   0(1(3(0(x1)))) -> 0(2(0(2(1(3(x1))))))
   0(1(5(0(x1)))) -> 0(0(5(4(1(5(x1))))))
   0(1(5(0(x1)))) -> 0(5(4(2(1(0(x1))))))
   0(3(0(1(x1)))) -> 0(0(4(1(3(0(x1))))))
   0(3(1(0(x1)))) -> 0(0(2(3(1(x1)))))
   0(3(1(1(x1)))) -> 5(1(1(0(3(4(x1))))))
   5(0(1(0(x1)))) -> 5(0(0(4(1(3(x1))))))
   5(1(2(0(x1)))) -> 1(4(0(5(4(2(x1))))))
   5(1(2(0(x1)))) -> 5(0(4(2(2(1(x1))))))
   5(1(4(0(x1)))) -> 1(5(4(0(2(3(x1))))))
   5(1(4(0(x1)))) -> 4(5(2(1(3(0(x1))))))
   5(1(5(1(x1)))) -> 5(4(1(5(1(x1)))))
   5(3(0(1(x1)))) -> 0(1(5(2(3(x1)))))
   5(3(1(0(x1)))) -> 1(4(3(5(0(x1)))))
   5(3(1(0(x1)))) -> 1(5(0(4(3(x1)))))
   5(3(1(0(x1)))) -> 5(4(3(1(0(x1)))))
   5(3(1(0(x1)))) -> 1(3(0(4(3(5(x1))))))
   5(3(1(1(x1)))) -> 1(1(5(3(3(4(x1))))))
   0(1(2(5(0(x1))))) -> 1(5(4(0(2(0(x1))))))
   0(1(4(2(0(x1))))) -> 1(0(4(2(3(0(x1))))))
   1(4(5(1(0(x1))))) -> 5(4(2(1(1(0(x1))))))
   5(0(1(4(0(x1))))) -> 1(4(5(4(0(0(x1))))))
   5(5(1(0(0(x1))))) -> 5(5(0(4(1(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*1^1(4(5(1(0(x1))))) -> 1^1(1(0(x1)))
The graph contains the following edges 1 > 1


----------------------------------------

(7)
YES

----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(1(5(0(x1)))) -> 5^1(x1)
   5^1(1(0(x1))) -> 5^1(x1)
   5^1(3(1(0(x1)))) -> 5^1(0(x1))
   5^1(3(1(0(x1)))) -> 5^1(x1)
   5^1(0(1(4(0(x1))))) -> 0^1(0(x1))
   0^1(3(0(1(x1)))) -> 0^1(x1)

The TRS R consists of the following rules:

   0(0(1(x1))) -> 0(2(3(0(1(x1)))))
   0(0(1(x1))) -> 0(4(0(5(4(1(x1))))))
   0(0(1(x1))) -> 2(1(0(0(3(4(x1))))))
   0(0(1(x1))) -> 4(0(5(4(0(1(x1))))))
   0(1(0(x1))) -> 0(0(2(1(2(x1)))))
   0(1(0(x1))) -> 1(0(0(5(4(x1)))))
   0(1(0(x1))) -> 0(0(2(5(4(1(x1))))))
   0(1(1(x1))) -> 1(0(3(4(1(x1)))))
   0(1(1(x1))) -> 5(0(3(4(1(1(x1))))))
   5(0(1(x1))) -> 0(5(4(1(x1))))
   5(0(1(x1))) -> 2(5(4(0(1(x1)))))
   5(0(1(x1))) -> 5(0(2(1(2(x1)))))
   5(0(1(x1))) -> 0(1(4(5(4(4(x1))))))
   5(0(1(x1))) -> 0(5(4(1(4(4(x1))))))
   5(0(1(x1))) -> 5(0(4(3(0(1(x1))))))
   5(1(0(x1))) -> 5(0(2(2(1(x1)))))
   5(1(0(x1))) -> 5(0(5(4(1(x1)))))
   5(1(0(x1))) -> 0(5(0(2(2(1(x1))))))
   5(1(0(x1))) -> 1(4(0(5(2(3(x1))))))
   5(1(0(x1))) -> 1(5(0(4(4(2(x1))))))
   5(1(0(x1))) -> 4(4(1(0(4(5(x1))))))
   5(1(1(x1))) -> 1(1(5(4(x1))))
   5(1(1(x1))) -> 5(4(1(1(x1))))
   5(1(1(x1))) -> 1(5(3(4(1(x1)))))
   5(1(1(x1))) -> 1(1(4(5(4(4(x1))))))
   5(1(1(x1))) -> 3(5(2(3(1(1(x1))))))
   5(1(1(x1))) -> 4(1(2(1(5(4(x1))))))
   0(1(3(0(x1)))) -> 0(2(0(2(1(3(x1))))))
   0(1(5(0(x1)))) -> 0(0(5(4(1(5(x1))))))
   0(1(5(0(x1)))) -> 0(5(4(2(1(0(x1))))))
   0(3(0(1(x1)))) -> 0(0(4(1(3(0(x1))))))
   0(3(1(0(x1)))) -> 0(0(2(3(1(x1)))))
   0(3(1(1(x1)))) -> 5(1(1(0(3(4(x1))))))
   5(0(1(0(x1)))) -> 5(0(0(4(1(3(x1))))))
   5(1(2(0(x1)))) -> 1(4(0(5(4(2(x1))))))
   5(1(2(0(x1)))) -> 5(0(4(2(2(1(x1))))))
   5(1(4(0(x1)))) -> 1(5(4(0(2(3(x1))))))
   5(1(4(0(x1)))) -> 4(5(2(1(3(0(x1))))))
   5(1(5(1(x1)))) -> 5(4(1(5(1(x1)))))
   5(3(0(1(x1)))) -> 0(1(5(2(3(x1)))))
   5(3(1(0(x1)))) -> 1(4(3(5(0(x1)))))
   5(3(1(0(x1)))) -> 1(5(0(4(3(x1)))))
   5(3(1(0(x1)))) -> 5(4(3(1(0(x1)))))
   5(3(1(0(x1)))) -> 1(3(0(4(3(5(x1))))))
   5(3(1(1(x1)))) -> 1(1(5(3(3(4(x1))))))
   0(1(2(5(0(x1))))) -> 1(5(4(0(2(0(x1))))))
   0(1(4(2(0(x1))))) -> 1(0(4(2(3(0(x1))))))
   1(4(5(1(0(x1))))) -> 5(4(2(1(1(0(x1))))))
   5(0(1(4(0(x1))))) -> 1(4(5(4(0(0(x1))))))
   5(5(1(0(0(x1))))) -> 5(5(0(4(1(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*5^1(0(1(4(0(x1))))) -> 0^1(0(x1))
The graph contains the following edges 1 > 1


*0^1(3(0(1(x1)))) -> 0^1(x1)
The graph contains the following edges 1 > 1


*0^1(1(5(0(x1)))) -> 5^1(x1)
The graph contains the following edges 1 > 1


*5^1(1(0(x1))) -> 5^1(x1)
The graph contains the following edges 1 > 1


*5^1(3(1(0(x1)))) -> 5^1(0(x1))
The graph contains the following edges 1 > 1


*5^1(3(1(0(x1)))) -> 5^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
