YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/amdQU.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) MRRProof [EQUIVALENT, 42 ms]
(4) QDP
(5) MRRProof [EQUIVALENT, 25 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 6 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)
   f(f(x1)) -> a(x1)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> B(d(x1))
   A(b(x1)) -> D(x1)
   A(c(x1)) -> D(d(d(x1)))
   A(c(x1)) -> D(d(x1))
   A(c(x1)) -> D(x1)
   B(d(x1)) -> A(c(b(x1)))
   B(d(x1)) -> C(b(x1))
   B(d(x1)) -> B(x1)
   C(f(x1)) -> D(d(c(x1)))
   C(f(x1)) -> D(c(x1))
   C(f(x1)) -> C(x1)
   D(d(x1)) -> F(x1)
   F(f(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)
   f(f(x1)) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A(b(x1)) -> D(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(B(x_1)) = 1 + 2*x_1
   POL(C(x_1)) = x_1
   POL(D(x_1)) = x_1
   POL(F(x_1)) = x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = 1 + 2*x_1
   POL(c(x_1)) = x_1
   POL(d(x_1)) = x_1
   POL(f(x_1)) = x_1


----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> B(d(x1))
   A(c(x1)) -> D(d(d(x1)))
   A(c(x1)) -> D(d(x1))
   A(c(x1)) -> D(x1)
   B(d(x1)) -> A(c(b(x1)))
   B(d(x1)) -> C(b(x1))
   B(d(x1)) -> B(x1)
   C(f(x1)) -> D(d(c(x1)))
   C(f(x1)) -> D(c(x1))
   C(f(x1)) -> C(x1)
   D(d(x1)) -> F(x1)
   F(f(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)
   f(f(x1)) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A(c(x1)) -> D(d(d(x1)))
   A(c(x1)) -> D(d(x1))
   A(c(x1)) -> D(x1)
   B(d(x1)) -> C(b(x1))
   B(d(x1)) -> B(x1)
   C(f(x1)) -> D(d(c(x1)))
   C(f(x1)) -> D(c(x1))
   C(f(x1)) -> C(x1)

Strictly oriented rules of the TRS R:

   f(f(x1)) -> a(x1)

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3 + x_1
   POL(B(x_1)) = 3*x_1
   POL(C(x_1)) = 2 + x_1
   POL(D(x_1)) = x_1
   POL(F(x_1)) = 1 + x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 3*x_1
   POL(c(x_1)) = x_1
   POL(d(x_1)) = 1 + x_1
   POL(f(x_1)) = 2 + x_1


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> B(d(x1))
   B(d(x1)) -> A(c(b(x1)))
   D(d(x1)) -> F(x1)
   F(f(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(d(x1)) -> A(c(b(x1)))
   A(b(x1)) -> B(d(x1))

The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(b(x1)) -> B(d(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A_1(x_1) ) = max{0, x_1 - 1}
POL( c_1(x_1) ) = 1
POL( b_1(x_1) ) = 2
POL( d_1(x_1) ) = 1
POL( a_1(x_1) ) = 1
POL( f_1(x_1) ) = 0
POL( B_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(d(x1)) -> A(c(b(x1)))

The TRS R consists of the following rules:

   a(b(x1)) -> b(d(x1))
   a(c(x1)) -> d(d(d(x1)))
   b(d(x1)) -> a(c(b(x1)))
   c(f(x1)) -> d(d(c(x1)))
   d(d(x1)) -> f(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(12)
TRUE
