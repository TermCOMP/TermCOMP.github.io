YES
**************************************************
summary
**************************************************
SRS with 9 rules on 6 letters       weights
SRS with 8 rules on 6 letters       DP
SRS with 19 strict rules and 8 weak rules on 10 letters       weights
SRS with 11 strict rules and 8 weak rules on 10 letters       EDG
3 sub-proofs
  1 SRS with 6 strict rules and 8 weak rules on 7 letters       Usable
  SRS with 6 strict rules and 7 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 5 strict rules and 7 weak rules on 5 letters       EDG
  SRS with 5 strict rules and 7 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 3 strict rules and 7 weak rules on 5 letters       EDG
  SRS with 3 strict rules and 7 weak rules on 5 letters       Usable
  SRS with 3 strict rules and 3 weak rules on 5 letters       weights
  SRS with 1 strict rules and 2 weak rules on 4 letters       EDG
  SRS with 1 strict rules and 2 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 8 weak rules on 7 letters       Usable
  SRS with 2 strict rules and 3 weak rules on 5 letters       weights
  SRS with 0 strict rules and 2 weak rules on 3 letters       EDG

  3 SRS with 1 strict rules and 8 weak rules on 7 letters       Usable
  SRS with 1 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [b, c, a] {- Input 0 -}
  [b, c] -> [c, b, b] {- Input 1 -}
  [a, c] -> [c, a, b] {- Input 2 -}
  [a, a] -> [a, d, d, d] {- Input 3 -}
  [d, a] -> [d, d, c] {- Input 4 -}
  [a, d, d, c] -> [a, a, a, d] {- Input 5 -}
  [e, e, f, f] -> [f, f, f, e, e] {- Input 6 -}
  [e] -> [a] {- Input 7 -}
  [b, d] -> [d, d] {- Input 8 -}
reason
  (d, 0/1)
  (a, 0/1)
  (f, 0/1)
  (b, 0/1)
  (e, 1/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [a, b] -> [b, c, a] {- Input 0 -}
  [b, c] -> [c, b, b] {- Input 1 -}
  [a, c] -> [c, a, b] {- Input 2 -}
  [a, a] -> [a, d, d, d] {- Input 3 -}
  [d, a] -> [d, d, c] {- Input 4 -}
  [a, d, d, c] -> [a, a, a, d] {- Input 5 -}
  [e, e, f, f] -> [f, f, f, e, e] {- Input 6 -}
  [b, d] -> [d, d] {- Input 8 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
  [d#, a] |-> [d#, d, c] {- DP (Top 0) (Input 4) -}
  [d#, a] |-> [d#, c] {- DP (Top 1) (Input 4) -}
  [a#, d, d, c] |-> [d#] {- DP (Top 3) (Input 5) -}
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, a] |-> [d#] {- DP (Top 3) (Input 3) -}
  [a#, a] |-> [d#, d] {- DP (Top 2) (Input 3) -}
  [a#, a] |-> [d#, d, d] {- DP (Top 1) (Input 3) -}
  [a#, a] |-> [a#, d, d, d] {- DP (Top 0) (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, b] |-> [b#, c, a] {- DP (Top 0) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [b#, d] |-> [d#, d] {- DP (Top 0) (Input 8) -}
  [b#, c] |-> [b#] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [e#, e, f, f] |-> [e#] {- DP (Top 4) (Input 6) -}
  [e#, e, f, f] |-> [e#, e] {- DP (Top 3) (Input 6) -}
reason
  (d, 0/1)
  (a, 0/1)
  (f, 0/1)
  (b, 0/1)
  (e, 2/1)
  (c, 0/1)
  (d#, 0/1)
  (a#, 2/1)
  (b#, 1/1)
  (e#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
  [d#, a] |-> [d#, d, c] {- DP (Top 0) (Input 4) -}
  [d#, a] |-> [d#, c] {- DP (Top 1) (Input 4) -}
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, a] |-> [a#, d, d, d] {- DP (Top 0) (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [e#, e, f, f] |-> [e#, e] {- DP (Top 3) (Input 6) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, a] |-> [a#, d, d, d] {- DP (Top 0) (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, a] |-> [a#, d, d, d] {- DP (Top 0) (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  ( d
  , Wk  / 0A  0A  0A  0A  - \
        | -4A -4A 0A  0A  - |
        | -4A -4A -4A 0A  - |
        | -4A -4A -4A -4A - |
        \ -   -   -   -   - / )
  ( a
  , Wk  / 0A  0A  0A  0A - \
        | 0A  0A  0A  0A - |
        | 0A  0A  0A  0A - |
        | -4A -4A -4A 0A - |
        \ -   -   -   -  - / )
  ( b
  , Wk  / 0A 0A 0A 0A - \
        | 0A 0A 0A 0A - |
        | 0A 0A 0A 0A - |
        | 0A 0A 0A 0A - |
        \ -  -  -  -  - / )
  ( c
  , Wk  / 0A 0A 0A 0A - \
        | 0A 0A 0A 0A - |
        | 0A 0A 0A 0A - |
        | 0A 0A 0A 0A - |
        \ -  -  -  -  - / )
  ( a#
  , Wk  / 2A 5A 5A 5A - \
        | 2A 5A 5A 5A - |
        | 2A 5A 5A 5A - |
        | 2A 5A 5A 5A - |
        \ -  -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, d] {- DP (Top 1) (Input 5) -}
  [a#, d, d, c] |-> [a#, a, a, d] {- DP (Top 0) (Input 5) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  ( d
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 16A 17A 19A - \
        | 16A 17A 19A - |
        | 16A 17A 19A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
      [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
      [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
      [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
   property Termination
has value Just True
for SRS
  [a#, d, d, c] |-> [a#, d] {- DP (Top 2) (Input 5) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [a#, c] |-> [a#, b] {- DP (Top 1) (Input 2) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  (d, 0/1)
  (a, 2/1)
  (b, 0/1)
  (c, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
      [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 0) -}
reason
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
      [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
      [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
      [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
      [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  (d, 0/1)
  (a, 2/1)
  (b, 0/1)
  (c, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [e#, e, f, f] |-> [e#, e] {- DP (Top 3) (Input 6) -}
  [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
  [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
  [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
  [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
  [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
  [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [a, b] ->= [b, c, a] {- DP Nontop (Input 0) -}
      [b, c] ->= [c, b, b] {- DP Nontop (Input 1) -}
      [a, c] ->= [c, a, b] {- DP Nontop (Input 2) -}
      [a, a] ->= [a, d, d, d] {- DP Nontop (Input 3) -}
      [d, a] ->= [d, d, c] {- DP Nontop (Input 4) -}
      [a, d, d, c] ->= [a, a, a, d] {- DP Nontop (Input 5) -}
      [b, d] ->= [d, d] {- DP Nontop (Input 8) -}
   property Termination
has value Just True
for SRS
  [e#, e, f, f] |-> [e#, e] {- DP (Top 3) (Input 6) -}
  [e, e, f, f] ->= [f, f, f, e, e] {- DP Nontop (Input 6) -}
reason
  ( f
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( e
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( e#
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (9,6)\Weight(8,6)\Deepee(19/8,10)\Weight(11/8,10)\EDG[(6/8,7)\Usable(6/7,5)\Matrix{\Arctic}{4}\EDG(5/7,5)\Matrix{\Arctic}{3}\EDG(3/7,5)\Usable(3/3,5)\Weight\EDG(1/2,4)\Usable(1,2)\Weight(0,0)\EDG[],(2/8,7)\Usable(2/3,5)\Weight(0/2,3)\EDG[],(1/8,7)\Usable(1/1,3)\Matrix{\Natural}{2}(0,0)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))
