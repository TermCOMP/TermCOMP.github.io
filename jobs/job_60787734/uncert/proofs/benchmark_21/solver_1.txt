NO
**************************************************
summary
**************************************************
SRS with 32 rules on 19 letters       looping derivation
from
  [AAA, A, BAAAB, BAAABA, a, a, a]
to
  [AAA, AAA, A, BAAAB, BAAABA, a, a, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a]
via 51 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [A, a] -> [AA] {- Input 0 -}
  [A, b] -> [A, B] {- Input 1 -}
  [AA, a] -> [AAA] {- Input 2 -}
  [AA, b] -> [AA, B] {- Input 3 -}
  [AAA, a] -> [AAA, A] {- Input 4 -}
  [AAA, b] -> [AAAB] {- Input 5 -}
  [AAAB, a] -> [AAAB, A] {- Input 6 -}
  [AAAB, b] -> [AAABB] {- Input 7 -}
  [AAABB, a] -> [AAABBA] {- Input 8 -}
  [AAABB, b] -> [AAABB, B] {- Input 9 -}
  [AAABBA, a] -> [AAABBAA] {- Input 10 -}
  [AAABBA, b] -> [AAABBA, B] {- Input 11 -}
  [AAABBAA, a] -> [AAABBAAA] {- Input 12 -}
  [AAABBAA, b] -> [AAABBAA, B] {- Input 13 -}
  [AAABBAAA, a] -> [AAABBAAA, A] {- Input 14 -}
  [AAABBAAA, b] -> [AAABBAAAB] {- Input 15 -}
  [AAABBAAAB, a] -> [AAABBAAABA] {- Input 16 -}
  [AAABBAAAB, b] -> [AAABBAAAB, B] {- Input 17 -}
  [AAABBAAABA] -> [b, a, a, a, b, a, a] {- Input 18 -}
  [B, a] -> [BA] {- Input 19 -}
  [B, b] -> [B, B] {- Input 20 -}
  [BA, a] -> [BAA] {- Input 21 -}
  [BA, b] -> [BA, B] {- Input 22 -}
  [BAA, a] -> [BAAA] {- Input 23 -}
  [BAA, b] -> [BAA, B] {- Input 24 -}
  [BAAA, a] -> [BAAA, A] {- Input 25 -}
  [BAAA, b] -> [BAAAB] {- Input 26 -}
  [BAAAB, a] -> [BAAABA] {- Input 27 -}
  [BAAAB, b] -> [BAAAB, B] {- Input 28 -}
  [BAAABA, a] -> [BAAABAA] {- Input 29 -}
  [BAAABA, b] -> [BAAABA, B] {- Input 30 -}
  [BAAABAA] -> [a, a, a, b, b, a, a, a, b, a] {- Input 31 -}
reason
  Nontermination
    Derive   { from = [AAA, A, BAAAB, BAAABA, a, a, a], via = [(Step   { rule = 29, position = 3}, [AAA, A, BAAAB, BAAABAA, a, a]), (Step   { rule = 31, position = 3}, [AAA, A, BAAAB, a, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 27, position = 2}, [AAA, A, BAAABA, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 29, position = 2}, [AAA, A, BAAABAA, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 31, position = 2}, [AAA, A, a, a, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 0, position = 1}, [AAA, AA, a, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 2, position = 1}, [AAA, AAA, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 4, position = 1}, [AAA, AAA, A, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 1, position = 2}, [AAA, AAA, A, B, b, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 20, position = 3}, [AAA, AAA, A, B, B, a, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 19, position = 4}, [AAA, AAA, A, B, BA, a, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 21, position = 4}, [AAA, AAA, A, B, BAA, a, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 23, position = 4}, [AAA, AAA, A, B, BAAA, b, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 26, position = 4}, [AAA, AAA, A, B, BAAAB, a, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 27, position = 4}, [AAA, AAA, A, B, BAAABA, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 29, position = 4}, [AAA, AAA, A, B, BAAABAA, b, b, a, a, a, b, a, a, a]), (Step   { rule = 31, position = 4}, [AAA, AAA, A, B, a, a, a, b, b, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 19, position = 3}, [AAA, AAA, A, BA, a, a, b, b, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 21, position = 3}, [AAA, AAA, A, BAA, a, b, b, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 23, position = 3}, [AAA, AAA, A, BAAA, b, b, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 26, position = 3}, [AAA, AAA, A, BAAAB, b, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 28, position = 3}, [AAA, AAA, A, BAAAB, B, a, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 19, position = 4}, [AAA, AAA, A, BAAAB, BA, a, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 21, position = 4}, [AAA, AAA, A, BAAAB, BAA, a, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 23, position = 4}, [AAA, AAA, A, BAAAB, BAAA, b, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 26, position = 4}, [AAA, AAA, A, BAAAB, BAAAB, a, b, b, a, a, a, b, a, a, a]), (Step   { rule = 27, position = 4}, [AAA, AAA, A, BAAAB, BAAABA, b, b, a, a, a, b, a, a, a]), (Step   { rule = 30, position = 4}, [AAA, AAA, A, BAAAB, BAAABA, B, b, a, a, a, b, a, a, a]), (Step   { rule = 20, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, B, B, a, a, a, b, a, a, a]), (Step   { rule = 19, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BA, a, a, b, a, a, a]), (Step   { rule = 21, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BAA, a, b, a, a, a]), (Step   { rule = 23, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BAAA, b, a, a, a]), (Step   { rule = 26, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BAAAB, a, a, a]), (Step   { rule = 27, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BAAABA, a, a]), (Step   { rule = 29, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, BAAABAA, a]), (Step   { rule = 31, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, B, a, a, a, b, b, a, a, a, b, a, a]), (Step   { rule = 19, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BA, a, a, b, b, a, a, a, b, a, a]), (Step   { rule = 21, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAA, a, b, b, a, a, a, b, a, a]), (Step   { rule = 23, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAAA, b, b, a, a, a, b, a, a]), (Step   { rule = 26, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, b, a, a, a, b, a, a]), (Step   { rule = 28, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, B, a, a, a, b, a, a]), (Step   { rule = 19, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BA, a, a, b, a, a]), (Step   { rule = 21, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BAA, a, b, a, a]), (Step   { rule = 23, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BAAA, b, a, a]), (Step   { rule = 26, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BAAAB, a, a]), (Step   { rule = 27, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BAAABA, a]), (Step   { rule = 29, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, BAAABAA]), (Step   { rule = 31, position = 6}, [AAA, AAA, A, BAAAB, BAAABA, BAAAB, a, a, a, b, b, a, a, a, b, a]), (Step   { rule = 27, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAAABA, a, a, b, b, a, a, a, b, a]), (Step   { rule = 29, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, BAAABAA, a, b, b, a, a, a, b, a]), (Step   { rule = 31, position = 5}, [AAA, AAA, A, BAAAB, BAAABA, a, a, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a])], to = [AAA, AAA, A, BAAAB, BAAABA, a, a, a, b, b, a, a, a, b, a, a, b, b, a, a, a, b, a]}

**************************************************
skeleton: (32,19)\Loop{51}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))
