YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VSehf.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (9) YES
    (10) QDP
        (11) MNOCProof [EQUIVALENT, 0 ms]
        (12) QDP
        (13) UsableRulesProof [EQUIVALENT, 1 ms]
        (14) QDP
        (15) QReductionProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 8 ms]
        (18) QDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(s(x1)) -> s(s(s(p(s(b(p(p(s(s(x1))))))))))
   b(s(x1)) -> s(s(s(p(p(s(s(c(p(s(p(s(x1))))))))))))
   c(s(x1)) -> p(s(p(s(a(p(s(p(s(x1)))))))))
   p(p(s(x1))) -> p(x1)
   p(s(x1)) -> x1

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> P(s(b(p(p(s(s(x1)))))))
   A(s(x1)) -> B(p(p(s(s(x1)))))
   A(s(x1)) -> P(p(s(s(x1))))
   A(s(x1)) -> P(s(s(x1)))
   B(s(x1)) -> P(p(s(s(c(p(s(p(s(x1)))))))))
   B(s(x1)) -> P(s(s(c(p(s(p(s(x1))))))))
   B(s(x1)) -> C(p(s(p(s(x1)))))
   B(s(x1)) -> P(s(p(s(x1))))
   B(s(x1)) -> P(s(x1))
   C(s(x1)) -> P(s(p(s(a(p(s(p(s(x1)))))))))
   C(s(x1)) -> P(s(a(p(s(p(s(x1)))))))
   C(s(x1)) -> A(p(s(p(s(x1)))))
   C(s(x1)) -> P(s(p(s(x1))))
   C(s(x1)) -> P(s(x1))
   P(p(s(x1))) -> P(x1)

The TRS R consists of the following rules:

   a(s(x1)) -> s(s(s(p(s(b(p(p(s(s(x1))))))))))
   b(s(x1)) -> s(s(s(p(p(s(s(c(p(s(p(s(x1))))))))))))
   c(s(x1)) -> p(s(p(s(a(p(s(p(s(x1)))))))))
   p(p(s(x1))) -> p(x1)
   p(s(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 11 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(p(s(x1))) -> P(x1)

The TRS R consists of the following rules:

   a(s(x1)) -> s(s(s(p(s(b(p(p(s(s(x1))))))))))
   b(s(x1)) -> s(s(s(p(p(s(s(c(p(s(p(s(x1))))))))))))
   c(s(x1)) -> p(s(p(s(a(p(s(p(s(x1)))))))))
   p(p(s(x1))) -> p(x1)
   p(s(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P(p(s(x1))) -> P(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P(p(s(x1))) -> P(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(9)
YES

----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> B(p(p(s(s(x1)))))
   B(s(x1)) -> C(p(s(p(s(x1)))))
   C(s(x1)) -> A(p(s(p(s(x1)))))

The TRS R consists of the following rules:

   a(s(x1)) -> s(s(s(p(s(b(p(p(s(s(x1))))))))))
   b(s(x1)) -> s(s(s(p(p(s(s(c(p(s(p(s(x1))))))))))))
   c(s(x1)) -> p(s(p(s(a(p(s(p(s(x1)))))))))
   p(p(s(x1))) -> p(x1)
   p(s(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> B(p(p(s(s(x1)))))
   B(s(x1)) -> C(p(s(p(s(x1)))))
   C(s(x1)) -> A(p(s(p(s(x1)))))

The TRS R consists of the following rules:

   a(s(x1)) -> s(s(s(p(s(b(p(p(s(s(x1))))))))))
   b(s(x1)) -> s(s(s(p(p(s(s(c(p(s(p(s(x1))))))))))))
   c(s(x1)) -> p(s(p(s(a(p(s(p(s(x1)))))))))
   p(p(s(x1))) -> p(x1)
   p(s(x1)) -> x1

The set Q consists of the following terms:

   a(s(x0))
   b(s(x0))
   c(s(x0))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> B(p(p(s(s(x1)))))
   B(s(x1)) -> C(p(s(p(s(x1)))))
   C(s(x1)) -> A(p(s(p(s(x1)))))

The TRS R consists of the following rules:

   p(s(x1)) -> x1

The set Q consists of the following terms:

   a(s(x0))
   b(s(x0))
   c(s(x0))
   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a(s(x0))
   b(s(x0))
   c(s(x0))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> B(p(p(s(s(x1)))))
   B(s(x1)) -> C(p(s(p(s(x1)))))
   C(s(x1)) -> A(p(s(p(s(x1)))))

The TRS R consists of the following rules:

   p(s(x1)) -> x1

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(s(x1)) -> A(p(s(p(s(x1)))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( A_1(x_1) ) = max{0, 2x_1 - 2}
POL( B_1(x_1) ) = max{0, 2x_1 - 2}
POL( C_1(x_1) ) = max{0, 2x_1 - 1}
POL( p_1(x_1) ) = max{0, x_1 - 1}
POL( s_1(x_1) ) = x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   p(s(x1)) -> x1


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(s(x1)) -> B(p(p(s(s(x1)))))
   B(s(x1)) -> C(p(s(p(s(x1)))))

The TRS R consists of the following rules:

   p(s(x1)) -> x1

The set Q consists of the following terms:

   p(s(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(20)
TRUE
