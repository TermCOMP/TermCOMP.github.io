YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gVc2w.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Strip Symbols Proof [SOUND, 0 ms]
(2) QTRS
(3) QTRS Reverse [EQUIVALENT, 0 ms]
(4) QTRS
(5) RFCMatchBoundsTRSProof [EQUIVALENT, 0 ms]
(6) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(b(a(a(b(a(b(a(x1)))))))))) -> a(a(b(a(b(a(b(a(b(a(a(b(a(b(x1))))))))))))))

Q is empty.

----------------------------------------

(1) Strip Symbols Proof (SOUND)
We were given the following TRS:

   a(b(a(b(a(a(b(a(b(a(x1)))))))))) -> a(a(b(a(b(a(b(a(b(a(a(b(a(b(x1))))))))))))))

By stripping symbols from the only rule of the system, we obtained the following TRS [ENDRULLIS]: 

   b(a(b(a(a(b(a(b(a(x1))))))))) -> a(b(a(b(a(b(a(b(a(a(b(a(b(x1)))))))))))))

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(b(a(a(b(a(b(a(x1))))))))) -> a(b(a(b(a(b(a(b(a(a(b(a(b(x1)))))))))))))

Q is empty.

----------------------------------------

(3) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(b(a(a(b(a(b(x1))))))))) -> b(a(b(a(a(b(a(b(a(b(a(b(a(x1)))))))))))))

Q is empty.

----------------------------------------

(5) RFCMatchBoundsTRSProof (EQUIVALENT)
Termination of the TRS R could be shown with a Match Bound [MATCHBOUNDS1,MATCHBOUNDS2] of 1. This implies Q-termination of R.
The following rules were used to construct the certificate:

   a(b(a(b(a(a(b(a(b(x1))))))))) -> b(a(b(a(a(b(a(b(a(b(a(b(a(x1)))))))))))))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40

Node 3 is start node and node 4 is final node.

Those nodes are connected through the following edges:

* 3 to 5 labelled b_1(0)* 4 to 4 labelled #_1(0)* 5 to 6 labelled a_1(0)* 6 to 7 labelled b_1(0)* 7 to 8 labelled a_1(0)* 8 to 9 labelled a_1(0)* 9 to 10 labelled b_1(0)* 10 to 11 labelled a_1(0)* 11 to 12 labelled b_1(0)* 12 to 13 labelled a_1(0)* 12 to 29 labelled b_1(1)* 13 to 14 labelled b_1(0)* 14 to 15 labelled a_1(0)* 14 to 29 labelled b_1(1)* 15 to 16 labelled b_1(0)* 16 to 4 labelled a_1(0)* 16 to 29 labelled b_1(1)* 29 to 30 labelled a_1(1)* 30 to 31 labelled b_1(1)* 31 to 32 labelled a_1(1)* 32 to 33 labelled a_1(1)* 33 to 34 labelled b_1(1)* 34 to 35 labelled a_1(1)* 35 to 36 labelled b_1(1)* 36 to 37 labelled a_1(1)* 36 to 29 labelled b_1(1)* 37 to 38 labelled b_1(1)* 38 to 39 labelled a_1(1)* 38 to 29 labelled b_1(1)* 39 to 40 labelled b_1(1)* 40 to 4 labelled a_1(1)* 40 to 29 labelled b_1(1)


----------------------------------------

(6)
YES
