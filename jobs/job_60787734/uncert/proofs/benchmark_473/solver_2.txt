YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VkgAT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 87 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) QDPOrderProof [EQUIVALENT, 60 ms]
        (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 35 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 56 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 27 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(1(2(2(x1)))) -> 0(1(0(2(2(x1)))))
   0(1(2(2(x1)))) -> 0(1(2(3(2(x1)))))
   0(1(2(2(x1)))) -> 0(2(2(1(3(x1)))))
   0(1(2(2(x1)))) -> 1(0(3(2(2(x1)))))
   0(1(2(2(x1)))) -> 1(2(0(3(2(x1)))))
   0(1(2(2(x1)))) -> 1(3(0(2(2(x1)))))
   0(1(2(2(x1)))) -> 1(3(2(0(2(x1)))))
   0(1(2(2(x1)))) -> 0(1(0(4(2(2(x1))))))
   0(1(2(2(x1)))) -> 0(2(1(3(2(3(x1))))))
   0(1(2(2(x1)))) -> 1(2(1(0(4(2(x1))))))
   0(1(2(2(x1)))) -> 1(5(0(4(2(2(x1))))))
   0(1(2(2(x1)))) -> 2(0(3(1(3(2(x1))))))
   0(1(2(2(x1)))) -> 2(1(1(0(4(2(x1))))))
   0(1(2(2(x1)))) -> 2(1(3(0(2(0(x1))))))
   0(1(2(2(x1)))) -> 2(1(3(3(2(0(x1))))))
   0(1(2(2(x1)))) -> 2(1(5(3(0(2(x1))))))
   0(1(2(2(x1)))) -> 2(2(1(3(0(5(x1))))))
   0(1(2(2(x1)))) -> 2(4(1(3(2(0(x1))))))
   0(1(4(5(x1)))) -> 1(5(0(4(1(x1)))))
   0(1(4(5(x1)))) -> 5(0(4(1(5(x1)))))
   0(1(4(5(x1)))) -> 5(4(1(5(0(x1)))))
   0(1(4(5(x1)))) -> 1(1(5(0(4(1(x1))))))
   0(1(4(5(x1)))) -> 5(4(1(5(5(0(x1))))))
   5(1(2(2(x1)))) -> 1(0(2(2(5(x1)))))
   5(1(2(2(x1)))) -> 1(3(5(2(2(x1)))))
   5(1(2(2(x1)))) -> 1(5(2(3(2(x1)))))
   5(1(2(2(x1)))) -> 1(5(0(2(2(3(x1))))))
   5(1(2(2(x1)))) -> 2(1(0(3(2(5(x1))))))
   5(1(2(2(x1)))) -> 3(1(3(5(2(2(x1))))))
   5(1(2(2(x1)))) -> 4(1(3(2(2(5(x1))))))
   5(1(2(2(x1)))) -> 5(1(0(4(2(2(x1))))))
   5(1(2(2(x1)))) -> 5(1(2(0(4(2(x1))))))
   0(1(1(4(5(x1))))) -> 3(1(0(4(1(5(x1))))))
   0(1(2(2(2(x1))))) -> 1(0(2(2(5(2(x1))))))
   0(1(2(2(5(x1))))) -> 1(5(0(4(2(2(x1))))))
   0(1(2(4(5(x1))))) -> 2(5(1(0(4(5(x1))))))
   0(1(4(5(2(x1))))) -> 1(0(4(2(0(5(x1))))))
   0(1(4(5(5(x1))))) -> 5(0(4(0(1(5(x1))))))
   0(1(5(4(5(x1))))) -> 1(5(0(4(1(5(x1))))))
   0(5(1(2(2(x1))))) -> 0(1(3(2(5(2(x1))))))
   3(3(1(2(2(x1))))) -> 1(3(2(0(3(2(x1))))))
   3(4(4(0(5(x1))))) -> 3(5(4(5(0(4(x1))))))
   5(0(1(2(2(x1))))) -> 1(3(2(0(5(2(x1))))))
   5(1(2(2(5(x1))))) -> 1(5(2(3(2(5(x1))))))
   5(2(1(2(2(x1))))) -> 2(1(3(5(2(2(x1))))))
   5(2(4(0(5(x1))))) -> 0(4(2(5(5(5(x1))))))
   5(2(4(0(5(x1))))) -> 0(4(5(4(2(5(x1))))))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   2^1(2(1(0(x1)))) -> 2^1(2(0(1(0(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(0(1(0(x1))))
   2^1(2(1(0(x1)))) -> 2^1(3(2(1(0(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(2(0(x1)))
   2^1(2(1(0(x1)))) -> 2^1(0(x1))
   2^1(2(1(0(x1)))) -> 2^1(2(3(0(1(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(3(0(1(x1))))
   2^1(2(1(0(x1)))) -> 2^1(3(0(2(1(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(1(x1))
   2^1(2(1(0(x1)))) -> 2^1(2(0(3(1(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(0(3(1(x1))))
   2^1(2(1(0(x1)))) -> 2^1(0(2(3(1(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(3(1(x1)))
   2^1(2(1(0(x1)))) -> 2^1(2(4(0(1(0(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(4(0(1(0(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(3(1(2(0(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(4(0(1(2(1(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(2(4(0(5(1(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(4(0(5(1(x1)))))
   2^1(2(1(0(x1)))) -> 5^1(1(x1))
   2^1(2(1(0(x1)))) -> 2^1(3(1(3(0(2(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(x1)
   2^1(2(1(0(x1)))) -> 2^1(4(0(1(1(2(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(0(3(1(2(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(3(3(1(2(x1)))))
   2^1(2(1(0(x1)))) -> 2^1(0(3(5(1(2(x1))))))
   2^1(2(1(0(x1)))) -> 5^1(1(2(x1)))
   2^1(2(1(0(x1)))) -> 5^1(0(3(1(2(2(x1))))))
   2^1(2(1(0(x1)))) -> 2^1(2(x1))
   2^1(2(1(0(x1)))) -> 2^1(3(1(4(2(x1)))))
   5^1(4(1(0(x1)))) -> 5^1(1(x1))
   5^1(4(1(0(x1)))) -> 5^1(1(4(0(5(x1)))))
   5^1(4(1(0(x1)))) -> 5^1(x1)
   5^1(4(1(0(x1)))) -> 5^1(1(4(5(x1))))
   5^1(4(1(0(x1)))) -> 5^1(1(1(x1)))
   5^1(4(1(0(x1)))) -> 5^1(5(1(4(5(x1)))))
   2^1(2(1(5(x1)))) -> 5^1(2(2(0(1(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(2(0(1(x1))))
   2^1(2(1(5(x1)))) -> 2^1(0(1(x1)))
   2^1(2(1(5(x1)))) -> 2^1(2(5(3(1(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(5(3(1(x1))))
   2^1(2(1(5(x1)))) -> 5^1(3(1(x1)))
   2^1(2(1(5(x1)))) -> 2^1(3(2(5(1(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(5(1(x1)))
   2^1(2(1(5(x1)))) -> 5^1(1(x1))
   2^1(2(1(5(x1)))) -> 2^1(2(0(5(1(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(0(5(1(x1))))
   2^1(2(1(5(x1)))) -> 5^1(2(3(0(1(2(x1))))))
   2^1(2(1(5(x1)))) -> 2^1(3(0(1(2(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(x1)
   2^1(2(1(5(x1)))) -> 2^1(2(5(3(1(3(x1))))))
   2^1(2(1(5(x1)))) -> 2^1(5(3(1(3(x1)))))
   2^1(2(1(5(x1)))) -> 5^1(3(1(3(x1))))
   2^1(2(1(5(x1)))) -> 5^1(2(2(3(1(4(x1))))))
   2^1(2(1(5(x1)))) -> 2^1(2(3(1(4(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(3(1(4(x1))))
   2^1(2(1(5(x1)))) -> 2^1(2(4(0(1(5(x1))))))
   2^1(2(1(5(x1)))) -> 2^1(4(0(1(5(x1)))))
   2^1(2(1(5(x1)))) -> 2^1(4(0(2(1(5(x1))))))
   5^1(4(1(1(0(x1))))) -> 5^1(1(4(0(1(3(x1))))))
   2^1(2(2(1(0(x1))))) -> 2^1(5(2(2(0(1(x1))))))
   2^1(2(2(1(0(x1))))) -> 5^1(2(2(0(1(x1)))))
   2^1(2(2(1(0(x1))))) -> 2^1(2(0(1(x1))))
   2^1(2(2(1(0(x1))))) -> 2^1(0(1(x1)))
   5^1(2(2(1(0(x1))))) -> 2^1(2(4(0(5(1(x1))))))
   5^1(2(2(1(0(x1))))) -> 2^1(4(0(5(1(x1)))))
   5^1(2(2(1(0(x1))))) -> 5^1(1(x1))
   5^1(4(2(1(0(x1))))) -> 5^1(4(0(1(5(2(x1))))))
   5^1(4(2(1(0(x1))))) -> 5^1(2(x1))
   5^1(4(2(1(0(x1))))) -> 2^1(x1)
   2^1(5(4(1(0(x1))))) -> 5^1(0(2(4(0(1(x1))))))
   2^1(5(4(1(0(x1))))) -> 2^1(4(0(1(x1))))
   5^1(5(4(1(0(x1))))) -> 5^1(1(0(4(0(5(x1))))))
   5^1(5(4(1(0(x1))))) -> 5^1(x1)
   5^1(4(5(1(0(x1))))) -> 5^1(1(4(0(5(1(x1))))))
   5^1(4(5(1(0(x1))))) -> 5^1(1(x1))
   2^1(2(1(5(0(x1))))) -> 2^1(5(2(3(1(0(x1))))))
   2^1(2(1(5(0(x1))))) -> 5^1(2(3(1(0(x1)))))
   2^1(2(1(5(0(x1))))) -> 2^1(3(1(0(x1))))
   2^1(2(1(3(3(x1))))) -> 2^1(3(0(2(3(1(x1))))))
   2^1(2(1(3(3(x1))))) -> 2^1(3(1(x1)))
   5^1(0(4(4(3(x1))))) -> 5^1(4(5(3(x1))))
   5^1(0(4(4(3(x1))))) -> 5^1(3(x1))
   2^1(2(1(0(5(x1))))) -> 2^1(5(0(2(3(1(x1))))))
   2^1(2(1(0(5(x1))))) -> 5^1(0(2(3(1(x1)))))
   2^1(2(1(0(5(x1))))) -> 2^1(3(1(x1)))
   5^1(2(2(1(5(x1))))) -> 5^1(2(3(2(5(1(x1))))))
   5^1(2(2(1(5(x1))))) -> 2^1(3(2(5(1(x1)))))
   5^1(2(2(1(5(x1))))) -> 2^1(5(1(x1)))
   5^1(2(2(1(5(x1))))) -> 5^1(1(x1))
   2^1(2(1(2(5(x1))))) -> 2^1(2(5(3(1(2(x1))))))
   2^1(2(1(2(5(x1))))) -> 2^1(5(3(1(2(x1)))))
   2^1(2(1(2(5(x1))))) -> 5^1(3(1(2(x1))))
   2^1(2(1(2(5(x1))))) -> 2^1(x1)
   5^1(0(4(2(5(x1))))) -> 5^1(5(5(2(4(0(x1))))))
   5^1(0(4(2(5(x1))))) -> 5^1(5(2(4(0(x1)))))
   5^1(0(4(2(5(x1))))) -> 5^1(2(4(0(x1))))
   5^1(0(4(2(5(x1))))) -> 2^1(4(0(x1)))
   5^1(0(4(2(5(x1))))) -> 5^1(2(4(5(4(0(x1))))))
   5^1(0(4(2(5(x1))))) -> 2^1(4(5(4(0(x1)))))
   5^1(0(4(2(5(x1))))) -> 5^1(4(0(x1)))

The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 94 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   2^1(2(1(0(x1)))) -> 2^1(2(x1))
   2^1(2(1(0(x1)))) -> 2^1(x1)
   2^1(2(1(5(x1)))) -> 2^1(x1)
   2^1(2(1(2(5(x1))))) -> 2^1(x1)

The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   2^1(2(1(0(x1)))) -> 2^1(x1)
   2^1(2(1(5(x1)))) -> 2^1(x1)
   2^1(2(1(2(5(x1))))) -> 2^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = x_1
   POL(2(x_1)) = 1 + x_1
   POL(2^1(x_1)) = x_1
   POL(3(x_1)) = 0
   POL(4(x_1)) = 0
   POL(5(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   2^1(2(1(0(x1)))) -> 2^1(2(x1))

The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   2^1(2(1(0(x1)))) -> 2^1(2(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(2(x_1)) = x_1
   POL(2^1(x_1)) = x_1
   POL(3(x_1)) = 0
   POL(4(x_1)) = 0
   POL(5(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   5^1(4(2(1(0(x1))))) -> 5^1(2(x1))
   5^1(4(1(0(x1)))) -> 5^1(x1)
   5^1(5(4(1(0(x1))))) -> 5^1(x1)

The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   5^1(4(1(0(x1)))) -> 5^1(x1)
   5^1(5(4(1(0(x1))))) -> 5^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(2(x_1)) = 0
   POL(3(x_1)) = 0
   POL(4(x_1)) = x_1
   POL(5(x_1)) = x_1
   POL(5^1(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   5^1(4(2(1(0(x1))))) -> 5^1(2(x1))

The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   5^1(4(2(1(0(x1))))) -> 5^1(2(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(1(x_1)) = 0
   POL(2(x_1)) = 1
   POL(3(x_1)) = 0
   POL(4(x_1)) = 1 + x_1
   POL(5(x_1)) = 0
   POL(5^1(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   2(2(1(0(x1)))) -> 2(2(0(1(0(x1)))))
   2(2(1(0(x1)))) -> 2(3(2(1(0(x1)))))
   2(2(1(0(x1)))) -> 3(1(2(2(0(x1)))))
   2(2(1(0(x1)))) -> 2(2(3(0(1(x1)))))
   2(2(1(0(x1)))) -> 2(3(0(2(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(0(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(0(2(3(1(x1)))))
   2(2(1(0(x1)))) -> 2(2(4(0(1(0(x1))))))
   2(2(1(0(x1)))) -> 3(2(3(1(2(0(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(2(1(x1))))))
   2(2(1(0(x1)))) -> 2(2(4(0(5(1(x1))))))
   2(2(1(0(x1)))) -> 2(3(1(3(0(2(x1))))))
   2(2(1(0(x1)))) -> 2(4(0(1(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(0(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(3(1(2(x1))))))
   2(2(1(0(x1)))) -> 2(0(3(5(1(2(x1))))))
   2(2(1(0(x1)))) -> 5(0(3(1(2(2(x1))))))
   2(2(1(0(x1)))) -> 0(2(3(1(4(2(x1))))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(x1)))))
   5(4(1(0(x1)))) -> 5(1(4(0(5(x1)))))
   5(4(1(0(x1)))) -> 0(5(1(4(5(x1)))))
   5(4(1(0(x1)))) -> 1(4(0(5(1(1(x1))))))
   5(4(1(0(x1)))) -> 0(5(5(1(4(5(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(0(1(x1)))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(x1)))))
   2(2(1(5(x1)))) -> 2(3(2(5(1(x1)))))
   2(2(1(5(x1)))) -> 3(2(2(0(5(1(x1))))))
   2(2(1(5(x1)))) -> 5(2(3(0(1(2(x1))))))
   2(2(1(5(x1)))) -> 2(2(5(3(1(3(x1))))))
   2(2(1(5(x1)))) -> 5(2(2(3(1(4(x1))))))
   2(2(1(5(x1)))) -> 2(2(4(0(1(5(x1))))))
   2(2(1(5(x1)))) -> 2(4(0(2(1(5(x1))))))
   5(4(1(1(0(x1))))) -> 5(1(4(0(1(3(x1))))))
   2(2(2(1(0(x1))))) -> 2(5(2(2(0(1(x1))))))
   5(2(2(1(0(x1))))) -> 2(2(4(0(5(1(x1))))))
   5(4(2(1(0(x1))))) -> 5(4(0(1(5(2(x1))))))
   2(5(4(1(0(x1))))) -> 5(0(2(4(0(1(x1))))))
   5(5(4(1(0(x1))))) -> 5(1(0(4(0(5(x1))))))
   5(4(5(1(0(x1))))) -> 5(1(4(0(5(1(x1))))))
   2(2(1(5(0(x1))))) -> 2(5(2(3(1(0(x1))))))
   2(2(1(3(3(x1))))) -> 2(3(0(2(3(1(x1))))))
   5(0(4(4(3(x1))))) -> 4(0(5(4(5(3(x1))))))
   2(2(1(0(5(x1))))) -> 2(5(0(2(3(1(x1))))))
   5(2(2(1(5(x1))))) -> 5(2(3(2(5(1(x1))))))
   2(2(1(2(5(x1))))) -> 2(2(5(3(1(2(x1))))))
   5(0(4(2(5(x1))))) -> 5(5(5(2(4(0(x1))))))
   5(0(4(2(5(x1))))) -> 5(2(4(5(4(0(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
