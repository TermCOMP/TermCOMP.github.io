YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qhr9Q.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 108 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 231 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 109 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 88 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 59 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) QDP
        (18) QDPOrderProof [EQUIVALENT, 184 ms]
        (19) QDP
        (20) PisEmptyProof [EQUIVALENT, 0 ms]
        (21) YES
    (22) QDP
        (23) UsableRulesProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(1(1(x1))) -> 0^1(x1)
   0^1(3(1(x1))) -> 3^1(2(2(0(x1))))
   0^1(3(1(x1))) -> 0^1(x1)
   0^1(3(1(x1))) -> 3^1(2(1(2(0(x1)))))
   0^1(3(1(x1))) -> 3^1(3(3(2(0(x1)))))
   0^1(3(1(x1))) -> 3^1(3(2(0(x1))))
   0^1(3(1(x1))) -> 3^1(2(0(x1)))
   0^1(4(1(x1))) -> 0^1(4(x1))
   0^1(4(1(x1))) -> 4^1(x1)
   0^1(0(4(5(x1)))) -> 0^1(0(2(5(4(x1)))))
   0^1(0(4(5(x1)))) -> 0^1(2(5(4(x1))))
   0^1(0(4(5(x1)))) -> 4^1(x1)
   0^1(1(4(1(x1)))) -> 0^1(1(2(2(4(1(x1))))))
   0^1(1(4(5(x1)))) -> 4^1(0(1(2(5(4(x1))))))
   0^1(1(4(5(x1)))) -> 0^1(1(2(5(4(x1)))))
   0^1(1(4(5(x1)))) -> 4^1(x1)
   0^1(1(5(1(x1)))) -> 0^1(1(x1))
   0^1(1(5(3(x1)))) -> 0^1(5(3(2(1(x1)))))
   0^1(1(5(3(x1)))) -> 3^1(2(1(x1)))
   0^1(2(4(1(x1)))) -> 3^1(3(2(0(4(x1)))))
   0^1(2(4(1(x1)))) -> 3^1(2(0(4(x1))))
   0^1(2(4(1(x1)))) -> 0^1(4(x1))
   0^1(2(4(1(x1)))) -> 4^1(x1)
   0^1(2(4(1(x1)))) -> 4^1(2(1(2(0(4(x1))))))
   0^1(2(4(5(x1)))) -> 0^1(2(2(5(0(4(x1))))))
   0^1(2(4(5(x1)))) -> 0^1(4(x1))
   0^1(2(4(5(x1)))) -> 4^1(x1)
   0^1(3(1(5(x1)))) -> 0^1(1(2(5(3(x1)))))
   0^1(3(1(5(x1)))) -> 3^1(x1)
   0^1(3(1(5(x1)))) -> 3^1(0(4(x1)))
   0^1(3(1(5(x1)))) -> 0^1(4(x1))
   0^1(3(1(5(x1)))) -> 4^1(x1)
   0^1(3(5(1(x1)))) -> 3^1(0(x1))
   0^1(3(5(1(x1)))) -> 0^1(x1)
   0^1(3(5(1(x1)))) -> 0^1(5(2(1(2(3(x1))))))
   0^1(3(5(1(x1)))) -> 3^1(x1)
   0^1(3(5(5(x1)))) -> 0^1(3(2(5(5(x1)))))
   0^1(3(5(5(x1)))) -> 3^1(2(5(5(x1))))
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(1(5(x1)))) -> 0^1(4(x1))
   0^1(4(1(5(x1)))) -> 4^1(x1)
   0^1(4(3(5(x1)))) -> 0^1(4(3(2(5(4(x1))))))
   0^1(4(3(5(x1)))) -> 4^1(3(2(5(4(x1)))))
   0^1(4(3(5(x1)))) -> 3^1(2(5(4(x1))))
   0^1(4(3(5(x1)))) -> 4^1(x1)
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(1(x1)))) -> 0^1(1(x1))
   3^1(0(1(5(x1)))) -> 3^1(1(4(0(5(4(x1))))))
   3^1(0(1(5(x1)))) -> 4^1(0(5(4(x1))))
   3^1(0(1(5(x1)))) -> 0^1(5(4(x1)))
   3^1(0(1(5(x1)))) -> 4^1(x1)
   3^1(0(3(1(x1)))) -> 3^1(3(2(0(x1))))
   3^1(0(3(1(x1)))) -> 3^1(2(0(x1)))
   3^1(0(3(1(x1)))) -> 0^1(x1)
   3^1(0(3(5(x1)))) -> 3^1(2(5(0(2(3(x1))))))
   3^1(0(3(5(x1)))) -> 0^1(2(3(x1)))
   3^1(0(3(5(x1)))) -> 3^1(x1)
   3^1(3(0(1(x1)))) -> 0^1(1(3(2(2(3(x1))))))
   3^1(3(0(1(x1)))) -> 3^1(2(2(3(x1))))
   3^1(3(0(1(x1)))) -> 3^1(x1)
   3^1(4(5(1(x1)))) -> 3^1(2(5(4(2(1(x1))))))
   3^1(4(5(1(x1)))) -> 4^1(2(1(x1)))
   4^1(1(3(5(x1)))) -> 3^1(4(4(x1)))
   4^1(1(3(5(x1)))) -> 4^1(4(x1))
   4^1(1(3(5(x1)))) -> 4^1(x1)
   4^1(1(5(1(x1)))) -> 4^1(4(5(1(2(1(x1))))))
   4^1(1(5(1(x1)))) -> 4^1(5(1(2(1(x1)))))
   4^1(4(1(5(x1)))) -> 4^1(1(2(5(4(x1)))))
   4^1(4(1(5(x1)))) -> 4^1(x1)
   0^1(1(4(5(5(x1))))) -> 0^1(5(1(4(2(5(x1))))))
   0^1(1(4(5(5(x1))))) -> 4^1(2(5(x1)))
   0^1(2(1(4(5(x1))))) -> 0^1(0(1(2(5(4(x1))))))
   0^1(2(1(4(5(x1))))) -> 0^1(1(2(5(4(x1)))))
   0^1(2(1(4(5(x1))))) -> 4^1(x1)
   0^1(2(1(5(5(x1))))) -> 0^1(1(2(2(5(5(x1))))))
   0^1(4(2(4(1(x1))))) -> 3^1(2(0(4(4(x1)))))
   0^1(4(2(4(1(x1))))) -> 0^1(4(4(x1)))
   0^1(4(2(4(1(x1))))) -> 4^1(4(x1))
   0^1(4(2(4(1(x1))))) -> 4^1(x1)
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(5(1(5(1(x1))))) -> 0^1(5(1(1(2(5(x1))))))
   0^1(5(2(1(5(x1))))) -> 0^1(4(x1))
   0^1(5(2(1(5(x1))))) -> 4^1(x1)
   0^1(5(2(4(1(x1))))) -> 4^1(5(2(1(2(0(x1))))))
   0^1(5(2(4(1(x1))))) -> 0^1(x1)
   3^1(0(1(4(1(x1))))) -> 0^1(4(4(1(3(1(x1))))))
   3^1(0(1(4(1(x1))))) -> 4^1(4(1(3(1(x1)))))
   3^1(0(1(4(1(x1))))) -> 4^1(1(3(1(x1))))
   3^1(0(1(4(1(x1))))) -> 3^1(1(x1))
   3^1(0(1(4(1(x1))))) -> 4^1(3(2(0(1(1(x1))))))
   3^1(0(1(4(1(x1))))) -> 3^1(2(0(1(1(x1)))))
   3^1(0(1(4(1(x1))))) -> 0^1(1(1(x1)))
   3^1(0(3(5(5(x1))))) -> 3^1(3(2(5(0(5(x1))))))
   3^1(0(3(5(5(x1))))) -> 3^1(2(5(0(5(x1)))))
   3^1(0(3(5(5(x1))))) -> 0^1(5(x1))
   3^1(0(5(3(1(x1))))) -> 0^1(3(3(2(5(x1)))))
   3^1(0(5(3(1(x1))))) -> 3^1(3(2(5(x1))))
   3^1(0(5(3(1(x1))))) -> 3^1(2(5(x1)))
   4^1(0(1(4(1(x1))))) -> 4^1(4(0(1(3(1(x1))))))
   4^1(0(1(4(1(x1))))) -> 4^1(0(1(3(1(x1)))))
   4^1(0(1(4(1(x1))))) -> 0^1(1(3(1(x1))))
   4^1(0(1(4(1(x1))))) -> 3^1(1(x1))
   4^1(0(1(5(1(x1))))) -> 0^1(1(2(5(4(1(x1))))))
   4^1(0(1(5(1(x1))))) -> 4^1(1(x1))
   4^1(0(2(4(5(x1))))) -> 4^1(0(2(5(0(4(x1))))))
   4^1(0(2(4(5(x1))))) -> 0^1(2(5(0(4(x1)))))
   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   4^1(1(1(5(1(x1))))) -> 4^1(1(x1))
   4^1(5(1(4(1(x1))))) -> 4^1(4(1(2(1(5(x1))))))
   4^1(5(1(4(1(x1))))) -> 4^1(1(2(1(5(x1)))))
   4^1(5(2(3(1(x1))))) -> 4^1(3(1(2(2(5(x1))))))
   4^1(5(2(3(1(x1))))) -> 3^1(1(2(2(5(x1)))))
   4^1(5(4(3(1(x1))))) -> 4^1(1(2(5(3(4(x1))))))
   4^1(5(4(3(1(x1))))) -> 3^1(4(x1))
   4^1(5(4(3(1(x1))))) -> 4^1(x1)
   4^1(5(5(3(1(x1))))) -> 3^1(2(5(5(4(x1)))))
   4^1(5(5(3(1(x1))))) -> 4^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 66 less nodes.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(3(1(x1))) -> 0^1(x1)
   0^1(1(1(x1))) -> 0^1(x1)
   0^1(4(1(x1))) -> 0^1(4(x1))
   0^1(4(1(x1))) -> 4^1(x1)
   4^1(1(3(5(x1)))) -> 3^1(4(4(x1)))
   3^1(0(3(1(x1)))) -> 0^1(x1)
   0^1(0(4(5(x1)))) -> 4^1(x1)
   4^1(1(3(5(x1)))) -> 4^1(4(x1))
   4^1(4(1(5(x1)))) -> 4^1(x1)
   4^1(1(3(5(x1)))) -> 4^1(x1)
   4^1(0(1(5(1(x1))))) -> 4^1(1(x1))
   4^1(1(1(5(1(x1))))) -> 4^1(1(x1))
   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   0^1(1(4(5(x1)))) -> 4^1(x1)
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   4^1(5(4(3(1(x1))))) -> 3^1(4(x1))
   3^1(3(0(1(x1)))) -> 3^1(x1)
   3^1(0(1(5(x1)))) -> 4^1(0(5(4(x1))))
   3^1(0(1(5(x1)))) -> 0^1(5(4(x1)))
   0^1(5(2(4(1(x1))))) -> 0^1(x1)
   0^1(1(5(1(x1)))) -> 0^1(1(x1))
   0^1(2(4(1(x1)))) -> 0^1(4(x1))
   0^1(2(4(1(x1)))) -> 4^1(x1)
   4^1(5(4(3(1(x1))))) -> 4^1(x1)
   4^1(5(5(3(1(x1))))) -> 4^1(x1)
   0^1(2(4(5(x1)))) -> 0^1(4(x1))
   0^1(2(4(5(x1)))) -> 4^1(x1)
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(1(x1)))) -> 0^1(1(x1))
   0^1(2(1(4(5(x1))))) -> 4^1(x1)
   0^1(4(2(4(1(x1))))) -> 0^1(4(4(x1)))
   0^1(4(2(4(1(x1))))) -> 4^1(4(x1))
   0^1(4(2(4(1(x1))))) -> 4^1(x1)
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(1(5(x1)))) -> 0^1(4(x1))
   0^1(4(1(5(x1)))) -> 4^1(x1)
   0^1(4(3(5(x1)))) -> 4^1(x1)
   0^1(3(1(5(x1)))) -> 3^1(x1)
   3^1(0(1(5(x1)))) -> 4^1(x1)
   3^1(0(3(5(x1)))) -> 0^1(2(3(x1)))
   3^1(0(3(5(x1)))) -> 3^1(x1)
   3^1(0(1(4(1(x1))))) -> 0^1(1(1(x1)))
   3^1(0(3(5(5(x1))))) -> 0^1(5(x1))
   0^1(5(2(1(5(x1))))) -> 0^1(4(x1))
   0^1(5(2(1(5(x1))))) -> 4^1(x1)
   0^1(3(1(5(x1)))) -> 3^1(0(4(x1)))
   0^1(3(1(5(x1)))) -> 0^1(4(x1))
   0^1(3(1(5(x1)))) -> 4^1(x1)
   0^1(3(5(1(x1)))) -> 3^1(0(x1))
   0^1(3(5(1(x1)))) -> 0^1(x1)
   0^1(3(5(1(x1)))) -> 3^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   0^1(3(1(x1))) -> 0^1(x1)
   0^1(1(1(x1))) -> 0^1(x1)
   0^1(4(1(x1))) -> 0^1(4(x1))
   0^1(4(1(x1))) -> 4^1(x1)
   4^1(1(3(5(x1)))) -> 3^1(4(4(x1)))
   3^1(0(3(1(x1)))) -> 0^1(x1)
   4^1(1(3(5(x1)))) -> 4^1(4(x1))
   4^1(4(1(5(x1)))) -> 4^1(x1)
   4^1(1(3(5(x1)))) -> 4^1(x1)
   4^1(0(1(5(1(x1))))) -> 4^1(1(x1))
   4^1(1(1(5(1(x1))))) -> 4^1(1(x1))
   0^1(1(4(5(x1)))) -> 4^1(x1)
   4^1(5(4(3(1(x1))))) -> 3^1(4(x1))
   3^1(3(0(1(x1)))) -> 3^1(x1)
   3^1(0(1(5(x1)))) -> 4^1(0(5(4(x1))))
   3^1(0(1(5(x1)))) -> 0^1(5(4(x1)))
   0^1(5(2(4(1(x1))))) -> 0^1(x1)
   0^1(1(5(1(x1)))) -> 0^1(1(x1))
   0^1(2(4(1(x1)))) -> 0^1(4(x1))
   0^1(2(4(1(x1)))) -> 4^1(x1)
   4^1(5(4(3(1(x1))))) -> 4^1(x1)
   4^1(5(5(3(1(x1))))) -> 4^1(x1)
   0^1(2(1(4(5(x1))))) -> 4^1(x1)
   0^1(4(2(4(1(x1))))) -> 0^1(4(4(x1)))
   0^1(4(2(4(1(x1))))) -> 4^1(4(x1))
   0^1(4(2(4(1(x1))))) -> 4^1(x1)
   0^1(4(1(5(x1)))) -> 0^1(4(x1))
   0^1(4(1(5(x1)))) -> 4^1(x1)
   0^1(3(1(5(x1)))) -> 3^1(x1)
   3^1(0(1(5(x1)))) -> 4^1(x1)
   0^1(5(2(1(5(x1))))) -> 0^1(4(x1))
   0^1(5(2(1(5(x1))))) -> 4^1(x1)
   0^1(3(1(5(x1)))) -> 3^1(0(4(x1)))
   0^1(3(1(5(x1)))) -> 0^1(4(x1))
   0^1(3(1(5(x1)))) -> 4^1(x1)
   0^1(3(5(1(x1)))) -> 3^1(0(x1))
   0^1(3(5(1(x1)))) -> 0^1(x1)
   0^1(3(5(1(x1)))) -> 3^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = 1 + x_1
   POL(2(x_1)) = x_1
   POL(3(x_1)) = x_1
   POL(3^1(x_1)) = x_1
   POL(4(x_1)) = x_1
   POL(4^1(x_1)) = x_1
   POL(5(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(0(4(5(x1)))) -> 4^1(x1)
   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   0^1(2(4(5(x1)))) -> 0^1(4(x1))
   0^1(2(4(5(x1)))) -> 4^1(x1)
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(1(x1)))) -> 0^1(1(x1))
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(3(5(x1)))) -> 4^1(x1)
   3^1(0(3(5(x1)))) -> 0^1(2(3(x1)))
   3^1(0(3(5(x1)))) -> 3^1(x1)
   3^1(0(1(4(1(x1))))) -> 0^1(1(1(x1)))
   3^1(0(3(5(5(x1))))) -> 0^1(5(x1))

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   0^1(0(4(5(x1)))) -> 4^1(x1)
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   0^1(2(4(5(x1)))) -> 0^1(4(x1))
   0^1(2(4(5(x1)))) -> 4^1(x1)
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(3(5(x1)))) -> 4^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   0^1(2(4(5(x1)))) -> 0^1(4(x1))
   0^1(2(4(5(x1)))) -> 4^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 0
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = 0
   POL(2(x_1)) = 1
   POL(3(x_1)) = 1
   POL(4(x_1)) = 0
   POL(4^1(x_1)) = 0
   POL(5(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   0^1(0(4(5(x1)))) -> 4^1(x1)
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(3(5(x1)))) -> 4^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   0^1(0(4(5(x1)))) -> 4^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = 1 + x_1
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = 0
   POL(2(x_1)) = 0
   POL(3(x_1)) = 0
   POL(4(x_1)) = 1
   POL(4^1(x_1)) = 1
   POL(5(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(3(5(x1)))) -> 4^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   4^1(0(2(4(5(x1))))) -> 0^1(4(x1))
   4^1(0(2(4(5(x1))))) -> 4^1(x1)
   0^1(4(5(1(x1)))) -> 4^1(4(0(1(x1))))
   0^1(4(5(1(x1)))) -> 4^1(0(1(x1)))
   0^1(4(5(4(3(x1))))) -> 0^1(4(4(3(x1))))
   0^1(4(5(4(3(x1))))) -> 4^1(4(3(x1)))
   0^1(4(3(5(x1)))) -> 4^1(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(0^1(x_1)) = x_1
   POL(1(x_1)) = x_1
   POL(2(x_1)) = x_1
   POL(3(x_1)) = x_1
   POL(4(x_1)) = x_1
   POL(4^1(x_1)) = x_1
   POL(5(x_1)) = 1 + x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))
   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
   0^1(4(0(1(x1)))) -> 4^1(4(0(1(x1))))

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(17)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   0^1(4(0(1(x1)))) -> 0^1(4(4(0(1(x1)))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( 0^1_1(x_1) ) = max{0, 2x_1 - 2}
POL( 4_1(x_1) ) = max{0, x_1 - 1}
POL( 1_1(x_1) ) = x_1 + 2
POL( 2_1(x_1) ) = max{0, -2}
POL( 3_1(x_1) ) = x_1
POL( 5_1(x_1) ) = 2x_1 + 2
POL( 0_1(x_1) ) = x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))


----------------------------------------

(19)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(0(3(5(x1)))) -> 3^1(x1)

The TRS R consists of the following rules:

   0(1(1(x1))) -> 1(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(2(2(0(x1)))))
   0(3(1(x1))) -> 3(2(1(2(0(x1)))))
   0(3(1(x1))) -> 1(3(3(3(2(0(x1))))))
   0(4(1(x1))) -> 2(1(2(0(4(x1)))))
   0(0(4(5(x1)))) -> 0(0(2(5(4(x1)))))
   0(1(4(1(x1)))) -> 0(1(2(2(4(1(x1))))))
   0(1(4(5(x1)))) -> 4(0(1(2(5(4(x1))))))
   0(1(5(1(x1)))) -> 1(2(2(5(0(1(x1))))))
   0(1(5(3(x1)))) -> 0(5(3(2(1(x1)))))
   0(2(4(1(x1)))) -> 1(3(3(2(0(4(x1))))))
   0(2(4(1(x1)))) -> 4(2(1(2(0(4(x1))))))
   0(2(4(5(x1)))) -> 0(2(2(5(0(4(x1))))))
   0(3(1(5(x1)))) -> 0(1(2(5(3(x1)))))
   0(3(1(5(x1)))) -> 1(2(5(3(0(4(x1))))))
   0(3(5(1(x1)))) -> 1(2(5(3(0(x1)))))
   0(3(5(1(x1)))) -> 0(5(2(1(2(3(x1))))))
   0(3(5(5(x1)))) -> 0(3(2(5(5(x1)))))
   0(4(0(1(x1)))) -> 2(0(4(4(0(1(x1))))))
   0(4(1(5(x1)))) -> 1(2(5(0(4(x1)))))
   0(4(3(5(x1)))) -> 0(4(3(2(5(4(x1))))))
   0(4(5(1(x1)))) -> 2(5(4(4(0(1(x1))))))
   3(0(1(5(x1)))) -> 3(1(4(0(5(4(x1))))))
   3(0(3(1(x1)))) -> 1(3(3(2(0(x1)))))
   3(0(3(5(x1)))) -> 3(2(5(0(2(3(x1))))))
   3(3(0(1(x1)))) -> 0(1(3(2(2(3(x1))))))
   3(4(5(1(x1)))) -> 3(2(5(4(2(1(x1))))))
   4(1(3(5(x1)))) -> 1(2(5(3(4(4(x1))))))
   4(1(5(1(x1)))) -> 4(4(5(1(2(1(x1))))))
   4(4(1(5(x1)))) -> 4(1(2(5(4(x1)))))
   0(1(4(5(5(x1))))) -> 0(5(1(4(2(5(x1))))))
   0(2(1(4(5(x1))))) -> 0(0(1(2(5(4(x1))))))
   0(2(1(5(5(x1))))) -> 0(1(2(2(5(5(x1))))))
   0(4(2(4(1(x1))))) -> 1(3(2(0(4(4(x1))))))
   0(4(5(4(3(x1))))) -> 2(5(0(4(4(3(x1))))))
   0(5(1(5(1(x1))))) -> 0(5(1(1(2(5(x1))))))
   0(5(2(1(5(x1))))) -> 1(2(5(5(0(4(x1))))))
   0(5(2(4(1(x1))))) -> 4(5(2(1(2(0(x1))))))
   3(0(1(4(1(x1))))) -> 0(4(4(1(3(1(x1))))))
   3(0(1(4(1(x1))))) -> 4(3(2(0(1(1(x1))))))
   3(0(3(5(5(x1))))) -> 3(3(2(5(0(5(x1))))))
   3(0(5(3(1(x1))))) -> 1(0(3(3(2(5(x1))))))
   4(0(1(4(1(x1))))) -> 4(4(0(1(3(1(x1))))))
   4(0(1(5(1(x1))))) -> 0(1(2(5(4(1(x1))))))
   4(0(2(4(5(x1))))) -> 4(0(2(5(0(4(x1))))))
   4(1(1(5(1(x1))))) -> 1(1(2(5(4(1(x1))))))
   4(5(1(4(1(x1))))) -> 4(4(1(2(1(5(x1))))))
   4(5(2(3(1(x1))))) -> 4(3(1(2(2(5(x1))))))
   4(5(4(3(1(x1))))) -> 4(1(2(5(3(4(x1))))))
   4(5(5(3(1(x1))))) -> 1(3(2(5(5(4(x1))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   3^1(0(3(5(x1)))) -> 3^1(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*3^1(0(3(5(x1)))) -> 3^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(26)
YES
