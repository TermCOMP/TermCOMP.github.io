YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uDZop.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Strip Symbols Proof [SOUND, 0 ms]
(2) QTRS
(3) QTRS Reverse [EQUIVALENT, 0 ms]
(4) QTRS
(5) RFCMatchBoundsTRSProof [EQUIVALENT, 0 ms]
(6) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(b(a(a(a(a(b(a(a(x1)))))))))) -> a(b(a(a(a(a(b(b(a(a(a(a(b(x1)))))))))))))

Q is empty.

----------------------------------------

(1) Strip Symbols Proof (SOUND)
We were given the following TRS:

   a(b(b(a(a(a(a(b(a(a(x1)))))))))) -> a(b(a(a(a(a(b(b(a(a(a(a(b(x1)))))))))))))

By stripping symbols from the only rule of the system, we obtained the following TRS [ENDRULLIS]: 

   b(a(a(a(a(b(a(a(x1)))))))) -> a(a(a(a(b(b(a(a(a(a(b(x1)))))))))))

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(a(a(a(b(a(a(x1)))))))) -> a(a(a(a(b(b(a(a(a(a(b(x1)))))))))))

Q is empty.

----------------------------------------

(3) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(b(a(a(a(a(b(x1)))))))) -> b(a(a(a(a(b(b(a(a(a(a(x1)))))))))))

Q is empty.

----------------------------------------

(5) RFCMatchBoundsTRSProof (EQUIVALENT)
Termination of the TRS R could be shown with a Match Bound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies Q-termination of R.
The following rules were used to construct the certificate:

   a(a(b(a(a(a(a(b(x1)))))))) -> b(a(a(a(a(b(b(a(a(a(a(x1)))))))))))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64

Node 2 is start node and node 3 is final node.

Those nodes are connected through the following edges:

* 2 to 4 labelled b_1(0)* 3 to 3 labelled #_1(0)* 4 to 5 labelled a_1(0)* 5 to 6 labelled a_1(0)* 6 to 7 labelled a_1(0)* 7 to 8 labelled a_1(0)* 8 to 9 labelled b_1(0)* 9 to 10 labelled b_1(0)* 10 to 11 labelled a_1(0)* 10 to 25 labelled b_1(1)* 11 to 12 labelled a_1(0)* 11 to 25 labelled b_1(1)* 12 to 13 labelled a_1(0)* 12 to 14 labelled b_1(1)* 13 to 3 labelled a_1(0)* 13 to 14 labelled b_1(1)* 14 to 15 labelled a_1(1)* 15 to 16 labelled a_1(1)* 16 to 17 labelled a_1(1)* 17 to 18 labelled a_1(1)* 18 to 19 labelled b_1(1)* 19 to 20 labelled b_1(1)* 20 to 21 labelled a_1(1)* 20 to 55 labelled b_1(2)* 21 to 22 labelled a_1(1)* 21 to 55 labelled b_1(2)* 22 to 23 labelled a_1(1)* 22 to 14 labelled b_1(1)* 23 to 3 labelled a_1(1)* 23 to 14 labelled b_1(1)* 25 to 26 labelled a_1(1)* 26 to 27 labelled a_1(1)* 27 to 28 labelled a_1(1)* 28 to 29 labelled a_1(1)* 29 to 30 labelled b_1(1)* 30 to 31 labelled b_1(1)* 31 to 32 labelled a_1(1)* 31 to 55 labelled b_1(2)* 32 to 33 labelled a_1(1)* 33 to 34 labelled a_1(1)* 33 to 14 labelled b_1(1)* 34 to 19 labelled a_1(1)* 55 to 56 labelled a_1(2)* 56 to 57 labelled a_1(2)* 57 to 58 labelled a_1(2)* 58 to 59 labelled a_1(2)* 59 to 60 labelled b_1(2)* 60 to 61 labelled b_1(2)* 61 to 62 labelled a_1(2)* 61 to 55 labelled b_1(2)* 62 to 63 labelled a_1(2)* 63 to 64 labelled a_1(2)* 63 to 14 labelled b_1(1)* 64 to 19 labelled a_1(2)


----------------------------------------

(6)
YES
