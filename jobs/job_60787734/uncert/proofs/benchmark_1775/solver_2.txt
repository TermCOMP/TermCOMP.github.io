YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/99IsM.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) MRRProof [EQUIVALENT, 12 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QReductionProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(x1)) -> b(b(a(x1)))
   c(b(x1)) -> b(c(c(x1)))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(x1)) -> a(b(b(x1)))
   b(c(x1)) -> c(c(b(x1)))

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(x1)) -> a(b(b(x1)))
   b(c(x1)) -> c(c(b(x1)))

The set Q consists of the following terms:

   b(a(x0))
   b(c(x0))


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(x1)
   B(c(x1)) -> B(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> a(b(b(x1)))
   b(c(x1)) -> c(c(b(x1)))

The set Q consists of the following terms:

   b(a(x0))
   b(c(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 2 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1


----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(x1)) -> B(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> a(b(b(x1)))
   b(c(x1)) -> c(c(b(x1)))

The set Q consists of the following terms:

   b(a(x0))
   b(c(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(x1)) -> B(x1)

R is empty.
The set Q consists of the following terms:

   b(a(x0))
   b(c(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   b(a(x0))
   b(c(x0))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(c(x1)) -> B(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*B(c(x1)) -> B(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES
