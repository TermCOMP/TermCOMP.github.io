YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/cY887.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) FlatCCProof [EQUIVALENT, 0 ms]
(2) QTRS
(3) RootLabelingProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) QTRSRRRProof [EQUIVALENT, 51 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 1 ms]
(8) QTRS
(9) RisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> g(d(x1))
   b(b(b(x1))) -> c(d(c(x1)))
   b(b(x1)) -> a(g(g(x1)))
   c(d(x1)) -> g(g(x1))
   g(g(g(x1))) -> b(b(x1))

Q is empty.

----------------------------------------

(1) FlatCCProof (EQUIVALENT)
We used flat context closure [ROOTLAB]
As Q is empty the flat context closure was sound AND complete.

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(x1)) -> a(g(d(x1)))
   g(a(x1)) -> g(g(d(x1)))
   d(a(x1)) -> d(g(d(x1)))
   b(a(x1)) -> b(g(d(x1)))
   c(a(x1)) -> c(g(d(x1)))
   a(b(b(b(x1)))) -> a(c(d(c(x1))))
   g(b(b(b(x1)))) -> g(c(d(c(x1))))
   d(b(b(b(x1)))) -> d(c(d(c(x1))))
   b(b(b(b(x1)))) -> b(c(d(c(x1))))
   c(b(b(b(x1)))) -> c(c(d(c(x1))))
   a(b(b(x1))) -> a(a(g(g(x1))))
   g(b(b(x1))) -> g(a(g(g(x1))))
   d(b(b(x1))) -> d(a(g(g(x1))))
   b(b(b(x1))) -> b(a(g(g(x1))))
   c(b(b(x1))) -> c(a(g(g(x1))))
   a(c(d(x1))) -> a(g(g(x1)))
   g(c(d(x1))) -> g(g(g(x1)))
   d(c(d(x1))) -> d(g(g(x1)))
   b(c(d(x1))) -> b(g(g(x1)))
   c(c(d(x1))) -> c(g(g(x1)))
   a(g(g(g(x1)))) -> a(b(b(x1)))
   g(g(g(g(x1)))) -> g(b(b(x1)))
   d(g(g(g(x1)))) -> d(b(b(x1)))
   b(g(g(g(x1)))) -> b(b(b(x1)))
   c(g(g(g(x1)))) -> c(b(b(x1)))

Q is empty.

----------------------------------------

(3) RootLabelingProof (EQUIVALENT)
We used plain root labeling [ROOTLAB] with the following heuristic:
LabelAll: All function symbols get labeled

As Q is empty the root labeling was sound AND complete.

----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a_{a_1}(a_{a_1}(x1)) -> a_{g_1}(g_{d_1}(d_{a_1}(x1)))
   a_{a_1}(a_{g_1}(x1)) -> a_{g_1}(g_{d_1}(d_{g_1}(x1)))
   a_{a_1}(a_{d_1}(x1)) -> a_{g_1}(g_{d_1}(d_{d_1}(x1)))
   a_{a_1}(a_{b_1}(x1)) -> a_{g_1}(g_{d_1}(d_{b_1}(x1)))
   a_{a_1}(a_{c_1}(x1)) -> a_{g_1}(g_{d_1}(d_{c_1}(x1)))
   g_{a_1}(a_{a_1}(x1)) -> g_{g_1}(g_{d_1}(d_{a_1}(x1)))
   g_{a_1}(a_{g_1}(x1)) -> g_{g_1}(g_{d_1}(d_{g_1}(x1)))
   g_{a_1}(a_{d_1}(x1)) -> g_{g_1}(g_{d_1}(d_{d_1}(x1)))
   g_{a_1}(a_{b_1}(x1)) -> g_{g_1}(g_{d_1}(d_{b_1}(x1)))
   g_{a_1}(a_{c_1}(x1)) -> g_{g_1}(g_{d_1}(d_{c_1}(x1)))
   d_{a_1}(a_{a_1}(x1)) -> d_{g_1}(g_{d_1}(d_{a_1}(x1)))
   d_{a_1}(a_{g_1}(x1)) -> d_{g_1}(g_{d_1}(d_{g_1}(x1)))
   d_{a_1}(a_{d_1}(x1)) -> d_{g_1}(g_{d_1}(d_{d_1}(x1)))
   d_{a_1}(a_{b_1}(x1)) -> d_{g_1}(g_{d_1}(d_{b_1}(x1)))
   d_{a_1}(a_{c_1}(x1)) -> d_{g_1}(g_{d_1}(d_{c_1}(x1)))
   b_{a_1}(a_{a_1}(x1)) -> b_{g_1}(g_{d_1}(d_{a_1}(x1)))
   b_{a_1}(a_{g_1}(x1)) -> b_{g_1}(g_{d_1}(d_{g_1}(x1)))
   b_{a_1}(a_{d_1}(x1)) -> b_{g_1}(g_{d_1}(d_{d_1}(x1)))
   b_{a_1}(a_{b_1}(x1)) -> b_{g_1}(g_{d_1}(d_{b_1}(x1)))
   b_{a_1}(a_{c_1}(x1)) -> b_{g_1}(g_{d_1}(d_{c_1}(x1)))
   c_{a_1}(a_{a_1}(x1)) -> c_{g_1}(g_{d_1}(d_{a_1}(x1)))
   c_{a_1}(a_{g_1}(x1)) -> c_{g_1}(g_{d_1}(d_{g_1}(x1)))
   c_{a_1}(a_{d_1}(x1)) -> c_{g_1}(g_{d_1}(d_{d_1}(x1)))
   c_{a_1}(a_{b_1}(x1)) -> c_{g_1}(g_{d_1}(d_{b_1}(x1)))
   c_{a_1}(a_{c_1}(x1)) -> c_{g_1}(g_{d_1}(d_{c_1}(x1)))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   a_{b_1}(b_{b_1}(b_{a_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   a_{b_1}(b_{b_1}(b_{g_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   a_{b_1}(b_{b_1}(b_{d_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   a_{b_1}(b_{b_1}(b_{c_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   g_{b_1}(b_{b_1}(b_{a_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   g_{b_1}(b_{b_1}(b_{g_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   g_{b_1}(b_{b_1}(b_{d_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   g_{b_1}(b_{b_1}(b_{c_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   d_{b_1}(b_{b_1}(b_{a_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   d_{b_1}(b_{b_1}(b_{g_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   d_{b_1}(b_{b_1}(b_{d_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   d_{b_1}(b_{b_1}(b_{c_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   b_{b_1}(b_{b_1}(b_{a_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   b_{b_1}(b_{b_1}(b_{g_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   b_{b_1}(b_{b_1}(b_{d_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{c_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   c_{b_1}(b_{b_1}(b_{a_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   c_{b_1}(b_{b_1}(b_{g_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   c_{b_1}(b_{b_1}(b_{d_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   c_{b_1}(b_{b_1}(b_{c_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   a_{c_1}(c_{d_1}(d_{a_1}(x1))) -> a_{g_1}(g_{g_1}(g_{a_1}(x1)))
   a_{c_1}(c_{d_1}(d_{g_1}(x1))) -> a_{g_1}(g_{g_1}(g_{g_1}(x1)))
   a_{c_1}(c_{d_1}(d_{d_1}(x1))) -> a_{g_1}(g_{g_1}(g_{d_1}(x1)))
   a_{c_1}(c_{d_1}(d_{b_1}(x1))) -> a_{g_1}(g_{g_1}(g_{b_1}(x1)))
   a_{c_1}(c_{d_1}(d_{c_1}(x1))) -> a_{g_1}(g_{g_1}(g_{c_1}(x1)))
   g_{c_1}(c_{d_1}(d_{a_1}(x1))) -> g_{g_1}(g_{g_1}(g_{a_1}(x1)))
   g_{c_1}(c_{d_1}(d_{g_1}(x1))) -> g_{g_1}(g_{g_1}(g_{g_1}(x1)))
   g_{c_1}(c_{d_1}(d_{d_1}(x1))) -> g_{g_1}(g_{g_1}(g_{d_1}(x1)))
   g_{c_1}(c_{d_1}(d_{b_1}(x1))) -> g_{g_1}(g_{g_1}(g_{b_1}(x1)))
   g_{c_1}(c_{d_1}(d_{c_1}(x1))) -> g_{g_1}(g_{g_1}(g_{c_1}(x1)))
   d_{c_1}(c_{d_1}(d_{a_1}(x1))) -> d_{g_1}(g_{g_1}(g_{a_1}(x1)))
   d_{c_1}(c_{d_1}(d_{g_1}(x1))) -> d_{g_1}(g_{g_1}(g_{g_1}(x1)))
   d_{c_1}(c_{d_1}(d_{d_1}(x1))) -> d_{g_1}(g_{g_1}(g_{d_1}(x1)))
   d_{c_1}(c_{d_1}(d_{b_1}(x1))) -> d_{g_1}(g_{g_1}(g_{b_1}(x1)))
   d_{c_1}(c_{d_1}(d_{c_1}(x1))) -> d_{g_1}(g_{g_1}(g_{c_1}(x1)))
   b_{c_1}(c_{d_1}(d_{a_1}(x1))) -> b_{g_1}(g_{g_1}(g_{a_1}(x1)))
   b_{c_1}(c_{d_1}(d_{g_1}(x1))) -> b_{g_1}(g_{g_1}(g_{g_1}(x1)))
   b_{c_1}(c_{d_1}(d_{d_1}(x1))) -> b_{g_1}(g_{g_1}(g_{d_1}(x1)))
   b_{c_1}(c_{d_1}(d_{b_1}(x1))) -> b_{g_1}(g_{g_1}(g_{b_1}(x1)))
   b_{c_1}(c_{d_1}(d_{c_1}(x1))) -> b_{g_1}(g_{g_1}(g_{c_1}(x1)))
   c_{c_1}(c_{d_1}(d_{a_1}(x1))) -> c_{g_1}(g_{g_1}(g_{a_1}(x1)))
   c_{c_1}(c_{d_1}(d_{g_1}(x1))) -> c_{g_1}(g_{g_1}(g_{g_1}(x1)))
   c_{c_1}(c_{d_1}(d_{d_1}(x1))) -> c_{g_1}(g_{g_1}(g_{d_1}(x1)))
   c_{c_1}(c_{d_1}(d_{b_1}(x1))) -> c_{g_1}(g_{g_1}(g_{b_1}(x1)))
   c_{c_1}(c_{d_1}(d_{c_1}(x1))) -> c_{g_1}(g_{g_1}(g_{c_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{a_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{g_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{d_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{b_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{c_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{a_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{g_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{d_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{b_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{c_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{a_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{g_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{d_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{b_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{c_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{a_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{g_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{d_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{b_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{c_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{a_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{g_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{d_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{b_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{c_1}(x1)))

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a_{a_1}(x_1)) = 21 + x_1
   POL(a_{b_1}(x_1)) = 52 + x_1
   POL(a_{c_1}(x_1)) = 70 + x_1
   POL(a_{d_1}(x_1)) = 20 + x_1
   POL(a_{g_1}(x_1)) = 38 + x_1
   POL(b_{a_1}(x_1)) = 4 + x_1
   POL(b_{b_1}(x_1)) = 35 + x_1
   POL(b_{c_1}(x_1)) = 54 + x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(b_{g_1}(x_1)) = 22 + x_1
   POL(c_{a_1}(x_1)) = 4 + x_1
   POL(c_{b_1}(x_1)) = 35 + x_1
   POL(c_{c_1}(x_1)) = 54 + x_1
   POL(c_{d_1}(x_1)) = x_1
   POL(c_{g_1}(x_1)) = 22 + x_1
   POL(d_{a_1}(x_1)) = x_1
   POL(d_{b_1}(x_1)) = 31 + x_1
   POL(d_{c_1}(x_1)) = 50 + x_1
   POL(d_{d_1}(x_1)) = x_1
   POL(d_{g_1}(x_1)) = 17 + x_1
   POL(g_{a_1}(x_1)) = 7 + x_1
   POL(g_{b_1}(x_1)) = 38 + x_1
   POL(g_{c_1}(x_1)) = 57 + x_1
   POL(g_{d_1}(x_1)) = 2 + x_1
   POL(g_{g_1}(x_1)) = 24 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a_{a_1}(a_{a_1}(x1)) -> a_{g_1}(g_{d_1}(d_{a_1}(x1)))
   a_{a_1}(a_{g_1}(x1)) -> a_{g_1}(g_{d_1}(d_{g_1}(x1)))
   a_{a_1}(a_{d_1}(x1)) -> a_{g_1}(g_{d_1}(d_{d_1}(x1)))
   a_{a_1}(a_{b_1}(x1)) -> a_{g_1}(g_{d_1}(d_{b_1}(x1)))
   a_{a_1}(a_{c_1}(x1)) -> a_{g_1}(g_{d_1}(d_{c_1}(x1)))
   g_{a_1}(a_{a_1}(x1)) -> g_{g_1}(g_{d_1}(d_{a_1}(x1)))
   g_{a_1}(a_{g_1}(x1)) -> g_{g_1}(g_{d_1}(d_{g_1}(x1)))
   g_{a_1}(a_{d_1}(x1)) -> g_{g_1}(g_{d_1}(d_{d_1}(x1)))
   g_{a_1}(a_{b_1}(x1)) -> g_{g_1}(g_{d_1}(d_{b_1}(x1)))
   g_{a_1}(a_{c_1}(x1)) -> g_{g_1}(g_{d_1}(d_{c_1}(x1)))
   d_{a_1}(a_{a_1}(x1)) -> d_{g_1}(g_{d_1}(d_{a_1}(x1)))
   d_{a_1}(a_{g_1}(x1)) -> d_{g_1}(g_{d_1}(d_{g_1}(x1)))
   d_{a_1}(a_{d_1}(x1)) -> d_{g_1}(g_{d_1}(d_{d_1}(x1)))
   d_{a_1}(a_{b_1}(x1)) -> d_{g_1}(g_{d_1}(d_{b_1}(x1)))
   d_{a_1}(a_{c_1}(x1)) -> d_{g_1}(g_{d_1}(d_{c_1}(x1)))
   b_{a_1}(a_{a_1}(x1)) -> b_{g_1}(g_{d_1}(d_{a_1}(x1)))
   b_{a_1}(a_{g_1}(x1)) -> b_{g_1}(g_{d_1}(d_{g_1}(x1)))
   b_{a_1}(a_{b_1}(x1)) -> b_{g_1}(g_{d_1}(d_{b_1}(x1)))
   c_{a_1}(a_{a_1}(x1)) -> c_{g_1}(g_{d_1}(d_{a_1}(x1)))
   c_{a_1}(a_{g_1}(x1)) -> c_{g_1}(g_{d_1}(d_{g_1}(x1)))
   c_{a_1}(a_{b_1}(x1)) -> c_{g_1}(g_{d_1}(d_{b_1}(x1)))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> a_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> g_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> d_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> b_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{a_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{g_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{g_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{d_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{b_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))) -> c_{c_1}(c_{d_1}(d_{c_1}(c_{c_1}(x1))))
   a_{b_1}(b_{b_1}(b_{a_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   a_{b_1}(b_{b_1}(b_{g_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   a_{b_1}(b_{b_1}(b_{d_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   a_{b_1}(b_{b_1}(b_{b_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   a_{b_1}(b_{b_1}(b_{c_1}(x1))) -> a_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   g_{b_1}(b_{b_1}(b_{a_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   g_{b_1}(b_{b_1}(b_{g_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   g_{b_1}(b_{b_1}(b_{d_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   g_{b_1}(b_{b_1}(b_{b_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   g_{b_1}(b_{b_1}(b_{c_1}(x1))) -> g_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   d_{b_1}(b_{b_1}(b_{a_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   d_{b_1}(b_{b_1}(b_{g_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   d_{b_1}(b_{b_1}(b_{d_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   d_{b_1}(b_{b_1}(b_{b_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   d_{b_1}(b_{b_1}(b_{c_1}(x1))) -> d_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   b_{b_1}(b_{b_1}(b_{a_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   b_{b_1}(b_{b_1}(b_{g_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   b_{b_1}(b_{b_1}(b_{d_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   b_{b_1}(b_{b_1}(b_{b_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{c_1}(x1))) -> b_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   c_{b_1}(b_{b_1}(b_{a_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{a_1}(x1))))
   c_{b_1}(b_{b_1}(b_{g_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{g_1}(x1))))
   c_{b_1}(b_{b_1}(b_{d_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{d_1}(x1))))
   c_{b_1}(b_{b_1}(b_{b_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{b_1}(x1))))
   c_{b_1}(b_{b_1}(b_{c_1}(x1))) -> c_{a_1}(a_{g_1}(g_{g_1}(g_{c_1}(x1))))
   a_{c_1}(c_{d_1}(d_{a_1}(x1))) -> a_{g_1}(g_{g_1}(g_{a_1}(x1)))
   a_{c_1}(c_{d_1}(d_{g_1}(x1))) -> a_{g_1}(g_{g_1}(g_{g_1}(x1)))
   a_{c_1}(c_{d_1}(d_{d_1}(x1))) -> a_{g_1}(g_{g_1}(g_{d_1}(x1)))
   a_{c_1}(c_{d_1}(d_{b_1}(x1))) -> a_{g_1}(g_{g_1}(g_{b_1}(x1)))
   a_{c_1}(c_{d_1}(d_{c_1}(x1))) -> a_{g_1}(g_{g_1}(g_{c_1}(x1)))
   g_{c_1}(c_{d_1}(d_{a_1}(x1))) -> g_{g_1}(g_{g_1}(g_{a_1}(x1)))
   g_{c_1}(c_{d_1}(d_{g_1}(x1))) -> g_{g_1}(g_{g_1}(g_{g_1}(x1)))
   g_{c_1}(c_{d_1}(d_{d_1}(x1))) -> g_{g_1}(g_{g_1}(g_{d_1}(x1)))
   g_{c_1}(c_{d_1}(d_{b_1}(x1))) -> g_{g_1}(g_{g_1}(g_{b_1}(x1)))
   g_{c_1}(c_{d_1}(d_{c_1}(x1))) -> g_{g_1}(g_{g_1}(g_{c_1}(x1)))
   d_{c_1}(c_{d_1}(d_{a_1}(x1))) -> d_{g_1}(g_{g_1}(g_{a_1}(x1)))
   d_{c_1}(c_{d_1}(d_{g_1}(x1))) -> d_{g_1}(g_{g_1}(g_{g_1}(x1)))
   d_{c_1}(c_{d_1}(d_{d_1}(x1))) -> d_{g_1}(g_{g_1}(g_{d_1}(x1)))
   d_{c_1}(c_{d_1}(d_{b_1}(x1))) -> d_{g_1}(g_{g_1}(g_{b_1}(x1)))
   d_{c_1}(c_{d_1}(d_{c_1}(x1))) -> d_{g_1}(g_{g_1}(g_{c_1}(x1)))
   b_{c_1}(c_{d_1}(d_{a_1}(x1))) -> b_{g_1}(g_{g_1}(g_{a_1}(x1)))
   b_{c_1}(c_{d_1}(d_{g_1}(x1))) -> b_{g_1}(g_{g_1}(g_{g_1}(x1)))
   b_{c_1}(c_{d_1}(d_{d_1}(x1))) -> b_{g_1}(g_{g_1}(g_{d_1}(x1)))
   b_{c_1}(c_{d_1}(d_{b_1}(x1))) -> b_{g_1}(g_{g_1}(g_{b_1}(x1)))
   b_{c_1}(c_{d_1}(d_{c_1}(x1))) -> b_{g_1}(g_{g_1}(g_{c_1}(x1)))
   c_{c_1}(c_{d_1}(d_{a_1}(x1))) -> c_{g_1}(g_{g_1}(g_{a_1}(x1)))
   c_{c_1}(c_{d_1}(d_{g_1}(x1))) -> c_{g_1}(g_{g_1}(g_{g_1}(x1)))
   c_{c_1}(c_{d_1}(d_{d_1}(x1))) -> c_{g_1}(g_{g_1}(g_{d_1}(x1)))
   c_{c_1}(c_{d_1}(d_{b_1}(x1))) -> c_{g_1}(g_{g_1}(g_{b_1}(x1)))
   c_{c_1}(c_{d_1}(d_{c_1}(x1))) -> c_{g_1}(g_{g_1}(g_{c_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{a_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{g_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{d_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{b_1}(x1)))
   a_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> a_{b_1}(b_{b_1}(b_{c_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{a_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{g_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{d_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{b_1}(x1)))
   g_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> g_{b_1}(b_{b_1}(b_{c_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{a_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{g_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{d_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{b_1}(x1)))
   d_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> d_{b_1}(b_{b_1}(b_{c_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{a_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{g_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{d_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{b_1}(x1)))
   b_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> b_{b_1}(b_{b_1}(b_{c_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{a_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{a_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{g_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{g_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{d_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{d_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{b_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{b_1}(x1)))
   c_{g_1}(g_{g_1}(g_{g_1}(g_{c_1}(x1)))) -> c_{b_1}(b_{b_1}(b_{c_1}(x1)))




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b_{a_1}(a_{d_1}(x1)) -> b_{g_1}(g_{d_1}(d_{d_1}(x1)))
   b_{a_1}(a_{c_1}(x1)) -> b_{g_1}(g_{d_1}(d_{c_1}(x1)))
   c_{a_1}(a_{d_1}(x1)) -> c_{g_1}(g_{d_1}(d_{d_1}(x1)))
   c_{a_1}(a_{c_1}(x1)) -> c_{g_1}(g_{d_1}(d_{c_1}(x1)))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a_{c_1}(x_1)) = x_1
   POL(a_{d_1}(x_1)) = x_1
   POL(b_{a_1}(x_1)) = 1 + x_1
   POL(b_{g_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = 1 + x_1
   POL(c_{g_1}(x_1)) = x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1
   POL(g_{d_1}(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   b_{a_1}(a_{d_1}(x1)) -> b_{g_1}(g_{d_1}(d_{d_1}(x1)))
   b_{a_1}(a_{c_1}(x1)) -> b_{g_1}(g_{d_1}(d_{c_1}(x1)))
   c_{a_1}(a_{d_1}(x1)) -> c_{g_1}(g_{d_1}(d_{d_1}(x1)))
   c_{a_1}(a_{c_1}(x1)) -> c_{g_1}(g_{d_1}(d_{c_1}(x1)))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
R is empty.
Q is empty.

----------------------------------------

(9) RisEmptyProof (EQUIVALENT)
The TRS R is empty. Hence, termination is trivially proven.
----------------------------------------

(10)
YES
