YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bTnIV.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 2 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 2 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 9 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> x1
   a(b(x1)) -> c(b(x1))
   a(c(c(x1))) -> c(c(a(a(x1))))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> b(c(x1))
   c(c(a(x1))) -> a(a(c(c(x1))))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(c(x1))
   B(a(x1)) -> C(x1)
   C(c(a(x1))) -> A(a(c(c(x1))))
   C(c(a(x1))) -> A(c(c(x1)))
   C(c(a(x1))) -> C(c(x1))
   C(c(a(x1))) -> C(x1)

The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> b(c(x1))
   c(c(a(x1))) -> a(a(c(c(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(a(x1))) -> C(x1)
   C(c(a(x1))) -> C(c(x1))

The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> b(c(x1))
   c(c(a(x1))) -> a(a(c(c(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(a(x1))) -> C(x1)
   C(c(a(x1))) -> C(c(x1))

The TRS R consists of the following rules:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C(c(a(x1))) -> C(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(C(x_1)) = 2*x_1
   POL(a(x_1)) = x_1
   POL(c(x_1)) = 2 + x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(c(a(x1))) -> C(c(x1))

The TRS R consists of the following rules:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C(c(a(x1))) -> C(c(x1))

Strictly oriented rules of the TRS R:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1

Used ordering: Polynomial interpretation [POLO]:

   POL(C(x_1)) = x_1
   POL(a(x_1)) = 2 + x_1
   POL(c(x_1)) = 2*x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(c(x1))

The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> b(c(x1))
   c(c(a(x1))) -> a(a(c(c(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(c(x1))

The TRS R consists of the following rules:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(a(x1)) -> B(c(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[-I]] 	 +  	[[0A, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[1A], [0A], [-I]] 	 +  	[[0A, 1A, 0A], [-I, 0A, -I], [-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [-I], [-I]] 	 +  	[[-I, 0A, -I], [0A, -I, -I], [-I, 0A, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c(c(a(x1))) -> a(a(c(c(x1))))
   a(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
