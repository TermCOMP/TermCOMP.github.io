YES
**************************************************
summary
**************************************************
SRS with 10 rules on 8 letters       mirror
SRS with 10 rules on 8 letters       DP
SRS with 20 strict rules and 10 weak rules on 15 letters       weights
SRS with 7 strict rules and 10 weak rules on 15 letters       EDG
5 sub-proofs
  1 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  3 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 9 weak rules on 7 letters       EDG

  4 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  5 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [R, 2] -> [2, R] {- Input 0 -}
  [R, 3] -> [3, R] {- Input 1 -}
  [R, 1] -> [L, 3] {- Input 2 -}
  [3, L] -> [L, 3] {- Input 3 -}
  [2, L] -> [L, 2] {- Input 4 -}
  [0, L] -> [2, R] {- Input 5 -}
  [R, b] -> [c, 1, b] {- Input 6 -}
  [3, c] -> [c, 1] {- Input 7 -}
  [2, c, 1] -> [c, 0, R, 1] {- Input 8 -}
  [2, c, 0] -> [c, 0, 0] {- Input 9 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [2, R] -> [R, 2] {- Mirror (Input 0) -}
  [3, R] -> [R, 3] {- Mirror (Input 1) -}
  [1, R] -> [3, L] {- Mirror (Input 2) -}
  [L, 3] -> [3, L] {- Mirror (Input 3) -}
  [L, 2] -> [2, L] {- Mirror (Input 4) -}
  [L, 0] -> [R, 2] {- Mirror (Input 5) -}
  [b, R] -> [b, 1, c] {- Mirror (Input 6) -}
  [c, 3] -> [1, c] {- Mirror (Input 7) -}
  [1, c, 2] -> [1, R, 0, c] {- Mirror (Input 8) -}
  [0, c, 2] -> [0, 0, c] {- Mirror (Input 9) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 2] |-> [L#] {- DP (Top 1) (Mirror (Input 4)) -}
  [L#, 2] |-> [2#, L] {- DP (Top 0) (Mirror (Input 4)) -}
  [L#, 0] |-> [2#] {- DP (Top 1) (Mirror (Input 5)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [L#, 3] |-> [3#, L] {- DP (Top 0) (Mirror (Input 3)) -}
  [1#, R] |-> [L#] {- DP (Top 1) (Mirror (Input 2)) -}
  [1#, R] |-> [3#, L] {- DP (Top 0) (Mirror (Input 2)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [0#, c] {- DP (Top 2) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [c#] {- DP (Top 3) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [1#, c] {- DP (Top 1) (Mirror (Input 6)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [b#, R] |-> [c#] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [0#, c] {- DP (Top 1) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [c#] {- DP (Top 2) (Mirror (Input 9)) -}
  [c#, 3] |-> [1#, c] {- DP (Top 0) (Mirror (Input 7)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (L, 0/1)
  (1, 0/1)
  (R, 0/1)
  (2, 3/1)
  (b, 0/1)
  (0, 3/1)
  (c, 0/1)
  (3, 0/1)
  (L#, 3/1)
  (1#, 4/1)
  (2#, 0/1)
  (b#, 6/1)
  (0#, 3/1)
  (c#, 5/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
reason
  (3, 1/1)
  (L#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (R, 1/1)
  (2#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( L
  , Wk  / 0A 1A  -   \
        | -  -1A -1A |
        \ -  -   0A  / )
  ( 1
  , Wk  / -1A 0A  0A \
        | -2A -1A -  |
        \ -   -   0A / )
  ( R
  , Wk  / 0A -  -  \
        | -  0A 0A |
        \ -  -  0A / )
  ( 2
  , Wk  / 1A 2A 2A \
        | -  0A -  |
        \ -  -  0A / )
  ( 0
  , Wk  / 0A -1A 2A \
        | 0A 1A  1A |
        \ -  -   0A / )
  ( c
  , Wk  / 0A  0A  -  \
        | -1A -1A -  |
        \ -   -   0A / )
  ( 3
  , Wk  / -1A -  0A \
        | -   0A -  |
        \ -   -  0A / )
  ( b#
  , Wk  / 0A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
reason
  (3, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (R, 1/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(10,8)\Deepee(20/10,15)\Weight(7/10,15)\EDG[(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1/9,8)\Matrix{\ArcticBZ}{3}(0/9,7)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))
