YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/EHWip.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 1 ms]
(4) QDP
(5) QDPOrderProof [EQUIVALENT, 15 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(b(x1))) -> b(a(b(c(a(x1)))))
   b(a(x1)) -> a(b(b(x1)))
   b(c(a(x1))) -> c(a(b(x1)))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(a(x1))) -> A(c(b(a(b(x1)))))
   B(a(a(x1))) -> B(a(b(x1)))
   B(a(a(x1))) -> A(b(x1))
   B(a(a(x1))) -> B(x1)
   A(b(x1)) -> B(b(a(x1)))
   A(b(x1)) -> B(a(x1))
   A(b(x1)) -> A(x1)
   A(c(b(x1))) -> B(a(c(x1)))
   A(c(b(x1))) -> A(c(x1))

The TRS R consists of the following rules:

   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(a(a(x1))) -> A(c(b(a(b(x1)))))
   B(a(a(x1))) -> B(a(b(x1)))
   B(a(a(x1))) -> A(b(x1))
   B(a(a(x1))) -> B(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(A(x_1)) = 1 + x_1
   POL(B(x_1)) = x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   a(c(b(x1))) -> b(a(c(x1)))
   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))


----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> B(b(a(x1)))
   A(b(x1)) -> B(a(x1))
   A(b(x1)) -> A(x1)
   A(c(b(x1))) -> B(a(c(x1)))
   A(c(b(x1))) -> A(c(x1))

The TRS R consists of the following rules:

   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(c(x1))

The TRS R consists of the following rules:

   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(c(b(x1))) -> A(c(x1))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(c(b(x1))) -> A(c(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(A(x_1)) = x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   b(a(a(x1))) -> a(c(b(a(b(x1)))))
   a(b(x1)) -> b(b(a(x1)))
   a(c(b(x1))) -> b(a(c(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A(b(x1)) -> A(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
