YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Iqhou.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 19 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) MRRProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) PisEmptyProof [EQUIVALENT, 0 ms]
        (30) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(*(x1)) -> *(1(x1))
   1(*(x1)) -> 0(#(x1))
   #(0(x1)) -> 0(#(x1))
   #(1(x1)) -> 1(#(x1))
   #($(x1)) -> *($(x1))
   #(#(x1)) -> #(x1)
   #(*(x1)) -> *(x1)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))
   #(#(x1)) -> #(x1)
   *(#(x1)) -> *(x1)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(#(x_1)) = 1 + x_1
   POL($(x_1)) = x_1
   POL(*(x_1)) = 1 + x_1
   POL(0(x_1)) = x_1
   POL(1(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   #(#(x1)) -> #(x1)
   *(#(x1)) -> *(x1)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(0(x1)) -> 1^1(*(x1))
   *^1(0(x1)) -> *^1(x1)
   *^1(1(x1)) -> 0^1(x1)
   0^1(#(x1)) -> 0^1(x1)
   1^1(#(x1)) -> 1^1(x1)
   $^1(#(x1)) -> $^1(*(x1))
   $^1(#(x1)) -> *^1(x1)

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 3 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   1^1(#(x1)) -> 1^1(x1)

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   1^1(#(x1)) -> 1^1(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*1^1(#(x1)) -> 1^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(#(x1)) -> 0^1(x1)

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(#(x1)) -> 0^1(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*0^1(#(x1)) -> 0^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(0(x1)) -> *^1(x1)

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   *^1(0(x1)) -> *^1(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
**^1(0(x1)) -> *^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   $^1(#(x1)) -> $^1(*(x1))

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))
   $(#(x1)) -> $(*(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   $^1(#(x1)) -> $^1(*(x1))

The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))
   1(#(x1)) -> #(1(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   $^1(#(x1)) -> $^1(*(x1))

Strictly oriented rules of the TRS R:

   *(1(x1)) -> #(0(x1))
   0(#(x1)) -> #(0(x1))

Used ordering: Polynomial interpretation [POLO]:

   POL(#(x_1)) = 1 + 2*x_1
   POL($^1(x_1)) = 3*x_1
   POL(*(x_1)) = 2*x_1
   POL(0(x_1)) = 1 + 3*x_1
   POL(1(x_1)) = 2 + 3*x_1


----------------------------------------

(28)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   *(0(x1)) -> 1(*(x1))
   1(#(x1)) -> #(1(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(30)
YES
