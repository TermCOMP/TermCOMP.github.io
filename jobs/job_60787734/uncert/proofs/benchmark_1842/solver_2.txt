YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/H769e.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 9 ms]
(4) QTRS
(5) AAECC Innermost [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QReductionProof [EQUIVALENT, 0 ms]
        (15) QDP
        (16) QDPOrderProof [EQUIVALENT, 4 ms]
        (17) QDP
        (18) PisEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QReductionProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (26) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(0(x1)) -> s(0(x1))
   d(0(x1)) -> 0(x1)
   d(s(x1)) -> s(s(d(p(s(x1)))))
   f(s(x1)) -> d(f(p(s(x1))))
   p(s(x1)) -> x1

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(f(x1)) -> 0(s(x1))
   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0(x_1)) = x_1
   POL(d(x_1)) = x_1
   POL(f(x_1)) = 1 + x_1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   0(f(x1)) -> 0(s(x1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

Q is empty.

----------------------------------------

(5) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1
   s(d(x1)) -> s(p(d(s(s(x1)))))

The TRS R 2 is 
   0(d(x1)) -> 0(x1)

The signature Sigma is {0_1}
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(d(x1)) -> 0^1(x1)
   S(d(x1)) -> S(p(d(s(s(x1)))))
   S(d(x1)) -> S(s(x1))
   S(d(x1)) -> S(x1)
   S(f(x1)) -> S(p(f(d(x1))))

The TRS R consists of the following rules:

   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(d(x1)) -> S(x1)
   S(d(x1)) -> S(s(x1))

The TRS R consists of the following rules:

   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(d(x1)) -> S(x1)
   S(d(x1)) -> S(s(x1))

The TRS R consists of the following rules:

   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0(d(x0))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(d(x1)) -> S(x1)
   S(d(x1)) -> S(s(x1))

The TRS R consists of the following rules:

   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S(d(x1)) -> S(x1)
   S(d(x1)) -> S(s(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(S(x_1)) = x_1
   POL(d(x_1)) = 1 + x_1
   POL(f(x_1)) = 1
   POL(p(x_1)) = x_1
   POL(s(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1


----------------------------------------

(17)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(18) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(d(x1)) -> 0^1(x1)

The TRS R consists of the following rules:

   0(d(x1)) -> 0(x1)
   s(d(x1)) -> s(p(d(s(s(x1)))))
   s(f(x1)) -> s(p(f(d(x1))))
   s(p(x1)) -> x1

The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(d(x1)) -> 0^1(x1)

R is empty.
The set Q consists of the following terms:

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   0(d(x0))
   s(d(x0))
   s(f(x0))
   s(p(x0))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   0^1(d(x1)) -> 0^1(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*0^1(d(x1)) -> 0^1(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(26)
YES
