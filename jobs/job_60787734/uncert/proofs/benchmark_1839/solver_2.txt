YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lejT0.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 11 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 8 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QDPOrderProof [EQUIVALENT, 11 ms]
        (28) QDP
        (29) PisEmptyProof [EQUIVALENT, 0 ms]
        (30) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   t(f(x1)) -> t(c(n(x1)))
   n(f(x1)) -> f(n(x1))
   o(f(x1)) -> f(o(x1))
   n(s(x1)) -> f(s(x1))
   o(s(x1)) -> f(s(x1))
   c(f(x1)) -> f(c(x1))
   c(n(x1)) -> n(c(x1))
   c(o(x1)) -> o(c(x1))
   c(o(x1)) -> o(x1)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   s(o(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(c(x_1)) = x_1
   POL(f(x_1)) = x_1
   POL(n(x_1)) = x_1
   POL(o(x_1)) = 1 + x_1
   POL(s(x_1)) = x_1
   POL(t(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   s(o(x1)) -> s(f(x1))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(t(x1)) -> N(c(t(x1)))
   F(n(x1)) -> N(f(x1))
   F(n(x1)) -> F(x1)
   F(o(x1)) -> O(f(x1))
   F(o(x1)) -> F(x1)
   S(n(x1)) -> S(f(x1))
   S(n(x1)) -> F(x1)
   F(c(x1)) -> F(x1)
   N(c(x1)) -> N(x1)
   O(c(x1)) -> O(x1)

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 4 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   O(c(x1)) -> O(x1)

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   O(c(x1)) -> O(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*O(c(x1)) -> O(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N(c(x1)) -> N(x1)

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   N(c(x1)) -> N(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*N(c(x1)) -> N(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(o(x1)) -> F(x1)
   F(n(x1)) -> F(x1)
   F(c(x1)) -> F(x1)

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(o(x1)) -> F(x1)
   F(n(x1)) -> F(x1)
   F(c(x1)) -> F(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(o(x1)) -> F(x1)
The graph contains the following edges 1 > 1


*F(n(x1)) -> F(x1)
The graph contains the following edges 1 > 1


*F(c(x1)) -> F(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(n(x1)) -> S(f(x1))

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   s(n(x1)) -> s(f(x1))
   f(c(x1)) -> c(f(x1))
   n(c(x1)) -> c(n(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(n(x1)) -> S(f(x1))

The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   f(c(x1)) -> c(f(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)
   n(c(x1)) -> c(n(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S(n(x1)) -> S(f(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( S_1(x_1) ) = 2x_1 + 2
POL( f_1(x_1) ) = x_1
POL( t_1(x_1) ) = 2x_1 + 2
POL( n_1(x_1) ) = x_1 + 2
POL( c_1(x_1) ) = max{0, -2}
POL( o_1(x_1) ) = max{0, -2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   f(c(x1)) -> c(f(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)
   n(c(x1)) -> c(n(x1))


----------------------------------------

(28)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(t(x1)) -> n(c(t(x1)))
   f(n(x1)) -> n(f(x1))
   f(o(x1)) -> o(f(x1))
   f(c(x1)) -> c(f(x1))
   o(c(x1)) -> c(o(x1))
   o(c(x1)) -> o(x1)
   n(c(x1)) -> c(n(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(30)
YES
