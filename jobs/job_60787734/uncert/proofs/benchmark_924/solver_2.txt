YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/X9DeO.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 1 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) QDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) QDP
        (22) QDPOrderProof [EQUIVALENT, 41 ms]
        (23) QDP
        (24) UsableRulesProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   g(h(x1)) -> g(f(s(x1)))
   f(s(s(s(x1)))) -> h(f(s(h(x1))))
   f(h(x1)) -> h(f(s(h(x1))))
   h(x1) -> x1
   f(f(s(s(x1)))) -> s(s(s(f(f(x1)))))
   b(a(x1)) -> a(b(x1))
   a(a(a(x1))) -> b(a(a(b(x1))))
   b(b(b(b(x1)))) -> a(x1)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))
   a(a(a(x1))) -> b(a(a(b(x1))))
   b(b(b(b(x1)))) -> a(x1)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(f(x_1)) = x_1
   POL(g(x_1)) = x_1
   POL(h(x_1)) = x_1
   POL(s(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a(a(a(x1))) -> b(a(a(b(x1))))
   b(b(b(b(x1)))) -> a(x1)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(g(x1)) -> S(f(g(x1)))
   S(s(s(f(x1)))) -> H(s(f(h(x1))))
   S(s(s(f(x1)))) -> S(f(h(x1)))
   S(s(s(f(x1)))) -> H(x1)
   H(f(x1)) -> H(s(f(h(x1))))
   H(f(x1)) -> S(f(h(x1)))
   H(f(x1)) -> H(x1)
   S(s(f(f(x1)))) -> S(s(s(x1)))
   S(s(f(f(x1)))) -> S(s(x1))
   S(s(f(f(x1)))) -> S(x1)
   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*A(b(x1)) -> A(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(x1)) -> H(x1)

The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   H(f(x1)) -> H(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*H(f(x1)) -> H(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(s(f(f(x1)))) -> S(s(x1))
   S(s(f(f(x1)))) -> S(s(s(x1)))
   S(s(f(f(x1)))) -> S(x1)

The TRS R consists of the following rules:

   h(g(x1)) -> s(f(g(x1)))
   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   a(b(x1)) -> b(a(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(s(f(f(x1)))) -> S(s(x1))
   S(s(f(f(x1)))) -> S(s(s(x1)))
   S(s(f(f(x1)))) -> S(x1)

The TRS R consists of the following rules:

   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   h(g(x1)) -> s(f(g(x1)))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S(s(f(f(x1)))) -> S(s(x1))
   S(s(f(f(x1)))) -> S(s(s(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(S(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(s(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, -I, 0A], [-I, 0A, -I], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(f(x_1)) =  	[[0A], [-I], [1A]] 	 +  	[[0A, 0A, 0A], [-I, 0A, 0A], [-I, 1A, -I]] 	* 	x_1
>>>

   <<<
 POL(h(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [-I, 0A, -I], [-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(g(x_1)) =  	[[-I], [-I], [-I]] 	 +  	[[1A, 1A, 0A], [0A, 0A, -I], [0A, 0A, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   h(g(x1)) -> s(f(g(x1)))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1


----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(s(f(f(x1)))) -> S(x1)

The TRS R consists of the following rules:

   s(s(s(f(x1)))) -> h(s(f(h(x1))))
   s(s(f(f(x1)))) -> f(f(s(s(s(x1)))))
   h(g(x1)) -> s(f(g(x1)))
   h(f(x1)) -> h(s(f(h(x1))))
   h(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(s(f(f(x1)))) -> S(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S(s(f(f(x1)))) -> S(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES
