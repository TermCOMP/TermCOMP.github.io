YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/u1cdJ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) RootLabelingProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(x1))) -> a(b(b(a(x1))))
   b(b(b(x1))) -> b(b(x1))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(x1))) -> a(b(b(a(x1))))
   b(b(b(x1))) -> b(b(x1))

Q is empty.

----------------------------------------

(3) RootLabelingProof (EQUIVALENT)
We used plain root labeling [ROOTLAB] with the following heuristic:
LabelAll: All function symbols get labeled

As Q is empty the root labeling was sound AND complete.

----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a_{b_1}(b_{a_1}(a_{a_1}(x1))) -> a_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(x1))))
   a_{b_1}(b_{a_1}(a_{b_1}(x1))) -> a_{b_1}(b_{b_1}(b_{a_1}(a_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{a_1}(x1))) -> b_{b_1}(b_{a_1}(x1))
   b_{b_1}(b_{b_1}(b_{b_1}(x1))) -> b_{b_1}(b_{b_1}(x1))

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A_{B_1}(b_{a_1}(a_{a_1}(x1))) -> A_{B_1}(b_{b_1}(b_{a_1}(a_{a_1}(x1))))
   A_{B_1}(b_{a_1}(a_{a_1}(x1))) -> B_{B_1}(b_{a_1}(a_{a_1}(x1)))
   A_{B_1}(b_{a_1}(a_{b_1}(x1))) -> A_{B_1}(b_{b_1}(b_{a_1}(a_{b_1}(x1))))
   A_{B_1}(b_{a_1}(a_{b_1}(x1))) -> B_{B_1}(b_{a_1}(a_{b_1}(x1)))

The TRS R consists of the following rules:

   a_{b_1}(b_{a_1}(a_{a_1}(x1))) -> a_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(x1))))
   a_{b_1}(b_{a_1}(a_{b_1}(x1))) -> a_{b_1}(b_{b_1}(b_{a_1}(a_{b_1}(x1))))
   b_{b_1}(b_{b_1}(b_{a_1}(x1))) -> b_{b_1}(b_{a_1}(x1))
   b_{b_1}(b_{b_1}(b_{b_1}(x1))) -> b_{b_1}(b_{b_1}(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 4 less nodes.
----------------------------------------

(8)
TRUE
