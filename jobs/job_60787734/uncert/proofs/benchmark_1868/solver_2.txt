YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3BS7E.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 10 ms]
(4) QTRS
(5) Overlay + Local Confluence [EQUIVALENT, 0 ms]
(6) QTRS
(7) DependencyPairsProof [EQUIVALENT, 2 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) QDP
(11) UsableRulesProof [EQUIVALENT, 0 ms]
(12) QDP
(13) QReductionProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> d(c(d(x1)))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   c(d(d(x1))) -> a(x1)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> d(c(d(x1)))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   d(d(c(x1))) -> a(x1)

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a(x_1)) = 53 + x_1
   POL(b(x_1)) = 35 + x_1
   POL(c(x_1)) = 23 + x_1
   POL(d(x_1)) = 15 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   a(a(x1)) -> b(b(b(x1)))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> d(c(d(x1)))
   d(d(c(x1))) -> a(x1)

Q is empty.

----------------------------------------

(5) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> d(c(d(x1)))
   d(d(c(x1))) -> a(x1)

The set Q consists of the following terms:

   a(x0)
   d(d(c(x0)))


----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(x1) -> D(c(d(x1)))
   A(x1) -> D(x1)
   D(d(c(x1))) -> A(x1)

The TRS R consists of the following rules:

   a(x1) -> d(c(d(x1)))
   d(d(c(x1))) -> a(x1)

The set Q consists of the following terms:

   a(x0)
   d(d(c(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(x1) -> D(x1)
   D(d(c(x1))) -> A(x1)

The TRS R consists of the following rules:

   a(x1) -> d(c(d(x1)))
   d(d(c(x1))) -> a(x1)

The set Q consists of the following terms:

   a(x0)
   d(d(c(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(x1) -> D(x1)
   D(d(c(x1))) -> A(x1)

R is empty.
The set Q consists of the following terms:

   a(x0)
   d(d(c(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   a(x0)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(x1) -> D(x1)
   D(d(c(x1))) -> A(x1)

R is empty.
The set Q consists of the following terms:

   d(d(c(x0)))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*D(d(c(x1))) -> A(x1)
The graph contains the following edges 1 > 1


*A(x1) -> D(x1)
The graph contains the following edges 1 >= 1


----------------------------------------

(16)
YES
