YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/OEq2W.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) PisEmptyProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) MRRProof [EQUIVALENT, 3 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) QDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPOrderProof [EQUIVALENT, 3 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 7 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(x1)) -> b(b(b(x1)))
   a(c(x1)) -> c(b(b(x1)))
   b(a(x1)) -> a(a(a(x1)))
   b(c(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   c(a(x1)) -> b(b(c(x1)))
   a(b(x1)) -> a(a(a(x1)))
   c(b(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(b(b(x1)))
   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(x1)
   C(a(x1)) -> B(b(c(x1)))
   C(a(x1)) -> B(c(x1))
   C(a(x1)) -> C(x1)
   A(b(x1)) -> A(a(a(x1)))
   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(x1)
   C(b(x1)) -> C(c(c(x1)))
   C(b(x1)) -> C(c(x1))
   C(b(x1)) -> C(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   c(a(x1)) -> b(b(c(x1)))
   a(b(x1)) -> a(a(a(x1)))
   c(b(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(a(a(x1)))
   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   c(a(x1)) -> b(b(c(x1)))
   a(b(x1)) -> a(a(a(x1)))
   c(b(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(a(a(x1)))
   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> a(a(a(x1)))
   a(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(a(a(x1)))
   A(b(x1)) -> A(x1)

Strictly oriented rules of the TRS R:

   a(b(x1)) -> a(a(a(x1)))
   a(x1) -> x1

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 3 + x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(b(b(x1)))
   B(a(x1)) -> B(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   c(a(x1)) -> b(b(c(x1)))
   a(b(x1)) -> a(a(a(x1)))
   c(b(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(b(b(x1)))
   B(a(x1)) -> B(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(b(b(x1)))
   B(a(x1)) -> B(x1)

Strictly oriented rules of the TRS R:

   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1

Used ordering: Polynomial interpretation [POLO]:

   POL(B(x_1)) = 3*x_1
   POL(a(x_1)) = 3 + x_1
   POL(b(x_1)) = 1 + x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(b(x1)) -> C(c(c(x1)))
   C(a(x1)) -> C(x1)
   C(b(x1)) -> C(c(x1))
   C(b(x1)) -> C(x1)

The TRS R consists of the following rules:

   b(a(x1)) -> b(b(b(x1)))
   c(a(x1)) -> b(b(c(x1)))
   a(b(x1)) -> a(a(a(x1)))
   c(b(x1)) -> c(c(c(x1)))
   a(x1) -> x1
   b(x1) -> x1
   c(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(b(x1)) -> C(c(c(x1)))
   C(a(x1)) -> C(x1)
   C(b(x1)) -> C(c(x1))
   C(b(x1)) -> C(x1)

The TRS R consists of the following rules:

   c(a(x1)) -> b(b(c(x1)))
   c(b(x1)) -> c(c(c(x1)))
   c(x1) -> x1
   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(24) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(a(x1)) -> C(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(C(x_1)) = x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = x_1
   POL(c(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(a(x1)) -> b(b(c(x1)))
   c(b(x1)) -> c(c(c(x1)))
   c(x1) -> x1
   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(b(x1)) -> C(c(c(x1)))
   C(b(x1)) -> C(c(x1))
   C(b(x1)) -> C(x1)

The TRS R consists of the following rules:

   c(a(x1)) -> b(b(c(x1)))
   c(b(x1)) -> c(c(c(x1)))
   c(x1) -> x1
   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(b(x1)) -> C(c(c(x1)))
   C(b(x1)) -> C(c(x1))
   C(b(x1)) -> C(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( C_1(x_1) ) = x_1 + 2
POL( c_1(x_1) ) = x_1
POL( a_1(x_1) ) = x_1 + 2
POL( b_1(x_1) ) = x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(a(x1)) -> b(b(c(x1)))
   c(b(x1)) -> c(c(c(x1)))
   c(x1) -> x1
   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1


----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   c(a(x1)) -> b(b(c(x1)))
   c(b(x1)) -> c(c(c(x1)))
   c(x1) -> x1
   b(a(x1)) -> b(b(b(x1)))
   b(x1) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
