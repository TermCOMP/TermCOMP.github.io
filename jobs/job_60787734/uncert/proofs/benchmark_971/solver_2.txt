YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/8xD1c.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 8 ms]
        (11) QDP
        (12) DependencyGraphProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 14 ms]
        (15) QDP
        (16) PisEmptyProof [EQUIVALENT, 0 ms]
        (17) YES
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(x1))) -> b(c(x1))
   b(b(b(x1))) -> c(b(x1))
   c(x1) -> a(b(x1))
   c(d(x1)) -> d(c(b(a(x1))))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(x1))) -> c(b(x1))
   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   d(c(x1)) -> a(b(c(d(x1))))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(a(x1))) -> C(b(x1))
   A(b(a(x1))) -> B(x1)
   B(b(b(x1))) -> B(c(x1))
   B(b(b(x1))) -> C(x1)
   C(x1) -> B(a(x1))
   C(x1) -> A(x1)
   D(c(x1)) -> A(b(c(d(x1))))
   D(c(x1)) -> B(c(d(x1)))
   D(c(x1)) -> C(d(x1))
   D(c(x1)) -> D(x1)

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(b(x1))
   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   d(c(x1)) -> a(b(c(d(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(x1) -> B(a(x1))
   B(b(b(x1))) -> B(c(x1))
   B(b(b(x1))) -> C(x1)
   C(x1) -> A(x1)
   A(b(a(x1))) -> C(b(x1))
   A(b(a(x1))) -> B(x1)

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(b(x1))
   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   d(c(x1)) -> a(b(c(d(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C(x1) -> B(a(x1))
   B(b(b(x1))) -> B(c(x1))
   B(b(b(x1))) -> C(x1)
   C(x1) -> A(x1)
   A(b(a(x1))) -> C(b(x1))
   A(b(a(x1))) -> B(x1)

The TRS R consists of the following rules:

   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   a(b(a(x1))) -> c(b(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   C(x1) -> B(a(x1))
   A(b(a(x1))) -> C(b(x1))
   A(b(a(x1))) -> B(x1)


Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = 2 + x_1
   POL(B(x_1)) = x_1
   POL(C(x_1)) = 2 + x_1
   POL(a(x_1)) = 1 + x_1
   POL(b(x_1)) = 1 + x_1
   POL(c(x_1)) = 2 + x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(b(x1))) -> B(c(x1))
   B(b(b(x1))) -> C(x1)
   C(x1) -> A(x1)

The TRS R consists of the following rules:

   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   a(b(a(x1))) -> c(b(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(b(x1))) -> B(c(x1))

The TRS R consists of the following rules:

   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   a(b(a(x1))) -> c(b(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(b(b(x1))) -> B(c(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[-I]] 	 +  	[[0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[1A, -I, 1A], [-I, -I, -I], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1A], [0A], [1A]] 	 +  	[[-I, 0A, 1A], [-I, -I, -I], [-I, 1A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [1A], [0A]] 	 +  	[[-I, -I, 0A], [-I, 1A, 0A], [-I, -I, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(x1) -> b(a(x1))
   a(b(a(x1))) -> c(b(x1))
   b(b(b(x1))) -> b(c(x1))


----------------------------------------

(15)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   a(b(a(x1))) -> c(b(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(c(x1)) -> D(x1)

The TRS R consists of the following rules:

   a(b(a(x1))) -> c(b(x1))
   b(b(b(x1))) -> b(c(x1))
   c(x1) -> b(a(x1))
   d(c(x1)) -> a(b(c(d(x1))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(c(x1)) -> D(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*D(c(x1)) -> D(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES
