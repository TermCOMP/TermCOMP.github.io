YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xMp2Y.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) FlatCCProof [EQUIVALENT, 0 ms]
(4) QTRS
(5) RootLabelingProof [EQUIVALENT, 0 ms]
(6) QTRS
(7) QTRSRRRProof [EQUIVALENT, 55 ms]
(8) QTRS
(9) DependencyPairsProof [EQUIVALENT, 42 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) UsableRulesProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QDPOrderProof [EQUIVALENT, 60 ms]
(16) QDP
(17) DependencyGraphProof [EQUIVALENT, 0 ms]
(18) QDP
(19) QDPOrderProof [EQUIVALENT, 30 ms]
(20) QDP
(21) QDPOrderProof [EQUIVALENT, 27 ms]
(22) QDP
(23) DependencyGraphProof [EQUIVALENT, 0 ms]
(24) QDP
(25) QDPOrderProof [EQUIVALENT, 33 ms]
(26) QDP
(27) DependencyGraphProof [EQUIVALENT, 0 ms]
(28) QDP
(29) QDPOrderProof [EQUIVALENT, 1401 ms]
(30) QDP
(31) PisEmptyProof [EQUIVALENT, 0 ms]
(32) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(b(d(d(b(b(x1)))))) -> c(c(d(d(b(b(x1))))))
   b(b(a(a(c(c(x1)))))) -> b(b(c(c(x1))))
   a(a(d(d(x1)))) -> d(d(c(c(x1))))
   b(b(b(b(b(b(x1)))))) -> a(a(b(b(c(c(x1))))))
   d(d(c(c(x1)))) -> b(b(d(d(x1))))
   d(d(c(c(x1)))) -> d(d(b(b(d(d(x1))))))
   d(d(a(a(c(c(x1)))))) -> b(b(b(b(x1))))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(b(d(d(b(b(x1)))))) -> b(b(d(d(c(c(x1))))))
   c(c(a(a(b(b(x1)))))) -> c(c(b(b(x1))))
   d(d(a(a(x1)))) -> c(c(d(d(x1))))
   b(b(b(b(b(b(x1)))))) -> c(c(b(b(a(a(x1))))))
   c(c(d(d(x1)))) -> d(d(b(b(x1))))
   c(c(d(d(x1)))) -> d(d(b(b(d(d(x1))))))
   c(c(a(a(d(d(x1)))))) -> b(b(b(b(x1))))

Q is empty.

----------------------------------------

(3) FlatCCProof (EQUIVALENT)
We used flat context closure [ROOTLAB]
As Q is empty the flat context closure was sound AND complete.

----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(b(d(d(b(b(x1)))))) -> b(b(d(d(c(c(x1))))))
   c(c(a(a(b(b(x1)))))) -> c(c(b(b(x1))))
   b(d(d(a(a(x1))))) -> b(c(c(d(d(x1)))))
   d(d(d(a(a(x1))))) -> d(c(c(d(d(x1)))))
   c(d(d(a(a(x1))))) -> c(c(c(d(d(x1)))))
   a(d(d(a(a(x1))))) -> a(c(c(d(d(x1)))))
   b(b(b(b(b(b(b(x1))))))) -> b(c(c(b(b(a(a(x1)))))))
   d(b(b(b(b(b(b(x1))))))) -> d(c(c(b(b(a(a(x1)))))))
   c(b(b(b(b(b(b(x1))))))) -> c(c(c(b(b(a(a(x1)))))))
   a(b(b(b(b(b(b(x1))))))) -> a(c(c(b(b(a(a(x1)))))))
   b(c(c(d(d(x1))))) -> b(d(d(b(b(x1)))))
   d(c(c(d(d(x1))))) -> d(d(d(b(b(x1)))))
   c(c(c(d(d(x1))))) -> c(d(d(b(b(x1)))))
   a(c(c(d(d(x1))))) -> a(d(d(b(b(x1)))))
   b(c(c(d(d(x1))))) -> b(d(d(b(b(d(d(x1)))))))
   d(c(c(d(d(x1))))) -> d(d(d(b(b(d(d(x1)))))))
   c(c(c(d(d(x1))))) -> c(d(d(b(b(d(d(x1)))))))
   a(c(c(d(d(x1))))) -> a(d(d(b(b(d(d(x1)))))))
   b(c(c(a(a(d(d(x1))))))) -> b(b(b(b(b(x1)))))
   d(c(c(a(a(d(d(x1))))))) -> d(b(b(b(b(x1)))))
   c(c(c(a(a(d(d(x1))))))) -> c(b(b(b(b(x1)))))
   a(c(c(a(a(d(d(x1))))))) -> a(b(b(b(b(x1)))))

Q is empty.

----------------------------------------

(5) RootLabelingProof (EQUIVALENT)
We used plain root labeling [ROOTLAB] with the following heuristic:
LabelAll: All function symbols get labeled

As Q is empty the root labeling was sound AND complete.

----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{b_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{b_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{b_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{d_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{c_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(x1))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(a_{a_1}(x_1)) = 1 + x_1
   POL(a_{b_1}(x_1)) = 1 + x_1
   POL(a_{c_1}(x_1)) = 1 + x_1
   POL(a_{d_1}(x_1)) = 1 + x_1
   POL(b_{a_1}(x_1)) = x_1
   POL(b_{b_1}(x_1)) = 1 + x_1
   POL(b_{c_1}(x_1)) = x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = 1 + x_1
   POL(c_{b_1}(x_1)) = x_1
   POL(c_{c_1}(x_1)) = 1 + x_1
   POL(c_{d_1}(x_1)) = 1 + x_1
   POL(d_{a_1}(x_1)) = 2 + x_1
   POL(d_{b_1}(x_1)) = 1 + x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{b_1}(x1))))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{b_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{b_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{d_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{c_1}(x1))))
   c_{c_1}(c_{a_1}(a_{a_1}(a_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(x1))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{b_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{d_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{c_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1)))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> b_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> d_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{b_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> a_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{a_1}(x1))))))) -> a_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1)))))




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))

Q is empty.

----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{D_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1)))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{D_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{D_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1)))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{D_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{D_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1)))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> D_{D_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{a_1}(x1)))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> C_{C_1}(c_{a_1}(x1))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> D_{D_1}(d_{a_1}(x1))
   D_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   D_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> D_{D_1}(d_{a_1}(x1))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> D_{D_1}(d_{a_1}(x1))
   A_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   A_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   A_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   A_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> D_{D_1}(d_{a_1}(x1))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> C_{C_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> C_{C_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> C_{B_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> B_{B_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> A_{D_1}(x1)
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> C_{C_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> C_{C_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> C_{B_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> B_{B_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> A_{C_1}(x1)
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> C_{C_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> C_{C_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1))))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> C_{B_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))
   C_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> B_{B_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{d_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{c_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> D_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{d_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{c_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{b_1}(x1)))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{d_1}(x1)))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{c_1}(x1)))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> A_{D_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> D_{D_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   A_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)

The TRS R consists of the following rules:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 110 less nodes.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   a_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{d_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{c_1}(x1)))))))
   c_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{a_1}(x1))))))) -> c_{c_1}(c_{c_1}(c_{b_1}(b_{b_1}(b_{a_1}(a_{a_1}(a_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   a_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> a_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{d_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{b_1}(b_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> B_{C_1}(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(B_{B_1}(x_1)) = x_1
   POL(B_{C_1}(x_1)) = x_1
   POL(B_{D_1}(x_1)) = 0
   POL(C_{C_1}(x_1)) = x_1
   POL(C_{D_1}(x_1)) = 0
   POL(D_{C_1}(x_1)) = x_1
   POL(a_{a_1}(x_1)) = x_1
   POL(a_{d_1}(x_1)) = x_1
   POL(b_{a_1}(x_1)) = 1 + x_1
   POL(b_{b_1}(x_1)) = x_1
   POL(b_{c_1}(x_1)) = x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = 1 + x_1
   POL(c_{c_1}(x_1)) = x_1
   POL(c_{d_1}(x_1)) = x_1
   POL(d_{a_1}(x_1)) = 0
   POL(d_{b_1}(x_1)) = x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{a_1}(x1)))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(B_{B_1}(x_1)) = x_1
   POL(B_{C_1}(x_1)) = x_1
   POL(B_{D_1}(x_1)) = x_1
   POL(C_{C_1}(x_1)) = x_1
   POL(C_{D_1}(x_1)) = 0
   POL(D_{C_1}(x_1)) = x_1
   POL(a_{a_1}(x_1)) = x_1
   POL(a_{d_1}(x_1)) = x_1
   POL(b_{a_1}(x_1)) = 1 + x_1
   POL(b_{b_1}(x_1)) = x_1
   POL(b_{c_1}(x_1)) = x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = x_1
   POL(c_{c_1}(x_1)) = x_1
   POL(c_{d_1}(x_1)) = x_1
   POL(d_{a_1}(x_1)) = 0
   POL(d_{b_1}(x_1)) = x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{C_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{D_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> C_{D_1}(d_{d_1}(d_{a_1}(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(B_{B_1}(x_1)) = x_1
   POL(B_{C_1}(x_1)) = x_1
   POL(B_{D_1}(x_1)) = x_1
   POL(C_{C_1}(x_1)) = x_1
   POL(C_{D_1}(x_1)) = x_1
   POL(D_{C_1}(x_1)) = x_1
   POL(a_{a_1}(x_1)) = 1 + x_1
   POL(a_{d_1}(x_1)) = x_1
   POL(b_{a_1}(x_1)) = x_1
   POL(b_{b_1}(x_1)) = x_1
   POL(b_{c_1}(x_1)) = x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = x_1
   POL(c_{c_1}(x_1)) = x_1
   POL(c_{d_1}(x_1)) = x_1
   POL(d_{a_1}(x_1)) = x_1
   POL(d_{b_1}(x_1)) = x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{D_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{D_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{D_1}(d_{d_1}(d_{a_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 7 less nodes.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> C_{C_1}(c_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(c_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> C_{C_1}(x1)
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{b_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   B_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   C_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{c_1}(x1))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{C_1}(x1)
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1))))
   D_{C_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(B_{B_1}(x_1)) = x_1
   POL(B_{C_1}(x_1)) = x_1
   POL(C_{C_1}(x_1)) = x_1
   POL(D_{C_1}(x_1)) = x_1
   POL(a_{a_1}(x_1)) = 1 + x_1
   POL(a_{d_1}(x_1)) = 1 + x_1
   POL(b_{a_1}(x_1)) = x_1
   POL(b_{b_1}(x_1)) = 1 + x_1
   POL(b_{c_1}(x_1)) = x_1
   POL(b_{d_1}(x_1)) = x_1
   POL(c_{a_1}(x_1)) = 1 + x_1
   POL(c_{c_1}(x_1)) = 1 + x_1
   POL(c_{d_1}(x_1)) = 1 + x_1
   POL(d_{a_1}(x_1)) = x_1
   POL(d_{b_1}(x_1)) = 1 + x_1
   POL(d_{c_1}(x_1)) = x_1
   POL(d_{d_1}(x_1)) = x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{d_1}(x1)))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> D_{C_1}(c_{c_1}(c_{c_1}(x1)))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))

The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(29) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   B_{B_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> B_{B_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B_{B_1}(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b_{d_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, -I, 0A], [0A, -I, -I], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(d_{d_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, -I, 0A], [0A, -I, -I], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(d_{b_1}(x_1)) =  	[[0A], [0A], [-I]] 	 +  	[[0A, 0A, 0A], [0A, 1A, 0A], [-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(b_{b_1}(x_1)) =  	[[0A], [-I], [-I]] 	 +  	[[-I, -I, 0A], [-I, -I, 0A], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(b_{c_1}(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[-I, -I, -I], [-I, -I, -I], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(d_{c_1}(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[-I, -I, -I], [-I, -I, -I], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(c_{c_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, -I, 0A], [-I, 0A, 0A], [0A, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(c_{d_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[-I, -I, -I], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(d_{a_1}(x_1)) =  	[[-I], [1A], [1A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c_{a_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [-I, -I, -I], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a_{a_1}(x_1)) =  	[[-I], [-I], [-I]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a_{d_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b_{a_1}(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))


----------------------------------------

(30)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   c_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> c_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   b_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{c_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{d_1}(x1))))))
   b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{a_1}(x1)))))) -> b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(c_{c_1}(c_{a_1}(x1))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{b_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{b_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{d_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{d_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{c_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{c_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1))))) -> d_{d_1}(d_{d_1}(d_{b_1}(b_{b_1}(b_{d_1}(d_{d_1}(d_{a_1}(x1)))))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{b_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{d_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{d_1}(x1)))))
   d_{c_1}(c_{c_1}(c_{a_1}(a_{a_1}(a_{d_1}(d_{d_1}(d_{c_1}(x1))))))) -> d_{b_1}(b_{b_1}(b_{b_1}(b_{b_1}(b_{c_1}(x1)))))
   d_{d_1}(d_{d_1}(d_{a_1}(a_{a_1}(a_{a_1}(x1))))) -> d_{c_1}(c_{c_1}(c_{d_1}(d_{d_1}(d_{a_1}(x1)))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(31) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(32)
YES
