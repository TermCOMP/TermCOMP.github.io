YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lqVBf.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 16 ms]
(2) QTRS
(3) QTRSRRRProof [EQUIVALENT, 1 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) QDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) QDP
(11) MRRProof [EQUIVALENT, 4 ms]
(12) QDP
(13) PisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   R(x1) -> r(x1)
   r(p(x1)) -> p(p(r(P(x1))))
   r(r(x1)) -> x1
   r(P(P(x1))) -> P(P(r(x1)))
   p(P(x1)) -> x1
   P(p(x1)) -> x1
   r(R(x1)) -> x1
   R(r(x1)) -> x1

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(P(x_1)) = x_1
   POL(R(x_1)) = 1 + x_1
   POL(p(x_1)) = x_1
   POL(r(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   R(x1) -> r(x1)
   r(R(x1)) -> x1
   R(r(x1)) -> x1




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   r(p(x1)) -> p(p(r(P(x1))))
   r(r(x1)) -> x1
   r(P(P(x1))) -> P(P(r(x1)))
   p(P(x1)) -> x1
   P(p(x1)) -> x1

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(P(x_1)) = x_1
   POL(p(x_1)) = x_1
   POL(r(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   r(r(x1)) -> x1




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   r(p(x1)) -> p(p(r(P(x1))))
   r(P(P(x1))) -> P(P(r(x1)))
   p(P(x1)) -> x1
   P(p(x1)) -> x1

Q is empty.

----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R(p(x1)) -> P^1(p(r(P(x1))))
   R(p(x1)) -> P^1(r(P(x1)))
   R(p(x1)) -> R(P(x1))
   R(p(x1)) -> P^2(x1)
   R(P(P(x1))) -> P^2(P(r(x1)))
   R(P(P(x1))) -> P^2(r(x1))
   R(P(P(x1))) -> R(x1)

The TRS R consists of the following rules:

   r(p(x1)) -> p(p(r(P(x1))))
   r(P(P(x1))) -> P(P(r(x1)))
   p(P(x1)) -> x1
   P(p(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R(P(P(x1))) -> R(x1)
   R(p(x1)) -> R(P(x1))

The TRS R consists of the following rules:

   r(p(x1)) -> p(p(r(P(x1))))
   r(P(P(x1))) -> P(P(r(x1)))
   p(P(x1)) -> x1
   P(p(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R(P(P(x1))) -> R(x1)
   R(p(x1)) -> R(P(x1))

The TRS R consists of the following rules:

   P(p(x1)) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   R(P(P(x1))) -> R(x1)
   R(p(x1)) -> R(P(x1))

Strictly oriented rules of the TRS R:

   P(p(x1)) -> x1

Used ordering: Polynomial interpretation [POLO]:

   POL(P(x_1)) = 1 + 3*x_1
   POL(R(x_1)) = 2*x_1
   POL(p(x_1)) = 2 + 3*x_1


----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES
