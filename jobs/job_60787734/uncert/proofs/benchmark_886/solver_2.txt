YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Hg0pL.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRSRRRProof [EQUIVALENT, 47 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 58 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   0(1(2(3(x1)))) -> 0(2(2(3(x1))))
   1(1(4(4(5(x1))))) -> 5(1(0(0(5(x1)))))
   2(3(3(2(5(x1))))) -> 3(5(4(5(5(x1)))))
   5(1(1(5(3(x1))))) -> 5(1(4(5(3(x1)))))
   0(2(5(1(1(4(x1)))))) -> 0(3(2(2(4(5(x1))))))
   1(2(1(4(0(3(x1)))))) -> 4(2(5(4(5(3(x1))))))
   1(5(2(0(4(3(x1)))))) -> 5(0(1(1(1(x1)))))
   2(2(1(5(4(0(x1)))))) -> 2(3(5(4(0(3(x1))))))
   4(0(2(3(1(4(4(x1))))))) -> 4(1(3(0(5(0(5(x1)))))))
   4(3(5(4(3(2(2(2(x1)))))))) -> 4(1(2(3(4(1(4(x1)))))))
   0(2(2(2(3(4(3(3(3(x1))))))))) -> 0(5(4(0(5(3(5(5(3(x1)))))))))
   4(5(3(4(1(1(0(5(2(x1))))))))) -> 4(4(3(1(3(2(0(5(2(x1)))))))))
   3(3(4(1(0(4(5(1(5(2(x1)))))))))) -> 3(3(4(1(5(0(3(0(2(4(x1))))))))))
   2(4(5(4(0(5(5(1(2(1(4(2(x1)))))))))))) -> 4(1(0(1(1(3(3(0(1(4(2(x1)))))))))))
   1(0(0(4(5(4(3(4(5(1(5(4(0(x1))))))))))))) -> 5(3(3(1(2(1(1(0(3(1(3(x1)))))))))))
   1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4(4(4(3(2(0(1(3(1(2(2(4(5(x1)))))))))))))
   4(1(5(4(5(3(3(3(1(2(0(2(0(x1))))))))))))) -> 4(1(4(3(4(4(0(1(3(1(1(5(x1))))))))))))
   2(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 5(5(5(2(0(2(5(0(0(4(3(2(1(4(3(3(1(x1)))))))))))))))))
   1(5(1(1(3(0(3(3(3(3(1(1(5(1(5(2(5(2(x1)))))))))))))))))) -> 3(5(4(2(0(5(1(3(4(1(1(2(5(2(4(1(5(2(x1))))))))))))))))))
   2(4(3(3(4(2(3(5(4(0(4(0(2(3(0(3(3(0(x1)))))))))))))))))) -> 2(1(3(0(4(4(1(5(2(1(0(3(0(5(0(1(5(x1)))))))))))))))))
   2(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2(1(5(0(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1))))))))))))))))))
   2(3(5(1(3(0(0(5(0(2(2(4(5(4(0(3(1(4(2(x1))))))))))))))))))) -> 5(2(0(2(0(3(2(3(5(2(2(4(1(3(5(5(1(2(x1))))))))))))))))))
   3(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 3(2(0(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))))))))
   3(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3(1(3(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))))))
   4(5(1(4(5(3(1(5(5(3(5(0(2(1(2(4(4(5(1(0(4(x1))))))))))))))))))))) -> 4(4(0(2(1(5(2(0(4(5(2(2(3(5(5(2(2(0(3(5(4(x1)))))))))))))))))))))

Q is empty.

----------------------------------------

(1) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(0(x_1)) = 5 + x_1
   POL(1(x_1)) = 6 + x_1
   POL(2(x_1)) = 5 + x_1
   POL(3(x_1)) = 5 + x_1
   POL(4(x_1)) = 5 + x_1
   POL(5(x_1)) = 5 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   0(1(2(3(x1)))) -> 0(2(2(3(x1))))
   1(1(4(4(5(x1))))) -> 5(1(0(0(5(x1)))))
   5(1(1(5(3(x1))))) -> 5(1(4(5(3(x1)))))
   0(2(5(1(1(4(x1)))))) -> 0(3(2(2(4(5(x1))))))
   1(2(1(4(0(3(x1)))))) -> 4(2(5(4(5(3(x1))))))
   1(5(2(0(4(3(x1)))))) -> 5(0(1(1(1(x1)))))
   2(2(1(5(4(0(x1)))))) -> 2(3(5(4(0(3(x1))))))
   4(3(5(4(3(2(2(2(x1)))))))) -> 4(1(2(3(4(1(4(x1)))))))
   4(5(3(4(1(1(0(5(2(x1))))))))) -> 4(4(3(1(3(2(0(5(2(x1)))))))))
   3(3(4(1(0(4(5(1(5(2(x1)))))))))) -> 3(3(4(1(5(0(3(0(2(4(x1))))))))))
   2(4(5(4(0(5(5(1(2(1(4(2(x1)))))))))))) -> 4(1(0(1(1(3(3(0(1(4(2(x1)))))))))))
   1(0(0(4(5(4(3(4(5(1(5(4(0(x1))))))))))))) -> 5(3(3(1(2(1(1(0(3(1(3(x1)))))))))))
   4(1(5(4(5(3(3(3(1(2(0(2(0(x1))))))))))))) -> 4(1(4(3(4(4(0(1(3(1(1(5(x1))))))))))))
   1(5(1(1(3(0(3(3(3(3(1(1(5(1(5(2(5(2(x1)))))))))))))))))) -> 3(5(4(2(0(5(1(3(4(1(1(2(5(2(4(1(5(2(x1))))))))))))))))))
   2(4(3(3(4(2(3(5(4(0(4(0(2(3(0(3(3(0(x1)))))))))))))))))) -> 2(1(3(0(4(4(1(5(2(1(0(3(0(5(0(1(5(x1)))))))))))))))))
   2(3(5(1(3(0(0(5(0(2(2(4(5(4(0(3(1(4(2(x1))))))))))))))))))) -> 5(2(0(2(0(3(2(3(5(2(2(4(1(3(5(5(1(2(x1))))))))))))))))))
   4(5(1(4(5(3(1(5(5(3(5(0(2(1(2(4(4(5(1(0(4(x1))))))))))))))))))))) -> 4(4(0(2(1(5(2(0(4(5(2(2(3(5(5(2(2(0(3(5(4(x1)))))))))))))))))))))




----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   2(3(3(2(5(x1))))) -> 3(5(4(5(5(x1)))))
   4(0(2(3(1(4(4(x1))))))) -> 4(1(3(0(5(0(5(x1)))))))
   0(2(2(2(3(4(3(3(3(x1))))))))) -> 0(5(4(0(5(3(5(5(3(x1)))))))))
   1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4(4(4(3(2(0(1(3(1(2(2(4(5(x1)))))))))))))
   2(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 5(5(5(2(0(2(5(0(0(4(3(2(1(4(3(3(1(x1)))))))))))))))))
   2(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2(1(5(0(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1))))))))))))))))))
   3(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 3(2(0(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))))))))
   3(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3(1(3(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))))))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   2^1(3(3(2(5(x1))))) -> 3^1(5(4(5(5(x1)))))
   2^1(3(3(2(5(x1))))) -> 4^1(5(5(x1)))
   4^1(0(2(3(1(4(4(x1))))))) -> 4^1(1(3(0(5(0(5(x1)))))))
   4^1(0(2(3(1(4(4(x1))))))) -> 1^1(3(0(5(0(5(x1))))))
   4^1(0(2(3(1(4(4(x1))))))) -> 3^1(0(5(0(5(x1)))))
   4^1(0(2(3(1(4(4(x1))))))) -> 0^1(5(0(5(x1))))
   4^1(0(2(3(1(4(4(x1))))))) -> 0^1(5(x1))
   0^1(2(2(2(3(4(3(3(3(x1))))))))) -> 0^1(5(4(0(5(3(5(5(3(x1)))))))))
   0^1(2(2(2(3(4(3(3(3(x1))))))))) -> 4^1(0(5(3(5(5(3(x1)))))))
   0^1(2(2(2(3(4(3(3(3(x1))))))))) -> 0^1(5(3(5(5(3(x1))))))
   0^1(2(2(2(3(4(3(3(3(x1))))))))) -> 3^1(5(5(3(x1))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4^1(4(4(3(2(0(1(3(1(2(2(4(5(x1)))))))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4^1(4(3(2(0(1(3(1(2(2(4(5(x1))))))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4^1(3(2(0(1(3(1(2(2(4(5(x1)))))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 3^1(2(0(1(3(1(2(2(4(5(x1))))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 2^1(0(1(3(1(2(2(4(5(x1)))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 0^1(1(3(1(2(2(4(5(x1))))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 1^1(3(1(2(2(4(5(x1)))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 3^1(1(2(2(4(5(x1))))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 1^1(2(2(4(5(x1)))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 2^1(2(4(5(x1))))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 2^1(4(5(x1)))
   1^1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4^1(5(x1))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 2^1(0(2(5(0(0(4(3(2(1(4(3(3(1(x1))))))))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 0^1(2(5(0(0(4(3(2(1(4(3(3(1(x1)))))))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 2^1(5(0(0(4(3(2(1(4(3(3(1(x1))))))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 0^1(0(4(3(2(1(4(3(3(1(x1))))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 0^1(4(3(2(1(4(3(3(1(x1)))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 4^1(3(2(1(4(3(3(1(x1))))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 3^1(2(1(4(3(3(1(x1)))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 2^1(1(4(3(3(1(x1))))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 1^1(4(3(3(1(x1)))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 4^1(3(3(1(x1))))
   2^1(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 3^1(3(1(x1)))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2^1(1(5(0(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1))))))))))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 1^1(5(0(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1)))))))))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 0^1(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1)))))))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 0^1(1(5(2(2(2(3(1(0(5(0(4(3(3(x1))))))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 1^1(5(2(2(2(3(1(0(5(0(4(3(3(x1)))))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2^1(2(2(3(1(0(5(0(4(3(3(x1)))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2^1(2(3(1(0(5(0(4(3(3(x1))))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2^1(3(1(0(5(0(4(3(3(x1)))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 3^1(1(0(5(0(4(3(3(x1))))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 1^1(0(5(0(4(3(3(x1)))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 0^1(5(0(4(3(3(x1))))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 0^1(4(3(3(x1))))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 4^1(3(3(x1)))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 3^1(3(x1))
   2^1(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 3^1(x1)
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 3^1(2(0(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(0(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1)))))))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 0^1(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 1^1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1)))))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 0^1(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1)))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 1^1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 1^1(2(3(0(2(4(2(5(2(2(4(x1)))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(3(0(2(4(2(5(2(2(4(x1))))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 3^1(0(2(4(2(5(2(2(4(x1)))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 0^1(2(4(2(5(2(2(4(x1))))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(4(2(5(2(2(4(x1)))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 4^1(2(5(2(2(4(x1))))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(5(2(2(4(x1)))))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(2(4(x1)))
   3^1(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 2^1(4(x1))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3^1(1(3(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 1^1(3(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1)))))))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3^1(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3^1(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1)))))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 0^1(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 4^1(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 2^1(4(1(2(3(5(0(3(4(5(2(4(3(x1)))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 4^1(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 1^1(2(3(5(0(3(4(5(2(4(3(x1)))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 2^1(3(5(0(3(4(5(2(4(3(x1))))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3^1(5(0(3(4(5(2(4(3(x1)))))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 0^1(3(4(5(2(4(3(x1)))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3^1(4(5(2(4(3(x1))))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 4^1(5(2(4(3(x1)))))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 2^1(4(3(x1)))
   3^1(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 4^1(3(x1))

The TRS R consists of the following rules:

   2(3(3(2(5(x1))))) -> 3(5(4(5(5(x1)))))
   4(0(2(3(1(4(4(x1))))))) -> 4(1(3(0(5(0(5(x1)))))))
   0(2(2(2(3(4(3(3(3(x1))))))))) -> 0(5(4(0(5(3(5(5(3(x1)))))))))
   1(2(2(1(2(3(2(4(4(0(0(3(2(x1))))))))))))) -> 4(4(4(3(2(0(1(3(1(2(2(4(5(x1)))))))))))))
   2(2(3(3(0(2(0(2(5(0(5(5(5(1(0(3(1(x1))))))))))))))))) -> 5(5(5(2(0(2(5(0(0(4(3(2(1(4(3(3(1(x1)))))))))))))))))
   2(5(5(1(2(3(5(0(3(0(0(3(3(1(0(1(3(2(x1)))))))))))))))))) -> 2(1(5(0(0(1(5(2(2(2(3(1(0(5(0(4(3(3(x1))))))))))))))))))
   3(2(3(4(1(2(5(5(0(1(2(3(4(0(5(1(4(4(5(4(x1)))))))))))))))))))) -> 3(2(0(1(5(0(1(5(5(1(2(3(0(2(4(2(5(2(2(4(x1))))))))))))))))))))
   3(5(5(2(0(4(4(5(5(0(3(5(2(1(2(1(0(2(2(3(x1)))))))))))))))))))) -> 3(1(3(3(0(5(4(2(4(1(2(3(5(0(3(4(5(2(4(3(x1))))))))))))))))))))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 80 less nodes.
----------------------------------------

(6)
TRUE
