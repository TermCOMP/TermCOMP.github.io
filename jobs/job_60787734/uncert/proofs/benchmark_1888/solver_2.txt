YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ykDAA.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) QDP
        (13) QDPOrderProof [EQUIVALENT, 10 ms]
        (14) QDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 4 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x1) -> n(c(n(a(x1))))
   c(f(x1)) -> f(n(a(c(x1))))
   n(a(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   n(s(x1)) -> f(s(s(x1)))
   n(f(x1)) -> f(n(x1))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   s(n(x1)) -> s(s(f(x1)))
   f(n(x1)) -> n(f(x1))

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(x1) -> A(n(c(n(x1))))
   F(x1) -> C(n(x1))
   F(c(x1)) -> C(a(n(f(x1))))
   F(c(x1)) -> A(n(f(x1)))
   F(c(x1)) -> F(x1)
   A(n(x1)) -> C(x1)
   S(n(x1)) -> S(s(f(x1)))
   S(n(x1)) -> S(f(x1))
   S(n(x1)) -> F(x1)
   F(n(x1)) -> F(x1)

The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   s(n(x1)) -> s(s(f(x1)))
   f(n(x1)) -> n(f(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(n(x1)) -> F(x1)
   F(c(x1)) -> F(x1)

The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   s(n(x1)) -> s(s(f(x1)))
   f(n(x1)) -> n(f(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F(n(x1)) -> F(x1)
   F(c(x1)) -> F(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F(n(x1)) -> F(x1)
The graph contains the following edges 1 > 1


*F(c(x1)) -> F(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(n(x1)) -> S(f(x1))
   S(n(x1)) -> S(s(f(x1)))

The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   s(n(x1)) -> s(s(f(x1)))
   f(n(x1)) -> n(f(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S(n(x1)) -> S(s(f(x1)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(S(x_1)) = x_1
   POL(a(x_1)) = x_1
   POL(c(x_1)) = 1
   POL(f(x_1)) = 1
   POL(n(x_1)) = 1
   POL(s(x_1)) = 0

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   f(n(x1)) -> n(f(x1))
   s(n(x1)) -> s(s(f(x1)))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(n(x1)) -> S(f(x1))

The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)
   s(n(x1)) -> s(s(f(x1)))
   f(n(x1)) -> n(f(x1))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S(n(x1)) -> S(f(x1))

The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   f(n(x1)) -> n(f(x1))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S(n(x1)) -> S(f(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO]:

   POL(S(x_1)) = 4*x_1
   POL(a(x_1)) = 0
   POL(c(x_1)) = 0
   POL(f(x_1)) = x_1
   POL(n(x_1)) = 4 + 4*x_1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   f(n(x1)) -> n(f(x1))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f(x1) -> a(n(c(n(x1))))
   f(c(x1)) -> c(a(n(f(x1))))
   f(n(x1)) -> n(f(x1))
   a(n(x1)) -> c(x1)
   c(c(x1)) -> c(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
