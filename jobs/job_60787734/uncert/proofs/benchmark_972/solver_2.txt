YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6NAfl.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) DependencyPairsProof [EQUIVALENT, 0 ms]
(2) QDP
(3) DependencyGraphProof [EQUIVALENT, 0 ms]
(4) AND
    (5) QDP
        (6) UsableRulesProof [EQUIVALENT, 0 ms]
        (7) QDP
        (8) QDPOrderProof [EQUIVALENT, 99 ms]
        (9) QDP
        (10) QDPOrderProof [EQUIVALENT, 86 ms]
        (11) QDP
        (12) QDPOrderProof [EQUIVALENT, 35 ms]
        (13) QDP
        (14) QDPOrderProof [EQUIVALENT, 26 ms]
        (15) QDP
        (16) DependencyGraphProof [EQUIVALENT, 0 ms]
        (17) TRUE
    (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   e(d(x1)) -> a(b(c(d(e(x1)))))
   b(x1) -> d(d(x1))
   e(c(x1)) -> b(a(a(e(x1))))
   c(d(d(x1))) -> a(x1)

Q is empty.

----------------------------------------

(1) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(2)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(a(x1)) -> B(b(b(x1)))
   A(a(x1)) -> B(b(x1))
   A(a(x1)) -> B(x1)
   A(x1) -> C(d(x1))
   B(b(x1)) -> C(c(c(x1)))
   B(b(x1)) -> C(c(x1))
   B(b(x1)) -> C(x1)
   E(d(x1)) -> A(b(c(d(e(x1)))))
   E(d(x1)) -> B(c(d(e(x1))))
   E(d(x1)) -> C(d(e(x1)))
   E(d(x1)) -> E(x1)
   E(c(x1)) -> B(a(a(e(x1))))
   E(c(x1)) -> A(a(e(x1)))
   E(c(x1)) -> A(e(x1))
   E(c(x1)) -> E(x1)
   C(d(d(x1))) -> A(x1)

The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   e(d(x1)) -> a(b(c(d(e(x1)))))
   b(x1) -> d(d(x1))
   e(c(x1)) -> b(a(a(e(x1))))
   c(d(d(x1))) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(3) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(4)
Complex Obligation (AND)

----------------------------------------

(5)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))
   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   B(b(x1)) -> C(c(x1))
   B(b(x1)) -> C(x1)
   A(a(x1)) -> B(b(x1))
   A(a(x1)) -> B(x1)
   A(x1) -> C(d(x1))

The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   e(d(x1)) -> a(b(c(d(e(x1)))))
   b(x1) -> d(d(x1))
   e(c(x1)) -> b(a(a(e(x1))))
   c(d(d(x1))) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(6) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))
   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   B(b(x1)) -> C(c(x1))
   B(b(x1)) -> C(x1)
   A(a(x1)) -> B(b(x1))
   A(a(x1)) -> B(x1)
   A(x1) -> C(d(x1))

The TRS R consists of the following rules:

   b(b(x1)) -> c(c(c(x1)))
   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(x1) -> d(d(x1))
   c(c(x1)) -> d(d(d(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   A(a(x1)) -> B(b(x1))
   A(a(x1)) -> B(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[0A, 1A, 1A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [-I], [0A]] 	 +  	[[-I, 0A, 1A], [0A, 0A, 0A], [-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[0A], [0A], [-I]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(A(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[1A, 1A, 1A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   b(b(x1)) -> c(c(c(x1)))
   a(x1) -> c(d(x1))
   c(c(x1)) -> d(d(d(x1)))
   b(x1) -> d(d(x1))


----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))
   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   B(b(x1)) -> C(c(x1))
   B(b(x1)) -> C(x1)
   A(x1) -> C(d(x1))

The TRS R consists of the following rules:

   b(b(x1)) -> c(c(c(x1)))
   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(x1) -> d(d(x1))
   c(c(x1)) -> d(d(d(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(b(x1)) -> C(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0A], [0A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [1A, 1A, 0A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[-I]] 	 +  	[[0A, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[0A], [-I], [0A]] 	 +  	[[0A, 0A, 0A], [0A, -I, -I], [0A, 1A, -I]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[-I], [-I], [0A]] 	 +  	[[0A, 0A, -I], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(A(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [-I], [1A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [1A, 1A, 1A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   b(b(x1)) -> c(c(c(x1)))
   a(x1) -> c(d(x1))
   c(c(x1)) -> d(d(d(x1)))
   b(x1) -> d(d(x1))


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))
   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   B(b(x1)) -> C(c(x1))
   A(x1) -> C(d(x1))

The TRS R consists of the following rules:

   b(b(x1)) -> c(c(c(x1)))
   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(x1) -> d(d(x1))
   c(c(x1)) -> d(d(d(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   B(b(x1)) -> C(c(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[-I]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[1A], [0A], [0A]] 	 +  	[[0A, 1A, 1A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[0A]] 	 +  	[[-I, 0A, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1A], [-I], [-I]] 	 +  	[[0A, 1A, 0A], [-I, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[-I], [-I], [-I]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(A(x_1)) =  	[[0A]] 	 +  	[[0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[1A], [-I], [-I]] 	 +  	[[1A, 1A, 1A], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   b(b(x1)) -> c(c(c(x1)))
   a(x1) -> c(d(x1))
   c(c(x1)) -> d(d(d(x1)))
   b(x1) -> d(d(x1))


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))
   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   A(x1) -> C(d(x1))

The TRS R consists of the following rules:

   b(b(x1)) -> c(c(c(x1)))
   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(x1) -> d(d(x1))
   c(c(x1)) -> d(d(d(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(d(d(x1))) -> A(x1)
   A(a(x1)) -> B(b(b(x1)))
   A(x1) -> C(d(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial interpretation [POLO,RATPOLO]:

   POL(A(x_1)) = [15/4] + [2]x_1
   POL(B(x_1)) = [3/2] + [2]x_1
   POL(C(x_1)) = [2]x_1
   POL(a(x_1)) = [7/2] + x_1
   POL(b(x_1)) = [9/4] + x_1
   POL(c(x_1)) = [3/2] + x_1
   POL(d(x_1)) = [1] + x_1
The value of delta used in the strict ordering is 1/4.
The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   b(b(x1)) -> c(c(c(x1)))
   a(x1) -> c(d(x1))
   c(c(x1)) -> d(d(d(x1)))
   b(x1) -> d(d(x1))


----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(b(x1)) -> C(c(c(x1)))

The TRS R consists of the following rules:

   b(b(x1)) -> c(c(c(x1)))
   c(d(d(x1))) -> a(x1)
   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(x1) -> d(d(x1))
   c(c(x1)) -> d(d(d(x1)))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(16) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(17)
TRUE

----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E(c(x1)) -> E(x1)
   E(d(x1)) -> E(x1)

The TRS R consists of the following rules:

   a(a(x1)) -> b(b(b(x1)))
   a(x1) -> c(d(x1))
   b(b(x1)) -> c(c(c(x1)))
   c(c(x1)) -> d(d(d(x1)))
   e(d(x1)) -> a(b(c(d(e(x1)))))
   b(x1) -> d(d(x1))
   e(c(x1)) -> b(a(a(e(x1))))
   c(d(d(x1))) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E(c(x1)) -> E(x1)
   E(d(x1)) -> E(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*E(c(x1)) -> E(x1)
The graph contains the following edges 1 > 1


*E(d(x1)) -> E(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES
