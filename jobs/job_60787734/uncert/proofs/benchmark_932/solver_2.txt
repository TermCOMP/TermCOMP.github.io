YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MBxzQ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) QDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) QDP
        (10) MRRProof [EQUIVALENT, 12 ms]
        (11) QDP
        (12) DependencyGraphProof [EQUIVALENT, 0 ms]
        (13) TRUE
    (14) QDP
        (15) QDPOrderProof [EQUIVALENT, 58 ms]
        (16) QDP
        (17) QDPOrderProof [EQUIVALENT, 168 ms]
        (18) QDP
        (19) DependencyGraphProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) UsableRulesProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(x1)) -> a(a(d(x1)))
   a(c(x1)) -> b(b(x1))
   d(a(b(x1))) -> b(d(d(c(x1))))
   d(x1) -> a(x1)
   b(a(c(a(x1)))) -> x1

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   A(b(x1)) -> D(a(a(x1)))
   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(x1)
   C(a(x1)) -> B(b(x1))
   C(a(x1)) -> B(x1)
   B(a(d(x1))) -> C(d(d(b(x1))))
   B(a(d(x1))) -> D(d(b(x1)))
   B(a(d(x1))) -> D(b(x1))
   B(a(d(x1))) -> B(x1)
   D(x1) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 2 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(x1) -> A(x1)
   A(b(x1)) -> D(a(a(x1)))
   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(x1) -> A(x1)
   A(b(x1)) -> D(a(a(x1)))
   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(x1)

The TRS R consists of the following rules:

   d(x1) -> a(x1)
   a(b(x1)) -> d(a(a(x1)))
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   A(b(x1)) -> D(a(a(x1)))
   A(b(x1)) -> A(a(x1))
   A(b(x1)) -> A(x1)

Strictly oriented rules of the TRS R:

   a(b(x1)) -> d(a(a(x1)))
   a(c(a(b(x1)))) -> x1

Used ordering: Polynomial interpretation [POLO]:

   POL(A(x_1)) = 3*x_1
   POL(D(x_1)) = 3*x_1
   POL(a(x_1)) = x_1
   POL(b(x_1)) = 2 + 3*x_1
   POL(c(x_1)) = 3 + 3*x_1
   POL(d(x_1)) = x_1


----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   D(x1) -> A(x1)

The TRS R consists of the following rules:

   d(x1) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(13)
TRUE

----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(d(x1))) -> C(d(d(b(x1))))
   C(a(x1)) -> B(b(x1))
   B(a(d(x1))) -> B(x1)
   C(a(x1)) -> B(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(a(x1)) -> B(b(x1))
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic natural numbers [ARCTIC]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[-I, -I, 0A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [-I], [-I]] 	 +  	[[0A, -I, -I], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[0A], [0A], [1A]] 	 +  	[[0A, 0A, -I], [0A, 0A, 0A], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[1A]] 	 +  	[[-I, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0A], [1A], [0A]] 	 +  	[[0A, 0A, 0A], [0A, 0A, 0A], [-I, -I, -I]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1A], [1A], [0A]] 	 +  	[[-I, -I, 0A], [0A, -I, 0A], [-I, -I, -I]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b(a(d(x1))) -> c(d(d(b(x1))))
   c(a(x1)) -> b(b(x1))
   d(x1) -> a(x1)
   a(b(x1)) -> d(a(a(x1)))
   a(c(a(b(x1)))) -> x1


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(d(x1))) -> C(d(d(b(x1))))
   B(a(d(x1))) -> B(x1)
   C(a(x1)) -> B(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   C(a(x1)) -> B(x1)
The remaining pairs can at least be oriented weakly.
Used ordering:  Matrix interpretation [MATRO] with arctic integers [ARCTIC,STERNAGEL_THIEMANN_RTA14]:

   <<<
 POL(B(x_1)) =  	[[0A]] 	 +  	[[-1A, -1A, -1A]] 	* 	x_1
>>>

   <<<
 POL(a(x_1)) =  	[[0A], [0A], [-1A]] 	 +  	[[-I, 1A, -1A], [-I, -1A, -1A], [-1A, -1A, -1A]] 	* 	x_1
>>>

   <<<
 POL(d(x_1)) =  	[[0A], [1A], [-1A]] 	 +  	[[-I, 1A, -1A], [-1A, -1A, -1A], [-1A, -1A, -1A]] 	* 	x_1
>>>

   <<<
 POL(C(x_1)) =  	[[1A]] 	 +  	[[-1A, -1A, 1A]] 	* 	x_1
>>>

   <<<
 POL(b(x_1)) =  	[[0A], [-1A], [2A]] 	 +  	[[-1A, -1A, -I], [-I, -I, -I], [0A, 0A, 0A]] 	* 	x_1
>>>

   <<<
 POL(c(x_1)) =  	[[1A], [-1A], [2A]] 	 +  	[[-1A, -1A, -1A], [-I, -I, -I], [-1A, -1A, 2A]] 	* 	x_1
>>>


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   b(a(d(x1))) -> c(d(d(b(x1))))
   c(a(x1)) -> b(b(x1))
   d(x1) -> a(x1)
   a(b(x1)) -> d(a(a(x1)))
   a(c(a(b(x1)))) -> x1


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(d(x1))) -> C(d(d(b(x1))))
   B(a(d(x1))) -> B(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(d(x1))) -> B(x1)

The TRS R consists of the following rules:

   a(b(x1)) -> d(a(a(x1)))
   c(a(x1)) -> b(b(x1))
   b(a(d(x1))) -> c(d(d(b(x1))))
   d(x1) -> a(x1)
   a(c(a(b(x1)))) -> x1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(d(x1))) -> B(x1)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*B(a(d(x1))) -> B(x1)
The graph contains the following edges 1 > 1


----------------------------------------

(24)
YES
