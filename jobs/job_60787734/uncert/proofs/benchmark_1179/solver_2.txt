YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MvedQ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) QDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) QDP
(7) SemLabProof [SOUND, 9 ms]
(8) QDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) AND
    (11) QDP
        (12) UsableRulesReductionPairsProof [EQUIVALENT, 2 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesReductionPairsProof [EQUIVALENT, 1 ms]
        (18) QDP
        (19) PisEmptyProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> x1
   a(b(x1)) -> b(b(c(a(c(x1)))))
   b(x1) -> x1
   c(c(x1)) -> a(x1)

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> c(a(c(b(b(x1)))))
   b(x1) -> x1
   c(c(x1)) -> a(x1)

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> C(a(c(b(b(x1)))))
   B(a(x1)) -> A(c(b(b(x1))))
   B(a(x1)) -> C(b(b(x1)))
   B(a(x1)) -> B(b(x1))
   B(a(x1)) -> B(x1)
   C(c(x1)) -> A(x1)

The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> c(a(c(b(b(x1)))))
   b(x1) -> x1
   c(c(x1)) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B(a(x1)) -> B(x1)
   B(a(x1)) -> B(b(x1))

The TRS R consists of the following rules:

   a(x1) -> x1
   b(a(x1)) -> c(a(c(b(b(x1)))))
   b(x1) -> x1
   c(c(x1)) -> a(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) SemLabProof (SOUND)
We found the following model for the rules of the TRSs R and P.
Interpretation over the domain with elements from 0 to 1.
a: x<sub>0</sub>
b: x<sub>0</sub>
c: 1 + x<sub>0</sub>
B: 0
By semantic labelling [SEMLAB] we obtain the following labelled QDP problem.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B.0(a.0(x1)) -> B.0(x1)
   B.0(a.0(x1)) -> B.0(b.0(x1))
   B.1(a.1(x1)) -> B.1(b.1(x1))
   B.1(a.1(x1)) -> B.1(x1)

The TRS R consists of the following rules:

   a.0(x1) -> x1
   a.1(x1) -> x1
   b.0(a.0(x1)) -> c.1(a.1(c.0(b.0(b.0(x1)))))
   b.1(a.1(x1)) -> c.0(a.0(c.1(b.1(b.1(x1)))))
   b.0(x1) -> x1
   b.1(x1) -> x1
   c.1(c.0(x1)) -> a.0(x1)
   c.0(c.1(x1)) -> a.1(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B.1(a.1(x1)) -> B.1(x1)
   B.1(a.1(x1)) -> B.1(b.1(x1))

The TRS R consists of the following rules:

   a.0(x1) -> x1
   a.1(x1) -> x1
   b.0(a.0(x1)) -> c.1(a.1(c.0(b.0(b.0(x1)))))
   b.1(a.1(x1)) -> c.0(a.0(c.1(b.1(b.1(x1)))))
   b.0(x1) -> x1
   b.1(x1) -> x1
   c.1(c.0(x1)) -> a.0(x1)
   c.0(c.1(x1)) -> a.1(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   B.1(a.1(x1)) -> B.1(x1)
   B.1(a.1(x1)) -> B.1(b.1(x1))
The following rules are removed from R:

   a.1(x1) -> x1
   b.0(a.0(x1)) -> c.1(a.1(c.0(b.0(b.0(x1)))))
   b.0(x1) -> x1
   c.1(c.0(x1)) -> a.0(x1)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(B.1(x_1)) = x_1
   POL(a.0(x_1)) = x_1
   POL(a.1(x_1)) = 1 + x_1
   POL(b.1(x_1)) = x_1
   POL(c.0(x_1)) = 1 + x_1
   POL(c.1(x_1)) = x_1


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b.1(a.1(x1)) -> c.0(a.0(c.1(b.1(b.1(x1)))))
   b.1(x1) -> x1
   a.0(x1) -> x1
   c.0(c.1(x1)) -> a.1(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B.0(a.0(x1)) -> B.0(b.0(x1))
   B.0(a.0(x1)) -> B.0(x1)

The TRS R consists of the following rules:

   a.0(x1) -> x1
   a.1(x1) -> x1
   b.0(a.0(x1)) -> c.1(a.1(c.0(b.0(b.0(x1)))))
   b.1(a.1(x1)) -> c.0(a.0(c.1(b.1(b.1(x1)))))
   b.0(x1) -> x1
   b.1(x1) -> x1
   c.1(c.0(x1)) -> a.0(x1)
   c.0(c.1(x1)) -> a.1(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   B.0(a.0(x1)) -> B.0(b.0(x1))
   B.0(a.0(x1)) -> B.0(x1)
The following rules are removed from R:

   a.0(x1) -> x1
   b.1(a.1(x1)) -> c.0(a.0(c.1(b.1(b.1(x1)))))
   b.1(x1) -> x1
   c.0(c.1(x1)) -> a.1(x1)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(B.0(x_1)) = x_1
   POL(a.0(x_1)) = 1 + x_1
   POL(a.1(x_1)) = x_1
   POL(b.0(x_1)) = x_1
   POL(c.0(x_1)) = x_1
   POL(c.1(x_1)) = 1 + x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   b.0(a.0(x1)) -> c.1(a.1(c.0(b.0(b.0(x1)))))
   b.0(x1) -> x1
   a.1(x1) -> x1
   c.1(c.0(x1)) -> a.0(x1)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
