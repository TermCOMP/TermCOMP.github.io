YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uRj1y.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) QTRS Reverse [EQUIVALENT, 0 ms]
(2) QTRS
(3) RFCMatchBoundsTRSProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   q0(a(x1)) -> x(q1(x1))
   q1(a(x1)) -> a(q1(x1))
   q1(y(x1)) -> y(q1(x1))
   a(q1(b(x1))) -> q2(a(y(x1)))
   a(q2(a(x1))) -> q2(a(a(x1)))
   a(q2(y(x1))) -> q2(a(y(x1)))
   y(q1(b(x1))) -> q2(y(y(x1)))
   y(q2(a(x1))) -> q2(y(a(x1)))
   y(q2(y(x1))) -> q2(y(y(x1)))
   q2(x(x1)) -> x(q0(x1))
   q0(y(x1)) -> y(q3(x1))
   q3(y(x1)) -> y(q3(x1))
   q3(bl(x1)) -> bl(q4(x1))

Q is empty.

----------------------------------------

(1) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(q0(x1)) -> q1(x(x1))
   a(q1(x1)) -> q1(a(x1))
   y(q1(x1)) -> q1(y(x1))
   b(q1(a(x1))) -> y(a(q2(x1)))
   a(q2(a(x1))) -> a(a(q2(x1)))
   y(q2(a(x1))) -> y(a(q2(x1)))
   b(q1(y(x1))) -> y(y(q2(x1)))
   a(q2(y(x1))) -> a(y(q2(x1)))
   y(q2(y(x1))) -> y(y(q2(x1)))
   x(q2(x1)) -> q0(x(x1))
   y(q0(x1)) -> q3(y(x1))
   y(q3(x1)) -> q3(y(x1))
   bl(q3(x1)) -> q4(bl(x1))

Q is empty.

----------------------------------------

(3) RFCMatchBoundsTRSProof (EQUIVALENT)
Termination of the TRS R could be shown with a Match Bound [MATCHBOUNDS1,MATCHBOUNDS2] of 1. This implies Q-termination of R.
The following rules were used to construct the certificate:

   a(q0(x1)) -> q1(x(x1))
   a(q1(x1)) -> q1(a(x1))
   y(q1(x1)) -> q1(y(x1))
   b(q1(a(x1))) -> y(a(q2(x1)))
   a(q2(a(x1))) -> a(a(q2(x1)))
   y(q2(a(x1))) -> y(a(q2(x1)))
   b(q1(y(x1))) -> y(y(q2(x1)))
   a(q2(y(x1))) -> a(y(q2(x1)))
   y(q2(y(x1))) -> y(y(q2(x1)))
   x(q2(x1)) -> q0(x(x1))
   y(q0(x1)) -> q3(y(x1))
   y(q3(x1)) -> q3(y(x1))
   bl(q3(x1)) -> q4(bl(x1))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34

Node 19 is start node and node 20 is final node.

Those nodes are connected through the following edges:

* 19 to 21 labelled q1_1(0), q0_1(0), q3_1(0)* 19 to 22 labelled y_1(0), a_1(0)* 19 to 26 labelled y_1(0), a_1(0)* 19 to 28 labelled q4_1(0)* 20 to 20 labelled #_1(0)* 21 to 20 labelled x_1(0), a_1(0), y_1(0)* 21 to 29 labelled q0_1(1), q1_1(1), q3_1(1)* 21 to 30 labelled a_1(1), y_1(1)* 21 to 32 labelled a_1(1), y_1(1)* 22 to 23 labelled a_1(0)* 22 to 30 labelled a_1(1)* 22 to 32 labelled a_1(1)* 23 to 20 labelled q2_1(0)* 26 to 27 labelled y_1(0)* 26 to 30 labelled y_1(1)* 26 to 32 labelled y_1(1)* 27 to 20 labelled q2_1(0)* 28 to 20 labelled bl_1(0)* 28 to 34 labelled q4_1(1)* 29 to 20 labelled x_1(1), a_1(1), y_1(1)* 29 to 29 labelled q0_1(1), q1_1(1), q3_1(1)* 29 to 30 labelled a_1(1), y_1(1)* 29 to 32 labelled a_1(1), y_1(1)* 30 to 31 labelled a_1(1)* 30 to 30 labelled a_1(1)* 30 to 32 labelled a_1(1)* 31 to 20 labelled q2_1(1)* 32 to 33 labelled y_1(1)* 32 to 30 labelled y_1(1)* 32 to 32 labelled y_1(1)* 33 to 20 labelled q2_1(1)* 34 to 20 labelled bl_1(1)* 34 to 34 labelled q4_1(1)


----------------------------------------

(4)
YES
