YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LRCAQ.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination w.r.t. Q of the given QTRS could be proven:

(0) QTRS
(1) Strip Symbols Proof [SOUND, 0 ms]
(2) QTRS
(3) QTRS Reverse [EQUIVALENT, 0 ms]
(4) QTRS
(5) RFCMatchBoundsTRSProof [EQUIVALENT, 0 ms]
(6) YES


----------------------------------------

(0)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(a(b(b(a(a(b(b(a(a(b(a(x1)))))))))))) -> a(a(b(a(a(b(b(a(a(b(b(a(a(b(x1))))))))))))))

Q is empty.

----------------------------------------

(1) Strip Symbols Proof (SOUND)
We were given the following TRS:

   a(a(b(b(a(a(b(b(a(a(b(a(x1)))))))))))) -> a(a(b(a(a(b(b(a(a(b(b(a(a(b(x1))))))))))))))

By stripping symbols from the only rule of the system, we obtained the following TRS [ENDRULLIS]: 

   b(a(a(b(b(a(a(b(a(x1))))))))) -> a(a(b(b(a(a(b(b(a(a(b(x1)))))))))))

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   b(a(a(b(b(a(a(b(a(x1))))))))) -> a(a(b(b(a(a(b(b(a(a(b(x1)))))))))))

Q is empty.

----------------------------------------

(3) QTRS Reverse (EQUIVALENT)
We applied the QTRS Reverse Processor [REVERSE].
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   a(b(a(a(b(b(a(a(b(x1))))))))) -> b(a(a(b(b(a(a(b(b(a(a(x1)))))))))))

Q is empty.

----------------------------------------

(5) RFCMatchBoundsTRSProof (EQUIVALENT)
Termination of the TRS R could be shown with a Match Bound [MATCHBOUNDS1,MATCHBOUNDS2] of 2. This implies Q-termination of R.
The following rules were used to construct the certificate:

   a(b(a(a(b(b(a(a(b(x1))))))))) -> b(a(a(b(b(a(a(b(b(a(a(x1)))))))))))

The certificate found is represented by the following graph.
The certificate consists of the following enumerated nodes:
23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64

Node 23 is start node and node 24 is final node.

Those nodes are connected through the following edges:

* 23 to 25 labelled b_1(0)* 24 to 24 labelled #_1(0)* 25 to 26 labelled a_1(0)* 26 to 27 labelled a_1(0)* 27 to 28 labelled b_1(0)* 28 to 29 labelled b_1(0)* 29 to 30 labelled a_1(0)* 30 to 31 labelled a_1(0)* 31 to 32 labelled b_1(0)* 32 to 33 labelled b_1(0)* 33 to 34 labelled a_1(0)* 33 to 45 labelled b_1(1)* 34 to 24 labelled a_1(0)* 34 to 35 labelled b_1(1)* 35 to 36 labelled a_1(1)* 36 to 37 labelled a_1(1)* 37 to 38 labelled b_1(1)* 38 to 39 labelled b_1(1)* 39 to 40 labelled a_1(1)* 40 to 41 labelled a_1(1)* 41 to 42 labelled b_1(1)* 42 to 43 labelled b_1(1)* 43 to 44 labelled a_1(1)* 43 to 55 labelled b_1(2)* 44 to 24 labelled a_1(1)* 44 to 35 labelled b_1(1)* 45 to 46 labelled a_1(1)* 46 to 47 labelled a_1(1)* 47 to 48 labelled b_1(1)* 48 to 49 labelled b_1(1)* 49 to 50 labelled a_1(1)* 50 to 51 labelled a_1(1)* 51 to 52 labelled b_1(1)* 52 to 53 labelled b_1(1)* 53 to 54 labelled a_1(1)* 53 to 55 labelled b_1(2)* 54 to 42 labelled a_1(1)* 54 to 35 labelled b_1(1)* 55 to 56 labelled a_1(2)* 56 to 57 labelled a_1(2)* 57 to 58 labelled b_1(2)* 58 to 59 labelled b_1(2)* 59 to 60 labelled a_1(2)* 60 to 61 labelled a_1(2)* 61 to 62 labelled b_1(2)* 62 to 63 labelled b_1(2)* 63 to 64 labelled a_1(2)* 63 to 55 labelled b_1(2)* 64 to 42 labelled a_1(2)* 64 to 35 labelled b_1(1)


----------------------------------------

(6)
YES
