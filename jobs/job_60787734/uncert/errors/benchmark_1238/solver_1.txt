last 238 length 883
CNF 238 vars 883 clauses
last 264 length 1008
CNF 264 vars 1008 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1790, clauses: 6273
last 1790 length 6273
CNF 1790 vars 6273 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1790, clauses: 6273, status: Satisfied, time: 0.010011774s
last 343 length 1324
last 336 length 1309
CNF 336 vars 1309 clauses
CNF 343 vars 1324 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2198, clauses: 7794
last 2198 length 7794
CNF 2198 vars 7794 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4250, clauses: 17103
last 4250 length 17103
CNF 4250 vars 17103 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2198, clauses: 7794, status: Satisfied, time: 0.046750323s
last 3206 length 12909
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4250, clauses: 17103, status: Satisfied, time: 0.01466055s
last 192 length 713
CNF 192 vars 713 clauses
last 257 length 987
CNF 3206 vars 12909 clauses
CNF 257 vars 987 clauses
last 3092 length 13242
CNF 3092 vars 13242 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1684, clauses: 5848
last 1684 length 5848
last 242 length 939
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3785, clauses: 15265
CNF 1684 vars 5848 clauses
CNF 242 vars 939 clauses
last 290 length 1129
last 3785 length 15265
CNF 3785 vars 15265 clauses
CNF 290 vars 1129 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1881, clauses: 6548
last 1881 length 6548
CNF 1881 vars 6548 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1881, clauses: 6548, status: Satisfied, time: 0.022267524s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1684, clauses: 5848, status: Unsatisfied, time: 0.11618893s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3785, clauses: 15265, status: Unsatisfied, time: 0.105279593s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2433, clauses: 9207
last 2433 length 9207
CNF 2433 vars 9207 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2717, clauses: 9906
last 5411 length 20943
last 2717 length 9906
CNF 2717 vars 9906 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 6 strict rules and 4 weak rules on 6 letters       EDG
SRS with 6 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 4 weak rules on 6 letters       EDG
SRS with 4 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, CNF 5411 vars 20943 clauses
remove Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2433, clauses: 9207, status: Unsatisfied, time: 0.132014952s
= Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 4 weak rules on 6 letters       weights
SRS with 2 strict rules and 4 weak rules on 5 letters       EDG
SRS with 2 strict rules and 4 weak rules on 5 letters       Usable
SRS with 2 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a] -> [c] {- Input 1 -}
  [a, b] -> [b, a, c] {- Input 2 -}
  [c, c] -> [a] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [a] -> [c] {- Mirror (Input 1) -}
  [b, a] -> [c, a, b] {- Mirror (Input 2) -}
  [c, c] -> [a] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [b#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [b#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 10A 10A 11A - \
        | 10A 10A 11A - |
        | 10A 10A 11A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 15A 15A 15A - \
        | 15A 15A 15A - |
        | 15A 15A 15A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 15A 15A - \
        | 14A 15A 15A - |
        | 14A 15A 15A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 13A 15A 15A - \
        | 13A 15A 15A - |
        | 13A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
reason
  remove un-usable
    SRS
      [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
      [b, a] ->= [c, a, b] {- DP Nontop (Mirror (Input 2)) -}
      [c, c] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
   property Termination
has value Just True
for SRS
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (c, 2/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Deepee\EDG(6/4,6)\Matrix{\Arctic}{3}\EDG(4/4,6)\Matrix{\Arctic}{3}(3/4,6)\Weight\EDG(2/4,5)\Usable(2,3)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************last 7720 length 30805


**************************************************
F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F      = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F      = 0 , alphabet_size = 9 , total_length = 180} , self = 69 , parent = Nothing
F      , duration = 0.221838364000 , status = Fail , start = 2025-09-03 11:18:47.30614939
F      UTC , finish = 2025-09-03 11:18:47.527987754 UTC , thread_cap_info = ("ThreadId
F      56", 2, False)}
F      
| F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F    = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F    = 0 , alphabet_size = 9 , total_length = 180} , self = 48 , parent = Nothing
| F    , duration = 0.138117216000 , status = Fail , start = 2025-09-03 11:18:47.306154099
| F    UTC , finish = 2025-09-03 11:18:47.444271315 UTC , thread_cap_info = ("ThreadId
| F    54", 0, False)}
| F    
| F    
| F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F    = 180} , self = 92 , parent = Nothing , duration = 0.150853671000 , status
| F    = Fail , start = 2025-09-03 11:18:47.452727916 UTC , finish = 2025-09-03
| F    11:18:47.603581587 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| F    
| | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F  = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F  = 180} , self = 95 , parent = Nothing , duration = 0.201710879000 , status
| | F  = Fail , start = 2025-09-03 11:18:47.472705316 UTC , finish = 2025-09-03
| | F  11:18:47.674416195 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | F  
F | |  
F | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |  = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
F | |  = 5 , total_length = 21} , self = 101 , parent = Nothing , duration = 0.180106303000
F | |  , status = Fail , start = 2025-09-03 11:18:47.59834318 UTC , finish = 2025-09-03
F | |  11:18:47.778449483 UTC , thread_cap_info = ("ThreadId 133", 3, False)}
F | |  
| F |  
| F |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| F |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| F |  = 5 , total_length = 21} , self = 102 , parent = Nothing , duration = 0.185028706000
| F |  , status = Fail , start = 2025-09-03 11:18:47.613352861 UTC , finish =
| F |  2025-09-03 11:18:47.798381567 UTC , thread_cap_info = ("ThreadId 135",
| F |  3, False)}
| F |  
| | F  
F |    
  F    
