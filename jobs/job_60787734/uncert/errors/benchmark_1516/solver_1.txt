last 3522 length 16230
CNF 3522 vars 16230 clauses
last 3982 length 17239
CNF 3982 vars 17239 clauses
last 1214 length 5104
last 1194 length 5023
CNF 1214 vars 5104 clauses
last 1144 length 4835
last 1343 length 5676
CNF 1194 vars 5023 clauses
CNF 1144 vars 4835 clauses
CNF 1343 vars 5676 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2742, clauses: 10319
last 2742 length 10319
CNF 2742 vars 10319 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2742, clauses: 10319, status: Satisfied, time: 0.022863166s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2751, clauses: 10346
last 2751 length 10346
CNF 2751 vars 10346 clauses
last 943 length 3978
CNF 943 vars 3978 clauses
last 832 length 3492
CNF 832 vars 3492 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9241, clauses: 38836
last 9241 length 38836
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6667
last 1810 length 6667
CNF 1810 vars 6667 clauses
CNF 9241 vars 38836 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6667, status: Satisfied, time: 0.047283136s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2751, clauses: 10346, status: Unsatisfied, time: 0.167209596s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5616, clauses: 23653
last 5616 length 23653
CNF 5616 vars 23653 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 10 strict rules and 3 weak rules on 4 letters       weights
SRS with 3 strict rules and 3 weak rules on 4 letters       EDG
SRS with 3 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 4 letters       weights
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, b] -> [a, a, b, a] {- Input 0 -}
  [a, a, a, a] -> [b, a, b, b] {- Input 1 -}
  [b, b, b, a] -> [b, b, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, a, b] -> [a, b, a, a] {- Mirror (Input 0) -}
  [a, a, a, a] -> [b, b, a, b] {- Mirror (Input 1) -}
  [a, b, b, b] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, b, b] |-> [a#, b, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, b, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [b#, a, a] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 6A 7A - \
        | 4A 6A 7A - |
        | 4A 6A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 5A 7A 7A - \
        | 5A 7A 7A - |
        | 5A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(10/3,4)\Weight\EDG(3/3,4)\Matrix{\Arctic}{3}(2/3,4)\Weight\EDG(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))last 5764 length 25324
**************************************************
last 5459 length 24232
CNF 5764 vars 25324 clauses
last 5843 length 26528
last 6244 length 27552
statistics on proof searchCNF 5843 vars 26528 clauses
 CNF 5459 vars 24232 clauses
CNF 6244 vars 27552 clauses
(nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                = 24} , self = 97 , parent = Nothing , duration = 0.733289262000 , status
E                = Except "AsyncCancelled" , start = 2025-09-03 12:04:58.227135161 UTC ,
E                finish = 2025-09-03 12:04:58.960424423 UTC , thread_cap_info = ("ThreadId
E                35", 1, False)}
E                
| F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F              = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F              = 24} , self = 48 , parent = Nothing , duration = 0.278520518000 , status
| F              = Fail , start = 2025-09-03 12:04:58.227160954 UTC , finish = 2025-09-03
| F              12:04:58.505681472 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
| F              
| | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F            = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | F            = 0 , alphabet_size = 4 , total_length = 120} , self = 62 , parent = Nothing
| | F            , duration = 0.338418534000 , status = Fail , start = 2025-09-03 12:04:58.232245356
| | F            UTC , finish = 2025-09-03 12:04:58.57066389 UTC , thread_cap_info = ("ThreadId
| | F            52", 3, False)}
| | F            
| | | F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | F          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | F          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | F          = 24} , self = 95 , parent = Nothing , duration = 0.640396031000 , status
| | | F          = Fail , start = 2025-09-03 12:04:58.232245866 UTC , finish = 2025-09-03
| | | F          12:04:58.872641897 UTC , thread_cap_info = ("ThreadId 36", 1, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F        = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F        = 120} , self = 43 , parent = Nothing , duration = 0.183302178000 , status
| | | | F        = Fail , start = 2025-09-03 12:04:58.250633715 UTC , finish = 2025-09-03
| | | | F        12:04:58.433935893 UTC , thread_cap_info = ("ThreadId 65", 0, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F      = 120} , self = 41 , parent = Nothing , duration = 0.155611952000 , status
| | | | | F      = Fail , start = 2025-09-03 12:04:58.250638941 UTC , finish = 2025-09-03
| | | | | F      12:04:58.406250893 UTC , thread_cap_info = ("ThreadId 67", 0, False)}
| | | | | F      
| | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F    = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | | | | F    = 0 , alphabet_size = 4 , total_length = 120} , self = 70 , parent = Nothing
| | | | | | F    , duration = 0.415957710000 , status = Fail , start = 2025-09-03 12:04:58.2542266
| | | | | | F    UTC , finish = 2025-09-03 12:04:58.67018431 UTC , thread_cap_info = ("ThreadId
| | | | | | F    54", 3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 0 , alphabet_size = 2 , total_length = 24} , self = 47 , parent = Nothing
| | | | | | | F  , duration = 0.178061142000 , status = Fail , start = 2025-09-03 12:04:58.312025989
| | | | | | | F  UTC , finish = 2025-09-03 12:04:58.490087131 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  75", 2, False)}
| | | | | | | F  
| | | | | F | |  
| | | | F   | |  
| | | |     | F  
| F | |     |    
|   F |     |    
| F   |     |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F   |     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F   |     |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F   |     |    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| F   |     |    = 4 , total_length = 48} , self = 92 , parent = Nothing , duration = 0.227837712000
| F   |     |    , status = Fail , start = 2025-09-03 12:04:58.586531047 UTC , finish =
| F   |     |    2025-09-03 12:04:58.814368759 UTC , thread_cap_info = ("ThreadId 106",
| F   |     |    2, False)}
| F   |     |    
| |   |     F    
| F   |          
|     F          
E                
