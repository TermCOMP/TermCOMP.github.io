last 1765 length 7253
CNF 1765 vars 7253 clauses
last 1801 length 7537
CNF 1801 vars 7537 clauses
last 435 length 1723
last 646 length 2587
CNF 435 vars 1723 clauses
last 615 length 2476
last 476 length 1913
CNF 476 vars 1913 clauses
CNF 646 vars 2587 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1564, clauses: 5668
CNF 615 vars 2476 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2369, clauses: 8670
last 1564 length 5668
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5061, clauses: 21027
last 2369 length 8670
last 5061 length 21027
CNF 1564 vars 5668 clauses
CNF 2369 vars 8670 clauses
CNF 5061 vars 21027 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1564, clauses: 5668, status: Satisfied, time: 0.171235882s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6402, clauses: 26589
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2369, clauses: 8670, status: Satisfied, time: 0.193477739s
last 6402 length 26589
CNF 6402 vars 26589 clauses
last 441 length 1760
last 382 length 1567
CNF 441 vars 1760 clauses
last 524 length 2110
CNF 524 vars 2110 clauses
CNF 382 vars 1567 clauses
last 452 length 1841
CNF 452 vars 1841 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5203
last 1456 length 5203
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 6651
last 1853 length 6651
CNF 1456 vars 5203 clauses
CNF 1853 vars 6651 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 6651, status: Unsatisfied, time: 0.071788818s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5203, status: Unsatisfied, time: 0.083240017s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5680, clauses: 23577
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5013, clauses: 20847
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3474, clauses: 13985
last 5680 length 23577
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3048, clauses: 12284
last 5013 length 20847
last 3474 length 13985
last 3048 length 12284
CNF 5680 vars 23577 clauses
CNF 5013 vars 20847 clauses
CNF 3474 vars 13985 clauses
CNF 3048 vars 12284 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5680, clauses: 23577, status: Satisfied, time: 0.069643906s
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 5 strict rules and 3 weak rules on 4 letters       EDG
SRS with 5 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 4 letters       EDG
SRS with 2 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 4 letters       weights
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b] -> [a] {- Input 0 -}
  [a, a] -> [b, b, b] {- Input 1 -}
  [b, b, a] -> [a, b, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 2) (Input 1) -}
  [a#, a] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [a#, a] |-> [b#, b, b] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [b#, b, a] |-> [a#, b, a] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 2) (Input 1) -}
  [b#, b, a] |-> [a#, b, a] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [a#, a] |-> [b#, b, b] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
  ( b#
  , Wk  / 6A 7A 7A - \
        | 6A 7A 7A - |
        | 6A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, b, a] |-> [a#, b, a] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [b#, b, b] {- DP (Top 0) (Input 1) -}
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b, a] |-> [a#, b, a] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [b#, b, b] {- DP (Top 0) (Input 1) -}
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 1A -1A 1A \
        | 1A -1A 0A |
        \ -  -   0A / )
  ( b
  , Wk  / -1A -1A 0A \
        | 1A  -1A 2A |
        \ -   -   0A / )
  ( a#
  , Wk  / 1A - 1A \
        | -  - -  |
        \ -  - 0A / )
  ( b#
  , Wk  / - -1A 0A \
        | - -   -  |
        \ - -   0A / )
   property Termination
has value Just True
for SRS
  [b#, b, a] |-> [a#, b, a] {- DP (Top 0) (Input 2) -}
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, b, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, b, b] {- DP Nontop (Input 1) -}
  [b, b, a] ->= [a, b, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee\EDG(5/3,4)\Matrix{\Arctic}{3}\EDG(2/3,4)\Matrix{\ArcticBZ}{3}(1/3,4)\Weight(0/3,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.392397240000
  min duration 0.399393898000
  total durat. 2.364578767000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 15}
    , self = 49
    , parent = Nothing
    , duration = 1.392397240000
    , status = Fail
    , start = 2025-09-03 10:45:17.4885234 UTC
    , finish = 2025-09-03 10:45:18.88092064 UTC
    , thread_cap_info = ("ThreadId 49", 0, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.952963482000
  min duration 1.952963482000
  total durat. 1.952963482000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 15}
    , self = 92
    , parent = Nothing
    , duration = 1.952963482000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:45:17.488450226 UTC
    , finish = 2025-09-03 10:45:19.441413708 UTC
    , thread_cap_info = ("ThreadId 37", 1, False)}
**************************************************
E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E          = 15} , self = 92 , parent = Nothing , duration = 1.952963482000 , status
E          = Except "AsyncCancelled" , start = 2025-09-03 10:45:17.488450226 UTC ,
E          finish = 2025-09-03 10:45:19.441413708 UTC , thread_cap_info = ("ThreadId
E          37", 1, False)}
E          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 2 , total_length = 15} , self = 49 , parent = Nothing
| F        , duration = 1.392397240000 , status = Fail , start = 2025-09-03 10:45:17.4885234
| F        UTC , finish = 2025-09-03 10:45:18.88092064 UTC , thread_cap_info = ("ThreadId
| F        49", 0, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 2 , total_length = 15} , self = 47 , parent = Nothing
| | F      , duration = 0.399393898000 , status = Fail , start = 2025-09-03 10:45:17.488526676
| | F      UTC , finish = 2025-09-03 10:45:17.887920574 UTC , thread_cap_info = ("ThreadId
| | F      51", 0, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 4 , total_length = 84} , self = 48 , parent = Nothing
| | | F    , duration = 0.572787629000 , status = Fail , start = 2025-09-03 10:45:17.505749051
| | | F    UTC , finish = 2025-09-03 10:45:18.07853668 UTC , thread_cap_info = ("ThreadId
| | | F    72", 3, False)}
| | | F    
| | F |    
| |   F    
| F        
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| S        = 3 , total_length = 25} , self = 67 , parent = Nothing , duration = 0.254110355000
| S        , status = Success , start = 2025-09-03 10:45:18.901387707 UTC , finish
| S        = 2025-09-03 10:45:19.155498062 UTC , thread_cap_info = ("ThreadId 105",
| S        0, False)}
| S        
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | E      = 3 , total_length = 25} , self = 71 , parent = Nothing , duration = 0.242116730000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:18.915186462
| | E      UTC , finish = 2025-09-03 10:45:19.157303192 UTC , thread_cap_info = ("ThreadId
| | E      106", 0, False)}
| | E      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | S    = 4 , total_length = 37} , self = 69 , parent = Nothing , duration = 0.237158461000
| | | S    , status = Success , start = 2025-09-03 10:45:18.918729574 UTC , finish
| | | S    = 2025-09-03 10:45:19.155888035 UTC , thread_cap_info = ("ThreadId 107",
| | | S    0, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | E  = 4 , total_length = 37} , self = 76 , parent = Nothing , duration = 0.210838290000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:18.964080769
| | | | E  UTC , finish = 2025-09-03 10:45:19.174919059 UTC , thread_cap_info = ("ThreadId
| | | | E  109", 0, False)}
| | | | E  
| S | | |  
|   | S |  
|   E   |  
|       E  
| F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| F        = 3 , total_length = 21} , self = 86 , parent = Nothing , duration = 0.137649927000
| F        , status = Fail , start = 2025-09-03 10:45:19.186004781 UTC , finish =
| F        2025-09-03 10:45:19.323654708 UTC , thread_cap_info = ("ThreadId 129",
| F        0, False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | F      = 4 , total_length = 26} , self = 85 , parent = Nothing , duration = 0.105521894000
| | F      , status = Fail , start = 2025-09-03 10:45:19.193827407 UTC , finish =
| | F      2025-09-03 10:45:19.299349301 UTC , thread_cap_info = ("ThreadId 131",
| | F      0, False)}
| | F      
| | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | S    = 4 , total_length = 26} , self = 87 , parent = Nothing , duration = 0.196521753000
| | | S    , status = Success , start = 2025-09-03 10:45:19.212231903 UTC , finish
| | | S    = 2025-09-03 10:45:19.408753656 UTC , thread_cap_info = ("ThreadId 133",
| | | S    0, False)}
| | | S    
| | F |    
| | E |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | E |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | E |    = 4 , total_length = 26} , self = 89 , parent = Nothing , duration = 0.109661017000
| | E |    , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:19.299430532
| | E |    UTC , finish = 2025-09-03 10:45:19.409091549 UTC , thread_cap_info = ("ThreadId
| | E |    135", 0, False)}
| | E |    
| F | |    
|   | S    
|   E      
E          
