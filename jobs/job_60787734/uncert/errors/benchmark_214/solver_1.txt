last 1159 length 5215
CNF 1159 vars 5215 clauses
last 1439 length 6870
last 1502 length 6256
CNF 1439 vars 6870 clauses
last 1186 length 4762
CNF 1502 vars 6256 clauses
CNF 1186 vars 4762 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5906, clauses: 21111
last 5906 length 21111
CNF 5906 vars 21111 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5906, clauses: 21111, status: Satisfied, time: 0.170046328s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7644, clauses: 27134
last 7644 length 27134
CNF 7644 vars 27134 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7644, clauses: 27134, status: Satisfied, time: 0.135446395s
last 1431 length 6834
last 1140 length 5130
CNF 1431 vars 6834 clauses
CNF 1140 vars 5130 clauses
last 463 length 2281
last 222 length 1126
CNF 222 vars 1126 clauses
CNF 463 vars 2281 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5788, clauses: 20638
last 5788 length 20638
**************************************************
summary
**************************************************
SRS with 14 rules on 10 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 669 epsilon transitions
SRS with 11 rules on 10 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 189 epsilon transitions
SRS with 8 rules on 8 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 69 epsilon transitions
SRS with 6 rules on 7 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 25 epsilon transitions
SRS with 2 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 1 and with 2 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [B, a] -> [BA] {- Input 0 -}
  [B, b] -> [B, B] {- Input 1 -}
  [BA, a] -> [BAA] {- Input 2 -}
  [BA, b] -> [BA, B] {- Input 3 -}
  [BAA, a] -> [BAA, A] {- Input 4 -}
  [BAA, b] -> [BAAB] {- Input 5 -}
  [BAAB, a] -> [BAABA] {- Input 6 -}
  [BAAB, b] -> [BAAB, B] {- Input 7 -}
  [BAABA, a] -> [BAABA, A] {- Input 8 -}
  [BAABA, b] -> [BAABAB] {- Input 9 -}
  [BAABAB, a] -> [BAABABA] {- Input 10 -}
  [BAABAB, b] -> [BAABAB, B] {- Input 11 -}
  [BAABABA] -> [a] {- Input 12 -}
  [A] -> [b, a, a, b, a, b, a] {- Input 13 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, -1), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, -1), (8, 2), (9, 2), (10, 2), (11, -1), (12, 2), (13, 2)], epsilons = [((0, 0, 0), (0, 2, 0)), ((0, 0, 0), (1, 2, 0)), ((0, 0, 0), (0, 3, 0)), ((0, 0, 0), (0, 4, 0)), ((0, 0, 0), (2, 4, 0)), ((0, 0, 0), (0, 5, 0)), ((0, 0, 0), (1, 5, 0)), ((0, 0, 0), (2, 5, 0)), ((0, 0, 0), (0, 6, 0)), ((0, 0, 0), (1, 6, 0)), ((0, 0, 0), (2, 6, 0)), ((0, 0, 0), (0, 7, 0)), ((0, 0, 0), (0, 8, 0)), ((0, 0, 0), (2, 8, 0)), ((0, 0, 0), (0, 9, 0)), ((0, 0, 0), (1, 9, 0)), ((0, 0, 0), (2, 9, 0)), ((0, 0, 0), (0, 10, 0)), ((0, 0, 0), (1, 10, 0)), ((0, 0, 0), (2, 10, 0)), ((0, 0, 0), (0, 11, 0)), ((0, 0, 0), (1, 12, 0)), ((0, 0, 0), (2, 12, 0)), ((1, 0, 0), (0, 2, 0)), ((1, 0, 0), (1, 2, 0)), ((1, 0, 0), (2, 2, 0)), ((1, 0, 0), (0, 3, 0)), ((1, 0, 0), (2, 3, 0)), ((1, 0, 0), (0, 4, 0)), ((1, 0, 0), (2, 4, 0)), ((1, 0, 0), (0, 5, 0)), ((1, 0, 0), (1, 5, 0)), ((1, 0, 0), (2, 5, 0)), ((1, 0, 0), (0, 6, 0)), ((1, 0, 0), (1, 6, 0)), ((1, 0, 0), (2, 6, 0)), ((1, 0, 0), (0, 7, 0)), ((1, 0, 0), (0, 8, 0)), ((1, 0, 0), (2, 8, 0)), ((1, 0, 0), (0, 9, 0)), ((1, 0, 0), (1, 9, 0)), ((1, 0, 0), (2, 9, 0)), ((1, 0, 0), (0, 10, 0)), ((1, 0, 0), (1, 10, 0)), ((1, 0, 0), (2, 10, 0)), ((1, 0, 0), (0, 11, 0)), ((1, 0, 0), (1, 12, 0)), ((1, 0, 0), (2, 12, 0)), ((2, 0, 0), (0, 2, 0)), ((2, 0, 0), (1, 2, 0)), ((2, 0, 0), (2, 2, 0)), ((2, 0, 0), (0, 3, 0)), ((2, 0, 0), (2, 3, 0)), ((2, 0, 0), (0, 4, 0)), ((2, 0, 0), (2, 4, 0)), ((2, 0, 0), (0, 5, 0)), ((2, 0, 0), (1, 5, 0)), ((2, 0, 0), (2, 5, 0)), ((2, 0, 0), (0, 6, 0)), ((2, 0, 0), (1, 6, 0)), ((2, 0, 0), (2, 6, 0)), ((2, 0, 0), (0, 7, 0)), ((2, 0, 0), (0, 8, 0)), ((2, 0, 0), (2, 8, 0)), ((2, 0, 0), (0, 9, 0)), ((2, 0, 0), (1, 9, 0)), ((2, 0, 0), (2, 9, 0)), ((2, 0, 0), (0, 10, 0)), ((2, 0, 0), (1, 10, 0)), ((2, 0, 0), (2, 10, 0)), ((2, 0, 0), (0, 11, 0)), ((2, 0, 0), (1, 12, 0)), ((2, 0, 0), (2, 12, 0)), ((0, 1, 0), (1, 0, 0)), ((0, 1, 0), (0, 2, 0)), ((0, 1, 0), (1, 2, 0)), ((0, 1, 0), (2, 2, 0)), ((0, 1, 0), (0, 3, 0)), ((0, 1, 0), (2, 3, 0)), ((0, 1, 0), (0, 4, 0)), ((0, 1, 0), (2, 4, 0)), ((0, 1, 0), (0, 5, 0)), ((0, 1, 0), (1, 5, 0)), ((0, 1, 0), (2, 5, 0)), ((0, 1, 0), (0, 6, 0)), ((0, 1, 0), (1, 6, 0)), ((0, 1, 0), (2, 6, 0)), ((0, 1, 0), (0, 7, 0)), ((0, 1, 0), (0, 8, 0)), ((0, 1, 0), (2, 8, 0)), ((0, 1, 0), (0, 9, 0)), ((0, 1, 0), (1, 9, 0)), ((0, 1, 0), (2, 9, 0)), ((0, 1, 0), (0, 10, 0)), ((0, 1, 0), (1, 10, 0)), ((0, 1, 0), (2, 10, 0)), ((0, 1, 0), (0, 11, 0)), ((0, 1, 0), (1, 12, 0)), ((0, 1, 0), (2, 12, 0)), ((0, 2, 0), (0, 4, 0)), ((0, 2, 0), (0, 5, 0)), ((0, 2, 0), (1, 5, 0)), ((0, 2, 0), (0, 6, 0)), ((0, 2, 0), (1, 6, 0)), ((0, 2, 0), (2, 6, 0)), ((0, 2, 0), (0, 7, 0)), ((0, 2, 0), (0, 8, 0)), ((0, 2, 0), (2, 8, 0)), ((0, 2, 0), (0, 9, 0)), ((0, 2, 0), (1, 9, 0)), ((0, 2, 0), (2, 9, 0)), ((0, 2, 0), (0, 10, 0)), ((0, 2, 0), (1, 10, 0)), ((0, 2, 0), (2, 10, 0)), ((0, 2, 0), (0, 11, 0)), ((0, 2, 0), (1, 12, 0)), ((0, 2, 0), (2, 12, 0)), ((1, 2, 0), (0, 4, 0)), ((1, 2, 0), (2, 4, 0)), ((1, 2, 0), (0, 5, 0)), ((1, 2, 0), (1, 5, 0)), ((1, 2, 0), (2, 5, 0)), ((1, 2, 0), (0, 6, 0)), ((1, 2, 0), (1, 6, 0)), ((1, 2, 0), (2, 6, 0)), ((1, 2, 0), (0, 7, 0)), ((1, 2, 0), (0, 8, 0)), ((1, 2, 0), (2, 8, 0)), ((1, 2, 0), (0, 9, 0)), ((1, 2, 0), (1, 9, 0)), ((1, 2, 0), (2, 9, 0)), ((1, 2, 0), (0, 10, 0)), ((1, 2, 0), (1, 10, 0)), ((1, 2, 0), (2, 10, 0)), ((1, 2, 0), (0, 11, 0)), ((1, 2, 0), (1, 12, 0)), ((1, 2, 0), (2, 12, 0)), ((2, 2, 0), (0, 4, 0)), ((2, 2, 0), (2, 4, 0)), ((2, 2, 0), (0, 5, 0)), ((2, 2, 0), (1, 5, 0)), ((2, 2, 0), (2, 5, 0)), ((2, 2, 0), (0, 6, 0)), ((2, 2, 0), (1, 6, 0)), ((2, 2, 0), (2, 6, 0)), ((2, 2, 0), (0, 7, 0)), ((2, 2, 0), (0, 8, 0)), ((2, 2, 0), (2, 8, 0)), ((2, 2, 0), (0, 9, 0)), ((2, 2, 0), (1, 9, 0)), ((2, 2, 0), (2, 9, 0)), ((2, 2, 0), (0, 10, 0)), ((2, 2, 0), (1, 10, 0)), ((2, 2, 0), (2, 10, 0)), ((2, 2, 0), (0, 11, 0)), ((2, 2, 0), (1, 12, 0)), ((2, 2, 0), (2, 12, 0)), ((0, 3, 0), (1, 2, 0)), ((0, 3, 0), (0, 4, 0)), ((0, 3, 0), (2, 4, 0)), ((0, 3, 0), (0, 5, 0)), ((0, 3, 0), (1, 5, 0)), ((0, 3, 0), (2, 5, 0)), ((0, 3, 0), (0, 6, 0)), ((0, 3, 0), (1, 6, 0)), ((0, 3, 0), (2, 6, 0)), ((0, 3, 0), (0, 7, 0)), ((0, 3, 0), (0, 8, 0)), ((0, 3, 0), (2, 8, 0)), ((0, 3, 0), (0, 9, 0)), ((0, 3, 0), (1, 9, 0)), ((0, 3, 0), (2, 9, 0)), ((0, 3, 0), (0, 10, 0)), ((0, 3, 0), (1, 10, 0)), ((0, 3, 0), (2, 10, 0)), ((0, 3, 0), (0, 11, 0)), ((0, 3, 0), (1, 12, 0)), ((0, 3, 0), (2, 12, 0)), ((2, 3, 0), (2, 2, 0)), ((2, 3, 0), (0, 4, 0)), ((2, 3, 0), (2, 4, 0)), ((2, 3, 0), (0, 5, 0)), ((2, 3, 0), (1, 5, 0)), ((2, 3, 0), (2, 5, 0)), ((2, 3, 0), (0, 6, 0)), ((2, 3, 0), (1, 6, 0)), ((2, 3, 0), (2, 6, 0)), ((2, 3, 0), (0, 7, 0)), ((2, 3, 0), (0, 8, 0)), ((2, 3, 0), (2, 8, 0)), ((2, 3, 0), (0, 9, 0)), ((2, 3, 0), (1, 9, 0)), ((2, 3, 0), (2, 9, 0)), ((2, 3, 0), (0, 10, 0)), ((2, 3, 0), (1, 10, 0)), ((2, 3, 0), (2, 10, 0)), ((2, 3, 0), (0, 11, 0)), ((2, 3, 0), (1, 12, 0)), ((2, 3, 0), (2, 12, 0)), ((0, 4, 0), (1, 5, 0)), ((0, 4, 0), (2, 6, 0)), ((0, 4, 0), (0, 8, 0)), ((0, 4, 0), (2, 8, 0)), ((0, 4, 0), (0, 9, 0)), ((0, 4, 0), (1, 9, 0)), ((0, 4, 0), (2, 9, 0)), ((0, 4, 0), (0, 10, 0)), ((0, 4, 0), (1, 10, 0)), ((0, 4, 0), (2, 10, 0)), ((0, 4, 0), (0, 11, 0)), ((0, 4, 0), (1, 12, 0)), ((0, 4, 0), (2, 12, 0)), ((1, 4, 0), (2, 5, 0)), ((1, 4, 0), (2, 6, 0)), ((1, 4, 0), (0, 8, 0)), ((1, 4, 0), (2, 8, 0)), ((1, 4, 0), (0, 9, 0)), ((1, 4, 0), (1, 9, 0)), ((1, 4, 0), (2, 9, 0)), ((1, 4, 0), (0, 10, 0)), ((1, 4, 0), (1, 10, 0)), ((1, 4, 0), (2, 10, 0)), ((1, 4, 0), (0, 11, 0)), ((1, 4, 0), (1, 12, 0)), ((1, 4, 0), (2, 12, 0)), ((2, 4, 0), (2, 5, 0)), ((2, 4, 0), (2, 6, 0)), ((2, 4, 0), (0, 8, 0)), ((2, 4, 0), (2, 8, 0)), ((2, 4, 0), (0, 9, 0)), ((2, 4, 0), (1, 9, 0)), ((2, 4, 0), (2, 9, 0)), ((2, 4, 0), (0, 10, 0)), ((2, 4, 0), (1, 10, 0)), ((2, 4, 0), (2, 10, 0)), ((2, 4, 0), (0, 11, 0)), ((2, 4, 0), (1, 12, 0)), ((2, 4, 0), (2, 12, 0)), ((0, 5, 0), (0, 6, 0)), ((0, 5, 0), (1, 6, 0)), ((0, 5, 0), (0, 7, 0)), ((0, 5, 0), (0, 8, 0)), ((0, 5, 0), (2, 8, 0)), ((0, 5, 0), (0, 9, 0)), ((0, 5, 0), (1, 9, 0)), ((0, 5, 0), (2, 9, 0)), ((0, 5, 0), (0, 10, 0)), ((0, 5, 0), (1, 10, 0)), ((0, 5, 0), (2, 10, 0)), ((0, 5, 0), (0, 11, 0)), ((0, 5, 0), (1, 12, 0)), ((0, 5, 0), (2, 12, 0)), ((1, 5, 0), (2, 6, 0)), ((1, 5, 0), (0, 8, 0)), ((1, 5, 0), (2, 8, 0)), ((1, 5, 0), (0, 9, 0)), ((1, 5, 0), (1, 9, 0)), ((1, 5, 0), (2, 9, 0)), ((1, 5, 0), (0, 10, 0)), ((1, 5, 0), (1, 10, 0)), ((1, 5, 0), (2, 10, 0)), ((1, 5, 0), (0, 11, 0)), ((1, 5, 0), (1, 12, 0)), ((1, 5, 0), (2, 12, 0)), ((2, 5, 0), (2, 6, 0)), ((2, 5, 0), (0, 8, 0)), ((2, 5, 0), (2, 8, 0)), ((2, 5, 0), (0, 9, 0)), ((2, 5, 0), (1, 9, 0)), ((2, 5, 0), (2, 9, 0)), ((2, 5, 0), (0, 10, 0)), ((2, 5, 0), (1, 10, 0)), ((2, 5, 0), (2, 10, 0)), ((2, 5, 0), (0, 11, 0)), ((2, 5, 0), (1, 12, 0)), ((2, 5, 0), (2, 12, 0)), ((0, 6, 0), (0, 8, 0)), ((0, 6, 0), (0, 9, 0)), ((0, 6, 0), (1, 9, 0)), ((0, 6, 0), (0, 10, 0)), ((0, 6, 0), (1, 10, 0)), ((0, 6, 0), (2, 10, 0)), ((0, 6, 0), (0, 11, 0)), ((0, 6, 0), (1, 12, 0)), ((0, 6, 0), (2, 12, 0)), ((1, 6, 0), (0, 8, 0)), ((1, 6, 0), (2, 8, 0)), ((1, 6, 0), (0, 9, 0)), ((1, 6, 0), (1, 9, 0)), ((1, 6, 0), (2, 9, 0)), ((1, 6, 0), (0, 10, 0)), ((1, 6, 0), (1, 10, 0)), ((1, 6, 0), (2, 10, 0)), ((1, 6, 0), (0, 11, 0)), ((1, 6, 0), (1, 12, 0)), ((1, 6, 0), (2, 12, 0)), ((2, 6, 0), (0, 8, 0)), ((2, 6, 0), (2, 8, 0)), ((2, 6, 0), (0, 9, 0)), ((2, 6, 0), (1, 9, 0)), ((2, 6, 0), (2, 9, 0)), ((2, 6, 0), (0, 10, 0)), ((2, 6, 0), (1, 10, 0)), ((2, 6, 0), (2, 10, 0)), ((2, 6, 0), (0, 11, 0)), ((2, 6, 0), (1, 12, 0)), ((2, 6, 0), (2, 12, 0)), ((0, 7, 0), (1, 6, 0)), ((0, 7, 0), (0, 8, 0)), ((0, 7, 0), (2, 8, 0)), ((0, 7, 0), (0, 9, 0)), ((0, 7, 0), (1, 9, 0)), ((0, 7, 0), (2, 9, 0)), ((0, 7, 0), (0, 10, 0)), ((0, 7, 0), (1, 10, 0)), ((0, 7, 0), (2, 10, 0)), ((0, 7, 0), (0, 11, 0)), ((0, 7, 0), (1, 12, 0)), ((0, 7, 0), (2, 12, 0)), ((0, 8, 0), (1, 9, 0)), ((0, 8, 0), (2, 10, 0)), ((0, 8, 0), (2, 12, 0)), ((1, 8, 0), (2, 9, 0)), ((1, 8, 0), (2, 10, 0)), ((1, 8, 0), (2, 12, 0)), ((2, 8, 0), (2, 9, 0)), ((2, 8, 0), (2, 10, 0)), ((2, 8, 0), (2, 12, 0)), ((0, 9, 0), (0, 10, 0)), ((0, 9, 0), (1, 10, 0)), ((0, 9, 0), (0, 11, 0)), ((0, 9, 0), (1, 12, 0)), ((0, 9, 0), (2, 12, 0)), ((1, 9, 0), (2, 10, 0)), ((1, 9, 0), (2, 12, 0)), ((2, 9, 0), (2, 10, 0)), ((2, 9, 0), (2, 12, 0)), ((0, 10, 0), (1, 12, 0)), ((1, 10, 0), (2, 12, 0)), ((2, 10, 0), (2, 12, 0)), ((0, 11, 0), (1, 10, 0)), ((0, 11, 0), (2, 12, 0)), ((1, 0, 1), (0, 10, 1)), ((1, 0, 1), (1, 10, 1)), ((1, 0, 1), (2, 10, 1)), ((1, 0, 1), (1, 12, 1)), ((1, 0, 1), (2, 12, 1)), ((1, 0, 1), (0, 4, 2)), ((1, 0, 1), (1, 4, 2)), ((1, 0, 1), (2, 4, 2)), ((1, 0, 1), (0, 8, 2)), ((1, 0, 1), (1, 8, 2)), ((1, 0, 1), (2, 8, 2)), ((1, 0, 1), (1, 13, 2)), ((1, 0, 1), (2, 13, 2)), ((1, 0, 1), (1, 13, 3)), ((1, 0, 1), (2, 13, 3)), ((1, 0, 1), (1, 13, 5)), ((1, 0, 1), (2, 13, 5)), ((1, 0, 1), (1, 13, 7)), ((1, 0, 1), (2, 13, 7)), ((2, 0, 1), (0, 4, 2)), ((2, 0, 1), (1, 4, 2)), ((2, 0, 1), (2, 4, 2)), ((2, 0, 1), (0, 8, 2)), ((2, 0, 1), (1, 8, 2)), ((2, 0, 1), (2, 8, 2)), ((2, 0, 1), (1, 13, 3)), ((2, 0, 1), (2, 13, 3)), ((2, 0, 1), (1, 13, 5)), ((2, 0, 1), (2, 13, 5)), ((2, 0, 1), (1, 13, 7)), ((2, 0, 1), (2, 13, 7)), ((0, 1, 1), (0, 0, 0)), ((0, 1, 1), (1, 0, 0)), ((0, 1, 1), (0, 1, 0)), ((0, 1, 1), (0, 2, 0)), ((0, 1, 1), (1, 2, 0)), ((0, 1, 1), (2, 2, 0)), ((0, 1, 1), (0, 3, 0)), ((0, 1, 1), (2, 3, 0)), ((0, 1, 1), (0, 4, 0)), ((0, 1, 1), (2, 4, 0)), ((0, 1, 1), (0, 5, 0)), ((0, 1, 1), (1, 5, 0)), ((0, 1, 1), (2, 5, 0)), ((0, 1, 1), (0, 6, 0)), ((0, 1, 1), (1, 6, 0)), ((0, 1, 1), (2, 6, 0)), ((0, 1, 1), (0, 7, 0)), ((0, 1, 1), (0, 8, 0)), ((0, 1, 1), (2, 8, 0)), ((0, 1, 1), (0, 9, 0)), ((0, 1, 1), (1, 9, 0)), ((0, 1, 1), (2, 9, 0)), ((0, 1, 1), (0, 10, 0)), ((0, 1, 1), (1, 10, 0)), ((0, 1, 1), (2, 10, 0)), ((0, 1, 1), (0, 11, 0)), ((0, 1, 1), (1, 12, 0)), ((0, 1, 1), (2, 12, 0)), ((1, 2, 1), (0, 10, 1)), ((1, 2, 1), (1, 10, 1)), ((1, 2, 1), (2, 10, 1)), ((1, 2, 1), (1, 12, 1)), ((1, 2, 1), (2, 12, 1)), ((1, 2, 1), (0, 4, 2)), ((1, 2, 1), (1, 4, 2)), ((1, 2, 1), (2, 4, 2)), ((1, 2, 1), (0, 8, 2)), ((1, 2, 1), (1, 8, 2)), ((1, 2, 1), (2, 8, 2)), ((1, 2, 1), (1, 13, 2)), ((1, 2, 1), (2, 13, 2)), ((1, 2, 1), (1, 13, 3)), ((1, 2, 1), (2, 13, 3)), ((1, 2, 1), (1, 13, 5)), ((1, 2, 1), (2, 13, 5)), ((1, 2, 1), (1, 13, 7)), ((1, 2, 1), (2, 13, 7)), ((2, 2, 1), (0, 10, 1)), ((2, 2, 1), (1, 10, 1)), ((2, 2, 1), (2, 10, 1)), ((2, 2, 1), (1, 12, 1)), ((2, 2, 1), (2, 12, 1)), ((2, 2, 1), (0, 4, 2)), ((2, 2, 1), (1, 4, 2)), ((2, 2, 1), (2, 4, 2)), ((2, 2, 1), (0, 8, 2)), ((2, 2, 1), (1, 8, 2)), ((2, 2, 1), (2, 8, 2)), ((2, 2, 1), (1, 13, 2)), ((2, 2, 1), (2, 13, 2)), ((2, 2, 1), (1, 13, 3)), ((2, 2, 1), (2, 13, 3)), ((2, 2, 1), (1, 13, 5)), ((2, 2, 1), (2, 13, 5)), ((2, 2, 1), (1, 13, 7)), ((2, 2, 1), (2, 13, 7)), ((0, 3, 1), (0, 0, 0)), ((0, 3, 1), (1, 0, 0)), ((0, 3, 1), (0, 1, 0)), ((0, 3, 1), (0, 2, 0)), ((0, 3, 1), (1, 2, 0)), ((0, 3, 1), (2, 2, 0)), ((0, 3, 1), (0, 3, 0)), ((0, 3, 1), (2, 3, 0)), ((0, 3, 1), (0, 4, 0)), ((0, 3, 1), (2, 4, 0)), ((0, 3, 1), (0, 5, 0)), ((0, 3, 1), (1, 5, 0)), ((0, 3, 1), (2, 5, 0)), ((0, 3, 1), (0, 6, 0)), ((0, 3, 1), (1, 6, 0)), ((0, 3, 1), (2, 6, 0)), ((0, 3, 1), (0, 7, 0)), ((0, 3, 1), (0, 8, 0)), ((0, 3, 1), (2, 8, 0)), ((0, 3, 1), (0, 9, 0)), ((0, 3, 1), (1, 9, 0)), ((0, 3, 1), (2, 9, 0)), ((0, 3, 1), (0, 10, 0)), ((0, 3, 1), (1, 10, 0)), ((0, 3, 1), (2, 10, 0)), ((0, 3, 1), (0, 11, 0)), ((0, 3, 1), (1, 12, 0)), ((0, 3, 1), (2, 12, 0)), ((2, 3, 1), (2, 0, 0)), ((2, 3, 1), (0, 2, 0)), ((2, 3, 1), (1, 2, 0)), ((2, 3, 1), (2, 2, 0)), ((2, 3, 1), (0, 3, 0)), ((2, 3, 1), (2, 3, 0)), ((2, 3, 1), (0, 4, 0)), ((2, 3, 1), (2, 4, 0)), ((2, 3, 1), (0, 5, 0)), ((2, 3, 1), (1, 5, 0)), ((2, 3, 1), (2, 5, 0)), ((2, 3, 1), (0, 6, 0)), ((2, 3, 1), (1, 6, 0)), ((2, 3, 1), (2, 6, 0)), ((2, 3, 1), (0, 7, 0)), ((2, 3, 1), (0, 8, 0)), ((2, 3, 1), (2, 8, 0)), ((2, 3, 1), (0, 9, 0)), ((2, 3, 1), (1, 9, 0)), ((2, 3, 1), (2, 9, 0)), ((2, 3, 1), (0, 10, 0)), ((2, 3, 1), (1, 10, 0)), ((2, 3, 1), (2, 10, 0)), ((2, 3, 1), (0, 11, 0)), ((2, 3, 1), (1, 12, 0)), ((2, 3, 1), (2, 12, 0)), ((0, 4, 1), (1, 13, 0)), ((1, 4, 1), (2, 13, 0)), ((2, 4, 1), (2, 13, 0)), ((1, 5, 1), (1, 13, 1)), ((2, 5, 1), (2, 13, 1)), ((2, 5, 1), (1, 13, 4)), ((2, 5, 1), (2, 13, 4)), ((2, 5, 1), (1, 13, 6)), ((2, 5, 1), (2, 13, 6)), ((1, 6, 1), (0, 10, 1)), ((1, 6, 1), (1, 10, 1)), ((1, 6, 1), (2, 10, 1)), ((1, 6, 1), (1, 12, 1)), ((1, 6, 1), (2, 12, 1)), ((1, 6, 1), (0, 4, 2)), ((1, 6, 1), (1, 4, 2)), ((1, 6, 1), (2, 4, 2)), ((1, 6, 1), (0, 8, 2)), ((1, 6, 1), (1, 8, 2)), ((1, 6, 1), (2, 8, 2)), ((1, 6, 1), (1, 13, 2)), ((1, 6, 1), (2, 13, 2)), ((1, 6, 1), (1, 13, 3)), ((1, 6, 1), (2, 13, 3)), ((1, 6, 1), (1, 13, 5)), ((1, 6, 1), (2, 13, 5)), ((1, 6, 1), (1, 13, 7)), ((1, 6, 1), (2, 13, 7)), ((2, 6, 1), (0, 4, 2)), ((2, 6, 1), (1, 4, 2)), ((2, 6, 1), (2, 4, 2)), ((2, 6, 1), (0, 8, 2)), ((2, 6, 1), (1, 8, 2)), ((2, 6, 1), (2, 8, 2)), ((2, 6, 1), (1, 13, 2)), ((2, 6, 1), (2, 13, 2)), ((2, 6, 1), (1, 13, 3)), ((2, 6, 1), (2, 13, 3)), ((2, 6, 1), (1, 13, 5)), ((2, 6, 1), (2, 13, 5)), ((2, 6, 1), (1, 13, 7)), ((2, 6, 1), (2, 13, 7)), ((0, 7, 1), (0, 0, 0)), ((0, 7, 1), (1, 0, 0)), ((0, 7, 1), (0, 1, 0)), ((0, 7, 1), (0, 2, 0)), ((0, 7, 1), (1, 2, 0)), ((0, 7, 1), (2, 2, 0)), ((0, 7, 1), (0, 3, 0)), ((0, 7, 1), (2, 3, 0)), ((0, 7, 1), (0, 4, 0)), ((0, 7, 1), (2, 4, 0)), ((0, 7, 1), (0, 5, 0)), ((0, 7, 1), (1, 5, 0)), ((0, 7, 1), (2, 5, 0)), ((0, 7, 1), (0, 6, 0)), ((0, 7, 1), (1, 6, 0)), ((0, 7, 1), (2, 6, 0)), ((0, 7, 1), (0, 7, 0)), ((0, 7, 1), (0, 8, 0)), ((0, 7, 1), (2, 8, 0)), ((0, 7, 1), (0, 9, 0)), ((0, 7, 1), (1, 9, 0)), ((0, 7, 1), (2, 9, 0)), ((0, 7, 1), (0, 10, 0)), ((0, 7, 1), (1, 10, 0)), ((0, 7, 1), (2, 10, 0)), ((0, 7, 1), (0, 11, 0)), ((0, 7, 1), (1, 12, 0)), ((0, 7, 1), (2, 12, 0)), ((0, 8, 1), (1, 13, 0)), ((1, 8, 1), (2, 13, 0)), ((2, 8, 1), (2, 13, 0)), ((1, 9, 1), (1, 13, 1)), ((2, 9, 1), (2, 13, 1)), ((2, 9, 1), (1, 13, 4)), ((2, 9, 1), (2, 13, 4)), ((2, 9, 1), (1, 13, 6)), ((2, 9, 1), (2, 13, 6)), ((1, 10, 1), (0, 10, 1)), ((1, 10, 1), (1, 10, 1)), ((1, 10, 1), (2, 10, 1)), ((1, 10, 1), (1, 12, 1)), ((1, 10, 1), (2, 12, 1)), ((1, 10, 1), (0, 4, 2)), ((1, 10, 1), (1, 4, 2)), ((1, 10, 1), (2, 4, 2)), ((1, 10, 1), (0, 8, 2)), ((1, 10, 1), (1, 8, 2)), ((1, 10, 1), (2, 8, 2)), ((1, 10, 1), (1, 13, 2)), ((1, 10, 1), (2, 13, 2)), ((1, 10, 1), (1, 13, 3)), ((1, 10, 1), (2, 13, 3)), ((1, 10, 1), (1, 13, 5)), ((1, 10, 1), (2, 13, 5)), ((1, 10, 1), (1, 13, 7)), ((1, 10, 1), (2, 13, 7)), ((2, 10, 1), (0, 4, 2)), ((2, 10, 1), (1, 4, 2)), ((2, 10, 1), (2, 4, 2)), ((2, 10, 1), (0, 8, 2)), ((2, 10, 1), (1, 8, 2)), ((2, 10, 1), (2, 8, 2)), ((2, 10, 1), (1, 13, 2)), ((2, 10, 1), (2, 13, 2)), ((2, 10, 1), (1, 13, 3)), ((2, 10, 1), (2, 13, 3)), ((2, 10, 1), (1, 13, 5)), ((2, 10, 1), (2, 13, 5)), ((2, 10, 1), (1, 13, 7)), ((2, 10, 1), (2, 13, 7)), ((0, 11, 1), (0, 0, 0)), ((0, 11, 1), (1, 0, 0)), ((0, 11, 1), (0, 1, 0)), ((0, 11, 1), (0, 2, 0)), ((0, 11, 1), (1, 2, 0)), ((0, 11, 1), (2, 2, 0)), ((0, 11, 1), (0, 3, 0)), ((0, 11, 1), (2, 3, 0)), ((0, 11, 1), (0, 4, 0)), ((0, 11, 1), (2, 4, 0)), ((0, 11, 1), (0, 5, 0)), ((0, 11, 1), (1, 5, 0)), ((0, 11, 1), (2, 5, 0)), ((0, 11, 1), (0, 6, 0)), ((0, 11, 1), (1, 6, 0)), ((0, 11, 1), (2, 6, 0)), ((0, 11, 1), (0, 7, 0)), ((0, 11, 1), (0, 8, 0)), ((0, 11, 1), (2, 8, 0)), ((0, 11, 1), (0, 9, 0)), ((0, 11, 1), (1, 9, 0)), ((0, 11, 1), (2, 9, 0)), ((0, 11, 1), (0, 10, 0)), ((0, 11, 1), (1, 10, 0)), ((0, 11, 1), (2, 10, 0)), ((0, 11, 1), (0, 11, 0)), ((0, 11, 1), (1, 12, 0)), ((0, 11, 1), (2, 12, 0)), ((1, 12, 1), (0, 10, 1)), ((2, 12, 1), (0, 10, 1)), ((2, 12, 1), (1, 10, 1)), ((2, 12, 1), (2, 10, 1)), ((2, 12, 1), (1, 12, 1)), ((2, 12, 1), (2, 12, 1)), ((2, 12, 1), (0, 4, 2)), ((2, 12, 1), (1, 4, 2)), ((2, 12, 1), (2, 4, 2)), ((2, 12, 1), (0, 8, 2)), ((2, 12, 1), (1, 8, 2)), ((2, 12, 1), (2, 8, 2)), ((2, 12, 1), (1, 13, 2)), ((2, 12, 1), (2, 13, 2)), ((2, 12, 1), (1, 13, 3)), ((2, 12, 1), (2, 13, 3)), ((2, 12, 1), (1, 13, 5)), ((2, 12, 1), (2, 13, 5)), ((2, 12, 1), (1, 13, 7)), ((2, 12, 1), (2, 13, 7)), ((2, 3, 2), (1, 13, 4)), ((2, 3, 2), (2, 13, 4)), ((2, 3, 2), (1, 13, 6)), ((2, 3, 2), (2, 13, 6)), ((2, 4, 2), (1, 13, 3)), ((2, 4, 2), (2, 13, 3)), ((2, 8, 2), (1, 13, 3)), ((2, 8, 2), (2, 13, 3)), ((1, 13, 7), (0, 4, 2)), ((1, 13, 7), (0, 8, 2)), ((2, 13, 7), (1, 4, 2)), ((2, 13, 7), (2, 4, 2)), ((2, 13, 7), (1, 8, 2)), ((2, 13, 7), (2, 8, 2)), ((2, 13, 7), (1, 13, 3)), ((2, 13, 7), (2, 13, 3))]}
   property Termination
has value Just True
for SRS
  [B, a] -> [BA] {- Input 0 -}
  [BA, a] -> [BAA] {- Input 2 -}
  [BA, b] -> [BA, B] {- Input 3 -}
  [BAA, a] -> [BAA, A] {- Input 4 -}
  [BAA, b] -> [BAAB] {- Input 5 -}
  [BAAB, a] -> [BAABA] {- Input 6 -}
  [BAABA, a] -> [BAABA, A] {- Input 8 -}
  [BAABA, b] -> [BAABAB] {- Input 9 -}
  [BAABAB, a] -> [BAABABA] {- Input 10 -}
  [BAABABA] -> [a] {- Input 12 -}
  [A] -> [b, a, a, b, a, b, a] {- Input 13 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, 1), (2, -1), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2), (10, 2)], epsilons = [((0, 0, 0), (0, 1, 0)), ((0, 0, 0), (1, 1, 0)), ((0, 0, 0), (0, 2, 0)), ((0, 0, 0), (0, 3, 0)), ((0, 0, 0), (2, 3, 0)), ((0, 0, 0), (0, 4, 0)), ((0, 0, 0), (1, 4, 0)), ((0, 0, 0), (2, 4, 0)), ((0, 0, 0), (0, 5, 0)), ((0, 0, 0), (2, 5, 0)), ((0, 0, 0), (0, 6, 0)), ((0, 0, 0), (2, 6, 0)), ((0, 0, 0), (0, 7, 0)), ((0, 0, 0), (1, 7, 0)), ((0, 0, 0), (2, 7, 0)), ((0, 0, 0), (0, 8, 0)), ((0, 0, 0), (2, 8, 0)), ((0, 0, 0), (1, 9, 0)), ((0, 0, 0), (2, 9, 0)), ((0, 1, 0), (0, 3, 0)), ((0, 1, 0), (0, 4, 0)), ((0, 1, 0), (1, 4, 0)), ((0, 1, 0), (0, 5, 0)), ((0, 1, 0), (2, 5, 0)), ((0, 1, 0), (0, 6, 0)), ((0, 1, 0), (2, 6, 0)), ((0, 1, 0), (0, 7, 0)), ((0, 1, 0), (1, 7, 0)), ((0, 1, 0), (2, 7, 0)), ((0, 1, 0), (0, 8, 0)), ((0, 1, 0), (2, 8, 0)), ((0, 1, 0), (1, 9, 0)), ((0, 1, 0), (2, 9, 0)), ((1, 1, 0), (0, 3, 0)), ((1, 1, 0), (2, 3, 0)), ((1, 1, 0), (0, 4, 0)), ((1, 1, 0), (1, 4, 0)), ((1, 1, 0), (2, 4, 0)), ((1, 1, 0), (0, 5, 0)), ((1, 1, 0), (2, 5, 0)), ((1, 1, 0), (0, 6, 0)), ((1, 1, 0), (2, 6, 0)), ((1, 1, 0), (0, 7, 0)), ((1, 1, 0), (1, 7, 0)), ((1, 1, 0), (2, 7, 0)), ((1, 1, 0), (0, 8, 0)), ((1, 1, 0), (2, 8, 0)), ((1, 1, 0), (1, 9, 0)), ((1, 1, 0), (2, 9, 0)), ((0, 2, 0), (1, 1, 0)), ((0, 2, 0), (0, 3, 0)), ((0, 2, 0), (2, 3, 0)), ((0, 2, 0), (0, 4, 0)), ((0, 2, 0), (1, 4, 0)), ((0, 2, 0), (2, 4, 0)), ((0, 2, 0), (0, 5, 0)), ((0, 2, 0), (2, 5, 0)), ((0, 2, 0), (0, 6, 0)), ((0, 2, 0), (2, 6, 0)), ((0, 2, 0), (0, 7, 0)), ((0, 2, 0), (1, 7, 0)), ((0, 2, 0), (2, 7, 0)), ((0, 2, 0), (0, 8, 0)), ((0, 2, 0), (2, 8, 0)), ((0, 2, 0), (1, 9, 0)), ((0, 2, 0), (2, 9, 0)), ((0, 3, 0), (1, 4, 0)), ((0, 3, 0), (2, 5, 0)), ((0, 3, 0), (2, 6, 0)), ((0, 3, 0), (2, 7, 0)), ((0, 3, 0), (2, 8, 0)), ((0, 3, 0), (2, 9, 0)), ((1, 3, 0), (2, 4, 0)), ((1, 3, 0), (2, 5, 0)), ((1, 3, 0), (2, 6, 0)), ((1, 3, 0), (2, 7, 0)), ((1, 3, 0), (2, 8, 0)), ((1, 3, 0), (2, 9, 0)), ((2, 3, 0), (2, 4, 0)), ((2, 3, 0), (2, 5, 0)), ((2, 3, 0), (2, 6, 0)), ((2, 3, 0), (2, 7, 0)), ((2, 3, 0), (2, 8, 0)), ((2, 3, 0), (2, 9, 0)), ((0, 4, 0), (0, 5, 0)), ((0, 4, 0), (0, 6, 0)), ((0, 4, 0), (0, 7, 0)), ((0, 4, 0), (1, 7, 0)), ((0, 4, 0), (0, 8, 0)), ((0, 4, 0), (2, 8, 0)), ((0, 4, 0), (1, 9, 0)), ((0, 4, 0), (2, 9, 0)), ((1, 4, 0), (2, 5, 0)), ((1, 4, 0), (2, 6, 0)), ((1, 4, 0), (2, 7, 0)), ((1, 4, 0), (2, 8, 0)), ((1, 4, 0), (2, 9, 0)), ((2, 4, 0), (2, 5, 0)), ((2, 4, 0), (2, 6, 0)), ((2, 4, 0), (2, 7, 0)), ((2, 4, 0), (2, 8, 0)), ((2, 4, 0), (2, 9, 0)), ((0, 5, 0), (0, 6, 0)), ((0, 5, 0), (0, 7, 0)), ((0, 5, 0), (1, 7, 0)), ((0, 5, 0), (0, 8, 0)), ((0, 5, 0), (2, 8, 0)), ((0, 5, 0), (1, 9, 0)), ((0, 5, 0), (2, 9, 0)), ((2, 5, 0), (2, 6, 0)), ((2, 5, 0), (2, 7, 0)), ((2, 5, 0), (2, 8, 0)), ((2, 5, 0), (2, 9, 0)), ((0, 6, 0), (1, 7, 0)), ((0, 6, 0), (2, 8, 0)), ((0, 6, 0), (2, 9, 0)), ((1, 6, 0), (2, 7, 0)), ((1, 6, 0), (2, 8, 0)), ((1, 6, 0), (2, 9, 0)), ((2, 6, 0), (2, 7, 0)), ((2, 6, 0), (2, 8, 0)), ((2, 6, 0), (2, 9, 0)), ((0, 7, 0), (0, 8, 0)), ((0, 7, 0), (1, 9, 0)), ((1, 7, 0), (2, 8, 0)), ((1, 7, 0), (2, 9, 0)), ((2, 7, 0), (2, 8, 0)), ((2, 7, 0), (2, 9, 0)), ((0, 8, 0), (1, 9, 0)), ((1, 8, 0), (2, 9, 0)), ((2, 8, 0), (2, 9, 0)), ((1, 1, 1), (0, 8, 1)), ((1, 1, 1), (1, 8, 1)), ((1, 1, 1), (2, 8, 1)), ((1, 1, 1), (1, 9, 1)), ((1, 1, 1), (2, 9, 1)), ((1, 1, 1), (1, 10, 2)), ((1, 1, 1), (2, 10, 2)), ((0, 2, 1), (0, 0, 0)), ((0, 2, 1), (0, 1, 0)), ((0, 2, 1), (1, 1, 0)), ((0, 2, 1), (0, 2, 0)), ((0, 2, 1), (0, 3, 0)), ((0, 2, 1), (2, 3, 0)), ((0, 2, 1), (0, 4, 0)), ((0, 2, 1), (1, 4, 0)), ((0, 2, 1), (2, 4, 0)), ((0, 2, 1), (0, 5, 0)), ((0, 2, 1), (2, 5, 0)), ((0, 2, 1), (0, 6, 0)), ((0, 2, 1), (2, 6, 0)), ((0, 2, 1), (0, 7, 0)), ((0, 2, 1), (1, 7, 0)), ((0, 2, 1), (2, 7, 0)), ((0, 2, 1), (0, 8, 0)), ((0, 2, 1), (2, 8, 0)), ((0, 2, 1), (1, 9, 0)), ((0, 2, 1), (2, 9, 0)), ((0, 3, 1), (1, 10, 0)), ((1, 3, 1), (2, 10, 0)), ((2, 3, 1), (2, 10, 0)), ((1, 4, 1), (1, 10, 1)), ((2, 4, 1), (2, 10, 1)), ((2, 5, 1), (1, 10, 2)), ((2, 5, 1), (2, 10, 2)), ((0, 6, 1), (1, 10, 0)), ((1, 6, 1), (2, 10, 0)), ((2, 6, 1), (2, 10, 0)), ((1, 7, 1), (1, 10, 1)), ((2, 7, 1), (2, 10, 1)), ((2, 8, 1), (1, 10, 2)), ((2, 8, 1), (2, 10, 2)), ((1, 9, 1), (0, 8, 1)), ((2, 9, 1), (1, 8, 1)), ((2, 9, 1), (2, 8, 1)), ((2, 9, 1), (1, 10, 2)), ((2, 9, 1), (2, 10, 2)), ((2, 3, 2), (1, 10, 3)), ((2, 3, 2), (2, 10, 3)), ((2, 6, 2), (1, 10, 3)), ((2, 6, 2), (2, 10, 3)), ((1, 10, 7), (0, 3, 2)), ((1, 10, 7), (0, 6, 2)), ((2, 10, 7), (1, 3, 2)), ((2, 10, 7), (2, 3, 2)), ((2, 10, 7), (1, 6, 2)), ((2, 10, 7), (2, 6, 2)), ((2, 10, 7), (1, 10, 3)), ((2, 10, 7), (2, 10, 3))]}
   property Termination
has value Just True
for SRS
  [BAA, a] -> [BAA, A] {- Input 4 -}
  [BAA, b] -> [BAAB] {- Input 5 -}
  [BAAB, a] -> [BAABA] {- Input 6 -}
  [BAABA, a] -> [BAABA, A] {- Input 8 -}
  [BAABA, b] -> [BAABAB] {- Input 9 -}
  [BAABAB, a] -> [BAABABA] {- Input 10 -}
  [BAABABA] -> [a] {- Input 12 -}
  [A] -> [b, a, a, b, a, b, a] {- Input 13 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, 1), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2)], epsilons = [((0, 0, 0), (1, 1, 0)), ((0, 0, 0), (2, 2, 0)), ((0, 0, 0), (2, 3, 0)), ((0, 0, 0), (2, 4, 0)), ((0, 0, 0), (2, 5, 0)), ((0, 0, 0), (2, 6, 0)), ((0, 1, 0), (0, 2, 0)), ((0, 1, 0), (0, 3, 0)), ((0, 1, 0), (0, 4, 0)), ((0, 1, 0), (1, 4, 0)), ((0, 1, 0), (0, 5, 0)), ((0, 1, 0), (2, 5, 0)), ((0, 1, 0), (1, 6, 0)), ((0, 1, 0), (2, 6, 0)), ((1, 1, 0), (2, 2, 0)), ((1, 1, 0), (2, 3, 0)), ((1, 1, 0), (2, 4, 0)), ((1, 1, 0), (2, 5, 0)), ((1, 1, 0), (2, 6, 0)), ((0, 2, 0), (0, 3, 0)), ((0, 2, 0), (0, 4, 0)), ((0, 2, 0), (1, 4, 0)), ((0, 2, 0), (0, 5, 0)), ((0, 2, 0), (2, 5, 0)), ((0, 2, 0), (1, 6, 0)), ((0, 2, 0), (2, 6, 0)), ((2, 2, 0), (2, 3, 0)), ((2, 2, 0), (2, 4, 0)), ((2, 2, 0), (2, 5, 0)), ((2, 2, 0), (2, 6, 0)), ((0, 3, 0), (1, 4, 0)), ((0, 3, 0), (2, 5, 0)), ((0, 3, 0), (2, 6, 0)), ((1, 3, 0), (2, 4, 0)), ((1, 3, 0), (2, 5, 0)), ((1, 3, 0), (2, 6, 0)), ((2, 3, 0), (2, 4, 0)), ((2, 3, 0), (2, 5, 0)), ((2, 3, 0), (2, 6, 0)), ((0, 4, 0), (0, 5, 0)), ((0, 4, 0), (1, 6, 0)), ((1, 4, 0), (2, 5, 0)), ((1, 4, 0), (2, 6, 0)), ((2, 4, 0), (2, 5, 0)), ((2, 4, 0), (2, 6, 0)), ((0, 5, 0), (1, 6, 0)), ((1, 5, 0), (2, 6, 0)), ((2, 5, 0), (2, 6, 0)), ((0, 0, 1), (1, 7, 0)), ((1, 1, 1), (1, 7, 1)), ((2, 2, 1), (1, 7, 2)), ((0, 3, 1), (1, 7, 0)), ((1, 3, 1), (2, 7, 0)), ((2, 3, 1), (2, 7, 0)), ((1, 4, 1), (1, 7, 1)), ((2, 4, 1), (2, 7, 1)), ((2, 5, 1), (1, 7, 2)), ((2, 5, 1), (2, 7, 2)), ((1, 6, 1), (0, 5, 1)), ((2, 6, 1), (1, 5, 1)), ((2, 6, 1), (2, 5, 1)), ((2, 6, 1), (1, 7, 2)), ((2, 6, 1), (2, 7, 2)), ((2, 3, 2), (1, 7, 3)), ((1, 7, 7), (0, 0, 2)), ((1, 7, 7), (0, 3, 2)), ((2, 7, 7), (1, 3, 2)), ((2, 7, 7), (2, 3, 2)), ((2, 7, 7), (1, 7, 3))]}
   property Termination
has value Just True
for SRS
  [BAAB, a] -> [BAABA] {- Input 6 -}
  [BAABA, a] -> [BAABA, A] {- Input 8 -}
  [BAABA, b] -> [BAABAB] {- Input 9 -}
  [BAABAB, a] -> [BAABABA] {- Input 10 -}
  [BAABABA] -> [a] {- Input 12 -}
  [A] -> [b, a, a, b, a, b, a] {- Input 13 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, -1), (2, 1), (3, 2), (4, 2), (5, 1)], epsilons = [((0, 0, 0), (0, 1, 0)), ((0, 0, 0), (0, 2, 0)), ((0, 0, 0), (1, 2, 0)), ((0, 0, 0), (0, 3, 0)), ((0, 0, 0), (2, 3, 0)), ((0, 0, 0), (1, 4, 0)), ((0, 0, 0), (2, 4, 0)), ((0, 1, 0), (1, 2, 0)), ((0, 1, 0), (2, 3, 0)), ((0, 1, 0), (2, 4, 0)), ((0, 2, 0), (0, 3, 0)), ((0, 2, 0), (1, 4, 0)), ((1, 2, 0), (2, 3, 0)), ((1, 2, 0), (2, 4, 0)), ((0, 3, 0), (1, 4, 0)), ((1, 3, 0), (2, 4, 0)), ((2, 3, 0), (2, 4, 0)), ((0, 1, 1), (1, 5, 0)), ((1, 2, 1), (1, 5, 1)), ((2, 3, 1), (1, 5, 2)), ((1, 4, 1), (0, 3, 1)), ((2, 4, 1), (1, 3, 1)), ((2, 4, 1), (2, 3, 1)), ((2, 4, 1), (1, 5, 2)), ((1, 5, 7), (0, 1, 2))]}
   property Termination
has value Just True
for SRS
  [BAABAB, a] -> [BAABABA] {- Input 10 -}
  [BAABABA] -> [a] {- Input 12 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, 1)], epsilons = [((0, 0, 0), (1, 1, 0)), ((1, 1, 1), (0, 0, 1))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (14,10)\RelRFCmb{2}(11,10)\RelRFCmb{2}(8,8)\RelRFCmb{2}(6,7)\RelRFCmb{2}(2,3)\RelRFCmb{1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1160, clauses: 4005
last 1160 length 4005
CNF 5788 vars 20638 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S          = Size { num_rules = 1400 , num_strict_rules = 1400 , num_top_rules = 0
S          , num_weak_rules = 0 , alphabet_size = 100 , total_length = 8000} , self
S          = 45 , parent = Nothing , duration = 0.162716867000 , status = Success
S          , start = 2025-09-03 11:10:12.775853931 UTC , finish = 2025-09-03 11:10:12.938570798
S          UTC , thread_cap_info = ("ThreadId 54", 2, False)}
S          
| E        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| E        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| E        = Size { num_rules = 1400 , num_strict_rules = 1400 , num_top_rules = 0
| E        , num_weak_rules = 0 , alphabet_size = 100 , total_length = 8000} , self
| E        = 43 , parent = Nothing , duration = 0.111072663000 , status = Except "AsyncCancelled"
| E        , start = 2025-09-03 11:10:12.794445161 UTC , finish = 2025-09-03 11:10:12.905517824
| E        UTC , thread_cap_info = ("ThreadId 67", 1, False)}
| E        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 22 , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 14 ,
| | S      alphabet_size = 13 , total_length = 86} , self = 55 , parent = Nothing
| | S      , duration = 0.253430639000 , status = Success , start = 2025-09-03 11:10:12.836866207
| | S      UTC , finish = 2025-09-03 11:10:13.090296846 UTC , thread_cap_info = ("ThreadId
| | S      75", 3, False)}
| | S      
| | | E    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | E    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | E    = Size { num_rules = 1100 , num_strict_rules = 1100 , num_top_rules = 0
| | | E    , num_weak_rules = 0 , alphabet_size = 100 , total_length = 6200} , self
| | | E    = 52 , parent = Nothing , duration = 0.177046951000 , status = Except "AsyncCancelled"
| | | E    , start = 2025-09-03 11:10:12.869227272 UTC , finish = 2025-09-03 11:10:13.046274223
| | | E    UTC , thread_cap_info = ("ThreadId 84", 0, False)}
| | | E    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 22
| | | | E  , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 14 , alphabet_size
| | | | E  = 13 , total_length = 86} , self = 60 , parent = Nothing , duration = 0.334133724000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:10:12.871383597
| | | | E  UTC , finish = 2025-09-03 11:10:13.205517321 UTC , thread_cap_info = ("ThreadId
| | | | E  85", 3, False)}
| | | | E  
| E | | |  
| S | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | |  = 29 , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 14
| S | | |  , alphabet_size = 16 , total_length = 103} , self = 64 , parent = Nothing
| S | | |  , duration = 0.305732639000 , status = Success , start = 2025-09-03 11:10:12.925520524
| S | | |  UTC , finish = 2025-09-03 11:10:13.231253163 UTC , thread_cap_info = ("ThreadId
| S | | |  87", 3, False)}
| S | | |  
S | | | |  
E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 29
E | | | |  , num_strict_rules = 15 , num_top_rules = 15 , num_weak_rules = 14 , alphabet_size
E | | | |  = 16 , total_length = 103} , self = 71 , parent = Nothing , duration =
E | | | |  0.316491863000 , status = Except "AsyncCancelled" , start = 2025-09-03
E | | | |  11:10:12.949417626 UTC , finish = 2025-09-03 11:10:13.265909489 UTC , thread_cap_info
E | | | |  = ("ThreadId 89", 3, False)}
E | | | |  
| | | E |  
| | | S |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | S |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | S |  = Size { num_rules = 512 , num_strict_rules = 512 , num_top_rules = 0 ,
| | | S |  num_weak_rules = 0 , alphabet_size = 64 , total_length = 2944} , self =
| | | S |  57 , parent = Nothing , duration = 0.107799947000 , status = Success ,
| | | S |  start = 2025-09-03 11:10:13.06552331 UTC , finish = 2025-09-03 11:10:13.173323257
| | | S |  UTC , thread_cap_info = ("ThreadId 108", 0, False)}
| | | S |  
| | S | |  
| |   S |  
| |     E  
| S        
E          
CNF 1160 vars 4005 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1160, clauses: 4005, status: Satisfied, time: 0.034724349s
