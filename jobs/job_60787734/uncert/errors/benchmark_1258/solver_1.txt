last 3841 length 16328
CNF 3841 vars 16328 clauses
last 4575 length 20697
CNF 4575 vars 20697 clauses
last 548 length 2158
last 470 length 1819
CNF 548 vars 2158 clauses
last 503 length 1959
last 612 length 2434
CNF 503 vars 1959 clauses
CNF 470 vars 1819 clauses
CNF 612 vars 2434 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2210, clauses: 7896
last 2210 length 7896
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7213, clauses: 29771
CNF 2210 vars 7896 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2630, clauses: 9465
last 7213 length 29771
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29343
last 2630 length 9465
last 7086 length 29343
CNF 7213 vars 29771 clauses
CNF 2630 vars 9465 clauses
CNF 7086 vars 29343 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2210, clauses: 7896, status: Unsatisfied, time: 0.190757587s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7213, clauses: 29771, status: Satisfied, time: 0.14138658s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29343, status: Satisfied, time: 0.104935979s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4489, clauses: 17576
last 4489 length 17576
CNF 4489 vars 17576 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 409 length 1593
last 466 length 1824
CNF 466 vars 1824 clauses
last 596 length 2364
CNF 409 vars 1593 clauses
last 529 length 2071
CNF 596 vars 2364 clauses
CNF 529 vars 2071 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2419, clauses: 8680
last 2419 length 8680
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2102, clauses: 7431
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7038, clauses: 29163
CNF 2419 vars 8680 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6875, clauses: 28361
last 2102 length 7431
last 7038 length 29163
last 6875 length 28361
CNF 2102 vars 7431 clauses
CNF 7038 vars 29163 clauses
CNF 6875 vars 28361 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6875, clauses: 28361, status: Satisfied, time: 0.061170416s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 4 strict rules and 8 weak rules on 5 letters       EDG
SRS with 4 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 8 weak rules on 5 letters       EDG
SRS with 3 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 8 weak rules on 5 letters       weights
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b, b, c] {- Input 1 -}
  [a, c, b] -> [c, a, a] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a] -> [b, b, c] {- Input 1 -}
  [a, c, b] -> [c, a, a] {- Input 2 -}
  [a, c] -> [a] {- Input 3 -}
  [b, c] -> [b] {- Input 3 -}
  [c, c] -> [c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a] -> [c, b, b] {- Mirror (Input 1) -}
  [b, c, a] -> [a, a, c] {- Mirror (Input 2) -}
  [c, a] -> [a] {- Mirror (Input 3) -}
  [c, b] -> [b] {- Mirror (Input 3) -}
  [c, c] -> [c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#] |-> [c#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c, a] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, c, a] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c, a] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A  0A 1A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / -1A -   0A  \
        | 0A  -1A -1A |
        \ -   -   0A  / )
  ( c
  , Wk  / -1A 1A 1A \
        | -2A 0A -  |
        \ -   -  0A / )
  ( a#
  , Wk  / 0A 1A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( b#
  , Wk  / 0A -1A 0A \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c, a] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c, a] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A 0A 1A \
        | 0A 1A 1A |
        \ -  -  0A / )
  ( b
  , Wk  / -1A - 0A \
        | 0A  - -  |
        \ -   - 0A / )
  ( c
  , Wk  / 0A 1A -  \
        | -  0A -  |
        \ -  -  0A / )
  ( a#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
  ( b#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c, a] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(4/8,5)\Matrix{\ArcticBZ}{3}\EDG(3/8,5)\Matrix{\ArcticBZ}{3}(1/8,5)\Weight(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 3 , total_length = 12} , self = 44 , parent = Nothing
F        , duration = 0.263346799000 , status = Fail , start = 2025-09-03 11:24:52.968302245
F        UTC , finish = 2025-09-03 11:24:53.231649044 UTC , thread_cap_info = ("ThreadId
F        43", 0, False)}
F        
| F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F      = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F      = 180} , self = 41 , parent = Nothing , duration = 0.143861777000 , status
| F      = Fail , start = 2025-09-03 11:24:53.057432412 UTC , finish = 2025-09-03
| F      11:24:53.201294189 UTC , thread_cap_info = ("ThreadId 71", 2, False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 180} , self = 59 , parent = Nothing , duration = 0.162079570000 , status
| | F    = Fail , start = 2025-09-03 11:24:53.077434875 UTC , finish = 2025-09-03
| | F    11:24:53.239514445 UTC , thread_cap_info = ("ThreadId 73", 2, False)}
| | F    
| F |    
F   |    
    F    
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
F        alphabet_size = 5 , total_length = 44} , self = 72 , parent = Nothing ,
F        duration = 0.323956763000 , status = Fail , start = 2025-09-03 11:24:53.256523759
F        UTC , finish = 2025-09-03 11:24:53.580480522 UTC , thread_cap_info = ("ThreadId
F        102", 0, False)}
F        
| S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| S      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| S      = 5 , total_length = 44} , self = 68 , parent = Nothing , duration = 0.262771759000
| S      , status = Success , start = 2025-09-03 11:24:53.257435074 UTC , finish
| S      = 2025-09-03 11:24:53.520206833 UTC , thread_cap_info = ("ThreadId 103",
| S      0, False)}
| S      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | F    alphabet_size = 4 , total_length = 37} , self = 67 , parent = Nothing ,
| | F    duration = 0.242093232000 , status = Fail , start = 2025-09-03 11:24:53.277446108
| | F    UTC , finish = 2025-09-03 11:24:53.51953934 UTC , thread_cap_info = ("ThreadId
| | F    104", 0, False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | S  = 4 , total_length = 37} , self = 70 , parent = Nothing , duration = 0.202036514000
| | | S  , status = Success , start = 2025-09-03 11:24:53.351474431 UTC , finish
| | | S  = 2025-09-03 11:24:53.553510945 UTC , thread_cap_info = ("ThreadId 107",
| | | S  0, False)}
| | | S  
| | F |  
| S   |  
|     S  
F        
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
F        alphabet_size = 5 , total_length = 41} , self = 88 , parent = Nothing ,
F        duration = 0.153246996000 , status = Fail , start = 2025-09-03 11:24:53.697540635
F        UTC , finish = 2025-09-03 11:24:53.850787631 UTC , thread_cap_info = ("ThreadId
F        133", 0, False)}
F        
| S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| S      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| S      = 5 , total_length = 41} , self = 86 , parent = Nothing , duration = 0.135790224000
| S      , status = Success , start = 2025-09-03 11:24:53.714717675 UTC , finish
| S      = 2025-09-03 11:24:53.850507899 UTC , thread_cap_info = ("ThreadId 134",
| S      0, False)}
| S      
| S      
F        
