last 7354 length 51954
last 9368 length 66274
CNF 7354 vars 51954 clauses
CNF 9368 vars 66274 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       Drop
SRS with 1 rules on 2 letters       mirror
SRS with 1 rules on 2 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 91 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, b, a, a, b, a, b, a, b, a] -> [ a , a , b , a , b , a , b , a , a , b , b , a , a , b ] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [a, b, b, a, a, b, a, b, a, b, a] -> [ a , b , a , b , a , b , a , a , b , b , a , a , b ] {- Dropped 1 0 (Input 0) -}
    reason
      mirror
       property Termination
    has value Just True
    for SRS
      [a, b, a, b, a, b, a, a, b, b, a] -> [ b , a , a , b , b , a , a , b , a , b , a , b , a ] {- Mirror (Dropped 1 0 (Input 0)) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 91 states

   property Termination
has value Just True
for SRS
  [a, b, b, a, a, b, a, b, a, b, a] -> [ a , b , a , b , a , b , a , a , b , b , a , a , b ] {- Dropped 1 0 (Input 0) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a, b, a, b, a, a, b, b, a] -> [ b , a , a , b , b , a , a , b , a , b , a , b , a ] {- Mirror (Dropped 1 0 (Input 0)) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 91 states

**************************************************
skeleton: (1,2)\Drop{1}{0}\Mirror(1,2)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 5
  max duration 0.443394275000
  min duration 0.127889920000
  total durat. 1.462861693000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 4
  max duration 0.640175916000
  min duration 0.192660537000
  total durat. 1.672784491000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 4
  max duration 0.520010843000
  min duration 0.180154792000
  total durat. 1.439811205000
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 4
  max duration 0.660012820000
  min duration 0.360009065000
  total durat. 2.000018827000
**************************************************
F                            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                            = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
F                            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                            = 26} , self = 52 , parent = Nothing , duration = 0.284675403000 , status
F                            = Fail , start = 2025-09-03 12:15:46.936448703 UTC , finish = 2025-09-03
F                            12:15:47.221124106 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                            
| F                          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F                          = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                          = 112} , self = 87 , parent = Nothing , duration = 0.809596023000 , status
| F                          = Fail , start = 2025-09-03 12:15:46.938521635 UTC , finish = 2025-09-03
| F                          12:15:47.748117658 UTC , thread_cap_info = ("ThreadId 50", 2, False)}
| F                          
| | F                        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F                        = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F                        = 112} , self = 82 , parent = Nothing , duration = 0.698082801000 , status
| | F                        = Fail , start = 2025-09-03 12:15:46.946087176 UTC , finish = 2025-09-03
| | F                        12:15:47.644169977 UTC , thread_cap_info = ("ThreadId 52", 2, False)}
| | F                        
| | | E                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | E                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | E                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | E                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | E                      = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E                      = 24} , self = 76 , parent = Nothing , duration = 0.399998162000 , status
| | | E                      = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.026082362 UTC ,
| | | E                      finish = 2025-09-03 12:15:47.426080524 UTC , thread_cap_info = ("ThreadId
| | | E                      72", 1, False)}
| | | E                      
| | | | E                    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | E                    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | E                    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | E                    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | E                    = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | E                    = 22} , self = 81 , parent = Nothing , duration = 0.579998780000 , status
| | | | E                    = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.046094675 UTC ,
| | | | E                    finish = 2025-09-03 12:15:47.626093455 UTC , thread_cap_info = ("ThreadId
| | | | E                    81", 1, False)}
| | | | E                    
| | | | | F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F                  = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | F                  = 0 , alphabet_size = 4 , total_length = 112} , self = 47 , parent = Nothing
| | | | | F                  , duration = 0.127889920000 , status = Fail , start = 2025-09-03 12:15:47.046096615
| | | | | F                  UTC , finish = 2025-09-03 12:15:47.173986535 UTC , thread_cap_info = ("ThreadId
| | | | | F                  93", 3, False)}
| | | | | F                  
| | | | | | E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | E                = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | E                = 20} , self = 86 , parent = Nothing , duration = 0.660012820000 , status
| | | | | | E                = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.066080502 UTC ,
| | | | | | E                finish = 2025-09-03 12:15:47.726093322 UTC , thread_cap_info = ("ThreadId
| | | | | | E                82", 1, False)}
| | | | | | E                
| | | | | | | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F              = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | | | F              = 0 , alphabet_size = 4 , total_length = 112} , self = 62 , parent = Nothing
| | | | | | | F              , duration = 0.341419494000 , status = Fail , start = 2025-09-03 12:15:47.066086597
| | | | | | | F              UTC , finish = 2025-09-03 12:15:47.407506091 UTC , thread_cap_info = ("ThreadId
| | | | | | | F              96", 3, False)}
| | | | | | | F              
| | | | | | | | E            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | E            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | E            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | E            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | E            = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | E            = 0 , alphabet_size = 2 , total_length = 24} , self = 55 , parent = Nothing
| | | | | | | | E            , duration = 0.178822314000 , status = Except "AsyncCancelled" , start
| | | | | | | | E            = 2025-09-03 12:15:47.107387112 UTC , finish = 2025-09-03 12:15:47.286209426
| | | | | | | | E            UTC , thread_cap_info = ("ThreadId 99", 1, False)}
| | | | | | | | E            
| | | | | | | | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | F          = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | F          = 0 , alphabet_size = 2 , total_length = 20} , self = 78 , parent = Nothing
| | | | | | | | | F          , duration = 0.443394275000 , status = Fail , start = 2025-09-03 12:15:47.130641861
| | | | | | | | | F          UTC , finish = 2025-09-03 12:15:47.574036136 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | F          108", 1, False)}
| | | | | | | | | F          
| | | | | F | | | |          
F | | | |   | | | |          
E | | | |   | | | |          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E | | | |   | | | |          , closure = Forward\n , start_strict_only = True\n , max_closure_length
E | | | |   | | | |          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E | | | |   | | | |          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E | | | |   | | | |          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E | | | |   | | | |          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E | | | |   | | | |          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E | | | |   | | | |          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E | | | |   | | | |          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E | | | |   | | | |          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E | | | |   | | | |          = 24} , self = 83 , parent = Nothing , duration = 0.439642544000 , status
E | | | |   | | | |          = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.24695537 UTC ,
E | | | |   | | | |          finish = 2025-09-03 12:15:47.686597914 UTC , thread_cap_info = ("ThreadId
E | | | |   | | | |          122", 1, False)}
E | | | |   | | | |          
| | | | | E | | | |          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E | | | |          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E | | | |          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | E | | | |          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | E | | | |          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | E | | | |          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | E | | | |          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | E | | | |          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E | | | |          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | E | | | |          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | E | | | |          = 24} , self = 92 , parent = Nothing , duration = 0.640175916000 , status
| | | | | E | | | |          = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.266080269 UTC ,
| | | | | E | | | |          finish = 2025-09-03 12:15:47.906256185 UTC , thread_cap_info = ("ThreadId
| | | | | E | | | |          123", 1, False)}
| | | | | E | | | |          
| | | | | | | | E |          
| | | | | | | | F |          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | F |          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | F |          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | | F |          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | | F |          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | | F |          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | | F |          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | | F |          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | F |          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | F |          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | F |          = 22} , self = 77 , parent = Nothing , duration = 0.178834511000 , status
| | | | | | | | F |          = Fail , start = 2025-09-03 12:15:47.307266606 UTC , finish = 2025-09-03
| | | | | | | | F |          12:15:47.486101117 UTC , thread_cap_info = ("ThreadId 125", 1, False)}
| | | | | | | | F |          
| | | | | | | | | | E        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | E        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | E        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | E        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | E        = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | E        = 0 , alphabet_size = 2 , total_length = 22} , self = 85 , parent = Nothing
| | | | | | | | | | E        , duration = 0.418810511000 , status = Except "AsyncCancelled" , start
| | | | | | | | | | E        = 2025-09-03 12:15:47.307276189 UTC , finish = 2025-09-03 12:15:47.7260867
| | | | | | | | | | E        UTC , thread_cap_info = ("ThreadId 126", 1, False)}
| | | | | | | | | | E        
| | | | | | | | | | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | E      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | E      = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | E      = 20} , self = 91 , parent = Nothing , duration = 0.520010843000 , status
| | | | | | | | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.346082358 UTC ,
| | | | | | | | | | | E      finish = 2025-09-03 12:15:47.866093201 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | E      130", 1, False)}
| | | | | | | | | | | E      
| | | | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | E    = 20} , self = 96 , parent = Nothing , duration = 0.619956861000 , status
| | | | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.366146704 UTC ,
| | | | | | | | | | | | E    finish = 2025-09-03 12:15:47.986103565 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | E    131", 1, False)}
| | | | | | | | | | | | E    
| | | | | | | | | | | | | E  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | | | | | | | | E  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | | | | | | | | E  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | | | | | | | | E  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | | | | | | | | E  = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | E  = 26} , self = 88 , parent = Nothing , duration = 0.360009065000 , status
| | | | | | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.406088225 UTC ,
| | | | | | | | | | | | | E  finish = 2025-09-03 12:15:47.76609729 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | E  132", 1, False)}
| | | | | | | | | | | | | E  
| | | | | | | F | | | | | |  
| | | E | | |   | | | | | |  
| | | E | | |   | | | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E | | |   | | | | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E | | |   | | | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E | | |   | | | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E | | |   | | | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E | | |   | | | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E | | |   | | | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E | | |   | | | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E | | |   | | | | | |  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E | | |   | | | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E | | |   | | | | | |  = 22} , self = 89 , parent = Nothing , duration = 0.300003026000 , status
| | | E | | |   | | | | | |  = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.466105557 UTC ,
| | | E | | |   | | | | | |  finish = 2025-09-03 12:15:47.766108583 UTC , thread_cap_info = ("ThreadId
| | | E | | |   | | | | | |  142", 1, False)}
| | | E | | |   | | | | | |  
| | | | | | |   F | | | | |  
| | | | | | |     F | | | |  
| | | | | | | F     | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F     | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F     | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F     | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F     | | | |  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F     | | | |  = 0 , alphabet_size = 2 , total_length = 26} , self = 90 , parent = Nothing
| | | | | | | F     | | | |  , duration = 0.287076301000 , status = Fail , start = 2025-09-03 12:15:47.574108412
| | | | | | | F     | | | |  UTC , finish = 2025-09-03 12:15:47.861184713 UTC , thread_cap_info = ("ThreadId
| | | | | | | F     | | | |  147", 1, False)}
| | | | | | | F     | | | |  
| | | | E | | |     | | | |  
| | F |   | | |     | | | |  
E |   |   | | |     | | | |  
E |   |   | | |     | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E |   |   | | |     | | | |  , closure = Backward\n , start_strict_only = True\n , max_closure_length
E |   |   | | |     | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E |   |   | | |     | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E |   |   | | |     | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E |   |   | | |     | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E |   |   | | |     | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E |   |   | | |     | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E |   |   | | |     | | | |  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E |   |   | | |     | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E |   |   | | |     | | | |  = 22} , self = 93 , parent = Nothing , duration = 0.219991177000 , status
E |   |   | | |     | | | |  = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.706112688 UTC ,
E |   |   | | |     | | | |  finish = 2025-09-03 12:15:47.926103865 UTC , thread_cap_info = ("ThreadId
E |   |   | | |     | | | |  172", 1, False)}
E |   |   | | |     | | | |  
| | F |   | | |     | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F |   | | |     | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F |   | | |     | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F |   | | |     | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F |   | | |     | | | |  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | F |   | | |     | | | |  = 0 , alphabet_size = 2 , total_length = 26} , self = 95 , parent = Nothing
| | F |   | | |     | | | |  , duration = 0.263081703000 , status = Fail , start = 2025-09-03 12:15:47.706122072
| | F |   | | |     | | | |  UTC , finish = 2025-09-03 12:15:47.969203775 UTC , thread_cap_info = ("ThreadId
| | F |   | | |     | | | |  169", 2, False)}
| | F |   | | |     | | | |  
| | | |   | | |     E | | |  
| | | |   | E |       | | |  
| F | |   |   |       | | |  
|   | |   |   |       | | E  
| E | |   |   |       | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | |   |   |       | |    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | |   |   |       | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | |   |   |       | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | |   |   |       | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | |   |   |       | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | |   |   |       | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | |   |   |       | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | |   |   |       | |    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E | |   |   |       | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E | |   |   |       | |    = 26} , self = 94 , parent = Nothing , duration = 0.180154792000 , status
| E | |   |   |       | |    = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.766105228 UTC ,
| E | |   |   |       | |    finish = 2025-09-03 12:15:47.94626002 UTC , thread_cap_info = ("ThreadId
| E | |   |   |       | |    174", 2, False)}
| E | |   |   |       | |    
| | | E   |   |       | |    
| | | E   |   |       | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E   |   |       | |    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | E   |   |       | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E   |   |       | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E   |   |       | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E   |   |       | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E   |   |       | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E   |   |       | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E   |   |       | |    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E   |   |       | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E   |   |       | |    = 26} , self = 97 , parent = Nothing , duration = 0.192660537000 , status
| | | E   |   |       | |    = Except "AsyncCancelled" , start = 2025-09-03 12:15:47.833427952 UTC ,
| | | E   |   |       | |    finish = 2025-09-03 12:15:48.026088489 UTC , thread_cap_info = ("ThreadId
| | | E   |   |       | |    175", 2, False)}
| | | E   |   |       | |    
| | | |   |   F       | |    
| | | |   |           E |    
| | | |   E             |    
E | | |                 |    
  E | |                 |    
    F |                 |    
      |                 E    
      E                      
