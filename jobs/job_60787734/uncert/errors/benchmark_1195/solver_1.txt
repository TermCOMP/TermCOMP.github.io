last 518 length 2156
last 481 length 1936
CNF 518 vars 2156 clauses
CNF 481 vars 1936 clauses
last 402 length 1561
last 407 length 1616
CNF 402 vars 1561 clauses
CNF 407 vars 1616 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8406
last 2354 length 8406
last 4614 length 23963
CNF 2354 vars 8406 clauses
CNF 4614 vars 23963 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2260, clauses: 7996
last 3956 length 18227
last 2260 length 7996
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6501, clauses: 26795
last 6501 length 26795
CNF 3956 vars 18227 clauses
CNF 2260 vars 7996 clauses
CNF 6501 vars 26795 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8406, status: Unsatisfied, time: 0.143444457s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6459, clauses: 26621
last 6459 length 26621
CNF 6459 vars 26621 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2260, clauses: 7996, status: Unsatisfied, time: 0.137581995s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4104, clauses: 16115
last 4104 length 16115
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4041, clauses: 15831
CNF 4104 vars 16115 clauses
last 4041 length 15831
CNF 4041 vars 15831 clauses
[Info] pool sizes (success) 8207 seen 4022 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [a, b, b, b, b]
to
  [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, b, a, b, b, b, b]
via 74 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, c, a, a] {- Input 1 -}
  [c, c] -> [c, b, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [a, b, b, b, b], via = [(Step   { rule = 1, position = 0}, [b, c, a, a, b, b, b]), (Step   { rule = 1, position = 3}, [b, c, a, b, c, a, a, b, b]), (Step   { rule = 1, position = 2}, [b, c, b, c, a, a, c, a, a, b, b]), (Step   { rule = 0, position = 4}, [b, c, b, c, a, c, a, a, b, b]), (Step   { rule = 0, position = 4}, [b, c, b, c, c, a, a, b, b]), (Step   { rule = 2, position = 3}, [b, c, b, c, b, a, a, a, b, b]), (Step   { rule = 1, position = 7}, [b, c, b, c, b, a, a, b, c, a, a, b]), (Step   { rule = 1, position = 6}, [b, c, b, c, b, a, b, c, a, a, c, a, a, b]), (Step   { rule = 0, position = 8}, [b, c, b, c, b, a, b, c, a, c, a, a, b]), (Step   { rule = 0, position = 8}, [b, c, b, c, b, a, b, c, c, a, a, b]), (Step   { rule = 1, position = 5}, [b, c, b, c, b, b, c, a, a, c, c, a, a, b]), (Step   { rule = 0, position = 7}, [b, c, b, c, b, b, c, a, c, c, a, a, b]), (Step   { rule = 0, position = 7}, [b, c, b, c, b, b, c, c, c, a, a, b]), (Step   { rule = 1, position = 10}, [b, c, b, c, b, b, c, c, c, a, b, c, a, a]), (Step   { rule = 0, position = 12}, [b, c, b, c, b, b, c, c, c, a, b, c, a]), (Step   { rule = 0, position = 12}, [b, c, b, c, b, b, c, c, c, a, b, c]), (Step   { rule = 1, position = 9}, [b, c, b, c, b, b, c, c, c, b, c, a, a, c]), (Step   { rule = 0, position = 11}, [b, c, b, c, b, b, c, c, c, b, c, a, c]), (Step   { rule = 0, position = 11}, [b, c, b, c, b, b, c, c, c, b, c, c]), (Step   { rule = 2, position = 10}, [b, c, b, c, b, b, c, c, c, b, c, b, a]), (Step   { rule = 0, position = 12}, [b, c, b, c, b, b, c, c, c, b, c, b]), (Step   { rule = 2, position = 7}, [b, c, b, c, b, b, c, c, b, a, b, c, b]), (Step   { rule = 1, position = 9}, [b, c, b, c, b, b, c, c, b, b, c, a, a, c, b]), (Step   { rule = 0, position = 11}, [b, c, b, c, b, b, c, c, b, b, c, a, c, b]), (Step   { rule = 0, position = 11}, [b, c, b, c, b, b, c, c, b, b, c, c, b]), (Step   { rule = 2, position = 10}, [b, c, b, c, b, b, c, c, b, b, c, b, a, b]), (Step   { rule = 1, position = 12}, [b, c, b, c, b, b, c, c, b, b, c, b, b, c, a, a]), (Step   { rule = 0, position = 14}, [b, c, b, c, b, b, c, c, b, b, c, b, b, c, a]), (Step   { rule = 0, position = 14}, [b, c, b, c, b, b, c, c, b, b, c, b, b, c]), (Step   { rule = 2, position = 6}, [b, c, b, c, b, b, c, b, a, b, b, c, b, b, c]), (Step   { rule = 1, position = 8}, [b, c, b, c, b, b, c, b, b, c, a, a, b, c, b, b, c]), (Step   { rule = 1, position = 11}, [b, c, b, c, b, b, c, b, b, c, a, b, c, a, a, c, b, b, c]), (Step   { rule = 0, position = 13}, [b, c, b, c, b, b, c, b, b, c, a, b, c, a, c, b, b, c]), (Step   { rule = 0, position = 13}, [b, c, b, c, b, b, c, b, b, c, a, b, c, c, b, b, c]), (Step   { rule = 1, position = 10}, [b, c, b, c, b, b, c, b, b, c, b, c, a, a, c, c, b, b, c]), (Step   { rule = 0, position = 12}, [b, c, b, c, b, b, c, b, b, c, b, c, a, c, c, b, b, c]), (Step   { rule = 0, position = 12}, [b, c, b, c, b, b, c, b, b, c, b, c, c, c, b, b, c]), (Step   { rule = 2, position = 12}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, a, b, b, c]), (Step   { rule = 1, position = 14}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, a, b, c]), (Step   { rule = 1, position = 17}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, b, c, a, a, c]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, b, c, a, c]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, b, c, c]), (Step   { rule = 2, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, b, c, b, a]), (Step   { rule = 0, position = 20}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, a, b, c, b]), (Step   { rule = 1, position = 16}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, b, c, a, a, c, b]), (Step   { rule = 0, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, b, c, a, c, b]), (Step   { rule = 0, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, b, c, c, b]), (Step   { rule = 2, position = 17}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, b, c, b, a, b]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, b, c, b, b, c, b, c, c, b, b, c, b, c, b, b]), (Step   { rule = 2, position = 11}, [b, c, b, c, b, b, c, b, b, c, b, c, b, a, b, b, c, b, c, b, b]), (Step   { rule = 1, position = 13}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, a, a, b, c, b, c, b, b]), (Step   { rule = 1, position = 16}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, a, b, c, a, a, c, b, c, b, b]), (Step   { rule = 0, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, a, b, c, a, c, b, c, b, b]), (Step   { rule = 0, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, a, b, c, c, b, c, b, b]), (Step   { rule = 1, position = 15}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, a, a, c, c, b, c, b, b]), (Step   { rule = 0, position = 17}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, a, c, c, b, c, b, b]), (Step   { rule = 0, position = 17}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, c, b, c, b, b]), (Step   { rule = 2, position = 17}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, a, b, c, b, b]), (Step   { rule = 1, position = 19}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, c, a, a, c, b, b]), (Step   { rule = 0, position = 21}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, c, a, c, b, b]), (Step   { rule = 0, position = 21}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, c, c, b, b]), (Step   { rule = 2, position = 20}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, c, b, a, b, b]), (Step   { rule = 0, position = 22}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, c, b, b, b]), (Step   { rule = 2, position = 16}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 18}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, a, b, c, b, b, b]), (Step   { rule = 1, position = 21}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, b, c, a, a, c, b, b, b]), (Step   { rule = 0, position = 23}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, b, c, a, c, b, b, b]), (Step   { rule = 0, position = 23}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, b, c, c, b, b, b]), (Step   { rule = 2, position = 22}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, b, c, b, a, b, b, b]), (Step   { rule = 0, position = 24}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, a, b, c, b, b, b, b]), (Step   { rule = 1, position = 20}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, a, a, c, b, b, b, b]), (Step   { rule = 0, position = 22}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, a, c, b, b, b, b]), (Step   { rule = 0, position = 22}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, c, b, b, b, b]), (Step   { rule = 2, position = 21}, [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, b, a, b, b, b, b])], to = [b, c, b, c, b, b, c, b, b, c, b, c, b, b, c, b, c, b, b, c, b, c, b, a, b, b, b, b]}

**************************************************
skeleton: (3,3)\Loop{74}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 12} , self = 57 , parent = Nothing , duration = 0.112742024000 , status
F            = Fail , start = 2025-09-03 11:11:36.246100193 UTC , finish = 2025-09-03
F            11:11:36.358842217 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F          = 12} , self = 65 , parent = Nothing , duration = 0.232695676000 , status
| F          = Fail , start = 2025-09-03 11:11:36.246129619 UTC , finish = 2025-09-03
| F          11:11:36.478825295 UTC , thread_cap_info = ("ThreadId 36", 3, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 162} , self = 66 , parent = Nothing , duration = 0.261878333000 , status
| | F        = Fail , start = 2025-09-03 11:11:36.254509398 UTC , finish = 2025-09-03
| | F        11:11:36.516387731 UTC , thread_cap_info = ("ThreadId 72", 2, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 162} , self = 64 , parent = Nothing , duration = 0.149769373000 , status
| | | F      = Fail , start = 2025-09-03 11:11:36.260985979 UTC , finish = 2025-09-03
| | | F      11:11:36.410755352 UTC , thread_cap_info = ("ThreadId 74", 2, False)}
| | | F      
| | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F    = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | F    = 0 , alphabet_size = 9 , total_length = 162} , self = 69 , parent = Nothing
| | | | F    , duration = 0.466884065000 , status = Fail , start = 2025-09-03 11:11:36.260988884
| | | | F    UTC , finish = 2025-09-03 11:11:36.727872949 UTC , thread_cap_info = ("ThreadId
| | | | F    62", 1, False)}
| | | | F    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | F  = 5 , total_length = 35} , self = 67 , parent = Nothing , duration = 0.226159506000
| | | | | F  , status = Fail , start = 2025-09-03 11:11:36.301972936 UTC , finish =
| | | | | F  2025-09-03 11:11:36.528132442 UTC , thread_cap_info = ("ThreadId 96", 0,
| | | | | F  False)}
| | | | | F  
F | | | | |  
F | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | | | |  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F | | | | |  = 5 , total_length = 31} , self = 68 , parent = Nothing , duration = 0.205326247000
F | | | | |  , status = Fail , start = 2025-09-03 11:11:36.361102842 UTC , finish =
F | | | | |  2025-09-03 11:11:36.566429089 UTC , thread_cap_info = ("ThreadId 103",
F | | | | |  0, False)}
F | | | | |  
| | | F | |  
| F |   | |  
| S |   | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| S |   | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| S |   | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| S |   | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| S |   | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| S |   | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| S |   | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| S |   | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| S |   | |  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| S |   | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| S |   | |  = 12} , self = 70 , parent = Nothing , duration = 0.247027768000 , status
| S |   | |  = Success , start = 2025-09-03 11:11:36.481979507 UTC , finish = 2025-09-03
| S |   | |  11:11:36.729007275 UTC , thread_cap_info = ("ThreadId 110", 3, False)}
| S |   | |  
| | F   | |  
| |     | F  
F |     |    
  |     F    
  S          
