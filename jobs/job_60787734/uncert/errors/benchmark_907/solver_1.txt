last 805 length 3438
last 652 length 2661
CNF 805 vars 3438 clauses
last 793 length 3206
CNF 652 vars 2661 clauses
last 1698 length 7428
last 981 length 4009
CNF 793 vars 3206 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2584, clauses: 9883
last 1763 length 7436
CNF 1698 vars 7428 clauses
CNF 981 vars 4009 clauses
last 2584 length 9883
CNF 1763 vars 7436 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2489, clauses: 9351
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6658, clauses: 27735
CNF 2584 vars 9883 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6453, clauses: 26818
last 2489 length 9351
last 6658 length 27735
last 6453 length 26818
CNF 2489 vars 9351 clauses
CNF 6658 vars 27735 clauses
CNF 6453 vars 26818 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2584, clauses: 9883, status: Satisfied, time: 0.173013636s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6453, clauses: 26818, status: Satisfied, time: 0.048833807s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2489, clauses: 9351, status: Satisfied, time: 0.043296805s
last 612 length 2526
last 616 length 2448
CNF 612 vars 2526 clauses
last 823 length 3286
CNF 823 vars 3286 clauses
CNF 616 vars 2448 clauses
last 670 length 2730
CNF 670 vars 2730 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2278, clauses: 8440
last 2278 length 8440
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2280, clauses: 8675
last 2280 length 8675
CNF 2278 vars 8440 clauses
CNF 2280 vars 8675 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5532, clauses: 22927
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2278, clauses: 8440, status: Unsatisfied, time: 0.179729106s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6320, clauses: 26319
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2280, clauses: 8675, status: Satisfied, time: 0.180338442s
last 5532 length 22927
last 6320 length 26319
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3916, clauses: 16115
last 474 length 1951
last 606 length 2531
last 3916 length 16115
CNF 474 vars 1951 clauses
CNF 606 vars 2531 clauses
CNF 6320 vars 26319 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1414, clauses: 5074
last 1414 length 5074
CNF 3916 vars 16115 clauses
CNF 1414 vars 5074 clauses
last 4631 length 19083
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1414, clauses: 5074, status: Satisfied, time: 0.056242713s
CNF 4631 vars 19083 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       EDG
SRS with 7 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 6 strict rules and 2 weak rules on 4 letters       EDG
SRS with 6 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 2 weak rules on 4 letters       weights
SRS with 1 strict rules and 2 weak rules on 3 letters       EDG
SRS with 1 strict rules and 2 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, b] {- Input 0 -}
  [b, b] -> [b, a, a, a] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 2) (Input 0) -}
  [a#, a, b, a] |-> [b#, b] {- DP (Top 1) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [b#, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [b#, a, a, a] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 2) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, a] |-> [b#, b] {- DP (Top 1) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [b#, a, a, a] {- DP (Top 0) (Input 1) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 2) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, a] |-> [b#, b] {- DP (Top 1) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 1) (Input 1) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 2) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, a] |-> [b#, b] {- DP (Top 1) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 1) (Input 1) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 18A 18A 18A - \
        | 18A 18A 18A - |
        | 18A 18A 18A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 21A 21A 21A - \
        | 21A 21A 21A - |
        | 21A 21A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 2) (Input 0) -}
  [a#, a, b, a] |-> [b#, b] {- DP (Top 1) (Input 0) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, b] {- DP (Top 0) (Input 0) -}
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 23A 24A 24A - \
        | 23A 24A 24A - |
        | 23A 24A 24A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [b, a, a, a] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Deepee\EDG(7/2,4)\Matrix{\Arctic}{3}\EDG(6/2,4)\Matrix{\Arctic}{3}(3/2,4)\Weight\EDG(1/2,3)\Matrix{\Arctic}{3}(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 4 , total_length = 68} , self = 87 , parent = Nothing
F              , duration = 0.507883431000 , status = Fail , start = 2025-09-03 13:28:04.273436655
F              UTC , finish = 2025-09-03 13:28:04.781320086 UTC , thread_cap_info = ("ThreadId
F              54", 3, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F            = 7 , num_top_rules = 7 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F            = 49} , self = 66 , parent = Nothing , duration = 0.196384572000 , status
| F            = Fail , start = 2025-09-03 13:28:04.374563981 UTC , finish = 2025-09-03
| F            13:28:04.570948553 UTC , thread_cap_info = ("ThreadId 93", 0, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F          = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F          = 68} , self = 67 , parent = Nothing , duration = 0.200676926000 , status
| | F          = Fail , start = 2025-09-03 13:28:04.383686382 UTC , finish = 2025-09-03
| | F          13:28:04.584363308 UTC , thread_cap_info = ("ThreadId 88", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F        = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F        = 68} , self = 68 , parent = Nothing , duration = 0.222018190000 , status
| | | F        = Fail , start = 2025-09-03 13:28:04.398473642 UTC , finish = 2025-09-03
| | | F        13:28:04.620491832 UTC , thread_cap_info = ("ThreadId 99", 1, False)}
| | | F        
| | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S      = 9 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 2 , alphabet_size
| | | | S      = 4 , total_length = 49} , self = 69 , parent = Nothing , duration = 0.274849340000
| | | | S      , status = Success , start = 2025-09-03 13:28:04.405091321 UTC , finish
| | | | S      = 2025-09-03 13:28:04.679940661 UTC , thread_cap_info = ("ThreadId 101",
| | | | S      0, False)}
| | | | S      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 7 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | | | S    = 4 , total_length = 41} , self = 71 , parent = Nothing , duration = 0.215364909000
| | | | | S    , status = Success , start = 2025-09-03 13:28:04.466147646 UTC , finish
| | | | | S    = 2025-09-03 13:28:04.681512555 UTC , thread_cap_info = ("ThreadId 106",
| | | | | S    0, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | | | | E  = 4 , total_length = 41} , self = 76 , parent = Nothing , duration = 0.202788991000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:28:04.481052013
| | | | | | E  UTC , finish = 2025-09-03 13:28:04.683841004 UTC , thread_cap_info = ("ThreadId
| | | | | | E  107", 0, False)}
| | | | | | E  
| F | | | | |  
| S | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| S | | | | |  , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 2 , alphabet_size
| S | | | | |  = 4 , total_length = 49} , self = 72 , parent = Nothing , duration = 0.110862652000
| S | | | | |  , status = Success , start = 2025-09-03 13:28:04.57102913 UTC , finish
| S | | | | |  = 2025-09-03 13:28:04.681891782 UTC , thread_cap_info = ("ThreadId 108",
| S | | | | |  0, False)}
| S | | | | |  
| | F | | | |  
| |   F | | |  
| |     S | |  
| |       S |  
| S         |  
|           E  
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F            = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F            = 35} , self = 100 , parent = Nothing , duration = 0.126334729000 , status
| F            = Fail , start = 2025-09-03 13:28:04.684239886 UTC , finish = 2025-09-03
| F            13:28:04.810574615 UTC , thread_cap_info = ("ThreadId 125", 0, False)}
| F            
| | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F          = 6 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | F          = 4 , total_length = 35} , self = 102 , parent = Nothing , duration = 0.243536313000
| | F          , status = Fail , start = 2025-09-03 13:28:04.750396983 UTC , finish =
| | F          2025-09-03 13:28:04.993933296 UTC , thread_cap_info = ("ThreadId 132",
| | F          0, False)}
| | F          
| | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S        = 8 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
| | | S        = 4 , total_length = 43} , self = 103 , parent = Nothing , duration = 0.233340502000
| | | S        , status = Success , start = 2025-09-03 13:28:04.760997657 UTC , finish
| | | S        = 2025-09-03 13:28:04.994338159 UTC , thread_cap_info = ("ThreadId 133",
| | | S        0, False)}
| | | S        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E      , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
| | | | E      = 4 , total_length = 43} , self = 105 , parent = Nothing , duration = 0.240001343000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 13:28:04.781083461
| | | | E      UTC , finish = 2025-09-03 13:28:05.021084804 UTC , thread_cap_info = ("ThreadId
| | | | E      134", 0, False)}
| | | | E      
F | | | |      
  F | | |      
    F | |      
      S |      
        E      
