last 723 length 3019
last 762 length 3168
CNF 723 vars 3019 clauses
last 987 length 4441
CNF 987 vars 4441 clauses
CNF 762 vars 3168 clauses
last 808 length 3376
CNF 808 vars 3376 clauses
last 4622 length 24260
CNF 4622 vars 24260 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2726, clauses: 9876
last 2726 length 9876
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2540, clauses: 9231
CNF 2726 vars 9876 clauses
last 6036 length 37304
last 2540 length 9231
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8340, clauses: 34671
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9214, clauses: 38383
CNF 6036 vars 37304 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2726, clauses: 9876, status: Satisfied, time: 0.174251476s
last 8340 length 34671
CNF 2540 vars 9231 clauses
last 9214 length 38383
CNF 8340 vars 34671 clauses
CNF 9214 vars 38383 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2540, clauses: 9231, status: Satisfied, time: 0.193494453s
last 664 length 2808
CNF 664 vars 2808 clauses
last 731 length 3060
CNF 731 vars 3060 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2432, clauses: 8766
last 2432 length 8766
CNF 2432 vars 8766 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2432, clauses: 8766, status: Unsatisfied, time: 0.091244712s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8292, clauses: 34491
last 8292 length 34491
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5230, clauses: 20742

CNF 8292 vars 34491 clauses
last 5230 length 20742
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 10 rules on 3 letters       mirror
SRS with 10 rules on 3 letters       DP
SRS with 6 strict rules and 10 weak rules on 6 letters       weights
SRS with 2 strict rules and 10 weak rules on 4 letters       EDG
SRS with 2 strict rules and 10 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 10 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c] -> [c, b, a, a, c, b] {- Input 0 -}
  [a] -> [] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, b, a] -> [b, c, a, a, b, c] {- Mirror (Input 0) -}
  [a] -> [] {- Mirror (Input 1) -}
  [b] -> [] {- Mirror (Input 2) -}
  [c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [c, b, a] -> [b, c, a, a, b, c] {- Mirror (Input 0) -}
  [a, a] -> [a] {- Mirror (Input 1) -}
  [b, a] -> [b] {- Mirror (Input 1) -}
  [c, a] -> [c] {- Mirror (Input 1) -}
  [a, b] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [c, b] -> [c] {- Mirror (Input 2) -}
  [a, c] -> [a] {- Mirror (Input 3) -}
  [b, c] -> [b] {- Mirror (Input 3) -}
  [c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, c] -> [c, b, a, a, c, b] {- Input 0 -}
  [a, a] -> [a] {- Input 1 -}
  [a, b] -> [b] {- Input 1 -}
  [a, c] -> [c] {- Input 1 -}
  [b, a] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [b, c] -> [c] {- Input 2 -}
  [c, a] -> [a] {- Input 3 -}
  [c, b] -> [b] {- Input 3 -}
  [c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, b, a, a, c, b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b, c] |-> [a#, a, c, b] {- DP (Top 2) (Input 0) -}
  [a#, b, c] |-> [a#, c, b] {- DP (Top 3) (Input 0) -}
  [a#, b, c] |-> [b#] {- DP (Top 5) (Input 0) -}
  [a#, b, c] |-> [b#, a, a, c, b] {- DP (Top 1) (Input 0) -}
  [a#, b, c] |-> [c#, b] {- DP (Top 4) (Input 0) -}
  [a#, b, c] |-> [c#, b, a, a, c, b] {- DP (Top 0) (Input 0) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, b, a, a, c, b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b, c] |-> [a#, a, c, b] {- DP (Top 2) (Input 0) -}
  [a#, b, c] |-> [a#, c, b] {- DP (Top 3) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, c] |-> [a#, a, c, b] {- DP (Top 2) (Input 0) -}
  [a#, b, c] |-> [a#, c, b] {- DP (Top 3) (Input 0) -}
  [a, b, c] ->= [c, b, a, a, c, b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 11A 13A 13A - \
        | 11A 13A 13A - |
        | 11A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, b, c] ->= [c, b, a, a, c, b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, c] ->= [c] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(10,3)\Deepee(6/10,6)\Weight\EDG(2/10,4)\Matrix{\Arctic}{3}(0/10,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))last 5926 length 31324
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 5230 vars 20742 clauses

Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.441619651000
  min duration 0.127449851000
  total durat. 1.122624868000
**************************************************
F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F                = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
F                = 0 , alphabet_size = 3 , total_length = 12} , self = 37 , parent = Nothing
F                , duration = 0.144228933000 , status = Fail , start = 2025-09-03 13:39:40.441931559
F                UTC , finish = 2025-09-03 13:39:40.586160492 UTC , thread_cap_info = ("ThreadId
F                42", 1, False)}
F                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 3 , total_length = 12} , self = 36 , parent = Nothing
| F              , duration = 0.127449851000 , status = Fail , start = 2025-09-03 13:39:40.455278526
| F              UTC , finish = 2025-09-03 13:39:40.582728377 UTC , thread_cap_info = ("ThreadId
| F              44", 1, False)}
| F              
| | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F            = Size { num_rules = 24 , num_strict_rules = 24 , num_top_rules = 0 , num_weak_rules
| | F            = 0 , alphabet_size = 9 , total_length = 144} , self = 65 , parent = Nothing
| | F            , duration = 0.409326433000 , status = Fail , start = 2025-09-03 13:39:40.490171475
| | F            UTC , finish = 2025-09-03 13:39:40.899497908 UTC , thread_cap_info = ("ThreadId
| | F            61", 0, False)}
| | F            
| | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F          = Size { num_rules = 24 , num_strict_rules = 24 , num_top_rules = 0 , num_weak_rules
| | | F          = 0 , alphabet_size = 9 , total_length = 144} , self = 66 , parent = Nothing
| | | F          , duration = 0.441619651000 , status = Fail , start = 2025-09-03 13:39:40.493658001
| | | F          UTC , finish = 2025-09-03 13:39:40.935277652 UTC , thread_cap_info = ("ThreadId
| | | F          63", 0, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | F        = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F        = 144} , self = 59 , parent = Nothing , duration = 0.181921699000 , status
| | | | F        = Fail , start = 2025-09-03 13:39:40.551668663 UTC , finish = 2025-09-03
| | | | F        13:39:40.733590362 UTC , thread_cap_info = ("ThreadId 71", 3, False)}
| | | | F        
| | | | | S      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | | S      = 24 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | S      = 144} , self = 77 , parent = Nothing , duration = 0.385287721000 , status
| | | | | S      = Success , start = 2025-09-03 13:39:40.571153425 UTC , finish = 2025-09-03
| | | | | S      13:39:40.956441146 UTC , thread_cap_info = ("ThreadId 73", 3, False)}
| | | | | S      
| F | | | |      
F   | | | |      
S   | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | | |      = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
S   | | | |      alphabet_size = 4 , total_length = 48} , self = 80 , parent = Nothing ,
S   | | | |      duration = 0.342107746000 , status = Success , start = 2025-09-03 13:39:40.624350639
S   | | | |      UTC , finish = 2025-09-03 13:39:40.966458385 UTC , thread_cap_info = ("ThreadId
S   | | | |      95", 1, False)}
S   | | | |      
| S | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | | |      = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| S | | | |      alphabet_size = 4 , total_length = 49} , self = 71 , parent = Nothing ,
| S | | | |      duration = 0.301981112000 , status = Success , start = 2025-09-03 13:39:40.639037212
| S | | | |      UTC , finish = 2025-09-03 13:39:40.941018324 UTC , thread_cap_info = ("ThreadId
| S | | | |      97", 1, False)}
| S | | | |      
| | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | | E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | | E    = 4 , total_length = 48} , self = 82 , parent = Nothing , duration = 0.315631878000
| | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 13:39:40.651156566
| | | | | | E    UTC , finish = 2025-09-03 13:39:40.966788444 UTC , thread_cap_info = ("ThreadId
| | | | | | E    98", 1, False)}
| | | | | | E    
| | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | | | E  = 4 , total_length = 49} , self = 101 , parent = Nothing , duration = 0.306965898000
| | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:39:40.705568235
| | | | | | | E  UTC , finish = 2025-09-03 13:39:41.012534133 UTC , thread_cap_info = ("ThreadId
| | | | | | | E  103", 1, False)}
| | | | | | | E  
| | | | F | | |  
| | F |   | | |  
| |   F   | | |  
| S       | | |  
|         S | |  
S           | |  
            E |  
F             |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F             |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F             |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F             |  = 11 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 10 ,
F             |  alphabet_size = 4 , total_length = 44} , self = 107 , parent = Nothing
F             |  , duration = 0.112941342000 , status = Fail , start = 2025-09-03 13:39:40.97905966
F             |  UTC , finish = 2025-09-03 13:39:41.092001002 UTC , thread_cap_info = ("ThreadId
F             |  137", 1, False)}
F             |  
|             E  
F                
