last 9161 length 41435
CNF 9161 vars 41435 clauses
last 9282 length 40990
CNF 9282 vars 40990 clauses
last 1131 length 4890
CNF 1131 vars 4890 clauses
last 1365 length 6180
CNF 1365 vars 6180 clauses
last 2170 length 9464
last 1740 length 7227
CNF 2170 vars 9464 clauses
CNF 1740 vars 7227 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2877, clauses: 10289
last 2877 length 10289
CNF 2877 vars 10289 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3906, clauses: 14537
last 3906 length 14537
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2877, clauses: 10289, status: Unsatisfied, time: 0.1597372s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11117, clauses: 46511
last 11117 length 46511
CNF 3906 vars 14537 clauses
CNF 11117 vars 46511 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3906, clauses: 14537, status: Satisfied, time: 0.252746209s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11117, clauses: 46511, status: Satisfied, time: 0.21271128s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13901, clauses: 58319
last 13901 length 58319
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6706, clauses: 27614
CNF 13901 vars 58319 clauses
last 1348 length 5900
last 1774 length 7453
CNF 1348 vars 5900 clauses
last 1523 length 6495
last 1716 length 8088
CNF 1523 vars 6495 clauses
CNF 1716 vars 8088 clauses
CNF 1774 vars 7453 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3686, clauses: 13569
last 3686 length 13569
CNF 3686 vars 13569 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3686, clauses: 13569, status: Satisfied, time: 0.124586427s
last 1198 length 5242
CNF 1198 vars 5242 clauses
last 1600 length 7499
CNF 1600 vars 7499 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2258, clauses: 8190
last 2258 length 8190
CNF 2258 vars 8190 clauses
last 1404 length 5874
CNF 1404 vars 5874 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2258, clauses: 8190, status: Satisfied, time: 0.072637648s
last 1354 length 5718
CNF 1354 vars 5718 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3280, clauses: 11995
last 3280 length 11995
CNF 3280 vars 11995 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3280, clauses: 11995, status: Unsatisfied, time: 0.146574605s
last 398 length 1693
CNF 398 vars 1693 clauses
last 439 length 1957
CNF 439 vars 1957 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1048, clauses: 3763
last 1048 length 3763
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12053, clauses: 50485
CNF 1048 vars 3763 clauses
last 12053 length 50485
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3175, clauses: 13075
last 3175 length 13075
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1048, clauses: 3763, status: Satisfied, time: 0.051451859s
CNF 12053 vars 50485 clauses
CNF 3175 vars 13075 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7318, clauses: 30308
last 7318 length 30308
**************************************************
summary
**************************************************
SRS with 8 rules on 5 letters       weights
SRS with 7 rules on 5 letters       DP
SRS with 16 strict rules and 7 weak rules on 9 letters       weights
SRS with 6 strict rules and 7 weak rules on 9 letters       EDG
5 sub-proofs
  1 SRS with 1 strict rules and 7 weak rules on 6 letters       Usable
  SRS with 1 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 6 weak rules on 4 letters       weights
  SRS with 0 strict rules and 5 weak rules on 4 letters       EDG

  2 SRS with 1 strict rules and 7 weak rules on 6 letters       Usable
  SRS with 1 strict rules and 1 weak rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  3 SRS with 1 strict rules and 7 weak rules on 6 letters       Usable
  SRS with 1 strict rules and 1 weak rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  4 SRS with 2 strict rules and 7 weak rules on 6 letters       Usable
  SRS with 2 strict rules and 6 weak rules on 5 letters       weights
  SRS with 1 strict rules and 5 weak rules on 5 letters       EDG
  SRS with 1 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 4 weak rules on 4 letters       EDG
  SRS with 1 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

  5 SRS with 1 strict rules and 7 weak rules on 6 letters       Usable
  SRS with 1 strict rules and 2 weak rules on 3 letters       weights
  SRS with 1 strict rules and 1 weak rules on 3 letters       EDG
  SRS with 1 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [log, s] -> [s, log, half, s] {- Input 0 -}
  [half, 0] -> [0, s, s, half] {- Input 1 -}
  [half, s, 0] -> [0] {- Input 2 -}
  [half, s, s] -> [s, half, p, s, s] {- Input 3 -}
  [half, half, s, s, s, s] -> [s, s, half, half] {- Input 4 -}
  [p, s, s, s] -> [s, p, s, s] {- Input 5 -}
  [s, s, p, s] -> [s, s] {- Input 6 -}
  [0] -> [] {- Input 7 -}
reason
  (log, 0/1)
  (s, 0/1)
  (p, 0/1)
  (0, 1/1)
  (half, 0/1)
   property Termination
has value Just True
for SRS
  [log, s] -> [s, log, half, s] {- Input 0 -}
  [half, 0] -> [0, s, s, half] {- Input 1 -}
  [half, s, 0] -> [0] {- Input 2 -}
  [half, s, s] -> [s, half, p, s, s] {- Input 3 -}
  [half, half, s, s, s, s] -> [s, s, half, half] {- Input 4 -}
  [p, s, s, s] -> [s, p, s, s] {- Input 5 -}
  [s, s, p, s] -> [s, s] {- Input 6 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
  [log#, s] |-> [log#, half, s] {- DP (Top 1) (Input 0) -}
  [log#, s] |-> [s#, log, half, s] {- DP (Top 0) (Input 0) -}
  [log#, s] |-> [half#, s] {- DP (Top 2) (Input 0) -}
  [s#, s, p, s] |-> [s#, s] {- DP (Top 0) (Input 6) -}
  [p#, s, s, s] |-> [s#, p, s, s] {- DP (Top 0) (Input 5) -}
  [p#, s, s, s] |-> [p#, s, s] {- DP (Top 1) (Input 5) -}
  [half#, s, s] |-> [s#, half, p, s, s] {- DP (Top 0) (Input 3) -}
  [half#, s, s] |-> [p#, s, s] {- DP (Top 2) (Input 3) -}
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
  [half#, 0] |-> [s#, s, half] {- DP (Top 1) (Input 1) -}
  [half#, 0] |-> [s#, half] {- DP (Top 2) (Input 1) -}
  [half#, 0] |-> [half#] {- DP (Top 3) (Input 1) -}
  [half#, half, s, s, s, s] |-> [s#, s, half, half] {- DP (Top 0) (Input 4) -}
  [half#, half, s, s, s, s] |-> [s#, half, half] {- DP (Top 1) (Input 4) -}
  [half#, half, s, s, s, s] |-> [half#] {- DP (Top 3) (Input 4) -}
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
reason
  (log, 0/1)
  (s, 0/1)
  (p, 0/1)
  (0, 3/1)
  (half, 0/1)
  (log#, 3/1)
  (s#, 0/1)
  (p#, 1/1)
  (half#, 2/1)
   property Termination
has value Just True
for SRS
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
  [log#, s] |-> [log#, half, s] {- DP (Top 1) (Input 0) -}
  [s#, s, p, s] |-> [s#, s] {- DP (Top 0) (Input 6) -}
  [p#, s, s, s] |-> [p#, s, s] {- DP (Top 1) (Input 5) -}
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
  [half#, half, s, s, s, s] |-> [half#] {- DP (Top 3) (Input 4) -}
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [log#, s] |-> [log#, half, s] {- DP (Top 1) (Input 0) -}
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  remove un-usable
    SRS
      [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
   property Termination
has value Just True
for SRS
  [log#, s] |-> [log#, half, s] {- DP (Top 1) (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  ( s
  , Wk  / -   1A 0A \
        | -1A 1A 0A |
        \ -   -  0A / )
  ( p
  , Wk  / -1A -1A 0A \
        | -1A -1A 0A |
        \ -   -   0A / )
  ( 0
  , Wk  / - - 0A \
        | - - -  |
        \ - - 0A / )
  ( half
  , Wk  / -1A - 0A \
        | -1A - -  |
        \ -   - 0A / )
  ( log#
  , Wk  / -2A 1A 0A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  (s, 0/1)
  (p, 0/1)
  (0, 0/1)
  (half, 1/1)
   property Termination
has value Just True
for SRS
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [s#, s, p, s] |-> [s#, s] {- DP (Top 0) (Input 6) -}
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  remove un-usable
    SRS
      [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
      [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
      [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
      [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
      [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
      [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
   property Termination
has value Just True
for SRS
  [s#, s, p, s] |-> [s#, s] {- DP (Top 0) (Input 6) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  (s, 1/1)
  (p, 1/1)
  (s#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [p#, s, s, s] |-> [p#, s, s] {- DP (Top 1) (Input 5) -}
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  remove un-usable
    SRS
      [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
      [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
      [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
      [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
      [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
      [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
   property Termination
has value Just True
for SRS
  [p#, s, s, s] |-> [p#, s, s] {- DP (Top 1) (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  (s, 1/1)
  (p, 1/1)
  (p#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half#, half, s, s, s, s] |-> [half#] {- DP (Top 3) (Input 4) -}
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  remove un-usable
    SRS
      [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
   property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half#, half, s, s, s, s] |-> [half#] {- DP (Top 3) (Input 4) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  (s, 0/1)
  (p, 0/1)
  (0, 0/1)
  (half, 1/1)
  (half#, 0/1)
   property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  ( s
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( p
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( 0
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( half
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( half#
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [half#, half, s, s, s, s] |-> [half#, half] {- DP (Top 2) (Input 4) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  ( s
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( half
  , Wk  / 6A 6A 9A - \
        | 3A 6A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( half#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
  [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
  [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
  [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
  [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
  [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  remove un-usable
    SRS
      [log, s] ->= [s, log, half, s] {- DP Nontop (Input 0) -}
      [half, 0] ->= [0, s, s, half] {- DP Nontop (Input 1) -}
      [half, s, 0] ->= [0] {- DP Nontop (Input 2) -}
      [half, s, s] ->= [s, half, p, s, s] {- DP Nontop (Input 3) -}
      [half, half, s, s, s, s] ->= [s, s, half, half] {- DP Nontop (Input 4) -}
   property Termination
has value Just True
for SRS
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
  [s, s, p, s] ->= [s, s] {- DP Nontop (Input 6) -}
reason
  (s, 1/1)
  (p, 0/1)
  (half#, 0/1)
   property Termination
has value Just True
for SRS
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
CNF 7318 vars 30308 clauses
  Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12053, clauses: 50485, status: Satisfied, time: 0.505543165s
[p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [half#, s, s] |-> [half#, p, s, s] {- DP (Top 1) (Input 3) -}
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
reason
  ( s
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( half#
  , Wk  / 10A 11A 13A - \
        | 10A 11A 13A - |
        | 10A 11A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [p, s, s, s] ->= [s, p, s, s] {- DP Nontop (Input 5) -}
reason
  EDG

**************************************************
skeleton: (8,5)\Weight(7,5)\Deepee(16/7,9)\Weight(6/7,9)\EDG[(1/7,6)\Usable(1/6,5)\Matrix{\ArcticBZ}{3}(0/6,4)\Weight(0/5,4)\EDG[],(1/7,6)\Usable(1/1,3)\Weight(0,0)\EDG[],(1/7,6)\Usable(1/1,3)\Weight(0,0)\EDG[],(2/7,6)\Usable(2/6,5)\Weight\EDG(1/5,5)\Matrix{\Natural}{2}\EDG(1/4,4)\Matrix{\Arctic}{3}(0/4,3)\EDG[],(1/7,6)\Usable(1/2,3)\Weight\EDG(1/1,3)\Matrix{\Arctic}{3}(0/1,2)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.573362212000
  min duration 0.038374228000
  total durat. 1.049730641000
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 6.590931811000
  min duration 0.123518655000
  total durat. 11.418832748000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 7
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 5
      , total_length = 48}
    , self = 56
    , parent = Nothing
    , duration = 4.704382282000
    , status = Fail
    , start = 2025-09-03 13:32:07.97302628 UTC
    , finish = 2025-09-03 13:32:12.677408562 UTC
    , thread_cap_info = ("ThreadId 77", 2, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 87
      , num_strict_rules = 87
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 18
      , total_length = 786}
    , self = 124
    , parent = Nothing
    , duration = 6.590931811000
    , status = Fail
    , start = 2025-09-03 13:32:08.03073686 UTC
    , finish = 2025-09-03 13:32:14.621668671 UTC
    , thread_cap_info = ("ThreadId 85", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 4
  max duration 0.603095509000
  min duration 0.105167254000
  total durat. 1.109700214000
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
F              = 48} , self = 53 , parent = Nothing , duration = 0.614240292000 , status
F              = Fail , start = 2025-09-03 13:32:07.863427203 UTC , finish = 2025-09-03
F              13:32:08.477667495 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| F            = 48} , self = 43 , parent = Nothing , duration = 0.180570952000 , status
| F            = Fail , start = 2025-09-03 13:32:07.863453351 UTC , finish = 2025-09-03
| F            13:32:08.044024303 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 320} , self = 54 , parent = Nothing , duration = 0.573362212000 , status
| | F          = Fail , start = 2025-09-03 13:32:07.91834141 UTC , finish = 2025-09-03
| | F          13:32:08.491703622 UTC , thread_cap_info = ("ThreadId 67", 0, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 320} , self = 50 , parent = Nothing , duration = 0.372217718000 , status
| | | F        = Fail , start = 2025-09-03 13:32:07.93803426 UTC , finish = 2025-09-03
| | | F        13:32:08.310251978 UTC , thread_cap_info = ("ThreadId 69", 0, False)}
| | | F        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 5 , total_length = 48} , self = 44 , parent = Nothing
| | | | F      , duration = 0.123518655000 , status = Fail , start = 2025-09-03 13:32:07.950644831
| | | | F      UTC , finish = 2025-09-03 13:32:08.074163486 UTC , thread_cap_info = ("ThreadId
| | | | F      75", 2, False)}
| | | | F      
| | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F    = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules = 0 , num_weak_rules
| | | | | F    = 0 , alphabet_size = 5 , total_length = 48} , self = 56 , parent = Nothing
| | | | | F    , duration = 4.704382282000 , status = Fail , start = 2025-09-03 13:32:07.97302628
| | | | | F    UTC , finish = 2025-09-03 13:32:12.677408562 UTC , thread_cap_info = ("ThreadId
| | | | | F    77", 2, False)}
| | | | | F    
| | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F  = Size { num_rules = 87 , num_strict_rules = 87 , num_top_rules = 0 , num_weak_rules
| | | | | | F  = 0 , alphabet_size = 18 , total_length = 786} , self = 124 , parent =
| | | | | | F  Nothing , duration = 6.590931811000 , status = Fail , start = 2025-09-03
| | | | | | F  13:32:08.03073686 UTC , finish = 2025-09-03 13:32:14.621668671 UTC , thread_cap_info
| | | | | | F  = ("ThreadId 85", 1, False)}
| | | | | | F  
| F | | | | |  
|   | | F | |  
|   | F   | |  
| F |     | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| F |     | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| F |     | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| F |     | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| F |     | |  = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F |     | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F |     | |  = 28} , self = 55 , parent = Nothing , duration = 0.132027137000 , status
| F |     | |  = Fail , start = 2025-09-03 13:32:08.366085132 UTC , finish = 2025-09-03
| F |     | |  13:32:08.498112269 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| F |     | |  
F | |     | |  
  | F     | |  
  F       | |  
          F |  
F           |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F           |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F           |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F           |  = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
F           |  = 5 , total_length = 47} , self = 74 , parent = Nothing , duration = 0.249397670000
F           |  , status = Fail , start = 2025-09-03 13:32:12.868307829 UTC , finish =
F           |  2025-09-03 13:32:13.117705499 UTC , thread_cap_info = ("ThreadId 116",
F           |  2, False)}
F           |  
| S         |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S         |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| S         |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| S         |  = 5 , total_length = 47} , self = 77 , parent = Nothing , duration = 0.486565326000
| S         |  , status = Success , start = 2025-09-03 13:32:12.93025688 UTC , finish
| S         |  = 2025-09-03 13:32:13.416822206 UTC , thread_cap_info = ("ThreadId 119",
| S         |  2, False)}
| S         |  
| | S       |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S       |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S       |  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | S       |  alphabet_size = 5 , total_length = 70} , self = 75 , parent = Nothing ,
| | S       |  duration = 0.411357986000 , status = Success , start = 2025-09-03 13:32:12.962776058
| | S       |  UTC , finish = 2025-09-03 13:32:13.374134044 UTC , thread_cap_info = ("ThreadId
| | S       |  120", 2, False)}
| | S       |  
| | | E     |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E     |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | E     |  = 5 , total_length = 70} , self = 81 , parent = Nothing , duration = 0.603095509000
| | | E     |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:12.970246876
| | | E     |  UTC , finish = 2025-09-03 13:32:13.573342385 UTC , thread_cap_info = ("ThreadId
| | | E     |  121", 2, False)}
| | | E     |  
F | | |     |  
E | | |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | |     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
E | | |     |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
E | | |     |  = 5 , total_length = 47} , self = 79 , parent = Nothing , duration = 0.289539326000
E | | |     |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:13.200705608
E | | |     |  UTC , finish = 2025-09-03 13:32:13.490244934 UTC , thread_cap_info = ("ThreadId
E | | |     |  124", 2, False)}
E | | |     |  
| | S |     |  
| S   |     |  
E     |     |  
      E     |  
S           |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S           |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S           |  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
S           |  = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size = 5 , total_length
S           |  = 46} , self = 95 , parent = Nothing , duration = 0.102895516000 , status
S           |  = Success , start = 2025-09-03 13:32:13.690277041 UTC , finish = 2025-09-03
S           |  13:32:13.793172557 UTC , thread_cap_info = ("ThreadId 138", 2, False)}
S           |  
| F         |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F         |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F         |  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F         |  = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| F         |  = 62} , self = 98 , parent = Nothing , duration = 0.100197215000 , status
| F         |  = Fail , start = 2025-09-03 13:32:13.710247163 UTC , finish = 2025-09-03
| F         |  13:32:13.810444378 UTC , thread_cap_info = ("ThreadId 141", 2, False)}
| F         |  
S |         |  
  F         |  
S           |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S           |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S           |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S           |  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S           |  = 5 , total_length = 62} , self = 102 , parent = Nothing , duration = 0.162829804000
S           |  , status = Success , start = 2025-09-03 13:32:13.830272996 UTC , finish
S           |  = 2025-09-03 13:32:13.9931028 UTC , thread_cap_info = ("ThreadId 147",
S           |  2, False)}
S           |  
| E         |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E         |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E         |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| E         |  = 5 , total_length = 62} , self = 105 , parent = Nothing , duration = 0.261401427000
| E         |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:13.869853691
| E         |  UTC , finish = 2025-09-03 13:32:14.131255118 UTC , thread_cap_info = ("ThreadId
| E         |  148", 2, False)}
| E         |  
S |         |  
F |         |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F |         |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |         |  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
F |         |  = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F |         |  = 40} , self = 106 , parent = Nothing , duration = 0.101035227000 , status
F |         |  = Fail , start = 2025-09-03 13:32:14.030265851 UTC , finish = 2025-09-03
F |         |  13:32:14.131301078 UTC , thread_cap_info = ("ThreadId 154", 2, False)}
F |         |  
| | F       |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F       |  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F       |  = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F       |  = 40} , self = 108 , parent = Nothing , duration = 0.129744602000 , status
| | F       |  = Fail , start = 2025-09-03 13:32:14.042921738 UTC , finish = 2025-09-03
| | F       |  13:32:14.17266634 UTC , thread_cap_info = ("ThreadId 155", 2, False)}
| | F       |  
| E |       |  
F   |       |  
S   |       |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   |       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   |       |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   |       |  = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
S   |       |  = 4 , total_length = 40} , self = 112 , parent = Nothing , duration = 0.127601745000
S   |       |  , status = Success , start = 2025-09-03 13:32:14.131409782 UTC , finish
S   |       |  = 2025-09-03 13:32:14.259011527 UTC , thread_cap_info = ("ThreadId 159",
S   |       |  2, False)}
S   |       |  
|   F       |  
| E         |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E         |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| E         |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| E         |  = 4 , total_length = 40} , self = 115 , parent = Nothing , duration = 0.140036024000
| E         |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:14.190257116
| E         |  UTC , finish = 2025-09-03 13:32:14.33029314 UTC , thread_cap_info = ("ThreadId
| E         |  162", 2, False)}
| E         |  
| | F       |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F       |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F       |  = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | F       |  = 55} , self = 114 , parent = Nothing , duration = 0.104886009000 , status
| | F       |  = Fail , start = 2025-09-03 13:32:14.210261391 UTC , finish = 2025-09-03
| | F       |  13:32:14.3151474 UTC , thread_cap_info = ("ThreadId 164", 2, False)}
| | F       |  
| | | F     |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F     |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F     |  = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F     |  = 55} , self = 116 , parent = Nothing , duration = 0.145086300000 , status
| | | F     |  = Fail , start = 2025-09-03 13:32:14.227843443 UTC , finish = 2025-09-03
| | | F     |  13:32:14.372929743 UTC , thread_cap_info = ("ThreadId 165", 2, False)}
| | | F     |  
S | | |     |  
  | F |     |  
  E   |     |  
F     |     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F     |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F     |     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F     |     |  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F     |     |  = 5 , total_length = 55} , self = 122 , parent = Nothing , duration = 0.203685438000
F     |     |  , status = Fail , start = 2025-09-03 13:32:14.351798349 UTC , finish =
F     |     |  2025-09-03 13:32:14.555483787 UTC , thread_cap_info = ("ThreadId 169",
F     |     |  2, False)}
F     |     |  
|     F     |  
F           |  
            F  
E              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 2
E              , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
E              = 3 , total_length = 15} , self = 129 , parent = Nothing , duration = 0.105167254000
E              , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:14.680744523
E              UTC , finish = 2025-09-03 13:32:14.785911777 UTC , thread_cap_info = ("ThreadId
E              182", 2, False)}
E              
E              
