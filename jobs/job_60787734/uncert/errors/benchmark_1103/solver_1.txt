last 4470 length 23551
CNF 4470 vars 23551 clauses
last 4114 length 18859
last 802 length 3273
CNF 802 vars 3273 clauses
last 720 length 3048
last 457 length 1813
CNF 4114 vars 18859 clauses
last 398 length 1560
CNF 720 vars 3048 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9134
CNF 457 vars 1813 clauses
CNF 398 vars 1560 clauses
last 2484 length 9134
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6547, clauses: 27005
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1772, clauses: 6348
CNF 2484 vars 9134 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5210, clauses: 21461
last 6547 length 27005
last 1772 length 6348
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9134, status: Satisfied, time: 0.480464192s
last 5210 length 21461
CNF 6547 vars 27005 clauses
CNF 1772 vars 6348 clauses
CNF 5210 vars 21461 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1772, clauses: 6348, status: Satisfied, time: 0.440366496s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5210, clauses: 21461, status: Satisfied, time: 0.361278961s
last 609 length 2471
CNF 609 vars 2471 clauses
last 600 length 2449
CNF 600 vars 2449 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2273, clauses: 8205
last 2273 length 8205
CNF 2273 vars 8205 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [b] -> [c, c, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [b] -> [c, c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b] -> [a, c, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#] |-> [a#, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 7A 9A 10A - \
        | 7A 9A 10A - |
        | 7A 9A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.939055745000
  min duration 0.687655157000
  total durat. 1.626710902000
**************************************************
F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F            = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F            = 0 , alphabet_size = 3 , total_length = 12} , self = 46 , parent = Nothing
F            , duration = 0.134390723000 , status = Fail , start = 2025-09-03 10:59:40.676764582
F            UTC , finish = 2025-09-03 10:59:40.811155305 UTC , thread_cap_info = ("ThreadId
F            48", 3, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 162} , self = 61 , parent = Nothing , duration = 0.292396030000 , status
| F          = Fail , start = 2025-09-03 10:59:40.683005479 UTC , finish = 2025-09-03
| F          10:59:40.975401509 UTC , thread_cap_info = ("ThreadId 68", 2, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 162} , self = 45 , parent = Nothing , duration = 0.120001433000 , status
| | F        = Fail , start = 2025-09-03 10:59:40.683008596 UTC , finish = 2025-09-03
| | F        10:59:40.803010029 UTC , thread_cap_info = ("ThreadId 70", 2, False)}
| | F        
| | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | F      = 0 , alphabet_size = 9 , total_length = 162} , self = 63 , parent = Nothing
| | | F      , duration = 0.490564293000 , status = Fail , start = 2025-09-03 10:59:40.713578716
| | | F      UTC , finish = 2025-09-03 10:59:41.204143009 UTC , thread_cap_info = ("ThreadId
| | | F      77", 1, False)}
| | | F      
| | F |      
F |   |      
F |   |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F |   |      = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
F |   |      = 44} , self = 62 , parent = Nothing , duration = 0.252106556000 , status
F |   |      = Fail , start = 2025-09-03 10:59:40.821926437 UTC , finish = 2025-09-03
F |   |      10:59:41.074032993 UTC , thread_cap_info = ("ThreadId 94", 3, False)}
F |   |      
| | F |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F |      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | F |      = 29} , self = 64 , parent = Nothing , duration = 0.386723289000 , status
| | F |      = Fail , start = 2025-09-03 10:59:40.827323729 UTC , finish = 2025-09-03
| | F |      10:59:41.214047018 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | F |      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F    = 29} , self = 65 , parent = Nothing , duration = 0.402867767000 , status
| | | | F    = Fail , start = 2025-09-03 10:59:40.830669218 UTC , finish = 2025-09-03
| | | | F    10:59:41.233536985 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | | | F    
| | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | S  alphabet_size = 5 , total_length = 44} , self = 66 , parent = Nothing ,
| | | | | S  duration = 0.939055745000 , status = Success , start = 2025-09-03 10:59:40.834744365
| | | | | S  UTC , finish = 2025-09-03 10:59:41.77380011 UTC , thread_cap_info = ("ThreadId
| | | | | S  101", 3, False)}
| | | | | S  
| F | | | |  
F   | | | |  
E   | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E   | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E   | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E   | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E   | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E   | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
E   | | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
E   | | | |  = 5 , total_length = 44} , self = 68 , parent = Nothing , duration = 0.761337389000
E   | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:41.09442034
E   | | | |  UTC , finish = 2025-09-03 10:59:41.855757729 UTC , thread_cap_info = ("ThreadId
E   | | | |  106", 3, False)}
E   | | | |  
|   | F | |  
|   F   | |  
|       F |  
| S       |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S       |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S       |  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S       |  = 4 , total_length = 29} , self = 71 , parent = Nothing , duration = 0.687655157000
| S       |  , status = Success , start = 2025-09-03 10:59:41.233557006 UTC , finish
| S       |  = 2025-09-03 10:59:41.921212163 UTC , thread_cap_info = ("ThreadId 107",
| S       |  3, False)}
| S       |  
| | S     |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | S     |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | S     |  = 4 , total_length = 29} , self = 74 , parent = Nothing , duration = 0.682317509000
| | S     |  , status = Success , start = 2025-09-03 10:59:41.253556025 UTC , finish
| | S     |  = 2025-09-03 10:59:41.935873534 UTC , thread_cap_info = ("ThreadId 108",
| | S     |  3, False)}
| | S     |  
| | |     S  
E | |        
  S |        
    S        
