last 1908 length 8242
last 2052 length 8885
last 653 length 2724
CNF 1908 vars 8242 clauses
CNF 653 vars 2724 clauses
CNF 2052 vars 8885 clauses
last 800 length 3442
last 653 length 2724
last 800 length 3442
CNF 800 vars 3442 clauses
CNF 653 vars 2724 clauses
CNF 800 vars 3442 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419
last 2039 length 7419
CNF 2039 vars 7419 clauses
last 3400 length 15238
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419
last 2039 length 7419
CNF 3400 vars 15238 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6810, clauses: 28427
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419, status: Satisfied, time: 0.105619181s
last 3144 length 13748
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6810, clauses: 28427
CNF 2039 vars 7419 clauses
last 3144 length 13748
last 3400 length 15238
last 6810 length 28427
**************************************************
CNF 3144 vars 13748 clauses
CNF 3400 vars 15238 clauses
CNF 3144 vars 13748 clauses
CNF 6810 vars 28427 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419, status: Satisfied, time: 0.137107158s
summary
**************************************************
SRS with 2 Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5184, clauses: 19526
rules last 5184 length 19526
on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, a] -> [b, a, a, b] {- Input 0 -}
  [b, a, b] -> [a, b, a] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Input 0) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Input 1) -}
  [a#, a, a, a] |-> [a#, a, b] {- DP (Top 1) (Input 0) -}
  [a#, a, a, a] |-> [a#, b] {- DP (Top 2) (Input 0) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Input 1) -}
  [b#, a, b] |-> [b#, a] {- DP (Top 1) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Input 0) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Input 1) -}
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Input 1) -}
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Input 0) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 6A 7A 8A - \
        | 6A 7A 8A - |
        | 6A 7A 8A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Input 1) -}
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Input 0) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Input 0) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Deepee(7/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
CNF 5184 vars 19526 clauses
S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S      = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
S      = 4 , total_length = 28} , self = 84 , parent = Nothing , duration = 0.250638586000
S      , status = Success , start = 2025-09-03 13:26:19.293282761 UTC , finish
S      = 2025-09-03 13:26:19.543921347 UTC , thread_cap_info = ("ThreadId 105",
S      2, False)}
S      
| E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| E    = 4 , total_length = 28} , self = 86 , parent = Nothing , duration = 0.237032550000
| E    , status = Except "AsyncCancelled" , start = 2025-09-03 13:26:19.307057742
| E    UTC , finish = 2025-09-03 13:26:19.544090292 UTC , thread_cap_info = ("ThreadId
| E    106", 2, False)}
| E    
| | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | F  = 108} , self = 83 , parent = Nothing , duration = 0.201601806000 , status
| | F  = Fail , start = 2025-09-03 13:26:19.333199971 UTC , finish = 2025-09-03
| | F  13:26:19.534801777 UTC , thread_cap_info = ("ThreadId 119", 3, False)}
| | F  
| | F  
S |    
  E    
