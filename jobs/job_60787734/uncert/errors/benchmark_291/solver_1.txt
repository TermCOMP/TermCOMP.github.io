last 2718 length 11940
CNF 2718 vars 11940 clauses
last 2872 length 13246
CNF 2872 vars 13246 clauses
last 666 length 2816
CNF 666 vars 2816 clauses
last 763 length 3353
last 935 length 4050
last 782 length 3268
CNF 763 vars 3353 clauses
CNF 935 vars 4050 clauses
CNF 782 vars 3268 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 6007
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25713
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2270, clauses: 8298
last 1654 length 6007
last 6145 length 25713
last 2270 length 8298
CNF 1654 vars 6007 clauses
CNF 2270 vars 8298 clauses
CNF 6145 vars 25713 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 6007, status: Unsatisfied, time: 0.070028274s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2270, clauses: 8298, status: Unsatisfied, time: 0.090732881s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7982, clauses: 33435
last 7982 length 33435
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3678, clauses: 15208
last 3678 length 15208
CNF 3678 vars 15208 clauses
CNF 7982 vars 33435 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4788, clauses: 19825
last 4788 length 19825
CNF 4788 vars 19825 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25713, status: Unsatisfied, time: 0.504743458s
last 4034 length 17926
CNF 4034 vars 17926 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 10452
last 2741 length 10452
CNF 2741 vars 10452 clauses
last 3798 length 17494
CNF 3798 vars 17494 clauses
last 4076 length 20050
CNF 4076 vars 20050 clauses
last 4982 length 23026
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 10452, status: Unsatisfied, time: 0.321556585s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4671, clauses: 17222
CNF 4982 vars 23026 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3678, clauses: 15208, status: Unsatisfied, time: 0.979728914s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5505, clauses: 20858
last 4671 length 17222
last 5505 length 20858
CNF 4671 vars 17222 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19447, clauses: 81999
last 19447 length 81999
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10663, clauses: 46013
CNF 19447 vars 81999 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4788, clauses: 19825, status: Unsatisfied, time: 1.429869919s
CNF 5505 vars 20858 clauses
last 10663 length 46013
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5149, clauses: 19504
last 5149 length 19504
CNF 5149 vars 19504 clauses
CNF 10663 vars 46013 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7982, clauses: 33435, status: Unsatisfied, time: 2.487362482s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3760, clauses: 14439
last 3760 length 14439
CNF 3760 vars 14439 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21036, clauses: 88805
last 21036 length 88805
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13588, clauses: 58773
last 13588 length 58773
CNF 21036 vars 88805 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3760, clauses: 14439, status: Unsatisfied, time: 0.642821787s
CNF 13588 vars 58773 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7063, clauses: 26886
last 7063 length 26886
CNF 7063 vars 26886 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4671, clauses: 17222, status: Unsatisfied, time: 2.769426129s
[Info] pool sizes (success) 150220 seen 87315 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       looping derivation
from
  [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]
to
  [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]
via 80 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [0, 0, 0, 0] -> [0, 1, 1, 1] {- Input 0 -}
  [1, 0, 0, 1] -> [0, 0, 1, 0] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], via = [(Step   { rule = 1, position = 4}, [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 6}, [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 8}, [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 5}, [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 2}, [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 4}, [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 0}, [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 5}, [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 5}, [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 8}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 17}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0]), (Step   { rule = 0, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]), (Step   { rule = 1, position = 16}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]), (Step   { rule = 0, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0]), (Step   { rule = 0, position = 17}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1]), (Step   { rule = 0, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 6}, [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 8}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 0, position = 4}, [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1]), (Step   { rule = 1, position = 16}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1]), (Step   { rule = 0, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]), (Step   { rule = 0, position = 8}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1]), (Step   { rule = 0, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 0, position = 7}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]), (Step   { rule = 0, position = 15}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 2}, [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 1}, [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 5}, [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 1}, [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1])], to = [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]}

**************************************************
skeleton: (2,2)\Loop{80}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.429714143000
  min duration 0.055455555000
  total durat. 1.062338656000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.129996321000
  min duration 0.052186866000
  total durat. 2.112711812000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 8
      , alphabet_size = 6
      , total_length = 120}
    , self = 91
    , parent = Nothing
    , duration = 1.129996321000
    , status = Fail
    , start = 2025-09-03 11:22:43.714418106 UTC
    , finish = 2025-09-03 11:22:44.844414427 UTC
    , thread_cap_info = ("ThreadId 130", 3, False)}
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 2.595934401000
  min duration 0.605203228000
  total durat. 3.201137629000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 32}
    , self = 93
    , parent = Nothing
    , duration = 2.595934401000
    , status = Fail
    , start = 2025-09-03 11:22:43.426070544 UTC
    , finish = 2025-09-03 11:22:46.022004945 UTC
    , thread_cap_info = ("ThreadId 113", 2, False)}
Fail : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.728782831000
  min duration 1.347044112000
  total durat. 3.075826943000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 24}
    , self = 90
    , parent = Nothing
    , duration = 1.347044112000
    , status = Fail
    , start = 2025-09-03 11:22:43.475573324 UTC
    , finish = 2025-09-03 11:22:44.822617436 UTC
    , thread_cap_info = ("ThreadId 114", 2, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 32}
    , self = 92
    , parent = Nothing
    , duration = 1.728782831000
    , status = Fail
    , start = 2025-09-03 11:22:43.532540102 UTC
    , finish = 2025-09-03 11:22:45.261322933 UTC
    , thread_cap_info = ("ThreadId 115", 2, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.172902067000
  min duration 0.147897957000
  total durat. 3.505918907000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 8
      , alphabet_size = 5
      , total_length = 100}
    , self = 95
    , parent = Nothing
    , duration = 3.172902067000
    , status = Fail
    , start = 2025-09-03 11:22:44.256804998 UTC
    , finish = 2025-09-03 11:22:47.429707065 UTC
    , thread_cap_info = ("ThreadId 141", 3, False)}
Fail : "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.533875501000
  min duration 0.484799236000
  total durat. 2.018674737000
  Info
    { what = "QPI\n  { dim = 4\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 32}
    , self = 94
    , parent = Nothing
    , duration = 1.533875501000
    , status = Fail
    , start = 2025-09-03 11:22:45.29174367 UTC
    , finish = 2025-09-03 11:22:46.825619171 UTC
    , thread_cap_info = ("ThreadId 150", 2, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 4.423264607000
  min duration 4.423264607000
  total durat. 4.423264607000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 16}
    , self = 96
    , parent = Nothing
    , duration = 4.423264607000
    , status = Success
    , start = 2025-09-03 11:22:43.074409472 UTC
    , finish = 2025-09-03 11:22:47.497674079 UTC
    , thread_cap_info = ("ThreadId 70", 3, False)}
**************************************************
F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F                  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
F                  = 0 , alphabet_size = 2 , total_length = 16} , self = 50 , parent = Nothing
F                  , duration = 0.209471850000 , status = Fail , start = 2025-09-03 11:22:43.009345688
F                  UTC , finish = 2025-09-03 11:22:43.218817538 UTC , thread_cap_info = ("ThreadId
F                  35", 1, False)}
F                  
| F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F                = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                = 80} , self = 42 , parent = Nothing , duration = 0.109998333000 , status
| F                = Fail , start = 2025-09-03 11:22:43.01043054 UTC , finish = 2025-09-03
| F                11:22:43.120428873 UTC , thread_cap_info = ("ThreadId 47", 2, False)}
| F                
| | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F              = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | F              = 0 , alphabet_size = 2 , total_length = 16} , self = 45 , parent = Nothing
| | F              , duration = 0.146029101000 , status = Fail , start = 2025-09-03 11:22:43.019827076
| | F              UTC , finish = 2025-09-03 11:22:43.165856177 UTC , thread_cap_info = ("ThreadId
| | F              37", 1, False)}
| | F              
| | | F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | F            = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | F            = 16} , self = 49 , parent = Nothing , duration = 0.163713174000 , status
| | | F            = Fail , start = 2025-09-03 11:22:43.023493883 UTC , finish = 2025-09-03
| | | F            11:22:43.187207057 UTC , thread_cap_info = ("ThreadId 53", 3, False)}
| | | F            
| | | | S          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | S          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | S          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | S          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | S          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | S          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | S          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | S          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | S          = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | S          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | S          = 16} , self = 96 , parent = Nothing , duration = 4.423264607000 , status
| | | | S          = Success , start = 2025-09-03 11:22:43.074409472 UTC , finish = 2025-09-03
| | | | S          11:22:47.497674079 UTC , thread_cap_info = ("ThreadId 70", 3, False)}
| | | | S          
| F | | |          
|   F | |          
| F   | |          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F   | |          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F   | |          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F   | |          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F   | |          = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| F   | |          = 0 , alphabet_size = 4 , total_length = 80} , self = 71 , parent = Nothing
| F   | |          , duration = 0.528618036000 , status = Fail , start = 2025-09-03 11:22:43.16716941
| F   | |          UTC , finish = 2025-09-03 11:22:43.695787446 UTC , thread_cap_info = ("ThreadId
| F   | |          85", 3, False)}
| F   | |          
| |   F |          
F |     |          
F |     |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F |     |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |     |          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F |     |          = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F |     |          = 32} , self = 68 , parent = Nothing , duration = 0.169941251000 , status
F |     |          = Fail , start = 2025-09-03 11:22:43.231939954 UTC , finish = 2025-09-03
F |     |          11:22:43.401881205 UTC , thread_cap_info = ("ThreadId 102", 2, False)}
F |     |          
| | F   |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F   |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   |          = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | F   |          = 3 , total_length = 24} , self = 69 , parent = Nothing , duration = 0.185118883000
| | F   |          , status = Fail , start = 2025-09-03 11:22:43.276371111 UTC , finish =
| | F   |          2025-09-03 11:22:43.461489994 UTC , thread_cap_info = ("ThreadId 106",
| | F   |          2, False)}
| | F   |          
| | | F |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | F |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | F |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | F |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | F |          , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | F |          = 3 , total_length = 24} , self = 85 , parent = Nothing , duration = 0.605203228000
| | | F |          , status = Fail , start = 2025-09-03 11:22:43.287263216 UTC , finish =
| | | F |          2025-09-03 11:22:43.892466444 UTC , thread_cap_info = ("ThreadId 108",
| | | F |          2, False)}
| | | F |          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | F        = 4 , total_length = 32} , self = 70 , parent = Nothing , duration = 0.147897957000
| | | | | F        , status = Fail , start = 2025-09-03 11:22:43.334465813 UTC , finish =
| | | | | F        2025-09-03 11:22:43.48236377 UTC , thread_cap_info = ("ThreadId 109", 2,
| | | | | F        False)}
| | | | | F        
F | | | | |        
F | | | | |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
F | | | | |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
F | | | | |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
F | | | | |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | | | | |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | | | | |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
F | | | | |        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
F | | | | |        = 4 , total_length = 32} , self = 93 , parent = Nothing , duration = 2.595934401000
F | | | | |        , status = Fail , start = 2025-09-03 11:22:43.426070544 UTC , finish =
F | | | | |        2025-09-03 11:22:46.022004945 UTC , thread_cap_info = ("ThreadId 113",
F | | | | |        2, False)}
F | | | | |        
| | F | | |        
| | F | | |        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F | | |        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F | | |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F | | |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F | | |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F | | |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | F | | |        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | F | | |        = 3 , total_length = 24} , self = 90 , parent = Nothing , duration = 1.347044112000
| | F | | |        , status = Fail , start = 2025-09-03 11:22:43.475573324 UTC , finish =
| | F | | |        2025-09-03 11:22:44.822617436 UTC , thread_cap_info = ("ThreadId 114",
| | F | | |        2, False)}
| | F | | |        
| | | | | F        
| | | | | F        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | | F        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | | F        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | F        = 4 , total_length = 32} , self = 92 , parent = Nothing , duration = 1.728782831000
| | | | | F        , status = Fail , start = 2025-09-03 11:22:43.532540102 UTC , finish =
| | | | | F        2025-09-03 11:22:45.261322933 UTC , thread_cap_info = ("ThreadId 115",
| | | | | F        2, False)}
| | | | | F        
| F | | | |        
| F | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F | | | |        = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| F | | | |        = 120} , self = 86 , parent = Nothing , duration = 0.310739915000 , status
| F | | | |        = Fail , start = 2025-09-03 11:22:43.707313307 UTC , finish = 2025-09-03
| F | | | |        11:22:44.018053222 UTC , thread_cap_info = ("ThreadId 129", 3, False)}
| F | | | |        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | F      = 120} , self = 91 , parent = Nothing , duration = 1.129996321000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:22:43.714418106 UTC , finish = 2025-09-03
| | | | | | F      11:22:44.844414427 UTC , thread_cap_info = ("ThreadId 130", 3, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | F    = 100} , self = 87 , parent = Nothing , duration = 0.429714143000 , status
| | | | | | | F    = Fail , start = 2025-09-03 11:22:43.816985808 UTC , finish = 2025-09-03
| | | | | | | F    11:22:44.246699951 UTC , thread_cap_info = ("ThreadId 133", 3, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | F  = 100} , self = 89 , parent = Nothing , duration = 0.738423171000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 11:22:43.858014292 UTC , finish = 2025-09-03
| | | | | | | | F  11:22:44.596437463 UTC , thread_cap_info = ("ThreadId 134", 3, False)}
| | | | | | | | F  
| | | F | | | | |  
| | | F | | | | |  Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| | | F | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F | | | | |  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | F | | | | |  = 3 , total_length = 24} , self = 88 , parent = Nothing , duration = 0.484799236000
| | | F | | | | |  , status = Fail , start = 2025-09-03 11:22:43.900792289 UTC , finish =
| | | F | | | | |  2025-09-03 11:22:44.385591525 UTC , thread_cap_info = ("ThreadId 135",
| | | F | | | | |  2, False)}
| | | F | | | | |  
| F | | | | | | |  
|   | | | | | F |  
| F | | | | |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | | | | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | | | | |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | | | | |   |  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| F | | | | |   |  alphabet_size = 5 , total_length = 100} , self = 95 , parent = Nothing
| F | | | | |   |  , duration = 3.172902067000 , status = Fail , start = 2025-09-03 11:22:44.256804998
| F | | | | |   |  UTC , finish = 2025-09-03 11:22:47.429707065 UTC , thread_cap_info = ("ThreadId
| F | | | | |   |  141", 3, False)}
| F | | | | |   |  
| | | F | | |   |  
| | |   | | |   F  
| | F   | | |      
| |     | | F      
| |     | F        
| | F   |          Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| | F   |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   |          = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | F   |          = 4 , total_length = 32} , self = 94 , parent = Nothing , duration = 1.533875501000
| | F   |          , status = Fail , start = 2025-09-03 11:22:45.29174367 UTC , finish = 2025-09-03
| | F   |          11:22:46.825619171 UTC , thread_cap_info = ("ThreadId 150", 2, False)}
| | F   |          
F | |   |          
  | F   |          
  F     |          
        S          
