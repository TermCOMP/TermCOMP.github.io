last 2266 length 9578
CNF 2266 vars 9578 clauses
last 2394 length 10749
CNF 2394 vars 10749 clauses
last 492 length 1954
last 499 length 2025
CNF 492 vars 1954 clauses
CNF 499 vars 2025 clauses
last 520 length 2062
last 513 length 2059
CNF 513 vars 2059 clauses
CNF 520 vars 2062 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2426, clauses: 8676
last 2426 length 8676
CNF 2426 vars 8676 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2635, clauses: 9388
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7755, clauses: 32105
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2426, clauses: 8676, status: Unsatisfied, time: 0.08275883s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7966, clauses: 33103
last 2635 length 9388
last 7755 length 32105
last 7966 length 33103
CNF 2635 vars 9388 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5007, clauses: 19838
CNF 7755 vars 32105 clauses
CNF 7966 vars 33103 clauses
last 5007 length 19838
CNF 5007 vars 19838 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2635, clauses: 9388, status: Unsatisfied, time: 0.118521043s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4921, clauses: 19431
last 4921 length 19431
CNF 4921 vars 19431 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7966, clauses: 33103, status: Unsatisfied, time: 0.384918325s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4921, clauses: 19431, status: Satisfied, time: 0.167309863s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5007, clauses: 19838, status: Unsatisfied, time: 0.329377261s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3956, clauses: 15003
last 3956 length 15003
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7755, clauses: 32105, status: Unsatisfied, time: 0.402332338s
CNF 3956 vars 15003 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 5 strict rules and 8 weak rules on 6 letters       weights
SRS with 3 strict rules and 8 weak rules on 5 letters       EDG
SRS with 3 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 8 weak rules on 5 letters       weights
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, b, b] {- Input 1 -}
  [b] -> [a, a, c] {- Input 2 -}
  [c, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a] -> [b, b, c] {- Mirror (Input 1) -}
  [b] -> [c, a, a] {- Mirror (Input 2) -}
  [c, c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [b, b, c] {- Mirror (Input 1) -}
  [b] -> [c, a, a] {- Mirror (Input 2) -}
  [a, c, c] -> [a] {- Mirror (Input 3) -}
  [b, c, c] -> [b] {- Mirror (Input 3) -}
  [c, c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b] -> [c, b, b] {- Input 1 -}
  [b] -> [a, a, c] {- Input 2 -}
  [c, c, a] -> [a] {- Input 3 -}
  [c, c, b] -> [b] {- Input 3 -}
  [c, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b] ->= [a, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [c#, b, b] {- DP (Top 0) (Input 1) -}
  [b#] |-> [a#, a, c] {- DP (Top 0) (Input 2) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [b#] |-> [c#] {- DP (Top 2) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b] ->= [a, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [b#] |-> [a#, a, c] {- DP (Top 0) (Input 2) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [b#, b] {- DP (Top 1) (Input 1) -}
  [b#] |-> [a#, a, c] {- DP (Top 0) (Input 2) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b] ->= [a, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0 1 1 \
        | 0 1 0 |
        \ 0 0 1 / )
  ( b
  , Wk  / 1 0 1 \
        | 1 0 2 |
        \ 0 0 1 / )
  ( c
  , Wk  / 1 0 1 \
        | 1 0 0 |
        \ 0 0 1 / )
  ( a#
  , Wk  / 0 6 0 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( b#
  , Wk  / 6 0 0 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [b#] |-> [a#, a, c] {- DP (Top 0) (Input 2) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b] ->= [a, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b] {- DP Nontop (Input 1) -}
  [b] ->= [a, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(8,3)\Deepee(5/8,6)\Weight\EDG(3/8,5)\Matrix{\Natural}{3}(2/8,5)\Weight(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.618028573000
  min duration 0.477422243000
  total durat. 1.095450816000
**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 23 , num_strict_rules = 23 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 9 , total_length = 124} , self = 48 , parent = Nothing
F        , duration = 0.107533219000 , status = Fail , start = 2025-09-03 11:15:04.899839121
F        UTC , finish = 2025-09-03 11:15:05.00737234 UTC , thread_cap_info = ("ThreadId
F        70", 0, False)}
F        
F        
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
F        alphabet_size = 5 , total_length = 41} , self = 68 , parent = Nothing ,
F        duration = 0.322455363000 , status = Fail , start = 2025-09-03 11:15:05.044241872
F        UTC , finish = 2025-09-03 11:15:05.366697235 UTC , thread_cap_info = ("ThreadId
F        104", 3, False)}
F        
| F      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| F      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| F      = 5 , total_length = 41} , self = 73 , parent = Nothing , duration = 0.618028573000
| F      , status = Fail , start = 2025-09-03 11:15:05.050168209 UTC , finish =
| F      2025-09-03 11:15:05.668196782 UTC , thread_cap_info = ("ThreadId 106",
| F      3, False)}
| F      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | F    alphabet_size = 4 , total_length = 39} , self = 67 , parent = Nothing ,
| | F    duration = 0.117182628000 , status = Fail , start = 2025-09-03 11:15:05.130940578
| | F    UTC , finish = 2025-09-03 11:15:05.248123206 UTC , thread_cap_info = ("ThreadId
| | F    107", 3, False)}
| | F    
| | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | F  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | F  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | F  = 4 , total_length = 39} , self = 69 , parent = Nothing , duration = 0.477422243000
| | | F  , status = Fail , start = 2025-09-03 11:15:05.155696056 UTC , finish =
| | | F  2025-09-03 11:15:05.633118299 UTC , thread_cap_info = ("ThreadId 109",
| | | F  3, False)}
| | | F  
| | F |  
| | F |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | F |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | F |  = 4 , total_length = 39} , self = 71 , parent = Nothing , duration = 0.388215794000
| | F |  , status = Fail , start = 2025-09-03 11:15:05.248158608 UTC , finish =
| | F |  2025-09-03 11:15:05.636374402 UTC , thread_cap_info = ("ThreadId 110",
| | F |  3, False)}
| | F |  
F | | |  
S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
S | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
S | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
S | | |  = 5 , total_length = 41} , self = 70 , parent = Nothing , duration = 0.266990161000
S | | |  , status = Success , start = 2025-09-03 11:15:05.366728258 UTC , finish
S | | |  = 2025-09-03 11:15:05.633718419 UTC , thread_cap_info = ("ThreadId 115",
S | | |  3, False)}
S | | |  
| | | F  
S | |    
  | F    
  F      
