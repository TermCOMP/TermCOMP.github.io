last 1915 length 7983
last 2131 length 8918
CNF 2131 vars 8918 clauses
CNF 1915 vars 7983 clauses
last 752 length 2939
CNF 752 vars 2939 clauses
last 617 length 2502
last 652 length 2605
last 588 length 2322
CNF 652 vars 2605 clauses
CNF 617 vars 2502 clauses
CNF 588 vars 2322 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2520, clauses: 9389
last 2520 length 9389
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2372, clauses: 8679
last 2372 length 8679
CNF 2520 vars 9389 clauses
CNF 2372 vars 8679 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6450, clauses: 26767
last 6450 length 26767
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2520, clauses: 9389, status: Satisfied, time: 0.074484275s
CNF 6450 vars 26767 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2372, clauses: 8679, status: Satisfied, time: 0.065706488s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6402, clauses: 26589
last 6402 length 26589
CNF 6402 vars 26589 clauses
last 430 length 1719
last 401 length 1640
CNF 401 vars 1640 clauses
CNF 430 vars 1719 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5203
last 1456 length 5203
last 586 length 2385
last 636 length 2547
CNF 636 vars 2547 clauses
CNF 586 vars 2385 clauses
CNF 1456 vars 5203 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5013, clauses: 20847
last 5013 length 20847
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5203, status: Unsatisfied, time: 0.058793024s
CNF 5013 vars 20847 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8254
last 2266 length 8254
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3048, clauses: 12284
CNF 2266 vars 8254 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6356, clauses: 26413
last 3048 length 12284
last 6356 length 26413
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8254, status: Satisfied, time: 0.048593068s
CNF 6356 vars 26413 clauses
CNF 3048 vars 12284 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5013, clauses: 20847, status: Unsatisfied, time: 0.21551747s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2389, clauses: 9028
last 2389 length 9028
CNF 2389 vars 9028 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 5 strict rules and 3 weak rules on 4 letters       EDG
SRS with 5 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 3 weak rules on 4 letters       EDG
SRS with 4 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 3 weak rules on 4 letters       weights
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b] -> [a, a, a] {- Input 0 -}
  [a, a, b] -> [b] {- Input 1 -}
  [a, b, a] -> [a, b, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b] -> [a, a, a] {- Mirror (Input 0) -}
  [b, a, a] -> [b] {- Mirror (Input 1) -}
  [a, b, a] -> [b, b, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 7A 8A 10A - \
        | 7A 8A 10A - |
        | 7A 8A 10A - |
        \ -  -  -   - / )
  ( b#
  , Wk  / 7A 8A 8A - \
        | 7A 8A 8A - |
        | 7A 8A 8A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 3A 4A 4A - \
        | 3A 4A 4A - |
        | 3A 4A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, b] ->= [a, a, a] {- DP Nontop (Mirror (Input 0)) -}
      [b, a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
      [a, b, a] ->= [b, b, a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee\EDG(5/3,4)\Matrix{\Arctic}{3}\EDG(4/3,4)\Matrix{\Arctic}{3}(3/3,4)\Weight\EDG(1/3,3)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 9.742495216000
  min duration 0.122398488000
  total durat. 13.541602661000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 15}
    , self = 48
    , parent = Nothing
    , duration = 3.676708957000
    , status = Fail
    , start = 2025-09-03 10:45:17.514953119 UTC
    , finish = 2025-09-03 10:45:21.191662076 UTC
    , thread_cap_info = ("ThreadId 49", 0, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 15}
    , self = 49
    , parent = Nothing
    , duration = 9.742495216000
    , status = Fail
    , start = 2025-09-03 10:45:17.514959204 UTC
    , finish = 2025-09-03 10:45:27.25745442 UTC
    , thread_cap_info = ("ThreadId 51", 0, False)}
**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 2 , total_length = 15} , self = 48 , parent = Nothing
F        , duration = 3.676708957000 , status = Fail , start = 2025-09-03 10:45:17.514953119
F        UTC , finish = 2025-09-03 10:45:21.191662076 UTC , thread_cap_info = ("ThreadId
F        49", 0, False)}
F        
| F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F      = 0 , alphabet_size = 2 , total_length = 15} , self = 49 , parent = Nothing
| F      , duration = 9.742495216000 , status = Fail , start = 2025-09-03 10:45:17.514959204
| F      UTC , finish = 2025-09-03 10:45:27.25745442 UTC , thread_cap_info = ("ThreadId
| F      51", 0, False)}
| F      
| | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F    = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | F    = 0 , alphabet_size = 4 , total_length = 84} , self = 47 , parent = Nothing
| | F    , duration = 0.122398488000 , status = Fail , start = 2025-09-03 10:45:17.542297567
| | F    UTC , finish = 2025-09-03 10:45:17.664696055 UTC , thread_cap_info = ("ThreadId
| | F    73", 3, False)}
| | F    
| | F    
F |      
  F      
S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S        = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
S        = 4 , total_length = 42} , self = 67 , parent = Nothing , duration = 0.153171473000
S        , status = Success , start = 2025-09-03 10:45:27.275654181 UTC , finish
S        = 2025-09-03 10:45:27.428825654 UTC , thread_cap_info = ("ThreadId 101",
S        0, False)}
S        
| S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S      = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| S      = 4 , total_length = 37} , self = 69 , parent = Nothing , duration = 0.170331485000
| S      , status = Success , start = 2025-09-03 10:45:27.309381286 UTC , finish
| S      = 2025-09-03 10:45:27.479712771 UTC , thread_cap_info = ("ThreadId 106",
| S      0, False)}
| S      
| | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | E    = 4 , total_length = 42} , self = 71 , parent = Nothing , duration = 0.158709001000
| | E    , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:27.329058629
| | E    UTC , finish = 2025-09-03 10:45:27.48776763 UTC , thread_cap_info = ("ThreadId
| | E    107", 0, False)}
| | E    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | E  = 4 , total_length = 37} , self = 76 , parent = Nothing , duration = 0.147322551000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:27.353842668
| | | E  UTC , finish = 2025-09-03 10:45:27.501165219 UTC , thread_cap_info = ("ThreadId
| | | E  108", 0, False)}
| | | E  
S | | |  
  S | |  
    E |  
      E  
F        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
F        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
F        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
F        = 3 , total_length = 21} , self = 88 , parent = Nothing , duration = 0.298076616000
F        , status = Fail , start = 2025-09-03 10:45:27.504645367 UTC , finish =
F        2025-09-03 10:45:27.802721983 UTC , thread_cap_info = ("ThreadId 124",
F        0, False)}
F        
| S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S      = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| S      = 4 , total_length = 34} , self = 86 , parent = Nothing , duration = 0.164035714000
| S      , status = Success , start = 2025-09-03 10:45:27.588389575 UTC , finish
| S      = 2025-09-03 10:45:27.752425289 UTC , thread_cap_info = ("ThreadId 132",
| S      0, False)}
| S      
| | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | E    = 4 , total_length = 34} , self = 89 , parent = Nothing , duration = 0.211504039000
| | E    , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:27.591310038
| | E    UTC , finish = 2025-09-03 10:45:27.802814077 UTC , thread_cap_info = ("ThreadId
| | E    133", 0, False)}
| | E    
| S |    
F   |    
    E    
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3048, clauses: 12284, status: Unsatisfied, time: 0.119696899s
