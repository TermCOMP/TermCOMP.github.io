last 746 length 3014
last 814 length 3241
CNF 746 vars 3014 clauses
last 5544 length 27065
CNF 814 vars 3241 clauses
last 623 length 2458
last 609 length 2545
CNF 5544 vars 27065 clauses
last 4342 length 19735
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 7926
CNF 623 vars 2458 clauses
CNF 609 vars 2545 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9191
CNF 4342 vars 19735 clauses
last 2168 length 7926
last 2484 length 9191
CNF 2168 vars 7926 clauses
CNF 2484 vars 9191 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6258, clauses: 25782
last 6258 length 25782
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5625, clauses: 23103
last 5625 length 23103
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 7926, status: Satisfied, time: 0.123307962s
CNF 6258 vars 25782 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9191, status: Satisfied, time: 0.120400791s
last 584 length 2479
last 536 length 2225
CNF 536 vars 2225 clauses
CNF 584 vars 2479 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1944, clauses: 6920
last 1944 length 6920
CNF 1944 vars 6920 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5533, clauses: 22745
last 5533 length 22745
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1944, clauses: 6920, status: Satisfied, time: 0.052476613s
CNF 5533 vars 22745 clauses
last 595 length 2364
last 744 length 2972
CNF 744 vars 2972 clauses
CNF 595 vars 2364 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2378, clauses: 8730
last 2378 length 8730
CNF 2378 vars 8730 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6212, clauses: 25606
last 6212 length 25606
CNF 6212 vars 25606 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 6 strict rules and 5 weak rules on 6 letters       weights
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       EDG
SRS with 2 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, c, a, c] {- Input 1 -}
  [c, c] -> [b, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [c, c, a, c] {- Input 1 -}
  [c, c] -> [b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [c, a, c, c] {- Mirror (Input 1) -}
  [c, c] -> [a, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, c, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, c] |-> [a#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 7A 7A 8A - \
        | 7A 7A 8A - |
        | 7A 7A 8A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [c, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(6/5,6)\Weight\EDG(4/5,5)\Matrix{\Arctic}{3}\EDG(2/5,5)\Matrix{\Arctic}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2378, clauses: 8730, status: Satisfied, time: 0.06467292s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                  = 12} , self = 90 , parent = Nothing , duration = 0.538352343000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.236148827 UTC ,
E                  finish = 2025-09-03 11:01:25.77450117 UTC , thread_cap_info = ("ThreadId
E                  35", 3, False)}
E                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E                = 12} , self = 89 , parent = Nothing , duration = 0.535662541000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.236201294 UTC ,
| E                finish = 2025-09-03 11:01:25.771863835 UTC , thread_cap_info = ("ThreadId
| E                43", 1, False)}
| E                
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 162} , self = 65 , parent = Nothing , duration = 0.186523487000 , status
| | F              = Fail , start = 2025-09-03 11:01:25.243756919 UTC , finish = 2025-09-03
| | F              11:01:25.430280406 UTC , thread_cap_info = ("ThreadId 51", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 162} , self = 62 , parent = Nothing , duration = 0.167311134000 , status
| | | F            = Fail , start = 2025-09-03 11:01:25.248632278 UTC , finish = 2025-09-03
| | | F            11:01:25.415943412 UTC , thread_cap_info = ("ThreadId 53", 0, False)}
| | | F            
| | | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S          = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | S          = 5 , total_length = 39} , self = 66 , parent = Nothing , duration = 0.184117322000
| | | | S          , status = Success , start = 2025-09-03 11:01:25.35375436 UTC , finish
| | | | S          = 2025-09-03 11:01:25.537871682 UTC , thread_cap_info = ("ThreadId 96",
| | | | S          2, False)}
| | | | S          
| | | | | E        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | E        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | E        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | E        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | E        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | E        = 0 , alphabet_size = 9 , total_length = 162} , self = 91 , parent = Nothing
| | | | | E        , duration = 0.392189822000 , status = Except "AsyncCancelled" , start
| | | | | E        = 2025-09-03 11:01:25.382379802 UTC , finish = 2025-09-03 11:01:25.774569624
| | | | | E        UTC , thread_cap_info = ("ThreadId 92", 3, False)}
| | | | | E        
| | | | | | E      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | E      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | E      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | E      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | E      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | E      = 0 , alphabet_size = 9 , total_length = 162} , self = 92 , parent = Nothing
| | | | | | E      , duration = 0.392345389000 , status = Except "AsyncCancelled" , start
| | | | | | E      = 2025-09-03 11:01:25.38591605 UTC , finish = 2025-09-03 11:01:25.778261439
| | | | | | E      UTC , thread_cap_info = ("ThreadId 94", 3, False)}
| | | | | | E      
| | | | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S    = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | | | S    alphabet_size = 5 , total_length = 45} , self = 73 , parent = Nothing ,
| | | | | | | S    duration = 0.158981450000 , status = Success , start = 2025-09-03 11:01:25.392458087
| | | | | | | S    UTC , finish = 2025-09-03 11:01:25.551439537 UTC , thread_cap_info = ("ThreadId
| | | | | | | S    101", 2, False)}
| | | | | | | S    
| | | F | | | |    
| | | E | | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E | | | |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | E | | | |    = 5 , total_length = 45} , self = 77 , parent = Nothing , duration = 0.165962766000
| | | E | | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.422352214
| | | E | | | |    UTC , finish = 2025-09-03 11:01:25.58831498 UTC , thread_cap_info = ("ThreadId
| | | E | | | |    105", 2, False)}
| | | E | | | |    
| | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | | | E  = 5 , total_length = 39} , self = 68 , parent = Nothing , duration = 0.114101894000
| | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.424020117
| | | | | | | | E  UTC , finish = 2025-09-03 11:01:25.538122011 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  107", 2, False)}
| | | | | | | | E  
| | F | | | | | |  
| |   | S | | | |  
| |   |   | | | E  
| |   |   | | S    
| |   E   | |      
| E       | |      
E         | |      
          E |      
            E      
