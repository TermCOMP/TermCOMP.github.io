last 819 length 3271
CNF 819 vars 3271 clauses
last 695 length 2918
CNF 695 vars 2918 clauses
last 684 length 2778
last 638 length 2685
CNF 684 vars 2778 clauses
CNF 638 vars 2685 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2538, clauses: 9308
last 2538 length 9308
last 9152 length 65560
CNF 2538 vars 9308 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2306, clauses: 8280
last 2306 length 8280
CNF 2306 vars 8280 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2306, clauses: 8280, status: Satisfied, time: 0.065060722s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2538, clauses: 9308, status: Satisfied, time: 0.147490303s
CNF 9152 vars 65560 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 5 strict rules and 7 weak rules on 5 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b, b] -> [b, b, b, c, a, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, c, b, b, b] {- Mirror (Input 1) -}
  [c, b] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, c, b, b, b] {- Mirror (Input 1) -}
  [a, c, b] -> [a] {- Mirror (Input 2) -}
  [b, c, b] -> [b] {- Mirror (Input 2) -}
  [c, c, b] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b, b] -> [b, b, b, c, a, a] {- Input 1 -}
  [b, c, a] -> [a] {- Input 2 -}
  [b, c, b] -> [b] {- Input 2 -}
  [b, c, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, b, b] |-> [b#, b, b, c, a, a] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [b#, b, c, a, a] {- DP (Top 1) (Input 1) -}
  [a#, b, b] |-> [b#, c, a, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 18A 19A 21A - \
        | 18A 19A 21A - |
        | 18A 19A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(7,3)\Deepee(5/7,5)\Weight\EDG(2/7,4)\Matrix{\Arctic}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 0.606124862000
  min duration 0.204506696000
  total durat. 1.020967833000
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 12} , self = 36 , parent = Nothing , duration = 0.204628073000 , status
F          = Fail , start = 2025-09-03 11:19:30.488579145 UTC , finish = 2025-09-03
F          11:19:30.693207218 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 9 , total_length = 162} , self = 76 , parent = Nothing
| F        , duration = 0.606124862000 , status = Fail , start = 2025-09-03 11:19:30.489902979
| F        UTC , finish = 2025-09-03 11:19:31.096027841 UTC , thread_cap_info = ("ThreadId
| F        53", 0, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 12} , self = 38 , parent = Nothing
| | F      , duration = 0.204506696000 , status = Fail , start = 2025-09-03 11:19:30.577897787
| | F      UTC , finish = 2025-09-03 11:19:30.782404483 UTC , thread_cap_info = ("ThreadId
| | F      72", 2, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 3 , total_length = 12} , self = 41 , parent = Nothing
| | | F    , duration = 0.210336275000 , status = Fail , start = 2025-09-03 11:19:30.598268929
| | | F    UTC , finish = 2025-09-03 11:19:30.808605204 UTC , thread_cap_info = ("ThreadId
| | | F    74", 2, False)}
| | | F    
F | | |    
  | F |    
  |   F    
S |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |        = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
S |        alphabet_size = 4 , total_length = 45} , self = 65 , parent = Nothing ,
S |        duration = 0.242711175000 , status = Success , start = 2025-09-03 11:19:30.836242502
S |        UTC , finish = 2025-09-03 11:19:31.078953677 UTC , thread_cap_info = ("ThreadId
S |        97", 2, False)}
S |        
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | E      = 4 , total_length = 45} , self = 68 , parent = Nothing , duration = 0.240666442000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:19:30.838495795
| | E      UTC , finish = 2025-09-03 11:19:31.079162237 UTC , thread_cap_info = ("ThreadId
| | E      99", 2, False)}
| | E      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | S    = 4 , total_length = 39} , self = 62 , parent = Nothing , duration = 0.119714791000
| | | S    , status = Success , start = 2025-09-03 11:19:30.903807218 UTC , finish
| | | S    = 2025-09-03 11:19:31.023522009 UTC , thread_cap_info = ("ThreadId 101",
| | | S    2, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | E  = 4 , total_length = 39} , self = 67 , parent = Nothing , duration = 0.169371549000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:19:30.909596767
| | | | E  UTC , finish = 2025-09-03 11:19:31.078968316 UTC , thread_cap_info = ("ThreadId
| | | | E  102", 2, False)}
| | | | E  
| | | S |  
S | |   |  
  | |   E  
  | E      
  F        
