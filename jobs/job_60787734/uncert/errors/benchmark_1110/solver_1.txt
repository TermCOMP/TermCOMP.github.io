last 5533 length 35649
last 5090 length 26053
CNF 5533 vars 35649 clauses
CNF 5090 vars 26053 clauses
last 870 length 3748
CNF 870 vars 3748 clauses
last 601 length 2374
last 949 length 3941
last 553 length 2310
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2592, clauses: 9656
CNF 553 vars 2310 clauses
CNF 949 vars 3941 clauses
last 2592 length 9656
CNF 2592 vars 9656 clauses
CNF 601 vars 2374 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2100, clauses: 7700
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2592, clauses: 9656, status: Satisfied, time: 0.068890225s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6843, clauses: 28307
last 2100 length 7700
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6136, clauses: 25367
last 502 length 2057
last 619 length 2562
CNF 2100 vars 7700 clauses
last 6136 length 25367
CNF 502 vars 2057 clauses
CNF 619 vars 2562 clauses
CNF 6136 vars 25367 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2100, clauses: 7700, status: Satisfied, time: 0.05645405s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2079, clauses: 7397
last 2079 length 7397
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6136, clauses: 25367, status: Satisfied, time: 0.105088611s
CNF 2079 vars 7397 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5830, clauses: 24028
last 5830 length 24028
last 542 length 2296
last 540 length 2159
CNF 542 vars 2296 clauses
CNF 5830 vars 24028 clauses
CNF 540 vars 2159 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2079, clauses: 7397, status: Satisfied, time: 0.083517678s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1985, clauses: 7176
last 1985 length 7176
CNF 1985 vars 7176 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6089, clauses: 25188
last 6089 length 25188
CNF 6089 vars 25188 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       EDG
SRS with 2 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, c, a, a, a] {- Input 1 -}
  [c, a] -> [b] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, c, a, a, a] {- Input 1 -}
  [c, a] -> [b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, a, c, b] {- Mirror (Input 1) -}
  [a, c] -> [b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, c] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, c, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, c, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, c, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, c, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 21A 22A 22A - \
        | 21A 22A 22A - |
        | 21A 22A 22A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 21A 21A 23A - \
        | 21A 21A 23A - |
        | 21A 21A 23A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee\EDG(5/5,5)\Matrix{\Arctic}{3}\EDG(2/5,5)\Matrix{\Arctic}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E          = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E          = 12} , self = 90 , parent = Nothing , duration = 0.810789873000 , status
E          = Except "AsyncCancelled" , start = 2025-09-03 10:59:46.85291307 UTC ,
E          finish = 2025-09-03 10:59:47.663702943 UTC , thread_cap_info = ("ThreadId
E          22", 2, False)}
E          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 3 , total_length = 12} , self = 38 , parent = Nothing
| F        , duration = 0.145422471000 , status = Fail , start = 2025-09-03 10:59:46.853051672
| F        UTC , finish = 2025-09-03 10:59:46.998474143 UTC , thread_cap_info = ("ThreadId
| F        49", 0, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 12} , self = 48 , parent = Nothing
| | F      , duration = 0.230219664000 , status = Fail , start = 2025-09-03 10:59:46.85305595
| | F      UTC , finish = 2025-09-03 10:59:47.083275614 UTC , thread_cap_info = ("ThreadId
| | F      51", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 162} , self = 47 , parent = Nothing , duration = 0.218636292000 , status
| | | F    = Fail , start = 2025-09-03 10:59:46.859499041 UTC , finish = 2025-09-03
| | | F    10:59:47.078135333 UTC , thread_cap_info = ("ThreadId 59", 1, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | F  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F  = 162} , self = 46 , parent = Nothing , duration = 0.212763219000 , status
| | | | F  = Fail , start = 2025-09-03 10:59:46.863695812 UTC , finish = 2025-09-03
| | | | F  10:59:47.076459031 UTC , thread_cap_info = ("ThreadId 61", 1, False)}
| | | | F  
| F | | |  
|   | | F  
|   | F    
|   F      
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| S        alphabet_size = 5 , total_length = 48} , self = 66 , parent = Nothing ,
| S        duration = 0.177164575000 , status = Success , start = 2025-09-03 10:59:47.13311245
| S        UTC , finish = 2025-09-03 10:59:47.310277025 UTC , thread_cap_info = ("ThreadId
| S        102", 0, False)}
| S        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | S      = 4 , total_length = 35} , self = 75 , parent = Nothing , duration = 0.255163051000
| | S      , status = Success , start = 2025-09-03 10:59:47.168867327 UTC , finish
| | S      = 2025-09-03 10:59:47.424030378 UTC , thread_cap_info = ("ThreadId 107",
| | S      0, False)}
| | S      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | E    = 5 , total_length = 48} , self = 68 , parent = Nothing , duration = 0.125889717000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:47.184680753
| | | E    UTC , finish = 2025-09-03 10:59:47.31057047 UTC , thread_cap_info = ("ThreadId
| | | E    108", 0, False)}
| | | E    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | S  = 4 , total_length = 35} , self = 76 , parent = Nothing , duration = 0.207392272000
| | | | S  , status = Success , start = 2025-09-03 10:59:47.221247056 UTC , finish
| | | | S  = 2025-09-03 10:59:47.428639328 UTC , thread_cap_info = ("ThreadId 109",
| | | | S  0, False)}
| | | | S  
| S | | |  
|   | E |  
| S |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |   |  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S |   |  = 5 , total_length = 31} , self = 84 , parent = Nothing , duration = 0.172337848000
| S |   |  , status = Success , start = 2025-09-03 10:59:47.340242121 UTC , finish
| S |   |  = 2025-09-03 10:59:47.512579969 UTC , thread_cap_info = ("ThreadId 120",
| S |   |  0, False)}
| S |   |  
| | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E |  = 5 , total_length = 31} , self = 87 , parent = Nothing , duration = 0.232533188000
| | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:47.393110864
| | | E |  UTC , finish = 2025-09-03 10:59:47.625644052 UTC , thread_cap_info = ("ThreadId
| | | E |  121", 0, False)}
| | | E |  
| | S | |  
| |   | S  
| S   |    
|     E    
E          
