last 1926 length 9497
CNF 1926 vars 9497 clauses
last 1954 length 8921
CNF 1954 vars 8921 clauses
last 5400 length 24424
CNF 5400 vars 24424 clauses
last 8250 length 35558
last 7900 length 36247
CNF 7900 vars 36247 clauses
CNF 8250 vars 35558 clauses
last 1073 length 4357
last 947 length 4013
CNF 1073 vars 4357 clauses
CNF 947 vars 4013 clauses
last 1117 length 5423
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 10094
last 2607 length 10094
CNF 1117 vars 5423 clauses
last 1137 length 5027
CNF 2607 vars 10094 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6203, clauses: 25752
CNF 1137 vars 5027 clauses
last 6203 length 25752
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9322, clauses: 39100
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 10094, status: Satisfied, time: 0.101274432s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2375, clauses: 9171
last 14610 length 67639
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9803, clauses: 40575
CNF 6203 vars 25752 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6153, clauses: 25544
last 9322 length 39100
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21863, clauses: 91468
last 2375 length 9171
last 9803 length 40575
last 6153 length 25544
last 21863 length 91468
CNF 14610 vars 67639 clauses
last 994 length 4054
last 911 length 3891
CNF 2375 vars 9171 clauses
CNF 9322 vars 39100 clauses
CNF 6153 vars 25544 clauses
CNF 21863 vars 91468 clauses
CNF 994 vars 4054 clauses
CNF 9803 vars 40575 clauses
CNF 911 vars 3891 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2375, clauses: 9171, status: Satisfied, time: 0.216451294s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9322, clauses: 39100, status: Satisfied, time: 0.391778061s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6153, clauses: 25544, status: Satisfied, time: 0.391638324s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9803, clauses: 40575, status: Satisfied, time: 0.449329553s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2501, clauses: 9579
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 22058, clauses: 92215
**************************************************
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6157, clauses: 25576
last 2501 length 9579
last 22058 length 92215
last 6157 length 25576
summary
CNF 2501 vars 9579 clauses
last 2698 length 12429
**************************************************
CNF 22058 vars 92215 clauses
SRS with 3 rules on 2 letters       mirror
CNF 6157 vars 25576 clauses
last 3053 length 14888
CNF 2698 vars 12429 clauses
SRS with 3 rules on 2 letters       context
SRS with 4 rules on 2 letters       mirror
SRS with 4 rules on 2 letters       DP
SRS with 5 strict rules and 4 weak rules on 4 letters       EDG
SRS with 5 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 4 letters       weights
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b, a] -> [b, b, a, a, a] {- Input 1 -}
  [b] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [a, b, a, a] -> [a, a, a, b, b] {- Mirror (Input 1) -}
  [b] -> [a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [a, b, a, a] -> [a, a, a, b, b] {- Mirror (Input 1) -}
  [b] -> [a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, a, b, a] -> [b, b, a, a, a] {- Input 1 -}
  [b] -> [a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b, a] ->= [b, b, a, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [a] {- DP Nontop (Input 2) -}
  [a#, a, b, a] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b, a] |-> [a#, a, a] {- DP (Top 2) (Input 1) -}
  [a#, a, b, a] |-> [b#, a, a, a] {- DP (Top 1) (Input 1) -}
  [a#, a, b, a] |-> [b#, b, a, a, a] {- DP (Top 0) (Input 1) -}
  [b#] |-> [a#] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b, a] |-> [a#, a, a] {- DP (Top 2) (Input 1) -}
  [a#, a, b, a] |-> [b#, a, a, a] {- DP (Top 1) (Input 1) -}
  [b#] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a#, a, b, a] |-> [b#, b, a, a, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b, a] ->= [b, b, a, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 3A 3A 4A - \
        | 3A 3A 4A - |
        | 3A 3A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b, a] ->= [b, b, a, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b, a] ->= [b, b, a, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Context\Mirror(4,2)\Deepee\EDG(5/4,4)\Matrix{\Arctic}{3}(1/4,4)\Weight(0/4,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 3053 vars 14888 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 1.376813423000
  min duration 0.062797866000
  total durat. 2.860306066000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 46
      , num_strict_rules = 34
      , num_top_rules = 34
      , num_weak_rules = 12
      , alphabet_size = 8
      , total_length = 310}
    , self = 91
    , parent = Nothing
    , duration = 1.376813423000
    , status = Fail
    , start = 2025-09-03 10:58:24.888224819 UTC
    , finish = 2025-09-03 10:58:26.265038242 UTC
    , thread_cap_info = ("ThreadId 97", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.753988552000
  min duration 0.042193711000
  total durat. 2.028632512000
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 2.063326932000
  min duration 0.185947511000
  total durat. 4.018122155000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 12
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 72}
    , self = 49
    , parent = Nothing
    , duration = 1.072599112000
    , status = Fail
    , start = 2025-09-03 10:58:23.748228798 UTC
    , finish = 2025-09-03 10:58:24.82082791 UTC
    , thread_cap_info = ("ThreadId 78", 3, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 12}
    , self = 66
    , parent = Nothing
    , duration = 2.063326932000
    , status = Fail
    , start = 2025-09-03 10:58:23.728229682 UTC
    , finish = 2025-09-03 10:58:25.791556614 UTC
    , thread_cap_info = ("ThreadId 69", 1, False)}
**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F            = 12} , self = 47 , parent = Nothing , duration = 0.585348085000 , status
F            = Fail , start = 2025-09-03 10:58:23.621390035 UTC , finish = 2025-09-03
F            10:58:24.20673812 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F          = 72} , self = 40 , parent = Nothing , duration = 0.137362954000 , status
| F          = Fail , start = 2025-09-03 10:58:23.62940163 UTC , finish = 2025-09-03
| F          10:58:23.766764584 UTC , thread_cap_info = ("ThreadId 52", 0, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 2 , total_length = 12} , self = 46 , parent = Nothing
| | F        , duration = 0.185947511000 , status = Fail , start = 2025-09-03 10:58:23.709638764
| | F        UTC , finish = 2025-09-03 10:58:23.895586275 UTC , thread_cap_info = ("ThreadId
| | F        67", 1, False)}
| | F        
| | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | F      = 0 , alphabet_size = 2 , total_length = 12} , self = 66 , parent = Nothing
| | | F      , duration = 2.063326932000 , status = Fail , start = 2025-09-03 10:58:23.728229682
| | | F      UTC , finish = 2025-09-03 10:58:25.791556614 UTC , thread_cap_info = ("ThreadId
| | | F      69", 1, False)}
| | | F      
| | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F    = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | | F    = 0 , alphabet_size = 4 , total_length = 72} , self = 48 , parent = Nothing
| | | | F    , duration = 0.696248600000 , status = Fail , start = 2025-09-03 10:58:23.728234247
| | | | F    UTC , finish = 2025-09-03 10:58:24.424482847 UTC , thread_cap_info = ("ThreadId
| | | | F    76", 3, False)}
| | | | F    
| | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F  = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | | | F  = 0 , alphabet_size = 4 , total_length = 72} , self = 49 , parent = Nothing
| | | | | F  , duration = 1.072599112000 , status = Fail , start = 2025-09-03 10:58:23.748228798
| | | | | F  UTC , finish = 2025-09-03 10:58:24.82082791 UTC , thread_cap_info = ("ThreadId
| | | | | F  78", 3, False)}
| | | | | F  
| F | | | |  
|   F | | |  
F     | | |  
      | F |  
      |   F  
F     |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F     |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     |      = False\n , verbose = False}" , input_size = Size { num_rules = 46 , num_strict_rules
F     |      = 34 , num_top_rules = 34 , num_weak_rules = 12 , alphabet_size = 8 , total_length
F     |      = 310} , self = 65 , parent = Nothing , duration = 0.753988552000 , status
F     |      = Fail , start = 2025-09-03 10:58:24.837692111 UTC , finish = 2025-09-03
F     |      10:58:25.591680663 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
F     |      
| F   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   |      = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| F   |      = 30 , num_top_rules = 30 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| F   |      = 286} , self = 64 , parent = Nothing , duration = 0.723246286000 , status
| F   |      = Fail , start = 2025-09-03 10:58:24.848227966 UTC , finish = 2025-09-03
| F   |      10:58:25.571474252 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| F   |      
| | F |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |      = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| | F |      = 30 , num_top_rules = 30 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | F |      = 286} , self = 63 , parent = Nothing , duration = 0.567048561000 , status
| | F |      = Fail , start = 2025-09-03 10:58:24.870637679 UTC , finish = 2025-09-03
| | F |      10:58:25.43768624 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | F |      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 46 , num_strict_rules
| | | | F    = 34 , num_top_rules = 34 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | | F    = 310} , self = 91 , parent = Nothing , duration = 1.376813423000 , status
| | | | F    = Fail , start = 2025-09-03 10:58:24.888224819 UTC , finish = 2025-09-03
| | | | F    10:58:26.265038242 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
| | | | F    
| | F | |    
| F   | |    
F     | |    
      F |    
F       |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F       |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
F       |    = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F       |    = 49} , self = 83 , parent = Nothing , duration = 0.171740317000 , status
F       |    = Fail , start = 2025-09-03 10:58:25.824079362 UTC , finish = 2025-09-03
F       |    10:58:25.995819679 UTC , thread_cap_info = ("ThreadId 122", 1, False)}
F       |    
| F     |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F     |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F     |    = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F     |    = 49} , self = 82 , parent = Nothing , duration = 0.141769642000 , status
| F     |    = Fail , start = 2025-09-03 10:58:25.824085518 UTC , finish = 2025-09-03
| F     |    10:58:25.96585516 UTC , thread_cap_info = ("ThreadId 123", 1, False)}
| F     |    
| | S   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S   |    = 10 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 4 ,
| | S   |    alphabet_size = 4 , total_length = 54} , self = 84 , parent = Nothing ,
| | S   |    duration = 0.317174220000 , status = Success , start = 2025-09-03 10:58:25.862121734
| | S   |    UTC , finish = 2025-09-03 10:58:26.179295954 UTC , thread_cap_info = ("ThreadId
| | S   |    126", 1, False)}
| | S   |    
| | | E |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E |    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size
| | | E |    = 4 , total_length = 54} , self = 86 , parent = Nothing , duration = 0.292253336000
| | | E |    , status = Except "AsyncCancelled" , start = 2025-09-03 10:58:25.887309934
| | | E |    UTC , finish = 2025-09-03 10:58:26.17956327 UTC , thread_cap_info = ("ThreadId
| | | E |    127", 1, False)}
| | | E |    
| F | | |    
| S | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | |    = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| S | | |    = 4 , total_length = 49} , self = 93 , parent = Nothing , duration = 0.625006717000
| S | | |    , status = Success , start = 2025-09-03 10:58:25.965891603 UTC , finish
| S | | |    = 2025-09-03 10:58:26.59089832 UTC , thread_cap_info = ("ThreadId 130",
| S | | |    1, False)}
| S | | |    
F | | | |    
E | | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
E | | | |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
E | | | |    = 4 , total_length = 49} , self = 96 , parent = Nothing , duration = 0.605002152000
E | | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 10:58:26.048227418
E | | | |    UTC , finish = 2025-09-03 10:58:26.65322957 UTC , thread_cap_info = ("ThreadId
E | | | |    131", 1, False)}
E | | | |    
| | S | |    
| |   E |    
| | F   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | F   |    = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F   |    = 49} , self = 92 , parent = Nothing , duration = 0.388345220000 , status
| | F   |    = Fail , start = 2025-09-03 10:58:26.179890099 UTC , finish = 2025-09-03
| | F   |    10:58:26.568235319 UTC , thread_cap_info = ("ThreadId 138", 3, False)}
| | F   |    
| | | F |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F |    = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F |    = 49} , self = 95 , parent = Nothing , duration = 0.431661018000 , status
| | | F |    = Fail , start = 2025-09-03 10:58:26.181862404 UTC , finish = 2025-09-03
| | | F |    10:58:26.613523422 UTC , thread_cap_info = ("ThreadId 139", 3, False)}
| | | F |    
| | | | F    
| | F |      
| S   |      
|     F      
E            
