last 1472 length 6551
CNF 1472 vars 6551 clauses
last 1850 length 8798
CNF 1850 vars 8798 clauses
last 1332 length 6014
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3589, clauses: 13003
CNF 1332 vars 6014 clauses
last 1472 length 6602
last 3589 length 13003
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9673, clauses: 39795
CNF 1472 vars 6602 clauses
CNF 3589 vars 13003 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3194, clauses: 11565
last 9673 length 39795
last 3194 length 11565
CNF 9673 vars 39795 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3589, clauses: 13003, status: Satisfied, time: 0.601318062s
CNF 3194 vars 11565 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9008, clauses: 37099
last 9008 length 37099
CNF 9008 vars 37099 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3194, clauses: 11565, status: Satisfied, time: 0.424088602s
last 820 length 3379
last 1025 length 4506
CNF 820 vars 3379 clauses
CNF 1025 vars 4506 clauses
last 1200 length 5506
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3285, clauses: 11600
last 3285 length 11600
CNF 1200 vars 5506 clauses
last 1400 length 6336
CNF 3285 vars 11600 clauses
CNF 1400 vars 6336 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3285, clauses: 11600, status: Satisfied, time: 0.085157928s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2681, clauses: 9648
last 2681 length 9648
CNF 2681 vars 9648 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2681, clauses: 9648, status: Satisfied, time: 0.139785048s
**************************************************
summary
**************************************************
SRS with 7 rules on 5 letters       weights
SRS with 5 rules on 5 letters       DP
SRS with 12 strict rules and 5 weak rules on 9 letters       weights
SRS with 5 strict rules and 5 weak rules on 9 letters       EDG
SRS with 5 strict rules and 5 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 5 weak rules on 9 letters       EDG
SRS with 4 strict rules and 5 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 5 weak rules on 9 letters       weights
SRS with 0 strict rules and 5 weak rules on 5 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [r, e] -> [w, r] {- Input 0 -}
  [i, t] -> [e, r] {- Input 1 -}
  [e, w] -> [r, i] {- Input 2 -}
  [t, e] -> [r, e] {- Input 3 -}
  [w, r] -> [i, t] {- Input 4 -}
  [e, r] -> [e, w] {- Input 5 -}
  [r, i, t, e, r] -> [e, w, r, i, t, e] {- Input 6 -}
reason
  (i, 0/1)
  (t, 1/1)
  (r, 2/3)
  (e, 1/3)
  (w, 1/3)
   property Termination
has value Just True
for SRS
  [r, e] -> [w, r] {- Input 0 -}
  [i, t] -> [e, r] {- Input 1 -}
  [e, w] -> [r, i] {- Input 2 -}
  [w, r] -> [i, t] {- Input 4 -}
  [r, i, t, e, r] -> [e, w, r, i, t, e] {- Input 6 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
  [i#, t] |-> [r#] {- DP (Top 1) (Input 1) -}
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [r#, i, t, e, r] |-> [i#, t, e] {- DP (Top 3) (Input 6) -}
  [r#, i, t, e, r] |-> [r#, i, t, e] {- DP (Top 2) (Input 6) -}
  [r#, i, t, e, r] |-> [e#] {- DP (Top 5) (Input 6) -}
  [r#, i, t, e, r] |-> [e#, w, r, i, t, e] {- DP (Top 0) (Input 6) -}
  [r#, i, t, e, r] |-> [w#, r, i, t, e] {- DP (Top 1) (Input 6) -}
  [r#, e] |-> [r#] {- DP (Top 1) (Input 0) -}
  [r#, e] |-> [w#, r] {- DP (Top 0) (Input 0) -}
  [e#, w] |-> [i#] {- DP (Top 1) (Input 2) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
reason
  (i, 0/1)
  (t, 1/1)
  (r, 2/3)
  (e, 1/3)
  (w, 1/3)
  (i#, 0/1)
  (r#, 2/3)
  (e#, 1/3)
  (w#, 1/3)
   property Termination
has value Just True
for SRS
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [r#, i, t, e, r] |-> [e#, w, r, i, t, e] {- DP (Top 0) (Input 6) -}
  [r#, e] |-> [w#, r] {- DP (Top 0) (Input 0) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [r#, i, t, e, r] |-> [e#, w, r, i, t, e] {- DP (Top 0) (Input 6) -}
  [r#, e] |-> [w#, r] {- DP (Top 0) (Input 0) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
reason
  ( i
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( t
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( r
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( e
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( w
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( i#
  , Wk  / 5A 5A 7A - \
        | 5A 5A 7A - |
        | 5A 5A 7A - |
        \ -  -  -  - / )
  ( r#
  , Wk  / 7A 10A 10A - \
        | 7A 10A 10A - |
        | 7A 10A 10A - |
        \ -  -   -   - / )
  ( e#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
  ( w#
  , Wk  / 6A 7A 9A - \
        | 6A 7A 9A - |
        | 6A 7A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [r#, e] |-> [w#, r] {- DP (Top 0) (Input 0) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [r#, e] |-> [w#, r] {- DP (Top 0) (Input 0) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
reason
  ( i
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( t
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( r
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( e
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( w
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( i#
  , Wk  / 10A 10A 12A - \
        | 10A 10A 12A - |
        | 10A 10A 12A - |
        \ -   -   -   - / )
  ( r#
  , Wk  / 12A 13A 13A - \
        | 12A 13A 13A - |
        | 12A 13A 13A - |
        \ -   -   -   - / )
  ( e#
  , Wk  / 12A 12A 13A - \
        | 12A 12A 13A - |
        | 12A 12A 13A - |
        \ -   -   -   - / )
  ( w#
  , Wk  / 12A 12A 13A - \
        | 12A 12A 13A - |
        | 12A 12A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [i#, t] |-> [e#, r] {- DP (Top 0) (Input 1) -}
  [e#, w] |-> [r#, i] {- DP (Top 0) (Input 2) -}
  [w#, r] |-> [i#, t] {- DP (Top 0) (Input 4) -}
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
reason
  (i, 0/1)
  (t, 0/1)
  (r, 0/1)
  (e, 0/1)
  (w, 0/1)
  (i#, 2/1)
  (r#, 0/1)
  (e#, 1/1)
  (w#, 3/1)
   property Termination
has value Just True
for SRS
  [r, e] ->= [w, r] {- DP Nontop (Input 0) -}
  [i, t] ->= [e, r] {- DP Nontop (Input 1) -}
  [e, w] ->= [r, i] {- DP Nontop (Input 2) -}
  [w, r] ->= [i, t] {- DP Nontop (Input 4) -}
  [r, i, t, e, r] ->= [e, w, r, i, t, e] {- DP Nontop (Input 6) -}
reason
  EDG

**************************************************
skeleton: (7,5)\Weight(5,5)\Deepee(12/5,9)\Weight\EDG(5/5,9)\Matrix{\Arctic}{3}\EDG(4/5,9)\Matrix{\Arctic}{3}(3/5,9)\Weight(0/5,5)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.720048507000
  min duration 0.106138333000
  total durat. 1.171307125000
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.834037947000
  min duration 0.013235859000
  total durat. 1.659917561000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 4
  max duration 0.961426736000
  min duration 0.299343434000
  total durat. 2.467036473000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.064820769000
  min duration 0.278204454000
  total durat. 2.536309303000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 5
      , alphabet_size = 9
      , total_length = 54}
    , self = 79
    , parent = Nothing
    , duration = 1.064820769000
    , status = Success
    , start = 2025-09-03 13:32:38.435548453 UTC
    , finish = 2025-09-03 13:32:39.500369222 UTC
    , thread_cap_info = ("ThreadId 95", 2, False)}
**************************************************
F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F            = Size { num_rules = 120 , num_strict_rules = 120 , num_top_rules = 0 ,
F            num_weak_rules = 0 , alphabet_size = 24 , total_length = 895} , self =
F            63 , parent = Nothing , duration = 0.777939037000 , status = Fail , start
F            = 2025-09-03 13:32:38.179402414 UTC , finish = 2025-09-03 13:32:38.957341451
F            UTC , thread_cap_info = ("ThreadId 72", 1, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 120 , num_strict_rules = 120 , num_top_rules = 0 ,
| F          num_weak_rules = 0 , alphabet_size = 24 , total_length = 895} , self =
| F          64 , parent = Nothing , duration = 0.834037947000 , status = Fail , start
| F          = 2025-09-03 13:32:38.179407512 UTC , finish = 2025-09-03 13:32:39.013445459
| F          UTC , thread_cap_info = ("ThreadId 74", 1, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F        = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 9 , total_length
| | F        = 54} , self = 61 , parent = Nothing , duration = 0.161605256000 , status
| | F        = Fail , start = 2025-09-03 13:32:38.378516623 UTC , finish = 2025-09-03
| | F        13:32:38.540121879 UTC , thread_cap_info = ("ThreadId 92", 2, False)}
| | F        
| | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S      = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | S      alphabet_size = 9 , total_length = 54} , self = 79 , parent = Nothing ,
| | | S      duration = 1.064820769000 , status = Success , start = 2025-09-03 13:32:38.435548453
| | | S      UTC , finish = 2025-09-03 13:32:39.500369222 UTC , thread_cap_info = ("ThreadId
| | | S      95", 2, False)}
| | | S      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 8 , total_length
| | | | F    = 50} , self = 62 , parent = Nothing , duration = 0.387973621000 , status
| | | | F    = Fail , start = 2025-09-03 13:32:38.49050408 UTC , finish = 2025-09-03
| | | | F    13:32:38.878477701 UTC , thread_cap_info = ("ThreadId 97", 2, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 8 , total_length
| | | | | F  = 50} , self = 72 , parent = Nothing , duration = 0.720048507000 , status
| | | | | F  = Fail , start = 2025-09-03 13:32:38.498472899 UTC , finish = 2025-09-03
| | | | | F  13:32:39.218521406 UTC , thread_cap_info = ("ThreadId 98", 2, False)}
| | | | | F  
| | F | | |  
| | E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | E | | |  = 9 , total_length = 54} , self = 81 , parent = Nothing , duration = 0.961426736000
| | E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:38.598488615
| | E | | |  UTC , finish = 2025-09-03 13:32:39.559915351 UTC , thread_cap_info = ("ThreadId
| | E | | |  101", 2, False)}
| | E | | |  
| | | | F |  
| | | | S |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S |  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | S |  = 8 , total_length = 50} , self = 84 , parent = Nothing , duration = 0.767852465000
| | | | S |  , status = Success , start = 2025-09-03 13:32:38.898518655 UTC , finish
| | | | S |  = 2025-09-03 13:32:39.66637112 UTC , thread_cap_info = ("ThreadId 102",
| | | | S |  2, False)}
| | | | S |  
F | | | | |  
  F | | | |  
S   | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S   | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S   | | | |  = Size { num_rules = 486 , num_strict_rules = 366 , num_top_rules = 366
S   | | | |  , num_weak_rules = 120 , alphabet_size = 43 , total_length = 3439} , self
S   | | | |  = 71 , parent = Nothing , duration = 0.203177964000 , status = Success
S   | | | |  , start = 2025-09-03 13:32:39.013562551 UTC , finish = 2025-09-03 13:32:39.216740515
S   | | | |  UTC , thread_cap_info = ("ThreadId 111", 1, False)}
S   | | | |  
| S | | | |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S | | | |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S | | | |  = Size { num_rules = 510 , num_strict_rules = 390 , num_top_rules = 390
| S | | | |  , num_weak_rules = 120 , alphabet_size = 44 , total_length = 3625} , self
| S | | | |  = 70 , parent = Nothing , duration = 0.199736301000 , status = Success
| S | | | |  , start = 2025-09-03 13:32:39.013564145 UTC , finish = 2025-09-03 13:32:39.213300446
| S | | | |  UTC , thread_cap_info = ("ThreadId 112", 1, False)}
| S | | | |  
| S | | | |  
S   | | | |  
    | | | F  
S   | | |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
S   | | |    verbose = False}" , input_size = Size { num_rules = 240 , num_strict_rules
S   | | |    = 120 , num_top_rules = 120 , num_weak_rules = 120 , alphabet_size = 44
S   | | |    , total_length = 1790} , self = 73 , parent = Nothing , duration = 0.110432435000
S   | | |    , status = Success , start = 2025-09-03 13:32:39.219834038 UTC , finish
S   | | |    = 2025-09-03 13:32:39.330266473 UTC , thread_cap_info = ("ThreadId 107",
S   | | |    1, False)}
S   | | |    
| S | | |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| S | | |    verbose = False}" , input_size = Size { num_rules = 220 , num_strict_rules
| S | | |    = 100 , num_top_rules = 100 , num_weak_rules = 120 , alphabet_size = 39
| S | | |    , total_length = 1670} , self = 74 , parent = Nothing , duration = 0.123029121000
| S | | |    , status = Success , start = 2025-09-03 13:32:39.221095474 UTC , finish
| S | | |    = 2025-09-03 13:32:39.344124595 UTC , thread_cap_info = ("ThreadId 109",
| S | | |    1, False)}
| S | | |    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | E  = 8 , total_length = 50} , self = 88 , parent = Nothing , duration = 0.566568730000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:39.238806057
| | | | | E  UTC , finish = 2025-09-03 13:32:39.805374787 UTC , thread_cap_info = ("ThreadId
| | | | | E  113", 2, False)}
| | | | | E  
S | | | | |  
  S | | | |  
    | S | |  
    E   | |  
        S |  
F         |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F         |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F         |  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
F         |  = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 9 , total_length
F         |  = 43} , self = 93 , parent = Nothing , duration = 0.124129899000 , status
F         |  = Fail , start = 2025-09-03 13:32:39.739482536 UTC , finish = 2025-09-03
F         |  13:32:39.863612435 UTC , thread_cap_info = ("ThreadId 130", 2, False)}
F         |  
| F       |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F       |  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F       |  = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 9 , total_length
| F       |  = 43} , self = 92 , parent = Nothing , duration = 0.106138333000 , status
| F       |  = Fail , start = 2025-09-03 13:32:39.757459135 UTC , finish = 2025-09-03
| F       |  13:32:39.863597468 UTC , thread_cap_info = ("ThreadId 131", 2, False)}
| F       |  
| |       E  
| F          
F            
S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S            = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S            = 9 , total_length = 43} , self = 97 , parent = Nothing , duration = 0.425431615000
S            , status = Success , start = 2025-09-03 13:32:39.880324109 UTC , finish
S            = 2025-09-03 13:32:40.305755724 UTC , thread_cap_info = ("ThreadId 137",
S            2, False)}
S            
| E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E          , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| E          = 9 , total_length = 43} , self = 99 , parent = Nothing , duration = 0.639697573000
| E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:39.898768937
| E          UTC , finish = 2025-09-03 13:32:40.53846651 UTC , thread_cap_info = ("ThreadId
| E          138", 2, False)}
| E          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F        = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 7 , total_length
| | F        = 42} , self = 95 , parent = Nothing , duration = 0.162539945000 , status
| | F        = Fail , start = 2025-09-03 13:32:40.098473023 UTC , finish = 2025-09-03
| | F        13:32:40.261012968 UTC , thread_cap_info = ("ThreadId 139", 2, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 7 , total_length
| | | F      = 42} , self = 96 , parent = Nothing , duration = 0.183515029000 , status
| | | F      = Fail , start = 2025-09-03 13:32:40.118608026 UTC , finish = 2025-09-03
| | | F      13:32:40.302123055 UTC , thread_cap_info = ("ThreadId 140", 2, False)}
| | | F      
| | F |      
| |   F      
S |          
S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |          = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S |          = 7 , total_length = 42} , self = 100 , parent = Nothing , duration = 0.278204454000
S |          , status = Success , start = 2025-09-03 13:32:40.30577912 UTC , finish
S |          = 2025-09-03 13:32:40.583983574 UTC , thread_cap_info = ("ThreadId 144",
S |          2, False)}
S |          
| | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | E        = 7 , total_length = 42} , self = 104 , parent = Nothing , duration = 0.299343434000
| | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:40.399603564
| | E        UTC , finish = 2025-09-03 13:32:40.698946998 UTC , thread_cap_info = ("ThreadId
| | E        146", 2, False)}
| | E        
| E |        
S   |        
    E        
