last 4074 length 18198
CNF 4074 vars 18198 clauses
last 4504 length 19281
last 3001 length 12774
last 4080 length 17890
last 949 length 4154
CNF 4504 vars 19281 clauses
last 905 length 3867
CNF 3001 vars 12774 clauses
last 917 length 3810
last 1014 length 4361
last 4234 length 20523
last 4962 length 22333
CNF 4080 vars 17890 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5703, clauses: 21545
CNF 949 vars 4154 clauses
CNF 905 vars 3867 clauses
CNF 917 vars 3810 clauses
CNF 1014 vars 4361 clauses
CNF 4234 vars 20523 clauses
CNF 4962 vars 22333 clauses
last 5703 length 21545
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6511
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1798, clauses: 6604
last 1786 length 6511
CNF 5703 vars 21545 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23433, clauses: 99183
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6769, clauses: 28389
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5322, clauses: 20126
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6769, clauses: 28369
last 1798 length 6604
last 23433 length 99183
CNF 1786 vars 6511 clauses
last 6769 length 28389
last 5322 length 20126
last 6769 length 28369
CNF 1798 vars 6604 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6511, status: Satisfied, time: 0.336018981s
CNF 23433 vars 99183 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21665, clauses: 91661
CNF 5322 vars 20126 clauses
CNF 6769 vars 28389 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5703, clauses: 21545, status: Satisfied, time: 0.538542732s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1798, clauses: 6604, status: Satisfied, time: 0.220553088s
**************************************************last 21665 length 91661

summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 6 strict rules and 3 weak rules on 3 letters       weights
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, a, b] -> [a, b, b, b] {- Input 0 -}
  [a, a, a, b] -> [a, b, b, a] {- Input 1 -}
  [b, a, a, b] -> [a, a, a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, b] -> [b, b, b, a] {- Mirror (Input 0) -}
  [b, a, a, a] -> [a, b, b, a] {- Mirror (Input 1) -}
  [b, a, a, b] -> [b, a, a, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, b] ->= [b, b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a, a] |-> [b#, b, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, b, b] |-> [b#, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b, b] |-> [b#, b, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, b, b] |-> [b#, b, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b, b] ->= [b, b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, b, b] |-> [b#, b, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, b, b] |-> [b#, b, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b, b] ->= [b, b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 3A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 11A 11A 13A - \
        | 11A 11A 13A - |
        | 11A 11A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, b, b] ->= [b, b, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(6/3,3)\Weight(2/3,3)\EDG(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.423039393000
  min duration 0.280397497000
  total durat. 1.722472034000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.401552738000
  min duration 0.122291534000
  total durat. 1.359939147000
**************************************************
F                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                    , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                    = 24} , self = 85 , parent = Nothing , duration = 0.782871912000 , status
F                    = Fail , start = 2025-09-03 11:58:18.668380633 UTC , finish = 2025-09-03
F                    11:58:19.451252545 UTC , thread_cap_info = ("ThreadId 35", 1, False)}
F                    
| F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F                  = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| F                  = 0 , alphabet_size = 4 , total_length = 120} , self = 34 , parent = Nothing
| F                  , duration = 0.100377798000 , status = Fail , start = 2025-09-03 11:58:18.670444555
| F                  UTC , finish = 2025-09-03 11:58:18.770822353 UTC , thread_cap_info = ("ThreadId
| F                  52", 2, False)}
| F                  
| | F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F                = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F                = 0 , alphabet_size = 2 , total_length = 24} , self = 56 , parent = Nothing
| | F                , duration = 0.277433807000 , status = Fail , start = 2025-09-03 11:58:18.686362613
| | F                UTC , finish = 2025-09-03 11:58:18.96379642 UTC , thread_cap_info = ("ThreadId
| | F                56", 0, False)}
| | F                
| F |                
| F |                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |                = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| F |                = 2 , num_top_rules = 2 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| F |                = 140} , self = 76 , parent = Nothing , duration = 0.304442159000 , status
| F |                = Fail , start = 2025-09-03 11:58:18.776905978 UTC , finish = 2025-09-03
| F |                11:58:19.081348137 UTC , thread_cap_info = ("ThreadId 78", 2, False)}
| F |                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | F              = 2 , num_top_rules = 2 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | F              = 140} , self = 52 , parent = Nothing , duration = 0.122291534000 , status
| | | F              = Fail , start = 2025-09-03 11:58:18.786181885 UTC , finish = 2025-09-03
| | | F              11:58:18.908473419 UTC , thread_cap_info = ("ThreadId 79", 2, False)}
| | | F              
| | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F            = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F            = 120} , self = 78 , parent = Nothing , duration = 0.372388918000 , status
| | | | F            = Fail , start = 2025-09-03 11:58:18.805375925 UTC , finish = 2025-09-03
| | | | F            11:58:19.177764843 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | | | F            
| | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F          = 120} , self = 77 , parent = Nothing , duration = 0.265839844000 , status
| | | | | F          = Fail , start = 2025-09-03 11:58:18.825379383 UTC , finish = 2025-09-03
| | | | | F          11:58:19.091219227 UTC , thread_cap_info = ("ThreadId 84", 1, False)}
| | | | | F          
| | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | | | | F        = 140} , self = 84 , parent = Nothing , duration = 0.423039393000 , status
| | | | | | F        = Fail , start = 2025-09-03 11:58:18.905190871 UTC , finish = 2025-09-03
| | | | | | F        11:58:19.328230264 UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | | | | | F        
| | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | | | | | F      = 140} , self = 82 , parent = Nothing , duration = 0.401552738000 , status
| | | | | | | F      = Fail , start = 2025-09-03 11:58:18.906247761 UTC , finish = 2025-09-03
| | | | | | | F      11:58:19.307800499 UTC , thread_cap_info = ("ThreadId 91", 2, False)}
| | | | | | | F      
| | | F | | | |      
| | F   | | | |      
| | F   | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F   | | | |      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | F   | | | |      = 32} , self = 83 , parent = Nothing , duration = 0.342204067000 , status
| | F   | | | |      = Fail , start = 2025-09-03 11:58:18.96560014 UTC , finish = 2025-09-03
| | F   | | | |      11:58:19.307804207 UTC , thread_cap_info = ("ThreadId 108", 0, False)}
| | F   | | | |      
| | | F | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F | | | |      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | F | | | |      = 32} , self = 79 , parent = Nothing , duration = 0.276739993000 , status
| | | F | | | |      = Fail , start = 2025-09-03 11:58:18.965603593 UTC , finish = 2025-09-03
| | | F | | | |      11:58:19.242343586 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
| | | F | | | |      
| | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | | F    = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | | F    = 32} , self = 80 , parent = Nothing , duration = 0.280397497000 , status
| | | | | | | | F    = Fail , start = 2025-09-03 11:58:18.985404025 UTC , finish = 2025-09-03
| | | | | | | | F    11:58:19.265801522 UTC , thread_cap_info = ("ThreadId 111", 0, False)}
| | | | | | | | F    
| | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | | | F  = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | | | F  = 32} , self = 81 , parent = Nothing , duration = 0.293515038000 , status
| | | | | | | | | F  = Fail , start = 2025-09-03 11:58:18.99418557 UTC , finish = 2025-09-03
| | | | | | | | | F  11:58:19.287700608 UTC , thread_cap_info = ("ThreadId 115", 0, False)}
| | | | | | | | | F  
| F | | | | | | | |  
|   | | | F | | | |  
|   | | F   | | | |  
|   | F     | | | |  
| S |       | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |       | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |       | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |       | | | |  = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| S |       | | | |  = 3 , total_length = 32} , self = 86 , parent = Nothing , duration = 0.513016212000
| S |       | | | |  , status = Success , start = 2025-09-03 11:58:19.243376835 UTC , finish
| S |       | | | |  = 2025-09-03 11:58:19.756393047 UTC , thread_cap_info = ("ThreadId 127",
| S |       | | | |  0, False)}
| S |       | | | |  
| | |       | | F |  
| | |       | |   F  
| | |       | F      
| | F       |        
| | E       |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E       |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E       |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E       |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E       |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E       |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | E       |        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | E       |        = 3 , total_length = 32} , self = 88 , parent = Nothing , duration = 0.430681503000
| | E       |        , status = Except "AsyncCancelled" , start = 2025-09-03 11:58:19.32594138
| | E       |        UTC , finish = 2025-09-03 11:58:19.756622883 UTC , thread_cap_info = ("ThreadId
| | E       |        131", 0, False)}
| | E       |        
| | |       F        
F | |                
  S |                
    E                
