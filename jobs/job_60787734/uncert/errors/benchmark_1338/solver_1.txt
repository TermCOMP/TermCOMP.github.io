last 398 length 1547
last 560 length 2303
CNF 560 vars 2303 clauses
last 470 length 1822
CNF 470 vars 1822 clauses
CNF 398 vars 1547 clauses
last 484 length 1938
CNF 484 vars 1938 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2149, clauses: 7621
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2359, clauses: 8407
last 3810 length 17241
last 2149 length 7621
last 4324 length 21874
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6171, clauses: 25413
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7045, clauses: 29145
last 2359 length 8407
last 6171 length 25413
CNF 2149 vars 7621 clauses
CNF 3810 vars 17241 clauses
last 7045 length 29145
CNF 4324 vars 21874 clauses
CNF 2359 vars 8407 clauses
CNF 6171 vars 25413 clauses
CNF 7045 vars 29145 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7045, clauses: 29145, status: Satisfied, time: 0.052232652s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2149, clauses: 7621, status: Unsatisfied, time: 0.097832188s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6171, clauses: 25413, status: Satisfied, time: 0.108500316s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3879, clauses: 15271
last 3879 length 15271
CNF 3879 vars 15271 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [b, a] -> [] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [a, b, a] -> [a] {- Mirror (Input 1) -}
  [b, b, a] -> [b] {- Mirror (Input 1) -}
  [c, b, a] -> [c] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [a, b, a] -> [a] {- Input 1 -}
  [a, b, b] -> [b] {- Input 1 -}
  [a, b, c] -> [c] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, b, b, c] {- DP (Top 0) (Input 0) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -1A 1A 0A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / 1A 1A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / -1A - 0A  \
        | -1A - -1A |
        \ -   - 0A  / )
  ( a#
  , Wk  / 1A 1A 1A \
        | -  -  -  |
        \ -  -  0A / )
  ( c#
  , Wk  / 0A -3A -2A \
        | -  -   -   |
        \ -  -   0A  / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\EDG(3/5,5)\Matrix{\ArcticBZ}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F            = 162} , self = 61 , parent = Nothing , duration = 0.161947262000 , status
F            = Fail , start = 2025-09-03 11:36:00.828343186 UTC , finish = 2025-09-03
F            11:36:00.990290448 UTC , thread_cap_info = ("ThreadId 62", 2, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 162} , self = 62 , parent = Nothing , duration = 0.159145748000 , status
| F          = Fail , start = 2025-09-03 11:36:00.836930845 UTC , finish = 2025-09-03
| F          11:36:00.996076593 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
| F          
| | S        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | S        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | S        = 5 , total_length = 32} , self = 69 , parent = Nothing , duration = 0.207842436000
| | S        , status = Success , start = 2025-09-03 11:36:00.851593963 UTC , finish
| | S        = 2025-09-03 11:36:01.059436399 UTC , thread_cap_info = ("ThreadId 86",
| | S        3, False)}
| | S        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | F      = 5 , total_length = 34} , self = 71 , parent = Nothing , duration = 0.209505827000
| | | F      , status = Fail , start = 2025-09-03 11:36:00.851995155 UTC , finish =
| | | F      2025-09-03 11:36:01.061500982 UTC , thread_cap_info = ("ThreadId 88", 0,
| | | F      False)}
| | | F      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | F    = 5 , total_length = 32} , self = 68 , parent = Nothing , duration = 0.179092786000
| | | | F    , status = Fail , start = 2025-09-03 11:36:00.856941835 UTC , finish =
| | | | F    2025-09-03 11:36:01.036034621 UTC , thread_cap_info = ("ThreadId 85", 3,
| | | | F    False)}
| | | | F    
| | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | S  = 5 , total_length = 34} , self = 64 , parent = Nothing , duration = 0.148924145000
| | | | | S  , status = Success , start = 2025-09-03 11:36:00.876950785 UTC , finish
| | | | | S  = 2025-09-03 11:36:01.02587493 UTC , thread_cap_info = ("ThreadId 90",
| | | | | S  0, False)}
| | | | | S  
F | | | | |  
  F | | | |  
    | | | S  
    | | F    
    S |      
      F      
