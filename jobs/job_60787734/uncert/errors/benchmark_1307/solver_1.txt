last 535 length 2103
last 529 length 2063
last 659 length 2612
CNF 529 vars 2063 clauses
CNF 659 vars 2612 clauses
last 600 length 2361
CNF 600 vars 2361 clauses
CNF 535 vars 2103 clauses
last 3699 length 15793
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8943
last 2477 length 8943
CNF 3699 vars 15793 clauses
CNF 2477 vars 8943 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8835
last 2477 length 8835
CNF 2477 vars 8835 clauses
last 4719 length 21289
CNF 4719 vars 21289 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8943, status: Satisfied, time: 0.086316145s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8835, status: Satisfied, time: 0.102129037s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7383, clauses: 30557
last 572 length 2267
CNF 572 vars 2267 clauses
last 589 length 2343
last 435 length 1697
last 531 length 2108
CNF 531 vars 2108 clauses
CNF 589 vars 2343 clauses
CNF 435 vars 1697 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2371, clauses: 8482
last 2371 length 8482
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2371, clauses: 8374
last 2371 length 8374
CNF 2371 vars 8482 clauses
CNF 2371 vars 8374 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2371, clauses: 8482, status: Satisfied, time: 0.103701609s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2371, clauses: 8374, status: Unsatisfied, time: 0.121024796s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7337, clauses: 30397
last 7337 length 30397
CNF 7337 vars 30397 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4553, clauses: 18099
last 4553 length 18099
CNF 4553 vars 18099 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7337, clauses: 30381
last 7337 length 30381
CNF 7337 vars 30381 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, b, c] {- Input 0 -}
  [c, a, b] -> [a, a, c] {- Input 1 -}
  [c, b] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [c, b, b] {- Mirror (Input 0) -}
  [b, a, c] -> [c, a, a] {- Mirror (Input 1) -}
  [b, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [c, b, b] {- Mirror (Input 0) -}
  [b, a, c] -> [c, a, a] {- Mirror (Input 1) -}
  [a, b, c] -> [a] {- Mirror (Input 2) -}
  [b, b, c] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, b, c] {- Input 0 -}
  [c, a, b] -> [a, a, c] {- Input 1 -}
  [c, b, a] -> [a] {- Input 2 -}
  [c, b, b] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b, b, c] {- DP Nontop (Input 0) -}
  [c, a, b] ->= [a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#] |-> [c#] {- DP (Top 2) (Input 0) -}
  [c#, a, b] |-> [a#, a, c] {- DP (Top 0) (Input 1) -}
  [c#, a, b] |-> [a#, c] {- DP (Top 1) (Input 1) -}
  [c#, a, b] |-> [c#] {- DP (Top 2) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [c#] {- DP (Top 2) (Input 0) -}
  [c#, a, b] |-> [a#, a, c] {- DP (Top 0) (Input 1) -}
  [c#, a, b] |-> [a#, c] {- DP (Top 1) (Input 1) -}
  [c#, a, b] |-> [c#] {- DP (Top 2) (Input 1) -}
  [a] ->= [b, b, c] {- DP Nontop (Input 0) -}
  [c, a, b] ->= [a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 13A 13A 16A - \
        | 13A 13A 16A - |
        | 13A 13A 16A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 11A 13A 13A - \
        | 11A 13A 13A - |
        | 11A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#] |-> [c#] {- DP (Top 2) (Input 0) -}
  [c#, a, b] |-> [a#, a, c] {- DP (Top 0) (Input 1) -}
  [c#, a, b] |-> [a#, c] {- DP (Top 1) (Input 1) -}
  [a] ->= [b, b, c] {- DP Nontop (Input 0) -}
  [c, a, b] ->= [a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [c#] {- DP (Top 2) (Input 0) -}
  [c#, a, b] |-> [a#, a, c] {- DP (Top 0) (Input 1) -}
  [c#, a, b] |-> [a#, c] {- DP (Top 1) (Input 1) -}
  [a] ->= [b, b, c] {- DP Nontop (Input 0) -}
  [c, a, b] ->= [a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 20A 23A 23A - \
        | 20A 23A 23A - |
        | 20A 23A 23A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 18A 19A 19A - \
        | 18A 19A 19A - |
        | 18A 19A 19A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b, b, c] {- DP Nontop (Input 0) -}
  [c, a, b] ->= [a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(4/5,5)\Matrix{\Arctic}{3}\EDG(3/5,5)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F              = 162} , self = 58 , parent = Nothing , duration = 0.135739868000 , status
F              = Fail , start = 2025-09-03 11:29:56.665337127 UTC , finish = 2025-09-03
F              11:29:56.801076995 UTC , thread_cap_info = ("ThreadId 62", 2, False)}
F              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 65 , parent = Nothing , duration = 0.149463274000 , status
| F            = Fail , start = 2025-09-03 11:29:56.683872927 UTC , finish = 2025-09-03
| F            11:29:56.833336201 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
| F            
| | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S          = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | S          = 5 , total_length = 39} , self = 62 , parent = Nothing , duration = 0.120115590000
| | S          , status = Success , start = 2025-09-03 11:29:56.70898279 UTC , finish
| | S          = 2025-09-03 11:29:56.82909838 UTC , thread_cap_info = ("ThreadId 90",
| | S          0, False)}
| | S          
| | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | S        = 5 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.144246352000
| | | S        , status = Success , start = 2025-09-03 11:29:56.723864842 UTC , finish
| | | S        = 2025-09-03 11:29:56.868111194 UTC , thread_cap_info = ("ThreadId 89",
| | | S        0, False)}
| | | S        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | E      = 5 , total_length = 39} , self = 70 , parent = Nothing , duration = 0.167808923000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.729062057
| | | | E      UTC , finish = 2025-09-03 11:29:56.89687098 UTC , thread_cap_info = ("ThreadId
| | | | E      94", 0, False)}
| | | | E      
| | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F    = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | F    = 0 , alphabet_size = 9 , total_length = 162} , self = 87 , parent = Nothing
| | | | | F    , duration = 0.382857758000 , status = Fail , start = 2025-09-03 11:29:56.744701437
| | | | | F    UTC , finish = 2025-09-03 11:29:57.127559195 UTC , thread_cap_info = ("ThreadId
| | | | | F    97", 3, False)}
| | | | | F    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | E  = 5 , total_length = 36} , self = 75 , parent = Nothing , duration = 0.136569301000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.763407257
| | | | | | E  UTC , finish = 2025-09-03 11:29:56.899976558 UTC , thread_cap_info = ("ThreadId
| | | | | | E  101", 0, False)}
| | | | | | E  
F | | | | | |  
  | S | | | |  
  F   | | | |  
      S | | |  
        E | |  
          | E  
S         |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S         |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S         |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S         |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
S         |    = 5 , total_length = 35} , self = 84 , parent = Nothing , duration = 0.153653895000
S         |    , status = Success , start = 2025-09-03 11:29:56.932507971 UTC , finish
S         |    = 2025-09-03 11:29:57.086161866 UTC , thread_cap_info = ("ThreadId 127",
S         |    0, False)}
S         |    
| F       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F       |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| F       |    = 5 , total_length = 32} , self = 85 , parent = Nothing , duration = 0.138868407000
| F       |    , status = Fail , start = 2025-09-03 11:29:56.949326126 UTC , finish =
| F       |    2025-09-03 11:29:57.088194533 UTC , thread_cap_info = ("ThreadId 128",
| F       |    0, False)}
| F       |    
| | E     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E     |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | E     |    = 5 , total_length = 35} , self = 88 , parent = Nothing , duration = 0.202180714000
| | E     |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.963377719
| | E     |    UTC , finish = 2025-09-03 11:29:57.165558433 UTC , thread_cap_info = ("ThreadId
| | E     |    130", 0, False)}
| | E     |    
S | |     |    
  F |     |    
    |     F    
    E          
