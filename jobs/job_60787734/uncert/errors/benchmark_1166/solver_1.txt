last 5536 length 29830
CNF 5536 vars 29830 clauses
last 6730 length 45679
CNF 6730 vars 45679 clauses
last 710 length 2901
CNF 710 vars 2901 clauses
last 761 length 3143
last 675 length 2776
CNF 761 vars 3143 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2744, clauses: 9837
last 742 length 2985
CNF 675 vars 2776 clauses
last 13212 length 64031
last 12022 length 71458
last 2744 length 9837
last 12690 length 74331
last 16344 length 79342
CNF 742 vars 2985 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9512, clauses: 39689
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2651, clauses: 9459
CNF 13212 vars 64031 clauses
CNF 12022 vars 71458 clauses
CNF 2744 vars 9837 clauses
CNF 12690 vars 74331 clauses
CNF 16344 vars 79342 clauses
last 9512 length 39689
last 2651 length 9459
[Info] pool sizes (success) 77173 seen 26782 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8930, clauses: 37197
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2744, clauses: 9837, status: Unsatisfied, time: 0.329721912s
CNF 9512 vars 39689 clauses
CNF 2651 vars 9459 clauses
**************************************************last 8930 length 37197

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18863, clauses: 73893
CNF 8930 vars 37197 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2651, clauses: 9459, status: Unsatisfied, time: 0.507063398s
summarylast 18863 length 73893

**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [a, a, a, b, b, c]
to
  [a, a, a, b, b, c, c]
via 15 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, b, a, c, a] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, b, c] -> [] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [a, a, a, b, b, c], via = [(Step   { rule = 1, position = 2}, [a, a, b, b, a, c, a, b, c]), (Step   { rule = 0, position = 4}, [a, a, b, b, c, a, b, c]), (Step   { rule = 1, position = 5}, [a, a, b, b, c, b, b, a, c, a, c]), (Step   { rule = 0, position = 7}, [a, a, b, b, c, b, b, c, a, c]), (Step   { rule = 0, position = 8}, [a, a, b, b, c, b, b, c, c]), (Step   { rule = 1, position = 1}, [a, b, b, a, c, a, b, c, b, b, c, c]), (Step   { rule = 0, position = 5}, [a, b, b, a, c, b, c, b, b, c, c]), (Step   { rule = 3, position = 4}, [a, b, b, a, b, b, c, c]), (Step   { rule = 1, position = 0}, [b, b, a, c, a, b, a, b, b, c, c]), (Step   { rule = 2, position = 0}, [b, a, c, a, b, a, b, b, c, c]), (Step   { rule = 2, position = 0}, [a, c, a, b, a, b, b, c, c]), (Step   { rule = 1, position = 2}, [a, c, b, b, a, c, a, a, b, b, c, c]), (Step   { rule = 0, position = 4}, [a, c, b, b, c, a, a, b, b, c, c]), (Step   { rule = 2, position = 2}, [a, c, b, c, a, a, b, b, c, c]), (Step   { rule = 3, position = 1}, [a, a, a, b, b, c, c])], to = [a, a, a, b, b, c, c]}

**************************************************
skeleton: (4,3)\Loop{15}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.990114241000
  min duration 0.016802770000
  total durat. 2.406466046000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.902291576000
  min duration 0.190025570000
  total durat. 2.462799657000
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.173339738000
  min duration 1.173339738000
  total durat. 1.173339738000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 85
    , parent = Nothing
    , duration = 1.173339738000
    , status = Success
    , start = 2025-09-03 11:09:44.918183315 UTC
    , finish = 2025-09-03 11:09:46.091523053 UTC
    , thread_cap_info = ("ThreadId 37", 1, False)}
**************************************************
S                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
S                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S                  = 12} , self = 85 , parent = Nothing , duration = 1.173339738000 , status
S                  = Success , start = 2025-09-03 11:09:44.918183315 UTC , finish = 2025-09-03
S                  11:09:46.091523053 UTC , thread_cap_info = ("ThreadId 37", 1, False)}
S                  
| F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F                = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F                = 0 , alphabet_size = 9 , total_length = 180} , self = 35 , parent = Nothing
| F                , duration = 0.159586445000 , status = Fail , start = 2025-09-03 11:09:44.919223515
| F                UTC , finish = 2025-09-03 11:09:45.07880996 UTC , thread_cap_info = ("ThreadId
| F                52", 2, False)}
| F                
| | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F              = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F              = 0 , alphabet_size = 3 , total_length = 12} , self = 56 , parent = Nothing
| | F              , duration = 0.233624491000 , status = Fail , start = 2025-09-03 11:09:44.990536595
| | F              UTC , finish = 2025-09-03 11:09:45.224161086 UTC , thread_cap_info = ("ThreadId
| | F              64", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 180} , self = 53 , parent = Nothing , duration = 0.182434257000 , status
| | | F            = Fail , start = 2025-09-03 11:09:45.009378528 UTC , finish = 2025-09-03
| | | F            11:09:45.191812785 UTC , thread_cap_info = ("ThreadId 70", 1, False)}
| | | F            
| | | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | F          = 0 , alphabet_size = 3 , total_length = 12} , self = 52 , parent = Nothing
| | | | F          , duration = 0.164457461000 , status = Fail , start = 2025-09-03 11:09:45.00938593
| | | | F          UTC , finish = 2025-09-03 11:09:45.173843391 UTC , thread_cap_info = ("ThreadId
| | | | F          66", 3, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F        = 180} , self = 63 , parent = Nothing , duration = 0.257281945000 , status
| | | | | F        = Fail , start = 2025-09-03 11:09:45.029380921 UTC , finish = 2025-09-03
| | | | | F        11:09:45.286662866 UTC , thread_cap_info = ("ThreadId 72", 1, False)}
| | | | | F        
| F | | | |        
| F | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 92 , num_strict_rules
| F | | | |        = 56 , num_top_rules = 56 , num_weak_rules = 36 , alphabet_size = 16 ,
| F | | | |        total_length = 484} , self = 81 , parent = Nothing , duration = 0.843114025000
| F | | | |        , status = Fail , start = 2025-09-03 11:09:45.101402705 UTC , finish =
| F | | | |        2025-09-03 11:09:45.94451673 UTC , thread_cap_info = ("ThreadId 87", 2,
| F | | | |        False)}
| F | | | |        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | | | | | F      = 65 , num_top_rules = 65 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | | | | F      total_length = 556} , self = 84 , parent = Nothing , duration = 0.990114241000
| | | | | | F      , status = Fail , start = 2025-09-03 11:09:45.101405887 UTC , finish =
| | | | | | F      2025-09-03 11:09:46.091520128 UTC , thread_cap_info = ("ThreadId 88", 2,
| | | | | | F      False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | | | | | | F    = 65 , num_top_rules = 65 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | | | | | F    total_length = 556} , self = 83 , parent = Nothing , duration = 0.902291576000
| | | | | | | F    , status = Fail , start = 2025-09-03 11:09:45.10141067 UTC , finish = 2025-09-03
| | | | | | | F    11:09:46.003702246 UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 92 , num_strict_rules
| | | | | | | | F  = 56 , num_top_rules = 56 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | | | | | | F  total_length = 484} , self = 82 , parent = Nothing , duration = 0.850871494000
| | | | | | | | F  , status = Fail , start = 2025-09-03 11:09:45.142748483 UTC , finish =
| | | | | | | | F  2025-09-03 11:09:45.993619977 UTC , thread_cap_info = ("ThreadId 90", 2,
| | | | | | | | F  False)}
| | | | | | | | F  
| | | | F | | | |  
| | | F   | | | |  
| | F     | | | |  
| |       F | | |  
| | F       | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F       | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F       | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F       | | |  = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | F       | | |  = 48} , self = 78 , parent = Nothing , duration = 0.190025570000 , status
| | F       | | |  = Fail , start = 2025-09-03 11:09:45.379506294 UTC , finish = 2025-09-03
| | F       | | |  11:09:45.569531864 UTC , thread_cap_info = ("ThreadId 112", 0, False)}
| | F       | | |  
| | | F     | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F     | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F     | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F     | | |  = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | | F     | | |  = 47} , self = 80 , parent = Nothing , duration = 0.374000753000 , status
| | | F     | | |  = Fail , start = 2025-09-03 11:09:45.461260894 UTC , finish = 2025-09-03
| | | F     | | |  11:09:45.835261647 UTC , thread_cap_info = ("ThreadId 118", 0, False)}
| | | F     | | |  
| | | | F   | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F   | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F   | | |  = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | | | F   | | |  = 47} , self = 79 , parent = Nothing , duration = 0.262329072000 , status
| | | | F   | | |  = Fail , start = 2025-09-03 11:09:45.469386632 UTC , finish = 2025-09-03
| | | | F   | | |  11:09:45.731715704 UTC , thread_cap_info = ("ThreadId 119", 0, False)}
| | | | F   | | |  
| | F | |   | | |  
| |   | F   | | |  
| |   F     | | |  
| F         | | |  
|           | | F  
|           | F    
|           F      
S                  
