last 8891 length 63994
CNF 8891 vars 63994 clauses
last 10705 length 116058
CNF 10705 vars 116058 clauses
last 771 length 3266
CNF 771 vars 3266 clauses
last 1377 length 6968
last 652 length 2681
CNF 1377 vars 6968 clauses
last 643 length 2628
CNF 652 vars 2681 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2615, clauses: 9480
last 2615 length 9480
CNF 643 vars 2628 clauses
CNF 2615 vars 9480 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2396, clauses: 8541
last 2396 length 8541
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2615, clauses: 9480, status: Unsatisfied, time: 0.101125766s
CNF 2396 vars 8541 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9100, clauses: 37985
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8222, clauses: 34251
last 9100 length 37985
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5641, clauses: 22820
last 8222 length 34251
last 5641 length 22820
CNF 9100 vars 37985 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2396, clauses: 8541, status: Unsatisfied, time: 0.184100495s
CNF 8222 vars 34251 clauses
CNF 5641 vars 22820 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9100, clauses: 37985, status: Satisfied, time: 0.089979189s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8222, clauses: 34251, status: Satisfied, time: 0.080017242s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5127, clauses: 20678
last 645 length 2660
CNF 645 vars 2660 clauses
last 597 length 2458
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 4 strict rules and 7 weak rules on 5 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
CNF 597 vars 2458 clauses
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [b, b, c, c, a, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a] {- Input 0 -}
  [b, a, b] -> [b] {- Input 0 -}
  [c, a, b] -> [c] {- Input 0 -}
  [a, c] -> [b, b, c, c, a, a] {- Input 1 -}
  [a, b, c] -> [a] {- Input 2 -}
  [b, b, c] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a] {- Mirror (Input 0) -}
  [b, a, b] -> [b] {- Mirror (Input 0) -}
  [b, a, c] -> [c] {- Mirror (Input 0) -}
  [c, a] -> [a, a, c, c, b, b] {- Mirror (Input 1) -}
  [c, b, a] -> [a] {- Mirror (Input 2) -}
  [c, b, b] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, c, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, c, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, c, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / - -  1A \
        | - 1A 0A |
        \ - -  0A / )
  ( b
  , Wk  / - 0A  2A \
        | - -1A -  |
        \ - -   0A / )
  ( c
  , Wk  / - 2A 2A  \
        | - 1A -2A |
        \ - -  0A  / )
  ( c#
  , Wk  / - 1A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, c, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(7,3)\Deepee(4/7,5)\Weight\EDG(2/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 12} , self = 44 , parent = Nothing , duration = 0.169608442000 , status
F          = Fail , start = 2025-09-03 11:47:00.713871002 UTC , finish = 2025-09-03
F          11:47:00.883479444 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E        = 12} , self = 83 , parent = Nothing , duration = 0.914117250000 , status
| E        = Except "AsyncCancelled" , start = 2025-09-03 11:47:00.713876352 UTC ,
| E        finish = 2025-09-03 11:47:01.627993602 UTC , thread_cap_info = ("ThreadId
| E        42", 2, False)}
| E        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 50 , parent = Nothing , duration = 0.395256201000 , status
| | F      = Fail , start = 2025-09-03 11:47:00.718715667 UTC , finish = 2025-09-03
| | F      11:47:01.113971868 UTC , thread_cap_info = ("ThreadId 54", 3, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 162} , self = 46 , parent = Nothing , duration = 0.217308734000 , status
| | | F    = Fail , start = 2025-09-03 11:47:00.731880985 UTC , finish = 2025-09-03
| | | F    11:47:00.949189719 UTC , thread_cap_info = ("ThreadId 52", 3, False)}
| | | F    
F | | |    
  | | F    
F | |      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | |      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | |      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | |      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | |      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F | |      = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
F | |      , duration = 0.133658121000 , status = Fail , start = 2025-09-03 11:47:00.952153055
F | |      UTC , finish = 2025-09-03 11:47:01.085811176 UTC , thread_cap_info = ("ThreadId
F | |      79", 2, False)}
F | |      
F | |      
  | F      
F |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |        = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
F |        = 4 , total_length = 43} , self = 68 , parent = Nothing , duration = 0.214727151000
F |        , status = Fail , start = 2025-09-03 11:47:01.156646248 UTC , finish =
F |        2025-09-03 11:47:01.371373399 UTC , thread_cap_info = ("ThreadId 104",
F |        2, False)}
F |        
| | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | S      = 4 , total_length = 43} , self = 70 , parent = Nothing , duration = 0.361732035000
| | S      , status = Success , start = 2025-09-03 11:47:01.22113514 UTC , finish
| | S      = 2025-09-03 11:47:01.582867175 UTC , thread_cap_info = ("ThreadId 106",
| | S      2, False)}
| | S      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | F    = 4 , total_length = 39} , self = 69 , parent = Nothing , duration = 0.279954188000
| | | F    , status = Fail , start = 2025-09-03 11:47:01.251420672 UTC , finish =
| | | F    2025-09-03 11:47:01.53137486 UTC , thread_cap_info = ("ThreadId 109", 2,
| | | F    False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | S  = 4 , total_length = 39} , self = 71 , parent = Nothing , duration = 0.313763294000
| | | | S  , status = Success , start = 2025-09-03 11:47:01.272612736 UTC , finish
| | | | S  = 2025-09-03 11:47:01.58637603 UTC , thread_cap_info = ("ThreadId 110",
| | | | S  2, False)}
| | | | S  
F | | | |  
E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
E | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
E | | | |  = 4 , total_length = 43} , self = 75 , parent = Nothing , duration = 0.175176203000
E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:47:01.441851264
E | | | |  UTC , finish = 2025-09-03 11:47:01.617027467 UTC , thread_cap_info = ("ThreadId
E | | | |  112", 2, False)}
E | | | |  
| | | F |  
| | S   |  
| |     S  
E |        
  E        
