last 3852 length 19468
CNF 3852 vars 19468 clauses
last 3976 length 17542
CNF 3976 vars 17542 clauses
last 537 length 2204
CNF 537 vars 2204 clauses
last 563 length 2312
last 848 length 3498
CNF 563 vars 2312 clauses
CNF 848 vars 3498 clauses
last 933 length 4154
CNF 933 vars 4154 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1964, clauses: 7062
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2571, clauses: 9458
last 2571 length 9458
last 1964 length 7062
CNF 1964 vars 7062 clauses
CNF 2571 vars 9458 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1964, clauses: 7062, status: Satisfied, time: 0.083514983s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2571, clauses: 9458, status: Satisfied, time: 0.086893622s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6839, clauses: 28245
last 6839 length 28245
CNF 6839 vars 28245 clauses
last 542 length 2244
last 423 length 1782
CNF 542 vars 2244 clauses
CNF 423 vars 1782 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5744, clauses: 23753
last 5744 length 23753
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1751, clauses: 6201
last 1751 length 6201
last 498 length 2099
CNF 5744 vars 23753 clauses
CNF 1751 vars 6201 clauses
last 690 length 3064
CNF 498 vars 2099 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6630
CNF 690 vars 3064 clauses
last 1859 length 6630
CNF 1859 vars 6630 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1751, clauses: 6201, status: Unsatisfied, time: 0.069810019s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1859, clauses: 6630, status: Satisfied, time: 0.083214063s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3534, clauses: 14064
last 3534 length 14064
CNF 3534 vars 14064 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b, c] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [c, b] -> [a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [c, b] -> [a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b, c] -> [a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [b#, b, a, a] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a#, a, b] |-> [b#, b, a, a] {- DP (Top 1) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 2A 2A 2A - \
        | 2A 2A 2A - |
        | 2A 2A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(5/5,5)\Matrix{\Arctic}{3}\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 3 , total_length = 12} , self = 48 , parent = Nothing
F              , duration = 0.215749726000 , status = Fail , start = 2025-09-03 11:01:24.97650297
F              UTC , finish = 2025-09-03 11:01:25.192252696 UTC , thread_cap_info = ("ThreadId
F              48", 2, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 46 , parent = Nothing , duration = 0.122234450000 , status
| F            = Fail , start = 2025-09-03 11:01:24.986429083 UTC , finish = 2025-09-03
| F            11:01:25.108663533 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| F            
| | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E          = 12} , self = 91 , parent = Nothing , duration = 0.670829494000 , status
| | E          = Except "AsyncCancelled" , start = 2025-09-03 11:01:24.996895827 UTC ,
| | E          finish = 2025-09-03 11:01:25.667725321 UTC , thread_cap_info = ("ThreadId
| | E          41", 1, False)}
| | E          
| | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 78 , parent = Nothing
| | | F        , duration = 0.449259688000 , status = Fail , start = 2025-09-03 11:01:24.996899989
| | | F        UTC , finish = 2025-09-03 11:01:25.446159677 UTC , thread_cap_info = ("ThreadId
| | | F        61", 3, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F      = 162} , self = 41 , parent = Nothing , duration = 0.100473401000 , status
| | | | F      = Fail , start = 2025-09-03 11:01:24.996906892 UTC , finish = 2025-09-03
| | | | F      11:01:25.097380293 UTC , thread_cap_info = ("ThreadId 73", 0, False)}
| | | | F      
| | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | E    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | E    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | E    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | E    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | E    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | E    = 12} , self = 92 , parent = Nothing , duration = 0.629104146000 , status
| | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.041411069 UTC ,
| | | | | E    finish = 2025-09-03 11:01:25.670515215 UTC , thread_cap_info = ("ThreadId
| | | | | E    75", 1, False)}
| | | | | E    
| | | | F |    
| F | |   |    
F   | |   |    
S   | |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |   |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S   | |   |    = 4 , total_length = 31} , self = 66 , parent = Nothing , duration = 0.127486506000
S   | |   |    , status = Success , start = 2025-09-03 11:01:25.210652945 UTC , finish
S   | |   |    = 2025-09-03 11:01:25.338139451 UTC , thread_cap_info = ("ThreadId 102",
S   | |   |    2, False)}
S   | |   |    
| E | |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E | |   |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| E | |   |    = 4 , total_length = 31} , self = 70 , parent = Nothing , duration = 0.131456902000
| E | |   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.234944857
| E | |   |    UTC , finish = 2025-09-03 11:01:25.366401759 UTC , thread_cap_info = ("ThreadId
| E | |   |    106", 2, False)}
| E | |   |    
| | | | S |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S |    = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | S |    alphabet_size = 5 , total_length = 45} , self = 67 , parent = Nothing ,
| | | | S |    duration = 0.106103537000 , status = Success , start = 2025-09-03 11:01:25.23638084
| | | | S |    UTC , finish = 2025-09-03 11:01:25.342484377 UTC , thread_cap_info = ("ThreadId
| | | | S |    107", 2, False)}
| | | | S |    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | | | | E  = 5 , total_length = 45} , self = 77 , parent = Nothing , duration = 0.156045495000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.255608865
| | | | | | E  UTC , finish = 2025-09-03 11:01:25.41165436 UTC , thread_cap_info = ("ThreadId
| | | | | | E  108", 2, False)}
| | | | | | E  
S | | | | | |  
  | | | S | |  
  E | |   | |  
    | |   | E  
F   | |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   | |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   | |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   | |   |    = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
F   | |   |    = 4 , total_length = 26} , self = 85 , parent = Nothing , duration = 0.120461242000
F   | |   |    , status = Fail , start = 2025-09-03 11:01:25.411668516 UTC , finish =
F   | |   |    2025-09-03 11:01:25.532129758 UTC , thread_cap_info = ("ThreadId 121",
F   | |   |    2, False)}
F   | |   |    
|   | F   |    
| S |     |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |     |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |     |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S |     |    = 4 , total_length = 29} , self = 86 , parent = Nothing , duration = 0.117925632000
| S |     |    , status = Success , start = 2025-09-03 11:01:25.487799688 UTC , finish
| S |     |    = 2025-09-03 11:01:25.60572532 UTC , thread_cap_info = ("ThreadId 132",
| S |     |    2, False)}
| S |     |    
| | | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E   |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E   |    = 4 , total_length = 29} , self = 88 , parent = Nothing , duration = 0.125998070000
| | | E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:25.529611342
| | | E   |    UTC , finish = 2025-09-03 11:01:25.655609412 UTC , thread_cap_info = ("ThreadId
| | | E   |    134", 2, False)}
| | | E   |    
F | | |   |    
  S | |   |    
    | E   |    
    E     |    
          E    
