last 496 length 1910
last 541 length 2186
last 474 length 1933
CNF 541 vars 2186 clauses
CNF 474 vars 1933 clauses
CNF 496 vars 1910 clauses
last 404 length 1566
CNF 404 vars 1566 clauses
last 3780 length 19500
CNF 3780 vars 19500 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1964, clauses: 6969
last 1964 length 6969
last 4064 length 18203
CNF 4064 vars 18203 clauses
CNF 1964 vars 6969 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2465, clauses: 8802
last 2465 length 8802
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7093, clauses: 29317
last 7093 length 29317
CNF 2465 vars 8802 clauses
CNF 7093 vars 29317 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1964, clauses: 6969, status: Unsatisfied, time: 0.118568306s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26425
last 6382 length 26425
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7093, clauses: 29317, status: Satisfied, time: 0.08164599s
CNF 6382 vars 26425 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2465, clauses: 8802, status: Unsatisfied, time: 0.121664806s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [c, c, b, a] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [] {- Mirror (Input 0) -}
  [c, a] -> [a, b, c, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Mirror (Input 0) -}
  [b, b, a] -> [b] {- Mirror (Input 0) -}
  [c, b, a] -> [c] {- Mirror (Input 0) -}
  [c, a] -> [a, b, c, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Input 0 -}
  [a, b, b] -> [b] {- Input 0 -}
  [a, b, c] -> [c] {- Input 0 -}
  [a, c] -> [c, c, b, a] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
  [a#, c] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, c] |-> [b#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, c] |-> [b#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A -1A -   \
        | -  1A  -1A |
        \ -  -   0A  / )
  ( b
  , Wk  / 0A -   -  \
        | -  -1A -  |
        \ -  -   0A / )
  ( c
  , Wk  / 0A -1A -2A \
        | -  1A  1A  |
        \ -  -   0A  / )
  ( a#
  , Wk  / - 0A 0A \
        | - -  -  |
        \ - -  0A / )
  ( b#
  , Wk  / - -2A 0A \
        | - -   -  |
        \ - -   0A / )
   property Termination
has value Just True
for SRS
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
      [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
      [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
      [a, c] ->= [c, c, b, a] {- DP Nontop (Input 1) -}
      [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  (c, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(4/5,5)\Matrix{\ArcticBZ}{3}(2/5,5)\Weight\EDG(1/5,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26425, status: Satisfied, time: 0.049288716s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                = 12} , self = 77 , parent = Nothing , duration = 0.323522461000 , status
E                = Except "AsyncCancelled" , start = 2025-09-03 11:44:23.126565219 UTC ,
E                finish = 2025-09-03 11:44:23.45008768 UTC , thread_cap_info = ("ThreadId
E                35", 3, False)}
E                
| E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E              = 12} , self = 76 , parent = Nothing , duration = 0.321256332000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-03 11:44:23.126617938 UTC ,
| E              finish = 2025-09-03 11:44:23.44787427 UTC , thread_cap_info = ("ThreadId
| E              43", 2, False)}
| E              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 162} , self = 65 , parent = Nothing , duration = 0.145652349000 , status
| | F            = Fail , start = 2025-09-03 11:44:23.128268402 UTC , finish = 2025-09-03
| | F            11:44:23.273920751 UTC , thread_cap_info = ("ThreadId 54", 1, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F          = 162} , self = 62 , parent = Nothing , duration = 0.100430090000 , status
| | | F          = Fail , start = 2025-09-03 11:44:23.133332547 UTC , finish = 2025-09-03
| | | F          11:44:23.233762637 UTC , thread_cap_info = ("ThreadId 56", 1, False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | F        = 5 , total_length = 36} , self = 71 , parent = Nothing , duration = 0.231351269000
| | | | F        , status = Fail , start = 2025-09-03 11:44:23.216350815 UTC , finish =
| | | | F        2025-09-03 11:44:23.447702084 UTC , thread_cap_info = ("ThreadId 95", 2,
| | | | F        False)}
| | | | F        
| | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | F      = 4 , total_length = 29} , self = 67 , parent = Nothing , duration = 0.187005536000
| | | | | F      , status = Fail , start = 2025-09-03 11:44:23.217714741 UTC , finish =
| | | | | F      2025-09-03 11:44:23.404720277 UTC , thread_cap_info = ("ThreadId 97", 2,
| | | | | F      False)}
| | | | | F      
| | | F | |      
| | | S | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S | |      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | S | |      = 5 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.177469704000
| | | S | |      , status = Success , start = 2025-09-03 11:44:23.239476314 UTC , finish
| | | S | |      = 2025-09-03 11:44:23.416946018 UTC , thread_cap_info = ("ThreadId 99",
| | | S | |      2, False)}
| | | S | |      
| | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F    = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | F    = 0 , alphabet_size = 9 , total_length = 162} , self = 66 , parent = Nothing
| | | | | | F    , duration = 0.116043008000 , status = Fail , start = 2025-09-03 11:44:23.258918199
| | | | | | F    UTC , finish = 2025-09-03 11:44:23.374961207 UTC , thread_cap_info = ("ThreadId
| | | | | | F    103", 3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 0 , alphabet_size = 9 , total_length = 162} , self = 70 , parent = Nothing
| | | | | | | F  , duration = 0.173862610000 , status = Fail , start = 2025-09-03 11:44:23.273724275
| | | | | | | F  UTC , finish = 2025-09-03 11:44:23.447586885 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  105", 3, False)}
| | | | | | | F  
| | F | | | | |  
| |   | | | F |  
| |   | | F   |  
| |   S |     |  
| |     |     F  
| |     F        
| E              
E                
