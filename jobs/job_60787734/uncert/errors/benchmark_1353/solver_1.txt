last 549 length 2217
last 253 length 1006
CNF 549 vars 2217 clauses
last 252 length 976
last 509 length 2228
CNF 253 vars 1006 clauses
CNF 252 vars 976 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8943
last 2468 length 8943
CNF 509 vars 2228 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1454, clauses: 5097
CNF 2468 vars 8943 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3956, clauses: 16133
last 1454 length 5097
last 3956 length 16133
CNF 1454 vars 5097 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 8943, status: Satisfied, time: 0.088361245s
last 3787 length 17052
CNF 3956 vars 16133 clauses
CNF 3787 vars 17052 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5379, clauses: 21940
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3956, clauses: 16133, status: Satisfied, time: 0.083676648s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1454, clauses: 5097, status: Satisfied, time: 0.086062454s
last 364 length 1403
last 347 length 1372
CNF 347 vars 1372 clauses
CNF 364 vars 1403 clauses
last 4237 length 21230
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       weights
SRS with 4 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 5 letters       Usable
  SRS with 2 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b] {- Input 0 -}
  [b, c] -> [a] {- Input 1 -}
  [c, b] -> [a, b, c, c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [c#, b] |-> [a#, b, c, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [b#, c, c] {- DP (Top 1) (Input 2) -}
  [c#, b] |-> [c#] {- DP (Top 3) (Input 2) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [c#, b] |-> [c#] {- DP (Top 3) (Input 2) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [b] {- DP Nontop (Input 0) -}
      [b, c] ->= [a] {- DP Nontop (Input 1) -}
      [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 3) (Input 2) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 1A 2A \
        | 0A -  -  |
        \ -  -  0A / )
  ( b
  , Wk  / 1A 1A 2A \
        | -  0A -  |
        \ -  -  0A / )
  ( c
  , Wk  / 0A -2A -   \
        | 0A 0A  -1A |
        \ -  -   0A  / )
  ( c#
  , Wk  / 0A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Deepee(6/3,6)\Weight(4/3,6)\EDG[(2/3,5)\Usable(2,4)\Weight(0,0)\EDG[],(2/3,4)\Matrix{\ArcticBZ}{3}(0/3,3)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 4237 vars 21230 clauses


**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 9 , total_length = 162} , self = 65 , parent = Nothing
F          , duration = 0.225973070000 , status = Fail , start = 2025-09-03 11:43:25.878834916
F          UTC , finish = 2025-09-03 11:43:26.104807986 UTC , thread_cap_info = ("ThreadId
F          63", 2, False)}
F          
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| S        = 6 , total_length = 36} , self = 55 , parent = Nothing , duration = 0.104625287000
| S        , status = Success , start = 2025-09-03 11:43:25.945052767 UTC , finish
| S        = 2025-09-03 11:43:26.049678054 UTC , thread_cap_info = ("ThreadId 95",
| S        3, False)}
| S        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 64 , parent = Nothing , duration = 0.141884041000 , status
| | F      = Fail , start = 2025-09-03 11:43:25.960263925 UTC , finish = 2025-09-03
| | F      11:43:26.102147966 UTC , thread_cap_info = ("ThreadId 89", 1, False)}
| | F      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | S    = 4 , total_length = 19} , self = 68 , parent = Nothing , duration = 0.145712745000
| | | S    , status = Success , start = 2025-09-03 11:43:25.961497621 UTC , finish
| | | S    = 2025-09-03 11:43:26.107210366 UTC , thread_cap_info = ("ThreadId 96",
| | | S    3, False)}
| | | S    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | S  = 4 , total_length = 19} , self = 66 , parent = Nothing , duration = 0.136531213000
| | | | S  , status = Success , start = 2025-09-03 11:43:25.970410354 UTC , finish
| | | | S  = 2025-09-03 11:43:26.106941567 UTC , thread_cap_info = ("ThreadId 97",
| | | | S  3, False)}
| | | | S  
| S | | |  
|   F | |  
F     | |  
      | S  
      S    
