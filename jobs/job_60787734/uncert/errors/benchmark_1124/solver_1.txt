last 6068 length 41594
last 5224 length 28441
CNF 6068 vars 41594 clauses
CNF 5224 vars 28441 clauses
last 697 length 2923
CNF 697 vars 2923 clauses
last 891 length 3760
last 885 length 3903
CNF 891 vars 3760 clauses
CNF 885 vars 3903 clauses
last 1206 length 5534
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2387, clauses: 8580
last 2387 length 8580
CNF 1206 vars 5534 clauses
CNF 2387 vars 8580 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2796, clauses: 10184
last 2796 length 10184
CNF 2796 vars 10184 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2387, clauses: 8580, status: Satisfied, time: 0.170378226s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2796, clauses: 10184, status: Satisfied, time: 0.069159591s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 6 strict rules and 7 weak rules on 6 letters       weights
SRS with 3 strict rules and 7 weak rules on 4 letters       EDG
SRS with 3 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [a, c, c] -> [c, c, b, a, c, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [a] {- Input 1 -}
  [b, a, b] -> [b] {- Input 1 -}
  [c, a, b] -> [c] {- Input 1 -}
  [a, c, c] -> [c, c, b, a, c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a] {- Mirror (Input 1) -}
  [b, a, b] -> [b] {- Mirror (Input 1) -}
  [b, a, c] -> [c] {- Mirror (Input 1) -}
  [c, c, a] -> [a, c, a, b, c, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [a, c, a, b, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, c, a] |-> [a#, b, c, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, c, a] |-> [a#, c, a, b, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c, a] |-> [b#, c, c] {- DP (Top 3) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#] {- DP (Top 5) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, a, b, c, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [a, c, a, b, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#] {- DP (Top 5) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, a, b, c, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c, a] |-> [c#] {- DP (Top 5) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, a, b, c, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [a, c, a, b, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 12A 13A 15A - \
        | 12A 13A 15A - |
        | 12A 13A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, a] ->= [a, c, a, b, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(7,3)\Deepee(6/7,6)\Weight\EDG(3/7,4)\Matrix{\Arctic}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.763886216000
  min duration 0.243813136000
  total durat. 2.231754787000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.180003114000
  min duration 1.180003114000
  total durat. 1.180003114000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 96
    , parent = Nothing
    , duration = 1.180003114000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:03:09.467064761 UTC
    , finish = 2025-09-03 11:03:10.647067875 UTC
    , thread_cap_info = ("ThreadId 69", 2, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 12} , self = 49 , parent = Nothing , duration = 0.342899722000 , status
F                  = Fail , start = 2025-09-03 11:03:09.457182816 UTC , finish = 2025-09-03
F                  11:03:09.800082538 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                  
| F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F                = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F                = 0 , alphabet_size = 9 , total_length = 162} , self = 50 , parent = Nothing
| F                , duration = 0.483393177000 , status = Fail , start = 2025-09-03 11:03:09.458259198
| F                UTC , finish = 2025-09-03 11:03:09.941652375 UTC , thread_cap_info = ("ThreadId
| F                53", 0, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F              = 12} , self = 48 , parent = Nothing , duration = 0.319188388000 , status
| | F              = Fail , start = 2025-09-03 11:03:09.46470538 UTC , finish = 2025-09-03
| | F              11:03:09.783893768 UTC , thread_cap_info = ("ThreadId 36", 2, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 162} , self = 45 , parent = Nothing , duration = 0.224882262000 , status
| | | F            = Fail , start = 2025-09-03 11:03:09.467055621 UTC , finish = 2025-09-03
| | | F            11:03:09.691937883 UTC , thread_cap_info = ("ThreadId 64", 1, False)}
| | | F            
| | | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E          = 12} , self = 96 , parent = Nothing , duration = 1.180003114000 , status
| | | | E          = Except "AsyncCancelled" , start = 2025-09-03 11:03:09.467064761 UTC ,
| | | | E          finish = 2025-09-03 11:03:10.647067875 UTC , thread_cap_info = ("ThreadId
| | | | E          69", 2, False)}
| | | | E          
| | | | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 51 , parent = Nothing
| | | | | F        , duration = 0.763886216000 , status = Fail , start = 2025-09-03 11:03:09.467065277
| | | | | F        UTC , finish = 2025-09-03 11:03:10.230951493 UTC , thread_cap_info = ("ThreadId
| | | | | F        55", 0, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | F      = 162} , self = 46 , parent = Nothing , duration = 0.204958459000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:03:09.487067141 UTC , finish = 2025-09-03
| | | | | | F      11:03:09.6920256 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
| | | | | | F      
| | | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | | | F    = 0 , alphabet_size = 3 , total_length = 12} , self = 47 , parent = Nothing
| | | | | | | F    , duration = 0.243813136000 , status = Fail , start = 2025-09-03 11:03:09.528483667
| | | | | | | F    UTC , finish = 2025-09-03 11:03:09.772296803 UTC , thread_cap_info = ("ThreadId
| | | | | | | F    76", 3, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 66 , parent = Nothing
| | | | | | | | F  , duration = 0.740662258000 , status = Fail , start = 2025-09-03 11:03:09.547082779
| | | | | | | | F  UTC , finish = 2025-09-03 11:03:10.287745037 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F  78", 3, False)}
| | | | | | | | F  
| | | F | | | | |  
| | |   | | F | |  
| | |   | |   F |  
| | F   | |     |  
F |     | |     |  
  F     | |     |  
        | F     |  
        |       F  
S       |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S       |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S       |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S       |          = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
S       |          = 4 , total_length = 40} , self = 85 , parent = Nothing , duration = 0.213242250000
S       |          , status = Success , start = 2025-09-03 11:03:10.315538057 UTC , finish
S       |          = 2025-09-03 11:03:10.528780307 UTC , thread_cap_info = ("ThreadId 120",
S       |          3, False)}
S       |          
| F     |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F     |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F     |          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F     |          = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F     |          = 47} , self = 84 , parent = Nothing , duration = 0.125867780000 , status
| F     |          = Fail , start = 2025-09-03 11:03:10.333820521 UTC , finish = 2025-09-03
| F     |          11:03:10.459688301 UTC , thread_cap_info = ("ThreadId 121", 3, False)}
| F     |          
| | E   |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E   |          , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | E   |          = 4 , total_length = 40} , self = 89 , parent = Nothing , duration = 0.254142912000
| | E   |          , status = Except "AsyncCancelled" , start = 2025-09-03 11:03:10.35426924
| | E   |          UTC , finish = 2025-09-03 11:03:10.608412152 UTC , thread_cap_info = ("ThreadId
| | E   |          125", 3, False)}
| | E   |          
| | | S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S |          = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| | | S |          alphabet_size = 4 , total_length = 47} , self = 86 , parent = Nothing ,
| | | S |          duration = 0.119390470000 , status = Success , start = 2025-09-03 11:03:10.409917043
| | | S |          UTC , finish = 2025-09-03 11:03:10.529307513 UTC , thread_cap_info = ("ThreadId
| | | S |          126", 3, False)}
| | | S |          
| F | | |          
| E | | |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E | | |          , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| E | | |          = 4 , total_length = 47} , self = 90 , parent = Nothing , duration = 0.141016874000
| E | | |          , status = Except "AsyncCancelled" , start = 2025-09-03 11:03:10.467419147
| E | | |          UTC , finish = 2025-09-03 11:03:10.608436021 UTC , thread_cap_info = ("ThreadId
| E | | |          129", 3, False)}
| E | | |          
S | | | |          
  | | S |          
  | E   |          
  E     |          
        E          
