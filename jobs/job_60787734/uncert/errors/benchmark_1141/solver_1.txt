last 5912 length 31442
CNF 5912 vars 31442 clauses
last 6926 length 45231
CNF 6926 vars 45231 clauses
last 692 length 2860
CNF 692 vars 2860 clauses
last 860 length 3731
last 548 length 2161
CNF 860 vars 3731 clauses
CNF 548 vars 2161 clauses
last 494 length 1941
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2624, clauses: 9468
last 2624 length 9468
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2135, clauses: 7644
CNF 494 vars 1941 clauses
CNF 2624 vars 9468 clauses
last 2135 length 7644
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7505, clauses: 31019
last 7505 length 31019
CNF 7505 vars 31019 clauses
CNF 2135 vars 7644 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2624, clauses: 9468, status: Satisfied, time: 0.119614038s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2135, clauses: 7644, status: Satisfied, time: 0.123786094s
last 508 length 2169
last 811 length 3569
CNF 508 vars 2169 clauses
CNF 811 vars 3569 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [b, a, c] -> [c, c, a, a, b] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [c, b] -> [c] {- Input 2 -}
  [b, a, c] -> [c, c, a, a, b] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a] -> [b] {- Mirror (Input 1) -}
  [b, a] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [b, c] -> [c] {- Mirror (Input 2) -}
  [c, a, b] -> [b, a, a, c, c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a, b] |-> [a#, a, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, a, b] |-> [a#, c, c] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, a, b] |-> [b#, a, a, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 20A 21A 21A - \
        | 20A 21A 21A - |
        | 20A 21A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(2/8,4)\Matrix{\Arctic}{3}(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 12} , self = 34 , parent = Nothing , duration = 0.145905185000 , status
F              = Fail , start = 2025-09-03 11:07:33.79328765 UTC , finish = 2025-09-03
F              11:07:33.939192835 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F              
| E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E            = 12} , self = 83 , parent = Nothing , duration = 0.871354745000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-03 11:07:33.793333545 UTC ,
| E            finish = 2025-09-03 11:07:34.66468829 UTC , thread_cap_info = ("ThreadId
| E            40", 0, False)}
| E            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 45 , parent = Nothing , duration = 0.217785762000 , status
| | F          = Fail , start = 2025-09-03 11:07:33.794953364 UTC , finish = 2025-09-03
| | F          11:07:34.012739126 UTC , thread_cap_info = ("ThreadId 48", 2, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 180} , self = 48 , parent = Nothing , duration = 0.241637492000 , status
| | | F        = Fail , start = 2025-09-03 11:07:33.808251442 UTC , finish = 2025-09-03
| | | F        11:07:34.049888934 UTC , thread_cap_info = ("ThreadId 50", 2, False)}
| | | F        
| | | | F      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | F      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F      = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | | F      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | F      = 12} , self = 65 , parent = Nothing , duration = 0.690465767000 , status
| | | | F      = Fail , start = 2025-09-03 11:07:33.809232698 UTC , finish = 2025-09-03
| | | | F      11:07:34.499698465 UTC , thread_cap_info = ("ThreadId 56", 3, False)}
| | | | F      
| | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F    = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | F    = 0 , alphabet_size = 3 , total_length = 12} , self = 47 , parent = Nothing
| | | | | F    , duration = 0.191013959000 , status = Fail , start = 2025-09-03 11:07:33.847590822
| | | | | F    UTC , finish = 2025-09-03 11:07:34.038604781 UTC , thread_cap_info = ("ThreadId
| | | | | F    65", 0, False)}
| | | | | F    
| | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F  = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 46 , parent = Nothing
| | | | | | F  , duration = 0.176399694000 , status = Fail , start = 2025-09-03 11:07:33.847602307
| | | | | | F  UTC , finish = 2025-09-03 11:07:34.024002001 UTC , thread_cap_info = ("ThreadId
| | | | | | F  67", 0, False)}
| | | | | | F  
F | | | | | |  
F | | | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | | | | |  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F | | | | | |  = 0 , alphabet_size = 9 , total_length = 180} , self = 66 , parent = Nothing
F | | | | | |  , duration = 0.526195033000 , status = Fail , start = 2025-09-03 11:07:33.988053596
F | | | | | |  UTC , finish = 2025-09-03 11:07:34.514248629 UTC , thread_cap_info = ("ThreadId
F | | | | | |  71", 0, False)}
F | | | | | |  
| | F | | | |  
| |   | | | F  
| |   | | F    
| |   F |      
| | F   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F   |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | F   |      = 37} , self = 64 , parent = Nothing , duration = 0.121954997000 , status
| | F   |      = Fail , start = 2025-09-03 11:07:34.207387013 UTC , finish = 2025-09-03
| | F   |      11:07:34.32934201 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| | F   |      
| | | F |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | F |      = 37} , self = 67 , parent = Nothing , duration = 0.320651532000 , status
| | | F |      = Fail , start = 2025-09-03 11:07:34.211190001 UTC , finish = 2025-09-03
| | | F |      11:07:34.531841533 UTC , thread_cap_info = ("ThreadId 102", 0, False)}
| | | F |      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | | | S    alphabet_size = 5 , total_length = 45} , self = 68 , parent = Nothing ,
| | | | | S    duration = 0.338814458000 , status = Success , start = 2025-09-03 11:07:34.213366405
| | | | | S    UTC , finish = 2025-09-03 11:07:34.552180863 UTC , thread_cap_info = ("ThreadId
| | | | | S    103", 0, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | | | | | E  = 5 , total_length = 45} , self = 70 , parent = Nothing , duration = 0.295945181000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:07:34.294658506
| | | | | | E  UTC , finish = 2025-09-03 11:07:34.590603687 UTC , thread_cap_info = ("ThreadId
| | | | | | E  105", 0, False)}
| | | | | | E  
| | F | | | |  
| | S | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | | | |  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | S | | | |  alphabet_size = 4 , total_length = 37} , self = 72 , parent = Nothing ,
| | S | | | |  duration = 0.189433900000 , status = Success , start = 2025-09-03 11:07:34.425129628
| | S | | | |  UTC , finish = 2025-09-03 11:07:34.614563528 UTC , thread_cap_info = ("ThreadId
| | S | | | |  106", 0, False)}
| | S | | | |  
| | | | F | |  
| | | | E | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E | |  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | | E | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E | |  = 12} , self = 82 , parent = Nothing , duration = 0.164915172000 , status
| | | | E | |  = Except "AsyncCancelled" , start = 2025-09-03 11:07:34.499727374 UTC ,
| | | | E | |  finish = 2025-09-03 11:07:34.664642546 UTC , thread_cap_info = ("ThreadId
| | | | E | |  109", 3, False)}
| | | | E | |  
F | | | | | |  
  | | F | | |  
  | |   | S |  
  | |   |   E  
  | S   |      
  |     E      
  E            
