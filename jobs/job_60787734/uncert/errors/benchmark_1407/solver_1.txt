last 621 length 2664
CNF 621 vars 2664 clauses
last 588 length 2399
last 662 length 2696
last 599 length 2446
CNF 662 vars 2696 clauses
CNF 588 vars 2399 clauses
CNF 599 vars 2446 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2228, clauses: 8046
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7088, clauses: 29373
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7947
last 2228 length 8046
last 7088 length 29373
last 5729 length 30681
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29367
last 2216 length 7947
last 7101 length 45964
CNF 2228 vars 8046 clauses
last 7086 length 29367
CNF 7088 vars 29373 clauses
CNF 5729 vars 30681 clauses
CNF 2216 vars 7947 clauses
CNF 7101 vars 45964 clauses
[Info] pool sizes (success) 32636 seen 8292 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 7086 vars 29367 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [b, b, b, b, a, b, a, b, a, b, c]
to
  [b, b, b, b, b, a, b, a, b, a, b, c]
via 12 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b, c] -> [c, b, a, c, a] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [b, b, b, b, a, b, a, b, a, b, c], via = [(Step   { rule = 2, position = 8}, [b, b, b, b, a, b, a, b, c, b, a, c, a]), (Step   { rule = 0, position = 10}, [b, b, b, b, a, b, a, b, c, b, c, a]), (Step   { rule = 0, position = 11}, [b, b, b, b, a, b, a, b, c, b, c]), (Step   { rule = 2, position = 6}, [b, b, b, b, a, b, c, b, a, c, a, b, c]), (Step   { rule = 0, position = 8}, [b, b, b, b, a, b, c, b, c, a, b, c]), (Step   { rule = 2, position = 4}, [b, b, b, b, c, b, a, c, a, b, c, a, b, c]), (Step   { rule = 3, position = 7}, [b, b, b, b, c, b, a, a, b, c, a, b, c]), (Step   { rule = 3, position = 4}, [b, b, b, b, b, a, a, b, c, a, b, c]), (Step   { rule = 2, position = 6}, [b, b, b, b, b, a, c, b, a, c, a, a, b, c]), (Step   { rule = 3, position = 9}, [b, b, b, b, b, a, c, b, a, a, a, b, c]), (Step   { rule = 3, position = 6}, [b, b, b, b, b, a, b, a, a, a, b, c]), (Step   { rule = 1, position = 8}, [b, b, b, b, b, a, b, a, b, a, b, c])], to = [b, b, b, b, b, a, b, a, b, a, b, c]}

**************************************************
skeleton: (4,3)\Loop{12}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2228, clauses: 8046, status: Unsatisfied, time: 0.353770898s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S            , closure = Forward\n , start_strict_only = True\n , max_closure_length
S            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S            = 12} , self = 66 , parent = Nothing , duration = 0.516562176000 , status
S            = Success , start = 2025-09-03 11:52:08.255983223 UTC , finish = 2025-09-03
S            11:52:08.772545399 UTC , thread_cap_info = ("ThreadId 36", 2, False)}
S            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 180} , self = 65 , parent = Nothing , duration = 0.443422051000 , status
| F          = Fail , start = 2025-09-03 11:52:08.315693444 UTC , finish = 2025-09-03
| F          11:52:08.759115495 UTC , thread_cap_info = ("ThreadId 63", 2, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 9 , total_length = 180} , self = 56 , parent = Nothing
| | F        , duration = 0.171887588000 , status = Fail , start = 2025-09-03 11:52:08.32697713
| | F        UTC , finish = 2025-09-03 11:52:08.498864718 UTC , thread_cap_info = ("ThreadId
| | F        78", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F      = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 180} , self = 67 , parent = Nothing , duration = 0.478608723000 , status
| | | F      = Fail , start = 2025-09-03 11:52:08.332517399 UTC , finish = 2025-09-03
| | | F      11:52:08.811126122 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | F    = 38} , self = 53 , parent = Nothing , duration = 0.104147454000 , status
| | | | F    = Fail , start = 2025-09-03 11:52:08.343380101 UTC , finish = 2025-09-03
| | | | F    11:52:08.447527555 UTC , thread_cap_info = ("ThreadId 89", 0, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | F  = 38} , self = 54 , parent = Nothing , duration = 0.103412988000 , status
| | | | | F  = Fail , start = 2025-09-03 11:52:08.34718253 UTC , finish = 2025-09-03
| | | | | F  11:52:08.450595518 UTC , thread_cap_info = ("ThreadId 90", 0, False)}
| | | | | F  
| | | | F |  
| | | |   F  
| | F |      
| F   |      
S     |      
      F      
