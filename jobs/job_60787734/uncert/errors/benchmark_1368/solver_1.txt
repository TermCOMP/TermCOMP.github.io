last 5875 length 40994
CNF 5875 vars 40994 clauses
last 5590 length 29940
CNF 5590 vars 29940 clauses
last 787 length 3660
last 1013 length 4338
CNF 1013 vars 4338 clauses
CNF 787 vars 3660 clauses
last 894 length 3830
last 684 length 3222
CNF 894 vars 3830 clauses
CNF 684 vars 3222 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7991
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6680, clauses: 27733
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1844, clauses: 6630
last 2181 length 7991
last 6680 length 27733
last 1844 length 6630
CNF 2181 vars 7991 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5756, clauses: 23833
CNF 1844 vars 6630 clauses
CNF 6680 vars 27733 clauses
last 5756 length 23833
CNF 5756 vars 23833 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1844, clauses: 6630, status: Satisfied, time: 0.090480038s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7991, status: Satisfied, time: 0.156457774s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6680, clauses: 27733, status: Satisfied, time: 0.155411962s
last 635 length 2672
CNF 635 vars 2672 clauses
last 799 length 3231
CNF 799 vars 3231 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       context
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 5 strict rules and 4 weak rules on 5 letters       weights
SRS with 2 strict rules and 4 weak rules on 4 letters       EDG
SRS with 2 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [b, b, c, a, a, a] {- Input 0 -}
  [b, c, a] -> [] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, b] -> [b, b, c, a, a, a] {- Input 0 -}
  [a, b, c, a] -> [a] {- Input 1 -}
  [b, b, c, a] -> [b] {- Input 1 -}
  [c, b, c, a] -> [c] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, a, a, c, b, b] {- Mirror (Input 0) -}
  [a, c, b, a] -> [a] {- Mirror (Input 1) -}
  [a, c, b, b] -> [b] {- Mirror (Input 1) -}
  [a, c, b, c] -> [c] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, a, c, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, a, c, b, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, c, b, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 15A 16A 18A - \
        | 15A 16A 18A - |
        | 15A 16A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,3)\Context\Mirror(4,3)\Deepee(5/4,5)\Weight\EDG(2/4,4)\Matrix{\Arctic}{3}(0/4,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2078, clauses: 7536
last 2078 length 7536
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 12} , self = 55 , parent = Nothing , duration = 0.196865706000 , status
F          = Fail , start = 2025-09-03 11:42:02.186444349 UTC , finish = 2025-09-03
F          11:42:02.383310055 UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 9 , total_length = 144} , self = 41 , parent = Nothing
| F        , duration = 0.129745945000 , status = Fail , start = 2025-09-03 11:42:02.192065098
| F        UTC , finish = 2025-09-03 11:42:02.321811043 UTC , thread_cap_info = ("ThreadId
| F        55", 3, False)}
| F        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | F      = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 144} , self = 64 , parent = Nothing , duration = 0.259745567000 , status
| | F      = Fail , start = 2025-09-03 11:42:02.192542458 UTC , finish = 2025-09-03
| | F      11:42:02.452288025 UTC , thread_cap_info = ("ThreadId 67", 2, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F    = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 144} , self = 60 , parent = Nothing , duration = 0.198633476000 , status
| | | F    = Fail , start = 2025-09-03 11:42:02.212410771 UTC , finish = 2025-09-03
| | | F    11:42:02.411044247 UTC , thread_cap_info = ("ThreadId 69", 2, False)}
| | | F    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 65 , parent = Nothing
| | | | F  , duration = 0.168209198000 , status = Fail , start = 2025-09-03 11:42:02.311214189
| | | | F  UTC , finish = 2025-09-03 11:42:02.479423387 UTC , thread_cap_info = ("ThreadId
| | | | F  75", 0, False)}
| | | | F  
| F | | |  
F   | | |  
    | F |  
    F   |  
        F  
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F          = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F          = 33} , self = 81 , parent = Nothing , duration = 0.144447792000 , status
F          = Fail , start = 2025-09-03 11:42:02.510331026 UTC , finish = 2025-09-03
F          11:42:02.654778818 UTC , thread_cap_info = ("ThreadId 118", 0, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F        = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F        = 33} , self = 82 , parent = Nothing , duration = 0.153431846000 , status
| F        = Fail , start = 2025-09-03 11:42:02.522960211 UTC , finish = 2025-09-03
| F        11:42:02.676392057 UTC , thread_cap_info = ("ThreadId 119", 0, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | S      = 4 , total_length = 39} , self = 84 , parent = Nothing , duration = 0.272401699000
| | S      , status = Success , start = 2025-09-03 11:42:02.559230973 UTC , finish
| | S      = 2025-09-03 11:42:02.831632672 UTC , thread_cap_info = ("ThreadId 122",
| | S      0, False)}
| | S      
| | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6637, clauses: 27586
CNF 2078 vars 7536 clauses
last 6637 length 27586
| | | S    last 11109 length 50203
CNF 6637 vars 27586 clauses
, num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | | S    = 4 , total_length = 39} , self = 85 , parent = Nothing , duration = 0.261633715000
| | | S    , status = Success , start = 2025-09-03 11:42:02.571802468 UTC , finish
| | | S    = 2025-09-03 11:42:02.833436183 UTC , thread_cap_info = ("ThreadId 124",
| | | S    0, False)}
| | | S    
F | | |    
S | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |    = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
S | | |    = 4 , total_length = 33} , self = 83 , parent = Nothing , duration = 0.174021033000
S | | |    , status = Success , start = 2025-09-03 11:42:02.657202262 UTC , finish
S | | |    = 2025-09-03 11:42:02.831223295 UTC , thread_cap_info = ("ThreadId 125",
S | | |    0, False)}
S | | |    
| F | |    
| E | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| E | |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| E | |    = 4 , total_length = 33} , self = 93 , parent = Nothing , duration = 0.172271937000
| E | |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:02.676443853
| E | |    UTC , finish = 2025-09-03 11:42:02.84871579 UTC , thread_cap_info = ("ThreadId
| E | |    126", 0, False)}
| E | |    
S | | |    
  | S |    
  |   S    
  E        
CNF 11109 vars 50203 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2078, clauses: 7536, status: Unsatisfied, time: 0.096967888s
