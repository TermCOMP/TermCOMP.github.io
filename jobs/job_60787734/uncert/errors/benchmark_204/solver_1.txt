last 1199 length 5310
last 1095 length 4704
CNF 1095 vars 4704 clauses
CNF 1199 vars 5310 clauses
last 1465 length 5725
CNF 1465 vars 5725 clauses
last 1457 length 5839
CNF 1457 vars 5839 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6207, clauses: 22076
last 6207 length 22076
CNF 6207 vars 22076 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8844, clauses: 31535
last 8844 length 31535
CNF 8844 vars 31535 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8844, clauses: 31535, status: Satisfied, time: 0.23531916s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18513, clauses: 76086
last 18513 length 76086
last 1423 length 5705
CNF 1423 vars 5705 clauses
last 1399 length 5473
CNF 1399 vars 5473 clauses
CNF 18513 vars 76086 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8633, clauses: 30714
last 8633 length 30714
CNF 8633 vars 30714 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18513, clauses: 76086, status: Satisfied, time: 0.424834121s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6207, clauses: 22076, status: Unsatisfied, time: 0.944464474s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8633, clauses: 30714, status: Satisfied, time: 0.162415614s
last 767 length 3164
CNF 767 vars 3164 clauses
last 968 length 3953
CNF 968 vars 3953 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5133, clauses: 17807
last 5133 length 17807
last 965 length 3835
last 1121 length 4553
CNF 965 vars 3835 clauses
CNF 5133 vars 17807 clauses
CNF 1121 vars 4553 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5133, clauses: 17807, status: Satisfied, time: 0.109967541s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6506, clauses: 22770
last 6506 length 22770
CNF 6506 vars 22770 clauses
**************************************************
summary
**************************************************
SRS with 16 rules on 11 letters       mirror
SRS with 16 rules on 11 letters       DP
SRS with 11 strict rules and 16 weak rules on 15 letters       weights
SRS with 8 strict rules and 16 weak rules on 14 letters       EDG
SRS with 8 strict rules and 16 weak rules on 14 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 16 weak rules on 14 letters       weights
SRS with 3 strict rules and 16 weak rules on 13 letters       EDG
SRS with 3 strict rules and 16 weak rules on 13 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 16 weak rules on 13 letters       EDG
SRS with 2 strict rules and 16 weak rules on 13 letters       Usable
SRS with 2 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [B, a] -> [BA] {- Input 0 -}
  [B, b] -> [B, B] {- Input 1 -}
  [BA, a] -> [BAA] {- Input 2 -}
  [BA, b] -> [BA, B] {- Input 3 -}
  [BAA, a] -> [BAA, A] {- Input 4 -}
  [BAA, b] -> [BAAB] {- Input 5 -}
  [BAAB, a] -> [BAABA] {- Input 6 -}
  [BAAB, b] -> [BAAB, B] {- Input 7 -}
  [BAABA, a] -> [BAABAA] {- Input 8 -}
  [BAABA, b] -> [BAABA, B] {- Input 9 -}
  [BAABAA] -> [a, b, a] {- Input 10 -}
  [A, a] -> [A, A] {- Input 11 -}
  [A, b] -> [AB] {- Input 12 -}
  [AB, a] -> [ABA] {- Input 13 -}
  [AB, b] -> [AB, B] {- Input 14 -}
  [ABA] -> [b, a, a, b, a, a] {- Input 15 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, B] -> [BA] {- Mirror (Input 0) -}
  [b, B] -> [B, B] {- Mirror (Input 1) -}
  [a, BA] -> [BAA] {- Mirror (Input 2) -}
  [b, BA] -> [B, BA] {- Mirror (Input 3) -}
  [a, BAA] -> [A, BAA] {- Mirror (Input 4) -}
  [b, BAA] -> [BAAB] {- Mirror (Input 5) -}
  [a, BAAB] -> [BAABA] {- Mirror (Input 6) -}
  [b, BAAB] -> [B, BAAB] {- Mirror (Input 7) -}
  [a, BAABA] -> [BAABAA] {- Mirror (Input 8) -}
  [b, BAABA] -> [B, BAABA] {- Mirror (Input 9) -}
  [BAABAA] -> [a, b, a] {- Mirror (Input 10) -}
  [a, A] -> [A, A] {- Mirror (Input 11) -}
  [b, A] -> [AB] {- Mirror (Input 12) -}
  [a, AB] -> [ABA] {- Mirror (Input 13) -}
  [b, AB] -> [B, AB] {- Mirror (Input 14) -}
  [ABA] -> [a, a, b, a, a, b] {- Mirror (Input 15) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [BAABAA#] |-> [b#, a] {- DP (Top 1) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [a#, AB] |-> [ABA#] {- DP (Top 0) (Mirror (Input 13)) -}
  [ABA#] |-> [a#, a, b] {- DP (Top 3) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, a, b, a, a, b] {- DP (Top 0) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b] {- DP (Top 4) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b, a, a, b] {- DP (Top 1) (Mirror (Input 15)) -}
  [ABA#] |-> [b#] {- DP (Top 5) (Mirror (Input 15)) -}
  [ABA#] |-> [b#, a, a, b] {- DP (Top 2) (Mirror (Input 15)) -}
reason
  (BAAB, 0/1)
  (BAABAA, 0/1)
  (BAABA, 0/1)
  (a, 0/1)
  (B, 0/1)
  (b, 0/1)
  (ABA, 0/1)
  (BA, 0/1)
  (AB, 0/1)
  (BAA, 0/1)
  (A, 0/1)
  (BAABAA#, 1/1)
  (a#, 1/1)
  (b#, 0/1)
  (ABA#, 1/1)
   property Termination
has value Just True
for SRS
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [a#, AB] |-> [ABA#] {- DP (Top 0) (Mirror (Input 13)) -}
  [ABA#] |-> [a#, a, b] {- DP (Top 3) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, a, b, a, a, b] {- DP (Top 0) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b] {- DP (Top 4) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b, a, a, b] {- DP (Top 1) (Mirror (Input 15)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [a#, AB] |-> [ABA#] {- DP (Top 0) (Mirror (Input 13)) -}
  [ABA#] |-> [a#, a, b] {- DP (Top 3) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, a, b, a, a, b] {- DP (Top 0) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b] {- DP (Top 4) (Mirror (Input 15)) -}
  [ABA#] |-> [a#, b, a, a, b] {- DP (Top 1) (Mirror (Input 15)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  ( BAAB
  , Wk  / 0A 2A  2A \
        | -  -2A -  |
        \ -  -   0A / )
  ( BAABAA
  , Wk  / 0A  2A 2A \
        | -1A 0A 0A |
        \ -   -  0A / )
  ( BAABA
  , Wk  / 0A  2A  2A \
        | -2A -2A -  |
        \ -   -   0A / )
  ( a
  , Wk  / 0A  -  -  \
        | -2A 1A -  |
        \ -   -  0A / )
  ( B
  , Wk  / 0A 2A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( b
  , Wk  / 0A 1A  -  \
        | -  -2A -  |
        \ -  -   0A / )
  ( ABA
  , Wk  / 2A 1A 2A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( BA
  , Wk  / 0A  2A 2A \
        | -2A 0A 0A |
        \ -   -  0A / )
  ( AB
  , Wk  / 2A  2A 2A \
        | -1A -  -  |
        \ -   -  0A / )
  ( BAA
  , Wk  / -   -  0A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( A
  , Wk  / -  -  0A \
        | 1A 1A 1A |
        \ -  -  0A / )
  ( BAABAA#
  , Wk  / 0A 2A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( a#
  , Wk  / 0A 0A -2A \
        | -  -  -   |
        \ -  -  0A  / )
  ( ABA#
  , Wk  / 2A 2A 2A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [a#, AB] |-> [ABA#] {- DP (Top 0) (Mirror (Input 13)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  (BAAB, 0/1)
  (BAABAA, 0/1)
  (BAABA, 0/1)
  (a, 0/1)
  (B, 0/1)
  (b, 0/1)
  (ABA, 0/1)
  (BA, 0/1)
  (AB, 0/1)
  (BAA, 0/1)
  (A, 0/1)
  (BAABAA#, 1/1)
  (a#, 1/1)
  (ABA#, 0/1)
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [BAABAA#] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 10)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  ( BAAB
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( BAABAA
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( BAABA
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( B
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( ABA
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( BA
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( AB
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( BAA
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( A
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( BAABAA#
  , Wk  / 12A 12A 12A - \
        | 12A 12A 12A - |
        | 12A 12A 12A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 12A 12A - \
        | 10A 12A 12A - |
        | 10A 12A 12A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
  [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
  [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
  [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
  [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
  [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
  [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
  [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
  [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
  [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
  [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
  [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
  [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
  [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
  [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
  [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
  [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
reason
  remove un-usable
    SRS
      [a, B] ->= [BA] {- DP Nontop (Mirror (Input 0)) -}
      [b, B] ->= [B, B] {- DP Nontop (Mirror (Input 1)) -}
      [a, BA] ->= [BAA] {- DP Nontop (Mirror (Input 2)) -}
      [b, BA] ->= [B, BA] {- DP Nontop (Mirror (Input 3)) -}
      [a, BAA] ->= [A, BAA] {- DP Nontop (Mirror (Input 4)) -}
      [b, BAA] ->= [BAAB] {- DP Nontop (Mirror (Input 5)) -}
      [a, BAAB] ->= [BAABA] {- DP Nontop (Mirror (Input 6)) -}
      [b, BAAB] ->= [B, BAAB] {- DP Nontop (Mirror (Input 7)) -}
      [a, BAABA] ->= [BAABAA] {- DP Nontop (Mirror (Input 8)) -}
      [b, BAABA] ->= [B, BAABA] {- DP Nontop (Mirror (Input 9)) -}
      [BAABAA] ->= [a, b, a] {- DP Nontop (Mirror (Input 10)) -}
      [a, A] ->= [A, A] {- DP Nontop (Mirror (Input 11)) -}
      [b, A] ->= [AB] {- DP Nontop (Mirror (Input 12)) -}
      [a, AB] ->= [ABA] {- DP Nontop (Mirror (Input 13)) -}
      [b, AB] ->= [B, AB] {- DP Nontop (Mirror (Input 14)) -}
      [ABA] ->= [a, a, b, a, a, b] {- DP Nontop (Mirror (Input 15)) -}
   property Termination
has value Just True
for SRS
  [BAABAA#] |-> [a#] {- DP (Top 2) (Mirror (Input 10)) -}
  [a#, BAABA] |-> [BAABAA#] {- DP (Top 0) (Mirror (Input 8)) -}
reason
  (BAABA, 2/1)
  (BAABAA#, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(16,11)\Deepee(11/16,15)\Weight\EDG(8/16,14)\Matrix{\ArcticBZ}{3}(4/16,14)\Weight\EDG(3/16,13)\Matrix{\Arctic}{3}\EDG(2/16,13)\Usable(2,3)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6506, clauses: 22770, status: Unsatisfied, time: 0.345140429s
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.008003338000
  min duration 1.008003338000
  total durat. 1.008003338000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 24
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 16
      , alphabet_size = 14
      , total_length = 92}
    , self = 79
    , parent = Nothing
    , duration = 1.008003338000
    , status = Success
    , start = 2025-09-03 11:08:57.714519872 UTC
    , finish = 2025-09-03 11:08:58.72252321 UTC
    , thread_cap_info = ("ThreadId 89", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 0.451738592000
  min duration 0.280784803000
  total durat. 1.092019808000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.510102161000
  min duration 0.220400693000
  total durat. 1.133084894000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.034439888000
  min duration 1.034439888000
  total durat. 1.034439888000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 24
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 16
      , alphabet_size = 14
      , total_length = 92}
    , self = 78
    , parent = Nothing
    , duration = 1.034439888000
    , status = Fail
    , start = 2025-09-03 11:08:57.664121318 UTC
    , finish = 2025-09-03 11:08:58.698561206 UTC
    , thread_cap_info = ("ThreadId 85", 1, False)}
**************************************************
S            Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S            epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S            = Size { num_rules = 1936 , num_strict_rules = 1936 , num_top_rules = 0
S            , num_weak_rules = 0 , alphabet_size = 121 , total_length = 11132} , self
S            = 53 , parent = Nothing , duration = 0.249174241000 , status = Success
S            , start = 2025-09-03 11:08:57.569952897 UTC , finish = 2025-09-03 11:08:57.819127138
S            UTC , thread_cap_info = ("ThreadId 54", 0, False)}
S            
| S          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S          = Size { num_rules = 1573 , num_strict_rules = 1573 , num_top_rules = 0
| S          , num_weak_rules = 0 , alphabet_size = 121 , total_length = 8954} , self
| S          = 63 , parent = Nothing , duration = 0.564657387000 , status = Success
| S          , start = 2025-09-03 11:08:57.647302102 UTC , finish = 2025-09-03 11:08:58.211959489
| S          UTC , thread_cap_info = ("ThreadId 83", 3, False)}
| S          
| | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F        = 24 , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 16 ,
| | F        alphabet_size = 14 , total_length = 92} , self = 78 , parent = Nothing
| | F        , duration = 1.034439888000 , status = Fail , start = 2025-09-03 11:08:57.664121318
| | F        UTC , finish = 2025-09-03 11:08:58.698561206 UTC , thread_cap_info = ("ThreadId
| | F        85", 1, False)}
| | F        
| | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S      = 35 , num_strict_rules = 19 , num_top_rules = 19 , num_weak_rules = 16
| | | S      , alphabet_size = 18 , total_length = 124} , self = 62 , parent = Nothing
| | | S      , duration = 0.510102161000 , status = Success , start = 2025-09-03 11:08:57.695392121
| | | S      UTC , finish = 2025-09-03 11:08:58.205494282 UTC , thread_cap_info = ("ThreadId
| | | S      88", 1, False)}
| | | S      
| | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 24
| | | | S    , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 16 , alphabet_size
| | | | S    = 14 , total_length = 92} , self = 79 , parent = Nothing , duration = 1.008003338000
| | | | S    , status = Success , start = 2025-09-03 11:08:57.714519872 UTC , finish
| | | | S    = 2025-09-03 11:08:58.72252321 UTC , thread_cap_info = ("ThreadId 89",
| | | | S    1, False)}
| | | | S    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 35
| | | | | E  , num_strict_rules = 19 , num_top_rules = 19 , num_weak_rules = 16 , alphabet_size
| | | | | E  = 18 , total_length = 124} , self = 66 , parent = Nothing , duration =
| | | | | E  0.451738592000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | | | E  11:08:57.814547055 UTC , finish = 2025-09-03 11:08:58.266285647 UTC , thread_cap_info
| | | | | E  = ("ThreadId 93", 1, False)}
| | | | | E  
S | | | | |  
F | | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
F | | | | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
F | | | | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
F | | | | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
F | | | | |  = False}" , input_size = Size { num_rules = 13 , num_strict_rules = 13
F | | | | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 11 , total_length
F | | | | |  = 48} , self = 60 , parent = Nothing , duration = 0.171446106000 , status
F | | | | |  = Fail , start = 2025-09-03 11:08:57.875696337 UTC , finish = 2025-09-03
F | | | | |  11:08:58.047142443 UTC , thread_cap_info = ("ThreadId 96", 3, False)}
F | | | | |  
F | | | | |  
F | | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
F | | | | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
F | | | | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
F | | | | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
F | | | | |  = False}" , input_size = Size { num_rules = 13 , num_strict_rules = 13
F | | | | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 11 , total_length
F | | | | |  = 48} , self = 65 , parent = Nothing , duration = 0.181650831000 , status
F | | | | |  = Fail , start = 2025-09-03 11:08:58.055303378 UTC , finish = 2025-09-03
F | | | | |  11:08:58.236954209 UTC , thread_cap_info = ("ThreadId 107", 3, False)}
F | | | | |  
| | | S | |  
| S |   | |  
| F |   | |  Info { what = "Unlabel\n { accept_null_strict = True\n , produce_null_strict
| F |   | |  = False\n , verbose = False\n , tracing = False}" , input_size = Size {
| F |   | |  num_rules = 170 , num_strict_rules = 170 , num_top_rules = 0 , num_weak_rules
| F |   | |  = 0 , alphabet_size = 87 , total_length = 1026} , self = 71 , parent =
| F |   | |  Nothing , duration = 0.111761546000 , status = Fail , start = 2025-09-03
| F |   | |  11:08:58.214524821 UTC , finish = 2025-09-03 11:08:58.326286367 UTC , thread_cap_info
| F |   | |  = ("ThreadId 109", 3, False)}
| F |   | |  
F | |   | |  
F | |   | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
F | |   | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
F | |   | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
F | |   | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
F | |   | |  = False}" , input_size = Size { num_rules = 13 , num_strict_rules = 13
F | |   | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 11 , total_length
F | |   | |  = 48} , self = 76 , parent = Nothing , duration = 0.261557472000 , status
F | |   | |  = Fail , start = 2025-09-03 11:08:58.25910093 UTC , finish = 2025-09-03
F | |   | |  11:08:58.520658402 UTC , thread_cap_info = ("ThreadId 110", 3, False)}
F | |   | |  
| | |   | E  
| F |   |    
| S |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |   |    = 34 , num_strict_rules = 18 , num_top_rules = 18 , num_weak_rules = 16
| S |   |    , alphabet_size = 18 , total_length = 120} , self = 82 , parent = Nothing
| S |   |    , duration = 0.402582040000 , status = Success , start = 2025-09-03 11:08:58.356351872
| S |   |    UTC , finish = 2025-09-03 11:08:58.758933912 UTC , thread_cap_info = ("ThreadId
| S |   |    120", 1, False)}
| S |   |    
| | | E |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 34
| | | E |    , num_strict_rules = 18 , num_top_rules = 18 , num_weak_rules = 16 , alphabet_size
| | | E |    = 18 , total_length = 120} , self = 86 , parent = Nothing , duration =
| | | E |    0.359496413000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E |    11:08:58.455083503 UTC , finish = 2025-09-03 11:08:58.814579916 UTC , thread_cap_info
| | | E |    = ("ThreadId 126", 1, False)}
| | | E |    
F | | | |    
F | | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
F | | | |    { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
F | | | |    = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
F | | | |    = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
F | | | |    = False}" , input_size = Size { num_rules = 13 , num_strict_rules = 13
F | | | |    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 11 , total_length
F | | | |    = 48} , self = 98 , parent = Nothing , duration = 0.488362217000 , status
F | | | |    = Fail , start = 2025-09-03 11:08:58.578791839 UTC , finish = 2025-09-03
F | | | |    11:08:59.067154056 UTC , thread_cap_info = ("ThreadId 127", 3, False)}
F | | | |    
| | F | |    
| |   | S    
| S   |      
|     E      
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| F          = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size = 13 , total_length
| F          = 69} , self = 93 , parent = Nothing , duration = 0.101151601000 , status
| F          = Fail , start = 2025-09-03 11:08:58.821989875 UTC , finish = 2025-09-03
| F          11:08:58.923141476 UTC , thread_cap_info = ("ThreadId 136", 1, False)}
| F          
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 19 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 16 ,
| | S        alphabet_size = 13 , total_length = 69} , self = 97 , parent = Nothing
| | S        , duration = 0.220400693000 , status = Success , start = 2025-09-03 11:08:58.834971493
| | S        UTC , finish = 2025-09-03 11:08:59.055372186 UTC , thread_cap_info = ("ThreadId
| | S        141", 1, False)}
| | S        
| F |        
| E |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 19
| E |        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size
| E |        = 13 , total_length = 69} , self = 100 , parent = Nothing , duration =
| E |        0.280784803000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E |        11:08:58.934550613 UTC , finish = 2025-09-03 11:08:59.215335416 UTC , thread_cap_info
| E |        = ("ThreadId 143", 1, False)}
| E |        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | F      = 8 , num_top_rules = 8 , num_weak_rules = 16 , alphabet_size = 16 , total_length
| | | F      = 86} , self = 96 , parent = Nothing , duration = 0.110039466000 , status
| | | F      = Fail , start = 2025-09-03 11:08:58.944707994 UTC , finish = 2025-09-03
| | | F      11:08:59.05474746 UTC , thread_cap_info = ("ThreadId 144", 1, False)}
| | | F      
| | | F      
| | S        
F |          
  E          
