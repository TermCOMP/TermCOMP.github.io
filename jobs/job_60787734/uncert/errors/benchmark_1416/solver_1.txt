last 3711 length 15759
CNF 3711 vars 15759 clauses
last 3632 length 15590
CNF 3632 vars 15590 clauses
last 475 length 1880
last 413 length 1595
last 809 length 3175
last 582 length 2324
CNF 475 vars 1880 clauses
CNF 413 vars 1595 clauses
CNF 809 vars 3175 clauses
CNF 582 vars 2324 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2496, clauses: 9305
last 2496 length 9305
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1760, clauses: 6303
last 1760 length 6303
CNF 2496 vars 9305 clauses
CNF 1760 vars 6303 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5208, clauses: 21441
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2496, clauses: 9305, status: Satisfied, time: 0.129510499s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6261, clauses: 25791
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1760, clauses: 6303, status: Satisfied, time: 0.128213622s
last 5208 length 21441
last 739 length 2910
last 554 length 2230
last 409 length 1600
last 381 length 1514
CNF 739 vars 2910 clauses
CNF 554 vars 2230 clauses
CNF 409 vars 1600 clauses
CNF 381 vars 1514 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1652, clauses: 5838
last 1652 length 5838
CNF 1652 vars 5838 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2390, clauses: 8826
last 2390 length 8826
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6215, clauses: 25615
last 6215 length 25615
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1652, clauses: 5838, status: Satisfied, time: 0.125972336s
CNF 2390 vars 8826 clauses
CNF 6215 vars 25615 clauses
last 6039 length 24476
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2390, clauses: 8826, status: Unsatisfied, time: 0.120904538s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6215, clauses: 25615, status: Satisfied, time: 0.111187897s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b, c] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [a, a] -> [c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [a, a] -> [c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, a] -> [b, c] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 13A 13A 15A - \
        | 13A 13A 15A - |
        | 13A 13A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(2/5,4)\Matrix{\Arctic}{3}\EDG(1/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of last 7394 length 30883
[ tileunsCNF 6039 vars 24476 clauses
, CNF 7394 vars 30883 clauses
Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 12} , self = 56 , parent = Nothing , duration = 0.154416822000 , status
F              = Fail , start = 2025-09-03 11:53:25.272225692 UTC , finish = 2025-09-03
F              11:53:25.426642514 UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 59 , parent = Nothing , duration = 0.148720454000 , status
| F            = Fail , start = 2025-09-03 11:53:25.282215906 UTC , finish = 2025-09-03
| F            11:53:25.43093636 UTC , thread_cap_info = ("ThreadId 49", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 162} , self = 61 , parent = Nothing , duration = 0.140316781000 , status
| | F          = Fail , start = 2025-09-03 11:53:25.293881282 UTC , finish = 2025-09-03
| | F          11:53:25.434198063 UTC , thread_cap_info = ("ThreadId 51", 1, False)}
| | F          
| | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 68 , parent = Nothing
| | | F        , duration = 0.383782271000 , status = Fail , start = 2025-09-03 11:53:25.294109144
| | | F        UTC , finish = 2025-09-03 11:53:25.677891415 UTC , thread_cap_info = ("ThreadId
| | | F        75", 0, False)}
| | | F        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 9 , total_length = 162} , self = 63 , parent = Nothing
| | | | F      , duration = 0.351880643000 , status = Fail , start = 2025-09-03 11:53:25.313187774
| | | | F      UTC , finish = 2025-09-03 11:53:25.665068417 UTC , thread_cap_info = ("ThreadId
| | | | F      77", 0, False)}
| | | | F      
| | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | E    = 12} , self = 105 , parent = Nothing , duration = 0.788662629000 , status
| | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:53:25.333093241 UTC ,
| | | | | E    finish = 2025-09-03 11:53:26.12175587 UTC , thread_cap_info = ("ThreadId
| | | | | E    87", 3, False)}
| | | | | E    
F | | | | |    
  F | | | |    
F   | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F   | | | |    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
F   | | | |    = 29} , self = 67 , parent = Nothing , duration = 0.244537779000 , status
F   | | | |    = Fail , start = 2025-09-03 11:53:25.430937157 UTC , finish = 2025-09-03
F   | | | |    11:53:25.675474936 UTC , thread_cap_info = ("ThreadId 94", 3, False)}
F   | | | |    
| F | | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F | | | |    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| F | | | |    = 29} , self = 64 , parent = Nothing , duration = 0.237801399000 , status
| F | | | |    = Fail , start = 2025-09-03 11:53:25.43095104 UTC , finish = 2025-09-03
| F | | | |    11:53:25.668752439 UTC , thread_cap_info = ("ThreadId 96", 3, False)}
| F | | | |    
| | F | | |    
| | F | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F | | |    = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | F | | |    = 45} , self = 65 , parent = Nothing , duration = 0.234375801000 , status
| | F | | |    = Fail , start = 2025-09-03 11:53:25.434395213 UTC , finish = 2025-09-03
| | F | | |    11:53:25.668771014 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | F | | |    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | F  = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | | | F  = 45} , self = 66 , parent = Nothing , duration = 0.228149529000 , status
| | | | | | F  = Fail , start = 2025-09-03 11:53:25.440655631 UTC , finish = 2025-09-03
| | | | | | F  11:53:25.66880516 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | | | | | F  
| | | | F | |  
| F | |   | |  
|   F |   | |  
|     |   | F  
| S   |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S   |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S   |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S   |   |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S   |   |    = 4 , total_length = 29} , self = 89 , parent = Nothing , duration = 0.169630205000
| S   |   |    , status = Success , start = 2025-09-03 11:53:25.668820091 UTC , finish
| S   |   |    = 2025-09-03 11:53:25.838450296 UTC , thread_cap_info = ("ThreadId 106",
| S   |   |    3, False)}
| S   |   |    
| | S |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |   |    = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | S |   |    alphabet_size = 5 , total_length = 45} , self = 82 , parent = Nothing ,
| | S |   |    duration = 0.156450677000 , status = Success , start = 2025-09-03 11:53:25.672801829
| | S |   |    UTC , finish = 2025-09-03 11:53:25.829252506 UTC , thread_cap_info = ("ThreadId
| | S |   |    107", 3, False)}
| | S |   |    
F | | |   |    
  | | F   |    
E | |     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
E | |     |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
E | |     |    = 5 , total_length = 45} , self = 84 , parent = Nothing , duration = 0.136564049000
E | |     |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:53:25.69286474
E | |     |    UTC , finish = 2025-09-03 11:53:25.829428789 UTC , thread_cap_info = ("ThreadId
E | |     |    108", 3, False)}
E | |     |    
| | | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E   |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E   |    = 4 , total_length = 29} , self = 91 , parent = Nothing , duration = 0.143521760000
| | | E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:53:25.697464911
| | | E   |    UTC , finish = 2025-09-03 11:53:25.840986671 UTC , thread_cap_info = ("ThreadId
| | | E   |    125", 3, False)}
| | | E   |    
| | S |   |    
E |   |   |    
  S   |   |    
      E   |    
S         |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S         |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S         |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S         |    = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
S         |    = 4 , total_length = 25} , self = 100 , parent = Nothing , duration = 0.161096140000
S         |    , status = Success , start = 2025-09-03 11:53:25.852346682 UTC , finish
S         |    = 2025-09-03 11:53:26.013442822 UTC , thread_cap_info = ("ThreadId 146",
S         |    3, False)}
S         |    
| F       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F       |    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| F       |    = 5 , total_length = 41} , self = 106 , parent = Nothing , duration = 0.269411049000
| F       |    , status = Fail , start = 2025-09-03 11:53:25.852348806 UTC , finish =
| F       |    2025-09-03 11:53:26.121759855 UTC , thread_cap_info = ("ThreadId 145",
| F       |    3, False)}
| F       |    
| | S     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S     |    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | S     |    = 5 , total_length = 41} , self = 107 , parent = Nothing , duration = 0.270357344000
| | S     |    , status = Success , start = 2025-09-03 11:53:25.852356608 UTC , finish
| | S     |    = 2025-09-03 11:53:26.122713952 UTC , thread_cap_info = ("ThreadId 147",
| | S     |    3, False)}
| | S     |    
| | | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | E   |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | E   |    = 4 , total_length = 25} , self = 102 , parent = Nothing , duration = 0.187140372000
| | | E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:53:25.884825182
| | | E   |    UTC , finish = 2025-09-03 11:53:26.071965554 UTC , thread_cap_info = ("ThreadId
| | | E   |    148", 3, False)}
| | | E   |    
S | | |   |    
  | | E   |    
  | |     E    
  F |          
    S          
