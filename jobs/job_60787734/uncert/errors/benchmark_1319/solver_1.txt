last 1244 length 5054
CNF 1244 vars 5054 clauses
last 1325 length 5530
CNF 1325 vars 5530 clauses
last 678 length 2946
last 735 length 3042
CNF 735 vars 3042 clauses
CNF 678 vars 2946 clauses
last 630 length 2506
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8940
CNF 630 vars 2506 clauses
last 532 length 2157
last 2477 length 8940
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7091, clauses: 29345
CNF 532 vars 2157 clauses
CNF 2477 vars 8940 clauses
last 7091 length 29345
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8940, status: Satisfied, time: 0.06747809s
CNF 7091 vars 29345 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2510, clauses: 9015
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7096, clauses: 29370
last 2510 length 9015
CNF 2510 vars 9015 clauses
last 7096 length 29370
CNF 7096 vars 29370 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2510, clauses: 9015, status: Satisfied, time: 0.040261649s
last 584 length 2433
CNF 584 vars 2433 clauses
last 580 length 2529
CNF 580 vars 2529 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2055, clauses: 7262
last 2055 length 7262
CNF 2055 vars 7262 clauses
last 502 length 2058
last 534 length 2171
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2055, clauses: 7262, status: Unsatisfied, time: 0.107398806s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6415, clauses: 26503
last 6415 length 26503
CNF 534 vars 2171 clauses
CNF 502 vars 2058 clauses
CNF 6415 vars 26503 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3968, clauses: 15833
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7715
last 3968 length 15833
last 2181 length 7715
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6711, clauses: 27775
last 6711 length 27775
CNF 3968 vars 15833 clauses
CNF 2181 vars 7715 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7715, status: Unsatisfied, time: 0.156647069s
CNF 6711 vars 27775 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4148, clauses: 16681
last 4148 length 16681
CNF 4148 vars 16681 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 27 rules on 9 letters       weights
SRS with 13 rules on 9 letters       mirror
SRS with 13 rules on 9 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 4 certified by automaton with 718 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [b, a, b] -> [] {- Input 1 -}
  [c, c] -> [a, a, a, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, b], [b, c], [c, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b], [b, c], [c, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] -> [[a, b], [b, c], [c, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, b], [b, c], [c, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b], [b, c], [c, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] -> [[b, b], [b, c], [c, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] -> [[c, b], [b, c], [c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b], [b, c], [c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] -> [[c, b], [b, c], [c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, a]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, c]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, a]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, c]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, a]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, c]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/2)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 1/2)
  ([b, b], 0/1)
  ([b, c], 1/2)
  ([c, a], 1/2)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, b], [b, c], [c, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b], [b, c], [c, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] -> [[a, b], [b, c], [c, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, b], [b, c], [c, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b], [b, c], [c, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] -> [[b, b], [b, c], [c, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] -> [[c, b], [b, c], [c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b], [b, c], [c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] -> [[c, b], [b, c], [c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, c], [c, c], [c, a]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [ [c, a] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, b], [a, a]] -> [ [c, b] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 1 (Input 0))) -}
  [[a, c], [a, a]] -> [ [c, c] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 2 (Input 0))) -}
  [[a, a], [b, a]] -> [ [c, a] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 0 (Input 0))) -}
  [[a, b], [b, a]] -> [ [c, b] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, c], [b, a]] -> [ [c, c] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 2 (Input 0))) -}
  [[a, a], [c, a]] -> [ [c, a] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 0 (Input 0))) -}
  [[a, b], [c, a]] -> [ [c, b] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 1 (Input 0))) -}
  [[a, c], [c, a]] -> [ [c, c] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 2 (Input 0))) -}
  [[b, c], [a, b], [b, a], [a, b]] -> [ [ a , c ] ] {- Mirror (Semlab 0 (Concon 2 (Input 1))) -}
  [[b, c], [a, b], [b, a], [c, b]] -> [ [ c , c ] ] {- Mirror (Semlab 2 (Concon 2 (Input 1))) -}
  [[c, a], [c, c], [b, c]] -> [ [b, a] , [a, b] , [a, a] , [a, a] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 0 (Input 2))) -}
  [[c, b], [c, c], [b, c]] -> [ [b, b] , [a, b] , [a, a] , [a, a] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 1 (Input 2))) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 4 certified by automaton with 718 states

**************************************************
skeleton: (3,3)\TileAllAll{2}(27,9)\Weight\Mirror(13,9)\Rfcmatchbound{4}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 1
  max duration 1.239888247000
  min duration 1.239888247000
  total durat. 1.239888247000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 13
      , num_strict_rules = 13
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 71}
    , self = 86
    , parent = Nothing
    , duration = 1.239888247000
    , status = Success
    , start = 2025-09-03 11:31:50.66584725 UTC
    , finish = 2025-09-03 11:31:51.905735497 UTC
    , thread_cap_info = ("ThreadId 72", 1, False)}
Except "AsyncCancelled" : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 1
  max duration 1.249475248000
  min duration 1.249475248000
  total durat. 1.249475248000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 13
      , num_strict_rules = 13
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 71}
    , self = 88
    , parent = Nothing
    , duration = 1.249475248000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:31:50.665837483 UTC
    , finish = 2025-09-03 11:31:51.915312731 UTC
    , thread_cap_info = ("ThreadId 70", 1, False)}
**************************************************
E            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
E            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
E            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
E            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
E            = Size { num_rules = 13 , num_strict_rules = 13 , num_top_rules = 0 , num_weak_rules
E            = 0 , alphabet_size = 9 , total_length = 71} , self = 88 , parent = Nothing
E            , duration = 1.249475248000 , status = Except "AsyncCancelled" , start
E            = 2025-09-03 11:31:50.665837483 UTC , finish = 2025-09-03 11:31:51.915312731
E            UTC , thread_cap_info = ("ThreadId 70", 1, False)}
E            
| S          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| S          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| S          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| S          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| S          = Size { num_rules = 13 , num_strict_rules = 13 , num_top_rules = 0 , num_weak_rules
| S          = 0 , alphabet_size = 9 , total_length = 71} , self = 86 , parent = Nothing
| S          , duration = 1.239888247000 , status = Success , start = 2025-09-03 11:31:50.66584725
| S          UTC , finish = 2025-09-03 11:31:51.905735497 UTC , thread_cap_info = ("ThreadId
| S          72", 1, False)}
| S          
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | S        = 5 , total_length = 41} , self = 66 , parent = Nothing , duration = 0.236321620000
| | S        , status = Success , start = 2025-09-03 11:31:50.757874138 UTC , finish
| | S        = 2025-09-03 11:31:50.994195758 UTC , thread_cap_info = ("ThreadId 101",
| | S        0, False)}
| | S        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F      = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F      = 39} , self = 64 , parent = Nothing , duration = 0.131871847000 , status
| | | F      = Fail , start = 2025-09-03 11:31:50.794026199 UTC , finish = 2025-09-03
| | | F      11:31:50.925898046 UTC , thread_cap_info = ("ThreadId 102", 0, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F    = 39} , self = 65 , parent = Nothing , duration = 0.130659822000 , status
| | | | F    = Fail , start = 2025-09-03 11:31:50.798392411 UTC , finish = 2025-09-03
| | | | F    11:31:50.929052233 UTC , thread_cap_info = ("ThreadId 103", 0, False)}
| | | | F    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | E  = 5 , total_length = 41} , self = 68 , parent = Nothing , duration = 0.278902970000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:31:50.805844102
| | | | | E  UTC , finish = 2025-09-03 11:31:51.084747072 UTC , thread_cap_info = ("ThreadId
| | | | | E  104", 0, False)}
| | | | | E  
| | | F | |  
| | |   F |  
| | | S   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S   |  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | S   |  = 5 , total_length = 39} , self = 72 , parent = Nothing , duration = 0.180101043000
| | | S   |  , status = Success , start = 2025-09-03 11:31:50.934594738 UTC , finish
| | | S   |  = 2025-09-03 11:31:51.114695781 UTC , thread_cap_info = ("ThreadId 109",
| | | S   |  0, False)}
| | | S   |  
| | | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | E |  = 5 , total_length = 39} , self = 76 , parent = Nothing , duration = 0.177917418000
| | | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:31:50.958615069
| | | | E |  UTC , finish = 2025-09-03 11:31:51.136532487 UTC , thread_cap_info = ("ThreadId
| | | | E |  110", 0, False)}
| | | | E |  
| | S | | |  
| |   | | E  
| |   S |    
| | F   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | F   |    = 5 , total_length = 32} , self = 82 , parent = Nothing , duration = 0.138771750000
| | F   |    , status = Fail , start = 2025-09-03 11:31:51.135243541 UTC , finish =
| | F   |    2025-09-03 11:31:51.274015291 UTC , thread_cap_info = ("ThreadId 121",
| | F   |    0, False)}
| | F   |    
| | |   E    
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F      = 32} , self = 83 , parent = Nothing , duration = 0.132553001000 , status
| | | F      = Fail , start = 2025-09-03 11:31:51.213462014 UTC , finish = 2025-09-03
| | | F      11:31:51.346015015 UTC , thread_cap_info = ("ThreadId 128", 0, False)}
| | | F      
| | F |      
| |   F      
| | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F        = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | F        = 5 , total_length = 32} , self = 85 , parent = Nothing , duration = 0.282274192000
| | F        , status = Fail , start = 2025-09-03 11:31:51.348066552 UTC , finish =
| | F        2025-09-03 11:31:51.630340744 UTC , thread_cap_info = ("ThreadId 134",
| | F        0, False)}
| | F        
| | F        
| S          
E            
