last 636 length 2558
CNF 636 vars 2558 clauses
last 659 length 2856
last 631 length 2573
CNF 659 vars 2856 clauses
CNF 631 vars 2573 clauses
last 1339 length 6672
CNF 1339 vars 6672 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2603, clauses: 9342
last 2603 length 9342
last 2784 length 14573
CNF 2603 vars 9342 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8556
last 2399 length 8556
CNF 2784 vars 14573 clauses
CNF 2399 vars 8556 clauses
last 3210 length 20575
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2603, clauses: 9342, status: Unsatisfied, time: 0.152481662s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9100, clauses: 37995
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8556, status: Unsatisfied, time: 0.16076078s
CNF 3210 vars 20575 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8220, clauses: 34245
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5641, clauses: 22864
last 9100 length 37995
last 8220 length 34245
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5123, clauses: 20668
last 5641 length 22864
CNF 8220 vars 34245 clauses
last 5123 length 20668
CNF 9100 vars 37995 clauses
CNF 5641 vars 22864 clauses
CNF 5123 vars 20668 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8220, clauses: 34245, status: Satisfied, time: 0.101756415s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9100, clauses: 37995, status: Satisfied, time: 0.123260955s
last 624 length 2552
CNF 624 vars 2552 clauses
last 590 length 2388
CNF 590 vars 2388 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 4 strict rules and 7 weak rules on 5 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [b, c, c, b, a, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a] {- Input 0 -}
  [b, a, b] -> [b] {- Input 0 -}
  [c, a, b] -> [c] {- Input 0 -}
  [a, c] -> [b, c, c, b, a, a] {- Input 1 -}
  [a, b, c] -> [a] {- Input 2 -}
  [b, b, c] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a] {- Mirror (Input 0) -}
  [b, a, b] -> [b] {- Mirror (Input 0) -}
  [b, a, c] -> [c] {- Mirror (Input 0) -}
  [c, a] -> [a, a, b, c, c, b] {- Mirror (Input 1) -}
  [c, b, a] -> [a] {- Mirror (Input 2) -}
  [c, b, b] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, c, c, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [c#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A -  0A \
        | 1A 1A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / 0A -   -  \
        | -  -1A -  |
        \ -  -   0A / )
  ( c
  , Wk  / 0A -  -   \
        | -  1A -1A |
        \ -  -  0A  / )
  ( c#
  , Wk  / 1A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(7,3)\Deepee(4/7,5)\Weight\EDG(2/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                = 12} , self = 67 , parent = Nothing , duration = 0.361768282000 , status
F                = Fail , start = 2025-09-03 11:43:48.806097785 UTC , finish = 2025-09-03
F                11:43:49.167866067 UTC , thread_cap_info = ("ThreadId 36", 2, False)}
F                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 9 , total_length = 96} , self = 56 , parent = Nothing
| F              , duration = 0.114681842000 , status = Fail , start = 2025-09-03 11:43:48.835298593
| F              UTC , finish = 2025-09-03 11:43:48.949980435 UTC , thread_cap_info = ("ThreadId
| F              67", 3, False)}
| F              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | F            = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 96} , self = 58 , parent = Nothing , duration = 0.141060442000 , status
| | F            = Fail , start = 2025-09-03 11:43:48.882496446 UTC , finish = 2025-09-03
| | F            11:43:49.023556888 UTC , thread_cap_info = ("ThreadId 72", 2, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F          = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F          = 96} , self = 70 , parent = Nothing , duration = 0.396855589000 , status
| | | F          = Fail , start = 2025-09-03 11:43:48.906447078 UTC , finish = 2025-09-03
| | | F          11:43:49.303302667 UTC , thread_cap_info = ("ThreadId 74", 2, False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | F        = 4 , total_length = 39} , self = 69 , parent = Nothing , duration = 0.342380791000
| | | | F        , status = Fail , start = 2025-09-03 11:43:48.91980907 UTC , finish = 2025-09-03
| | | | F        11:43:49.262189861 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| | | | F        
| | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F      = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | | F      = 4 , total_length = 41} , self = 68 , parent = Nothing , duration = 0.264513509000
| | | | | F      , status = Fail , start = 2025-09-03 11:43:48.92243913 UTC , finish = 2025-09-03
| | | | | F      11:43:49.186952639 UTC , thread_cap_info = ("ThreadId 97", 0, False)}
| | | | | F      
| | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | | | S    = 4 , total_length = 39} , self = 71 , parent = Nothing , duration = 0.448728647000
| | | | | | S    , status = Success , start = 2025-09-03 11:43:48.937942563 UTC , finish
| | | | | | S    = 2025-09-03 11:43:49.38667121 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | S    0, False)}
| | | | | | S    
| | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | | | | S  = 4 , total_length = 41} , self = 73 , parent = Nothing , duration = 0.447419312000
| | | | | | | S  , status = Success , start = 2025-09-03 11:43:48.942055108 UTC , finish
| | | | | | | S  = 2025-09-03 11:43:49.38947442 UTC , thread_cap_info = ("ThreadId 99",
| | | | | | | S  0, False)}
| | | | | | | S  
| F | | | | | |  
|   F | | | | |  
F     | | | | |  
      | | F | |  
E     | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E     | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E     | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E     | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E     | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E     | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
E     | |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
E     | |   | |  = 4 , total_length = 41} , self = 80 , parent = Nothing , duration = 0.203318471000
E     | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:43:49.187985382
E     | |   | |  UTC , finish = 2025-09-03 11:43:49.391303853 UTC , thread_cap_info = ("ThreadId
E     | |   | |  111", 0, False)}
E     | |   | |  
|     | F   | |  
| E   |     | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E   |     | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E   |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E   |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E   |     | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| E   |     | |  = 4 , total_length = 39} , self = 75 , parent = Nothing , duration = 0.125738265000
| E   |     | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:43:49.263872955
| E   |     | |  UTC , finish = 2025-09-03 11:43:49.38961122 UTC , thread_cap_info = ("ThreadId
| E   |     | |  112", 0, False)}
| E   |     | |  
| |   F     | |  
| |         S |  
| |           S  
| E              
E                
