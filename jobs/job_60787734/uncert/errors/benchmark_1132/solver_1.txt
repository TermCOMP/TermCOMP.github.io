last 639 length 2596
last 492 length 1937
last 4963 length 24615
last 597 length 2390
CNF 492 vars 1937 clauses
CNF 4963 vars 24615 clauses
CNF 639 vars 2596 clauses
CNF 597 vars 2390 clauses
last 460 length 1829
last 4231 length 19054
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7920
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2705, clauses: 9699
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7795, clauses: 32239
CNF 460 vars 1829 clauses
CNF 4231 vars 19054 clauses
last 2216 length 7920
last 2705 length 9699
last 7795 length 32239
CNF 2216 vars 7920 clauses
CNF 2705 vars 9699 clauses
CNF 7795 vars 32239 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7920, status: Unsatisfied, time: 0.13074401s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6794, clauses: 28115
last 6794 length 28115
CNF 6794 vars 28115 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2705, clauses: 9699, status: Unsatisfied, time: 0.240050584s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4319, clauses: 16950
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7795, clauses: 32239, status: Satisfied, time: 0.219651942s
last 4319 length 16950
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6794, clauses: 28115, status: Satisfied, time: 0.064572162s
CNF 4319 vars 16950 clauses
last 593 length 2416
last 496 length 2005
CNF 496 vars 2005 clauses
CNF 593 vars 2416 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2388, clauses: 8453
last 2388 length 8453
CNF 2388 vars 8453 clauses
last 422 length 1669
last 430 length 1707
CNF 430 vars 1707 clauses
CNF 422 vars 1669 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7411, clauses: 30647
last 7411 length 30647
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2388, clauses: 8453, status: Unsatisfied, time: 0.085289207s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2003, clauses: 7095
last 2003 length 7095
CNF 7411 vars 30647 clauses
CNF 2003 vars 7095 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4662, clauses: 18267
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6454, clauses: 26695
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7411, clauses: 30647, status: Satisfied, time: 0.206424871s
last 4662 length 18267
last 6454 length 26695
CNF 6454 vars 26695 clauses
CNF 4662 vars 18267 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2003, clauses: 7095, status: Unsatisfied, time: 0.246084951s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 4 strict rules and 8 weak rules on 5 letters       EDG
SRS with 4 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 8 weak rules on 5 letters       EDG
SRS with 2 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 8 weak rules on 5 letters       weights
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, a, a, c] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, c, a] -> [b] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [b, a, a, c] {- Input 1 -}
  [a, b] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [c, b] -> [c] {- Input 2 -}
  [c, c, a] -> [b] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [c, a, a, b] {- Mirror (Input 1) -}
  [b, a] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [b, c] -> [c] {- Mirror (Input 2) -}
  [a, c, c] -> [b] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [a#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A  0A 1A \
        | -2A 0A -  |
        \ -   -  0A / )
  ( b
  , Wk  / 0A -  -1A \
        | 1A 0A 0A  |
        \ -  -  0A  / )
  ( c
  , Wk  / -  0A 0A \
        | 0A 1A 1A |
        \ -  -  0A / )
  ( a#
  , Wk  / 1A - -  \
        | -  - -  |
        \ -  - 0A / )
  ( b#
  , Wk  / 1A 0A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A  1A 1A  \
        | -1A 0A -1A |
        \ -   -  0A  / )
  ( b
  , Wk  / 0A - -  \
        | 0A - -  |
        \ -  - 0A / )
  ( c
  , Wk  / -1A 1A 1A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( a#
  , Wk  / - -1A 0A \
        | - -   -  |
        \ - -   0A / )
  ( b#
  , Wk  / -1A - 1A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee\EDG(4/8,5)\Matrix{\ArcticBZ}{3}\EDG(2/8,5)\Matrix{\ArcticBZ}{3}(1/8,5)\Weight(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 0.514251414000
  min duration 0.219677401000
  total durat. 1.029024064000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.480717886000
  min duration 0.105307533000
  total durat. 1.275397754000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.114095087000
  min duration 1.114095087000
  total durat. 1.114095087000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 94
    , parent = Nothing
    , duration = 1.114095087000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:02:38.266789553 UTC
    , finish = 2025-09-03 11:02:39.38088464 UTC
    , thread_cap_info = ("ThreadId 41", 2, False)}
**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 3 , total_length = 12} , self = 41 , parent = Nothing
F              , duration = 0.102657915000 , status = Fail , start = 2025-09-03 11:02:38.25870375
F              UTC , finish = 2025-09-03 11:02:38.361361665 UTC , thread_cap_info = ("ThreadId
F              48", 3, False)}
F              
| E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E            = 12} , self = 94 , parent = Nothing , duration = 1.114095087000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-03 11:02:38.266789553 UTC ,
| E            finish = 2025-09-03 11:02:39.38088464 UTC , thread_cap_info = ("ThreadId
| E            41", 2, False)}
| E            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 65 , parent = Nothing , duration = 0.468986995000 , status
| | F          = Fail , start = 2025-09-03 11:02:38.268270441 UTC , finish = 2025-09-03
| | F          11:02:38.737257436 UTC , thread_cap_info = ("ThreadId 70", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 180} , self = 61 , parent = Nothing , duration = 0.145061013000 , status
| | | F        = Fail , start = 2025-09-03 11:02:38.271648777 UTC , finish = 2025-09-03
| | | F        11:02:38.41670979 UTC , thread_cap_info = ("ThreadId 73", 1, False)}
| | | F        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 9 , total_length = 180} , self = 64 , parent = Nothing
| | | | F      , duration = 0.327556136000 , status = Fail , start = 2025-09-03 11:02:38.271652605
| | | | F      UTC , finish = 2025-09-03 11:02:38.599208741 UTC , thread_cap_info = ("ThreadId
| | | | F      66", 0, False)}
| | | | F      
F | | | |      
F | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
F | | | |      = 37} , self = 66 , parent = Nothing , duration = 0.360761444000 , status
F | | | |      = Fail , start = 2025-09-03 11:02:38.376507375 UTC , finish = 2025-09-03
F | | | |      11:02:38.737268819 UTC , thread_cap_info = ("ThreadId 93", 3, False)}
F | | | |      
| | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F    = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | | F    alphabet_size = 4 , total_length = 37} , self = 67 , parent = Nothing ,
| | | | | F    duration = 0.429469759000 , status = Fail , start = 2025-09-03 11:02:38.400702707
| | | | | F    UTC , finish = 2025-09-03 11:02:38.830172466 UTC , thread_cap_info = ("ThreadId
| | | | | F    99", 3, False)}
| | | | | F    
| | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F  = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | | | | F  alphabet_size = 5 , total_length = 44} , self = 68 , parent = Nothing ,
| | | | | | F  duration = 0.480717886000 , status = Fail , start = 2025-09-03 11:02:38.400707707
| | | | | | F  UTC , finish = 2025-09-03 11:02:38.881425593 UTC , thread_cap_info = ("ThreadId
| | | | | | F  100", 3, False)}
| | | | | | F  
| | | F | | |  
| | | S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | S | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | | S | | |  = 5 , total_length = 44} , self = 69 , parent = Nothing , duration = 0.514251414000
| | | S | | |  , status = Success , start = 2025-09-03 11:02:38.436191374 UTC , finish
| | | S | | |  = 2025-09-03 11:02:38.950442788 UTC , thread_cap_info = ("ThreadId 103",
| | | S | | |  3, False)}
| | | S | | |  
| | | | F | |  
| | F |   | |  
F |   |   | |  
S |   |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S |   |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S |   |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S |   |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S |   |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S |   |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
S |   |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
S |   |   | |  = 4 , total_length = 37} , self = 72 , parent = Nothing , duration = 0.219677401000
S |   |   | |  , status = Success , start = 2025-09-03 11:02:38.74314051 UTC , finish
S |   |   | |  = 2025-09-03 11:02:38.962817911 UTC , thread_cap_info = ("ThreadId 109",
S |   |   | |  3, False)}
S |   |   | |  
| |   |   F |  
| | E |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E |     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E |     |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | E |     |  = 4 , total_length = 37} , self = 79 , parent = Nothing , duration = 0.152000389000
| | E |     |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:38.830826409
| | E |     |  UTC , finish = 2025-09-03 11:02:38.982826798 UTC , thread_cap_info = ("ThreadId
| | E |     |  113", 3, False)}
| | E |     |  
| | | |     F  
| | | S        
S | |          
  | E          
F |            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |            = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
F |            alphabet_size = 5 , total_length = 37} , self = 86 , parent = Nothing ,
F |            duration = 0.105307533000 , status = Fail , start = 2025-09-03 11:02:38.982852771
F |            UTC , finish = 2025-09-03 11:02:39.088160304 UTC , thread_cap_info = ("ThreadId
F |            125", 3, False)}
F |            
| | S          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | S          , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | S          = 5 , total_length = 37} , self = 88 , parent = Nothing , duration = 0.295095249000
| | S          , status = Success , start = 2025-09-03 11:02:38.99952823 UTC , finish
| | S          = 2025-09-03 11:02:39.294623479 UTC , thread_cap_info = ("ThreadId 127",
| | S          3, False)}
| | S          
F | |          
F | |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |          = 9 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 8 , alphabet_size
F | |          = 4 , total_length = 33} , self = 93 , parent = Nothing , duration = 0.259902576000
F | |          , status = Fail , start = 2025-09-03 11:02:39.092377902 UTC , finish =
F | |          2025-09-03 11:02:39.352280478 UTC , thread_cap_info = ("ThreadId 137",
F | |          3, False)}
F | |          
| | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | E        = 5 , total_length = 37} , self = 90 , parent = Nothing , duration = 0.239304435000
| | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:39.112838629
| | | E        UTC , finish = 2025-09-03 11:02:39.352143064 UTC , thread_cap_info = ("ThreadId
| | | E        136", 3, False)}
| | | E        
| | S |        
| |   E        
F |            
  E            
