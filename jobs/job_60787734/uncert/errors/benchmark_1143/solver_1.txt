last 4402 length 22022
CNF 4402 vars 22022 clauses
last 547 length 2300
last 3744 length 16790
CNF 547 vars 2300 clauses
last 688 length 3237
CNF 3744 vars 16790 clauses
CNF 688 vars 3237 clauses
last 481 length 1971
last 516 length 2115
CNF 481 vars 1971 clauses
CNF 516 vars 2115 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2070, clauses: 7451
last 2070 length 7451
CNF 2070 vars 7451 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6130, clauses: 25339
last 6130 length 25339
CNF 6130 vars 25339 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2173, clauses: 7726
last 2173 length 7726
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2070, clauses: 7451, status: Unsatisfied, time: 0.118819799s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25415
last 6167 length 25415
CNF 2173 vars 7726 clauses
CNF 6167 vars 25415 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3856, clauses: 15278
last 3856 length 15278
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2173, clauses: 7726, status: Unsatisfied, time: 0.150451574s
CNF 3856 vars 15278 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3871, clauses: 15333
last 3871 length 15333
CNF 3871 vars 15333 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6130, clauses: 25339, status: Unsatisfied, time: 0.345234536s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3385, clauses: 12985
last 3385 length 12985
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3856, clauses: 15278, status: Unsatisfied, time: 0.382528255s
CNF 3385 vars 12985 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3385, clauses: 12985, status: Unsatisfied, time: 0.302953442s
[Info] pool sizes (success) 33494 seen 9231 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [a, a, b, c, c, b, b, c]
to
  [b, c, b, b, a, c, a, a, b, c, c, b, b, c]
via 35 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, a, c, a, a] {- Input 1 -}
  [c, c, c] -> [b] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [a, a, b, c, c, b, b, c], via = [(Step   { rule = 1, position = 1}, [a, b, a, c, a, a, c, c, b, b, c]), (Step   { rule = 0, position = 4}, [a, b, a, c, a, c, c, b, b, c]), (Step   { rule = 0, position = 4}, [a, b, a, c, c, c, b, b, c]), (Step   { rule = 2, position = 3}, [a, b, a, b, b, b, c]), (Step   { rule = 1, position = 2}, [a, b, b, a, c, a, a, b, b, c]), (Step   { rule = 0, position = 3}, [a, b, b, c, a, a, b, b, c]), (Step   { rule = 1, position = 5}, [a, b, b, c, a, b, a, c, a, a, b, c]), (Step   { rule = 0, position = 6}, [a, b, b, c, a, b, c, a, a, b, c]), (Step   { rule = 1, position = 8}, [a, b, b, c, a, b, c, a, b, a, c, a, a, c]), (Step   { rule = 0, position = 11}, [a, b, b, c, a, b, c, a, b, a, c, a, c]), (Step   { rule = 0, position = 11}, [a, b, b, c, a, b, c, a, b, a, c, c]), (Step   { rule = 0, position = 9}, [a, b, b, c, a, b, c, a, b, c, c]), (Step   { rule = 1, position = 7}, [a, b, b, c, a, b, c, b, a, c, a, a, c, c]), (Step   { rule = 0, position = 10}, [a, b, b, c, a, b, c, b, a, c, a, c, c]), (Step   { rule = 0, position = 10}, [a, b, b, c, a, b, c, b, a, c, c, c]), (Step   { rule = 2, position = 9}, [a, b, b, c, a, b, c, b, a, b]), (Step   { rule = 1, position = 8}, [a, b, b, c, a, b, c, b, b, a, c, a, a]), (Step   { rule = 0, position = 11}, [a, b, b, c, a, b, c, b, b, a, c, a]), (Step   { rule = 0, position = 11}, [a, b, b, c, a, b, c, b, b, a, c]), (Step   { rule = 0, position = 9}, [a, b, b, c, a, b, c, b, b, c]), (Step   { rule = 1, position = 4}, [a, b, b, c, b, a, c, a, a, c, b, b, c]), (Step   { rule = 0, position = 7}, [a, b, b, c, b, a, c, a, c, b, b, c]), (Step   { rule = 0, position = 7}, [a, b, b, c, b, a, c, c, b, b, c]), (Step   { rule = 0, position = 5}, [a, b, b, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 0}, [b, a, c, a, a, b, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 1}, [b, c, a, a, b, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 3}, [b, c, a, b, a, c, a, a, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 6}, [b, c, a, b, a, c, a, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 6}, [b, c, a, b, a, c, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 4}, [b, c, a, b, c, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 2}, [b, c, b, a, c, a, a, c, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 5}, [b, c, b, a, c, a, c, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 5}, [b, c, b, a, c, c, c, b, c, c, b, b, c]), (Step   { rule = 2, position = 4}, [b, c, b, a, b, b, c, c, b, b, c]), (Step   { rule = 1, position = 3}, [b, c, b, b, a, c, a, a, b, c, c, b, b, c])], to = [b, c, b, b, a, c, a, a, b, c, c, b, b, c]}

**************************************************
skeleton: (3,3)\Loop{35}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.005814828000
  min duration 0.086878298000
  total durat. 1.205583871000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 27
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 162}
    , self = 72
    , parent = Nothing
    , duration = 1.005814828000
    , status = Fail
    , start = 2025-09-03 11:05:05.195701861 UTC
    , finish = 2025-09-03 11:05:06.201516689 UTC
    , thread_cap_info = ("ThreadId 108", 3, False)}
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.121003720000
  min duration 1.121003720000
  total durat. 1.121003720000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 71
    , parent = Nothing
    , duration = 1.121003720000
    , status = Success
    , start = 2025-09-03 11:05:05.055808659 UTC
    , finish = 2025-09-03 11:05:06.176812379 UTC
    , thread_cap_info = ("ThreadId 64", 1, False)}
**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 3 , total_length = 12} , self = 37 , parent = Nothing
F          , duration = 0.112890745000 , status = Fail , start = 2025-09-03 11:05:05.023047662
F          UTC , finish = 2025-09-03 11:05:05.135938407 UTC , thread_cap_info = ("ThreadId
F          50", 0, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 58 , parent = Nothing , duration = 0.131452816000 , status
| F        = Fail , start = 2025-09-03 11:05:05.031727252 UTC , finish = 2025-09-03
| F        11:05:05.163180068 UTC , thread_cap_info = ("ThreadId 60", 2, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 54 , parent = Nothing , duration = 0.108550621000 , status
| | F      = Fail , start = 2025-09-03 11:05:05.036990846 UTC , finish = 2025-09-03
| | F      11:05:05.145541467 UTC , thread_cap_info = ("ThreadId 62", 2, False)}
| | F      
| | | S    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | S    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | S    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | S    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | S    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | S    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | S    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | S    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | S    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | S    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | S    = 12} , self = 71 , parent = Nothing , duration = 1.121003720000 , status
| | | S    = Success , start = 2025-09-03 11:05:05.055808659 UTC , finish = 2025-09-03
| | | S    11:05:06.176812379 UTC , thread_cap_info = ("ThreadId 64", 1, False)}
| | | S    
F | | |    
  | F |    
F |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |   |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F |   |    = 4 , total_length = 33} , self = 66 , parent = Nothing , duration = 0.152823756000
F |   |    , status = Fail , start = 2025-09-03 11:05:05.151058977 UTC , finish =
F |   |    2025-09-03 11:05:05.303882733 UTC , thread_cap_info = ("ThreadId 91", 0,
F |   |    False)}
F |   |    
| F   |    
| F   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| F   |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| F   |    = 4 , total_length = 33} , self = 68 , parent = Nothing , duration = 0.444257986000
| F   |    , status = Fail , start = 2025-09-03 11:05:05.16378486 UTC , finish = 2025-09-03
| F   |    11:05:05.608042846 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| F   |    
| | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | F |    = 5 , total_length = 32} , self = 67 , parent = Nothing , duration = 0.268967698000
| | F |    , status = Fail , start = 2025-09-03 11:05:05.166348329 UTC , finish =
| | F |    2025-09-03 11:05:05.435316027 UTC , thread_cap_info = ("ThreadId 98", 0,
| | F |    False)}
| | F |    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | F  = 0 , alphabet_size = 9 , total_length = 162} , self = 72 , parent = Nothing
| | | | F  , duration = 1.005814828000 , status = Fail , start = 2025-09-03 11:05:05.195701861
| | | | F  UTC , finish = 2025-09-03 11:05:06.201516689 UTC , thread_cap_info = ("ThreadId
| | | | F  108", 3, False)}
| | | | F  
F | | | |  
F | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
F | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F | | | |  = 4 , total_length = 33} , self = 69 , parent = Nothing , duration = 0.466784899000
F | | | |  , status = Fail , start = 2025-09-03 11:05:05.313063737 UTC , finish =
F | | | |  2025-09-03 11:05:05.779848636 UTC , thread_cap_info = ("ThreadId 113",
F | | | |  0, False)}
F | | | |  
| | F | |  
| F   | |  
| F   | |  Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| F   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F   | |  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| F   | |  = 4 , total_length = 33} , self = 70 , parent = Nothing , duration = 0.422255744000
| F   | |  , status = Fail , start = 2025-09-03 11:05:05.616076832 UTC , finish =
| F   | |  2025-09-03 11:05:06.038332576 UTC , thread_cap_info = ("ThreadId 117",
| F   | |  0, False)}
| F   | |  
F |   | |  
  F   | |  
      S |  
        F  
