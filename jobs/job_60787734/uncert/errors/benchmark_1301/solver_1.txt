last 774 length 3221
CNF 774 vars 3221 clauses
last 537 length 2128
last 858 length 3469
CNF 858 vars 3469 clauses
CNF 537 vars 2128 clauses
last 451 length 1735
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2829, clauses: 10376
CNF 451 vars 1735 clauses
last 4024 length 20552
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2024, clauses: 7272
last 2829 length 10376
last 3977 length 17867
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7841, clauses: 32425
CNF 4024 vars 20552 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5918, clauses: 24407
last 2024 length 7272
CNF 2829 vars 10376 clauses
CNF 3977 vars 17867 clauses
last 7841 length 32425
last 5918 length 24407
CNF 2024 vars 7272 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2829, clauses: 10376, status: Satisfied, time: 0.723009832s
CNF 7841 vars 32425 clauses
CNF 5918 vars 24407 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2024, clauses: 7272, status: Satisfied, time: 0.681258072s
last 705 length 2993
last 783 length 3138
CNF 783 vars 3138 clauses
CNF 705 vars 2993 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 5 strict rules and 8 weak rules on 5 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b, c] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
  [b] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [a] -> [c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
  [b] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [a] -> [c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
  [a, b] -> [a] {- Mirror (Input 3) -}
  [b, b] -> [b] {- Mirror (Input 3) -}
  [c, b] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a] -> [b, c] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
  [b, a] -> [a] {- Input 3 -}
  [b, b] -> [b] {- Input 3 -}
  [b, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [b, a] ->= [a] {- DP Nontop (Input 3) -}
  [b, b] ->= [b] {- DP Nontop (Input 3) -}
  [b, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#] |-> [b#, c] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a#, b, b] |-> [b#, a, a] {- DP (Top 1) (Input 2) -}
  [a#, b, b] |-> [b#, b, a, a] {- DP (Top 0) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [b, a] ->= [a] {- DP Nontop (Input 3) -}
  [b, b] ->= [b] {- DP Nontop (Input 3) -}
  [b, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [b, a] ->= [a] {- DP Nontop (Input 3) -}
  [b, b] ->= [b] {- DP Nontop (Input 3) -}
  [b, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 19A 19A 21A - \
        | 19A 19A 21A - |
        | 19A 19A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [b, a] ->= [a] {- DP Nontop (Input 3) -}
  [b, b] ->= [b] {- DP Nontop (Input 3) -}
  [b, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(8,3)\Deepee(5/8,5)\Weight\EDG(2/8,4)\Matrix{\Arctic}{3}(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.907151103000
  min duration 0.014284866000
  total durat. 1.087700324000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.746966947000
  min duration 0.010085982000
  total durat. 1.073419076000
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.030111937000
  min duration 0.011161723000
  total durat. 1.054178752000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 36
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 180}
    , self = 70
    , parent = Nothing
    , duration = 1.030111937000
    , status = Fail
    , start = 2025-09-03 11:31:56.303359135 UTC
    , finish = 2025-09-03 11:31:57.333471072 UTC
    , thread_cap_info = ("ThreadId 100", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.126663647000
  min duration 0.935850027000
  total durat. 2.062513674000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 13
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 8
      , alphabet_size = 5
      , total_length = 52}
    , self = 68
    , parent = Nothing
    , duration = 1.126663647000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:31:56.178982889 UTC
    , finish = 2025-09-03 11:31:57.305646536 UTC
    , thread_cap_info = ("ThreadId 90", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.146923139000
  min duration 1.050432605000
  total durat. 2.197355744000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 13
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 8
      , alphabet_size = 5
      , total_length = 52}
    , self = 66
    , parent = Nothing
    , duration = 1.050432605000
    , status = Success
    , start = 2025-09-03 11:31:56.132876647 UTC
    , finish = 2025-09-03 11:31:57.183309252 UTC
    , thread_cap_info = ("ThreadId 87", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 8
      , alphabet_size = 4
      , total_length = 37}
    , self = 69
    , parent = Nothing
    , duration = 1.146923139000
    , status = Success
    , start = 2025-09-03 11:31:56.185566608 UTC
    , finish = 2025-09-03 11:31:57.332489747 UTC
    , thread_cap_info = ("ThreadId 92", 3, False)}
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 12} , self = 61 , parent = Nothing , duration = 0.250375059000 , status
F              = Fail , start = 2025-09-03 11:31:56.04616744 UTC , finish = 2025-09-03
F              11:31:56.296542499 UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 180} , self = 65 , parent = Nothing , duration = 0.907151103000 , status
| F            = Fail , start = 2025-09-03 11:31:56.058768979 UTC , finish = 2025-09-03
| F            11:31:56.965920082 UTC , thread_cap_info = ("ThreadId 59", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 64 , parent = Nothing , duration = 0.746966947000 , status
| | F          = Fail , start = 2025-09-03 11:31:56.058778773 UTC , finish = 2025-09-03
| | F          11:31:56.80574572 UTC , thread_cap_info = ("ThreadId 61", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F        = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | F        = 37} , self = 63 , parent = Nothing , duration = 0.273504710000 , status
| | | F        = Fail , start = 2025-09-03 11:31:56.110977816 UTC , finish = 2025-09-03
| | | F        11:31:56.384482526 UTC , thread_cap_info = ("ThreadId 83", 3, False)}
| | | F        
| | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S      = 13 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 8 ,
| | | | S      alphabet_size = 5 , total_length = 52} , self = 66 , parent = Nothing ,
| | | | S      duration = 1.050432605000 , status = Success , start = 2025-09-03 11:31:56.132876647
| | | | S      UTC , finish = 2025-09-03 11:31:57.183309252 UTC , thread_cap_info = ("ThreadId
| | | | S      87", 3, False)}
| | | | S      
| | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 13
| | | | | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 8 , alphabet_size
| | | | | E    = 5 , total_length = 52} , self = 68 , parent = Nothing , duration = 1.126663647000
| | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:31:56.178982889
| | | | | E    UTC , finish = 2025-09-03 11:31:57.305646536 UTC , thread_cap_info = ("ThreadId
| | | | | E    90", 3, False)}
| | | | | E    
| | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | | | S  alphabet_size = 4 , total_length = 37} , self = 69 , parent = Nothing ,
| | | | | | S  duration = 1.146923139000 , status = Success , start = 2025-09-03 11:31:56.185566608
| | | | | | S  UTC , finish = 2025-09-03 11:31:57.332489747 UTC , thread_cap_info = ("ThreadId
| | | | | | S  92", 3, False)}
| | | | | | S  
F | | | | | |  
F | | | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | | | | |  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F | | | | | |  = 0 , alphabet_size = 9 , total_length = 180} , self = 70 , parent = Nothing
F | | | | | |  , duration = 1.030111937000 , status = Fail , start = 2025-09-03 11:31:56.303359135
F | | | | | |  UTC , finish = 2025-09-03 11:31:57.333471072 UTC , thread_cap_info = ("ThreadId
F | | | | | |  100", 3, False)}
F | | | | | |  
| | | F | | |  
| | | E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | E | | |  = 4 , total_length = 37} , self = 76 , parent = Nothing , duration = 0.935850027000
| | | E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:31:56.40353979
| | | E | | |  UTC , finish = 2025-09-03 11:31:57.339389817 UTC , thread_cap_info = ("ThreadId
| | | E | | |  104", 3, False)}
| | | E | | |  
| | F | | | |  
| F   | | | |  
|     | S | |  
|     |   E |  
|     |     S  
F     |        
      E        
