last 2920 length 13906
CNF 2920 vars 13906 clauses
last 3472 length 18476
CNF 3472 vars 18476 clauses
last 528 length 2111
last 435 length 1746
CNF 435 vars 1746 clauses
last 341 length 1315
CNF 528 vars 2111 clauses
CNF 341 vars 1315 clauses
last 342 length 1351
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1941, clauses: 6815
CNF 342 vars 1351 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2261, clauses: 8145
last 1941 length 6815
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5919, clauses: 24339
last 2261 length 8145
last 5919 length 24339
CNF 1941 vars 6815 clauses
CNF 2261 vars 8145 clauses
last 2887 length 13789
CNF 5919 vars 24339 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5537, clauses: 22737
last 3454 length 18418
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1941, clauses: 6815, status: Unsatisfied, time: 0.139708439s
CNF 2887 vars 13789 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2261, clauses: 8145, status: Satisfied, time: 0.126732482s
last 5537 length 22737
CNF 3454 vars 18418 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3454, clauses: 13511
last 335 length 1340
last 320 length 1290
CNF 5537 vars 22737 clauses
last 3454 length 13511
CNF 320 vars 1290 clauses
CNF 335 vars 1340 clauses
CNF 3454 vars 13511 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1640, clauses: 5763
last 1640 length 5763
CNF 1640 vars 5763 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1640, clauses: 5763, status: Satisfied, time: 0.050030595s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5160, clauses: 21251
last 5160 length 21251
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [a, b, c, a] {- Input 1 -}
  [c, b] -> [a, b, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a] -> [a, b, c, a] {- Input 1 -}
  [c, b] -> [a, b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a, a] -> [a, c, b, a] {- Mirror (Input 1) -}
  [b, c] -> [a, b, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [a#, c, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 13A 16A 16A - \
        | 13A 16A 16A - |
        | 13A 16A 16A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 13A 13A 13A - \
        | 13A 13A 13A - |
        | 13A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, c] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 6A 6A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 14A 15A 17A - \
        | 14A 15A 17A - |
        | 14A 15A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\EDG(4/5,5)\Matrix{\Arctic}{3}(3/5,5)\Weight\EDG(1/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 12} , self = 45 , parent = Nothing , duration = 0.129289530000 , status
F            = Fail , start = 2025-09-03 11:44:01.856205554 UTC , finish = 2025-09-03
F            11:44:01.985495084 UTC , thread_cap_info = ("ThreadId 23", 0, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 3 , total_length = 12} , self = 44 , parent = Nothing
| F          , duration = 0.121034226000 , status = Fail , start = 2025-09-03 11:44:01.856400972
| F          UTC , finish = 2025-09-03 11:44:01.977435198 UTC , thread_cap_info = ("ThreadId
| F          49", 1, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
| | F        , duration = 0.396198132000 , status = Fail , start = 2025-09-03 11:44:01.863315699
| | F        UTC , finish = 2025-09-03 11:44:02.259513831 UTC , thread_cap_info = ("ThreadId
| | F        51", 1, False)}
| | F        
| | | S      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S      = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | S      = 15 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | S      = 106} , self = 47 , parent = Nothing , duration = 0.300901362000 , status
| | | S      = Success , start = 2025-09-03 11:44:01.882875616 UTC , finish = 2025-09-03
| | | S      11:44:02.183776978 UTC , thread_cap_info = ("ThreadId 72", 2, False)}
| | | S      
| | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F    = Size { num_rules = 15 , num_strict_rules = 15 , num_top_rules = 0 , num_weak_rules
| | | | F    = 0 , alphabet_size = 8 , total_length = 106} , self = 67 , parent = Nothing
| | | | F    , duration = 0.432500925000 , status = Fail , start = 2025-09-03 11:44:01.882892211
| | | | F    UTC , finish = 2025-09-03 11:44:02.315393136 UTC , thread_cap_info = ("ThreadId
| | | | F    74", 2, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | | | F  = 15 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | F  = 106} , self = 46 , parent = Nothing , duration = 0.260528704000 , status
| | | | | F  = Fail , start = 2025-09-03 11:44:01.921411035 UTC , finish = 2025-09-03
| | | | | F  11:44:02.181939739 UTC , thread_cap_info = ("ThreadId 78", 2, False)}
| | | | | F  
| F | | | |  
F   | | | |  
    | | | F  
    | S |    
    F   |    
S       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S       |    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S       |    = 5 , total_length = 36} , self = 72 , parent = Nothing , duration = 0.351971136000
S       |    , status = Success , start = 2025-09-03 11:44:02.274471677 UTC , finish
S       |    = 2025-09-03 11:44:02.626442813 UTC , thread_cap_info = ("ThreadId 105",
S       |    1, False)}
S       |    
| F     |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F     |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F     |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| F     |    = 5 , total_length = 27} , self = 71 , parent = Nothing , duration = 0.259885974000
| F     |    , status = Fail , start = 2025-09-03 11:44:02.281525997 UTC , finish =
| F     |    2025-09-03 11:44:02.541411971 UTC , thread_cap_info = ("ThreadId 107",
| F     |    1, False)}
| F     |    
| | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E   |    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | E   |    = 5 , total_length = 36} , self = 74 , parent = Nothing , duration = 0.334340434000
| | E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:44:02.292204818
| | E   |    UTC , finish = 2025-09-03 11:44:02.626545252 UTC , thread_cap_info = ("ThreadId
| | E   |    108", 1, False)}
| | E   |    
| | |   F    
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | F      = 14 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | | F      = 103} , self = 79 , parent = Nothing , duration = 0.301572606000 , status
| | | F      = Fail , start = 2025-09-03 11:44:02.341427531 UTC , finish = 2025-09-03
| | | F      11:44:02.643000137 UTC , thread_cap_info = ("ThreadId 111", 2, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | F    = 14 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | | | F    = 103} , self = 80 , parent = Nothing , duration = 0.286755274000 , status
| | | | F    = Fail , start = 2025-09-03 11:44:02.361393418 UTC , finish = 2025-09-03
| | | | F    11:44:02.648148692 UTC , thread_cap_info = ("ThreadId 113", 2, False)}
| | | | F    
| F | | |    
S   | | |    
    E | |    
F     | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F     | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     | |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F     | |    = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size = 4 , total_length
F     | |    = 24} , self = 82 , parent = Nothing , duration = 0.103184402000 , status
F     | |    = Fail , start = 2025-09-03 11:44:02.626655573 UTC , finish = 2025-09-03
F     | |    11:44:02.729839975 UTC , thread_cap_info = ("ThreadId 126", 1, False)}
F     | |    
| F   | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F   | |    = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| F   | |    = 24} , self = 81 , parent = Nothing , duration = 0.101299112000 , status
| F   | |    = Fail , start = 2025-09-03 11:44:02.628530511 UTC , finish = 2025-09-03
| F   | |    11:44:02.729829623 UTC , thread_cap_info = ("ThreadId 127", 1, False)}
| F   | |    
| |   F |    
| |     F    
| F          
F            
