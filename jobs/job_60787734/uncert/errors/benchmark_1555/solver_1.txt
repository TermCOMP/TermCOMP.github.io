last 6330 length 58024
CNF 6330 vars 58024 clauses
last 9851 length 90917
CNF 9851 vars 90917 clauses
last 8655 length 61985
CNF 8655 vars 61985 clauses
last 12910 length 103283
last 9665 length 61765
CNF 12910 vars 103283 clauses
CNF 9665 vars 61765 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2885, clauses: 10800
last 2885 length 10800
CNF 2885 vars 10800 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2914, clauses: 12457
last 2914 length 12457
CNF 2914 vars 12457 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2885, clauses: 10800, status: Unsatisfied, time: 0.482300433s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10658, clauses: 44893
last 10658 length 44893
CNF 10658 vars 44893 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8815, clauses: 36823
last 8815 length 36823
CNF 8815 vars 36823 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2914, clauses: 12457, status: Satisfied, time: 0.397928895s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6371, clauses: 27418
last 6371 length 27418
CNF 6371 vars 27418 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 rules on 4 letters       weights
SRS with 2 rules on 3 letters       DP
SRS with 20 strict rules and 2 weak rules on 5 letters       EDG
SRS with 6 strict rules and 2 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 2 weak rules on 5 letters       weights
SRS with 1 strict rules and 2 weak rules on 4 letters       EDG
SRS with 1 strict rules and 2 weak rules on 4 letters       Usable
SRS with 1 rules on 4 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a, a, b, a, b, a, a, b] -> [ a , a , b , a , b , a , a , b , a , b , a , a , b , a ] {- Input 0 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, b] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, b] ] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 0)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, a] ] {- DP (Top 11) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 6) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] ] {- DP (Top 13) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 10) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 5) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 8) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 3) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, a] ] {- DP (Top 11) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 6) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [a, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] ] {- DP (Top 13) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 10) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 5) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 8) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 3) (Semlab 1 (Concon 0 (Input 0))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] ] {- DP (Top 13) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 10) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] ] {- DP (Top 13) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP (Top 10) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
reason
  ( [a, a]
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( [a, b]
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( [b, a]
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( [a, a]#
  , Wk  / 1A 4A 4A - \
        | 1A 4A 4A - |
        | 1A 4A 4A - |
        \ -  -  -  - / )
  ( [b, a]#
  , Wk  / 1A 4A 4A - \
        | 1A 4A 4A - |
        | 1A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 1 (Concon 0 (Input 0))) -}
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([a, a]#, 0/1)
  ([b, a]#, 1/1)
   property Termination
has value Just True
for SRS
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
  [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
reason
  remove un-usable
    SRS
      [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
      [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
   property Termination
has value Just True
for SRS
  [ [a, a]# , [a, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, b] , [b, a] ] |-> [[a, a]#] {- DP (Top 14) (Semlab 0 (Concon 0 (Input 0))) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([b, a], 1/1)
  ([a, a]#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (1,2)\TileAllAll{2}(4,4)\Weight(2,3)\Deepee(20/2,5)\EDG(6/2,5)\Matrix{\Arctic}{3}(2/2,5)\Weight\EDG(1/2,4)\Usable(1,4)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 2.682532571000
  min duration 0.749977782000
  total durat. 3.432510353000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 101}
    , self = 71
    , parent = Nothing
    , duration = 2.682532571000
    , status = Fail
    , start = 2025-09-03 12:27:44.596968513 UTC
    , finish = 2025-09-03 12:27:47.279501084 UTC
    , thread_cap_info = ("ThreadId 116", 3, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.000444836000
  min duration 3.000444836000
  total durat. 3.000444836000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 2
      , alphabet_size = 5
      , total_length = 142}
    , self = 72
    , parent = Nothing
    , duration = 3.000444836000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:27:44.366242744 UTC
    , finish = 2025-09-03 12:27:47.36668758 UTC
    , thread_cap_info = ("ThreadId 112", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 2.860814021000
  min duration 0.930530937000
  total durat. 6.188241336000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 101}
    , self = 69
    , parent = Nothing
    , duration = 2.396896378000
    , status = Fail
    , start = 2025-09-03 12:27:44.676981445 UTC
    , finish = 2025-09-03 12:27:47.073877823 UTC
    , thread_cap_info = ("ThreadId 117", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 2
      , alphabet_size = 5
      , total_length = 142}
    , self = 70
    , parent = Nothing
    , duration = 2.860814021000
    , status = Fail
    , start = 2025-09-03 12:27:44.417402269 UTC
    , finish = 2025-09-03 12:27:47.27821629 UTC
    , thread_cap_info = ("ThreadId 114", 3, False)}
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.922549554000
  min duration 0.116105961000
  total durat. 2.174619763000
**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F            = 25} , self = 45 , parent = Nothing , duration = 0.191625926000 , status
F            = Fail , start = 2025-09-03 12:27:43.002005324 UTC , finish = 2025-09-03
F            12:27:43.19363125 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F            
| F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F          = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F          = 25} , self = 51 , parent = Nothing , duration = 0.659778122000 , status
| F          = Fail , start = 2025-09-03 12:27:43.002973877 UTC , finish = 2025-09-03
| F          12:27:43.662751999 UTC , thread_cap_info = ("ThreadId 51", 2, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | F        = 2 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F        = 54} , self = 52 , parent = Nothing , duration = 0.749977782000 , status
| | F        = Fail , start = 2025-09-03 12:27:43.008594725 UTC , finish = 2025-09-03
| | F        12:27:43.758572507 UTC , thread_cap_info = ("ThreadId 68", 0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | F      = 2 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F      = 54} , self = 53 , parent = Nothing , duration = 0.930530937000 , status
| | | F      = Fail , start = 2025-09-03 12:27:43.017846106 UTC , finish = 2025-09-03
| | | F      12:27:43.948377043 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| | | F      
| | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F    = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | F    = 0 , alphabet_size = 2 , total_length = 25} , self = 41 , parent = Nothing
| | | | F    , duration = 0.116105961000 , status = Fail , start = 2025-09-03 12:27:43.03700428
| | | | F    UTC , finish = 2025-09-03 12:27:43.153110241 UTC , thread_cap_info = ("ThreadId
| | | | F    77", 2, False)}
| | | | F    
| | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | F  = 0 , alphabet_size = 2 , total_length = 25} , self = 50 , parent = Nothing
| | | | | F  , duration = 0.309891124000 , status = Fail , start = 2025-09-03 12:27:43.059254879
| | | | | F  UTC , finish = 2025-09-03 12:27:43.369146003 UTC , thread_cap_info = ("ThreadId
| | | | | F  82", 2, False)}
| | | | | F  
| | | | F |  
F | | |   |  
F | | |   |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | |   |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | |   |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | |   |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | |   |  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
F | | |   |  = 0 , alphabet_size = 3 , total_length = 54} , self = 54 , parent = Nothing
F | | |   |  , duration = 0.826073124000 , status = Fail , start = 2025-09-03 12:27:43.197259424
F | | |   |  UTC , finish = 2025-09-03 12:27:44.023332548 UTC , thread_cap_info = ("ThreadId
F | | |   |  91", 1, False)}
F | | |   |  
| | | | F |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F |  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | | F |  = 0 , alphabet_size = 3 , total_length = 54} , self = 55 , parent = Nothing
| | | | F |  , duration = 0.922549554000 , status = Fail , start = 2025-09-03 12:27:43.21706897
| | | | F |  UTC , finish = 2025-09-03 12:27:44.139618524 UTC , thread_cap_info = ("ThreadId
| | | | F |  93", 1, False)}
| | | | F |  
| | | | | F  
| F | | |    
|   F | |    
|     F |    
F       |    
        F    
S            Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
S            verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
S            = 8 , num_top_rules = 8 , num_weak_rules = 2 , alphabet_size = 4 , total_length
S            = 230} , self = 66 , parent = Nothing , duration = 0.109251876000 , status
S            = Success , start = 2025-09-03 12:27:44.256967732 UTC , finish = 2025-09-03
S            12:27:44.366219608 UTC , thread_cap_info = ("ThreadId 106", 3, False)}
S            
S            
E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E            = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
E            = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size = 5 , total_length
E            = 142} , self = 72 , parent = Nothing , duration = 3.000444836000 , status
E            = Except "<<timeout>>" , start = 2025-09-03 12:27:44.366242744 UTC , finish
E            = 2025-09-03 12:27:47.36668758 UTC , thread_cap_info = ("ThreadId 112",
E            3, False)}
E            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F          = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| F          = 142} , self = 70 , parent = Nothing , duration = 2.860814021000 , status
| F          = Fail , start = 2025-09-03 12:27:44.417402269 UTC , finish = 2025-09-03
| F          12:27:47.27821629 UTC , thread_cap_info = ("ThreadId 114", 3, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F        = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | F        = 101} , self = 71 , parent = Nothing , duration = 2.682532571000 , status
| | F        = Fail , start = 2025-09-03 12:27:44.596968513 UTC , finish = 2025-09-03
| | F        12:27:47.279501084 UTC , thread_cap_info = ("ThreadId 116", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F      = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | F      = 101} , self = 69 , parent = Nothing , duration = 2.396896378000 , status
| | | F      = Fail , start = 2025-09-03 12:27:44.676981445 UTC , finish = 2025-09-03
| | | F      12:27:47.073877823 UTC , thread_cap_info = ("ThreadId 117", 3, False)}
| | | F      
| | | F      
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | F      = 4 , total_length = 101} , self = 73 , parent = Nothing , duration = 0.636164794000
| | | F      , status = Fail , start = 2025-09-03 12:27:47.131529158 UTC , finish =
| | | F      2025-09-03 12:27:47.767693952 UTC , thread_cap_info = ("ThreadId 120",
| | | F      3, False)}
| | | F      
| F | |      
|   F |      
| S   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S   |      = 8 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
| S   |      = 5 , total_length = 142} , self = 74 , parent = Nothing , duration = 0.802348750000
| S   |      , status = Success , start = 2025-09-03 12:27:47.297022995 UTC , finish
| S   |      = 2025-09-03 12:27:48.099371745 UTC , thread_cap_info = ("ThreadId 123",
| S   |      3, False)}
| S   |      
E |   |      
E |   |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E |   |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E |   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E |   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E |   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E |   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
E |   |      , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
E |   |      = 5 , total_length = 142} , self = 76 , parent = Nothing , duration = 0.781415866000
E |   |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:27:47.516959374
E |   |      UTC , finish = 2025-09-03 12:27:48.29837524 UTC , thread_cap_info = ("ThreadId
E |   |      126", 3, False)}
E |   |      
| |   F      
| S          
E            
