last 5118 length 21141
last 687 length 2698
CNF 5118 vars 21141 clauses
CNF 687 vars 2698 clauses
last 656 length 2564
last 953 length 3745
last 913 length 3519
last 6499 length 26510
CNF 656 vars 2564 clauses
CNF 913 vars 3519 clauses
CNF 953 vars 3745 clauses
CNF 6499 vars 26510 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3407, clauses: 12543
last 3407 length 12543
CNF 3407 vars 12543 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3407, clauses: 12543, status: Unsatisfied, time: 0.084662344s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8280, clauses: 34167
last 8280 length 34167
CNF 8280 vars 34167 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7936, clauses: 32733
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3642, clauses: 13448
last 7936 length 32733
last 3642 length 13448
CNF 7936 vars 32733 clauses
CNF 3642 vars 13448 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5174, clauses: 20482
last 5174 length 20482
CNF 5174 vars 20482 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3642, clauses: 13448, status: Unsatisfied, time: 0.170057867s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5174, clauses: 20482, status: Satisfied, time: 0.12445118s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5437, clauses: 21544
last 5437 length 21544
CNF 5437 vars 21544 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5437, clauses: 21544, status: Satisfied, time: 0.027309555s
**************************************************
summary
**************************************************
SRS with 5 rules on 3 letters       DP
SRS with 11 strict rules and 5 weak rules on 6 letters       weights
SRS with 10 strict rules and 5 weak rules on 6 letters       EDG
SRS with 10 strict rules and 5 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 6 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b] {- Input 0 -}
  [b, a] -> [a, b] {- Input 1 -}
  [b, b, c] -> [c, a] {- Input 2 -}
  [b, b] -> [a, a, a] {- Input 3 -}
  [c, a] -> [b, a, c] {- Input 4 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, a] ->= [a, b] {- DP Nontop (Input 1) -}
  [b, b, c] ->= [c, a] {- DP Nontop (Input 2) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 3) -}
  [c, a] ->= [b, a, c] {- DP Nontop (Input 4) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, a] |-> [a#, b] {- DP (Top 0) (Input 1) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Input 3) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Input 3) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Input 3) -}
  [b#, b, c] |-> [a#] {- DP (Top 1) (Input 2) -}
  [b#, b, c] |-> [c#, a] {- DP (Top 0) (Input 2) -}
  [c#, a] |-> [a#, c] {- DP (Top 1) (Input 4) -}
  [c#, a] |-> [b#, a, c] {- DP (Top 0) (Input 4) -}
  [c#, a] |-> [c#] {- DP (Top 2) (Input 4) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, a] ->= [a, b] {- DP Nontop (Input 1) -}
  [b, b, c] ->= [c, a] {- DP Nontop (Input 2) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 3) -}
  [c, a] ->= [b, a, c] {- DP Nontop (Input 4) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, a] |-> [a#, b] {- DP (Top 0) (Input 1) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Input 3) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Input 3) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Input 3) -}
  [b#, b, c] |-> [c#, a] {- DP (Top 0) (Input 2) -}
  [c#, a] |-> [a#, c] {- DP (Top 1) (Input 4) -}
  [c#, a] |-> [b#, a, c] {- DP (Top 0) (Input 4) -}
  [c#, a] |-> [c#] {- DP (Top 2) (Input 4) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, a] |-> [a#, b] {- DP (Top 0) (Input 1) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Input 3) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Input 3) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Input 3) -}
  [b#, b, c] |-> [c#, a] {- DP (Top 0) (Input 2) -}
  [c#, a] |-> [a#, c] {- DP (Top 1) (Input 4) -}
  [c#, a] |-> [b#, a, c] {- DP (Top 0) (Input 4) -}
  [c#, a] |-> [c#] {- DP (Top 2) (Input 4) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, a] ->= [a, b] {- DP Nontop (Input 1) -}
  [b, b, c] ->= [c, a] {- DP Nontop (Input 2) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 3) -}
  [c, a] ->= [b, a, c] {- DP Nontop (Input 4) -}
reason
  ( a
  , Wk  / 1 2 2 \
        | 0 1 0 |
        \ 0 0 1 / )
  ( b
  , Wk  / 1 3 3 \
        | 0 1 0 |
        \ 0 0 1 / )
  ( c
  , Wk  / 3 0 0 \
        | 0 1 0 |
        \ 0 0 1 / )
  ( a#
  , Wk  / 1 2 2 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( b#
  , Wk  / 1 4 4 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( c#
  , Wk  / 3 0 0 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [c#, a] |-> [b#, a, c] {- DP (Top 0) (Input 4) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, a] ->= [a, b] {- DP Nontop (Input 1) -}
  [b, b, c] ->= [c, a] {- DP Nontop (Input 2) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 3) -}
  [c, a] ->= [b, a, c] {- DP Nontop (Input 4) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, a] ->= [a, b] {- DP Nontop (Input 1) -}
  [b, b, c] ->= [c, a] {- DP Nontop (Input 2) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 3) -}
  [c, a] ->= [b, a, c] {- DP Nontop (Input 4) -}
reason
  EDG

**************************************************
skeleton: (5,3)\Deepee(11/5,6)\Weight\EDG(10/5,6)\Matrix{\Natural}{3}(2/5,6)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 5 , num_strict_rules = 5 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 3 , total_length = 22} , self = 36 , parent = Nothing
F              , duration = 0.102248334000 , status = Fail , start = 2025-09-03 13:52:44.674577247
F              UTC , finish = 2025-09-03 13:52:44.776825581 UTC , thread_cap_info = ("ThreadId
F              51", 2, False)}
F              
| E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E            = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
| E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E            = 22} , self = 76 , parent = Nothing , duration = 0.654443320000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-03 13:52:44.67460661 UTC ,
| E            finish = 2025-09-03 13:52:45.32904993 UTC , thread_cap_info = ("ThreadId
| E            45", 1, False)}
| E            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | F          = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 288} , self = 65 , parent = Nothing , duration = 0.239696856000 , status
| | F          = Fail , start = 2025-09-03 13:52:44.693456305 UTC , finish = 2025-09-03
| | F          13:52:44.933153161 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | F        = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 288} , self = 57 , parent = Nothing , duration = 0.138921929000 , status
| | | F        = Fail , start = 2025-09-03 13:52:44.710376226 UTC , finish = 2025-09-03
| | | F        13:52:44.849298155 UTC , thread_cap_info = ("ThreadId 62", 0, False)}
| | | F        
F | | |        
F | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
F | | |        = 9 , num_top_rules = 9 , num_weak_rules = 5 , alphabet_size = 6 , total_length
F | | |        = 58} , self = 63 , parent = Nothing , duration = 0.127797659000 , status
F | | |        = Fail , start = 2025-09-03 13:52:44.779209706 UTC , finish = 2025-09-03
F | | |        13:52:44.907007365 UTC , thread_cap_info = ("ThreadId 84", 2, False)}
F | | |        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 45 , num_strict_rules = 45 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 9 , total_length = 288} , self = 67 , parent = Nothing
| | | | F      , duration = 0.395871520000 , status = Fail , start = 2025-09-03 13:52:44.799267233
| | | | F      UTC , finish = 2025-09-03 13:52:45.195138753 UTC , thread_cap_info = ("ThreadId
| | | | F      88", 3, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | | | F    = 10 , num_top_rules = 10 , num_weak_rules = 5 , alphabet_size = 6 , total_length
| | | | | F    = 61} , self = 61 , parent = Nothing , duration = 0.102836530000 , status
| | | | | F    = Fail , start = 2025-09-03 13:52:44.804118994 UTC , finish = 2025-09-03
| | | | | F    13:52:44.906955524 UTC , thread_cap_info = ("ThreadId 86", 2, False)}
| | | | | F    
| | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F  = 14 , num_strict_rules = 9 , num_top_rules = 9 , num_weak_rules = 5 ,
| | | | | | F  alphabet_size = 6 , total_length = 58} , self = 66 , parent = Nothing ,
| | | | | | F  duration = 0.147972882000 , status = Fail , start = 2025-09-03 13:52:44.843829687
| | | | | | F  UTC , finish = 2025-09-03 13:52:44.991802569 UTC , thread_cap_info = ("ThreadId
| | | | | | F  100", 2, False)}
| | | | | | F  
| | | F | | |  
| | |   | F |  
F | |   |   |  
E | |   |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |   |   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |   |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |   |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |   |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |   |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
E | |   |   |  , num_strict_rules = 10 , num_top_rules = 10 , num_weak_rules = 5 , alphabet_size
E | |   |   |  = 6 , total_length = 61} , self = 73 , parent = Nothing , duration = 0.410704050000
E | |   |   |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:52:44.915807079
E | |   |   |  UTC , finish = 2025-09-03 13:52:45.326511129 UTC , thread_cap_info = ("ThreadId
E | |   |   |  107", 2, False)}
E | |   |   |  
| | | F |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F |   |  = 15 , num_strict_rules = 10 , num_top_rules = 10 , num_weak_rules = 5
| | | F |   |  , alphabet_size = 6 , total_length = 61} , self = 68 , parent = Nothing
| | | F |   |  , duration = 0.304926604000 , status = Fail , start = 2025-09-03 13:52:44.930206204
| | | F |   |  UTC , finish = 2025-09-03 13:52:45.235132808 UTC , thread_cap_info = ("ThreadId
| | | F |   |  105", 0, False)}
| | | F |   |  
| | F | |   |  
| |   | |   F  
| | S | |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | S | |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | S | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | S | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| | S | |      , num_strict_rules = 9 , num_top_rules = 9 , num_weak_rules = 5 , alphabet_size
| | S | |      = 6 , total_length = 58} , self = 69 , parent = Nothing , duration = 0.250232953000
| | S | |      , status = Success , start = 2025-09-03 13:52:45.008299526 UTC , finish
| | S | |      = 2025-09-03 13:52:45.258532479 UTC , thread_cap_info = ("ThreadId 109",
| | S | |      2, False)}
| | S | |      
| | | | F      
| | | F        
| | S          
E |            
  E            
