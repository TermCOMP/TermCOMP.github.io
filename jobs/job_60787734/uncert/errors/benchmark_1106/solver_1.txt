last 4222 length 21581
CNF 4222 vars 21581 clauses
last 4125 length 18445
CNF 4125 vars 18445 clauses
last 483 length 1948
last 500 length 2011
CNF 483 vars 1948 clauses
CNF 500 vars 2011 clauses
last 473 length 1856
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 6609
CNF 473 vars 1856 clauses
last 414 length 1588
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5790, clauses: 23903
last 1853 length 6609
CNF 414 vars 1588 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1760, clauses: 6303
last 5790 length 23903
CNF 1853 vars 6609 clauses
last 1760 length 6303
CNF 5790 vars 23903 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5208, clauses: 21441
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 6609, status: Satisfied, time: 0.661163811s
CNF 1760 vars 6303 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5790, clauses: 23903, status: Satisfied, time: 0.540954943s
last 5208 length 21441
CNF 5208 vars 21441 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1760, clauses: 6303, status: Satisfied, time: 0.521728951s
last 389 length 1582
last 496 length 2016
CNF 389 vars 1582 clauses
CNF 496 vars 2016 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1745, clauses: 6144
last 1745 length 6144
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [c, b] -> [c, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [c, b] -> [c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b, c] -> [a, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c] |-> [a#, c] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 15A 15A 18A - \
        | 15A 15A 18A - |
        | 15A 15A 18A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 2A 3A 5A - \
        | 2A 3A 5A - |
        | 2A 3A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 1745 vars 6144 clauses

Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.087930536000
  min duration 0.540073979000
  total durat. 1.628004515000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 5
      , alphabet_size = 4
      , total_length = 29}
    , self = 69
    , parent = Nothing
    , duration = 1.087930536000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:00:18.436429617 UTC
    , finish = 2025-09-03 11:00:19.524360153 UTC
    , thread_cap_info = ("ThreadId 94", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.050316099000
  min duration 0.842466018000
  total durat. 1.892782117000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 5
      , alphabet_size = 4
      , total_length = 29}
    , self = 67
    , parent = Nothing
    , duration = 1.050316099000
    , status = Success
    , start = 2025-09-03 11:00:18.433441162 UTC
    , finish = 2025-09-03 11:00:19.483757261 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
**************************************************
F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F            = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F            = 0 , alphabet_size = 3 , total_length = 12} , self = 39 , parent = Nothing
F            , duration = 0.155736667000 , status = Fail , start = 2025-09-03 11:00:18.267105184
F            UTC , finish = 2025-09-03 11:00:18.422841851 UTC , thread_cap_info = ("ThreadId
F            42", 3, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 3 , total_length = 12} , self = 34 , parent = Nothing
| F          , duration = 0.128662137000 , status = Fail , start = 2025-09-03 11:00:18.267108234
| F          UTC , finish = 2025-09-03 11:00:18.395770371 UTC , thread_cap_info = ("ThreadId
| F          44", 3, False)}
| F          
| | F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F        = 12} , self = 64 , parent = Nothing , duration = 0.745522377000 , status
| | F        = Fail , start = 2025-09-03 11:00:18.267153753 UTC , finish = 2025-09-03
| | F        11:00:19.01267613 UTC , thread_cap_info = ("ThreadId 35", 0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| | | F      = 26 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 159} , self = 58 , parent = Nothing , duration = 0.149004101000 , status
| | | F      = Fail , start = 2025-09-03 11:00:18.28477152 UTC , finish = 2025-09-03
| | | F      11:00:18.433775621 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| | | | F    = 26 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F    = 159} , self = 37 , parent = Nothing , duration = 0.100904835000 , status
| | | | F    = Fail , start = 2025-09-03 11:00:18.303988311 UTC , finish = 2025-09-03
| | | | F    11:00:18.404893146 UTC , thread_cap_info = ("ThreadId 64", 1, False)}
| | | | F    
| F | | |    
|   | | F    
F   | |      
S   | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S   | |      = 4 , total_length = 29} , self = 67 , parent = Nothing , duration = 1.050316099000
S   | |      , status = Success , start = 2025-09-03 11:00:18.433441162 UTC , finish
S   | |      = 2025-09-03 11:00:19.483757261 UTC , thread_cap_info = ("ThreadId 91",
S   | |      3, False)}
S   | |      
|   | F      
| E |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E |        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| E |        = 4 , total_length = 29} , self = 69 , parent = Nothing , duration = 1.087930536000
| E |        , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:18.436429617
| E |        UTC , finish = 2025-09-03 11:00:19.524360153 UTC , thread_cap_info = ("ThreadId
| E |        94", 3, False)}
| E |        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F      = 29} , self = 63 , parent = Nothing , duration = 0.320722188000 , status
| | | F      = Fail , start = 2025-09-03 11:00:18.443241515 UTC , finish = 2025-09-03
| | | F      11:00:18.763963703 UTC , thread_cap_info = ("ThreadId 96", 3, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F    = 29} , self = 66 , parent = Nothing , duration = 0.635494549000 , status
| | | | F    = Fail , start = 2025-09-03 11:00:18.448525216 UTC , finish = 2025-09-03
| | | | F    11:00:19.084019765 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
| | | | F    
| | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F  = Size { num_rules = 26 , num_strict_rules = 26 , num_top_rules = 0 , num_weak_rules
| | | | | F  = 0 , alphabet_size = 9 , total_length = 159} , self = 65 , parent = Nothing
| | | | | F  , duration = 0.514565668000 , status = Fail , start = 2025-09-03 11:00:18.503099605
| | | | | F  UTC , finish = 2025-09-03 11:00:19.017665273 UTC , thread_cap_info = ("ThreadId
| | | | | F  104", 1, False)}
| | | | | F  
| | | F | |  
| | | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S | |  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | S | |  = 4 , total_length = 29} , self = 72 , parent = Nothing , duration = 0.842466018000
| | | S | |  , status = Success , start = 2025-09-03 11:00:18.764041465 UTC , finish
| | | S | |  = 2025-09-03 11:00:19.606507483 UTC , thread_cap_info = ("ThreadId 107",
| | | S | |  3, False)}
| | | S | |  
| | F | | |  
| |   | | F  
| |   | F    
| | E |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | E |      = 4 , total_length = 29} , self = 76 , parent = Nothing , duration = 0.540073979000
| | E |      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:19.10450341
| | E |      UTC , finish = 2025-09-03 11:00:19.644577389 UTC , thread_cap_info = ("ThreadId
| | E |      110", 3, False)}
| | E |      
S | | |      
  E | |      
    | S      
    E        
