last 399 length 1577
last 392 length 1568
last 393 length 1569
last 504 length 1971
CNF 399 vars 1577 clauses
CNF 392 vars 1568 clauses
CNF 504 vars 1971 clauses
CNF 393 vars 1569 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1880, clauses: 6840
last 1880 length 6840
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1973, clauses: 7029
CNF 1880 vars 6840 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4959, clauses: 20281
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4376, clauses: 17822
last 1973 length 7029
last 4959 length 20281
last 4376 length 17822
CNF 1973 vars 7029 clauses
CNF 4959 vars 20281 clauses
CNF 4376 vars 17822 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1973, clauses: 7029, status: Satisfied, time: 0.013790444s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1880, clauses: 6840, status: Unsatisfied, time: 0.116185546s
[Info] pool sizes (success) 24422 seen 6519 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 257 length 1013
last 312 length 1242
CNF 312 vars 1242 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2791, clauses: 11008
**************************************************
last 2791 length 11008
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [c, a, c, a, c, a, a]
to
  [b, b, c, a, c, a, c, a, a, c, b, c, c, b, c]
via 14 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [b] {- Input 0 -}
  [a] -> [b, b, c] {- Input 1 -}
  [c, a, b] -> [a, c, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [c, a, c, a, c, a, a], via = [(Step   { rule = 1, position = 6}, [c, a, c, a, c, a, b, b, c]), (Step   { rule = 2, position = 4}, [c, a, c, a, a, c, a, b, c]), (Step   { rule = 2, position = 5}, [c, a, c, a, a, a, c, a, c]), (Step   { rule = 0, position = 7}, [c, a, c, a, a, a, c, b, c]), (Step   { rule = 0, position = 4}, [c, a, c, a, b, a, c, b, c]), (Step   { rule = 1, position = 5}, [c, a, c, a, b, b, b, c, c, b, c]), (Step   { rule = 2, position = 2}, [c, a, a, c, a, b, b, c, c, b, c]), (Step   { rule = 2, position = 3}, [c, a, a, a, c, a, b, c, c, b, c]), (Step   { rule = 2, position = 4}, [c, a, a, a, a, c, a, c, c, b, c]), (Step   { rule = 0, position = 6}, [c, a, a, a, a, c, b, c, c, b, c]), (Step   { rule = 1, position = 2}, [c, a, b, b, c, a, a, c, b, c, c, b, c]), (Step   { rule = 2, position = 0}, [a, c, a, b, c, a, a, c, b, c, c, b, c]), (Step   { rule = 2, position = 1}, [a, a, c, a, c, a, a, c, b, c, c, b, c]), (Step   { rule = 1, position = 0}, [b, b, c, a, c, a, c, a, a, c, b, c, c, b, c])], to = [b, b, c, a, c, a, c, a, a, c, b, c, c, b, c]}

**************************************************
skeleton: (3,3)\Loop{14}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]CNF 2791 vars 11008 clauses
)CNF 257 vars 1013 clauses
;Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1657, clauses: 5785
mo last 7080 length 29251
last 1657 length 5785
= CNF 1657 vars 5785 clauses
Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S            , closure = Backward\n , start_strict_only = True\n , max_closure_length
S            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
S            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S            = 12} , self = 72 , parent = Nothing , duration = 0.218241871000 , status
S            = Success , start = 2025-09-03 11:18:04.839018837 UTC , finish = 2025-09-03
S            11:18:05.057260708 UTC , thread_cap_info = ("ThreadId 37", 0, False)}
S            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 9 , total_length = 162} , self = 54 , parent = Nothing
| F          , duration = 0.149233555000 , status = Fail , start = 2025-09-03 11:18:04.840696442
| F          UTC , finish = 2025-09-03 11:18:04.989929997 UTC , thread_cap_info = ("ThreadId
| F          54", 2, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 52 , parent = Nothing
| | F        , duration = 0.136464951000 , status = Fail , start = 2025-09-03 11:18:04.849135857
| | F        UTC , finish = 2025-09-03 11:18:04.985600808 UTC , thread_cap_info = ("ThreadId
| | F        56", 2, False)}
| | F        
| | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S      = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | S      = 5 , total_length = 27} , self = 68 , parent = Nothing , duration = 0.157664204000
| | | S      , status = Success , start = 2025-09-03 11:18:04.880788233 UTC , finish
| | | S      = 2025-09-03 11:18:05.038452437 UTC , thread_cap_info = ("ThreadId 85",
| | | S      0, False)}
| | | S      
| | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | E    = 5 , total_length = 27} , self = 71 , parent = Nothing , duration = 0.160074790000
| | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:18:04.88913924
| | | | E    UTC , finish = 2025-09-03 11:18:05.04921403 UTC , thread_cap_info = ("ThreadId
| | | | E    86", 0, False)}
| | | | E    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | F  = 5 , total_length = 29} , self = 69 , parent = Nothing , duration = 0.129415281000
| | | | | F  , status = Fail , start = 2025-09-03 11:18:04.909152355 UTC , finish =
| | | | | F  2025-09-03 11:18:05.038567636 UTC , thread_cap_info = ("ThreadId 87", 0,
| | | | | F  False)}
| | | | | F  
| | F | | |  
| F   | | |  
|     S | |  
|       | F  
|       E    
S            
