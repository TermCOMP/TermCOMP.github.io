last 770 length 2974
CNF 770 vars 2974 clauses
last 623 length 2439
CNF 623 vars 2439 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2951, clauses: 10818
last 2951 length 10818
CNF 2951 vars 10818 clauses
last 857 length 3444
last 809 length 3216
CNF 857 vars 3444 clauses
CNF 809 vars 3216 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2951, clauses: 10818, status: Satisfied, time: 0.064143648s
last 5196 length 21597
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3325, clauses: 12166
last 3325 length 12166
CNF 3325 vars 12166 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8432, clauses: 34869
CNF 5196 vars 21597 clauses
last 5577 length 23169
last 442 length 1802
last 521 length 2099
last 8432 length 34869
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3325, clauses: 12166, status: Satisfied, time: 0.070760866s
CNF 442 vars 1802 clauses
CNF 5577 vars 23169 clauses
CNF 521 vars 2099 clauses
CNF 8432 vars 34869 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1898, clauses: 6708
last 1898 length 6708
CNF 1898 vars 6708 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1898, clauses: 6708, status: Unsatisfied, time: 0.062515456s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6870, clauses: 28533
last 6870 length 28533
CNF 6870 vars 28533 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4148, clauses: 16510
last 4148 length 16510
last 435 length 1791
CNF 435 vars 1791 clauses
CNF 4148 vars 16510 clauses
last 516 length 2080
CNF 516 vars 2080 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1793, clauses: 6357
last 1793 length 6357
CNF 1793 vars 6357 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1793, clauses: 6357, status: Satisfied, time: 0.030287153s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4148, clauses: 16510, status: Satisfied, time: 0.132186635s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 8 strict rules and 4 weak rules on 6 letters       EDG
SRS with 8 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 4 weak rules on 6 letters       weights
SRS with 1 strict rules and 4 weak rules on 4 letters       EDG
SRS with 1 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, c] -> [a, b] {- Input 0 -}
  [b] -> [a, a] {- Input 1 -}
  [b, b, b] -> [a, c, b] {- Input 2 -}
  [a, c, a] -> [a, c, c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, c] -> [b, a] {- Mirror (Input 0) -}
  [b] -> [a, a] {- Mirror (Input 1) -}
  [b, b, b] -> [b, c, a] {- Mirror (Input 2) -}
  [a, c, a] -> [c, c, a] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
  [a#, c, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, b, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, b] |-> [c#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, c] |-> [b#, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, c] |-> [b#, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, b, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, b] |-> [c#, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 10A 12A 13A - \
        | 10A 12A 13A - |
        | 10A 12A 13A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 15A 15A - \
        | 14A 15A 15A - |
        | 14A 15A 15A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, c, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, c] |-> [b#, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b#, b, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b, b] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b#
  , Wk  / 13A 13A 16A - \
        | 13A 13A 16A - |
        | 13A 13A 16A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [c, c] ->= [b, a] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Deepee\EDG(8/4,6)\Matrix{\Arctic}{3}(3/4,6)\Weight\EDG(1/4,4)\Matrix{\Arctic}{3}(0/4,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 9 , total_length = 243} , self = 72 , parent = Nothing
F              , duration = 0.393019744000 , status = Fail , start = 2025-09-03 13:32:43.899428251
F              UTC , finish = 2025-09-03 13:32:44.292447995 UTC , thread_cap_info = ("ThreadId
F              55", 3, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 243} , self = 71 , parent = Nothing , duration = 0.284071138000 , status
| F            = Fail , start = 2025-09-03 13:32:43.979419737 UTC , finish = 2025-09-03
| F            13:32:44.263490875 UTC , thread_cap_info = ("ThreadId 92", 2, False)}
| F            
| | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E          , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size
| | E          = 6 , total_length = 45} , self = 60 , parent = Nothing , duration = 0.159993755000
| | E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:43.979421181
| | E          UTC , finish = 2025-09-03 13:32:44.139414936 UTC , thread_cap_info = ("ThreadId
| | E          91", 0, False)}
| | E          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 243} , self = 77 , parent = Nothing , duration = 0.363246957000 , status
| | | F        = Fail , start = 2025-09-03 13:32:43.999786849 UTC , finish = 2025-09-03
| | | F        13:32:44.363033806 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| | | F        
| | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S      = 12 , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 4 ,
| | | | S      alphabet_size = 6 , total_length = 52} , self = 73 , parent = Nothing ,
| | | | S      duration = 0.268030785000 , status = Success , start = 2025-09-03 13:32:44.041822763
| | | | S      UTC , finish = 2025-09-03 13:32:44.309853548 UTC , thread_cap_info = ("ThreadId
| | | | S      101", 0, False)}
| | | | S      
| | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | E    , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 4 , alphabet_size
| | | | | E    = 6 , total_length = 52} , self = 78 , parent = Nothing , duration = 0.345240546000
| | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:44.059425919
| | | | | E    UTC , finish = 2025-09-03 13:32:44.404666465 UTC , thread_cap_info = ("ThreadId
| | | | | E    102", 0, False)}
| | | | | E    
| | E | | |    
| | F | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F | | |    = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F | | |    = 25} , self = 76 , parent = Nothing , duration = 0.156392768000 , status
| | F | | |    = Fail , start = 2025-09-03 13:32:44.175397765 UTC , finish = 2025-09-03
| | F | | |    13:32:44.331790533 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
| | F | | |    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F  = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F  = 25} , self = 75 , parent = Nothing , duration = 0.152724486000 , status
| | | | | | F  = Fail , start = 2025-09-03 13:32:44.179045918 UTC , finish = 2025-09-03
| | | | | | F  13:32:44.331770404 UTC , thread_cap_info = ("ThreadId 110", 0, False)}
| | | | | | F  
| F | | | | |  
F   | | | | |  
    | | S | |  
    | |   | F  
    F |   |    
E     |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E     |   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E     |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E     |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E     |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E     |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
E     |   |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
E     |   |    = 4 , total_length = 25} , self = 93 , parent = Nothing , duration = 0.291928969000
E     |   |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:44.356974984
E     |   |    UTC , finish = 2025-09-03 13:32:44.648903953 UTC , thread_cap_info = ("ThreadId
E     |   |    120", 0, False)}
E     |   |    
|     F   |    
|         E    
| S            Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| S            = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| S            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| S            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| S            , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| S            = 4 , total_length = 25} , self = 90 , parent = Nothing , duration = 0.215338101000
| S            , status = Success , start = 2025-09-03 13:32:44.433256078 UTC , finish
| S            = 2025-09-03 13:32:44.648594179 UTC , thread_cap_info = ("ThreadId 125",
| S            0, False)}
| S            
| S            
E              
