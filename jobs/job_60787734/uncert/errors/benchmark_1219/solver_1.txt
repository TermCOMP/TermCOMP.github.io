last 439 length 1810
last 696 length 3287
CNF 439 vars 1810 clauses
last 484 length 2090
last 394 length 1564
CNF 484 vars 2090 clauses
CNF 696 vars 3287 clauses
CNF 394 vars 1564 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2066, clauses: 7392
last 2066 length 7392
last 5330 length 38801
CNF 2066 vars 7392 clauses
CNF 5330 vars 38801 clauses
last 4480 length 25391
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2149, clauses: 7546
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25395
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2066, clauses: 7392, status: Unsatisfied, time: 0.127324366s
CNF 4480 vars 25391 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6670, clauses: 27637
last 2149 length 7546
last 6167 length 25395
last 6670 length 27637
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4125, clauses: 16340
CNF 2149 vars 7546 clauses
CNF 6167 vars 25395 clauses
CNF 6670 vars 27637 clauses
last 4125 length 16340
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25395, status: Satisfied, time: 0.400891348s
CNF 4125 vars 16340 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6670, clauses: 27637, status: Satisfied, time: 0.35416447s
last 348 length 1394
CNF 348 vars 1394 clauses
last 432 length 1789
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2043, clauses: 7121
**************************************************last 2043 length 7121

summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 7 strict rules and 5 weak rules on 6 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       CNF 432 vars 1789 clauses
Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, b, c, b, c, a] {- Input 1 -}
  [c, c] -> [a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [c, b, c, b, c, a] {- Input 1 -}
  [c, c] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, c, b, c, b, c] {- Mirror (Input 1) -}
  [c, c] -> [a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [a#, c, b, c, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, c, b, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, b, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, b, c, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [b#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, c, b, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, c, b, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 1A 1A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / -   1A 0A \
        | -1A 1A -  |
        \ -   -  0A / )
  ( c
  , Wk  / 1A  1A  1A \
        | -1A -1A -  |
        \ -   -   0A / )
  ( b#
  , Wk  / - 1A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(7/5,6)\Weight\EDG(2/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let CNF 2043 vars 7121 clauses
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.760101305000
  min duration 0.751185700000
  total durat. 1.511287005000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.782262593000
  min duration 0.360007274000
  total durat. 1.142269867000
**************************************************
F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                = 12} , self = 66 , parent = Nothing , duration = 0.255537049000 , status
F                = Fail , start = 2025-09-03 11:18:55.408016686 UTC , finish = 2025-09-03
F                11:18:55.663553735 UTC , thread_cap_info = ("ThreadId 52", 2, False)}
F                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 20 , num_strict_rules = 20 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 9 , total_length = 129} , self = 69 , parent = Nothing
| F              , duration = 0.798305254000 , status = Fail , start = 2025-09-03 11:18:55.411650526
| F              UTC , finish = 2025-09-03 11:18:56.20995578 UTC , thread_cap_info = ("ThreadId
| F              62", 0, False)}
| F              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | F            = 20 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 129} , self = 68 , parent = Nothing , duration = 0.522153939000 , status
| | F            = Fail , start = 2025-09-03 11:18:55.418562046 UTC , finish = 2025-09-03
| | F            11:18:55.940715985 UTC , thread_cap_info = ("ThreadId 73", 1, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | F          = 20 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F          = 129} , self = 65 , parent = Nothing , duration = 0.178381992000 , status
| | | F          = Fail , start = 2025-09-03 11:18:55.419703066 UTC , finish = 2025-09-03
| | | F          11:18:55.598085058 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | F        = 5 , total_length = 30} , self = 72 , parent = Nothing , duration = 0.782262593000
| | | | F        , status = Fail , start = 2025-09-03 11:18:55.491100753 UTC , finish =
| | | | F        2025-09-03 11:18:56.273363346 UTC , thread_cap_info = ("ThreadId 101",
| | | | F        3, False)}
| | | | F        
| | | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | S      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | S      = 5 , total_length = 30} , self = 70 , parent = Nothing , duration = 0.751185700000
| | | | | S      , status = Success , start = 2025-09-03 11:18:55.491105562 UTC , finish
| | | | | S      = 2025-09-03 11:18:56.242291262 UTC , thread_cap_info = ("ThreadId 102",
| | | | | S      3, False)}
| | | | | S      
| | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | F    = 4 , total_length = 30} , self = 67 , parent = Nothing , duration = 0.360007274000
| | | | | | F    , status = Fail , start = 2025-09-03 11:18:55.499375071 UTC , finish =
| | | | | | F    2025-09-03 11:18:55.859382345 UTC , thread_cap_info = ("ThreadId 100",
| | | | | | F    3, False)}
| | | | | | F    
| | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | | S  = 4 , total_length = 30} , self = 73 , parent = Nothing , duration = 0.760101305000
| | | | | | | S  , status = Success , start = 2025-09-03 11:18:55.514278912 UTC , finish
| | | | | | | S  = 2025-09-03 11:18:56.274380217 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | | S  3, False)}
| | | | | | | S  
| | | F | | | |  
F | |   | | | |  
  | |   | | F |  
E | |   | |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | |   | |   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | |   | |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | |   | |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |   | |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |   | |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
E | |   | |   |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
E | |   | |   |  = 4 , total_length = 30} , self = 79 , parent = Nothing , duration = 0.395877241000
E | |   | |   |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:18:55.879425234
E | |   | |   |  UTC , finish = 2025-09-03 11:18:56.275302475 UTC , thread_cap_info = ("ThreadId
E | |   | |   |  110", 3, False)}
E | |   | |   |  
| | F   | |   |  
| F     | |   |  
|       | S   |  
|       F     |  
|             S  
E                
