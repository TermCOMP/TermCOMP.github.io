last 3730 length 19234
CNF 3730 vars 19234 clauses
last 3876 length 17241
CNF 3876 vars 17241 clauses
last 348 length 1337
CNF 348 vars 1337 clauses
last 421 length 1712
CNF 421 vars 1712 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2195, clauses: 7740
last 2195 length 7740
last 324 length 1237
last 289 length 1126
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5669, clauses: 23213
CNF 2195 vars 7740 clauses
CNF 324 vars 1237 clauses
last 5669 length 23213
CNF 289 vars 1126 clauses
CNF 5669 vars 23213 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1706, clauses: 6027
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2195, clauses: 7740, status: Satisfied, time: 0.192812024s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5669, clauses: 23213, status: Satisfied, time: 0.040688702s
last 1706 length 6027
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4666, clauses: 19099
last 4666 length 19099
CNF 1706 vars 6027 clauses
CNF 4666 vars 19099 clauses
last 414 length 1691
CNF 414 vars 1691 clauses
last 302 length 1167
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1706, clauses: 6027, status: Satisfied, time: 0.04613622s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4666, clauses: 19099, status: Satisfied, time: 0.023673006s
CNF 302 vars 1167 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2089, clauses: 7315
last 2089 length 7315
CNF 2089 vars 7315 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 6 strict rules and 6 weak rules on 6 letters       weights
SRS with 4 strict rules and 6 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 6 weak rules on 5 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b] {- Input 1 -}
  [b] -> [a] {- Input 2 -}
  [b, c] -> [c, c, b, a] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a] -> [b] {- Input 1 -}
  [b] -> [a] {- Input 2 -}
  [b, c] -> [c, c, b, a] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a, a] -> [b] {- Mirror (Input 1) -}
  [b] -> [a] {- Mirror (Input 2) -}
  [c, b] -> [a, b, c, c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [a#, b, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, b] |-> [b#, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, b] |-> [c#] {- DP (Top 3) (Mirror (Input 3)) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 3) (Mirror (Input 3)) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
      [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
      [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
      [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
      [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 2/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 3) (Mirror (Input 3)) -}
  [c#, b] |-> [c#, c] {- DP (Top 2) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 2A 2A 3A - \
        | 2A 2A 3A - |
        | 2A 2A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, b] ->= [a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(6,3)\Deepee(6/6,6)\Weight(4/6,6)\EDG[(2/6,5)\Usable(2,3)\Weight(0,0)\EDG[],(2/6,4)\Matrix{\Arctic}{3}(0/6,3)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 12} , self = 66 , parent = Nothing , duration = 0.682670688000 , status
F              = Fail , start = 2025-09-03 11:45:01.203559191 UTC , finish = 2025-09-03
F              11:45:01.886229879 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F              
| E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E            = 12} , self = 98 , parent = Nothing , duration = 0.870088823000 , status
| E            = Except "AsyncCancelled" , start = 2025-09-03 11:45:01.203578255 UTC ,
| E            finish = 2025-09-03 11:45:02.073667078 UTC , thread_cap_info = ("ThreadId
| E            43", 1, False)}
| E            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 44 , parent = Nothing , duration = 0.133267026000 , status
| | F          = Fail , start = 2025-09-03 11:45:01.216319637 UTC , finish = 2025-09-03
| | F          11:45:01.349586663 UTC , thread_cap_info = ("ThreadId 56", 0, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 180} , self = 43 , parent = Nothing , duration = 0.100386123000 , status
| | | F        = Fail , start = 2025-09-03 11:45:01.233759898 UTC , finish = 2025-09-03
| | | F        11:45:01.334146021 UTC , thread_cap_info = ("ThreadId 58", 0, False)}
| | | F        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 9 , total_length = 180} , self = 69 , parent = Nothing
| | | | F      , duration = 0.706405780000 , status = Fail , start = 2025-09-03 11:45:01.262572673
| | | | F      UTC , finish = 2025-09-03 11:45:01.968978453 UTC , thread_cap_info = ("ThreadId
| | | | F      72", 3, False)}
| | | | F      
| | | F |      
| | F   |      
| | S   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S   |      = 10 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 ,
| | S   |      alphabet_size = 5 , total_length = 32} , self = 75 , parent = Nothing ,
| | S   |      duration = 0.281375081000 , status = Success , start = 2025-09-03 11:45:01.692451956
| | S   |      UTC , finish = 2025-09-03 11:45:01.973827037 UTC , thread_cap_info = ("ThreadId
| | S   |      101", 1, False)}
| | S   |      
| | | F |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F |      = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | F |      = 27} , self = 67 , parent = Nothing , duration = 0.173521528000 , status
| | | F |      = Fail , start = 2025-09-03 11:45:01.733250665 UTC , finish = 2025-09-03
| | | F |      11:45:01.906772193 UTC , thread_cap_info = ("ThreadId 103", 1, False)}
| | | F |      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | F    = 27} , self = 68 , parent = Nothing , duration = 0.160856423000 , status
| | | | | F    = Fail , start = 2025-09-03 11:45:01.755080356 UTC , finish = 2025-09-03
| | | | | F    11:45:01.915936779 UTC , thread_cap_info = ("ThreadId 104", 1, False)}
| | | | | F    
| | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size
| | | | | | S  = 5 , total_length = 32} , self = 77 , parent = Nothing , duration = 0.215146930000
| | | | | | S  , status = Success , start = 2025-09-03 11:45:01.760440642 UTC , finish
| | | | | | S  = 2025-09-03 11:45:01.975587572 UTC , thread_cap_info = ("ThreadId 105",
| | | | | | S  1, False)}
| | | | | | S  
F | | | | | |  
  | | F | | |  
  | |   | F |  
  | |   F   |  
  | S       |  
  |         S  
  E            
