last 272 length 1017
CNF 272 vars 1017 clauses
last 254 length 951
CNF 254 vars 951 clauses
last 2920 length 11735
last 318 length 1191
CNF 2920 vars 11735 clauses
last 314 length 1183
CNF 318 vars 1191 clauses
last 3436 length 13903
CNF 314 vars 1183 clauses
CNF 3436 vars 13903 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1626, clauses: 5693
last 1626 length 5693
CNF 1626 vars 5693 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4281, clauses: 17405
last 4281 length 17405
CNF 4281 vars 17405 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2021, clauses: 7101
last 2021 length 7101
CNF 2021 vars 7101 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1626, clauses: 5693, status: Unsatisfied, time: 0.133674676s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2021, clauses: 7101, status: Satisfied, time: 0.081080139s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4946, clauses: 20121
last 4946 length 20121
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       weights
SRS with 3 strict rules and 3 weak rules on 6 letters       EDG
SRS with 3 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 5 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b, b] {- Input 0 -}
  [a, b] -> [c, c] {- Input 1 -}
  [b, c] -> [a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [b, b] {- Mirror (Input 0) -}
  [b, a] -> [c, c] {- Mirror (Input 1) -}
  [c, b] -> [a, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [b#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [c#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [c#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 6A 6A 9A - \
        | 6A 6A 6A - |
        | 6A 6A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 9A - \
        | 6A 6A 9A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 6A 9A 9A - \
        | 6A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 10A 13A - \
        | 10A 10A 13A - |
        | 10A 10A 13A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 8A 11A 11A - \
        | 8A 11A 11A - |
        | 8A 11A 11A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(6/3,6)\Weight\EDG(3/3,6)\Matrix{\Arctic}{3}(1/3,5)\Weight(0/3,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
F      = 0 , alphabet_size = 9 , total_length = 162} , self = 43 , parent = Nothing
F      , duration = 0.121760149000 , status = Fail , start = 2025-09-03 11:44:52.194962387
F      UTC , finish = 2025-09-03 11:44:52.316722536 UTC , thread_cap_info = ("ThreadId
F      56", 1, False)}
F      
F      
F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F      = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
F      = 5 , total_length = 20} , self = 67 , parent = Nothing , duration = 0.201450067000
F      , status = Fail , start = 2025-09-03 11:44:52.391846721 UTC , finish =
F      2025-09-03 11:44:52.593296788 UTC , thread_cap_info = ("ThreadId 94", 2,
F      False)}
F      
| S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| S    = 6 , total_length = 24} , self = 68 , parent = Nothing , duration = 0.163078244000
| S    , status = Success , start = 2025-09-03 11:44:52.430555039 UTC , finish
| S    = 2025-09-03 11:44:52.593633283 UTC , thread_cap_info = ("ThreadId 105",
| S    2, False)}
| S    
| | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | E  = 6 , total_length = 24} , self = 70 , parent = Nothing , duration = 0.154799053000
| | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:44:52.439038864
| | E  UTC , finish = 2025-09-03 11:44:52.593837917 UTC , thread_cap_info = ("ThreadId
| | E  106", 2, False)}
| | E  
F | |  
  S |  
    E  
