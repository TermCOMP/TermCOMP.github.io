last 496 length 1936
last 2710 length 11585
last 542 length 2106
last 2897 length 12319
last 472 length 1859
last 479 length 1880
CNF 496 vars 1936 clauses
CNF 2710 vars 11585 clauses
CNF 542 vars 2106 clauses
CNF 472 vars 1859 clauses
CNF 2897 vars 12319 clauses
CNF 479 vars 1880 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2500, clauses: 8917
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2606, clauses: 9342
**************************************************
last 4090 length 18199
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7213, clauses: 29753
last 2500 length 8917
last 3360 length 14479
last 2606 length 9342
last 7213 length 29753
CNF 4090 vars 18199 clauses
summaryCNF 2500 vars 8917 clauses
CNF 3360 vars 14479 clauses

CNF 2606 vars 9342 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7167, clauses: 29577
CNF 7213 vars 29753 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2500, clauses: 8917, status: Satisfied, time: 0.042912487s
**************************************************
last 7167 length 29577
SRS with 4 rules on 3 letters       split
2 sub-proofs
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2606, clauses: 9342, status: Satisfied, time: 0.06443417s
  1 SRS with 1 strict rules and 3 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 27 weak rules on 9 letters       weights
  SRS with 8 strict rules and 17 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 17 weak rules on 9 letters       weights
  SRS with 0 strict rules and 7 weak rules on 8 letters       no strict rules

  2 SRS with 3 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 1 and with 5 epsilon transitions
  SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, a, c] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, c] -> [c, b, a] {- Input 3 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a] ->= [] {- Input 0 -}
  [a, b] ->= [b, a, c] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, c] ->= [c, b, a] {- Input 3 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] ->= [[a, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] ->= [[a, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] ->= [[a, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] ->= [[b, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] ->= [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] ->= [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] ->= [[c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] ->= [[c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] ->= [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, b], [b, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, b], [b, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b], [b, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a], [a, b], [b, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, a], [a, b], [b, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, c], [c, c], [c, a]] ->= [ [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, c], [c, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, c], [c, c], [c, c]] ->= [ [a, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, c], [c, c], [c, a]] ->= [ [b, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, c], [c, c], [c, c]] ->= [ [b, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, c], [c, c], [c, a]] ->= [ [c, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, c], [c, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, c], [c, c], [c, c]] ->= [ [c, c] , [c, b] , [b, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, c]] ->= [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, c]] ->= [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, b], [b, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, b], [b, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b], [b, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a], [a, b], [b, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, a], [a, b], [b, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, c], [c, c], [c, a]] ->= [ [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, c], [c, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, c], [c, c], [c, a]] ->= [ [b, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, c], [c, c], [c, a]] ->= [ [c, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, c], [c, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[b, a], [a, c]] ->= [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, c]] ->= [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, b], [b, a]] ->= [ [a, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, b], [b, b]] ->= [ [a, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b], [b, c]] ->= [ [a, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, b]] ->= [ [b, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, a]] ->= [ [c, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a], [a, b], [b, b]] ->= [ [c, b] , [b, a] , [a, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, a], [a, b], [b, c]] ->= [ [c, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, a]] ->= [ [a, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, c], [c, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, c], [c, c], [c, a]] ->= [ [b, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, c], [c, c], [c, a]] ->= [ [c, c] , [c, b] , [b, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, c], [c, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
reason
  ([a, a], 3/1)
  ([a, b], 2/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 2/1)
  ([c, b], 0/1)
  ([c, c], 2/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, c]] ->= [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, c]] ->= [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, a]] ->= [ [b, b] , [b, a] , [a, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, c]] ->= [ [b, b] , [b, a] , [a, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, c], [c, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[c, c], [c, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, a, c] {- Input 1 -}
  [c, c] -> [c, b, a] {- Input 3 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 1), (1, -1), (2, -1)], epsilons = [((0, 1, 1), (0, 2, 0)), ((0, 1, 1), (0, 1, 2)), ((0, 1, 2), (0, 2, 0)), ((0, 2, 2), (0, 1, 0)), ((0, 2, 2), (0, 2, 3))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (4,3)\Split[(1/3,3)\TileAllAll{2}(9/27,9)\Weight(8/17,9)\Matrix{\Natural}{2}(0/17,9)\Weight(0/7,8)[],(3,3)\RelRFCmb{1}(0,0)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 7167 vars 29577 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7213, clauses: 29753, status: Satisfied, time: 0.07000967s


**************************************************
F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F  = Size { num_rules = 25 , num_strict_rules = 25 , num_top_rules = 0 , num_weak_rules
F  = 0 , alphabet_size = 9 , total_length = 135} , self = 66 , parent = Nothing
F  , duration = 0.101184844000 , status = Fail , start = 2025-09-03 11:05:34.589912206
F  UTC , finish = 2025-09-03 11:05:34.69109705 UTC , thread_cap_info = ("ThreadId
F  68", 0, False)}
F  
F  
