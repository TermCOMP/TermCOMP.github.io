last 481 length 1896
last 442 length 1779
CNF 481 vars 1896 clauses
CNF 442 vars 1779 clauses
last 557 length 2231
CNF 557 vars 2231 clauses
last 541 length 2205
CNF 541 vars 2205 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8412
last 2354 length 8412
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2670, clauses: 9620
last 2670 length 9620
CNF 2354 vars 8412 clauses
CNF 2670 vars 9620 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2670, clauses: 9620, status: Unsatisfied, time: 0.102043526s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6503, clauses: 26801
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8412, status: Unsatisfied, time: 0.141819451s
last 3759 length 16858
last 4017 length 19510
last 6503 length 26801
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7425, clauses: 30695
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4695, clauses: 18503
[Info] pool sizes (success) 30960 seen 13204 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16141
last 7021 length 30046
CNF 3759 vars 16858 clauses
CNF 4017 vars 19510 clauses
CNF 6503 vars 26801 clauses
last 7425 length 30695
last 9213 length 38782
**************************************************last 4695 length 18503

last 4110 length 16141
CNF 7021 vars 30046 clauses
CNF 7425 vars 30695 clauses
CNF 9213 vars 38782 clauses
CNF 4695 vars 18503 clauses
summaryCNF 4110 vars 16141 clauses

last 14858 length 63078
last 10596 length 49136
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [a, b, c, b, c]
to
  [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b]
via 47 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, a, c] {- Input 1 -}
  [c, c] -> [b, b, b, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [a, b, c, b, c], via = [(Step   { rule = 1, position = 0}, [c, a, c, c, b, c]), (Step   { rule = 2, position = 2}, [c, a, b, b, b, a, b, c]), (Step   { rule = 1, position = 1}, [c, c, a, c, b, b, a, b, c]), (Step   { rule = 0, position = 2}, [c, c, c, b, b, a, b, c]), (Step   { rule = 2, position = 1}, [c, b, b, b, a, b, b, a, b, c]), (Step   { rule = 1, position = 4}, [c, b, b, b, c, a, c, b, a, b, c]), (Step   { rule = 0, position = 5}, [c, b, b, b, c, c, b, a, b, c]), (Step   { rule = 1, position = 7}, [c, b, b, b, c, c, b, c, a, c, c]), (Step   { rule = 2, position = 9}, [c, b, b, b, c, c, b, c, a, b, b, b, a]), (Step   { rule = 0, position = 12}, [c, b, b, b, c, c, b, c, a, b, b, b]), (Step   { rule = 1, position = 8}, [c, b, b, b, c, c, b, c, c, a, c, b, b]), (Step   { rule = 0, position = 9}, [c, b, b, b, c, c, b, c, c, c, b, b]), (Step   { rule = 2, position = 8}, [c, b, b, b, c, c, b, c, b, b, b, a, b, b]), (Step   { rule = 1, position = 11}, [c, b, b, b, c, c, b, c, b, b, b, c, a, c, b]), (Step   { rule = 0, position = 12}, [c, b, b, b, c, c, b, c, b, b, b, c, c, b]), (Step   { rule = 2, position = 4}, [c, b, b, b, b, b, b, a, b, c, b, b, b, c, c, b]), (Step   { rule = 1, position = 7}, [c, b, b, b, b, b, b, c, a, c, c, b, b, b, c, c, b]), (Step   { rule = 2, position = 9}, [c, b, b, b, b, b, b, c, a, b, b, b, a, b, b, b, c, c, b]), (Step   { rule = 1, position = 12}, [c, b, b, b, b, b, b, c, a, b, b, b, c, a, c, b, b, c, c, b]), (Step   { rule = 0, position = 13}, [c, b, b, b, b, b, b, c, a, b, b, b, c, c, b, b, c, c, b]), (Step   { rule = 1, position = 8}, [c, b, b, b, b, b, b, c, c, a, c, b, b, c, c, b, b, c, c, b]), (Step   { rule = 0, position = 9}, [c, b, b, b, b, b, b, c, c, c, b, b, c, c, b, b, c, c, b]), (Step   { rule = 2, position = 12}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, a, b, b, c, c, b]), (Step   { rule = 1, position = 15}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, c, a, c, b, c, c, b]), (Step   { rule = 0, position = 16}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 8}, [c, b, b, b, b, b, b, c, b, b, b, a, b, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 11}, [c, b, b, b, b, b, b, c, b, b, b, c, a, c, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 12}, [c, b, b, b, b, b, b, c, b, b, b, c, c, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 11}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 14}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, c, a, c, b, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 15}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, c, c, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 14}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, a, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 17}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, c, a, c, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 18}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, c, c, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 17}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, a, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 20}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, c, a, c, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 21}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, c, c, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 20}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, a, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 23}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, c, c, c, b, c, c, b]), (Step   { rule = 2, position = 25}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, b, b, b, a, c, b, c, c, b]), (Step   { rule = 0, position = 28}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, b, b, b, c, b, c, c, b]), (Step   { rule = 1, position = 24}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, c, a, c, b, b, c, b, c, c, b]), (Step   { rule = 0, position = 25}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, c, c, b, b, c, b, c, c, b]), (Step   { rule = 2, position = 24}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, a, b, b, c, b, c, c, b]), (Step   { rule = 1, position = 27}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, c, a, c, b, c, b, c, c, b]), (Step   { rule = 0, position = 28}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, c, c, b, c, b, c, c, b]), (Step   { rule = 2, position = 27}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b])], to = [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b]}

**************************************************
skeleton: (3,3)\Loop{47}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 12} , self = 56 , parent = Nothing , duration = 0.122077845000 , status
F            = Fail , start = 2025-09-03 11:15:31.004731041 UTC , finish = 2025-09-03
F            11:15:31.126808886 UTC , thread_cap_info = ("ThreadId 34", 3, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 9 , total_length = 162} , self = 68 , parent = Nothing
| F          , duration = 0.296849685000 , status = Fail , start = 2025-09-03 11:15:31.026527018
| F          UTC , finish = 2025-09-03 11:15:31.323376703 UTC , thread_cap_info = ("ThreadId
| F          71", 1, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 66 , parent = Nothing
| | F        , duration = 0.292030069000 , status = Fail , start = 2025-09-03 11:15:31.026533003
| | F        UTC , finish = 2025-09-03 11:15:31.318563072 UTC , thread_cap_info = ("ThreadId
| | F        73", 1, False)}
| | F        
| | | S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | S      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | S      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | S      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | S      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | S      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | S      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | S      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | S      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | S      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | S      = 12} , self = 83 , parent = Nothing , duration = 0.527486177000 , status
| | | S      = Success , start = 2025-09-03 11:15:31.028764653 UTC , finish = 2025-09-03
| | | S      11:15:31.55625083 UTC , thread_cap_info = ("ThreadId 76", 0, False)}
| | | S      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | F    = 5 , total_length = 35} , self = 82 , parent = Nothing , duration = 0.448166321000
| | | | F    , status = Fail , start = 2025-09-03 11:15:31.047924853 UTC , finish =
| | | | F    2025-09-03 11:15:31.496091174 UTC , thread_cap_info = ("ThreadId 91", 2,
| | | | F    False)}
| | | | F    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | F  alphabet_size = 5 , total_length = 40} , self = 58 , parent = Nothing ,
| | | | | F  duration = 0.131876572000 , status = Fail , start = 2025-09-03 11:15:31.089406224
| | | | | F  UTC , finish = 2025-09-03 11:15:31.221282796 UTC , thread_cap_info = ("ThreadId
| | | | | F  100", 2, False)}
| | | | | F  
F | | | | |  
  | | | | F  
  | F | |    
  F   | |    
      | F    
      S      
