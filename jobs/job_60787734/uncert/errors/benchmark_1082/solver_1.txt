last 2353 length 11370
last 1889 length 8440
CNF 2353 vars 11370 clauses
CNF 1889 vars 8440 clauses
last 918 length 3799
last 800 length 3364
CNF 918 vars 3799 clauses
CNF 800 vars 3364 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 9267
last 2459 length 9267
CNF 2459 vars 9267 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 9267, status: Satisfied, time: 0.035661632s
last 1151 length 5091
last 1059 length 5177
CNF 1059 vars 5177 clauses
CNF 1151 vars 5091 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8987
last 2355 length 8987
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       context
SRS with 4 rules on 2 letters       mirror
SRS with 4 rules on 2 letters       DP
SRS with 5 strict rules and 4 weak rules on 4 letters       EDG
SRS with 5 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b] {- Input 1 -}
  [b, a, b] -> [a, a, b, b, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [a, a] -> [b] {- Mirror (Input 1) -}
  [b, a, b] -> [b, b, b, a, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [a, a] -> [b] {- Mirror (Input 1) -}
  [b, a, b] -> [b, b, b, a, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, a] -> [b] {- Input 1 -}
  [b, a, b] -> [a, a, b, b, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [b] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 1) -}
  [b#, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Input 2) -}
  [b#, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Input 2) -}
  [b#, a, b] |-> [b#, b] {- DP (Top 3) (Input 2) -}
  [b#, a, b] |-> [b#, b, b] {- DP (Top 2) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 1) -}
  [b#, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Input 2) -}
  [b#, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Input 2) -}
  [b#, a, b] |-> [b#, b] {- DP (Top 3) (Input 2) -}
  [b#, a, b] |-> [b#, b, b] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [b] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [b] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Context\Mirror(4,2)\Deepee\EDG(5/4,4)\Matrix{\Arctic}{3}(0/4,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bitsCNF 2355 vars 8987 clauses
,shapeMatrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8987, status: Satisfied, time: 0.006241462s
 = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F        = 12} , self = 47 , parent = Nothing , duration = 0.118540468000 , status
F        = Fail , start = 2025-09-03 10:51:51.733555986 UTC , finish = 2025-09-03
F        10:51:51.852096454 UTC , thread_cap_info = ("ThreadId 35", 1, False)}
F        
| E      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| E      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| E      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| E      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| E      = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E      = 12} , self = 73 , parent = Nothing , duration = 0.729225412000 , status
| E      = Except "AsyncCancelled" , start = 2025-09-03 10:51:51.733688154 UTC ,
| E      finish = 2025-09-03 10:51:52.462913566 UTC , thread_cap_info = ("ThreadId
| E      22", 0, False)}
| E      
F |      
S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |      = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
S |      = 4 , total_length = 46} , self = 65 , parent = Nothing , duration = 0.102522610000
S |      , status = Success , start = 2025-09-03 10:51:52.123241411 UTC , finish
S |      = 2025-09-03 10:51:52.225764021 UTC , thread_cap_info = ("ThreadId 102",
S |      0, False)}
S |      
| | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | E    = 4 , total_length = 46} , self = 68 , parent = Nothing , duration = 0.115825682000
| | E    , status = Except "AsyncCancelled" , start = 2025-09-03 10:51:52.187123436
| | E    UTC , finish = 2025-09-03 10:51:52.302949118 UTC , thread_cap_info = ("ThreadId
| | E    103", 0, False)}
| | E    
S | |    
F | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F | |    = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F | |    = 50} , self = 71 , parent = Nothing , duration = 0.141060990000 , status
F | |    = Fail , start = 2025-09-03 10:51:52.262936699 UTC , finish = 2025-09-03
F | |    10:51:52.403997689 UTC , thread_cap_info = ("ThreadId 107", 0, False)}
F | |    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F  = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F  = 50} , self = 72 , parent = Nothing , duration = 0.129875808000 , status
| | | F  = Fail , start = 2025-09-03 10:51:52.27415701 UTC , finish = 2025-09-03
| | | F  10:51:52.404032818 UTC , thread_cap_info = ("ThreadId 108", 0, False)}
| | | F  
| | E |  
F |   |  
  |   F  
  E      
