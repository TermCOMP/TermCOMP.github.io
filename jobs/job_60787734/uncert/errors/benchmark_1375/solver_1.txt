last 9031 length 92763
last 8459 length 56078
CNF 9031 vars 92763 clauses
last 706 length 2995
CNF 706 vars 2995 clauses
last 786 length 3505
CNF 8459 vars 56078 clauses
CNF 786 vars 3505 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7023
last 1940 length 7023
last 741 length 3144
CNF 1940 vars 7023 clauses
CNF 741 vars 3144 clauses
last 633 length 2638
CNF 633 vars 2638 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6048, clauses: 25103
last 6048 length 25103
CNF 6048 vars 25103 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1961, clauses: 7170
last 1961 length 7170
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6048, clauses: 25103, status: Satisfied, time: 0.046105106s
CNF 1961 vars 7170 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1940, clauses: 7023, status: Satisfied, time: 0.116569437s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6051, clauses: 25122
last 6051 length 25122
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1961, clauses: 7170, status: Satisfied, time: 0.048940453s
last 757 length 3419
CNF 6051 vars 25122 clauses
CNF 757 vars 3419 clauses
last 600 length 2591
CNF 600 vars 2591 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6207
last 1736 length 6207
CNF 1736 vars 6207 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       context
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 5 strict rules and 4 weak rules on 5 letters       weights
SRS with 2 strict rules and 4 weak rules on 4 letters       EDG
SRS with 2 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, b, c] -> [b, c, b, c, a, a, b] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a] {- Input 0 -}
  [b, a, b] -> [b] {- Input 0 -}
  [c, a, b] -> [c] {- Input 0 -}
  [a, b, c] -> [b, c, b, c, a, a, b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a] {- Mirror (Input 0) -}
  [b, a, b] -> [b] {- Mirror (Input 0) -}
  [b, a, c] -> [c] {- Mirror (Input 0) -}
  [c, b, a] -> [b, a, a, c, b, c, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [b, a, a, c, b, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c#, b, a] |-> [b#] {- DP (Top 6) (Mirror (Input 1)) -}
  [c#, b, a] |-> [b#, a, a, c, b, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b, a] |-> [b#, c, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [b, a, a, c, b, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, a] |-> [c#, b] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b, c, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [b, a, a, c, b, c, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 16A 18A 18A - \
        | 16A 18A 18A - |
        | 16A 18A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [b, a, a, c, b, c, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,3)\Context\Mirror(4,3)\Deepee(5/4,5)\Weight\EDG(2/4,4)\Matrix{\Arctic}{3}(0/4,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
F          = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F          = 144} , self = 64 , parent = Nothing , duration = 0.421730340000 , status
F          = Fail , start = 2025-09-03 11:44:07.233243939 UTC , finish = 2025-09-03
F          11:44:07.654974279 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F        = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 144} , self = 62 , parent = Nothing , duration = 0.384266848000 , status
| F        = Fail , start = 2025-09-03 11:44:07.233247522 UTC , finish = 2025-09-03
| F        11:44:07.61751437 UTC , thread_cap_info = ("ThreadId 66", 3, False)}
| F        
| | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E      = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E      = 12} , self = 83 , parent = Nothing , duration = 0.631203383000 , status
| | E      = Except "AsyncCancelled" , start = 2025-09-03 11:44:07.269884311 UTC ,
| | E      finish = 2025-09-03 11:44:07.901087694 UTC , thread_cap_info = ("ThreadId
| | E      72", 1, False)}
| | E      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 3 , total_length = 12} , self = 44 , parent = Nothing
| | | F    , duration = 0.133656596000 , status = Fail , start = 2025-09-03 11:44:07.303799404
| | | F    UTC , finish = 2025-09-03 11:44:07.437456 UTC , thread_cap_info = ("ThreadId
| | | F    75", 1, False)}
| | | F    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 45 , parent = Nothing
| | | | F  , duration = 0.148437296000 , status = Fail , start = 2025-09-03 11:44:07.324406533
| | | | F  UTC , finish = 2025-09-03 11:44:07.472843829 UTC , thread_cap_info = ("ThreadId
| | | | F  77", 1, False)}
| | | | F  
| | | F |  
| | |   F  
| F |      
| S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |      = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| S |      = 4 , total_length = 33} , self = 70 , parent = Nothing , duration = 0.159497003000
| S |      , status = Success , start = 2025-09-03 11:44:07.652473051 UTC , finish
| S |      = 2025-09-03 11:44:07.811970054 UTC , thread_cap_info = ("ThreadId 101",
| S |      3, False)}
| S |      
F | |      
S | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
S | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
S | |      = 4 , total_length = 33} , self = 68 , parent = Nothing , duration = 0.118700935000
S | |      , status = Success , start = 2025-09-03 11:44:07.665651982 UTC , finish
S | |      = 2025-09-03 11:44:07.784352917 UTC , thread_cap_info = ("ThreadId 105",
S | |      3, False)}
S | |      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | S    = 4 , total_length = 34} , self = 76 , parent = Nothing , duration = 0.124337109000
| | | S    , status = Success , start = 2025-09-03 11:44:07.703840717 UTC , finish
| | | S    = 2025-09-03 11:44:07.828177826 UTC , thread_cap_info = ("ThreadId 110",
| | | S    1, False)}
| | | S    
S | | |    
  S | |    
    | S    
    E      
