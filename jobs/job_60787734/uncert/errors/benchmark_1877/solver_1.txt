last 360 length 1446
CNF 360 vars 1446 clauses
last 353 length 1415
CNF 353 vars 1415 clauses
last 392 length 1500
last 277 length 1050
CNF 277 vars 1050 clauses
CNF 392 vars 1500 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4667, clauses: 19039
last 4667 length 19039
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1979, clauses: 7044
CNF 4667 vars 19039 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1768, clauses: 6316
last 1979 length 7044
last 2663 length 11309
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4332, clauses: 17640
last 2663 length 11309
last 2948 length 11906
last 2948 length 11906
last 1768 length 6316
last 3725 length 15284
last 3645 length 15200
CNF 1979 vars 7044 clauses
CNF 2663 vars 11309 clauses
last 4332 length 17640
CNF 2948 vars 11906 clauses
CNF 2663 vars 11309 clauses
CNF 2948 vars 11906 clauses
CNF 1768 vars 6316 clauses
CNF 3725 vars 15284 clauses
CNF 3645 vars 15200 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
CNF 4332 vars 17640 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1979, clauses: 7044, status: Unsatisfied, time: 0.377036287s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1768, clauses: 6316, status: Satisfied, time: 0.312701594s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4332, clauses: 17640, status: Satisfied, time: 0.310463535s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2958, clauses: 11557
last 2958 length 11557
CNF 2958 vars 11557 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 18 weak rules on 9 letters       weights
  SRS with 6 strict rules and 12 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 12 weak rules on 9 letters       weights
  SRS with 0 strict rules and 9 weak rules on 8 letters       no strict rules

  2 SRS with 2 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 1 and with 6 epsilon transitions
  SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c] -> [c, b] {- Input 0 -}
  [a] -> [b, b, b] {- Input 1 -}
  [b, c, b] -> [a, c] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c] -> [c, b] {- Input 0 -}
  [a] ->= [b, b, b] {- Input 1 -}
  [b, c, b] ->= [a, c] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a]] -> [ [a, c] , [c, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, c]] -> [ [a, c] , [c, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c], [c, b]] -> [ [a, c] , [c, b] , [b, b] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[c, a], [a, c], [c, a]] -> [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, c]] -> [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, b]] -> [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a]] -> [ [b, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, c]] -> [ [b, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b]] -> [ [b, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, a]] ->= [ [a, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c]] ->= [ [a, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, b]] ->= [ [a, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, a], [a, a]] ->= [ [c, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, a], [a, c]] ->= [ [c, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a], [a, b]] ->= [ [c, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, a], [a, a]] ->= [ [b, b] , [b, b] , [b, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, a], [a, c]] ->= [ [b, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, a], [a, b]] ->= [ [b, b] , [b, b] , [b, b] , [b, b] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, b], [b, a]] ->= [ [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, c]] ->= [ [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, b]] ->= [ [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, a]] ->= [ [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, c]] ->= [ [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, b]] ->= [ [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, a]] ->= [ [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, c]] ->= [ [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, b]] ->= [ [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[c, a], [a, c], [c, a]] -> [ [c, c] , [c, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[c, a], [a, c], [c, c]] -> [ [c, c] , [c, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, c], [c, b]] -> [ [c, c] , [c, b] , [b, b] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[b, a], [a, c], [c, a]] -> [ [b, c] , [c, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[b, a], [a, c], [c, c]] -> [ [b, c] , [c, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[b, a], [a, c], [c, b]] -> [ [b, c] , [c, b] , [b, b] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, c]] ->= [ [a, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, a], [a, c]] ->= [ [c, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c]] ->= [ [b, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, c], [c, b], [b, a]] ->= [ [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, c]] ->= [ [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, b]] ->= [ [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, a]] ->= [ [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, c]] ->= [ [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, b]] ->= [ [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, a]] ->= [ [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, c]] ->= [ [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, b]] ->= [ [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, c]] ->= [ [a, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, a], [a, c]] ->= [ [c, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c]] ->= [ [b, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, c], [c, b], [b, a]] ->= [ [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, c]] ->= [ [a, a] , [a, c] , [ c , c ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, b]] ->= [ [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, a]] ->= [ [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, c]] ->= [ [c, a] , [a, c] , [ c , c ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, b]] ->= [ [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, a]] ->= [ [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, c]] ->= [ [b, a] , [a, c] , [ c , c ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, b]] ->= [ [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c]] ->= [ [a, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, a], [a, c]] ->= [ [c, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c]] ->= [ [b, b] , [b, b] , [b, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, c], [c, b], [b, a]] ->= [ [a, a] , [a, c] , [ c , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b], [b, b]] ->= [ [a, a] , [a, c] , [ c , b ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, a]] ->= [ [c, a] , [a, c] , [ c , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b], [b, b]] ->= [ [c, a] , [a, c] , [ c , b ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, a]] ->= [ [b, a] , [a, c] , [ c , a ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b], [b, b]] ->= [ [b, a] , [a, c] , [ c , b ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a] -> [b, b, b] {- Input 1 -}
  [b, c, b] -> [a, c] {- Input 2 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 1), (1, -1)], epsilons = [((0, 1, 0), (1, 0, 0)), ((0, 0, 2), (1, 0, 0)), ((0, 0, 2), (0, 1, 0)), ((1, 0, 2), (1, 0, 0)), ((1, 0, 2), (0, 1, 0)), ((1, 0, 3), (0, 1, 1))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3,3)\Split[(1/2,3)\TileAllAll{2}(9/18,9)\Weight(6/12,9)\Matrix{\Natural}{2}(0/12,9)\Weight(0/9,8)[],(2,3)\RelRFCmb{1}(0,0)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2958, clauses: 11557, status: Satisfied, time: 0.028453459s


**************************************************
F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F                  = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
F                  = 0 , alphabet_size = 9 , total_length = 117} , self = 54 , parent = Nothing
F                  , duration = 0.126239549000 , status = Fail , start = 2025-09-03 13:28:05.255512364
F                  UTC , finish = 2025-09-03 13:28:05.381751913 UTC , thread_cap_info = ("ThreadId
F                  54", 3, False)}
F                  
| F                Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F                , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F                = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| F                = 5 , total_length = 27} , self = 86 , parent = Nothing , duration = 0.607436228000
| F                , status = Fail , start = 2025-09-03 13:28:05.299405263 UTC , finish =
| F                2025-09-03 13:28:05.906841491 UTC , thread_cap_info = ("ThreadId 84", 2,
| F                False)}
| F                
| | S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S              = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | S              = 5 , total_length = 25} , self = 87 , parent = Nothing , duration = 0.528803060000
| | S              , status = Success , start = 2025-09-03 13:28:05.378312739 UTC , finish
| | S              = 2025-09-03 13:28:05.907115799 UTC , thread_cap_info = ("ThreadId 93",
| | S              2, False)}
| | S              
F | |              
S | |              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | |              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
S | |              , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
S | |              = 5 , total_length = 25} , self = 94 , parent = Nothing , duration = 0.549159521000
S | |              , status = Success , start = 2025-09-03 13:28:05.387048339 UTC , finish
S | |              = 2025-09-03 13:28:05.93620786 UTC , thread_cap_info = ("ThreadId 107",
S | |              2, False)}
S | |              
| | | S            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | S            = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | S            = 117} , self = 84 , parent = Nothing , duration = 0.498397561000 , status
| | | S            = Success , start = 2025-09-03 13:28:05.404566312 UTC , finish = 2025-09-03
| | | S            13:28:05.902963873 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | | S            
| | | | S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | S          = 4 , num_top_rules = 4 , num_weak_rules = 14 , alphabet_size = 9 , total_length
| | | | S          = 117} , self = 80 , parent = Nothing , duration = 0.430792323000 , status
| | | | S          = Success , start = 2025-09-03 13:28:05.416187863 UTC , finish = 2025-09-03
| | | | S          13:28:05.846980186 UTC , thread_cap_info = ("ThreadId 110", 3, False)}
| | | | S          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | F        = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F        = 117} , self = 82 , parent = Nothing , duration = 0.443018437000 , status
| | | | | F        = Fail , start = 2025-09-03 13:28:05.418910663 UTC , finish = 2025-09-03
| | | | | F        13:28:05.8619291 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 14 , alphabet_size = 9 , total_length
| | | | | | F      = 117} , self = 79 , parent = Nothing , duration = 0.270745300000 , status
| | | | | | F      = Fail , start = 2025-09-03 13:28:05.434131004 UTC , finish = 2025-09-03
| | | | | | F      13:28:05.704876304 UTC , thread_cap_info = ("ThreadId 111", 3, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | | F    = 5 , num_top_rules = 5 , num_weak_rules = 18 , alphabet_size = 11 , total_length
| | | | | | | F    = 150} , self = 91 , parent = Nothing , duration = 0.453939602000 , status
| | | | | | | F    = Fail , start = 2025-09-03 13:28:05.474168139 UTC , finish = 2025-09-03
| | | | | | | F    13:28:05.928107741 UTC , thread_cap_info = ("ThreadId 114", 3, False)}
| | | | | | | F    
| | | | | | | | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | | | S  = 5 , num_top_rules = 5 , num_weak_rules = 18 , alphabet_size = 11 , total_length
| | | | | | | | S  = 150} , self = 89 , parent = Nothing , duration = 0.426664763000 , status
| | | | | | | | S  = Success , start = 2025-09-03 13:28:05.495103773 UTC , finish = 2025-09-03
| | | | | | | | S  13:28:05.921768536 UTC , thread_cap_info = ("ThreadId 115", 2, False)}
| | | | | | | | S  
| | | | | | F | |  
| | | | | | F | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F | |  = 18 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 14 ,
| | | | | | F | |  alphabet_size = 9 , total_length = 117} , self = 83 , parent = Nothing
| | | | | | F | |  , duration = 0.196236296000 , status = Fail , start = 2025-09-03 13:28:05.704904025
| | | | | | F | |  UTC , finish = 2025-09-03 13:28:05.901140321 UTC , thread_cap_info = ("ThreadId
| | | | | | F | |  131", 3, False)}
| | | | | | F | |  
| | | | S | | | |  
| | | |   F | | |  
| | | |     F | |  
| | | S       | |  
| F |         | |  
|   S         | |  
|             | S  
|             F    
S                  
last 361 length 1383
last 261 length 992
