last 7692 length 43298
CNF 7692 vars 43298 clauses
last 6985 length 52512
CNF 6985 vars 52512 clauses
last 7432 length 34554
CNF 7432 vars 34554 clauses
last 5823 length 29665
CNF 5823 vars 29665 clauses
last 13877 length 68708
CNF 13877 vars 68708 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6279, clauses: 27827
last 6279 length 27827
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4298, clauses: 16782
last 4298 length 16782
CNF 4298 vars 16782 clauses
CNF 6279 vars 27827 clauses
last 9917 length 53810
CNF 9917 vars 53810 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4298, clauses: 16782, status: Unsatisfied, time: 0.174477957s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6279, clauses: 27827, status: Unsatisfied, time: 0.453044291s
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       Drop
SRS with 1 rules on 2 letters       mirror
SRS with 1 rules on 2 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 61 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a, a, a, a] -> [a, a, a, a, a, a, b, a, a, a, b] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [b, a, a, a, a] -> [a, a, a, a, b, a, a, a, b] {- Dropped 2 0 (Input 0) -}
    reason
      mirror
       property Termination
    has value Just True
    for SRS
      [a, a, a, a, b] -> [ b , a , a , a , b , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 61 states

   property Termination
has value Just True
for SRS
  [b, a, a, a, a] -> [a, a, a, a, b, a, a, a, b] {- Dropped 2 0 (Input 0) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a, a, b] -> [ b , a , a , a , b , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 61 states

**************************************************
skeleton: (1,2)\Drop{2}{0}\Mirror(1,2)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 1.202731701000
  min duration 0.641358533000
  total durat. 2.733936245000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 154}
    , self = 84
    , parent = Nothing
    , duration = 1.202731701000
    , status = Fail
    , start = 2025-09-03 12:12:25.528660164 UTC
    , finish = 2025-09-03 12:12:26.731391865 UTC
    , thread_cap_info = ("ThreadId 137", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.929923579000
  min duration 0.581362358000
  total durat. 2.106658407000
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 5
  max duration 0.813373000000
  min duration 0.248851885000
  total durat. 2.083913780000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.747260638000
  min duration 0.428726783000
  total durat. 1.175987421000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.220054293000
  min duration 0.906608929000
  total durat. 2.126663222000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 16}
    , self = 89
    , parent = Nothing
    , duration = 1.220054293000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:12:25.648654389 UTC
    , finish = 2025-09-03 12:12:26.868708682 UTC
    , thread_cap_info = ("ThreadId 122", 1, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.380467728000
  min duration 0.820364021000
  total durat. 2.200831749000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 16}
    , self = 87
    , parent = Nothing
    , duration = 1.380467728000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:12:25.448644961 UTC
    , finish = 2025-09-03 12:12:26.829112689 UTC
    , thread_cap_info = ("ThreadId 113", 1, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 3
  max duration 1.492563812000
  min duration 1.159890212000
  total durat. 4.032472765000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 14}
    , self = 80
    , parent = Nothing
    , duration = 1.159890212000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:12:25.230423553 UTC
    , finish = 2025-09-03 12:12:26.390313765 UTC
    , thread_cap_info = ("ThreadId 91", 1, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 18}
    , self = 85
    , parent = Nothing
    , duration = 1.380018741000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:12:25.368661333 UTC
    , finish = 2025-09-03 12:12:26.748680074 UTC
    , thread_cap_info = ("ThreadId 107", 1, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 16}
    , self = 83
    , parent = Nothing
    , duration = 1.492563812000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:12:25.216090326 UTC
    , finish = 2025-09-03 12:12:26.708654138 UTC
    , thread_cap_info = ("ThreadId 83", 1, False)}
**************************************************
F                              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                              = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F                              = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F                              = 80} , self = 72 , parent = Nothing , duration = 0.641358533000 , status
F                              = Fail , start = 2025-09-03 12:12:25.089544688 UTC , finish = 2025-09-03
F                              12:12:25.730903221 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
F                              
| F                            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F                            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                            = 80} , self = 73 , parent = Nothing , duration = 0.929923579000 , status
| F                            = Fail , start = 2025-09-03 12:12:25.089558376 UTC , finish = 2025-09-03
| F                            12:12:26.019481955 UTC , thread_cap_info = ("ThreadId 62", 0, False)}
| F                            
| | F                          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F                          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F                          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F                          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F                          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F                          = 0 , alphabet_size = 4 , total_length = 80} , self = 48 , parent = Nothing
| | F                          , duration = 0.248851885000 , status = Fail , start = 2025-09-03 12:12:25.112391677
| | F                          UTC , finish = 2025-09-03 12:12:25.361243562 UTC , thread_cap_info = ("ThreadId
| | F                          74", 3, False)}
| | F                          
| | | F                        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F                        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F                        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F                        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F                        = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | F                        = 0 , alphabet_size = 4 , total_length = 80} , self = 49 , parent = Nothing
| | | F                        , duration = 0.344566972000 , status = Fail , start = 2025-09-03 12:12:25.135026923
| | | F                        UTC , finish = 2025-09-03 12:12:25.479593895 UTC , thread_cap_info = ("ThreadId
| | | F                        72", 3, False)}
| | | F                        
| | | | E                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | E                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | E                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | E                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | E                      = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | E                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | E                      = 16} , self = 83 , parent = Nothing , duration = 1.492563812000 , status
| | | | E                      = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.216090326 UTC ,
| | | | E                      finish = 2025-09-03 12:12:26.708654138 UTC , thread_cap_info = ("ThreadId
| | | | E                      83", 1, False)}
| | | | E                      
| | | | | E                    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | E                    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | E                    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | E                    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | E                    = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | E                    = 14} , self = 80 , parent = Nothing , duration = 1.159890212000 , status
| | | | | E                    = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.230423553 UTC ,
| | | | | E                    finish = 2025-09-03 12:12:26.390313765 UTC , thread_cap_info = ("ThreadId
| | | | | E                    91", 1, False)}
| | | | | E                    
| | | | | | F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F                  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | F                  = 0 , alphabet_size = 2 , total_length = 16} , self = 76 , parent = Nothing
| | | | | | F                  , duration = 0.813373000000 , status = Fail , start = 2025-09-03 12:12:25.308805243
| | | | | | F                  UTC , finish = 2025-09-03 12:12:26.122178243 UTC , thread_cap_info = ("ThreadId
| | | | | | F                  96", 1, False)}
| | | | | | F                  
| | | | | | | F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F                = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F                = 0 , alphabet_size = 2 , total_length = 16} , self = 67 , parent = Nothing
| | | | | | | F                , duration = 0.360390315000 , status = Fail , start = 2025-09-03 12:12:25.328658723
| | | | | | | F                UTC , finish = 2025-09-03 12:12:25.689049038 UTC , thread_cap_info = ("ThreadId
| | | | | | | F                98", 1, False)}
| | | | | | | F                
| | F | | | | |                
| | E | | | | |                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | E | | | | |                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | E | | | | |                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | E | | | | |                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | E | | | | |                = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | E | | | | |                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | E | | | | |                = 18} , self = 85 , parent = Nothing , duration = 1.380018741000 , status
| | E | | | | |                = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.368661333 UTC ,
| | E | | | | |                finish = 2025-09-03 12:12:26.748680074 UTC , thread_cap_info = ("ThreadId
| | E | | | | |                107", 1, False)}
| | E | | | | |                
| | | | | | | | E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | E              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | E              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | E              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | E              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | E              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | E              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | E              = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | E              = 16} , self = 87 , parent = Nothing , duration = 1.380467728000 , status
| | | | | | | | E              = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.448644961 UTC ,
| | | | | | | | E              finish = 2025-09-03 12:12:26.829112689 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E              113", 1, False)}
| | | | | | | | E              
| | | F | | | | |              
| | | F | | | | |              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | | | | |              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | | | | |              = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | F | | | | |              = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | F | | | | |              = 294} , self = 79 , parent = Nothing , duration = 0.889846011000 , status
| | | F | | | | |              = Fail , start = 2025-09-03 12:12:25.494513406 UTC , finish = 2025-09-03
| | | F | | | | |              12:12:26.384359417 UTC , thread_cap_info = ("ThreadId 134", 3, False)}
| | | F | | | | |              
| | | | | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | | | | | F            = 16 , num_top_rules = 16 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | | | F            = 294} , self = 75 , parent = Nothing , duration = 0.595372470000 , status
| | | | | | | | | F            = Fail , start = 2025-09-03 12:12:25.494515012 UTC , finish = 2025-09-03
| | | | | | | | | F            12:12:26.089887482 UTC , thread_cap_info = ("ThreadId 135", 3, False)}
| | | | | | | | | F            
| | | | | | | | | | E          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | E          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | E          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | E          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | E          = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | E          = 0 , alphabet_size = 2 , total_length = 14} , self = 78 , parent = Nothing
| | | | | | | | | | E          , duration = 0.660044850000 , status = Except "AsyncCancelled" , start
| | | | | | | | | | E          = 2025-09-03 12:12:25.508905814 UTC , finish = 2025-09-03 12:12:26.168950664
| | | | | | | | | | E          UTC , thread_cap_info = ("ThreadId 116", 1, False)}
| | | | | | | | | | E          
| | | | | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | | F        = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | | | | | F        = 154} , self = 84 , parent = Nothing , duration = 1.202731701000 , status
| | | | | | | | | | | F        = Fail , start = 2025-09-03 12:12:25.528660164 UTC , finish = 2025-09-03
| | | | | | | | | | | F        12:12:26.731391865 UTC , thread_cap_info = ("ThreadId 137", 3, False)}
| | | | | | | | | | | F        
| | | | | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | | | F      = 6 , num_top_rules = 6 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | | | | | | F      = 154} , self = 77 , parent = Nothing , duration = 0.581362358000 , status
| | | | | | | | | | | | F      = Fail , start = 2025-09-03 12:12:25.548939249 UTC , finish = 2025-09-03
| | | | | | | | | | | | F      12:12:26.130301607 UTC , thread_cap_info = ("ThreadId 138", 3, False)}
| | | | | | | | | | | | F      
| | | | | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | E    = 16} , self = 89 , parent = Nothing , duration = 1.220054293000 , status
| | | | | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.648654389 UTC ,
| | | | | | | | | | | | | E    finish = 2025-09-03 12:12:26.868708682 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | E    122", 1, False)}
| | | | | | | | | | | | | E    
| | | | | | | F | | | | | |    
| | | | | | | F | | | | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F | | | | | |    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F | | | | | |    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F | | | | | |    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F | | | | | |    = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F | | | | | |    = 0 , alphabet_size = 2 , total_length = 18} , self = 74 , parent = Nothing
| | | | | | | F | | | | | |    , duration = 0.316731608000 , status = Fail , start = 2025-09-03 12:12:25.711284336
| | | | | | | F | | | | | |    UTC , finish = 2025-09-03 12:12:26.028015944 UTC , thread_cap_info = ("ThreadId
| | | | | | | F | | | | | |    142", 1, False)}
| | | | | | | F | | | | | |    
F | | | | | | | | | | | | |    
E | | | | | | | | | | | | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E | | | | | | | | | | | | |    , closure = Forward\n , start_strict_only = True\n , max_closure_length
E | | | | | | | | | | | | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E | | | | | | | | | | | | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E | | | | | | | | | | | | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E | | | | | | | | | | | | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E | | | | | | | | | | | | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E | | | | | | | | | | | | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E | | | | | | | | | | | | |    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E | | | | | | | | | | | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E | | | | | | | | | | | | |    = 14} , self = 82 , parent = Nothing , duration = 0.820364021000 , status
E | | | | | | | | | | | | |    = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.848977699 UTC ,
E | | | | | | | | | | | | |    finish = 2025-09-03 12:12:26.66934172 UTC , thread_cap_info = ("ThreadId
E | | | | | | | | | | | | |    144", 1, False)}
E | | | | | | | | | | | | |    
| | | | | | | | | | | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | E  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | E  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | | E  = 14} , self = 86 , parent = Nothing , duration = 0.906608929000 , status
| | | | | | | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:12:25.922485125 UTC ,
| | | | | | | | | | | | | | E  finish = 2025-09-03 12:12:26.829094054 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | E  145", 1, False)}
| | | | | | | | | | | | | | E  
| F | | | | | | | | | | | | |  
|   | | | | | F | | | | | | |  
|   | | | | |   | F | | | | |  
| F | | | | |   |   | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | | | | |   |   | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | | | | |   |   | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | | | | |   |   | | | | |  = 20 , num_strict_rules = 16 , num_top_rules = 16 , num_weak_rules = 4
| F | | | | |   |   | | | | |  , alphabet_size = 6 , total_length = 294} , self = 88 , parent = Nothing
| F | | | | |   |   | | | | |  , duration = 0.747260638000 , status = Fail , start = 2025-09-03 12:12:26.10888516
| F | | | | |   |   | | | | |  UTC , finish = 2025-09-03 12:12:26.856145798 UTC , thread_cap_info = ("ThreadId
| F | | | | |   |   | | | | |  157", 3, False)}
| F | | | | |   |   | | | | |  
| | | | | | F   |   | | | | |  
| | | | | |     |   | | F | |  
| | | | | |     |   E |   | |  
| | | | | | F   |     |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F   |     |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F   |     |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F   |     |   | |  = 10 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 4 ,
| | | | | | F   |     |   | |  alphabet_size = 6 , total_length = 154} , self = 81 , parent = Nothing
| | | | | | F   |     |   | |  , duration = 0.428726783000 , status = Fail , start = 2025-09-03 12:12:26.18864361
| | | | | | F   |     |   | |  UTC , finish = 2025-09-03 12:12:26.617370393 UTC , thread_cap_info = ("ThreadId
| | | | | | F   |     |   | |  158", 3, False)}
| | | | | | F   |     |   | |  
| | | F | | |   |     |   | |  
| | |   | E |   |     |   | |  
| | |   |   F   |     |   | |  
E | |   |       |     |   | |  
  | |   E       |     |   | |  
  | |           |     F   | |  
  | E           |         | |  
  |             |         | E  
  |             E         |    
  F                       |    
                          E    
