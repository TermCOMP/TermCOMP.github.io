last 3410 length 18427
last 2922 length 13764
CNF 2922 vars 13764 clauses
CNF 3410 vars 18427 clauses
last 502 length 2013
last 461 length 1848
CNF 502 vars 2013 clauses
CNF 461 vars 1848 clauses
last 380 length 1460
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8457
CNF 380 vars 1460 clauses
last 364 length 1433
last 2354 length 8457
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6503, clauses: 26807
last 6503 length 26807
CNF 364 vars 1433 clauses
CNF 2354 vars 8457 clauses
CNF 6503 vars 26807 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8457, status: Unsatisfied, time: 0.10256708s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2140, clauses: 7552
last 2140 length 7552
CNF 2140 vars 7552 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25381
last 6167 length 25381
CNF 6167 vars 25381 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2140, clauses: 7552, status: Unsatisfied, time: 0.090870939s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16175
last 4110 length 16175
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3869, clauses: 15117
last 3869 length 15117
CNF 3869 vars 15117 clauses
CNF 4110 vars 16175 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25381, status: Satisfied, time: 0.135561412s
last 357 length 1412
last 334 length 1290
CNF 334 vars 1290 clauses
CNF 357 vars 1412 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16175, status: Satisfied, time: 0.111671744s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2034, clauses: 7127
last 2034 length 7127
CNF 2034 vars 7127 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6121, clauses: 25205
last 6121 length 25205
CNF 6121 vars 25205 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2034, clauses: 7127, status: Unsatisfied, time: 0.085826095s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 6 strict rules and 5 weak rules on 6 letters       weights
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, b, c, a] {- Input 1 -}
  [c, c] -> [c, b, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [c, b, c, a] {- Input 1 -}
  [c, c] -> [c, b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, c, b, c] {- Mirror (Input 1) -}
  [c, c] -> [a, b, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [a#, c, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, c] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 1 0 0 \
        | 1 0 1 |
        \ 0 0 1 / )
  ( b
  , Wk  / 0 1 0 \
        | 0 1 1 |
        \ 0 0 1 / )
  ( c
  , Wk  / 1 0 1 \
        | 1 0 0 |
        \ 0 0 1 / )
  ( b#
  , Wk  / 1 3 4 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( c#
  , Wk  / 4 0 4 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(6/5,6)\Weight\EDG(4/5,5)\Matrix{\Natural}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 3 , total_length = 12} , self = 48 , parent = Nothing
F          , duration = 0.122784941000 , status = Fail , start = 2025-09-03 11:16:41.52573218
F          UTC , finish = 2025-09-03 11:16:41.648517121 UTC , thread_cap_info = ("ThreadId
F          49", 2, False)}
F          
| F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F        = 12} , self = 62 , parent = Nothing , duration = 0.166040453000 , status
| F        = Fail , start = 2025-09-03 11:16:41.54010442 UTC , finish = 2025-09-03
| F        11:16:41.706144873 UTC , thread_cap_info = ("ThreadId 41", 3, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
| | F      , duration = 0.158301747000 , status = Fail , start = 2025-09-03 11:16:41.540680913
| | F      UTC , finish = 2025-09-03 11:16:41.69898266 UTC , thread_cap_info = ("ThreadId
| | F      51", 2, False)}
| | F      
| | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E    = 12} , self = 85 , parent = Nothing , duration = 0.641102011000 , status
| | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:16:41.576836164 UTC ,
| | | E    finish = 2025-09-03 11:16:42.217938175 UTC , thread_cap_info = ("ThreadId
| | | E    81", 3, False)}
| | | E    
F | | |    
  | F |    
  F   |    
F     |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F     |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F     |    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
F     |    = 5 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.165973013000
F     |    , status = Fail , start = 2025-09-03 11:16:41.716839842 UTC , finish =
F     |    2025-09-03 11:16:41.882812855 UTC , thread_cap_info = ("ThreadId 106",
F     |    2, False)}
F     |    
| E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E   |    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| E   |    = 5 , total_length = 36} , self = 81 , parent = Nothing , duration = 0.445830491000
| E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:16:41.736846641
| E   |    UTC , finish = 2025-09-03 11:16:42.182677132 UTC , thread_cap_info = ("ThreadId
| E   |    107", 2, False)}
| E   |    
| | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | F |    = 5 , total_length = 30} , self = 69 , parent = Nothing , duration = 0.171954873000
| | F |    , status = Fail , start = 2025-09-03 11:16:41.812277181 UTC , finish =
| | F |    2025-09-03 11:16:41.984232054 UTC , thread_cap_info = ("ThreadId 111",
| | F |    2, False)}
| | F |    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | S  = 5 , total_length = 30} , self = 70 , parent = Nothing , duration = 0.260186057000
| | | | S  , status = Success , start = 2025-09-03 11:16:41.81228437 UTC , finish
| | | | S  = 2025-09-03 11:16:42.072470427 UTC , thread_cap_info = ("ThreadId 112",
| | | | S  2, False)}
| | | | S  
F | | | |  
S | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
S | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
S | | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S | | | |  = 5 , total_length = 36} , self = 79 , parent = Nothing , duration = 0.207638177000
S | | | |  , status = Success , start = 2025-09-03 11:16:41.896615907 UTC , finish
S | | | |  = 2025-09-03 11:16:42.104254084 UTC , thread_cap_info = ("ThreadId 114",
S | | | |  2, False)}
S | | | |  
| | F | |  
| |   | S  
| | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | F |    = 5 , total_length = 27} , self = 84 , parent = Nothing , duration = 0.114667701000
| | F |    , status = Fail , start = 2025-09-03 11:16:42.082223098 UTC , finish =
| | F |    2025-09-03 11:16:42.196890799 UTC , thread_cap_info = ("ThreadId 127",
| | F |    2, False)}
| | F |    
S | | |    
  E | |    
    F |    
      E    
