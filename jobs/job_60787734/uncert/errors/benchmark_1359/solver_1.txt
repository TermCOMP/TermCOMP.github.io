last 406 length 1591
last 3337 length 14294
last 485 length 1874
last 431 length 1670
CNF 485 vars 1874 clauses
CNF 431 vars 1670 clauses
CNF 406 vars 1591 clauses
CNF 3337 vars 14294 clauses
last 474 length 1853
last 3307 length 13526
CNF 3307 vars 13526 clauses
CNF 474 vars 1853 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2795, clauses: 9984
last 2795 length 9984
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2294, clauses: 8187
last 2294 length 8187
CNF 2294 vars 8187 clauses
CNF 2795 vars 9984 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5959, clauses: 24449
last 5959 length 24449
CNF 5959 vars 24449 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2294, clauses: 8187, status: Unsatisfied, time: 0.059188443s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2795, clauses: 9984, status: Unsatisfied, time: 0.071953637s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6962, clauses: 28569
last 6962 length 28569
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5959, clauses: 24449, status: Satisfied, time: 0.068040422s
CNF 6962 vars 28569 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4499, clauses: 17346
last 4499 length 17346
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6962, clauses: 28569, status: Satisfied, time: 0.076577411s
last 380 length 1475
last 365 length 1428
CNF 380 vars 1475 clauses
CNF 365 vars 1428 clauses
CNF 4499 vars 17346 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2083, clauses: 7366
last 2083 length 7366
CNF 2083 vars 7366 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5621, clauses: 23033
last 5621 length 23033
last 433 length 1690
last 434 length 1679
CNF 433 vars 1690 clauses
CNF 5621 vars 23033 clauses
CNF 434 vars 1679 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2083, clauses: 7366, status: Unsatisfied, time: 0.089480825s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5621, clauses: 23033, status: Satisfied, time: 0.074824671s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2584, clauses: 9163
last 2584 length 9163
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6624, clauses: 27153
last 6624 length 27153
CNF 2584 vars 9163 clauses
CNF 6624 vars 27153 clauses
last 330 length 1285
CNF 330 vars 1285 clauses
last 360 length 1411
CNF 360 vars 1411 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1977, clauses: 6941
last 1977 length 6941
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2584, clauses: 9163, status: Unsatisfied, time: 0.132550529s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6624, clauses: 27153, status: Satisfied, time: 0.089956117s
CNF 1977 vars 6941 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5575, clauses: 22857
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4254, clauses: 16366
last 5575 length 22857
CNF 5575 vars 22857 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 6 strict rules and 6 weak rules on 6 letters       EDG
SRS with 6 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 6 weak rules on 6 letters       EDG
SRS with 5 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 6 weak rules on 6 letters       weights
SRS with 1 strict rules and 6 weak rules on 4 letters       EDG
SRS with 1 strict rules and 6 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b] -> [b, c] {- Input 2 -}
  [c, c] -> [a, c, a] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b] -> [b, c] {- Input 2 -}
  [c, c] -> [a, c, a] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a] -> [b] {- Mirror (Input 1) -}
  [b, a] -> [c, b] {- Mirror (Input 2) -}
  [c, c] -> [a, c, a] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, c] |-> [a#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, c] |-> [c#, a] {- DP (Top 1) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, c] |-> [a#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, c] |-> [c#, a] {- DP (Top 1) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A  0A 0A \
        | -2A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / - 0A 0A  \
        | - 0A -2A |
        \ - -  0A  / )
  ( c
  , Wk  / 1A 1A  1A  \
        | 1A -1A -1A |
        \ -  -   0A  / )
  ( a#
  , Wk  / -1A 0A 1A \
        | -   -  -  |
        \ -   -  0A / )
  ( b#
  , Wk  / - -1A 1A \
        | - -   -  |
        \ - -   0A / )
  ( c#
  , Wk  / 0A - -2A \
        | -  - -   |
        \ -  - 0A  / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, c] |-> [a#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a] |-> [c#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, c] |-> [a#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A -1A 1A  \
        | 0A 0A  -1A |
        \ -  -   0A  / )
  ( b
  , Wk  / 0A -2A 0A  \
        | 0A -2A -1A |
        \ -  -   0A  / )
  ( c
  , Wk  / -  1A 0A \
        | 1A 1A 1A |
        \ -  -  0A / )
  ( a#
  , Wk  / 1A - 2A \
        | -  - -  |
        \ -  - 0A / )
  ( b#
  , Wk  / 1A - 2A \
        | -  - -  |
        \ -  - 0A / )
  ( c#
  , Wk  / - 1A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, c] |-> [a#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, c] |-> [a#, c, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
  [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
      [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
      [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
      [b, a] ->= [c, b] {- DP Nontop (Mirror (Input 2)) -}
      [c, c] ->= [a, c, a] {- DP Nontop (Mirror (Input 3)) -}
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(6,3)\Deepee\EDG(6/6,6)\Matrix{\ArcticBZ}{3}\EDG(5/6,6)\Matrix{\ArcticBZ}{3}(4/6,6)\Weight\EDG(1/6,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F        = 180} , self = 62 , parent = Nothing , duration = 0.100663248000 , status
F        = Fail , start = 2025-09-03 11:46:03.63721103 UTC , finish = 2025-09-03
F        11:46:03.737874278 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
F        
| F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F      = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| F      alphabet_size = 6 , total_length = 41} , self = 68 , parent = Nothing ,
| F      duration = 0.146369190000 , status = Fail , start = 2025-09-03 11:46:03.708175891
| F      UTC , finish = 2025-09-03 11:46:03.854545081 UTC , thread_cap_info = ("ThreadId
| F      90", 3, False)}
| F      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 10 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 ,
| | F    alphabet_size = 5 , total_length = 35} , self = 67 , parent = Nothing ,
| | F    duration = 0.137618252000 , status = Fail , start = 2025-09-03 11:46:03.709624446
| | F    UTC , finish = 2025-09-03 11:46:03.847242698 UTC , thread_cap_info = ("ThreadId
| | F    91", 3, False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size
| | | S  = 5 , total_length = 35} , self = 69 , parent = Nothing , duration = 0.173491247000
| | | S  , status = Success , start = 2025-09-03 11:46:03.71503812 UTC , finish
| | | S  = 2025-09-03 11:46:03.888529367 UTC , thread_cap_info = ("ThreadId 92",
| | | S  3, False)}
| | | S  
F | | |  
S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
S | | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
S | | |  = 6 , total_length = 41} , self = 76 , parent = Nothing , duration = 0.180756387000
S | | |  , status = Success , start = 2025-09-03 11:46:03.775045842 UTC , finish
S | | |  = 2025-09-03 11:46:03.955802229 UTC , thread_cap_info = ("ThreadId 108",
S | | |  3, False)}
S | | |  
| | F |  
| F   |  
|     S  
S        
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
F        = 5 , total_length = 31} , self = 87 , parent = Nothing , duration = 0.146208907000
F        , status = Fail , start = 2025-09-03 11:46:03.968933292 UTC , finish =
F        2025-09-03 11:46:04.115142199 UTC , thread_cap_info = ("ThreadId 125",
F        3, False)}
F        
| S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| S      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| S      = 5 , total_length = 31} , self = 88 , parent = Nothing , duration = 0.143173715000
| S      , status = Success , start = 2025-09-03 11:46:03.976220402 UTC , finish
| S      = 2025-09-03 11:46:04.119394117 UTC , thread_cap_info = ("ThreadId 126",
| S      3, False)}
| S      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 11 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 6 ,
| | F    alphabet_size = 6 , total_length = 37} , self = 97 , parent = Nothing ,
| | F    duration = 0.216793458000 , status = Fail , start = 2025-09-03 11:46:04.068035459
| | F    UTC , finish = 2025-09-03 11:46:04.284828917 UTC , thread_cap_info = ("ThreadId
| | F    136", 3, False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | S  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 6 , alphabet_size
| | | S  = 6 , total_length = 37} , self = 98 , parent = Nothing , duration = 0.243942380000
| | | S  , status = Success , start = 2025-09-03 11:46:04.06804195 UTC , finish
| | | S  = 2025-09-03 11:46:04.31198433 UTC , thread_cap_info = ("ThreadId 137",
| | | S  3, False)}
| | | S  
F | | |  
  S | |  
    F |  
      S  
