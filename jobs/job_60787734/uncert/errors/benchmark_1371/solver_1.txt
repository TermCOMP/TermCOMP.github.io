last 647 length 2612
CNF 647 vars 2612 clauses
last 584 length 2533
CNF 584 vars 2533 clauses
last 488 length 1938
last 4110 length 17824
CNF 4110 vars 17824 clauses
last 3813 length 17384
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2032, clauses: 7495
CNF 3813 vars 17384 clauses
CNF 488 vars 1938 clauses
last 422 length 1691
last 2032 length 7495
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5761, clauses: 23802
last 6961 length 28611
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1822, clauses: 6520
CNF 422 vars 1691 clauses
last 5761 length 23802
CNF 2032 vars 7495 clauses
last 11141 length 48213
last 8562 length 37905
last 12292 length 54440
CNF 6961 vars 28611 clauses
last 1822 length 6520
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4874, clauses: 19984
CNF 5761 vars 23802 clauses
CNF 8562 vars 37905 clauses
CNF 11141 vars 48213 clauses
CNF 12292 vars 54440 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2032, clauses: 7495, status: Unsatisfied, time: 0.667313771s
CNF 1822 vars 6520 clauses
last 4874 length 19984
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1822, clauses: 6520, status: Satisfied, time: 0.699770415s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3570, clauses: 14281
CNF 4874 vars 19984 clauses
last 3570 length 14281
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14399, clauses: 56940
last 14399 length 56940
CNF 3570 vars 14281 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       mirror
SRS with 2 rules on 3 letters       DP
SRS with 3 strict rules and 2 weak rules on 5 letters       EDG
SRS with 3 strict rules and 2 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 5 letters       weights
SRS with 0 strict rules and 2 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [c, a, c, a, a] {- Input 0 -}
  [a, c] -> [b, a] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, a, c, a, c] {- Mirror (Input 0) -}
  [c, a] -> [a, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [b#, a, a] |-> [c#, a, c] {- DP (Top 2) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, a, c] {- DP (Top 2) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, a, c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, c, a, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,3)\Deepee\EDG(3/2,5)\Matrix{\Arctic}{3}(1/2,5)\Weight(0/2,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.047727431000
  min duration 0.022049118000
  total durat. 2.779607779000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 57
      , num_strict_rules = 39
      , num_top_rules = 39
      , num_weak_rules = 18
      , alphabet_size = 15
      , total_length = 369}
    , self = 84
    , parent = Nothing
    , duration = 1.047727431000
    , status = Fail
    , start = 2025-09-03 11:42:02.54781671 UTC
    , finish = 2025-09-03 11:42:03.595544141 UTC
    , thread_cap_info = ("ThreadId 103", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.909774551000
  min duration 0.034866530000
  total durat. 2.584736380000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.019642486000
  min duration 1.019642486000
  total durat. 1.019642486000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 31}
    , self = 85
    , parent = Nothing
    , duration = 1.019642486000
    , status = Fail
    , start = 2025-09-03 11:42:02.593908945 UTC
    , finish = 2025-09-03 11:42:03.613551431 UTC
    , thread_cap_info = ("ThreadId 109", 2, False)}
**************************************************
F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F                = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
F                = 0 , alphabet_size = 9 , total_length = 144} , self = 50 , parent = Nothing
F                , duration = 0.119095202000 , status = Fail , start = 2025-09-03 11:42:02.387509734
F                UTC , finish = 2025-09-03 11:42:02.506604936 UTC , thread_cap_info = ("ThreadId
F                56", 0, False)}
F                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 9 , total_length = 144} , self = 52 , parent = Nothing
| F              , duration = 0.127533245000 , status = Fail , start = 2025-09-03 11:42:02.394675676
| F              UTC , finish = 2025-09-03 11:42:02.522208921 UTC , thread_cap_info = ("ThreadId
| F              58", 0, False)}
| F              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | F            = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 144} , self = 79 , parent = Nothing , duration = 0.421840294000 , status
| | F            = Fail , start = 2025-09-03 11:42:02.493546039 UTC , finish = 2025-09-03
| | F            11:42:02.915386333 UTC , thread_cap_info = ("ThreadId 82", 3, False)}
| | F            
F | |            
F | |            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | |            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
F | |            = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F | |            = 144} , self = 76 , parent = Nothing , duration = 0.124584626000 , status
F | |            = Fail , start = 2025-09-03 11:42:02.513541802 UTC , finish = 2025-09-03
F | |            11:42:02.638126428 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
F | |            
| F |            
| F |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |            = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| F |            = 39 , num_top_rules = 39 , num_weak_rules = 18 , alphabet_size = 15 ,
| F |            total_length = 369} , self = 84 , parent = Nothing , duration = 1.047727431000
| F |            , status = Fail , start = 2025-09-03 11:42:02.54781671 UTC , finish = 2025-09-03
| F |            11:42:03.595544141 UTC , thread_cap_info = ("ThreadId 103", 0, False)}
| F |            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 57 , num_strict_rules
| | | F          = 39 , num_top_rules = 39 , num_weak_rules = 18 , alphabet_size = 15 ,
| | | F          total_length = 369} , self = 82 , parent = Nothing , duration = 0.909774551000
| | | F          , status = Fail , start = 2025-09-03 11:42:02.553547959 UTC , finish =
| | | F          2025-09-03 11:42:03.46332251 UTC , thread_cap_info = ("ThreadId 104", 0,
| | | F          False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 6 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | | F        = 4 , total_length = 31} , self = 85 , parent = Nothing , duration = 1.019642486000
| | | | F        , status = Fail , start = 2025-09-03 11:42:02.593908945 UTC , finish =
| | | | F        2025-09-03 11:42:03.613551431 UTC , thread_cap_info = ("ThreadId 109",
| | | | F        2, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | | F      = 25} , self = 80 , parent = Nothing , duration = 0.320013905000 , status
| | | | | F      = Fail , start = 2025-09-03 11:42:02.613577385 UTC , finish = 2025-09-03
| | | | | F      11:42:02.93359129 UTC , thread_cap_info = ("ThreadId 111", 2, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | | | F    = 25} , self = 81 , parent = Nothing , duration = 0.623013266000 , status
| | | | | | F    = Fail , start = 2025-09-03 11:42:02.618303388 UTC , finish = 2025-09-03
| | | | | | F    11:42:03.241316654 UTC , thread_cap_info = ("ThreadId 112", 2, False)}
| | | | | | F    
F | | | | | |    
F | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
F | | | | | |    = 36 , num_top_rules = 36 , num_weak_rules = 18 , alphabet_size = 12 ,
F | | | | | |    total_length = 381} , self = 86 , parent = Nothing , duration = 0.967977031000
F | | | | | |    , status = Fail , start = 2025-09-03 11:42:02.668410031 UTC , finish =
F | | | | | |    2025-09-03 11:42:03.636387062 UTC , thread_cap_info = ("ThreadId 118",
F | | | | | |    0, False)}
F | | | | | |    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | | | | F  = 36 , num_top_rules = 36 , num_weak_rules = 18 , alphabet_size = 12 ,
| | | | | | | F  total_length = 381} , self = 83 , parent = Nothing , duration = 0.892497407000
| | | | | | | F  , status = Fail , start = 2025-09-03 11:42:02.673548036 UTC , finish =
| | | | | | | F  2025-09-03 11:42:03.566045443 UTC , thread_cap_info = ("ThreadId 119",
| | | | | | | F  0, False)}
| | | | | | | F  
| | F | | | | |  
| |   | | F | |  
| | S | |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |   | |  = 5 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | S | |   | |  = 5 , total_length = 25} , self = 87 , parent = Nothing , duration = 0.987218887000
| | S | |   | |  , status = Success , start = 2025-09-03 11:42:02.953629571 UTC , finish
| | S | |   | |  = 2025-09-03 11:42:03.940848458 UTC , thread_cap_info = ("ThreadId 123",
| | S | |   | |  2, False)}
| | S | |   | |  
| | | | |   F |  
| | | | | E   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | | E   |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | | | | E   |  = 5 , total_length = 25} , self = 89 , parent = Nothing , duration = 0.931674465000
| | | | | E   |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:03.242078423
| | | | | E   |  UTC , finish = 2025-09-03 11:42:04.173752888 UTC , thread_cap_info = ("ThreadId
| | | | | E   |  128", 2, False)}
| | | | | E   |  
| | | F | |   |  
| | |   | |   F  
| F |   | |      
|   |   F |      
F   |     |      
    S     |      
          E      
