last 4088 length 18346
last 4680 length 23575
CNF 4680 vars 23575 clauses
CNF 4088 vars 18346 clauses
last 405 length 1658
CNF 405 vars 1658 clauses
last 494 length 2047
CNF 494 vars 2047 clauses
last 330 length 1297
CNF 330 vars 1297 clauses
last 440 length 1803
CNF 440 vars 1803 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7272
last 2048 length 7272
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5249, clauses: 21515
last 5249 length 21515
CNF 2048 vars 7272 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6457
last 1837 length 6457
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4913, clauses: 20101
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7272, status: Satisfied, time: 0.049768446s
CNF 1837 vars 6457 clauses
CNF 5249 vars 21515 clauses
last 4913 length 20101
CNF 4913 vars 20101 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6457, status: Satisfied, time: 0.064245655s
last 464 length 1925
last 335 length 1390
CNF 335 vars 1390 clauses
CNF 464 vars 1925 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       DP
SRS with 4 strict rules and 3 weak rules on 5 letters       EDG
SRS with 3 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 5 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a] -> [a, b, a, c] {- Input 1 -}
  [c, b, b] -> [a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, b, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a] |-> [a#, c] {- DP (Top 2) (Input 1) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [c#, b, b] |-> [a#] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, b] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [a#, c] {- DP (Top 2) (Input 1) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 15A 17A 17A - \
        | 15A 17A 17A - |
        | 15A 17A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Deepee(4/3,5)\EDG(3/3,5)\Matrix{\Arctic}{3}(1/3,5)\Weight(0/3,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E          = 12} , self = 80 , parent = Nothing , duration = 0.366699426000 , status
E          = Except "AsyncCancelled" , start = 2025-09-03 11:17:01.255069211 UTC ,
E          finish = 2025-09-03 11:17:01.621768637 UTC , thread_cap_info = ("ThreadId
E          43", 2, False)}
E          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 46 , parent = Nothing , duration = 0.134439070000 , status
| F        = Fail , start = 2025-09-03 11:17:01.27023387 UTC , finish = 2025-09-03
| F        11:17:01.40467294 UTC , thread_cap_info = ("ThreadId 68", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 47 , parent = Nothing , duration = 0.117086241000 , status
| | F      = Fail , start = 2025-09-03 11:17:01.287629081 UTC , finish = 2025-09-03
| | F      11:17:01.404715322 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| | F      
| F |      
|   F      
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| S        = 5 , total_length = 27} , self = 66 , parent = Nothing , duration = 0.137459054000
| S        , status = Success , start = 2025-09-03 11:17:01.422123665 UTC , finish
| S        = 2025-09-03 11:17:01.559582719 UTC , thread_cap_info = ("ThreadId 101",
| S        2, False)}
| S        
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | E      = 5 , total_length = 27} , self = 68 , parent = Nothing , duration = 0.174950653000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:17:01.434881498
| | E      UTC , finish = 2025-09-03 11:17:01.609832151 UTC , thread_cap_info = ("ThreadId
| | E      106", 2, False)}
| | E      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | S    = 5 , total_length = 23} , self = 69 , parent = Nothing , duration = 0.130780475000
| | | S    , status = Success , start = 2025-09-03 11:17:01.482490382 UTC , finish
| | | S    = 2025-09-03 11:17:01.613270857 UTC , thread_cap_info = ("ThreadId 107",
| | | S    2, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | E  = 5 , total_length = 23} , self = 74 , parent = Nothing , duration = 0.106591252000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:17:01.507231641
| | | | E  UTC , finish = 2025-09-03 11:17:01.613822893 UTC , thread_cap_info = ("ThreadId
| | | | E  108", 2, False)}
| | | | E  
| S | | |  
|   E | |  
|     S |  
|       E  
E          
