last 3730 length 18278
CNF 3730 vars 18278 clauses
last 3844 length 17122
CNF 3844 vars 17122 clauses
last 1124 length 4990
CNF 1124 vars 4990 clauses
last 1094 length 5328
CNF 1094 vars 5328 clauses
last 506 length 2020
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2695, clauses: 10099
CNF 506 vars 2020 clauses
last 608 length 2432
last 2695 length 10099
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6885, clauses: 28431
last 6885 length 28431
CNF 608 vars 2432 clauses
CNF 2695 vars 10099 clauses
CNF 6885 vars 28431 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2695, clauses: 10099, status: Satisfied, time: 0.061583726s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1995, clauses: 7280
last 1995 length 7280
CNF 1995 vars 7280 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5548, clauses: 22887
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1995, clauses: 7280, status: Satisfied, time: 0.053010936s
last 624 length 2538
last 582 length 2375
last 538 length 2163
last 478 length 1926
CNF 624 vars 2538 clauses
CNF 582 vars 2375 clauses
CNF 538 vars 2163 clauses
CNF 478 vars 1926 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2273, clauses: 8211
last 2273 length 8211
CNF 2273 vars 8211 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2273, clauses: 8211, status: Satisfied, time: 0.063849117s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6211, clauses: 25585
last 6211 length 25585
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1889, clauses: 6819
last 1889 length 6819
CNF 1889 vars 6819 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5502, clauses: 22711
last 5502 length 22711
CNF 6211 vars 25585 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1889, clauses: 6819, status: Satisfied, time: 0.025795216s
CNF 5502 vars 22711 clauses
last 554 length 2269
CNF 554 vars 2269 clauses
last 554 length 2281
CNF 554 vars 2281 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 6 strict rules and 5 weak rules on 5 letters       weights
SRS with 3 strict rules and 5 weak rules on 4 letters       EDG
SRS with 3 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, b, b, a, a] {- Input 1 -}
  [b] -> [c, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, b, b, a, a] {- Input 1 -}
  [b] -> [c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, b] {- Mirror (Input 1) -}
  [b] -> [a, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#] |-> [a#, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 8A 11A 11A - \
        | 8A 11A 11A - |
        | 8A 11A 11A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 8A 10A 10A - \
        | 8A 10A 10A - |
        | 8A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(6/5,5)\Weight\EDG(3/5,4)\Matrix{\Arctic}{3}\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 2
  max duration 1.002279417000
  min duration 0.352561583000
  total durat. 1.354841000000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 47
    , parent = Nothing
    , duration = 1.002279417000
    , status = Fail
    , start = 2025-09-03 11:00:27.342936491 UTC
    , finish = 2025-09-03 11:00:28.345215908 UTC
    , thread_cap_info = ("ThreadId 50", 2, False)}
**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 3 , total_length = 12} , self = 46 , parent = Nothing
F        , duration = 0.352561583000 , status = Fail , start = 2025-09-03 11:00:27.330232202
F        UTC , finish = 2025-09-03 11:00:27.682793785 UTC , thread_cap_info = ("ThreadId
F        48", 2, False)}
F        
| F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F      = 0 , alphabet_size = 3 , total_length = 12} , self = 47 , parent = Nothing
| F      , duration = 1.002279417000 , status = Fail , start = 2025-09-03 11:00:27.342936491
| F      UTC , finish = 2025-09-03 11:00:28.345215908 UTC , thread_cap_info = ("ThreadId
| F      50", 2, False)}
| F      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 162} , self = 42 , parent = Nothing , duration = 0.137959696000 , status
| | F    = Fail , start = 2025-09-03 11:00:27.342958645 UTC , finish = 2025-09-03
| | F    11:00:27.480918341 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F  = 162} , self = 37 , parent = Nothing , duration = 0.101648949000 , status
| | | F  = Fail , start = 2025-09-03 11:00:27.362509403 UTC , finish = 2025-09-03
| | | F  11:00:27.464158352 UTC , thread_cap_info = ("ThreadId 65", 0, False)}
| | | F  
| | | F  
| | F    
F |      
  F      
F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F        = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 4 , total_length
F        = 35} , self = 65 , parent = Nothing , duration = 0.111168017000 , status
F        = Fail , start = 2025-09-03 11:00:28.374402906 UTC , finish = 2025-09-03
F        11:00:28.485570923 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
F        
| S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S      = 11 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 ,
| S      alphabet_size = 5 , total_length = 52} , self = 64 , parent = Nothing ,
| S      duration = 0.104019301000 , status = Success , start = 2025-09-03 11:00:28.381506706
| S      UTC , finish = 2025-09-03 11:00:28.485526007 UTC , thread_cap_info = ("ThreadId
| S      103", 2, False)}
| S      
| S      
F        
S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S        = 5 , total_length = 37} , self = 83 , parent = Nothing , duration = 0.105518710000
S        , status = Success , start = 2025-09-03 11:00:28.580465152 UTC , finish
S        = 2025-09-03 11:00:28.685983862 UTC , thread_cap_info = ("ThreadId 128",
S        2, False)}
S        
| E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| E      = 5 , total_length = 37} , self = 87 , parent = Nothing , duration = 0.239518282000
| E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:28.582937783
| E      UTC , finish = 2025-09-03 11:00:28.822456065 UTC , thread_cap_info = ("ThreadId
| E      129", 2, False)}
| E      
| | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | S    = 4 , total_length = 31} , self = 85 , parent = Nothing , duration = 0.198986435000
| | S    , status = Success , start = 2025-09-03 11:00:28.623361274 UTC , finish
| | S    = 2025-09-03 11:00:28.822347709 UTC , thread_cap_info = ("ThreadId 131",
| | S    2, False)}
| | S    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E  = 4 , total_length = 31} , self = 90 , parent = Nothing , duration = 0.179707867000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:28.643364785
| | | E  UTC , finish = 2025-09-03 11:00:28.823072652 UTC , thread_cap_info = ("ThreadId
| | | E  132", 2, False)}
| | | E  
S | | |  
  | S |  
  E   |  
      E  
