last 707 length 2875
last 634 length 2720
last 517 length 2090
CNF 707 vars 2875 clauses
CNF 634 vars 2720 clauses
last 522 length 2018
CNF 517 vars 2090 clauses
CNF 522 vars 2018 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2583, clauses: 9413
last 2583 length 9413
last 4175 length 18633
last 3811 length 19754
CNF 3811 vars 19754 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2372, clauses: 8490
last 2372 length 8490
CNF 4175 vars 18633 clauses
CNF 2583 vars 9413 clauses
CNF 2372 vars 8490 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7137, clauses: 29513
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2583, clauses: 9413, status: Satisfied, time: 0.153725737s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6801, clauses: 28083
last 7137 length 29513
last 6801 length 28083
CNF 6801 vars 28083 clauses
CNF 7137 vars 29513 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2372, clauses: 8490, status: Satisfied, time: 0.133872199s
last 676 length 2758
last 618 length 2662
last 474 length 1832
last 508 length 2055
CNF 618 vars 2662 clauses
CNF 474 vars 1832 clauses
CNF 508 vars 2055 clauses
CNF 676 vars 2758 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8988
last 2477 length 8988
CNF 2477 vars 8988 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8065
last 2266 length 8065
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8988, status: Satisfied, time: 0.015359783s
CNF 2266 vars 8065 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6755, clauses: 27907
last 6755 length 27907
CNF 6755 vars 27907 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8065, status: Satisfied, time: 0.133362193s
last 541 length 2332
CNF 541 vars 2332 clauses
last 547 length 2231
CNF 547 vars 2231 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2160, clauses: 7706
last 2160 length 7706
CNF 2160 vars 7706 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6707, clauses: 27735
last 6707 length 27735
last 377 length 1469
last 456 length 1871
CNF 377 vars 1469 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2160, clauses: 7706, status: Satisfied, time: 0.087087525s
CNF 456 vars 1871 clauses
CNF 6707 vars 27735 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6540
last 1856 length 6540
CNF 1856 vars 6540 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6334, clauses: 26245
last 6334 length 26245
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 6 strict rules and 5 weak rules on 6 letters       weights
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       EDG
SRS with 2 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b, a, c, b] {- Input 0 -}
  [b, b] -> [a, a] {- Input 1 -}
  [c, a] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [b, c, a, b] {- Mirror (Input 0) -}
  [b, b] -> [a, a] {- Mirror (Input 1) -}
  [a, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [b, c, a, b] {- Mirror (Input 0) -}
  [b, b] -> [a, a] {- Mirror (Input 1) -}
  [a, a, c] -> [a] {- Mirror (Input 2) -}
  [b, a, c] -> [b] {- Mirror (Input 2) -}
  [c, a, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [b, a, c, b] {- Input 0 -}
  [b, b] -> [a, a] {- Input 1 -}
  [c, a, a] -> [a] {- Input 2 -}
  [c, a, b] -> [b] {- Input 2 -}
  [c, a, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, c, b] {- DP (Top 1) (Input 0) -}
  [a#, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [a#, a] |-> [c#, b] {- DP (Top 2) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, c, b] {- DP (Top 1) (Input 0) -}
  [a#, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, c, b] {- DP (Top 1) (Input 0) -}
  [a#, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 1) (Input 1) -}
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 4A 7A 7A - \
        | 4A 7A 7A - |
        | 4A 7A 7A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 5A 7A - \
        | 4A 5A 7A - |
        | 4A 5A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, c, b] {- DP (Top 1) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 1) (Input 1) -}
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, c, b] {- DP (Top 1) (Input 0) -}
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 1A 4A 4A - \
        | 1A 4A 4A - |
        | 1A 4A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [b#, b] |-> [a#, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( CNF 6334 vars 26245 clauses
a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6540, status: Unsatisfied, time: 0.052591449s

  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 13A 16A 16A - \
        | 13A 16A 16A - |
        | 13A 16A 16A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 16A 16A 17A - \
        | 16A 16A 17A - |
        | 16A 16A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a, c, b] {- DP (Top 0) (Input 0) -}
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, a, c, b] {- DP Nontop (Input 0) -}
  [b, b] ->= [a, a] {- DP Nontop (Input 1) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(6/5,6)\Weight\EDG(5/5,5)\Matrix{\Arctic}{3}\EDG(4/5,5)\Matrix{\Arctic}{3}\EDG(2/5,5)\Matrix{\Arctic}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F              = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
F              = 25 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F              = 154} , self = 67 , parent = Nothing , duration = 0.129710902000 , status
F              = Fail , start = 2025-09-03 11:46:43.862718279 UTC , finish = 2025-09-03
F              11:46:43.992429181 UTC , thread_cap_info = ("ThreadId 72", 1, False)}
F              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 25 , num_strict_rules
| F            = 25 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 154} , self = 63 , parent = Nothing , duration = 0.122417278000 , status
| F            = Fail , start = 2025-09-03 11:46:43.862725492 UTC , finish = 2025-09-03
| F            11:46:43.98514277 UTC , thread_cap_info = ("ThreadId 74", 1, False)}
| F            
| | F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F          = 12} , self = 66 , parent = Nothing , duration = 0.125790585000 , status
| | F          = Fail , start = 2025-09-03 11:46:43.8639801 UTC , finish = 2025-09-03
| | F          11:46:43.989770685 UTC , thread_cap_info = ("ThreadId 52", 2, False)}
| | F          
| | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S        = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | S        alphabet_size = 5 , total_length = 43} , self = 68 , parent = Nothing ,
| | | S        duration = 0.188039169000 , status = Success , start = 2025-09-03 11:46:43.90649271
| | | S        UTC , finish = 2025-09-03 11:46:44.094531879 UTC , thread_cap_info = ("ThreadId
| | | S        98", 3, False)}
| | | S        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | E      , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | | E      = 5 , total_length = 43} , self = 72 , parent = Nothing , duration = 0.185452208000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:46:43.93378115
| | | | E      UTC , finish = 2025-09-03 11:46:44.119233358 UTC , thread_cap_info = ("ThreadId
| | | | E      99", 3, False)}
| | | | E      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | S    = 5 , total_length = 36} , self = 70 , parent = Nothing , duration = 0.185218716000
| | | | | S    , status = Success , start = 2025-09-03 11:46:43.933815194 UTC , finish
| | | | | S    = 2025-09-03 11:46:44.11903391 UTC , thread_cap_info = ("ThreadId 100",
| | | | | S    3, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | E  = 5 , total_length = 36} , self = 74 , parent = Nothing , duration = 0.147269550000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:46:43.973043768
| | | | | | E  UTC , finish = 2025-09-03 11:46:44.120313318 UTC , thread_cap_info = ("ThreadId
| | | | | | E  102", 3, False)}
| | | | | | E  
| F | | | | |  
|   F | | | |  
F     | | | |  
      S | | |  
        | S |  
        E   |  
            E  
S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S              = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
S              = 5 , total_length = 40} , self = 86 , parent = Nothing , duration = 0.114876287000
S              , status = Success , start = 2025-09-03 11:46:44.150275815 UTC , finish
S              = 2025-09-03 11:46:44.265152102 UTC , thread_cap_info = ("ThreadId 130",
S              3, False)}
S              
| S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S            = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| S            = 5 , total_length = 33} , self = 91 , parent = Nothing , duration = 0.152908800000
| S            , status = Success , start = 2025-09-03 11:46:44.171388429 UTC , finish
| S            = 2025-09-03 11:46:44.324297229 UTC , thread_cap_info = ("ThreadId 132",
| S            3, False)}
| S            
| | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E          , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | E          = 5 , total_length = 33} , self = 95 , parent = Nothing , duration = 0.141238354000
| | E          , status = Except "AsyncCancelled" , start = 2025-09-03 11:46:44.187827619
| | E          UTC , finish = 2025-09-03 11:46:44.329065973 UTC , thread_cap_info = ("ThreadId
| | E          133", 3, False)}
| | E          
| | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | E        , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | E        = 5 , total_length = 40} , self = 88 , parent = Nothing , duration = 0.113243358000
| | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 11:46:44.193256383
| | | E        UTC , finish = 2025-09-03 11:46:44.306499741 UTC , thread_cap_info = ("ThreadId
| | | E        135", 3, False)}
| | | E        
S | | |        
  | | E        
  S |          
    E          
S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S              = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S              = 5 , total_length = 32} , self = 102 , parent = Nothing , duration = 0.113492409000
S              , status = Success , start = 2025-09-03 11:46:44.333651324 UTC , finish
S              = 2025-09-03 11:46:44.447143733 UTC , thread_cap_info = ("ThreadId 146",
S              3, False)}
S              
| E            Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E            = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E            , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| E            = 5 , total_length = 32} , self = 106 , parent = Nothing , duration = 0.124653311000
| E            , status = Except "AsyncCancelled" , start = 2025-09-03 11:46:44.351226541
| E            UTC , finish = 2025-09-03 11:46:44.475879852 UTC , thread_cap_info = ("ThreadId
| E            149", 3, False)}
| E            
S |            
  E            
