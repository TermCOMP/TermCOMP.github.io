last 3462 length 15199
CNF 3462 vars 15199 clauses
last 3400 length 14789
CNF 3400 vars 14789 clauses
last 794 length 3341
CNF 794 vars 3341 clauses
last 922 length 3963
CNF 922 vars 3963 clauses
last 1035 length 4375
last 820 length 3469
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2026, clauses: 7402
CNF 1035 vars 4375 clauses
last 2026 length 7402
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7943, clauses: 33403
CNF 820 vars 3469 clauses
CNF 2026 vars 7402 clauses
last 7943 length 33403
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1912, clauses: 7006
last 1912 length 7006
CNF 1912 vars 7006 clauses
CNF 7943 vars 33403 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2026, clauses: 7402, status: Satisfied, time: 0.046170269s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1912, clauses: 7006, status: Unsatisfied, time: 0.130994573s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7357, clauses: 30929
last 7357 length 30929
CNF 7357 vars 30929 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4428, clauses: 18686
last 4428 length 18686
CNF 4428 vars 18686 clauses
last 888 length 3670
CNF 888 vars 3670 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4428, clauses: 18686, status: Satisfied, time: 0.035349708s
last 780 length 3261
CNF 780 vars 3261 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2029, clauses: 7381
last 2029 length 7381
CNF 2029 vars 7381 clauses
last 774 length 3246
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2029, clauses: 7381, status: Satisfied, time: 0.044578105s
last 775 length 3212
CNF 774 vars 3246 clauses
CNF 775 vars 3212 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7943, clauses: 33403
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1921, clauses: 6982
last 1921 length 6982
CNF 1921 vars 6982 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1921, clauses: 6982, status: Unsatisfied, time: 0.120316153s
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 8 strict rules and 3 weak rules on 4 letters       weights
SRS with 2 strict rules and 3 weak rules on 4 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

  2 SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b] -> [a, a, b, b] {- Input 0 -}
  [b, b, b, b] -> [b, b, b, a] {- Input 1 -}
  [a, a, a, a] -> [b, a, b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, a] -> [b, b, a, a] {- Mirror (Input 0) -}
  [b, b, b, b] -> [a, b, b, b] {- Mirror (Input 1) -}
  [a, a, a, a] -> [a, b, a, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [a#, b, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [b#, a, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [a#, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, a, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, b, b] |-> [a#, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [a#, b, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [b#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [a#, b, a, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 2A 3A 4A - \
        | 2A 3A 4A - |
        | 2A 3A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, a, b, a] |-> [b#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 3A 4A 4A - \
        | 3A 4A 4A - |
        | 3A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, b, b] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(8/3,4)\Weight(2/3,4)\EDG[(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[],(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4263, clauses: 17989
last 4263 length 17989


**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F          = 24} , self = 48 , parent = Nothing , duration = 0.229028982000 , status
F          = Fail , start = 2025-09-03 12:02:45.772505653 UTC , finish = 2025-09-03
F          12:02:46.001534635 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F        = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F        = 120} , self = 45 , parent = Nothing , duration = 0.119530938000 , status
| F        = Fail , start = 2025-09-03 12:02:45.779117237 UTC , finish = 2025-09-03
| F        12:02:45.898648175 UTC , thread_cap_info = ("ThreadId 52", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F      = 120} , self = 46 , parent = Nothing , duration = 0.120306740000 , status
| | F      = Fail , start = 2025-09-03 12:02:45.779121882 UTC , finish = 2025-09-03
| | F      12:02:45.899428622 UTC , thread_cap_info = ("ThreadId 54", 0, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 2 , total_length = 24} , self = 49 , parent = Nothing
| | | F    , duration = 0.175225284000 , status = Fail , start = 2025-09-03 12:02:45.867631049
| | | F    UTC , finish = 2025-09-03 12:02:46.042856333 UTC , thread_cap_info = ("ThreadId
| | | F    76", 3, False)}
| | | F    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | F  = 0 , alphabet_size = 2 , total_length = 24} , self = 50 , parent = Nothing
| | | | F  , duration = 0.321470150000 , status = Fail , start = 2025-09-03 12:02:45.894702596
| | | | F  UTC , finish = 2025-09-03 12:02:46.216172746 UTC , thread_cap_info = ("ThreadId
| | | | F  83", 3, False)}
| | | | F  
| F | | |  
|   F | |  
F     | |  
      F |  
        F  
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F          = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F          = 32} , self = 67 , parent = Nothing , duration = 0.148514046000 , status
F          = Fail , start = 2025-09-03 12:02:46.246875944 UTC , finish = 2025-09-03
F          12:02:46.39538999 UTC , thread_cap_info = ("ThreadId 102", 1, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| F        = 32} , self = 66 , parent = Nothing , duration = 0.130286456000 , status
| F        = Fail , start = 2025-09-03 12:02:46.246880452 UTC , finish = 2025-09-03
| F        12:02:46.377166908 UTC , thread_cap_info = ("ThreadId 103", 1, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | S      = 3 , total_length = 32} , self = 68 , parent = Nothing , duration = 0.257813250000
| | S      , status = Success , start = 2025-09-03 12:02:46.298683204 UTC , finish
| | S      = 2025-09-03 12:02:46.556496454 UTC , thread_cap_info = ("ThreadId 105",
| | S      1, False)}
| | S      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | E    = 3 , total_length = 32} , self = 71 , parent = Nothing , duration = 0.257017402000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 12:02:46.31336274
| | | E    UTC , finish = 2025-09-03 12:02:46.570380142 UTC , thread_cap_info = ("ThreadId
| | | E    106", 1, False)}
| | | E    
| F | |    
| F | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | |    = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| F | |    = 3 , total_length = 32} , self = 70 , parent = Nothing , duration = 0.180387586000
| F | |    , status = Fail , start = 2025-09-03 12:02:46.378518449 UTC , finish =
| F | |    2025-09-03 12:02:46.558906035 UTC , thread_cap_info = ("ThreadId 109",
| F | |    1, False)}
| F | |    
F | | |    
E | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E | | |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
E | | |    = 3 , total_length = 32} , self = 79 , parent = Nothing , duration = 0.263281315000
E | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 12:02:46.396625962
E | | |    UTC , finish = 2025-09-03 12:02:46.659907277 UTC , thread_cap_info = ("ThreadId
E | | |    112", 1, False)}
E | | |    
| | S |    
| F   |    
|     E    
E          
F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F          = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
F          = 3 , total_length = 32} , self = 92 , parent = Nothing , duration = 0.135529236000
F          , status = Fail , start = 2025-09-03 12:02:46.763712971 UTC , finish =
F          2025-09-03 12:02:46.899242207 UTC , thread_cap_info = ("ThreadId 137",
F          1, False)}
F          
F          
