last 2802 length 14679
CNF 2802 vars 14679 clauses
last 3047 length 19525
last 898 length 4057
CNF 3047 vars 19525 clauses
last 791 length 3181
CNF 898 vars 4057 clauses
last 681 length 2745
last 707 length 2834
CNF 791 vars 3181 clauses
CNF 681 vars 2745 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2535, clauses: 9314
CNF 707 vars 2834 clauses
last 2535 length 9314
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7978, clauses: 33205
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2183, clauses: 7830
CNF 2535 vars 9314 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7046, clauses: 29281
last 7978 length 33205
last 2183 length 7830
last 7046 length 29281
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2535, clauses: 9314, status: Satisfied, time: 0.466612761s
CNF 7978 vars 33205 clauses
CNF 2183 vars 7830 clauses
CNF 7046 vars 29281 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2183, clauses: 7830, status: Satisfied, time: 0.490199403s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7046, clauses: 29281, status: Satisfied, time: 0.35839084s
last 730 length 2966
CNF 730 vars 2966 clauses
last 887 length 4043
**************************************************
CNF 887 vars 4043 clauses
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 6 strict rules and 7 weak rules on 6 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, b, c, a, a, a] {- Input 1 -}
  [a, c] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, b, c, a, a, a] {- Input 1 -}
  [a, a, c] -> [a] {- Input 2 -}
  [b, a, c] -> [b] {- Input 2 -}
  [c, a, c] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, a, c, b, b] {- Mirror (Input 1) -}
  [c, a, a] -> [a] {- Mirror (Input 2) -}
  [c, a, b] -> [b] {- Mirror (Input 2) -}
  [c, a, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, a, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, c, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, c, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a, a] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, a, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, a, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / -  2A 0A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / 0A -   -   \
        | 0A -1A -1A |
        \ -  -   0A  / )
  ( c
  , Wk  / 0A  - -1A \
        | -2A - -   |
        \ -   - 0A  / )
  ( b#
  , Wk  / 0A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [c, a, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(7,3)\Deepee(6/7,6)\Weight\EDG(2/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.489181157000
  min duration 0.141757168000
  total durat. 1.000511070000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.000588670000
  min duration 0.789934814000
  total durat. 1.790523484000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 45}
    , self = 67
    , parent = Nothing
    , duration = 1.000588670000
    , status = Success
    , start = 2025-09-03 10:59:14.241850498 UTC
    , finish = 2025-09-03 10:59:15.242439168 UTC
    , thread_cap_info = ("ThreadId 105", 1, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 1
  max duration 1.725829551000
  min duration 1.725829551000
  total durat. 1.725829551000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 80
    , parent = Nothing
    , duration = 1.725829551000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:59:13.756146687 UTC
    , finish = 2025-09-03 10:59:15.481976238 UTC
    , thread_cap_info = ("ThreadId 22", 0, False)}
**************************************************
E            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E            = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E            = 12} , self = 80 , parent = Nothing , duration = 1.725829551000 , status
E            = Except "AsyncCancelled" , start = 2025-09-03 10:59:13.756146687 UTC ,
E            finish = 2025-09-03 10:59:15.481976238 UTC , thread_cap_info = ("ThreadId
E            22", 0, False)}
E            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 3 , total_length = 12} , self = 37 , parent = Nothing
| F          , duration = 0.163554652000 , status = Fail , start = 2025-09-03 10:59:13.756290325
| F          UTC , finish = 2025-09-03 10:59:13.919844977 UTC , thread_cap_info = ("ThreadId
| F          41", 1, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 3 , total_length = 12} , self = 41 , parent = Nothing
| | F        , duration = 0.255461195000 , status = Fail , start = 2025-09-03 10:59:13.76253896
| | F        UTC , finish = 2025-09-03 10:59:14.018000155 UTC , thread_cap_info = ("ThreadId
| | F        43", 1, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F      = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 93} , self = 39 , parent = Nothing , duration = 0.141757168000 , status
| | | F      = Fail , start = 2025-09-03 10:59:13.862034208 UTC , finish = 2025-09-03
| | | F      10:59:14.003791376 UTC , thread_cap_info = ("ThreadId 67", 3, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | F    = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F    = 93} , self = 60 , parent = Nothing , duration = 0.220663315000 , status
| | | | F    = Fail , start = 2025-09-03 10:59:13.889743911 UTC , finish = 2025-09-03
| | | | F    10:59:14.110407226 UTC , thread_cap_info = ("ThreadId 69", 3, False)}
| | | | F    
| F | | |    
|   | F |    
|   F   |    
| F     |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F     |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F     |    = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F     |    = 45} , self = 64 , parent = Nothing , duration = 0.369572745000 , status
| F     |    = Fail , start = 2025-09-03 10:59:14.018440133 UTC , finish = 2025-09-03
| F     |    10:59:14.388012878 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| F     |    
| | F   |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F   |    = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F   |    = 45} , self = 63 , parent = Nothing , duration = 0.200010598000 , status
| | F   |    = Fail , start = 2025-09-03 10:59:14.021820516 UTC , finish = 2025-09-03
| | F   |    10:59:14.221831114 UTC , thread_cap_info = ("ThreadId 93", 1, False)}
| | F   |    
| | | F |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F |    = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | F |    = 39} , self = 65 , parent = Nothing , duration = 0.489181157000 , status
| | | F |    = Fail , start = 2025-09-03 10:59:14.034453004 UTC , finish = 2025-09-03
| | | F |    10:59:14.523634161 UTC , thread_cap_info = ("ThreadId 96", 1, False)}
| | | F |    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | F  = 39} , self = 66 , parent = Nothing , duration = 0.522593754000 , status
| | | | | F  = Fail , start = 2025-09-03 10:59:14.039749257 UTC , finish = 2025-09-03
| | | | | F  10:59:14.562343011 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | | | | F  
| | | | F |  
| | F |   |  
| | S |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |   |  = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| | S |   |  alphabet_size = 4 , total_length = 45} , self = 67 , parent = Nothing ,
| | S |   |  duration = 1.000588670000 , status = Success , start = 2025-09-03 10:59:14.241850498
| | S |   |  UTC , finish = 2025-09-03 10:59:15.242439168 UTC , thread_cap_info = ("ThreadId
| | S |   |  105", 1, False)}
| | S |   |  
| F | |   |  
| E | |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E | |   |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| E | |   |  = 4 , total_length = 45} , self = 69 , parent = Nothing , duration = 0.930356510000
| E | |   |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:14.401846284
| E | |   |  UTC , finish = 2025-09-03 10:59:15.332202794 UTC , thread_cap_info = ("ThreadId
| E | |   |  108", 1, False)}
| E | |   |  
| | | F   |  
| | | S   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S   |  = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | S   |  = 4 , total_length = 39} , self = 70 , parent = Nothing , duration = 0.789934814000
| | | S   |  , status = Success , start = 2025-09-03 10:59:14.542730514 UTC , finish
| | | S   |  = 2025-09-03 10:59:15.332665328 UTC , thread_cap_info = ("ThreadId 109",
| | | S   |  1, False)}
| | | S   |  
| | | |   F  
| | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | S    = 4 , total_length = 39} , self = 73 , parent = Nothing , duration = 0.764383879000
| | | | S    , status = Success , start = 2025-09-03 10:59:14.581978787 UTC , finish
| | | | S    = 2025-09-03 10:59:15.346362666 UTC , thread_cap_info = ("ThreadId 110",
| | | | S    1, False)}
| | | | S    
| | S | |    
| E   | |    
|     S |    
|       S    
E            
