last 1192 length 5156
CNF 1192 vars 5156 clauses
last 1523 length 6493
CNF 1523 vars 6493 clauses
last 1282 length 5471
last 1923 length 8237
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1957, clauses: 7228
last 1957 length 7228
CNF 1282 vars 5471 clauses
CNF 1923 vars 8237 clauses
CNF 1957 vars 7228 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3133, clauses: 11971
last 3133 length 11971
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1957, clauses: 7228, status: Satisfied, time: 0.061638832s
CNF 3133 vars 11971 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3133, clauses: 11971, status: Unsatisfied, time: 0.123416574s
last 1222 length 5286
CNF 1222 vars 5286 clauses
last 1520 length 6460
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10498, clauses: 44111
CNF 1520 vars 6460 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2398, clauses: 9070
last 10498 length 44111
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6442, clauses: 26807
last 2398 length 9070
last 1436 length 6641
CNF 10498 vars 44111 clauses
last 6442 length 26807
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8908, clauses: 37455
last 1722 length 7804
last 7182 length 32865
last 5470 length 25064
CNF 2398 vars 9070 clauses
last 7959 length 35920
CNF 1436 vars 6641 clauses
last 8908 length 37455
last 10791 length 50804
CNF 1722 vars 7804 clauses
CNF 6442 vars 26807 clauses
CNF 7182 vars 32865 clauses
CNF 5470 vars 25064 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2398, clauses: 9070, status: Satisfied, time: 0.448121866s
**************************************************CNF 8908 vars 37455 clauses
CNF 7959 vars 35920 clauses
CNF 10791 vars 50804 clauses

summary
**************************************************
SRS with 4 rules on 2 letters       mirror
SRS with 4 rules on 2 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 170 epsilon transitions
SRS with 3 rules on 2 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 1 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 8 strict rules and 4 weak rules on 4 letters       weights
  SRS with 0 strict rules and 4 weak rules on 3 letters       no strict rules

  2 SRS with 1 rules on 2 letters       split
  2 sub-proofs
    1 SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 4 rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, a] -> [a, a, b, a] {- Input 0 -}
  [b, a, a, b] -> [b, b, b, b] {- Input 1 -}
  [b, a, a, b] -> [a, a, a, b] {- Input 2 -}
  [a, b, b, a] -> [b, a, a, b] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Mirror (Input 0) -}
  [b, a, a, b] -> [b, b, b, b] {- Mirror (Input 1) -}
  [b, a, a, b] -> [b, a, a, a] {- Mirror (Input 2) -}
  [a, b, b, a] -> [b, a, a, b] {- Mirror (Input 3) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, 2), (2, 2), (3, -1)], epsilons = [((0, 2, 0), (1, 1, 0)), ((0, 2, 0), (2, 1, 0)), ((0, 2, 0), (1, 2, 0)), ((0, 2, 0), (2, 2, 0)), ((1, 2, 0), (1, 1, 0)), ((1, 2, 0), (2, 1, 0)), ((1, 2, 0), (1, 2, 0)), ((1, 2, 0), (2, 2, 0)), ((2, 2, 0), (2, 1, 0)), ((2, 2, 0), (2, 2, 0)), ((0, 3, 0), (1, 1, 0)), ((0, 3, 0), (2, 1, 0)), ((0, 3, 0), (1, 2, 0)), ((0, 3, 0), (2, 2, 0)), ((0, 0, 1), (0, 1, 0)), ((0, 0, 1), (1, 1, 0)), ((0, 0, 1), (2, 1, 0)), ((0, 0, 1), (0, 2, 0)), ((0, 0, 1), (1, 2, 0)), ((0, 0, 1), (2, 2, 0)), ((1, 0, 1), (1, 1, 0)), ((1, 0, 1), (2, 1, 0)), ((1, 0, 1), (1, 2, 0)), ((1, 0, 1), (2, 2, 0)), ((2, 0, 1), (2, 1, 0)), ((2, 0, 1), (2, 2, 0)), ((0, 2, 1), (1, 0, 0)), ((1, 2, 1), (1, 0, 0)), ((1, 2, 1), (2, 0, 0)), ((2, 2, 1), (2, 0, 0)), ((0, 3, 1), (0, 0, 0)), ((0, 3, 1), (1, 0, 0)), ((0, 0, 2), (0, 0, 0)), ((0, 0, 2), (1, 0, 0)), ((1, 0, 2), (1, 0, 0)), ((1, 0, 2), (2, 0, 0)), ((2, 0, 2), (2, 0, 0)), ((0, 2, 2), (0, 0, 0)), ((0, 2, 2), (1, 0, 0)), ((1, 2, 2), (0, 0, 0)), ((1, 2, 2), (1, 0, 0)), ((1, 2, 2), (2, 0, 0)), ((2, 2, 2), (2, 0, 0)), ((0, 3, 2), (1, 1, 0)), ((0, 3, 2), (2, 1, 0)), ((0, 3, 2), (1, 2, 0)), ((0, 3, 2), (2, 2, 0)), ((0, 3, 2), (0, 3, 0)), ((0, 0, 3), (0, 0, 0)), ((0, 0, 3), (1, 1, 0)), ((0, 0, 3), (2, 1, 0)), ((0, 0, 3), (1, 2, 0)), ((0, 0, 3), (2, 2, 0)), ((0, 0, 3), (0, 3, 0)), ((1, 0, 3), (0, 0, 0)), ((1, 0, 3), (1, 0, 0)), ((1, 0, 3), (2, 0, 0)), ((2, 0, 3), (1, 0, 0)), ((2, 0, 3), (2, 0, 0)), ((0, 1, 3), (0, 1, 0)), ((0, 1, 3), (1, 1, 0)), ((0, 1, 3), (2, 1, 0)), ((0, 1, 3), (0, 2, 0)), ((0, 1, 3), (1, 2, 0)), ((0, 1, 3), (2, 2, 0)), ((1, 1, 3), (0, 1, 0)), ((1, 1, 3), (1, 1, 0)), ((1, 1, 3), (2, 1, 0)), ((1, 1, 3), (0, 2, 0)), ((1, 1, 3), (1, 2, 0)), ((1, 1, 3), (2, 2, 0)), ((2, 1, 3), (1, 1, 0)), ((2, 1, 3), (2, 1, 0)), ((2, 1, 3), (1, 2, 0)), ((2, 1, 3), (2, 2, 0)), ((0, 2, 3), (0, 0, 0)), ((0, 2, 3), (1, 1, 0)), ((0, 2, 3), (2, 1, 0)), ((0, 2, 3), (1, 2, 0)), ((0, 2, 3), (2, 2, 0)), ((0, 2, 3), (0, 3, 0)), ((1, 2, 3), (0, 0, 0)), ((1, 2, 3), (1, 0, 0)), ((1, 2, 3), (2, 0, 0)), ((1, 2, 3), (1, 1, 0)), ((1, 2, 3), (2, 1, 0)), ((1, 2, 3), (1, 2, 0)), ((1, 2, 3), (2, 2, 0)), ((1, 2, 3), (0, 3, 0)), ((2, 2, 3), (2, 0, 0)), ((0, 3, 3), (0, 1, 0)), ((0, 3, 3), (1, 1, 0)), ((0, 3, 3), (2, 1, 0)), ((0, 3, 3), (0, 2, 0)), ((0, 3, 3), (1, 2, 0)), ((0, 3, 3), (2, 2, 0)), ((1, 0, 4), (0, 0, 0)), ((1, 0, 4), (1, 0, 0)), ((1, 0, 4), (2, 0, 0)), ((1, 0, 4), (0, 1, 0)), ((1, 0, 4), (1, 1, 0)), ((1, 0, 4), (2, 1, 0)), ((1, 0, 4), (0, 2, 0)), ((1, 0, 4), (1, 2, 0)), ((1, 0, 4), (2, 2, 0)), ((1, 0, 4), (0, 3, 0)), ((1, 0, 4), (0, 0, 1)), ((1, 0, 4), (1, 0, 1)), ((1, 0, 4), (2, 0, 1)), ((1, 0, 4), (0, 2, 2)), ((1, 0, 4), (1, 2, 2)), ((1, 0, 4), (2, 2, 2)), ((1, 0, 4), (0, 3, 2)), ((1, 0, 4), (0, 0, 3)), ((1, 0, 4), (1, 0, 3)), ((2, 0, 4), (0, 0, 0)), ((2, 0, 4), (1, 0, 0)), ((2, 0, 4), (2, 0, 0)), ((2, 0, 4), (1, 1, 0)), ((2, 0, 4), (2, 1, 0)), ((2, 0, 4), (1, 2, 0)), ((2, 0, 4), (2, 2, 0)), ((2, 0, 4), (1, 0, 1)), ((2, 0, 4), (2, 0, 1)), ((2, 0, 4), (1, 2, 2)), ((2, 0, 4), (2, 2, 2)), ((2, 0, 4), (1, 0, 3)), ((2, 0, 4), (2, 0, 3)), ((1, 1, 4), (0, 0, 0)), ((1, 1, 4), (1, 0, 0)), ((1, 1, 4), (2, 0, 0)), ((1, 1, 4), (0, 1, 1)), ((1, 1, 4), (1, 1, 1)), ((1, 1, 4), (2, 1, 1)), ((1, 1, 4), (0, 2, 1)), ((1, 1, 4), (1, 2, 1)), ((1, 1, 4), (2, 2, 1)), ((1, 1, 4), (0, 3, 1)), ((1, 1, 4), (0, 0, 2)), ((1, 1, 4), (1, 0, 2)), ((1, 1, 4), (0, 3, 4)), ((2, 1, 4), (1, 0, 0)), ((2, 1, 4), (2, 0, 0)), ((2, 1, 4), (1, 1, 1)), ((2, 1, 4), (2, 1, 1)), ((2, 1, 4), (1, 2, 1)), ((2, 1, 4), (2, 2, 1)), ((2, 1, 4), (1, 0, 2)), ((2, 1, 4), (2, 0, 2)), ((1, 2, 4), (0, 0, 0)), ((1, 2, 4), (1, 0, 0)), ((1, 2, 4), (2, 0, 0)), ((1, 2, 4), (0, 1, 1)), ((1, 2, 4), (1, 1, 1)), ((1, 2, 4), (2, 1, 1)), ((1, 2, 4), (0, 2, 1)), ((1, 2, 4), (1, 2, 1)), ((1, 2, 4), (2, 2, 1)), ((1, 2, 4), (0, 3, 1)), ((1, 2, 4), (0, 0, 2)), ((1, 2, 4), (1, 0, 2)), ((1, 2, 4), (0, 3, 4)), ((2, 2, 4), (1, 0, 0)), ((2, 2, 4), (2, 0, 0)), ((2, 2, 4), (1, 1, 1)), ((2, 2, 4), (2, 1, 1)), ((2, 2, 4), (1, 2, 1)), ((2, 2, 4), (2, 2, 1)), ((2, 2, 4), (1, 0, 2)), ((2, 2, 4), (2, 0, 2))]}
   property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Mirror (Input 0) -}
  [b, a, a, b] -> [b, b, b, b] {- Mirror (Input 1) -}
  [b, a, a, b] -> [b, a, a, a] {- Mirror (Input 2) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, a] {- Mirror (Input 0) -}
  [b, a, a, b] -> [b, b, b, b] {- Mirror (Input 1) -}
  [b, a, a, b] -> [b, a, a, a] {- Mirror (Input 2) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Mirror (Input 0))) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Mirror (Input 0))) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Mirror (Input 1))) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Mirror (Input 1))) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Mirror (Input 1))) -}
  [[b, b], [b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Mirror (Input 1))) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Mirror (Input 2))) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Mirror (Input 2))) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Mirror (Input 2))) -}
  [[b, b], [b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Mirror (Input 2))) -}
reason
  ([a, a], 0/1)
  ([a, b], 2/1)
  ([b, a], 2/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Mirror (Input 0))) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Mirror (Input 0))) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Mirror (Input 0) -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Mirror (Input 0) -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Mirror (Input 0))) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Mirror (Input 0))) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Mirror (Input 0))) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: \Mirror(4,2)\RelRFCmb{2}(3,2)\Split[(2/1,2)\TileAllAll{2}(8/4,4)\Weight(0/4,3)[],(1,2)\Split[(1,2)\TileAllAll{2}(4,3)\Matrix{\Natural}{2}(0,0)[],(0,0)[]]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8908, clauses: 37455, status: Satisfied, time: 0.233507041s


**************************************************
F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                = 32} , self = 63 , parent = Nothing , duration = 0.381087592000 , status
F                = Fail , start = 2025-09-03 12:02:44.290150173 UTC , finish = 2025-09-03
F                12:02:44.671237765 UTC , thread_cap_info = ("ThreadId 35", 3, False)}
F                
| F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F              = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F              = 32} , self = 61 , parent = Nothing , duration = 0.345492098000 , status
| F              = Fail , start = 2025-09-03 12:02:44.297577944 UTC , finish = 2025-09-03
| F              12:02:44.643070042 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
| F              
| | F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | F            = 32} , self = 46 , parent = Nothing , duration = 0.148484555000 , status
| | F            = Fail , start = 2025-09-03 12:02:44.297816708 UTC , finish = 2025-09-03
| | F            12:02:44.446301263 UTC , thread_cap_info = ("ThreadId 46", 0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | F          = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 3 , total_length
| | | F          = 40} , self = 53 , parent = Nothing , duration = 0.180049709000 , status
| | | F          = Fail , start = 2025-09-03 12:02:44.353710088 UTC , finish = 2025-09-03
| | | F          12:02:44.533759797 UTC , thread_cap_info = ("ThreadId 68", 2, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F        = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F        = 64} , self = 51 , parent = Nothing , duration = 0.139171100000 , status
| | | | F        = Fail , start = 2025-09-03 12:02:44.376061686 UTC , finish = 2025-09-03
| | | | F        12:02:44.515232786 UTC , thread_cap_info = ("ThreadId 75", 2, False)}
| | | | F        
| | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F      = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
| | | | | F      = 0 , alphabet_size = 4 , total_length = 160} , self = 73 , parent = Nothing
| | | | | F      , duration = 0.324457680000 , status = Fail , start = 2025-09-03 12:02:44.433121995
| | | | | F      UTC , finish = 2025-09-03 12:02:44.757579675 UTC , thread_cap_info = ("ThreadId
| | | | | F      84", 1, False)}
| | | | | F      
| | F | | |      
| | E | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | E | | |      = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | E | | |      = 160} , self = 67 , parent = Nothing , duration = 0.266147664000 , status
| | E | | |      = Except "AsyncCancelled" , start = 2025-09-03 12:02:44.446348999 UTC ,
| | E | | |      finish = 2025-09-03 12:02:44.712496663 UTC , thread_cap_info = ("ThreadId
| | E | | |      88", 0, False)}
| | E | | |      
| | | | | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | E    = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | E    = 160} , self = 68 , parent = Nothing , duration = 0.286770447000 , status
| | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:02:44.446356868 UTC ,
| | | | | | E    finish = 2025-09-03 12:02:44.733127315 UTC , thread_cap_info = ("ThreadId
| | | | | | E    90", 0, False)}
| | | | | | E    
| | | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | F  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | | | F  = 4 , total_length = 64} , self = 65 , parent = Nothing , duration = 0.196943331000
| | | | | | | F  , status = Fail , start = 2025-09-03 12:02:44.478884484 UTC , finish =
| | | | | | | F  2025-09-03 12:02:44.675827815 UTC , thread_cap_info = ("ThreadId 102",
| | | | | | | F  2, False)}
| | | | | | | F  
| | | | F | | |  
| | | F   | | |  
| F |     | | |  
F   |     | | |  
    |     | | F  
F   |     | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   |     | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   |     | |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F   |     | |    = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
F   |     | |    = 48} , self = 98 , parent = Nothing , duration = 0.225400337000 , status
F   |     | |    = Fail , start = 2025-09-03 12:02:44.712245022 UTC , finish = 2025-09-03
F   |     | |    12:02:44.937645359 UTC , thread_cap_info = ("ThreadId 115", 2, False)}
F   |     | |    
|   E     | |    
|         | E    
|         F      
F                
S                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
S                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
S                = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
S                = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S                = 40} , self = 112 , parent = Nothing , duration = 0.544004075000 , status
S                = Success , start = 2025-09-03 12:02:44.973152413 UTC , finish = 2025-09-03
S                12:02:45.517156488 UTC , thread_cap_info = ("ThreadId 155", 0, False)}
S                
| E              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E              = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| E              = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E              = 40} , self = 114 , parent = Nothing , duration = 0.467566240000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-03 12:02:45.049775534 UTC ,
| E              finish = 2025-09-03 12:02:45.517341774 UTC , thread_cap_info = ("ThreadId
| E              158", 0, False)}
| E              
S |              
  E              
