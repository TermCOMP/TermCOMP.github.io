last 4530 length 30365
CNF 4530 vars 30365 clauses
last 6931 length 47311
CNF 6931 vars 47311 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 3 letters       Drop
SRS with 1 rules on 3 letters       mirror
SRS with 1 rules on 3 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 71 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, c, a, b, a, b, a, b] -> [ a , b , a , b , a , b , a , b , a , c , a , b , a , c ] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [a, c, a, b, a, b, a, b] -> [ a , b , a , b , a , b , a , c , a , b , a , c ] {- Dropped 2 0 (Input 0) -}
    reason
      mirror
       property Termination
    has value Just True
    for SRS
      [b, a, b, a, b, a, c, a] -> [ c , a , b , a , c , a , b , a , b , a , b , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 71 states

   property Termination
has value Just True
for SRS
  [a, c, a, b, a, b, a, b] -> [ a , b , a , b , a , b , a , c , a , b , a , c ] {- Dropped 2 0 (Input 0) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, a, b, a, c, a] -> [ c , a , b , a , c , a , b , a , b , a , b , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 71 states

**************************************************
skeleton: (1,3)\Drop{2}{0}\Mirror(1,3)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.943031320000
  min duration 0.179754873000
  total durat. 1.875078861000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 3
  max duration 0.820071581000
  min duration 0.640023820000
  total durat. 2.175447734000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 4
  max duration 0.719511274000
  min duration 0.556839825000
  total durat. 2.535983475000
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 3
  max duration 0.813072808000
  min duration 0.639998165000
  total durat. 2.153313445000
**************************************************
F                                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                                  = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
F                                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                                  = 22} , self = 70 , parent = Nothing , duration = 0.741027945000 , status
F                                  = Fail , start = 2025-09-03 12:40:23.140984755 UTC , finish = 2025-09-03
F                                  12:40:23.8820127 UTC , thread_cap_info = ("ThreadId 58", 1, False)}
F                                  
| F                                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                                = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| F                                = 3 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| F                                = 78} , self = 52 , parent = Nothing , duration = 0.221074950000 , status
| F                                = Fail , start = 2025-09-03 12:40:23.141712966 UTC , finish = 2025-09-03
| F                                12:40:23.362787916 UTC , thread_cap_info = ("ThreadId 81", 0, False)}
| F                                
| | F                              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                              = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | F                              = 3 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 5 , total_length
| | F                              = 78} , self = 60 , parent = Nothing , duration = 0.379192955000 , status
| | F                              = Fail , start = 2025-09-03 12:40:23.141715216 UTC , finish = 2025-09-03
| | F                              12:40:23.520908171 UTC , thread_cap_info = ("ThreadId 83", 0, False)}
| | F                              
| | | E                            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | E                            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | E                            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | E                            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | E                            = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E                            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E                            = 20} , self = 69 , parent = Nothing , duration = 0.700242472000 , status
| | | E                            = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.159378153 UTC ,
| | | E                            finish = 2025-09-03 12:40:23.859620625 UTC , thread_cap_info = ("ThreadId
| | | E                            66", 1, False)}
| | | E                            
| | | | E                          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | E                          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | E                          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | E                          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | E                          = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | E                          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E                          = 18} , self = 67 , parent = Nothing , duration = 0.639998165000 , status
| | | | E                          = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.179771697 UTC ,
| | | | E                          finish = 2025-09-03 12:40:23.819769862 UTC , thread_cap_info = ("ThreadId
| | | | E                          67", 1, False)}
| | | | E                          
| | | | | F                        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F                        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F                        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F                        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F                        = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | F                        = 0 , alphabet_size = 3 , total_length = 22} , self = 75 , parent = Nothing
| | | | | F                        , duration = 0.943031320000 , status = Fail , start = 2025-09-03 12:40:23.201947575
| | | | | F                        UTC , finish = 2025-09-03 12:40:24.144978895 UTC , thread_cap_info = ("ThreadId
| | | | | F                        92", 1, False)}
| | | | | F                        
| | | | | | F                      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F                      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F                      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F                      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F                      = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | F                      = 0 , alphabet_size = 3 , total_length = 22} , self = 55 , parent = Nothing
| | | | | | F                      , duration = 0.179754873000 , status = Fail , start = 2025-09-03 12:40:23.219382877
| | | | | | F                      UTC , finish = 2025-09-03 12:40:23.39913775 UTC , thread_cap_info = ("ThreadId
| | | | | | F                      94", 1, False)}
| | | | | | F                      
| | | | | | | E                    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | E                    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | E                    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | E                    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | E                    = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | E                    = 0 , alphabet_size = 3 , total_length = 18} , self = 64 , parent = Nothing
| | | | | | | E                    , duration = 0.462659135000 , status = Except "AsyncCancelled" , start
| | | | | | | E                    = 2025-09-03 12:40:23.288912957 UTC , finish = 2025-09-03 12:40:23.751572092
| | | | | | | E                    UTC , thread_cap_info = ("ThreadId 108", 1, False)}
| | | | | | | E                    
| | | | | | | | E                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | | | E                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | | | E                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | | | E                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | | | E                  = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | E                  = 24} , self = 74 , parent = Nothing , duration = 0.813072808000 , status
| | | | | | | | E                  = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.306312347 UTC ,
| | | | | | | | E                  finish = 2025-09-03 12:40:24.119385155 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E                  110", 0, False)}
| | | | | | | | E                  
| | | | | | | | | E                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | E                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | E                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | E                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | E                = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | E                = 0 , alphabet_size = 3 , total_length = 20} , self = 66 , parent = Nothing
| | | | | | | | | E                , duration = 0.460944445000 , status = Except "AsyncCancelled" , start
| | | | | | | | | E                = 2025-09-03 12:40:23.358805058 UTC , finish = 2025-09-03 12:40:23.819749503
| | | | | | | | | E                UTC , thread_cap_info = ("ThreadId 121", 1, False)}
| | | | | | | | | E                
| | | | | | | | | | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | F              = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | F              = 0 , alphabet_size = 3 , total_length = 24} , self = 68 , parent = Nothing
| | | | | | | | | | F              , duration = 0.496403160000 , status = Fail , start = 2025-09-03 12:40:23.35881753
| | | | | | | | | | F              UTC , finish = 2025-09-03 12:40:23.85522069 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | F              129", 0, False)}
| | | | | | | | | | F              
| | | | | | | | | | | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | | F            = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | | F            = 0 , alphabet_size = 3 , total_length = 24} , self = 62 , parent = Nothing
| | | | | | | | | | | F            , duration = 0.255889508000 , status = Fail , start = 2025-09-03 12:40:23.35882718
| | | | | | | | | | | F            UTC , finish = 2025-09-03 12:40:23.614716688 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | F            131", 0, False)}
| | | | | | | | | | | F            
| F | | | | | | | | | |            
| E | | | | | | | | | |            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | | | | | | | | |            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | | | | | | | | |            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | | | | | | | | |            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | | | | | | | | |            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | | | | | | | | |            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | | | | | | | | |            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | | | | | | | | |            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | | | | | | | | |            = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E | | | | | | | | | |            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E | | | | | | | | | |            = 22} , self = 71 , parent = Nothing , duration = 0.639871005000 , status
| E | | | | | | | | | |            = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.379511923 UTC ,
| E | | | | | | | | | |            finish = 2025-09-03 12:40:24.019382928 UTC , thread_cap_info = ("ThreadId
| E | | | | | | | | | |            133", 0, False)}
| E | | | | | | | | | |            
| | | | | | F | | | | |            
| | | | | | E | | | | |            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | E | | | | |            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | E | | | | |            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | E | | | | |            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | E | | | | |            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | E | | | | |            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | E | | | | |            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | E | | | | |            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | E | | | | |            = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | E | | | | |            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | E | | | | |            = 22} , self = 78 , parent = Nothing , duration = 0.820071581000 , status
| | | | | | E | | | | |            = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.39936854 UTC ,
| | | | | | E | | | | |            finish = 2025-09-03 12:40:24.219440121 UTC , thread_cap_info = ("ThreadId
| | | | | | E | | | | |            134", 0, False)}
| | | | | | E | | | | |            
| | | | | | | | | | | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | E          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | | | | E          = 18} , self = 72 , parent = Nothing , duration = 0.619761371000 , status
| | | | | | | | | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.419616995 UTC ,
| | | | | | | | | | | | E          finish = 2025-09-03 12:40:24.039378366 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | E          138", 1, False)}
| | | | | | | | | | | | E          
| | | | | | | | | | | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | | | | | E        = 18} , self = 76 , parent = Nothing , duration = 0.715352333000 , status
| | | | | | | | | | | | | E        = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.444034203 UTC ,
| | | | | | | | | | | | | E        finish = 2025-09-03 12:40:24.159386536 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | E        139", 1, False)}
| | | | | | | | | | | | | E        
| | | | | | | | | | | | | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | E      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | E      = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | | | | | | E      = 20} , self = 73 , parent = Nothing , duration = 0.556839825000 , status
| | | | | | | | | | | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.499929094 UTC ,
| | | | | | | | | | | | | | E      finish = 2025-09-03 12:40:24.056768919 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | E      141", 1, False)}
| | | | | | | | | | | | | | E      
| | | | | | | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | | | | | | | E    = 24} , self = 79 , parent = Nothing , duration = 0.719511274000 , status
| | | | | | | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.499936516 UTC ,
| | | | | | | | | | | | | | | E    finish = 2025-09-03 12:40:24.21944779 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | | E    145", 0, False)}
| | | | | | | | | | | | | | | E    
| | | | | | | | | | | | | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | | | E  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | | | E  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | | | | | | | | E  = 20} , self = 77 , parent = Nothing , duration = 0.640023820000 , status
| | | | | | | | | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:40:23.519375244 UTC ,
| | | | | | | | | | | | | | | | E  finish = 2025-09-03 12:40:24.159399064 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | | | E  142", 1, False)}
| | | | | | | | | | | | | | | | E  
| | F | | | | | | | | | | | | | |  
| |   | | | | | | | | F | | | | |  
| |   | | | | E | | |   | | | | |  
| |   | | | |   | E |   | | | | |  
| |   | E | |   |   |   | | | | |  
| |   |   | |   |   F   | | | | |  
| |   E   | |   |       | | | | |  
F |       | |   |       | | | | |  
  E       | |   |       | | | | |  
          | |   |       E | | | |  
          | |   |         | E | |  
          | |   E         |   | |  
          F |             |   | |  
            |             E   | |  
            |                 | E  
            E                 |    
                              E    
