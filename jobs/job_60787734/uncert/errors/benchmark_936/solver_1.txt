last 1837 length 7885
CNF 1837 vars 7885 clauses
last 1636 length 6918
CNF 1636 vars 6918 clauses
last 2152 length 9147
CNF 2152 vars 9147 clauses
last 2850 length 12237
CNF 2850 vars 12237 clauses
last 2511 length 10952
last 2515 length 10554
CNF 2515 vars 10554 clauses
CNF 2511 vars 10952 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4125, clauses: 15239
last 4125 length 15239
CNF 4125 vars 15239 clauses
last 355 length 1431
CNF 355 vars 1431 clauses
last 387 length 1559
CNF 387 vars 1559 clauses
last 474 length 1927
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4965, clauses: 18707
last 4965 length 18707
CNF 4965 vars 18707 clauses
CNF 474 vars 1927 clauses
last 576 length 2307
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1318, clauses: 4711
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4965, clauses: 18707, status: Satisfied, time: 0.088369173s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16517, clauses: 69569
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4389, clauses: 18217
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18112, clauses: 76273
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510
last 1318 length 4711
last 16517 length 69569
CNF 576 vars 2307 clauses
last 4389 length 18217
last 18112 length 76273
last 1811 length 6510
CNF 16517 vars 69569 clauses
CNF 1318 vars 4711 clauses
CNF 4389 vars 18217 clauses
CNF 1811 vars 6510 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5638, clauses: 23419
last 5638 length 23419
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510, status: Satisfied, time: 0.140997804s
CNF 5638 vars 23419 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1318, clauses: 4711, status: Unsatisfied, time: 0.166834049s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4125, clauses: 15239, status: Unsatisfied, time: 0.652599031s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4389, clauses: 18217, status: Unsatisfied, time: 0.276532979s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2648, clauses: 10740
last 2648 length 10740
CNF 2648 vars 10740 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2153, clauses: 8144
last 2153 length 8144
CNF 2153 vars 8144 clauses
last 2515 length 10554
**************************************************
last 2850 length 12237
summary
CNF 2850 vars 12237 clauses
**************************************************CNF 2515 vars 10554 clauses

SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 4 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b] -> [a, b, a] {- Input 0 -}
  [b, b, a] -> [b, b, b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b] -> [a, b, a] {- Mirror (Input 0) -}
  [a, b, b] -> [b, b, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [b#, a] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 12A 14A 14A - \
        | 12A 14A 14A - |
        | 12A 14A 14A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 12A 15A 15A - \
        | 12A 15A 15A - |
        | 12A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(4/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.710847229000
  min duration 0.452379383000
  total durat. 1.163226612000
**************************************************
F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                = 12} , self = 59 , parent = Nothing , duration = 0.131237893000 , status
F                = Fail , start = 2025-09-03 13:33:13.028809343 UTC , finish = 2025-09-03
F                13:33:13.160047236 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                
| F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F              = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F              = 12} , self = 61 , parent = Nothing , duration = 0.138464155000 , status
| F              = Fail , start = 2025-09-03 13:33:13.038171866 UTC , finish = 2025-09-03
| F              13:33:13.176636021 UTC , thread_cap_info = ("ThreadId 48", 3, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F            = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | F            = 80} , self = 68 , parent = Nothing , duration = 0.124811584000 , status
| | F            = Fail , start = 2025-09-03 13:33:13.129159902 UTC , finish = 2025-09-03
| | F            13:33:13.253971486 UTC , thread_cap_info = ("ThreadId 88", 2, False)}
| | F            
F | |            
  F |            
E   |            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E   |            , closure = Forward\n , start_strict_only = True\n , max_closure_length
E   |            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E   |            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E   |            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E   |            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E   |            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E   |            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E   |            = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E   |            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E   |            = 12} , self = 101 , parent = Nothing , duration = 0.903799210000 , status
E   |            = Except "AsyncCancelled" , start = 2025-09-03 13:33:13.19120477 UTC ,
E   |            finish = 2025-09-03 13:33:14.09500398 UTC , thread_cap_info = ("ThreadId
E   |            102", 3, False)}
E   |            
| F |            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F |            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |            = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| F |            alphabet_size = 5 , total_length = 80} , self = 96 , parent = Nothing ,
| F |            duration = 0.710847229000 , status = Fail , start = 2025-09-03 13:33:13.191414596
| F |            UTC , finish = 2025-09-03 13:33:13.902261825 UTC , thread_cap_info = ("ThreadId
| F |            105", 2, False)}
| F |            
| | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S          = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | S          alphabet_size = 6 , total_length = 96} , self = 85 , parent = Nothing ,
| | | S          duration = 0.517844648000 , status = Success , start = 2025-09-03 13:33:13.215068963
| | | S          UTC , finish = 2025-09-03 13:33:13.732913611 UTC , thread_cap_info = ("ThreadId
| | | S          107", 0, False)}
| | | S          
| | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | E        , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | | | E        = 6 , total_length = 96} , self = 88 , parent = Nothing , duration = 0.516617712000
| | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:33:13.23517368
| | | | E        UTC , finish = 2025-09-03 13:33:13.751791392 UTC , thread_cap_info = ("ThreadId
| | | | E        108", 0, False)}
| | | | E        
| | F | |        
| | F | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | |        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F | |        = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | F | |        = 24} , self = 84 , parent = Nothing , duration = 0.261069370000 , status
| | F | |        = Fail , start = 2025-09-03 13:33:13.411161429 UTC , finish = 2025-09-03
| | F | |        13:33:13.672230799 UTC , thread_cap_info = ("ThreadId 127", 3, False)}
| | F | |        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | F      = 24} , self = 87 , parent = Nothing , duration = 0.320814824000 , status
| | | | | F      = Fail , start = 2025-09-03 13:33:13.415439576 UTC , finish = 2025-09-03
| | | | | F      13:33:13.7362544 UTC , thread_cap_info = ("ThreadId 128", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F    = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | | | F    = 3 , total_length = 18} , self = 95 , parent = Nothing , duration = 0.452379383000
| | | | | | F    , status = Fail , start = 2025-09-03 13:33:13.432464601 UTC , finish =
| | | | | | F    2025-09-03 13:33:13.884843984 UTC , thread_cap_info = ("ThreadId 129",
| | | | | | F    3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | F  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | | | | F  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | | | | F  = 3 , total_length = 18} , self = 97 , parent = Nothing , duration = 0.527734638000
| | | | | | | F  , status = Fail , start = 2025-09-03 13:33:13.482930718 UTC , finish =
| | | | | | | F  2025-09-03 13:33:14.010665356 UTC , thread_cap_info = ("ThreadId 132",
| | | | | | | F  3, False)}
| | | | | | | F  
| | F | | | | |  
| | S | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | | | | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | S | | | | |  = 4 , total_length = 24} , self = 93 , parent = Nothing , duration = 0.203507786000
| | S | | | | |  , status = Success , start = 2025-09-03 13:33:13.672264482 UTC , finish
| | S | | | | |  = 2025-09-03 13:33:13.875772268 UTC , thread_cap_info = ("ThreadId 133",
| | S | | | | |  3, False)}
| | S | | | | |  
| | | S | | | |  
| | |   | F | |  
| | | E |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | E |   | |  = 4 , total_length = 24} , self = 98 , parent = Nothing , duration = 0.275412923000
| | | E |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:33:13.736310827
| | | E |   | |  UTC , finish = 2025-09-03 13:33:14.01172375 UTC , thread_cap_info = ("ThreadId
| | | E |   | |  138", 2, False)}
| | | E |   | |  
| | | | E   | |  
| | S |     | |  
| |   |     F |  
| F   |       |  
|     |       F  
|     E          
E                
