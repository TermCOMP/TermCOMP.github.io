last 993 length 3958
CNF 993 vars 3958 clauses
last 1072 length 4196
CNF 1072 vars 4196 clauses
last 709 length 2804
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4489, clauses: 15946
last 4489 length 15946
CNF 709 vars 2804 clauses
last 706 length 2791
CNF 4489 vars 15946 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14342, clauses: 59207
CNF 706 vars 2791 clauses
last 14342 length 59207
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3240, clauses: 11378
last 3240 length 11378
CNF 3240 vars 11378 clauses
CNF 14342 vars 59207 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11432, clauses: 47163
last 11432 length 47163
CNF 11432 vars 47163 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3240, clauses: 11378, status: Unsatisfied, time: 1.095124037s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6942, clauses: 27276
last 6942 length 27276
CNF 6942 vars 27276 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11432, clauses: 47163, status: Satisfied, time: 4.797127672s
**************************************************
summary
**************************************************
SRS with 10 rules on 8 letters       mirror
SRS with 10 rules on 8 letters       DP
SRS with 20 strict rules and 10 weak rules on 15 letters       weights
SRS with 7 strict rules and 10 weak rules on 15 letters       EDG
5 sub-proofs
  1 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  3 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 9 weak rules on 7 letters       EDG

  4 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  5 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [R, 2] -> [2, R] {- Input 0 -}
  [R, 3] -> [3, R] {- Input 1 -}
  [R, 1] -> [L, 3] {- Input 2 -}
  [3, L] -> [L, 3] {- Input 3 -}
  [2, L] -> [L, 2] {- Input 4 -}
  [0, L] -> [2, R] {- Input 5 -}
  [R, b] -> [c, 1, b] {- Input 6 -}
  [3, c] -> [c, 1] {- Input 7 -}
  [2, c, 1] -> [c, 0, R, 1] {- Input 8 -}
  [2, c, 0] -> [c, 0, 0] {- Input 9 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [2, R] -> [R, 2] {- Mirror (Input 0) -}
  [3, R] -> [R, 3] {- Mirror (Input 1) -}
  [1, R] -> [3, L] {- Mirror (Input 2) -}
  [L, 3] -> [3, L] {- Mirror (Input 3) -}
  [L, 2] -> [2, L] {- Mirror (Input 4) -}
  [L, 0] -> [R, 2] {- Mirror (Input 5) -}
  [b, R] -> [b, 1, c] {- Mirror (Input 6) -}
  [c, 3] -> [1, c] {- Mirror (Input 7) -}
  [1, c, 2] -> [1, R, 0, c] {- Mirror (Input 8) -}
  [0, c, 2] -> [0, 0, c] {- Mirror (Input 9) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 2] |-> [L#] {- DP (Top 1) (Mirror (Input 4)) -}
  [L#, 2] |-> [2#, L] {- DP (Top 0) (Mirror (Input 4)) -}
  [L#, 0] |-> [2#] {- DP (Top 1) (Mirror (Input 5)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [L#, 3] |-> [3#, L] {- DP (Top 0) (Mirror (Input 3)) -}
  [1#, R] |-> [L#] {- DP (Top 1) (Mirror (Input 2)) -}
  [1#, R] |-> [3#, L] {- DP (Top 0) (Mirror (Input 2)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [0#, c] {- DP (Top 2) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [c#] {- DP (Top 3) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [1#, c] {- DP (Top 1) (Mirror (Input 6)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [b#, R] |-> [c#] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [0#, c] {- DP (Top 1) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [c#] {- DP (Top 2) (Mirror (Input 9)) -}
  [c#, 3] |-> [1#, c] {- DP (Top 0) (Mirror (Input 7)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (L, 0/1)
  (1, 0/1)
  (R, 0/1)
  (2, 3/1)
  (b, 0/1)
  (0, 3/1)
  (c, 0/1)
  (3, 0/1)
  (L#, 3/1)
  (1#, 4/1)
  (2#, 0/1)
  (b#, 6/1)
  (0#, 3/1)
  (c#, 5/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
reason
  (3, 1/1)
  (L#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (R, 1/1)
  (2#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( L
  , Wk  / 0A 1A  -   \
        | -  -1A -1A |
        \ -  -   0A  / )
  ( 1
  , Wk  / -1A 0A  0A \
        | -2A -1A -  |
        \ -   -   0A / )
  ( R
  , Wk  / 0A -  -  \
        | -  0A 0A |
        \ -  -  0A / )
  ( 2
  , Wk  / 1A 2A 2A \
        | -  0A -  |
        \ -  -  0A / )
  ( 0
  , Wk  / 0A -1A 2A \
        | 0A 1A  1A |
        \ -  -   0A / )
  ( c
  , Wk  / 0A  0A  -  \
        | -1A -1A -  |
        \ -   -   0A / )
  ( 3
  , Wk  / -1A -  0A \
        | -   0A -  |
        \ -   -  0A / )
  ( b#
  , Wk  / 0A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
reason
  (3, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (R, 1/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(10,8)\Deepee(20/10,15)\Weight(7/10,15)\EDG[(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1/9,8)\Matrix{\ArcticBZ}{3}(0/9,7)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.200963935000
  min duration 3.200963935000
  total durat. 3.200963935000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 68
    , parent = Nothing
    , duration = 3.200963935000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:48.416862609 UTC
    , finish = 2025-09-03 13:34:51.617826544 UTC
    , thread_cap_info = ("ThreadId 98", 1, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.259403612000
  min duration 3.259403612000
  total durat. 3.259403612000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 69
    , parent = Nothing
    , duration = 3.259403612000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:48.436734361 UTC
    , finish = 2025-09-03 13:34:51.696137973 UTC
    , thread_cap_info = ("ThreadId 100", 1, False)}
Fail : "Matchbound\n { method = RFC\n , implementation = Approximate { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 2
  max duration 0.710855659000
  min duration 0.707397181000
  total durat. 1.418252840000
Fail : "Matchbound\n { method = RFC\n , implementation = Approximate { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 2
  max duration 1.124571221000
  min duration 0.493359992000
  total durat. 1.617931213000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Approximate   { at_bound = Merge}\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Nothing\n  , max_height = Just 6\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 10
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 8
      , total_length = 46}
    , self = 70
    , parent = Nothing
    , duration = 1.124571221000
    , status = Fail
    , start = 2025-09-03 13:34:50.71396929 UTC
    , finish = 2025-09-03 13:34:51.838540511 UTC
    , thread_cap_info = ("ThreadId 112", 1, False)}
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 5.152711243000
  min duration 0.013810514000
  total durat. 9.758364293000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 73
    , parent = Nothing
    , duration = 4.557780458000
    , status = Fail
    , start = 2025-09-03 13:34:48.212022465 UTC
    , finish = 2025-09-03 13:34:52.769802923 UTC
    , thread_cap_info = ("ThreadId 80", 2, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 74
    , parent = Nothing
    , duration = 5.152711243000
    , status = Fail
    , start = 2025-09-03 13:34:48.212028948 UTC
    , finish = 2025-09-03 13:34:53.364740191 UTC
    , thread_cap_info = ("ThreadId 82", 2, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 5.153053459000
  min duration 5.153053459000
  total durat. 5.153053459000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 81
    , parent = Nothing
    , duration = 5.153053459000
    , status = Success
    , start = 2025-09-03 13:34:48.434081535 UTC
    , finish = 2025-09-03 13:34:53.587134994 UTC
    , thread_cap_info = ("ThreadId 103", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 4.120115656000
  min duration 4.120115656000
  total durat. 4.120115656000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 84
    , parent = Nothing
    , duration = 4.120115656000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:49.540350626 UTC
    , finish = 2025-09-03 13:34:53.660466282 UTC
    , thread_cap_info = ("ThreadId 109", 3, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.131453339000
  min duration 1.131453339000
  total durat. 1.131453339000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 64
    , parent = Nothing
    , duration = 1.131453339000
    , status = Fail
    , start = 2025-09-03 13:34:48.397832345 UTC
    , finish = 2025-09-03 13:34:49.529285684 UTC
    , thread_cap_info = ("ThreadId 102", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 5.629645450000
  min duration 5.629645450000
  total durat. 5.629645450000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 10
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 8
      , total_length = 46}
    , self = 96
    , parent = Nothing
    , duration = 5.629645450000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:48.150108312 UTC
    , finish = 2025-09-03 13:34:53.779753762 UTC
    , thread_cap_info = ("ThreadId 34", 0, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 5.447594866000
  min duration 5.447594866000
  total durat. 5.447594866000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 10
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 8
      , total_length = 46}
    , self = 82
    , parent = Nothing
    , duration = 5.447594866000
    , status = Fail
    , start = 2025-09-03 13:34:48.150144094 UTC
    , finish = 2025-09-03 13:34:53.59773896 UTC
    , thread_cap_info = ("ThreadId 40", 1, False)}
**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 10 , num_strict_rules = 10
E                  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
E                  = 46} , self = 96 , parent = Nothing , duration = 5.629645450000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-03 13:34:48.150108312 UTC ,
E                  finish = 2025-09-03 13:34:53.779753762 UTC , thread_cap_info = ("ThreadId
E                  34", 0, False)}
E                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| F                , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| F                = 46} , self = 82 , parent = Nothing , duration = 5.447594866000 , status
| F                = Fail , start = 2025-09-03 13:34:48.150144094 UTC , finish = 2025-09-03
| F                13:34:53.59773896 UTC , thread_cap_info = ("ThreadId 40", 1, False)}
| F                
| | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F              = Size { num_rules = 284 , num_strict_rules = 284 , num_top_rules = 0 ,
| | F              num_weak_rules = 0 , alphabet_size = 54 , total_length = 1968} , self =
| | F              73 , parent = Nothing , duration = 4.557780458000 , status = Fail , start
| | F              = 2025-09-03 13:34:48.212022465 UTC , finish = 2025-09-03 13:34:52.769802923
| | F              UTC , thread_cap_info = ("ThreadId 80", 2, False)}
| | F              
| | | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F            = Size { num_rules = 284 , num_strict_rules = 284 , num_top_rules = 0 ,
| | | F            num_weak_rules = 0 , alphabet_size = 54 , total_length = 1968} , self =
| | | F            74 , parent = Nothing , duration = 5.152711243000 , status = Fail , start
| | | F            = 2025-09-03 13:34:48.212028948 UTC , finish = 2025-09-03 13:34:53.364740191
| | | F            UTC , thread_cap_info = ("ThreadId 82", 2, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F          = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | F          = 46} , self = 59 , parent = Nothing , duration = 0.181899983000 , status
| | | | F          = Fail , start = 2025-09-03 13:34:48.21563586 UTC , finish = 2025-09-03
| | | | F          13:34:48.397535843 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | F        = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | | F        = 46} , self = 60 , parent = Nothing , duration = 0.216340041000 , status
| | | | | F        = Fail , start = 2025-09-03 13:34:48.215641575 UTC , finish = 2025-09-03
| | | | | F        13:34:48.431981616 UTC , thread_cap_info = ("ThreadId 86", 3, False)}
| | | | | F        
| | | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F      { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F      = MSB_First}\n , max_size = Nothing\n , max_height = Just 4\n , initial
| | | | | | F      = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F      = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F      , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F      = 46} , self = 61 , parent = Nothing , duration = 0.207975163000 , status
| | | | | | F      = Fail , start = 2025-09-03 13:34:48.395926044 UTC , finish = 2025-09-03
| | | | | | F      13:34:48.603901207 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | | | | | F      
| | | | F | |      
| | | | F | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F | |      = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
| | | | F | |      alphabet_size = 8 , total_length = 46} , self = 64 , parent = Nothing ,
| | | | F | |      duration = 1.131453339000 , status = Fail , start = 2025-09-03 13:34:48.397832345
| | | | F | |      UTC , finish = 2025-09-03 13:34:49.529285684 UTC , thread_cap_info = ("ThreadId
| | | | F | |      102", 3, False)}
| | | | F | |      
| | | | | | | E    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 284 , num_strict_rules
| | | | | | | E    = 284 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 54 , total_length
| | | | | | | E    = 1968} , self = 68 , parent = Nothing , duration = 3.200963935000 , status
| | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 13:34:48.416862609 UTC ,
| | | | | | | E    finish = 2025-09-03 13:34:51.617826544 UTC , thread_cap_info = ("ThreadId
| | | | | | | E    98", 1, False)}
| | | | | | | E    
| | | | | F | |    
| | | | | S | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | S | |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| | | | | S | |    = 8 , total_length = 46} , self = 81 , parent = Nothing , duration = 5.153053459000
| | | | | S | |    , status = Success , start = 2025-09-03 13:34:48.434081535 UTC , finish
| | | | | S | |    = 2025-09-03 13:34:53.587134994 UTC , thread_cap_info = ("ThreadId 103",
| | | | | S | |    3, False)}
| | | | | S | |    
| | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 284 , num_strict_rules
| | | | | | | | E  = 284 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 54 , total_length
| | | | | | | | E  = 1968} , self = 69 , parent = Nothing , duration = 3.259403612000 , status
| | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 13:34:48.436734361 UTC ,
| | | | | | | | E  finish = 2025-09-03 13:34:51.696137973 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  100", 1, False)}
| | | | | | | | E  
| | | | | | F | |  
| | | | | | F | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 4\n , initial
| | | | | | F | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F | |  = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F | |  = 46} , self = 63 , parent = Nothing , duration = 0.128200456000 , status
| | | | | | F | |  = Fail , start = 2025-09-03 13:34:48.695885942 UTC , finish = 2025-09-03
| | | | | | F | |  13:34:48.824086398 UTC , thread_cap_info = ("ThreadId 106", 1, False)}
| | | | | | F | |  
| | | | | | F | |  
| | | | | | F | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
| | | | | | F | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F | |  = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F | |  = 46} , self = 65 , parent = Nothing , duration = 0.710855659000 , status
| | | | | | F | |  = Fail , start = 2025-09-03 13:34:48.993290178 UTC , finish = 2025-09-03
| | | | | | F | |  13:34:49.704145837 UTC , thread_cap_info = ("ThreadId 108", 1, False)}
| | | | | | F | |  
| | | | F | | | |  
| | | | E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | E | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | E | | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| | | | E | | | |  = 8 , total_length = 46} , self = 84 , parent = Nothing , duration = 4.120115656000
| | | | E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:34:49.540350626
| | | | E | | | |  UTC , finish = 2025-09-03 13:34:53.660466282 UTC , thread_cap_info = ("ThreadId
| | | | E | | | |  109", 3, False)}
| | | | E | | | |  
| | | | | | F | |  
| | | | | | F | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
| | | | | | F | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F | |  = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F | |  = 46} , self = 67 , parent = Nothing , duration = 0.707397181000 , status
| | | | | | F | |  = Fail , start = 2025-09-03 13:34:49.838637551 UTC , finish = 2025-09-03
| | | | | | F | |  13:34:50.546034732 UTC , thread_cap_info = ("ThreadId 110", 1, False)}
| | | | | | F | |  
| | | | | | F | |  
| | | | | | F | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | | | | F | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F | |  = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F | |  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F | |  = 46} , self = 70 , parent = Nothing , duration = 1.124571221000 , status
| | | | | | F | |  = Fail , start = 2025-09-03 13:34:50.71396929 UTC , finish = 2025-09-03
| | | | | | F | |  13:34:51.838540511 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
| | | | | | F | |  
| | | | | | | E |  
| | | | | | |   E  
| | | | | | F      
| | | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | F      { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | F      = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | | | | F      = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | F      = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| | | | | | F      , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | | | | F      = 46} , self = 72 , parent = Nothing , duration = 0.493359992000 , status
| | | | | | F      = Fail , start = 2025-09-03 13:34:51.875916416 UTC , finish = 2025-09-03
| | | | | | F      13:34:52.369276408 UTC , thread_cap_info = ("ThreadId 115", 1, False)}
| | | | | | F      
| | | | | | F      
| | F | | |        
| |   F | |        
| | S   | |        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S   | |        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S   | |        = Size { num_rules = 770 , num_strict_rules = 486 , num_top_rules = 486
| | S   | |        , num_weak_rules = 284 , alphabet_size = 75 , total_length = 4776} , self
| | S   | |        = 80 , parent = Nothing , duration = 0.212747653000 , status = Success
| | S   | |        , start = 2025-09-03 13:34:53.370085883 UTC , finish = 2025-09-03 13:34:53.582833536
| | S   | |        UTC , thread_cap_info = ("ThreadId 123", 3, False)}
| | S   | |        
| | | S | |        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | S | |        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | S | |        = Size { num_rules = 1124 , num_strict_rules = 840 , num_top_rules = 840
| | | S | |        , num_weak_rules = 284 , alphabet_size = 100 , total_length = 6812} , self
| | | S | |        = 86 , parent = Nothing , duration = 0.301776341000 , status = Success
| | | S | |        , start = 2025-09-03 13:34:53.391995734 UTC , finish = 2025-09-03 13:34:53.693772075
| | | S | |        UTC , thread_cap_info = ("ThreadId 124", 2, False)}
| | | S | |        
| | S | | |        
| | S | | |        Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S | | |        verbose = False}" , input_size = Size { num_rules = 356 , num_strict_rules
| | S | | |        = 72 , num_top_rules = 72 , num_weak_rules = 284 , alphabet_size = 61 ,
| | S | | |        total_length = 2408} , self = 87 , parent = Nothing , duration = 0.129338546000
| | S | | |        , status = Success , start = 2025-09-03 13:34:53.58284607 UTC , finish
| | S | | |        = 2025-09-03 13:34:53.712184616 UTC , thread_cap_info = ("ThreadId 119",
| | S | | |        3, False)}
| | S | | |        
| | | | | S        
| F | | |          
| E | | |          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | |          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | |          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | |          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | |          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | |          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | |          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | |          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | |          = True})" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| E | | |          , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| E | | |          = 46} , self = 95 , parent = Nothing , duration = 0.179447847000 , status
| E | | |          = Except "AsyncCancelled" , start = 2025-09-03 13:34:53.597750955 UTC ,
| E | | |          finish = 2025-09-03 13:34:53.777198802 UTC , thread_cap_info = ("ThreadId
| E | | |          126", 1, False)}
| E | | |          
| | | | E          
| | | S            
| | S              
| E                
E                  
