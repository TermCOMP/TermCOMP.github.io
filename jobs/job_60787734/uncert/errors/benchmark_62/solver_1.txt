[Info] pool sizes (success) 11341 seen 5178 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 28 rules on 17 letters       looping derivation
from
  [ABABA, BAAB, a, b, a, b, a]
to
  [ABABAAB, ABA, ABABA, BAAB, a, b, a, b, a, a, b, b, a, a]
via 28 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [A, a] -> [A, A] {- Input 0 -}
  [A, b] -> [AB] {- Input 1 -}
  [AB, a] -> [ABA] {- Input 2 -}
  [AB, b] -> [AB, B] {- Input 3 -}
  [ABA, a] -> [ABA, A] {- Input 4 -}
  [ABA, b] -> [ABAB] {- Input 5 -}
  [ABAB, a] -> [ABABA] {- Input 6 -}
  [ABAB, b] -> [ABAB, B] {- Input 7 -}
  [ABABA, a] -> [ABABAA] {- Input 8 -}
  [ABABA, b] -> [ABABA, B] {- Input 9 -}
  [ABABAA, a] -> [ABABAA, A] {- Input 10 -}
  [ABABAA, b] -> [ABABAAB] {- Input 11 -}
  [ABABAAB, a] -> [ABABAAB, A] {- Input 12 -}
  [ABABAAB, b] -> [ABABAABB] {- Input 13 -}
  [ABABAABB, a] -> [ABABAABBA] {- Input 14 -}
  [ABABAABB, b] -> [ABABAABB, B] {- Input 15 -}
  [ABABAABBA, a] -> [ABABAABBAA] {- Input 16 -}
  [ABABAABBA, b] -> [ABABAABBA, B] {- Input 17 -}
  [ABABAABBAA] -> [b, a, a, b, a] {- Input 18 -}
  [B, a] -> [BA] {- Input 19 -}
  [B, b] -> [B, B] {- Input 20 -}
  [BA, a] -> [BAA] {- Input 21 -}
  [BA, b] -> [BA, B] {- Input 22 -}
  [BAA, a] -> [BAA, A] {- Input 23 -}
  [BAA, b] -> [BAAB] {- Input 24 -}
  [BAAB, a] -> [BAABA] {- Input 25 -}
  [BAAB, b] -> [BAAB, B] {- Input 26 -}
  [BAABA] -> [a, b, a, b, a, a, b, b, a, a] {- Input 27 -}
reason
  Nontermination
    Derive   { from = [ABABA, BAAB, a, b, a, b, a], via = [(Step   { rule = 25, position = 1}, [ABABA, BAABA, b, a, b, a]), (Step   { rule = 27, position = 1}, [ABABA, a, b, a, b, a, a, b, b, a, a, b, a, b, a]), (Step   { rule = 8, position = 0}, [ABABAA, b, a, b, a, a, b, b, a, a, b, a, b, a]), (Step   { rule = 11, position = 0}, [ABABAAB, a, b, a, a, b, b, a, a, b, a, b, a]), (Step   { rule = 12, position = 0}, [ABABAAB, A, b, a, a, b, b, a, a, b, a, b, a]), (Step   { rule = 1, position = 1}, [ABABAAB, AB, a, a, b, b, a, a, b, a, b, a]), (Step   { rule = 2, position = 1}, [ABABAAB, ABA, a, b, b, a, a, b, a, b, a]), (Step   { rule = 4, position = 1}, [ABABAAB, ABA, A, b, b, a, a, b, a, b, a]), (Step   { rule = 1, position = 2}, [ABABAAB, ABA, AB, b, a, a, b, a, b, a]), (Step   { rule = 3, position = 2}, [ABABAAB, ABA, AB, B, a, a, b, a, b, a]), (Step   { rule = 19, position = 3}, [ABABAAB, ABA, AB, BA, a, b, a, b, a]), (Step   { rule = 21, position = 3}, [ABABAAB, ABA, AB, BAA, b, a, b, a]), (Step   { rule = 24, position = 3}, [ABABAAB, ABA, AB, BAAB, a, b, a]), (Step   { rule = 25, position = 3}, [ABABAAB, ABA, AB, BAABA, b, a]), (Step   { rule = 27, position = 3}, [ABABAAB, ABA, AB, a, b, a, b, a, a, b, b, a, a, b, a]), (Step   { rule = 2, position = 2}, [ABABAAB, ABA, ABA, b, a, b, a, a, b, b, a, a, b, a]), (Step   { rule = 5, position = 2}, [ABABAAB, ABA, ABAB, a, b, a, a, b, b, a, a, b, a]), (Step   { rule = 6, position = 2}, [ABABAAB, ABA, ABABA, b, a, a, b, b, a, a, b, a]), (Step   { rule = 9, position = 2}, [ABABAAB, ABA, ABABA, B, a, a, b, b, a, a, b, a]), (Step   { rule = 19, position = 3}, [ABABAAB, ABA, ABABA, BA, a, b, b, a, a, b, a]), (Step   { rule = 21, position = 3}, [ABABAAB, ABA, ABABA, BAA, b, b, a, a, b, a]), (Step   { rule = 24, position = 3}, [ABABAAB, ABA, ABABA, BAAB, b, a, a, b, a]), (Step   { rule = 26, position = 3}, [ABABAAB, ABA, ABABA, BAAB, B, a, a, b, a]), (Step   { rule = 19, position = 4}, [ABABAAB, ABA, ABABA, BAAB, BA, a, b, a]), (Step   { rule = 21, position = 4}, [ABABAAB, ABA, ABABA, BAAB, BAA, b, a]), (Step   { rule = 24, position = 4}, [ABABAAB, ABA, ABABA, BAAB, BAAB, a]), (Step   { rule = 25, position = 4}, [ABABAAB, ABA, ABABA, BAAB, BAABA]), (Step   { rule = 27, position = 4}, [ABABAAB, ABA, ABABA, BAAB, a, b, a, b, a, a, b, b, a, a])], to = [ABABAAB, ABA, ABABA, BAAB, a, b, a, b, a, a, b, b, a, a]}

**************************************************
skeleton: (28,17)\Loop{28}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S        Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
S        , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
S        , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
S        = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
S        , cpf = False}" , input_size = Size { num_rules = 28 , num_strict_rules
S        = 28 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 17 , total_length
S        = 108} , self = 20 , parent = Nothing , duration = 0.107460479000 , status
S        = Success , start = 2025-09-03 10:47:09.578945138 UTC , finish = 2025-09-03
S        10:47:09.686405617 UTC , thread_cap_info = ("ThreadId 28", 2, False)}
S        
| S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| S      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| S      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| S      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| S      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| S      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| S      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| S      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| S      = True})" , input_size = Size { num_rules = 28 , num_strict_rules = 28
| S      , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 17 , total_length
| S      = 108} , self = 21 , parent = Nothing , duration = 0.124380272000 , status
| S      = Success , start = 2025-09-03 10:47:09.57896793 UTC , finish = 2025-09-03
| S      10:47:09.703348202 UTC , thread_cap_info = ("ThreadId 40", 1, False)}
| S      
| | E    Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | E    , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | E    , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | E    = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | E    , cpf = False}" , input_size = Size { num_rules = 28 , num_strict_rules
| | E    = 28 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 17 , total_length
| | E    = 108} , self = 23 , parent = Nothing , duration = 0.129331947000 , status
| | E    = Except "AsyncCancelled" , start = 2025-09-03 10:47:09.578971967 UTC ,
| | E    finish = 2025-09-03 10:47:09.708303914 UTC , thread_cap_info = ("ThreadId
| | E    41", 3, False)}
| | E    
| | | S  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | S  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | S  = MSB_First}\n , max_size = Nothing\n , max_height = Just 2\n , initial
| | | S  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | S  = False}" , input_size = Size { num_rules = 28 , num_strict_rules = 28
| | | S  , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 17 , total_length
| | | S  = 108} , self = 22 , parent = Nothing , duration = 0.129281081000 , status
| | | S  = Success , start = 2025-09-03 10:47:09.578980241 UTC , finish = 2025-09-03
| | | S  10:47:09.708261322 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
| | | S  
S | | |  
  S | |  
    | S  
    E    
