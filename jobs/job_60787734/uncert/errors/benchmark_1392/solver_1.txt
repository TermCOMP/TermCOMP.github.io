last 498 length 2018
last 481 length 1903
CNF 481 vars 1903 clauses
last 539 length 2183
CNF 498 vars 2018 clauses
CNF 539 vars 2183 clauses
last 4048 length 18157
CNF 4048 vars 18157 clauses
last 539 length 2243
last 3780 length 19434
CNF 3780 vars 19434 clauses
CNF 539 vars 2243 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2173, clauses: 7747
last 2173 length 7747
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2187, clauses: 7901
last 2187 length 7901
CNF 2173 vars 7747 clauses
CNF 2187 vars 7901 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6169, clauses: 25433
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2173, clauses: 7747, status: Unsatisfied, time: 0.119594992s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6720, clauses: 27871
last 6169 length 25433
last 6720 length 27871
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3873, clauses: 15387
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2187, clauses: 7901, status: Unsatisfied, time: 0.152260261s
last 3873 length 15387
CNF 6720 vars 27871 clauses
CNF 6169 vars 25433 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4210, clauses: 16900
CNF 3873 vars 15387 clauses
last 4210 length 16900
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6169, clauses: 25433, status: Satisfied, time: 0.13344176s
CNF 4210 vars 16900 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6720, clauses: 27871, status: Satisfied, time: 0.104331457s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [c, c, b, c] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [] {- Mirror (Input 0) -}
  [c, a] -> [c, b, c, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Mirror (Input 0) -}
  [b, b, a] -> [b] {- Mirror (Input 0) -}
  [c, b, a] -> [c] {- Mirror (Input 0) -}
  [c, a] -> [c, b, c, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Input 0 -}
  [a, b, b] -> [b] {- Input 0 -}
  [a, b, c] -> [c] {- Input 0 -}
  [a, c] -> [c, c, b, c] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
  [a#, c] |-> [b#, c] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#, c] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 2A 0A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / -   0A  0A \
        | -2A -2A -  |
        \ -   -   0A / )
  ( c
  , Wk  / -1A 2A 2A \
        | 0A  0A -  |
        \ -   -  0A / )
  ( a#
  , Wk  / 0A 2A 1A \
        | -  -  -  |
        \ -  -  0A / )
  ( b#
  , Wk  / 0A 1A -2A \
        | -  -  -   |
        \ -  -  0A  / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#, c] {- DP (Top 2) (Input 1) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, c, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(3/5,5)\Matrix{\ArcticBZ}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F          = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F          = 5 , total_length = 33} , self = 67 , parent = Nothing , duration = 0.171504766000
F          , status = Fail , start = 2025-09-03 11:45:27.843569289 UTC , finish =
F          2025-09-03 11:45:28.015074055 UTC , thread_cap_info = ("ThreadId 89", 1,
F          False)}
F          
| S        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| S        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| S        = 5 , total_length = 33} , self = 69 , parent = Nothing , duration = 0.305289186000
| S        , status = Success , start = 2025-09-03 11:45:27.843574373 UTC , finish
| S        = 2025-09-03 11:45:28.148863559 UTC , thread_cap_info = ("ThreadId 90",
| S        1, False)}
| S        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 9 , total_length = 162} , self = 72 , parent = Nothing
| | F      , duration = 0.305206669000 , status = Fail , start = 2025-09-03 11:45:27.868642465
| | F      UTC , finish = 2025-09-03 11:45:28.173849134 UTC , thread_cap_info = ("ThreadId
| | F      103", 0, False)}
| | F      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | F    = 4 , total_length = 35} , self = 68 , parent = Nothing , duration = 0.176908404000
| | | F    , status = Fail , start = 2025-09-03 11:45:27.88052458 UTC , finish = 2025-09-03
| | | F    11:45:28.057432984 UTC , thread_cap_info = ("ThreadId 106", 1, False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | S  = 4 , total_length = 35} , self = 71 , parent = Nothing , duration = 0.253207137000
| | | | S  , status = Success , start = 2025-09-03 11:45:27.920529883 UTC , finish
| | | | S  = 2025-09-03 11:45:28.17373702 UTC , thread_cap_info = ("ThreadId 108",
| | | | S  1, False)}
| | | | S  
F | | | |  
E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
E | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
E | | | |  = 5 , total_length = 33} , self = 79 , parent = Nothing , duration = 0.160230619000
E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:45:28.01512684
E | | | |  UTC , finish = 2025-09-03 11:45:28.175357459 UTC , thread_cap_info = ("ThreadId
E | | | |  111", 1, False)}
E | | | |  
| | | F |  
| | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | E |  = 4 , total_length = 35} , self = 85 , parent = Nothing , duration = 0.120665900000
| | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:45:28.05747652
| | | E |  UTC , finish = 2025-09-03 11:45:28.17814242 UTC , thread_cap_info = ("ThreadId
| | | E |  114", 1, False)}
| | | E |  
| S | | |  
|   | | S  
|   F |    
E     |    
      E    
