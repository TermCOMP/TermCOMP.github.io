last 1622 length 7105
CNF 1622 vars 7105 clauses
last 734 length 2847
CNF 734 vars 2847 clauses
last 1212 length 5138
last 2510 length 10733
CNF 2510 vars 10733 clauses
last 1061 length 4339
CNF 1061 vars 4339 clauses
CNF 1212 vars 5138 clauses
last 1664 length 7096
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1968, clauses: 7613
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2445, clauses: 9521
CNF 1664 vars 7096 clauses
last 1968 length 7613
last 2445 length 9521
CNF 1968 vars 7613 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5696, clauses: 23724
last 5696 length 23724
CNF 5696 vars 23724 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1968, clauses: 7613, status: Satisfied, time: 0.042056838s
CNF 2445 vars 9521 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2445, clauses: 9521, status: Satisfied, time: 0.100337308s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6402, clauses: 26627
last 1512 length 6471
CNF 1512 vars 6471 clauses
last 1013 length 4185
CNF 1013 vars 4185 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2339, clauses: 9024
last 2339 length 9024
CNF 2339 vars 9024 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2339, clauses: 9024, status: Satisfied, time: 0.053086288s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6356, clauses: 26451
last 1264 length 5350
last 915 length 3782
CNF 915 vars 3782 clauses
CNF 1264 vars 5350 clauses
last 5706 length 24935
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2254, clauses: 8635
last 2254 length 8635
CNF 2254 vars 8635 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6606, clauses: 27525
last 6606 length 27525
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 4 strict rules and 2 weak rules on 3 letters       EDG
SRS with 4 strict rules and 2 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a] -> [b, b, b, a] {- Input 0 -}
  [b, b, b, a] -> [a, a, a, b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a, b, b, b] {- Mirror (Input 0) -}
  [a, b, b, b] -> [b, a, a, a] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, a] |-> [a#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [a#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, b, a] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 5A 5A 5A - \
        | 5A 5A 5A - |
        | 5A 5A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [a#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a, b, a] ->= [a, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee\EDG(4/2,3)\Matrix{\Arctic}{3}(1/2,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim CNF 6606 vars 27525 clauses
(matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F            = 15} , self = 67 , parent = Nothing , duration = 0.135031043000 , status
F            = Fail , start = 2025-09-03 13:30:21.567686603 UTC , finish = 2025-09-03
F            13:30:21.702717646 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 4 , total_length = 76} , self = 69 , parent = Nothing
| F          , duration = 0.120457036000 , status = Fail , start = 2025-09-03 13:30:21.615134787
| F          UTC , finish = 2025-09-03 13:30:21.735591823 UTC , thread_cap_info = ("ThreadId
| F          92", 2, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F        = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | F        = 54} , self = 68 , parent = Nothing , duration = 0.105750277000 , status
| | F        = Fail , start = 2025-09-03 13:30:21.624675184 UTC , finish = 2025-09-03
| | F        13:30:21.730425461 UTC , thread_cap_info = ("ThreadId 90", 2, False)}
| | F        
| | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S      = 6 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | S      = 3 , total_length = 40} , self = 70 , parent = Nothing , duration = 0.148872710000
| | | S      , status = Success , start = 2025-09-03 13:30:21.6368252 UTC , finish =
| | | S      2025-09-03 13:30:21.78569791 UTC , thread_cap_info = ("ThreadId 105", 0,
| | | S      False)}
| | | S      
| | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S    = 8 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
| | | | S    = 4 , total_length = 54} , self = 83 , parent = Nothing , duration = 0.158736099000
| | | | S    , status = Success , start = 2025-09-03 13:30:21.658460408 UTC , finish
| | | | S    = 2025-09-03 13:30:21.817196507 UTC , thread_cap_info = ("ThreadId 107",
| | | | S    2, False)}
| | | | S    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | | | E  = 3 , total_length = 40} , self = 91 , parent = Nothing , duration = 0.170003775000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:30:21.666538837
| | | | | E  UTC , finish = 2025-09-03 13:30:21.836542612 UTC , thread_cap_info = ("ThreadId
| | | | | E  108", 0, False)}
| | | | | E  
F | | | | |  
  | F | | |  
  F   | | |  
      S | |  
        S |  
          E  
F            Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
F            epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
F            = Size { num_rules = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules
F            = 2 , alphabet_size = 3 , total_length = 22} , self = 102 , parent = Nothing
F            , duration = 0.100116858000 , status = Fail , start = 2025-09-03 13:30:21.893570042
F            UTC , finish = 2025-09-03 13:30:21.9936869 UTC , thread_cap_info = ("ThreadId
F            138", 0, False)}
F            
F            
