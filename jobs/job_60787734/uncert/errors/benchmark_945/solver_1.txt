last 1582 length 6643
last 1572 length 6603
CNF 1582 vars 6643 clauses
CNF 1572 vars 6603 clauses
last 1869 length 8034
CNF 1869 vars 8034 clauses
last 1833 length 7966
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790
CNF 1833 vars 7966 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790
last 3705 length 13790
last 10060 length 49050
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12060, clauses: 50517
last 9259 length 41662
last 3705 length 13790
CNF 3705 vars 13790 clauses
last 12060 length 50517
CNF 10060 vars 49050 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12060, clauses: 50517
CNF 9259 vars 41662 clauses
CNF 3705 vars 13790 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790, status: Satisfied, time: 0.361909308s
CNF 12060 vars 50517 clauses
last 12060 length 50517
CNF 12060 vars 50517 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790, status: Satisfied, time: 0.988900502s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 172 epsilon transitions
SRS with 3 rules on 3 letters       split
2 sub-proofs
  1 SRS with 2 strict rules and 1 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 18 strict rules and 9 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 8 letters       weights
  SRS with 0 strict rules and 1 weak rules on 4 letters       no strict rules

  2 SRS with 1 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height -1 and with 1 epsilon transitions
  SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, c] {- Input 0 -}
  [b, a, a, a] -> [a, a, a, b] {- Input 1 -}
  [a, b, c] -> [c, b, a] {- Input 2 -}
  [c, c, b, b] -> [b, b, c, c] {- Input 3 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, 2), (2, 2), (3, -1)], epsilons = [((0, 2, 0), (0, 0, 0)), ((0, 2, 0), (1, 0, 0)), ((1, 2, 0), (0, 0, 0)), ((1, 2, 0), (1, 0, 0)), ((1, 2, 0), (2, 0, 0)), ((2, 2, 0), (1, 0, 0)), ((2, 2, 0), (2, 0, 0)), ((0, 0, 1), (0, 0, 0)), ((0, 0, 1), (1, 0, 0)), ((0, 0, 1), (2, 0, 0)), ((0, 0, 1), (1, 2, 0)), ((1, 0, 1), (1, 0, 0)), ((1, 0, 1), (2, 0, 0)), ((1, 0, 1), (2, 2, 0)), ((2, 0, 1), (1, 0, 0)), ((2, 0, 1), (2, 0, 0)), ((2, 0, 1), (2, 2, 0)), ((0, 2, 1), (0, 1, 0)), ((0, 2, 1), (1, 1, 0)), ((1, 2, 1), (0, 1, 0)), ((1, 2, 1), (1, 1, 0)), ((1, 2, 1), (2, 1, 0)), ((2, 2, 1), (1, 1, 0)), ((2, 2, 1), (2, 1, 0)), ((0, 0, 2), (1, 1, 0)), ((1, 0, 2), (1, 1, 0)), ((1, 0, 2), (2, 1, 0)), ((2, 0, 2), (2, 1, 0)), ((0, 1, 2), (0, 0, 0)), ((0, 1, 2), (1, 0, 0)), ((0, 1, 2), (0, 2, 0)), ((1, 1, 2), (0, 0, 0)), ((1, 1, 2), (1, 0, 0)), ((1, 1, 2), (2, 0, 0)), ((1, 1, 2), (1, 2, 0)), ((1, 1, 2), (2, 2, 0)), ((2, 1, 2), (1, 0, 0)), ((2, 1, 2), (2, 0, 0)), ((2, 1, 2), (2, 2, 0)), ((0, 2, 2), (0, 0, 0)), ((0, 2, 2), (1, 0, 0)), ((0, 2, 2), (0, 2, 0)), ((1, 2, 2), (0, 0, 0)), ((1, 2, 2), (1, 0, 0)), ((1, 2, 2), (2, 0, 0)), ((1, 2, 2), (0, 2, 0)), ((1, 2, 2), (1, 2, 0)), ((2, 2, 2), (0, 0, 0)), ((2, 2, 2), (1, 0, 0)), ((2, 2, 2), (2, 0, 0)), ((2, 2, 2), (0, 2, 0)), ((2, 2, 2), (1, 2, 0)), ((2, 2, 2), (2, 2, 0)), ((0, 3, 2), (0, 3, 0)), ((0, 0, 3), (0, 0, 0)), ((0, 0, 3), (0, 3, 0)), ((1, 0, 3), (0, 0, 0)), ((1, 0, 3), (1, 0, 0)), ((1, 0, 3), (2, 0, 0)), ((2, 0, 3), (1, 0, 0)), ((2, 0, 3), (2, 0, 0)), ((0, 1, 3), (0, 1, 0)), ((1, 1, 3), (1, 1, 0)), ((1, 1, 3), (2, 1, 0)), ((2, 1, 3), (1, 1, 0)), ((2, 1, 3), (2, 1, 0)), ((1, 2, 3), (0, 1, 0)), ((1, 2, 3), (1, 1, 0)), ((1, 2, 3), (0, 2, 1)), ((1, 2, 3), (0, 0, 4)), ((2, 2, 3), (0, 0, 0)), ((2, 2, 3), (1, 0, 0)), ((2, 2, 3), (2, 0, 0)), ((2, 2, 3), (0, 1, 0)), ((2, 2, 3), (1, 1, 0)), ((2, 2, 3), (2, 1, 0)), ((2, 2, 3), (0, 2, 0)), ((2, 2, 3), (1, 2, 0)), ((2, 2, 3), (2, 2, 0)), ((2, 2, 3), (0, 0, 1)), ((2, 2, 3), (1, 0, 1)), ((2, 2, 3), (2, 0, 1)), ((2, 2, 3), (0, 1, 1)), ((2, 2, 3), (1, 1, 1)), ((2, 2, 3), (2, 1, 1)), ((2, 2, 3), (1, 2, 1)), ((2, 2, 3), (2, 2, 1)), ((2, 2, 3), (0, 0, 2)), ((2, 2, 3), (1, 0, 2)), ((2, 2, 3), (2, 0, 2)), ((2, 2, 3), (0, 1, 2)), ((2, 2, 3), (1, 1, 2)), ((2, 2, 3), (2, 1, 2)), ((2, 2, 3), (0, 1, 3)), ((2, 2, 3), (1, 1, 3)), ((2, 2, 3), (2, 1, 3)), ((2, 2, 3), (1, 0, 4)), ((2, 2, 3), (2, 0, 4)), ((0, 3, 3), (0, 0, 0)), ((0, 3, 3), (0, 3, 0)), ((1, 0, 4), (0, 0, 0)), ((1, 0, 4), (1, 0, 0)), ((1, 0, 4), (2, 0, 0)), ((1, 0, 4), (0, 1, 0)), ((1, 0, 4), (1, 1, 0)), ((1, 0, 4), (2, 1, 0)), ((1, 0, 4), (0, 2, 0)), ((1, 0, 4), (1, 2, 0)), ((1, 0, 4), (2, 2, 0)), ((1, 0, 4), (0, 0, 1)), ((1, 0, 4), (1, 0, 1)), ((1, 0, 4), (2, 0, 1)), ((1, 0, 4), (0, 1, 1)), ((1, 0, 4), (0, 0, 2)), ((1, 0, 4), (1, 0, 2)), ((1, 0, 4), (0, 1, 2)), ((1, 0, 4), (0, 1, 3)), ((2, 0, 4), (0, 0, 0)), ((2, 0, 4), (1, 0, 0)), ((2, 0, 4), (2, 0, 0)), ((2, 0, 4), (1, 1, 0)), ((2, 0, 4), (2, 1, 0)), ((2, 0, 4), (1, 2, 0)), ((2, 0, 4), (2, 2, 0)), ((2, 0, 4), (1, 0, 1)), ((2, 0, 4), (2, 0, 1)), ((2, 0, 4), (1, 1, 1)), ((2, 0, 4), (2, 1, 1)), ((2, 0, 4), (1, 0, 2)), ((2, 0, 4), (2, 0, 2)), ((2, 0, 4), (1, 1, 2)), ((2, 0, 4), (2, 1, 2)), ((2, 0, 4), (1, 1, 3)), ((2, 0, 4), (2, 1, 3)), ((1, 1, 4), (0, 0, 0)), ((1, 1, 4), (1, 0, 0)), ((1, 1, 4), (2, 0, 0)), ((1, 1, 4), (0, 1, 0)), ((1, 1, 4), (1, 1, 0)), ((1, 1, 4), (2, 1, 0)), ((1, 1, 4), (0, 2, 0)), ((1, 1, 4), (1, 2, 0)), ((1, 1, 4), (2, 2, 0)), ((1, 1, 4), (0, 0, 1)), ((1, 1, 4), (1, 0, 1)), ((1, 1, 4), (2, 0, 1)), ((1, 1, 4), (0, 1, 1)), ((1, 1, 4), (1, 1, 1)), ((1, 1, 4), (2, 1, 1)), ((1, 1, 4), (0, 0, 2)), ((1, 1, 4), (1, 0, 2)), ((1, 1, 4), (2, 0, 2)), ((1, 1, 4), (0, 1, 2)), ((1, 1, 4), (1, 1, 2)), ((1, 1, 4), (0, 1, 3)), ((2, 1, 4), (0, 0, 0)), ((2, 1, 4), (1, 0, 0)), ((2, 1, 4), (2, 0, 0)), ((2, 1, 4), (1, 1, 0)), ((2, 1, 4), (2, 1, 0)), ((2, 1, 4), (1, 2, 0)), ((2, 1, 4), (2, 2, 0)), ((2, 1, 4), (1, 0, 1)), ((2, 1, 4), (2, 0, 1)), ((2, 1, 4), (1, 1, 1)), ((2, 1, 4), (2, 1, 1)), ((2, 1, 4), (1, 0, 2)), ((2, 1, 4), (2, 0, 2)), ((2, 1, 4), (1, 1, 2)), ((2, 1, 4), (2, 1, 2)), ((2, 1, 4), (1, 1, 3)), ((2, 1, 4), (2, 1, 3))]}
   property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, c] {- Input 0 -}
  [b, a, a, a] -> [a, a, a, b] {- Input 1 -}
  [a, b, c] -> [c, b, a] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, c] {- Input 0 -}
  [b, a, a, a] -> [a, a, a, b] {- Input 1 -}
  [a, b, c] ->= [c, b, a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[c, c], [c, b], [b, a], [a, a], [a, c]] -> [ [c, a] , [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[c, c], [c, b], [b, a], [a, a], [a, b]] -> [ [c, a] , [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[c, c], [c, b], [b, a], [a, a], [a, a]] -> [ [c, a] , [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, c], [c, b], [b, a], [a, a], [a, c]] -> [ [b, a] , [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, c], [c, b], [b, a], [a, a], [a, b]] -> [ [b, a] , [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, c], [c, b], [b, a], [a, a], [a, a]] -> [ [b, a] , [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, a], [a, a], [a, c]] -> [ [a, a] , [a, a] , [a, b] , [b, c] , [ c , c ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, c], [c, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, a] , [a, b] , [b, c] , [ c , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, c], [c, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, a] , [a, b] , [b, c] , [ c , a ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[c, b], [b, a], [a, a], [a, a], [a, c]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[c, b], [b, a], [a, a], [a, a], [a, b]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[c, b], [b, a], [a, a], [a, a], [a, a]] -> [ [c, a] , [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, a], [a, c]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, a], [a, b]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, a], [a, a]] -> [ [b, a] , [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, a], [a, c]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [ b , c ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, a], [a, b]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [ b , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, a], [a, a], [a, a]] -> [ [a, a] , [a, a] , [a, a] , [a, b] , [ b , a ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[c, a], [a, b], [b, c], [c, c]] ->= [ [c, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[c, a], [a, b], [b, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[c, a], [a, b], [b, c], [c, a]] ->= [ [c, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, b], [b, c], [c, c]] ->= [ [b, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b], [b, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, b], [b, c], [c, a]] ->= [ [b, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[a, a], [a, b], [b, c], [c, c]] ->= [ [a, c] , [c, b] , [b, a] , [ a , c ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[a, a], [a, b], [b, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, c], [c, a]] ->= [ [a, c] , [c, b] , [b, a] , [ a , a ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[c, a], [a, b], [b, c], [c, b]] ->= [ [c, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, b], [b, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, c], [c, b]] ->= [ [a, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 0/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, c], [c, b]] ->= [ [b, c] , [c, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, b, c] -> [c, b, a] {- Input 2 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1)], epsilons = [((0, 0, 2), (0, 0, 0))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (4,3)\RelRFCmb{2}(3,3)\Split[(2/1,3)\TileAllAll{2}(18/9,9)\Matrix{\Natural}{2}(0/3,8)\Weight(0/1,4)[],(1,3)\RelRFCmb{-1}(0,0)[]]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.241576373000
  min duration 1.241576373000
  total durat. 1.241576373000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 27
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 252}
    , self = 88
    , parent = Nothing
    , duration = 1.241576373000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:59.826877208 UTC
    , finish = 2025-09-03 13:35:01.068453581 UTC
    , thread_cap_info = ("ThreadId 70", 1, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.231231841000
  min duration 1.121653135000
  total durat. 2.352884976000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 60}
    , self = 91
    , parent = Nothing
    , duration = 1.121653135000
    , status = Success
    , start = 2025-09-03 13:35:00.023206228 UTC
    , finish = 2025-09-03 13:35:01.144859363 UTC
    , thread_cap_info = ("ThreadId 102", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 60}
    , self = 99
    , parent = Nothing
    , duration = 1.231231841000
    , status = Success
    , start = 2025-09-03 13:35:00.042571546 UTC
    , finish = 2025-09-03 13:35:01.273803387 UTC
    , thread_cap_info = ("ThreadId 104", 3, False)}
**************************************************
F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                = 30} , self = 54 , parent = Nothing , duration = 0.205961494000 , status
F                = Fail , start = 2025-09-03 13:34:59.789414488 UTC , finish = 2025-09-03
F                13:34:59.995375982 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                
| F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F              = 30} , self = 60 , parent = Nothing , duration = 0.234681304000 , status
| F              = Fail , start = 2025-09-03 13:34:59.79971039 UTC , finish = 2025-09-03
| F              13:35:00.034391694 UTC , thread_cap_info = ("ThreadId 49", 0, False)}
| F              
| | F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F            = 30} , self = 65 , parent = Nothing , duration = 0.315580415000 , status
| | F            = Fail , start = 2025-09-03 13:34:59.803215933 UTC , finish = 2025-09-03
| | F            13:35:00.118796348 UTC , thread_cap_info = ("ThreadId 50", 0, False)}
| | F            
| | | E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | E          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | E          = 252} , self = 88 , parent = Nothing , duration = 1.241576373000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-03 13:34:59.826877208 UTC ,
| | | E          finish = 2025-09-03 13:35:01.068453581 UTC , thread_cap_info = ("ThreadId
| | | E          70", 1, False)}
| | | E          
| | | | S        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | S        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | S        = 252} , self = 85 , parent = Nothing , duration = 0.979423671000 , status
| | | | S        = Success , start = 2025-09-03 13:34:59.846170998 UTC , finish = 2025-09-03
| | | | S        13:35:00.825594669 UTC , thread_cap_info = ("ThreadId 72", 1, False)}
| | | | S        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | F      = 60} , self = 56 , parent = Nothing , duration = 0.140642936000 , status
| | | | | F      = Fail , start = 2025-09-03 13:34:59.875695127 UTC , finish = 2025-09-03
| | | | | F      13:35:00.016338063 UTC , thread_cap_info = ("ThreadId 87", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | F    = 60} , self = 59 , parent = Nothing , duration = 0.141961179000 , status
| | | | | | F    = Fail , start = 2025-09-03 13:34:59.88301163 UTC , finish = 2025-09-03
| | | | | | F    13:35:00.024972809 UTC , thread_cap_info = ("ThreadId 88", 3, False)}
| | | | | | F    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | F  = 60} , self = 69 , parent = Nothing , duration = 0.282900500000 , status
| | | | | | | F  = Fail , start = 2025-09-03 13:34:59.961438719 UTC , finish = 2025-09-03
| | | | | | | F  13:35:00.244339219 UTC , thread_cap_info = ("ThreadId 95", 3, False)}
| | | | | | | F  
F | | | | | | |  
  | | | | F | |  
S | | | |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | |   | |  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
S | | | |   | |  = 6 , total_length = 60} , self = 91 , parent = Nothing , duration = 1.121653135000
S | | | |   | |  , status = Success , start = 2025-09-03 13:35:00.023206228 UTC , finish
S | | | |   | |  = 2025-09-03 13:35:01.144859363 UTC , thread_cap_info = ("ThreadId 102",
S | | | |   | |  3, False)}
S | | | |   | |  
| | | | |   F |  
| F | | |     |  
| F | | |     |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F | | |     |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F | | |     |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F | | |     |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F | | |     |  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F | | |     |  = 0 , alphabet_size = 9 , total_length = 342} , self = 71 , parent = Nothing
| F | | |     |  , duration = 0.339728692000 , status = Fail , start = 2025-09-03 13:35:00.034411533
| F | | |     |  UTC , finish = 2025-09-03 13:35:00.374140225 UTC , thread_cap_info = ("ThreadId
| F | | |     |  105", 0, False)}
| F | | |     |  
| | | | | F   |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F   |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F   |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F   |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F   |  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | | | F   |  = 0 , alphabet_size = 9 , total_length = 342} , self = 70 , parent = Nothing
| | | | | F   |  , duration = 0.245749911000 , status = Fail , start = 2025-09-03 13:35:00.034417472
| | | | | F   |  UTC , finish = 2025-09-03 13:35:00.280167383 UTC , thread_cap_info = ("ThreadId
| | | | | F   |  107", 0, False)}
| | | | | F   |  
| | | | | | S |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S |  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | | S |  = 6 , total_length = 60} , self = 99 , parent = Nothing , duration = 1.231231841000
| | | | | | S |  , status = Success , start = 2025-09-03 13:35:00.042571546 UTC , finish
| | | | | | S |  = 2025-09-03 13:35:01.273803387 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | S |  3, False)}
| | | | | | S |  
| | F | | | | |  
| |   | | | | F  
| |   | | F |    
| F   | |   |    
|     | S   |    
|     E     |    
S           |    
            S    
last 17431 length 80032
