last 5788 length 30730
CNF 5788 vars 30730 clauses
last 692 length 2860
CNF 692 vars 2860 clauses
last 521 length 2076
last 860 length 3731
CNF 860 vars 3731 clauses
last 5844 length 40720
last 581 length 2314
CNF 5844 vars 40720 clauses
CNF 521 vars 2076 clauses
CNF 581 vars 2314 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2624, clauses: 9468
last 2624 length 9468
CNF 2624 vars 9468 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2624, clauses: 9468, status: Satisfied, time: 0.058658654s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2204, clauses: 7860
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7505, clauses: 31019
last 2204 length 7860
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29357
last 7086 length 29357
CNF 2204 vars 7860 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2204, clauses: 7860, status: Satisfied, time: 0.121273542s
CNF 7086 vars 29357 clauses
last 832 length 3637
CNF 832 vars 3637 clauses
last 622 length 2591
CNF 622 vars 2591 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2518, clauses: 9007
last 2518 length 9007
CNF 2518 vars 9007 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7459, clauses: 30843
last 7459 length 30843
CNF 7459 vars 30843 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2518, clauses: 9007, status: Unsatisfied, time: 0.105243244s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [b, a, c] -> [c, c, b, a, a] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [c, b] -> [c] {- Input 2 -}
  [b, a, c] -> [c, c, b, a, a] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a] -> [b] {- Mirror (Input 1) -}
  [b, a] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [b, c] -> [c] {- Mirror (Input 2) -}
  [c, a, b] -> [a, a, b, c, c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [a, a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a, b] |-> [a#, a, b, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, a, b] |-> [a#, b, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, a, b] |-> [b#, c, c] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [a, a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [c#, a, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [a, a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 13A 13A 15A - \
        | 13A 13A 15A - |
        | 13A 13A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a, b] ->= [a, a, b, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(2/8,4)\Matrix{\Arctic}{3}(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 3 , total_length = 12} , self = 39 , parent = Nothing
F          , duration = 0.115541500000 , status = Fail , start = 2025-09-03 11:04:54.312480805
F          UTC , finish = 2025-09-03 11:04:54.428022305 UTC , thread_cap_info = ("ThreadId
F          28", 3, False)}
F          
| F        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F        = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F        = 12} , self = 63 , parent = Nothing , duration = 0.238353669000 , status
| F        = Fail , start = 2025-09-03 11:04:54.316786261 UTC , finish = 2025-09-03
| F        11:04:54.55513993 UTC , thread_cap_info = ("ThreadId 36", 0, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 12} , self = 40 , parent = Nothing
| | F      , duration = 0.110237843000 , status = Fail , start = 2025-09-03 11:04:54.318344806
| | F      UTC , finish = 2025-09-03 11:04:54.428582649 UTC , thread_cap_info = ("ThreadId
| | F      54", 3, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 180} , self = 55 , parent = Nothing , duration = 0.135696842000 , status
| | | F    = Fail , start = 2025-09-03 11:04:54.321135203 UTC , finish = 2025-09-03
| | | F    11:04:54.456832045 UTC , thread_cap_info = ("ThreadId 61", 2, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F  = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F  = 180} , self = 61 , parent = Nothing , duration = 0.163942453000 , status
| | | | F  = Fail , start = 2025-09-03 11:04:54.338336834 UTC , finish = 2025-09-03
| | | | F  11:04:54.502279287 UTC , thread_cap_info = ("ThreadId 63", 2, False)}
| | | | F  
F | | | |  
  | F | |  
  |   F |  
S |     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |     |  = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
S |     |  alphabet_size = 5 , total_length = 45} , self = 65 , parent = Nothing ,
S |     |  duration = 0.125345105000 , status = Success , start = 2025-09-03 11:04:54.458335296
S |     |  UTC , finish = 2025-09-03 11:04:54.583680401 UTC , thread_cap_info = ("ThreadId
S |     |  91", 3, False)}
S |     |  
| | E   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E   |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | E   |  = 5 , total_length = 45} , self = 68 , parent = Nothing , duration = 0.193345851000
| | E   |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:04:54.465000125
| | E   |  UTC , finish = 2025-09-03 11:04:54.658345976 UTC , thread_cap_info = ("ThreadId
| | E   |  95", 3, False)}
| | E   |  
| | | S |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S |  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | S |  alphabet_size = 4 , total_length = 37} , self = 74 , parent = Nothing ,
| | | S |  duration = 0.222093593000 , status = Success , start = 2025-09-03 11:04:54.499975546
| | | S |  UTC , finish = 2025-09-03 11:04:54.722069139 UTC , thread_cap_info = ("ThreadId
| | | S |  98", 3, False)}
| | | S |  
| | | | F  
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | | E  = 4 , total_length = 37} , self = 77 , parent = Nothing , duration = 0.241756151000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:04:54.519064271
| | | | E  UTC , finish = 2025-09-03 11:04:54.760820422 UTC , thread_cap_info = ("ThreadId
| | | | E  100", 3, False)}
| | | | E  
| F | | |  
| F | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F | | |  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F | | |  = 0 , alphabet_size = 9 , total_length = 180} , self = 72 , parent = Nothing
| F | | |  , duration = 0.138494371000 , status = Fail , start = 2025-09-03 11:04:54.57839247
| F | | |  UTC , finish = 2025-09-03 11:04:54.716886841 UTC , thread_cap_info = ("ThreadId
| F | | |  106", 2, False)}
| F | | |  
S | | | |  
  | E | |  
  F   | |  
      S |  
F       |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F       |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F       |  = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
F       |  alphabet_size = 5 , total_length = 41} , self = 81 , parent = Nothing ,
F       |  duration = 0.127431371000 , status = Fail , start = 2025-09-03 11:04:54.750918371
F       |  UTC , finish = 2025-09-03 11:04:54.878349742 UTC , thread_cap_info = ("ThreadId
F       |  121", 2, False)}
F       |  
|       E  
F          
