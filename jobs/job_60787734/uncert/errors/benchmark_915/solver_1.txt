last 1875 length 7953
last 1628 length 6972
CNF 1875 vars 7953 clauses
CNF 1628 vars 6972 clauses
last 472 length 1923
CNF 472 vars 1923 clauses
last 570 length 2301
CNF 570 vars 2301 clauses
last 364 length 1477
last 412 length 1649
CNF 364 vars 1477 clauses
CNF 412 vars 1649 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510
last 1811 length 6510
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1309, clauses: 4675
last 2511 length 10552
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5638, clauses: 23419
last 2796 length 12123
last 1309 length 4675
CNF 1811 vars 6510 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4387, clauses: 18211
last 2146 length 9195
last 2575 length 11070
last 5638 length 23419
CNF 1309 vars 4675 clauses
last 4387 length 18211
CNF 2796 vars 12123 clauses
CNF 2511 vars 10552 clauses
CNF 2146 vars 9195 clauses
CNF 2575 vars 11070 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510, status: Satisfied, time: 0.15579298s
CNF 5638 vars 23419 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1309, clauses: 4675, status: Unsatisfied, time: 0.120894872s
CNF 4387 vars 18211 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4965, clauses: 18707
last 4965 length 18707
CNF 4965 vars 18707 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2644, clauses: 10728
last 2644 length 10728
CNF 2644 vars 10728 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4965, clauses: 18707, status: Satisfied, time: 0.082202919s
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 4 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a] -> [a, a, b] {- Input 0 -}
  [b, a, b] -> [a, b, a] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a] -> [b, a, a] {- Mirror (Input 0) -}
  [b, a, b] -> [a, b, a] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, a, a] |-> [b#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, a, a] |-> [b#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a] |-> [b#, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 3A 6A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 6A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 2A 3A 5A - \
        | 2A 3A 5A - |
        | 2A 3A 5A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 3A 3A 4A - \
        | 3A 3A 4A - |
        | 3A 3A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(4/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4125, clauses: 15239
last 4125 length 15239


**************************************************
E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                = 12} , self = 93 , parent = Nothing , duration = 0.626252477000 , status
E                = Except "AsyncCancelled" , start = 2025-09-03 13:30:21.573334849 UTC ,
E                finish = 2025-09-03 13:30:22.199587326 UTC , thread_cap_info = ("ThreadId
E                43", 1, False)}
E                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 4 , total_length = 64} , self = 64 , parent = Nothing
| F              , duration = 0.178017662000 , status = Fail , start = 2025-09-03 13:30:21.573719231
| F              UTC , finish = 2025-09-03 13:30:21.751736893 UTC , thread_cap_info = ("ThreadId
| F              54", 2, False)}
| F              
| | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F            = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| | F            = 0 , alphabet_size = 4 , total_length = 64} , self = 49 , parent = Nothing
| | F            , duration = 0.129525720000 , status = Fail , start = 2025-09-03 13:30:21.579067185
| | F            UTC , finish = 2025-09-03 13:30:21.708592905 UTC , thread_cap_info = ("ThreadId
| | F            56", 2, False)}
| | F            
| | F            
| | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S            = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | S            = 4 , total_length = 24} , self = 84 , parent = Nothing , duration = 0.315945550000
| | S            , status = Success , start = 2025-09-03 13:30:21.74036052 UTC , finish
| | S            = 2025-09-03 13:30:22.05630607 UTC , thread_cap_info = ("ThreadId 104",
| | S            1, False)}
| | S            
| F |            
| F |            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F |            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |            = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F |            = 3 , total_length = 18} , self = 86 , parent = Nothing , duration = 0.319674792000
| F |            , status = Fail , start = 2025-09-03 13:30:21.754829339 UTC , finish =
| F |            2025-09-03 13:30:22.074504131 UTC , thread_cap_info = ("ThreadId 114",
| F |            1, False)}
| F |            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F          = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | F          = 96} , self = 82 , parent = Nothing , duration = 0.228200865000 , status
| | | F          = Fail , start = 2025-09-03 13:30:21.758403688 UTC , finish = 2025-09-03
| | | F          13:30:21.986604553 UTC , thread_cap_info = ("ThreadId 118", 2, False)}
| | | F          
| | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | E        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | E        = 4 , total_length = 24} , self = 88 , parent = Nothing , duration = 0.423821139000
| | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:30:21.764451078
| | | | E        UTC , finish = 2025-09-03 13:30:22.188272217 UTC , thread_cap_info = ("ThreadId
| | | | E        120", 1, False)}
| | | | E        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | F      = 96} , self = 81 , parent = Nothing , duration = 0.206260922000 , status
| | | | | F      = Fail , start = 2025-09-03 13:30:21.774522132 UTC , finish = 2025-09-03
| | | | | F      13:30:21.980783054 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | F    = 80} , self = 83 , parent = Nothing , duration = 0.152344517000 , status
| | | | | | F    = Fail , start = 2025-09-03 13:30:21.842969741 UTC , finish = 2025-09-03
| | | | | | F    13:30:21.995314258 UTC , thread_cap_info = ("ThreadId 123", 2, False)}
| | | | | | F    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | F  = 80} , self = 85 , parent = Nothing , duration = 0.201273454000 , status
| | | | | | | F  = Fail , start = 2025-09-03 13:30:21.855065054 UTC , finish = 2025-09-03
| | | | | | | F  13:30:22.056338508 UTC , thread_cap_info = ("ThreadId 124", 2, False)}
| | | | | | | F  
| | | | | F | |  
| | | | | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S | |  = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | | | S | |  alphabet_size = 6 , total_length = 96} , self = 90 , parent = Nothing ,
| | | | | S | |  duration = 0.210841459000 , status = Success , start = 2025-09-03 13:30:21.986555854
| | | | | S | |  UTC , finish = 2025-09-03 13:30:22.197397313 UTC , thread_cap_info = ("ThreadId
| | | | | S | |  133", 2, False)}
| | | | | S | |  
| | | F | | | |  
| | |   | | F |  
| | S   | |   |  
| |     | |   F  
| F     | |      
|       E |      
|         S      
E                
CNF 4125 vars 15239 clauses
