last 3530 length 15060
CNF 3530 vars 15060 clauses
last 5052 length 22812
CNF 5052 vars 22812 clauses
last 1246 length 5176
last 972 length 4110
CNF 1246 vars 5176 clauses
last 1233 length 5308
last 974 length 4093
CNF 972 vars 4110 clauses
CNF 1233 vars 5308 clauses
CNF 974 vars 4093 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1798, clauses: 6613
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2634, clauses: 9968
last 1798 length 6613
last 2634 length 9968
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8654, clauses: 36309
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6769, clauses: 28389
CNF 1798 vars 6613 clauses
last 8654 length 36309
last 6769 length 28389
CNF 2634 vars 9968 clauses
CNF 6769 vars 28389 clauses
CNF 8654 vars 36309 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1798, clauses: 6613, status: Unsatisfied, time: 0.257222521s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2634, clauses: 9968, status: Unsatisfied, time: 0.261469738s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6769, clauses: 28389, status: Satisfied, time: 0.143573589s
last 5305 length 22419
CNF 5305 vars 22419 clauses
last 7650 length 34746
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5268, clauses: 22031
last 5268 length 22031
CNF 7650 vars 34746 clauses
CNF 5268 vars 22031 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 11 strict rules and 3 weak rules on 4 letters       weights
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, b] {- Input 0 -}
  [b, b, a, b] -> [a, b, b, a] {- Input 1 -}
  [b, b, a, b] -> [a, a, a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b, b, a, b] ->= [a, b, b, a] {- DP Nontop (Input 1) -}
  [b, b, a, b] ->= [a, a, a, a] {- DP Nontop (Input 2) -}
  [a#, a, b, a] |-> [a#, b] {- DP (Top 2) (Input 0) -}
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [a#, a, b, a] |-> [b#, a, b] {- DP (Top 1) (Input 0) -}
  [b#, b, a, b] |-> [a#] {- Many [DP (Top 3) (Input 2), DP (Top 3) (Input 1)] -}
  [b#, b, a, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [b#, b, a, b] |-> [a#, a, a] {- DP (Top 1) (Input 2) -}
  [b#, b, a, b] |-> [a#, a, a, a] {- DP (Top 0) (Input 2) -}
  [b#, b, a, b] |-> [a#, b, b, a] {- DP (Top 0) (Input 1) -}
  [b#, b, a, b] |-> [b#, a] {- DP (Top 2) (Input 1) -}
  [b#, b, a, b] |-> [b#, b, a] {- DP (Top 1) (Input 1) -}
reason
  (a, 2/1)
  (b, 2/1)
  (a#, 1/1)
  (b#, 2/1)
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b, b, a, b] ->= [a, b, b, a] {- DP Nontop (Input 1) -}
  [b, b, a, b] ->= [a, a, a, a] {- DP Nontop (Input 2) -}
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b, b, a, b] ->= [a, b, b, a] {- DP Nontop (Input 1) -}
  [b, b, a, b] ->= [a, a, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -1A 0A 0A \
        | -1A 0A -  |
        \ -   -  0A / )
  ( b
  , Wk  / 0A  1A  1A \
        | -1A -1A -  |
        \ -   -   0A / )
  ( a#
  , Wk  / - 1A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b, b, a, b] ->= [a, b, b, a] {- DP Nontop (Input 1) -}
  [b, b, a, b] ->= [a, a, a, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee(11/3,4)\Weight\EDG(1/3,3)\Matrix{\ArcticBZ}{3}(0/3,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.643010068000
  min duration 0.245171719000
  total durat. 1.609749357000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.092159749000
  min duration 1.092159749000
  total durat. 1.092159749000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 24}
    , self = 90
    , parent = Nothing
    , duration = 1.092159749000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:54:14.265496649 UTC
    , finish = 2025-09-03 11:54:15.357656398 UTC
    , thread_cap_info = ("ThreadId 43", 0, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                  = 24} , self = 46 , parent = Nothing , duration = 0.319265739000 , status
F                  = Fail , start = 2025-09-03 11:54:14.265412127 UTC , finish = 2025-09-03
F                  11:54:14.584677866 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E                = 24} , self = 90 , parent = Nothing , duration = 1.092159749000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 11:54:14.265496649 UTC ,
| E                finish = 2025-09-03 11:54:15.357656398 UTC , thread_cap_info = ("ThreadId
| E                43", 0, False)}
| E                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | F              = 24} , self = 81 , parent = Nothing , duration = 0.907884038000 , status
| | F              = Fail , start = 2025-09-03 11:54:14.266133686 UTC , finish = 2025-09-03
| | F              11:54:15.174017724 UTC , thread_cap_info = ("ThreadId 39", 1, False)}
| | F              
| | | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F            = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | F            = 0 , alphabet_size = 4 , total_length = 120} , self = 67 , parent = Nothing
| | | F            , duration = 0.643010068000 , status = Fail , start = 2025-09-03 11:54:14.266379092
| | | F            UTC , finish = 2025-09-03 11:54:14.90938916 UTC , thread_cap_info = ("ThreadId
| | | F            54", 1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F          = 120} , self = 44 , parent = Nothing , duration = 0.292078276000 , status
| | | | F          = Fail , start = 2025-09-03 11:54:14.285510215 UTC , finish = 2025-09-03
| | | | F          11:54:14.577588491 UTC , thread_cap_info = ("ThreadId 63", 2, False)}
| | | | F          
| | | | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F        = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | | | F        = 0 , alphabet_size = 4 , total_length = 120} , self = 47 , parent = Nothing
| | | | | F        , duration = 0.309669139000 , status = Fail , start = 2025-09-03 11:54:14.286975875
| | | | | F        UTC , finish = 2025-09-03 11:54:14.596645014 UTC , thread_cap_info = ("ThreadId
| | | | | F        52", 1, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | F      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | F      = 120} , self = 35 , parent = Nothing , duration = 0.108257821000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:54:14.297243528 UTC , finish = 2025-09-03
| | | | | | F      11:54:14.405501349 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
| | | | | | F      
| | | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | | | F    = 0 , alphabet_size = 2 , total_length = 24} , self = 49 , parent = Nothing
| | | | | | | F    , duration = 0.411898431000 , status = Fail , start = 2025-09-03 11:54:14.335504122
| | | | | | | F    UTC , finish = 2025-09-03 11:54:14.747402553 UTC , thread_cap_info = ("ThreadId
| | | | | | | F    70", 3, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | | | | F  = 0 , alphabet_size = 2 , total_length = 24} , self = 48 , parent = Nothing
| | | | | | | | F  , duration = 0.245171719000 , status = Fail , start = 2025-09-03 11:54:14.36186307
| | | | | | | | F  UTC , finish = 2025-09-03 11:54:14.607034789 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F  72", 3, False)}
| | | | | | | | F  
| | | | | | F | |  
| | | | F |   | |  
F | | |   |   | |  
  | | |   F   | |  
  | | |       | F  
  | | |       F    
F | | |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F | | |            = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F | | |            = 32} , self = 66 , parent = Nothing , duration = 0.131499608000 , status
F | | |            = Fail , start = 2025-09-03 11:54:14.7670623 UTC , finish = 2025-09-03
F | | |            11:54:14.898561908 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
F | | |            
| | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F          = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | F          = 4 , total_length = 48} , self = 83 , parent = Nothing , duration = 0.373092237000
| | | | F          , status = Fail , start = 2025-09-03 11:54:14.804557849 UTC , finish =
| | | | F          2025-09-03 11:54:15.177650086 UTC , thread_cap_info = ("ThreadId 104",
| | | | F          3, False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | | F        = 3 , total_length = 32} , self = 82 , parent = Nothing , duration = 0.319374744000
| | | | | F        , status = Fail , start = 2025-09-03 11:54:14.856220544 UTC , finish =
| | | | | F        2025-09-03 11:54:15.175595288 UTC , thread_cap_info = ("ThreadId 106",
| | | | | F        3, False)}
| | | | | F        
F | | | | |        
  | | F | |        
S | |   | |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | |   | |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | |   | |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | |   | |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | |   | |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | |   | |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
S | |   | |        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
S | |   | |        = 3 , total_length = 32} , self = 84 , parent = Nothing , duration = 0.263972193000
S | |   | |        , status = Success , start = 2025-09-03 11:54:14.915521488 UTC , finish
S | |   | |        = 2025-09-03 11:54:15.179493681 UTC , thread_cap_info = ("ThreadId 116",
S | |   | |        3, False)}
S | |   | |        
| | | F | |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | |        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F | |        = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | F | |        = 180} , self = 86 , parent = Nothing , duration = 0.343102733000 , status
| | | F | |        = Fail , start = 2025-09-03 11:54:14.93550193 UTC , finish = 2025-09-03
| | | F | |        11:54:15.278604663 UTC , thread_cap_info = ("ThreadId 120", 1, False)}
| | | F | |        
| | F | | |        
| |   | | F        
| |   | F          
| | E |            Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E |            = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | E |            , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | E |            = 3 , total_length = 32} , self = 87 , parent = Nothing , duration = 0.118577385000
| | E |            , status = Except "AsyncCancelled" , start = 2025-09-03 11:54:15.177899552
| | E |            UTC , finish = 2025-09-03 11:54:15.296476937 UTC , thread_cap_info = ("ThreadId
| | E |            129", 3, False)}
| | E |            
S | | |            
  | | F            
  | E              
  E                
last 4334 length 18636
