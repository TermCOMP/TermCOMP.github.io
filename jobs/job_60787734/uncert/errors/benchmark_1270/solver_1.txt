last 2712 length 12831
CNF 2712 vars 12831 clauses
last 3656 length 17881
CNF 3656 vars 17881 clauses
last 498 length 2130
last 725 length 3316
CNF 498 vars 2130 clauses
last 779 length 3641
last 525 length 2190
CNF 725 vars 3316 clauses
CNF 779 vars 3641 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2180, clauses: 7755
CNF 525 vars 2190 clauses
last 2180 length 7755
CNF 2180 vars 7755 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2298, clauses: 8237
last 2298 length 8237
CNF 2298 vars 8237 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2180, clauses: 7755, status: Unsatisfied, time: 0.110238813s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2298, clauses: 8237, status: Unsatisfied, time: 0.082523141s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7260, clauses: 30177
last 7260 length 30177
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4481, clauses: 18018
CNF 7260 vars 30177 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7306, clauses: 30353
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4556, clauses: 18308
last 4481 length 18018
last 4556 length 18308
last 7306 length 30353
CNF 4481 vars 18018 clauses
CNF 4556 vars 18308 clauses
CNF 7306 vars 30353 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7260, clauses: 30177, status: Satisfied, time: 0.088432553s
last 428 length 1862
last 695 length 3194
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7306, clauses: 30353, status: Satisfied, time: 0.073560904s
CNF 695 vars 3194 clauses
CNF 428 vars 1862 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1967, clauses: 6930
last 1967 length 6930
CNF 1967 vars 6930 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 7 strict rules and 5 weak rules on 6 letters       weights
SRS with 3 strict rules and 5 weak rules on 4 letters       EDG
SRS with 3 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, c, c, a, a, b] {- Input 1 -}
  [b, b] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, c, c, a, a, b] {- Input 1 -}
  [a, b, b] -> [a] {- Input 2 -}
  [b, b, b] -> [b] {- Input 2 -}
  [c, b, b] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [b, a, a, c, c, c] {- Mirror (Input 1) -}
  [b, b, a] -> [a] {- Mirror (Input 2) -}
  [b, b, b] -> [b] {- Mirror (Input 2) -}
  [b, b, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a] |-> [a#, a, c, c, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a] |-> [a#, c, c, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, a, a, c, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / -1A 0A 0A \
        | 0A  1A 0A |
        \ -   -  0A / )
  ( b
  , Wk  / -  0A 0A \
        | 0A -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / 0A 1A -   \
        | -  0A -1A |
        \ -  -  0A  / )
  ( c#
  , Wk  / -1A 1A 0A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(7/5,6)\Weight\EDG(3/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F            = 162} , self = 48 , parent = Nothing , duration = 0.109750202000 , status
F            = Fail , start = 2025-09-03 11:24:44.387785904 UTC , finish = 2025-09-03
F            11:24:44.497536106 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
F            
| E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E          = 12} , self = 85 , parent = Nothing , duration = 0.756650261000 , status
| E          = Except "AsyncCancelled" , start = 2025-09-03 11:24:44.394957733 UTC ,
| E          finish = 2025-09-03 11:24:45.151607994 UTC , thread_cap_info = ("ThreadId
| E          71", 2, False)}
| E          
| | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E        = 12} , self = 84 , parent = Nothing , duration = 0.717064912000 , status
| | E        = Except "AsyncCancelled" , start = 2025-09-03 11:24:44.434522529 UTC ,
| | E        finish = 2025-09-03 11:24:45.151587441 UTC , thread_cap_info = ("ThreadId
| | E        79", 2, False)}
| | E        
| | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F      = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | F      = 0 , alphabet_size = 3 , total_length = 12} , self = 50 , parent = Nothing
| | | F      , duration = 0.239230255000 , status = Fail , start = 2025-09-03 11:24:44.434526794
| | | F      UTC , finish = 2025-09-03 11:24:44.673757049 UTC , thread_cap_info = ("ThreadId
| | | F      77", 3, False)}
| | | F      
F | | |      
  | | F      
F | |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |        = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
F | |        = 4 , total_length = 31} , self = 68 , parent = Nothing , duration = 0.128178567000
F | |        , status = Fail , start = 2025-09-03 11:24:44.703044441 UTC , finish =
F | |        2025-09-03 11:24:44.831223008 UTC , thread_cap_info = ("ThreadId 104",
F | |        3, False)}
F | |        
| | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | S      = 4 , total_length = 31} , self = 70 , parent = Nothing , duration = 0.352731442000
| | | S      , status = Success , start = 2025-09-03 11:24:44.72229068 UTC , finish
| | | S      = 2025-09-03 11:24:45.075022122 UTC , thread_cap_info = ("ThreadId 108",
| | | S      3, False)}
| | | S      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | F    = 4 , total_length = 34} , self = 69 , parent = Nothing , duration = 0.131741572000
| | | | F    , status = Fail , start = 2025-09-03 11:24:44.723102194 UTC , finish =
| | | | F    2025-09-03 11:24:44.854843766 UTC , thread_cap_info = ("ThreadId 110",
| | | | F    3, False)}
| | | | F    
| | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | S  = 4 , total_length = 34} , self = 77 , parent = Nothing , duration = 0.336705114000
| | | | | S  , status = Success , start = 2025-09-03 11:24:44.773503217 UTC , finish
| | | | | S  = 2025-09-03 11:24:45.110208331 UTC , thread_cap_info = ("ThreadId 111",
| | | | | S  3, False)}
| | | | | S  
F | | | | |  
  | | | F |  
E | | |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | |   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
E | | |   |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
E | | |   |  = 4 , total_length = 31} , self = 72 , parent = Nothing , duration = 0.229837120000
E | | |   |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:24:44.871022213
E | | |   |  UTC , finish = 2025-09-03 11:24:45.100859333 UTC , thread_cap_info = ("ThreadId
E | | |   |  113", 3, False)}
E | | |   |  
| | | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | E |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | E |  = 4 , total_length = 34} , self = 80 , parent = Nothing , duration = 0.205354343000
| | | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:24:44.91111534
| | | | E |  UTC , finish = 2025-09-03 11:24:45.116469683 UTC , thread_cap_info = ("ThreadId
| | | | E |  114", 3, False)}
| | | | E |  
| | | S | |  
E | |   | |  
  | |   | S  
  | |   E    
  | E        
  E          
