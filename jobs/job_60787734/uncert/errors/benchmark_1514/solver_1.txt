last 4054 length 17571
CNF 4054 vars 17571 clauses
last 4987 length 21524
CNF 4987 vars 21524 clauses
last 1224 length 5120
CNF 1224 vars 5120 clauses
last 1253 length 5388
last 1917 length 8186
CNF 1253 vars 5388 clauses
CNF 1917 vars 8186 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2602, clauses: 9727
last 2602 length 9727
last 1658 length 7166
CNF 2602 vars 9727 clauses
CNF 1658 vars 7166 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2602, clauses: 9727, status: Satisfied, time: 0.039603683s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3214, clauses: 12250
last 3214 length 12250
CNF 3214 vars 12250 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3214, clauses: 12250, status: Satisfied, time: 0.046087558s
last 946 length 3953
CNF 946 vars 3953 clauses
last 913 length 3739
CNF 913 vars 3739 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 2 letters       DP
SRS with 8 strict rules and 4 weak rules on 4 letters       weights
SRS with 4 strict rules and 4 weak rules on 4 letters       EDG
SRS with 4 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 4 letters       weights
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b, a] -> [b, a, a, a] {- Input 0 -}
  [b, b, b, b] -> [b, a, a, b] {- Input 1 -}
  [a, a, b, a] -> [b, a, b, a] {- Input 2 -}
  [b, a, a, b] -> [a, a, a, b] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [a#, a] {- DP (Top 2) (Input 0) -}
  [b#, b, b, a] |-> [a#, a, a] {- DP (Top 1) (Input 0) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [b#, b, b, b] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 15A 15A 16A - \
        | 15A 15A 16A - |
        | 15A 15A 16A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 15A 15A - \
        | 14A 15A 15A - |
        | 14A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,2)\Deepee(8/4,4)\Weight\EDG(4/4,4)\Matrix{\Arctic}{3}(1/4,4)\Weight(0/4,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 2
  max duration 5.078504663000
  min duration 5.019277448000
  total durat. 10.097782111000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 32}
    , self = 49
    , parent = Nothing
    , duration = 5.019277448000
    , status = Fail
    , start = 2025-09-03 12:04:37.600757074 UTC
    , finish = 2025-09-03 12:04:42.620034522 UTC
    , thread_cap_info = ("ThreadId 51", 1, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 32}
    , self = 50
    , parent = Nothing
    , duration = 5.078504663000
    , status = Fail
    , start = 2025-09-03 12:04:37.592289142 UTC
    , finish = 2025-09-03 12:04:42.670793805 UTC
    , thread_cap_info = ("ThreadId 49", 1, False)}
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F              = 32} , self = 41 , parent = Nothing , duration = 0.226118578000 , status
F              = Fail , start = 2025-09-03 12:04:37.592207168 UTC , finish = 2025-09-03
F              12:04:37.818325746 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F            = 32} , self = 34 , parent = Nothing , duration = 0.111691870000 , status
| F            = Fail , start = 2025-09-03 12:04:37.592258895 UTC , finish = 2025-09-03
| F            12:04:37.703950765 UTC , thread_cap_info = ("ThreadId 37", 2, False)}
| F            
| | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F          = 0 , alphabet_size = 2 , total_length = 32} , self = 50 , parent = Nothing
| | F          , duration = 5.078504663000 , status = Fail , start = 2025-09-03 12:04:37.592289142
| | F          UTC , finish = 2025-09-03 12:04:42.670793805 UTC , thread_cap_info = ("ThreadId
| | F          49", 1, False)}
| | F          
| | | F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | F        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | F        = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | F        = 32} , self = 36 , parent = Nothing , duration = 0.122644555000 , status
| | | F        = Fail , start = 2025-09-03 12:04:37.592447236 UTC , finish = 2025-09-03
| | | F        12:04:37.715091791 UTC , thread_cap_info = ("ThreadId 36", 0, False)}
| | | F        
| | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F      = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | F      = 0 , alphabet_size = 2 , total_length = 32} , self = 49 , parent = Nothing
| | | | F      , duration = 5.019277448000 , status = Fail , start = 2025-09-03 12:04:37.600757074
| | | | F      UTC , finish = 2025-09-03 12:04:42.620034522 UTC , thread_cap_info = ("ThreadId
| | | | F      51", 1, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | F    = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F    = 160} , self = 44 , parent = Nothing , duration = 0.307295276000 , status
| | | | | F    = Fail , start = 2025-09-03 12:04:37.615735921 UTC , finish = 2025-09-03
| | | | | F    12:04:37.923031197 UTC , thread_cap_info = ("ThreadId 61", 3, False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | F  = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | F  = 160} , self = 40 , parent = Nothing , duration = 0.181576994000 , status
| | | | | | F  = Fail , start = 2025-09-03 12:04:37.622513662 UTC , finish = 2025-09-03
| | | | | | F  12:04:37.804090656 UTC , thread_cap_info = ("ThreadId 63", 3, False)}
| | | | | | F  
| F | | | | |  
|   | F | | |  
| F |   | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| F |   | | |  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| F |   | | |  = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
| F |   | | |  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| F |   | | |  = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F |   | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F |   | | |  = 32} , self = 42 , parent = Nothing , duration = 0.107549064000 , status
| F |   | | |  = Fail , start = 2025-09-03 12:04:37.800798418 UTC , finish = 2025-09-03
| F |   | | |  12:04:37.908347482 UTC , thread_cap_info = ("ThreadId 80", 3, False)}
| F |   | | |  
| | |   | | F  
F | |   | |    
  F |   | |    
    |   | F    
    |   F      
    F          
E              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
E              , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
E              = 3 , total_length = 48} , self = 70 , parent = Nothing , duration = 0.134113521000
E              , status = Except "AsyncCancelled" , start = 2025-09-03 12:04:42.768196898
E              UTC , finish = 2025-09-03 12:04:42.902310419 UTC , thread_cap_info = ("ThreadId
E              108", 1, False)}
E              
| S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S            = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| S            = 4 , total_length = 64} , self = 72 , parent = Nothing , duration = 0.144946502000
| S            , status = Success , start = 2025-09-03 12:04:42.802596774 UTC , finish
| S            = 2025-09-03 12:04:42.947543276 UTC , thread_cap_info = ("ThreadId 110",
| S            1, False)}
| S            
| | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E          , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | E          = 4 , total_length = 64} , self = 77 , parent = Nothing , duration = 0.140113659000
| | E          , status = Except "AsyncCancelled" , start = 2025-09-03 12:04:42.861720219
| | E          UTC , finish = 2025-09-03 12:04:43.001833878 UTC , thread_cap_info = ("ThreadId
| | E          112", 1, False)}
| | E          
E | |          
  S |          
    E          
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2182, clauses: 8065
last 2182 length 8065
CNF 2182 vars 8065 clauses
