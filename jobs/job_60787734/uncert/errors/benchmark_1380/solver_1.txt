last 522 length 2141
last 538 length 2154
CNF 522 vars 2141 clauses
last 456 length 1871
last 377 length 1469
CNF 538 vars 2154 clauses
CNF 377 vars 1469 clauses
CNF 456 vars 1871 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8095
last 2266 length 8095
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6540
last 1856 length 6540
CNF 2266 vars 8095 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6753, clauses: 27911
CNF 1856 vars 6540 clauses
last 6753 length 27911
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6334, clauses: 26245
last 6334 length 26245
last 4128 length 18405
CNF 6334 vars 26245 clauses
CNF 6753 vars 27911 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6540, status: Unsatisfied, time: 0.155836165s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2266, clauses: 8095, status: Unsatisfied, time: 0.149331354s
last 3752 length 19340
CNF 3752 vars 19340 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6753, clauses: 27911, status: Satisfied, time: 0.156141814s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4213, clauses: 16763
last 4213 length 16763
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3888, clauses: 15462
last 3888 length 15462
CNF 4213 vars 16763 clauses
CNF 3888 vars 15462 clauses
last 513 length 2106
CNF 513 vars 2106 clauses
**************************************************last 490 length 1968

summary
CNF 490 vars 1968 clauses
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 28 epsilon transitions
SRS with 2 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height -1 and with 2 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [b, c, a, a] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [] {- Mirror (Input 0) -}
  [c, a] -> [a, a, c, b] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, 2), (2, -1)], epsilons = [((0, 2, 0), (1, 1, 0)), ((0, 1, 2), (0, 1, 0)), ((0, 1, 2), (1, 1, 0)), ((1, 1, 2), (0, 1, 0)), ((1, 1, 2), (1, 1, 0)), ((1, 1, 2), (2, 1, 0)), ((2, 1, 2), (1, 1, 0)), ((2, 1, 2), (2, 1, 0)), ((0, 1, 3), (0, 0, 0)), ((0, 1, 3), (1, 1, 0)), ((0, 1, 3), (0, 2, 0)), ((1, 1, 3), (0, 0, 0)), ((1, 1, 3), (0, 1, 0)), ((1, 1, 3), (1, 1, 0)), ((1, 1, 3), (2, 1, 0)), ((1, 1, 3), (0, 2, 0)), ((1, 1, 3), (0, 1, 2)), ((1, 1, 3), (1, 1, 2)), ((2, 1, 3), (0, 1, 0)), ((2, 1, 3), (1, 1, 0)), ((2, 1, 3), (2, 1, 0)), ((2, 1, 3), (1, 1, 2)), ((2, 1, 3), (2, 1, 2)), ((1, 1, 4), (0, 1, 1)), ((1, 1, 4), (1, 1, 1)), ((1, 1, 4), (0, 2, 2)), ((2, 1, 4), (1, 1, 1)), ((2, 1, 4), (2, 1, 1))]}
   property Termination
has value Just True
for SRS
  [b, a] -> [] {- Mirror (Input 0) -}
  [c, a] -> [a, a, c, b] {- Mirror (Input 1) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, -1)], epsilons = [((0, 1, 2), (0, 1, 0)), ((0, 1, 3), (0, 0, 0))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: \Mirror(3,3)\RelRFCmb{2}(2,3)\RelRFCmb{-1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 9 , total_length = 162} , self = 73 , parent = Nothing
F              , duration = 0.446949624000 , status = Fail , start = 2025-09-03 11:48:29.260652561
F              UTC , finish = 2025-09-03 11:48:29.707602185 UTC , thread_cap_info = ("ThreadId
F              54", 1, False)}
F              
| F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F            = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F            = 0 , alphabet_size = 9 , total_length = 162} , self = 54 , parent = Nothing
| F            , duration = 0.123207597000 , status = Fail , start = 2025-09-03 11:48:29.260656064
| F            UTC , finish = 2025-09-03 11:48:29.383863661 UTC , thread_cap_info = ("ThreadId
| F            56", 1, False)}
| F            
| | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F          = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | F          = 5 , total_length = 34} , self = 59 , parent = Nothing , duration = 0.261962506000
| | F          , status = Fail , start = 2025-09-03 11:48:29.292384576 UTC , finish =
| | F          2025-09-03 11:48:29.554347082 UTC , thread_cap_info = ("ThreadId 86", 2,
| | F          False)}
| | F          
| | | S        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | S        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | S        = 5 , total_length = 34} , self = 64 , parent = Nothing , duration = 0.327767092000
| | | S        , status = Success , start = 2025-09-03 11:48:29.305225955 UTC , finish
| | | S        = 2025-09-03 11:48:29.632993047 UTC , thread_cap_info = ("ThreadId 87",
| | | S        2, False)}
| | | S        
| | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | E      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | E      = 162} , self = 60 , parent = Nothing , duration = 0.238516990000 , status
| | | | E      = Except "AsyncCancelled" , start = 2025-09-03 11:48:29.326723345 UTC ,
| | | | E      finish = 2025-09-03 11:48:29.565240335 UTC , thread_cap_info = ("ThreadId
| | | | E      96", 0, False)}
| | | | E      
| | | | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | E    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | E    = 162} , self = 66 , parent = Nothing , duration = 0.323087196000 , status
| | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:48:29.345630788 UTC ,
| | | | | E    finish = 2025-09-03 11:48:29.668717984 UTC , thread_cap_info = ("ThreadId
| | | | | E    98", 0, False)}
| | | | | E    
| | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F  = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | | F  = 4 , total_length = 26} , self = 58 , parent = Nothing , duration = 0.202876256000
| | | | | | F  , status = Fail , start = 2025-09-03 11:48:29.345638161 UTC , finish =
| | | | | | F  2025-09-03 11:48:29.548514417 UTC , thread_cap_info = ("ThreadId 91", 2,
| | | | | | F  False)}
| | | | | | F  
| F | | | | |  
|   | | | | F  
|   F | | |    
|     | E |    
| E   |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E   |   |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E   |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E   |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E   |   |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| E   |   |    = 5 , total_length = 34} , self = 68 , parent = Nothing , duration = 0.133094441000
| E   |   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:48:29.569971874
| E   |   |    UTC , finish = 2025-09-03 11:48:29.703066315 UTC , thread_cap_info = ("ThreadId
| E   |   |    117", 2, False)}
| E   |   |    
| |   S   |    
| |       E    
| E            
F              
