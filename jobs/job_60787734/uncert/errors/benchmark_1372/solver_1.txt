last 1982 length 8724
CNF 1982 vars 8724 clauses
last 1468 length 6382
CNF 1468 vars 6382 clauses
last 566 length 2247
CNF 566 vars 2247 clauses
last 533 length 2246
CNF 533 vars 2246 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2041, clauses: 7492
last 442 length 1757
last 2041 length 7492
CNF 442 vars 1757 clauses
last 413 length 1630
CNF 2041 vars 7492 clauses
CNF 413 vars 1630 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2041, clauses: 7492, status: Satisfied, time: 0.064932655s
last 4862 length 22077
last 3933 length 16534
CNF 4862 vars 22077 clauses
last 6536 length 28530
CNF 3933 vars 16534 clauses
last 5367 length 22610
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6430
last 1810 length 6430
CNF 5367 vars 22610 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5764, clauses: 23811
last 5764 length 23811
CNF 1810 vars 6430 clauses
CNF 6536 vars 28530 clauses
CNF 5764 vars 23811 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4873, clauses: 19971
last 4873 length 19971
CNF 4873 vars 19971 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6430, status: Satisfied, time: 0.154946526s
last 542 length 2155
CNF 542 vars 2155 clauses
last 502 length 2127
CNF 502 vars 2127 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1842, clauses: 6755
last 1842 length 6755
CNF 1842 vars 6755 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7449, clauses: 29585
last 7449 length 29585
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7651, clauses: 30079
last 7651 length 30079
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1842, clauses: 6755, status: Unsatisfied, time: 0.129554521s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5426, clauses: 22401
CNF 7449 vars 29585 clauses
**************************************************
CNF 7651 vars 30079 clauses
last 5426 length 22401
summary
**************************************************
SRS with 2 rules on 3 letters       mirror
SRS with 2 rules on 3 letters       DP
SRS with 3 strict rules and 2 weak rules on 5 letters       EDG
SRS with 3 strict rules and 2 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 2 weak rules on 5 letters       EDG
SRS with 2 strict rules and 2 weak rules on 5 letters       Usable
SRS with 2 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [c, b, a, a, a] {- Input 0 -}
  [a, c] -> [b, a] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, a, a, b, c] {- Mirror (Input 0) -}
  [c, a] -> [a, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, b, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, c] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#, c] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, a, a, b, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 19A 19A 20A - \
        | 19A 19A 20A - |
        | 19A 19A 20A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 19A 19A 22A - \
        | 19A 19A 22A - |
        | 19A 19A 22A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, a, a, b, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, a, a, b, c] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  remove un-usable
    SRS
      [b, a, a] ->= [a, a, a, b, c] {- DP Nontop (Mirror (Input 0)) -}
      [c, a] ->= [a, b] {- DP Nontop (Mirror (Input 1)) -}
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [c#] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(2,3)\Deepee\EDG(3/2,5)\Matrix{\Arctic}{3}\EDG(2/2,5)\Usable(2,3)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 1
  max duration 1.015397327000
  min duration 1.015397327000
  total durat. 1.015397327000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 102
    , parent = Nothing
    , duration = 1.015397327000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:42:21.729386673 UTC
    , finish = 2025-09-03 11:42:22.744784 UTC
    , thread_cap_info = ("ThreadId 22", 2, False)}
**************************************************
E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                = 12} , self = 102 , parent = Nothing , duration = 1.015397327000 , status
E                = Except "AsyncCancelled" , start = 2025-09-03 11:42:21.729386673 UTC ,
E                finish = 2025-09-03 11:42:22.744784 UTC , thread_cap_info = ("ThreadId
E                22", 2, False)}
E                
| F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F              = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| F              = 0 , alphabet_size = 7 , total_length = 72} , self = 47 , parent = Nothing
| F              , duration = 0.135289070000 , status = Fail , start = 2025-09-03 11:42:21.751296563
| F              UTC , finish = 2025-09-03 11:42:21.886585633 UTC , thread_cap_info = ("ThreadId
| F              62", 0, False)}
| F              
| | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F            = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| | F            = 0 , alphabet_size = 7 , total_length = 72} , self = 51 , parent = Nothing
| | F            , duration = 0.139050555000 , status = Fail , start = 2025-09-03 11:42:21.751304193
| | F            UTC , finish = 2025-09-03 11:42:21.890354748 UTC , thread_cap_info = ("ThreadId
| | F            64", 0, False)}
| | F            
| F |            
|   F            
| F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| F              = 18 , num_top_rules = 18 , num_weak_rules = 8 , alphabet_size = 11 , total_length
| F              = 179} , self = 86 , parent = Nothing , duration = 0.407317067000 , status
| F              = Fail , start = 2025-09-03 11:42:21.898879216 UTC , finish = 2025-09-03
| F              11:42:22.306196283 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| F              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| | F            = 18 , num_top_rules = 18 , num_weak_rules = 8 , alphabet_size = 11 , total_length
| | F            = 179} , self = 85 , parent = Nothing , duration = 0.376748618000 , status
| | F            = Fail , start = 2025-09-03 11:42:21.913268514 UTC , finish = 2025-09-03
| | F            11:42:22.290017132 UTC , thread_cap_info = ("ThreadId 100", 0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | F          = 16 , num_top_rules = 16 , num_weak_rules = 8 , alphabet_size = 9 , total_length
| | | F          = 184} , self = 87 , parent = Nothing , duration = 0.402167476000 , status
| | | F          = Fail , start = 2025-09-03 11:42:21.924573374 UTC , finish = 2025-09-03
| | | F          11:42:22.32674085 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | F        = 16 , num_top_rules = 16 , num_weak_rules = 8 , alphabet_size = 9 , total_length
| | | | F        = 184} , self = 84 , parent = Nothing , duration = 0.329809319000 , status
| | | | F        = Fail , start = 2025-09-03 11:42:21.944579121 UTC , finish = 2025-09-03
| | | | F        11:42:22.27438844 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
| | | | F        
| | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | | | E      = 4 , total_length = 30} , self = 88 , parent = Nothing , duration = 0.360306489000
| | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:22.033126599
| | | | | E      UTC , finish = 2025-09-03 11:42:22.393433088 UTC , thread_cap_info = ("ThreadId
| | | | | E      123", 3, False)}
| | | | | E      
| | | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S    = 5 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | | | | | S    = 5 , total_length = 24} , self = 90 , parent = Nothing , duration = 0.243608635000
| | | | | | S    , status = Success , start = 2025-09-03 11:42:22.165189869 UTC , finish
| | | | | | S    = 2025-09-03 11:42:22.408798504 UTC , thread_cap_info = ("ThreadId 128",
| | | | | | S    3, False)}
| | | | | | S    
| | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | | | | | | E  = 5 , total_length = 24} , self = 95 , parent = Nothing , duration = 0.347632212000
| | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:22.185047699
| | | | | | | E  UTC , finish = 2025-09-03 11:42:22.532679911 UTC , thread_cap_info = ("ThreadId
| | | | | | | E  129", 3, False)}
| | | | | | | E  
| | | | F | | |  
| | F |   | | |  
| F   |   | | |  
|     F   | | |  
|         E | |  
|           S |  
|             E  
E                
