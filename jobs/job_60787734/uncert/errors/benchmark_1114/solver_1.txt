last 5169 length 28305
CNF 5169 vars 28305 clauses
last 6131 length 41606
CNF 6131 vars 41606 clauses
last 962 length 4350
CNF 962 vars 4350 clauses
last 905 length 3810
last 831 length 3462
CNF 831 vars 3462 clauses
CNF 905 vars 3810 clauses
last 1176 length 5412
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8748
last 2399 length 8748
CNF 1176 vars 5412 clauses
CNF 2399 vars 8748 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7926, clauses: 33021
last 7926 length 33021
CNF 7926 vars 33021 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8748, status: Satisfied, time: 0.109489441s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2610, clauses: 9560
last 2610 length 9560
CNF 2610 vars 9560 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8556, clauses: 35675
last 8556 length 35675
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2610, clauses: 9560, status: Satisfied, time: 0.014470635s
CNF 8556 vars 35675 clauses
last 907 length 4137
CNF 907 vars 4137 clauses
last 672 length 2817
CNF 672 vars 2817 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2291, clauses: 8226
last 2291 length 8226
CNF 2291 vars 8226 clauses
last 670 length 2805
CNF 670 vars 2805 clauses
last 839 length 3635
CNF 839 vars 3635 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8172, clauses: 34065
last 8172 length 34065
CNF 8172 vars 34065 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2291, clauses: 8226, status: Unsatisfied, time: 0.129384166s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2282, clauses: 8193
last 2282 length 8193
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7634, clauses: 31761
last 7634 length 31761
CNF 2282 vars 8193 clauses
CNF 7634 vars 31761 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5046, clauses: 20378
last 5046 length 20378
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2282, clauses: 8193, status: Satisfied, time: 0.088566619s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7634, clauses: 31761, status: Satisfied, time: 0.08727246s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 5 strict rules and 7 weak rules on 5 letters       weights
SRS with 3 strict rules and 7 weak rules on 4 letters       EDG
SRS with 3 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, a, b, b, a, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, a, c] {- Mirror (Input 1) -}
  [c, b] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, a, c] {- Mirror (Input 1) -}
  [a, c, b] -> [a] {- Mirror (Input 2) -}
  [b, c, b] -> [b] {- Mirror (Input 2) -}
  [c, c, b] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, a, b] -> [c, a, b, b, a, a] {- Input 1 -}
  [b, c, a] -> [a] {- Input 2 -}
  [b, c, b] -> [b] {- Input 2 -}
  [b, c, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [b#, b, a, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A -  -   \
        | -  0A -1A |
        \ -  -  0A  / )
  ( b
  , Wk  / 1A 1A 1A \
        | -  0A 1A |
        \ -  -  0A / )
  ( c
  , Wk  / -1A -  1A  \
        | -   0A -1A |
        \ -   -  0A  / )
  ( a#
  , Wk  / 1A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(7,3)\Deepee(5/7,5)\Weight\EDG(3/7,4)\Matrix{\Arctic}{3}\EDG(2/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 12} , self = 36 , parent = Nothing , duration = 0.157216252000 , status
F          = Fail , start = 2025-09-03 11:01:30.082075045 UTC , finish = 2025-09-03
F          11:01:30.239291297 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F          
| F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F        = 12} , self = 65 , parent = Nothing , duration = 0.378506374000 , status
| F        = Fail , start = 2025-09-03 11:01:30.082088463 UTC , finish = 2025-09-03
| F        11:01:30.460594837 UTC , thread_cap_info = ("ThreadId 39", 3, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 9 , total_length = 162} , self = 46 , parent = Nothing
| | F      , duration = 0.232127316000 , status = Fail , start = 2025-09-03 11:01:30.083384713
| | F      UTC , finish = 2025-09-03 11:01:30.315512029 UTC , thread_cap_info = ("ThreadId
| | F      55", 2, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 162} , self = 42 , parent = Nothing , duration = 0.191734188000 , status
| | | F    = Fail , start = 2025-09-03 11:01:30.08967857 UTC , finish = 2025-09-03
| | | F    11:01:30.281412758 UTC , thread_cap_info = ("ThreadId 63", 1, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | F  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F  = 162} , self = 48 , parent = Nothing , duration = 0.231597044000 , status
| | | | F  = Fail , start = 2025-09-03 11:01:30.101409799 UTC , finish = 2025-09-03
| | | | F  11:01:30.333006843 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
| | | | F  
F | | | |  
F | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | | |  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F | | | |  = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
F | | | |  , duration = 0.106620472000 , status = Fail , start = 2025-09-03 11:01:30.26074374
F | | | |  UTC , finish = 2025-09-03 11:01:30.367364212 UTC , thread_cap_info = ("ThreadId
F | | | |  76", 3, False)}
F | | | |  
| | | F |  
| | F   |  
| |     F  
F |        
S |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |        = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
S |        = 4 , total_length = 43} , self = 68 , parent = Nothing , duration = 0.186650908000
S |        , status = Success , start = 2025-09-03 11:01:30.396012733 UTC , finish
S |        = 2025-09-03 11:01:30.582663641 UTC , thread_cap_info = ("ThreadId 103",
S |        3, False)}
S |        
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | E      = 4 , total_length = 43} , self = 70 , parent = Nothing , duration = 0.201013119000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:30.440785839
| | E      UTC , finish = 2025-09-03 11:01:30.641798958 UTC , thread_cap_info = ("ThreadId
| | E      105", 3, False)}
| | E      
| F |      
| S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |      = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| S |      alphabet_size = 4 , total_length = 47} , self = 71 , parent = Nothing ,
| S |      duration = 0.142661801000 , status = Success , start = 2025-09-03 11:01:30.501465975
| S |      UTC , finish = 2025-09-03 11:01:30.644127776 UTC , thread_cap_info = ("ThreadId
| S |      109", 3, False)}
| S |      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | | E    = 4 , total_length = 47} , self = 79 , parent = Nothing , duration = 0.161951745000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:30.520759356
| | | E    UTC , finish = 2025-09-03 11:01:30.682711101 UTC , thread_cap_info = ("ThreadId
| | | E    110", 3, False)}
| | | E    
S | | |    
  | E |    
  S   |    
      E    
F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F          = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
F          = 4 , total_length = 37} , self = 86 , parent = Nothing , duration = 0.302652546000
F          , status = Fail , start = 2025-09-03 11:01:30.68276282 UTC , finish = 2025-09-03
F          11:01:30.985415366 UTC , thread_cap_info = ("ThreadId 123", 3, False)}
F          
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| S        = 4 , total_length = 39} , self = 87 , parent = Nothing , duration = 0.267382070000
| S        , status = Success , start = 2025-09-03 11:01:30.82575545 UTC , finish
| S        = 2025-09-03 11:01:31.09313752 UTC , thread_cap_info = ("ThreadId 133",
| S        3, False)}
| S        
| | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | S      = 4 , total_length = 39} , self = 89 , parent = Nothing , duration = 0.243164788000
| | S      , status = Success , start = 2025-09-03 11:01:30.850489657 UTC , finish
| | S      = 2025-09-03 11:01:31.093654445 UTC , thread_cap_info = ("ThreadId 135",
| | S      3, False)}
| | S      
F | |      
  S |      
    S      
CNF 5046 vars 20378 clauses
