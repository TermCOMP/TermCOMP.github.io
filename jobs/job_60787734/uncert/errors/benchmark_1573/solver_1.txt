last 11564 length 79611
CNF 11564 vars 79611 clauses
last 9166 length 70438
CNF 9166 vars 70438 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       admits a non-terminating transport system
with pivot [a, a, a, a, a, a, a, a, a]
alphabet [[a], [a, b]]
pivot represented as [[a], [a], [a], [a], [a], [a], [a], [a], [a]]
derivations for transport system
  [a]
    [a] pivot ->^0 pivot [[a]]
    because of derivation
      [a, a, a, a, a, a, a, a, a, a] ->^0 [a, a, a, a, a, a, a, a, a, a]
      via steps 
      contains strict step False
  [a, b]
    [a, b] pivot ->^1 pivot [[a], [a, b], [a, b]]
    because of derivation
      [a, b, a, a, a, a, a, a, a, a, a] ->^1 [a, a, a, a, a, a, a, a, a, a, a, b, a, b]
      via steps Step   { rule = 0, position = 0, s_strict = True}
      contains strict step True
infinite derivation starts at
  [[a, b]] pivot ^ 13

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, b, a, a, a, a, a, a, a, a, a] -> [ a , a , a , a , a , a , a , a , a , a , a , b , a , b ] {- Input 0 -}
reason
  admits a non-terminating transport system
  with pivot [a, a, a, a, a, a, a, a, a]
  alphabet [[a], [a, b]]
  pivot represented as [[a], [a], [a], [a], [a], [a], [a], [a], [a]]
  derivations for transport system
    [a]
      [a] pivot ->^0 pivot [[a]]
      because of derivation
        [a, a, a, a, a, a, a, a, a, a] ->^0 [a, a, a, a, a, a, a, a, a, a]
        via steps 
        contains strict step False
    [a, b]
      [a, b] pivot ->^1 pivot [[a], [a, b], [a, b]]
      because of derivation
        [a, b, a, a, a, a, a, a, a, a, a] ->^1 [a, a, a, a, a, a, a, a, a, a, a, b, a, b]
        via steps Step   { rule = 0, position = 0, s_strict = True}
        contains strict step True
  infinite derivation starts at
    [[a, b]] pivot ^ 13

**************************************************
skeleton: (1,2)\Transport{}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.150562421000
  min duration 1.150562421000
  total durat. 1.150562421000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 108}
    , self = 55
    , parent = Nothing
    , duration = 1.150562421000
    , status = Fail
    , start = 2025-09-03 12:34:23.973581067 UTC
    , finish = 2025-09-03 12:34:25.124143488 UTC
    , thread_cap_info = ("ThreadId 64", 2, False)}
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 5
  max duration 1.241126961000
  min duration 0.437559571000
  total durat. 3.972203946000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 23}
    , self = 56
    , parent = Nothing
    , duration = 1.014139367000
    , status = Fail
    , start = 2025-09-03 12:34:24.163198168 UTC
    , finish = 2025-09-03 12:34:25.177337535 UTC
    , thread_cap_info = ("ThreadId 104", 1, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 25}
    , self = 57
    , parent = Nothing
    , duration = 1.241126961000
    , status = Fail
    , start = 2025-09-03 12:34:24.127655094 UTC
    , finish = 2025-09-03 12:34:25.368782055 UTC
    , thread_cap_info = ("ThreadId 101", 1, False)}
Success : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 1
  max duration 1.418596263000
  min duration 1.418596263000
  total durat. 1.418596263000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 25}
    , self = 58
    , parent = Nothing
    , duration = 1.418596263000
    , status = Success
    , start = 2025-09-03 12:34:23.951735054 UTC
    , finish = 2025-09-03 12:34:25.370331317 UTC
    , thread_cap_info = ("ThreadId 22", 1, False)}
**************************************************
S                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
S                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
S                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
S                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
S                = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
S                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
S                = 25} , self = 58 , parent = Nothing , duration = 1.418596263000 , status
S                = Success , start = 2025-09-03 12:34:23.951735054 UTC , finish = 2025-09-03
S                12:34:25.370331317 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
S                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F              = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F              = 108} , self = 53 , parent = Nothing , duration = 0.771496872000 , status
| F              = Fail , start = 2025-09-03 12:34:23.973576915 UTC , finish = 2025-09-03
| F              12:34:24.745073787 UTC , thread_cap_info = ("ThreadId 62", 2, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F            = 108} , self = 55 , parent = Nothing , duration = 1.150562421000 , status
| | F            = Fail , start = 2025-09-03 12:34:23.973581067 UTC , finish = 2025-09-03
| | F            12:34:25.124143488 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
| | F            
| | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | F          = 0 , alphabet_size = 4 , total_length = 108} , self = 52 , parent = Nothing
| | | F          , duration = 0.626964325000 , status = Fail , start = 2025-09-03 12:34:24.103408919
| | | F          UTC , finish = 2025-09-03 12:34:24.730373244 UTC , thread_cap_info = ("ThreadId
| | | F          95", 3, False)}
| | | F          
| | | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F        = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | F        = 0 , alphabet_size = 2 , total_length = 25} , self = 57 , parent = Nothing
| | | | F        , duration = 1.241126961000 , status = Fail , start = 2025-09-03 12:34:24.127655094
| | | | F        UTC , finish = 2025-09-03 12:34:25.368782055 UTC , thread_cap_info = ("ThreadId
| | | | F        101", 1, False)}
| | | | F        
| | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F      = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | F      = 0 , alphabet_size = 2 , total_length = 23} , self = 56 , parent = Nothing
| | | | | F      , duration = 1.014139367000 , status = Fail , start = 2025-09-03 12:34:24.163198168
| | | | | F      UTC , finish = 2025-09-03 12:34:25.177337535 UTC , thread_cap_info = ("ThreadId
| | | | | F      104", 1, False)}
| | | | | F      
| | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F    = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | F    = 0 , alphabet_size = 2 , total_length = 23} , self = 51 , parent = Nothing
| | | | | | F    , duration = 0.437559571000 , status = Fail , start = 2025-09-03 12:34:24.183196563
| | | | | | F    UTC , finish = 2025-09-03 12:34:24.620756134 UTC , thread_cap_info = ("ThreadId
| | | | | | F    106", 1, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 0 , alphabet_size = 2 , total_length = 25} , self = 54 , parent = Nothing
| | | | | | | F  , duration = 0.652413722000 , status = Fail , start = 2025-09-03 12:34:24.223215808
| | | | | | | F  UTC , finish = 2025-09-03 12:34:24.87562953 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  109", 1, False)}
| | | | | | | F  
| | | | | | F |  
| | | F | |   |  
| F |   | |   |  
|   |   | |   F  
|   F   | |      
|       | F      
|       F        
S                
