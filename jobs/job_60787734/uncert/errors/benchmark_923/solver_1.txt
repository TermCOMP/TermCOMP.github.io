last 2047 length 9306
last 1552 length 6376
last 2120 length 9074
CNF 1552 vars 6376 clauses
last 1846 length 8004
CNF 2047 vars 9306 clauses
CNF 1846 vars 8004 clauses
CNF 2120 vars 9074 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6724, clauses: 23929
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 24111
last 6674 length 24111
last 6724 length 23929
CNF 6674 vars 24111 clauses
CNF 6724 vars 23929 clauses
**************************************************
summary
**************************************************
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 24111, status: Satisfied, time: 0.242252672s
SRS with 10 rules on 8 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 285 epsilon transitions
SRS with 8 rules on 7 letters       mirror
SRS with 8 rules on 7 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 88 epsilon transitions
SRS with 5 rules on 6 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 9 epsilon transitions
SRS with 2 rules on 4 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height -1 and with 0 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [p, 0] -> [0, s, s, p] {- Input 0 -}
  [p, s] -> [] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [g, s] {- Input 3 -}
  [g] -> [i, s, half] {- Input 4 -}
  [i] -> [f, p] {- Input 5 -}
  [half, 0] -> [0, s, s, half] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [0] -> [] {- Input 8 -}
  [rd, 0] -> [0, 0, 0, 0, 0, 0, rd] {- Input 9 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, -1)], epsilons = [((0, 0, 0), (0, 0, 1)), ((0, 2, 0), (0, 0, 0)), ((0, 2, 0), (0, 1, 0)), ((0, 2, 0), (0, 2, 0)), ((0, 2, 0), (0, 0, 1)), ((1, 2, 0), (0, 7, 6)), ((2, 2, 0), (0, 0, 0)), ((2, 2, 0), (0, 1, 0)), ((2, 2, 0), (0, 2, 0)), ((2, 2, 0), (0, 6, 0)), ((2, 2, 0), (1, 6, 0)), ((2, 2, 0), (2, 6, 0)), ((2, 2, 0), (0, 7, 0)), ((2, 2, 0), (1, 7, 0)), ((2, 2, 0), (2, 7, 0)), ((2, 2, 0), (0, 0, 1)), ((2, 2, 0), (0, 6, 1)), ((2, 2, 0), (1, 6, 1)), ((2, 2, 0), (2, 6, 1)), ((2, 2, 0), (0, 7, 1)), ((2, 2, 0), (1, 7, 1)), ((2, 2, 0), (2, 7, 1)), ((2, 2, 0), (0, 6, 2)), ((2, 2, 0), (1, 6, 2)), ((2, 2, 0), (2, 6, 2)), ((2, 2, 0), (0, 0, 3)), ((2, 2, 0), (0, 6, 3)), ((2, 2, 0), (1, 6, 3)), ((2, 2, 0), (2, 6, 3)), ((2, 2, 0), (1, 7, 6)), ((2, 2, 0), (2, 7, 6)), ((0, 3, 0), (1, 3, 0)), ((0, 3, 0), (2, 3, 0)), ((0, 3, 0), (1, 4, 0)), ((0, 3, 0), (2, 4, 0)), ((0, 3, 0), (2, 5, 0)), ((1, 3, 0), (1, 3, 0)), ((1, 3, 0), (2, 3, 0)), ((1, 3, 0), (2, 4, 0)), ((1, 3, 0), (2, 5, 0)), ((2, 3, 0), (1, 3, 0)), ((2, 3, 0), (2, 3, 0)), ((2, 3, 0), (2, 4, 0)), ((2, 3, 0), (2, 5, 0)), ((0, 4, 0), (1, 3, 0)), ((0, 4, 0), (2, 3, 0)), ((0, 4, 0), (2, 4, 0)), ((0, 4, 0), (1, 5, 0)), ((0, 4, 0), (2, 5, 0)), ((1, 4, 0), (1, 3, 0)), ((1, 4, 0), (2, 3, 0)), ((1, 4, 0), (2, 4, 0)), ((1, 4, 0), (2, 5, 0)), ((2, 4, 0), (1, 3, 0)), ((2, 4, 0), (2, 3, 0)), ((2, 4, 0), (2, 4, 0)), ((2, 4, 0), (2, 5, 0)), ((0, 5, 0), (0, 3, 0)), ((0, 5, 0), (1, 3, 0)), ((0, 5, 0), (2, 3, 0)), ((0, 5, 0), (1, 4, 0)), ((0, 5, 0), (2, 4, 0)), ((0, 5, 0), (2, 5, 0)), ((1, 5, 0), (1, 3, 0)), ((1, 5, 0), (2, 3, 0)), ((1, 5, 0), (2, 4, 0)), ((1, 5, 0), (2, 5, 0)), ((2, 5, 0), (1, 3, 0)), ((2, 5, 0), (2, 3, 0)), ((2, 5, 0), (2, 4, 0)), ((2, 5, 0), (2, 5, 0)), ((0, 6, 0), (0, 6, 1)), ((1, 6, 0), (1, 6, 1)), ((2, 6, 0), (2, 6, 1)), ((0, 9, 0), (0, 9, 0)), ((0, 9, 0), (0, 9, 1)), ((0, 9, 0), (0, 9, 2)), ((0, 9, 0), (0, 9, 3)), ((0, 9, 0), (0, 9, 4)), ((0, 9, 0), (0, 9, 5)), ((0, 9, 0), (0, 9, 6)), ((1, 2, 1), (0, 7, 5)), ((2, 2, 1), (1, 7, 5)), ((2, 2, 1), (2, 7, 5)), ((0, 5, 1), (0, 0, 0)), ((0, 5, 1), (0, 1, 0)), ((0, 5, 1), (0, 2, 0)), ((0, 5, 1), (0, 0, 1)), ((1, 5, 1), (0, 6, 0)), ((1, 5, 1), (0, 7, 0)), ((1, 5, 1), (0, 6, 1)), ((1, 5, 1), (0, 4, 2)), ((2, 5, 1), (0, 7, 0)), ((2, 5, 1), (1, 7, 0)), ((2, 5, 1), (2, 7, 0)), ((2, 5, 1), (1, 4, 2)), ((2, 5, 1), (2, 4, 2)), ((0, 7, 1), (0, 6, 0)), ((0, 7, 1), (0, 7, 0)), ((0, 7, 1), (0, 6, 1)), ((1, 7, 1), (0, 6, 0)), ((1, 7, 1), (1, 6, 0)), ((1, 7, 1), (2, 6, 0)), ((1, 7, 1), (0, 7, 0)), ((1, 7, 1), (1, 7, 0)), ((1, 7, 1), (2, 7, 0)), ((1, 7, 1), (0, 6, 1)), ((1, 7, 1), (1, 6, 1)), ((1, 7, 1), (2, 6, 1)), ((2, 7, 1), (0, 6, 0)), ((2, 7, 1), (1, 6, 0)), ((2, 7, 1), (2, 6, 0)), ((2, 7, 1), (0, 7, 0)), ((2, 7, 1), (1, 7, 0)), ((2, 7, 1), (2, 7, 0)), ((2, 7, 1), (0, 6, 1)), ((2, 7, 1), (1, 6, 1)), ((2, 7, 1), (2, 6, 1)), ((0, 9, 1), (0, 9, 0)), ((0, 9, 1), (0, 9, 1)), ((0, 9, 1), (0, 9, 2)), ((0, 9, 1), (0, 9, 3)), ((0, 9, 1), (0, 9, 4)), ((0, 9, 1), (0, 9, 5)), ((0, 9, 1), (0, 9, 6)), ((1, 3, 2), (0, 6, 0)), ((1, 3, 2), (0, 7, 0)), ((1, 3, 2), (0, 6, 1)), ((1, 3, 2), (0, 7, 1)), ((1, 3, 2), (0, 0, 2)), ((1, 3, 2), (0, 6, 2)), ((2, 3, 2), (0, 6, 0)), ((2, 3, 2), (1, 6, 0)), ((2, 3, 2), (2, 6, 0)), ((2, 3, 2), (0, 7, 0)), ((2, 3, 2), (1, 7, 0)), ((2, 3, 2), (2, 7, 0)), ((2, 3, 2), (0, 6, 1)), ((2, 3, 2), (1, 6, 1)), ((2, 3, 2), (2, 6, 1)), ((2, 3, 2), (1, 7, 1)), ((2, 3, 2), (2, 7, 1)), ((0, 4, 2), (0, 6, 0)), ((0, 4, 2), (0, 7, 0)), ((0, 4, 2), (0, 6, 1)), ((1, 4, 2), (0, 7, 0)), ((2, 4, 2), (1, 7, 0)), ((2, 4, 2), (2, 7, 0)), ((1, 5, 2), (0, 4, 1)), ((2, 5, 2), (1, 4, 1)), ((2, 5, 2), (2, 4, 1)), ((0, 7, 2), (1, 2, 0)), ((0, 7, 2), (0, 7, 6)), ((1, 7, 2), (0, 0, 0)), ((1, 7, 2), (0, 1, 0)), ((1, 7, 2), (0, 2, 0)), ((1, 7, 2), (2, 2, 0)), ((1, 7, 2), (0, 6, 0)), ((1, 7, 2), (1, 6, 0)), ((1, 7, 2), (2, 6, 0)), ((1, 7, 2), (0, 7, 0)), ((1, 7, 2), (1, 7, 0)), ((1, 7, 2), (2, 7, 0)), ((1, 7, 2), (0, 0, 1)), ((1, 7, 2), (0, 6, 1)), ((1, 7, 2), (1, 6, 1)), ((1, 7, 2), (2, 6, 1)), ((1, 7, 2), (0, 7, 1)), ((1, 7, 2), (1, 7, 1)), ((1, 7, 2), (2, 7, 1)), ((1, 7, 2), (0, 6, 2)), ((1, 7, 2), (1, 6, 2)), ((1, 7, 2), (2, 6, 2)), ((1, 7, 2), (0, 0, 3)), ((1, 7, 2), (0, 6, 3)), ((1, 7, 2), (1, 6, 3)), ((1, 7, 2), (2, 6, 3)), ((1, 7, 2), (1, 7, 6)), ((1, 7, 2), (2, 7, 6)), ((2, 7, 2), (0, 0, 0)), ((2, 7, 2), (0, 1, 0)), ((2, 7, 2), (0, 2, 0)), ((2, 7, 2), (2, 2, 0)), ((2, 7, 2), (0, 6, 0)), ((2, 7, 2), (1, 6, 0)), ((2, 7, 2), (2, 6, 0)), ((2, 7, 2), (0, 7, 0)), ((2, 7, 2), (1, 7, 0)), ((2, 7, 2), (2, 7, 0)), ((2, 7, 2), (0, 0, 1)), ((2, 7, 2), (0, 6, 1)), ((2, 7, 2), (1, 6, 1)), ((2, 7, 2), (2, 6, 1)), ((2, 7, 2), (0, 7, 1)), ((2, 7, 2), (1, 7, 1)), ((2, 7, 2), (2, 7, 1)), ((2, 7, 2), (0, 6, 2)), ((2, 7, 2), (1, 6, 2)), ((2, 7, 2), (2, 6, 2)), ((2, 7, 2), (0, 0, 3)), ((2, 7, 2), (0, 6, 3)), ((2, 7, 2), (1, 6, 3)), ((2, 7, 2), (2, 6, 3)), ((2, 7, 2), (1, 7, 6)), ((2, 7, 2), (2, 7, 6)), ((0, 9, 2), (0, 9, 0)), ((0, 9, 2), (0, 9, 1)), ((0, 9, 2), (0, 9, 2)), ((0, 9, 2), (0, 9, 3)), ((0, 9, 2), (0, 9, 4)), ((0, 9, 2), (0, 9, 5)), ((0, 9, 2), (0, 9, 6)), ((0, 0, 3), (0, 0, 0)), ((0, 0, 3), (0, 1, 0)), ((0, 0, 3), (0, 2, 0)), ((0, 0, 3), (0, 0, 1)), ((1, 4, 3), (0, 3, 1)), ((2, 4, 3), (1, 3, 1)), ((2, 4, 3), (2, 3, 1)), ((0, 6, 3), (0, 6, 0)), ((0, 6, 3), (0, 7, 0)), ((0, 6, 3), (0, 6, 1)), ((1, 6, 3), (1, 7, 0)), ((2, 6, 3), (2, 7, 0)), ((0, 7, 3), (0, 7, 5)), ((1, 7, 3), (1, 7, 5)), ((2, 7, 3), (2, 7, 5)), ((0, 9, 3), (0, 9, 0)), ((0, 9, 3), (0, 9, 1)), ((0, 9, 3), (0, 9, 2)), ((0, 9, 3), (0, 9, 3)), ((0, 9, 3), (0, 9, 4)), ((0, 9, 3), (0, 9, 5)), ((0, 9, 3), (0, 9, 6)), ((1, 6, 4), (0, 0, 1)), ((1, 6, 4), (0, 6, 1)), ((2, 6, 4), (1, 6, 1)), ((2, 6, 4), (2, 6, 1)), ((0, 9, 4), (0, 9, 0)), ((0, 9, 4), (0, 9, 1)), ((0, 9, 4), (0, 9, 2)), ((0, 9, 4), (0, 9, 3)), ((0, 9, 4), (0, 9, 4)), ((0, 9, 4), (0, 9, 5)), ((0, 9, 4), (0, 9, 6)), ((0, 9, 5), (0, 9, 0)), ((0, 9, 5), (0, 9, 1)), ((0, 9, 5), (0, 9, 2)), ((0, 9, 5), (0, 9, 3)), ((0, 9, 5), (0, 9, 4)), ((0, 9, 5), (0, 9, 5)), ((0, 9, 5), (0, 9, 6)), ((1, 7, 6), (0, 0, 0)), ((1, 7, 6), (0, 1, 0)), ((1, 7, 6), (0, 2, 0)), ((1, 7, 6), (0, 6, 0)), ((1, 7, 6), (0, 7, 0)), ((1, 7, 6), (0, 0, 1)), ((1, 7, 6), (0, 6, 1)), ((1, 7, 6), (0, 7, 1)), ((1, 7, 6), (0, 6, 2)), ((1, 7, 6), (0, 0, 3)), ((1, 7, 6), (0, 6, 3)), ((2, 7, 6), (0, 6, 0)), ((2, 7, 6), (1, 6, 0)), ((2, 7, 6), (2, 6, 0)), ((2, 7, 6), (0, 7, 0)), ((2, 7, 6), (1, 7, 0)), ((2, 7, 6), (2, 7, 0)), ((2, 7, 6), (0, 6, 1)), ((2, 7, 6), (1, 6, 1)), ((2, 7, 6), (2, 6, 1)), ((2, 7, 6), (1, 7, 1)), ((2, 7, 6), (2, 7, 1)), ((2, 7, 6), (1, 6, 2)), ((2, 7, 6), (2, 6, 2)), ((2, 7, 6), (1, 6, 3)), ((2, 7, 6), (2, 6, 3)), ((0, 9, 6), (0, 9, 0)), ((0, 9, 6), (0, 9, 1)), ((0, 9, 6), (0, 9, 2)), ((0, 9, 6), (0, 9, 3)), ((0, 9, 6), (0, 9, 4)), ((0, 9, 6), (0, 9, 5)), ((0, 9, 6), (0, 9, 6))]}
   property Termination
has value Just True
for SRS
  [p, s] -> [] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [g, s] {- Input 3 -}
  [g] -> [i, s, half] {- Input 4 -}
  [i] -> [f, p] {- Input 5 -}
  [half, 0] -> [0, s, s, half] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [0] -> [] {- Input 8 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [s, p] -> [] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 2) -}
  [s, f] -> [s, g] {- Mirror (Input 3) -}
  [g] -> [half, s, i] {- Mirror (Input 4) -}
  [i] -> [p, f] {- Mirror (Input 5) -}
  [0, half] -> [half, s, s, 0] {- Mirror (Input 6) -}
  [s, s, half] -> [s, s, p, p, half, s] {- Mirror (Input 7) -}
  [0] -> [] {- Mirror (Input 8) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, -1), (6, 1), (7, 1)], epsilons = [((0, 6, 0), (1, 1, 1)), ((0, 6, 0), (0, 6, 4)), ((1, 6, 0), (2, 1, 1)), ((1, 6, 0), (1, 6, 4)), ((1, 1, 1), (0, 6, 4)), ((2, 1, 1), (1, 6, 4)), ((0, 2, 1), (1, 3, 0)), ((1, 2, 1), (2, 3, 0)), ((2, 2, 1), (2, 3, 0)), ((0, 3, 1), (1, 4, 1)), ((1, 3, 1), (2, 4, 1)), ((2, 3, 1), (2, 4, 1)), ((0, 5, 1), (0, 0, 0)), ((0, 5, 1), (0, 1, 0)), ((0, 5, 1), (0, 2, 0)), ((0, 5, 1), (0, 6, 0)), ((0, 5, 1), (1, 6, 0)), ((0, 5, 1), (0, 1, 1)), ((0, 5, 1), (1, 1, 1)), ((0, 5, 1), (2, 1, 1)), ((0, 5, 1), (0, 6, 4)), ((0, 5, 1), (1, 6, 4)), ((0, 6, 1), (1, 1, 0)), ((0, 6, 1), (0, 6, 3)), ((1, 6, 1), (2, 1, 0)), ((1, 6, 1), (1, 6, 3)), ((2, 2, 2), (0, 2, 2)), ((2, 2, 2), (1, 2, 2)), ((2, 2, 2), (2, 2, 2)), ((2, 2, 2), (2, 4, 2)), ((2, 2, 2), (1, 3, 3)), ((2, 2, 2), (2, 3, 3)), ((0, 3, 2), (1, 4, 0)), ((1, 3, 2), (2, 4, 0)), ((2, 3, 2), (2, 4, 0)), ((1, 4, 2), (0, 3, 3)), ((2, 4, 2), (0, 2, 2)), ((2, 4, 2), (1, 2, 2)), ((2, 4, 2), (2, 2, 2)), ((2, 4, 2), (2, 4, 2)), ((2, 4, 2), (1, 3, 3)), ((2, 4, 2), (2, 3, 3)), ((0, 5, 2), (0, 0, 0)), ((0, 5, 2), (0, 1, 0)), ((0, 5, 2), (0, 2, 0)), ((0, 5, 2), (0, 6, 0)), ((0, 5, 2), (1, 1, 1)), ((0, 5, 2), (0, 6, 4)), ((1, 3, 3), (0, 2, 2)), ((2, 3, 3), (0, 2, 2)), ((2, 3, 3), (1, 2, 2)), ((2, 3, 3), (2, 2, 2)), ((2, 3, 3), (2, 4, 2)), ((2, 3, 3), (1, 3, 3)), ((2, 3, 3), (2, 3, 3)), ((0, 5, 3), (0, 5, 0)), ((0, 5, 3), (0, 5, 4)), ((0, 6, 5), (0, 0, 0)), ((0, 6, 5), (0, 1, 0)), ((0, 6, 5), (0, 2, 0)), ((0, 6, 5), (0, 6, 0)), ((0, 6, 5), (1, 1, 1)), ((0, 6, 5), (0, 6, 4)), ((1, 6, 5), (0, 0, 0)), ((1, 6, 5), (0, 1, 0)), ((1, 6, 5), (0, 2, 0)), ((1, 6, 5), (2, 2, 0)), ((1, 6, 5), (0, 6, 0)), ((1, 6, 5), (1, 6, 0)), ((1, 6, 5), (0, 1, 1)), ((1, 6, 5), (1, 1, 1)), ((1, 6, 5), (2, 1, 1)), ((1, 6, 5), (0, 6, 4)), ((1, 6, 5), (1, 6, 4)), ((1, 6, 6), (0, 0, 0)), ((1, 6, 6), (0, 1, 0)), ((1, 6, 6), (0, 2, 0)), ((1, 6, 6), (0, 6, 0)), ((1, 6, 6), (1, 6, 0)), ((1, 6, 6), (0, 1, 1)), ((1, 6, 6), (1, 1, 1)), ((1, 6, 6), (2, 1, 1)), ((1, 6, 6), (1, 3, 1)), ((1, 6, 6), (2, 4, 1)), ((1, 6, 6), (0, 5, 1)), ((1, 6, 6), (0, 6, 4)), ((1, 6, 6), (1, 6, 4)), ((1, 6, 6), (0, 6, 5))]}
   property Termination
has value Just True
for SRS
  [s, p] -> [] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 2) -}
  [s, f] -> [s, g] {- Mirror (Input 3) -}
  [g] -> [half, s, i] {- Mirror (Input 4) -}
  [i] -> [p, f] {- Mirror (Input 5) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, -1), (2, -1), (3, 1), (4, 2)], epsilons = [((0, 2, 1), (1, 3, 0)), ((0, 3, 1), (1, 4, 1)), ((1, 3, 1), (2, 4, 1)), ((0, 3, 2), (1, 4, 0)), ((1, 3, 2), (2, 4, 0)), ((1, 4, 2), (0, 3, 3)), ((2, 4, 2), (0, 2, 2)), ((2, 4, 2), (1, 3, 3)), ((1, 3, 3), (0, 2, 2))]}
   property Termination
has value Just True
for SRS
  [s, p] -> [] {- Mirror (Input 1) -}
  [i] -> [p, f] {- Mirror (Input 5) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, -1)], epsilons = []}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (10,8)\RelRFCmb{2}\Mirror(8,7)\RelRFCmb{2}(5,6)\RelRFCmb{2}(2,4)\RelRFCmb{-1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F      = False}" , input_size = Size { num_rules = 10 , num_strict_rules = 10
F      , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
F      = 48} , self = 65 , parent = Nothing , duration = 0.448768315000 , status
F      = Fail , start = 2025-09-03 13:31:35.400747575 UTC , finish = 2025-09-03
F      13:31:35.84951589 UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F      
| F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F    = False\n , verbose = False}" , input_size = Size { num_rules = 29 , num_strict_rules
| F    = 5 , num_top_rules = 5 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| F    = 124} , self = 63 , parent = Nothing , duration = 0.261436981000 , status
| F    = Fail , start = 2025-09-03 13:31:35.504896734 UTC , finish = 2025-09-03
| F    13:31:35.766333715 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
| F    
| | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 29 , num_strict_rules
| | F  = 5 , num_top_rules = 5 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | F  = 124} , self = 46 , parent = Nothing , duration = 0.112993613000 , status
| | F  = Fail , start = 2025-09-03 13:31:35.50489919 UTC , finish = 2025-09-03
| | F  13:31:35.617892803 UTC , thread_cap_info = ("ThreadId 69", 1, False)}
| | F  
| | F  
| F    
F      
