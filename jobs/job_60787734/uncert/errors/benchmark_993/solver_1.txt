last 5969 length 25892
CNF 5969 vars 25892 clauses
last 4543 length 19364
last 492 length 1922
CNF 492 vars 1922 clauses
last 467 length 1844
CNF 467 vars 1844 clauses
CNF 4543 vars 19364 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2611, clauses: 9301
last 2611 length 9301
last 519 length 2069
CNF 2611 vars 9301 clauses
last 504 length 1986
CNF 519 vars 2069 clauses
CNF 504 vars 1986 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2479, clauses: 8755
last 2479 length 8755
CNF 2479 vars 8755 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7157, clauses: 29388
last 7157 length 29388
CNF 7157 vars 29388 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2611, clauses: 9301, status: Unsatisfied, time: 0.245586819s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6853, clauses: 28051
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2479, clauses: 8755, status: Satisfied, time: 0.093714202s
last 6853 length 28051
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4480, clauses: 17475
last 4480 length 17475
last 510 length 2023
CNF 4480 vars 17475 clauses
CNF 510 vars 2023 clauses
last 425 length 1723
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2373, clauses: 8294
CNF 425 vars 1723 clauses
last 2373 length 8294
CNF 2373 vars 8294 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6807, clauses: 27875
last 6807 length 27875
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2373, clauses: 8294, status: Satisfied, time: 0.12283238s
CNF 6807 vars 27875 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 4 letters       mirror
SRS with 4 rules on 4 letters       DP
SRS with 6 strict rules and 4 weak rules on 7 letters       EDG
SRS with 4 strict rules and 4 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 4 weak rules on 7 letters       EDG
SRS with 3 strict rules and 4 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 4 weak rules on 7 letters       weights
SRS with 0 strict rules and 4 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b, b] {- Input 0 -}
  [c, c, b] -> [d, c, a] {- Input 1 -}
  [a] -> [d, c, c] {- Input 2 -}
  [c, d] -> [b, c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [b, b] {- Mirror (Input 0) -}
  [b, c, c] -> [a, c, d] {- Mirror (Input 1) -}
  [a] -> [c, c, d] {- Mirror (Input 2) -}
  [d, c] -> [c, b] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
  [d#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 3)) -}
  [a#] |-> [d#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a#, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, c, c] |-> [d#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, c] |-> [a#, c, d] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [d#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 3)) -}
  [b#, c, c] |-> [d#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, c] |-> [a#, c, d] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#] |-> [d#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( d
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( d#
  , Wk  / 10A 10A 13A - \
        | 10A 10A 13A - |
        | 10A 10A 13A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 13A 13A - \
        | 10A 13A 13A - |
        | 10A 13A 13A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 13A 13A - \
        | 10A 13A 13A - |
        | 10A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [d#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 3)) -}
  [b#, c, c] |-> [a#, c, d] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#] |-> [d#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [d#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 3)) -}
  [b#, c, c] |-> [a#, c, d] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#] |-> [d#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( d
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( d#
  , Wk  / 14A 16A 16A - \
        | 14A 16A 16A - |
        | 14A 16A 16A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 15A 16A 16A - \
        | 15A 16A 16A - |
        | 15A 16A 16A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 16A 16A 17A - \
        | 16A 16A 17A - |
        | 16A 16A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [d#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 3)) -}
  [a#] |-> [d#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
reason
  (d, 0/1)
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (d#, 1/1)
  (a#, 2/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [a, c, d] {- DP Nontop (Mirror (Input 1)) -}
  [a] ->= [c, c, d] {- DP Nontop (Mirror (Input 2)) -}
  [d, c] ->= [c, b] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,4)\Deepee(6/4,7)\EDG(4/4,7)\Matrix{\Arctic}{3}\EDG(3/4,7)\Matrix{\Arctic}{3}(2/4,7)\Weight(0/4,4)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.706751626000
  min duration 0.011736824000
  total durat. 1.081650270000
**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 13 , total_length
F            = 186} , self = 69 , parent = Nothing , duration = 0.231179508000 , status
F            = Fail , start = 2025-09-03 13:42:27.052873453 UTC , finish = 2025-09-03
F            13:42:27.284052961 UTC , thread_cap_info = ("ThreadId 61", 0, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 13 , total_length
| F          = 186} , self = 67 , parent = Nothing , duration = 0.202627211000 , status
| F          = Fail , start = 2025-09-03 13:42:27.061248479 UTC , finish = 2025-09-03
| F          13:42:27.26387569 UTC , thread_cap_info = ("ThreadId 63", 3, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 13 , total_length = 186} , self = 70 , parent = Nothing
| | F        , duration = 0.351160498000 , status = Fail , start = 2025-09-03 13:42:27.062472971
| | F        UTC , finish = 2025-09-03 13:42:27.413633469 UTC , thread_cap_info = ("ThreadId
| | F        78", 1, False)}
| | F        
| | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | F      = 0 , alphabet_size = 13 , total_length = 186} , self = 85 , parent = Nothing
| | | F      , duration = 0.706751626000 , status = Fail , start = 2025-09-03 13:42:27.062476835
| | | F      UTC , finish = 2025-09-03 13:42:27.769228461 UTC , thread_cap_info = ("ThreadId
| | | F      80", 1, False)}
| | | F      
| | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E    = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | E    = 18} , self = 102 , parent = Nothing , duration = 0.918839261000 , status
| | | | E    = Except "AsyncCancelled" , start = 2025-09-03 13:42:27.1232544 UTC , finish
| | | | E    = 2025-09-03 13:42:28.042093661 UTC , thread_cap_info = ("ThreadId 100",
| | | | E    2, False)}
| | | | E    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | | | F  = 6 , total_length = 35} , self = 73 , parent = Nothing , duration = 0.264759411000
| | | | | F  , status = Fail , start = 2025-09-03 13:42:27.261581325 UTC , finish =
| | | | | F  2025-09-03 13:42:27.526340736 UTC , thread_cap_info = ("ThreadId 109",
| | | | | F  1, False)}
| | | | | F  
| F | | | |  
F   | | | |  
F   | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F   | | | |  = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 7 , total_length
F   | | | |  = 33} , self = 71 , parent = Nothing , duration = 0.122550614000 , status
F   | | | |  = Fail , start = 2025-09-03 13:42:27.301262187 UTC , finish = 2025-09-03
F   | | | |  13:42:27.423812801 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
F   | | | |  
| F | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F | | | |  = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 7 , total_length
| F | | | |  = 33} , self = 72 , parent = Nothing , duration = 0.122044172000 , status
| F | | | |  = Fail , start = 2025-09-03 13:42:27.321258369 UTC , finish = 2025-09-03
| F | | | |  13:42:27.443302541 UTC , thread_cap_info = ("ThreadId 115", 1, False)}
| F | | | |  
| | F | | |  
F |   | | |  
S |   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   | | |  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
S |   | | |  = 7 , total_length = 33} , self = 74 , parent = Nothing , duration = 0.162283834000
S |   | | |  , status = Success , start = 2025-09-03 13:42:27.423843167 UTC , finish
S |   | | |  = 2025-09-03 13:42:27.586127001 UTC , thread_cap_info = ("ThreadId 119",
S |   | | |  1, False)}
S |   | | |  
| F   | | |  
| E   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E   | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| E   | | |  = 7 , total_length = 33} , self = 76 , parent = Nothing , duration = 0.143804628000
| E   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:42:27.443501037
| E   | | |  UTC , finish = 2025-09-03 13:42:27.587305665 UTC , thread_cap_info = ("ThreadId
| E   | | |  120", 1, False)}
| E   | | |  
| |   | | F  
S |   | |    
  E   | |    
S     | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S     | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S     | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S     | |    = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
S     | |    = 7 , total_length = 29} , self = 83 , parent = Nothing , duration = 0.145908678000
S     | |    , status = Success , start = 2025-09-03 13:42:27.622180955 UTC , finish
S     | |    = 2025-09-03 13:42:27.768089633 UTC , thread_cap_info = ("ThreadId 133",
S     | |    1, False)}
S     | |    
| E   | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E   | |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| E   | |    = 7 , total_length = 29} , self = 97 , parent = Nothing , duration = 0.276043990000
| E   | |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:42:27.654799458
| E   | |    UTC , finish = 2025-09-03 13:42:27.930843448 UTC , thread_cap_info = ("ThreadId
| E   | |    135", 1, False)}
| E   | |    
S |   | |    
  |   F |    
S |     |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
S |     |    verbose = False}" , input_size = Size { num_rules = 78 , num_strict_rules
S |     |    = 51 , num_top_rules = 51 , num_weak_rules = 27 , alphabet_size = 18 ,
S |     |    total_length = 468} , self = 95 , parent = Nothing , duration = 0.107363225000
S |     |    , status = Success , start = 2025-09-03 13:42:27.791843137 UTC , finish
S |     |    = 2025-09-03 13:42:27.899206362 UTC , thread_cap_info = ("ThreadId 140",
S |     |    1, False)}
S |     |    
S |     |    
  E     |    
        E    
