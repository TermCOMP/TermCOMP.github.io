last 3894 length 19598
last 3541 length 15759
CNF 3894 vars 19598 clauses
CNF 3541 vars 15759 clauses
last 721 length 2942
CNF 721 vars 2942 clauses
last 899 length 3935
CNF 899 vars 3935 clauses
last 671 length 2638
last 630 length 2482
CNF 671 vars 2638 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2762, clauses: 9960
CNF 630 vars 2482 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9226, clauses: 38479
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9795
last 2762 length 9960
last 9226 length 38479
last 2741 length 9795
CNF 2762 vars 9960 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9516, clauses: 39671
CNF 2741 vars 9795 clauses
CNF 9226 vars 38479 clauses
last 9516 length 39671
CNF 9516 vars 39671 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2762, clauses: 9960, status: Unsatisfied, time: 0.132945548s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9795, status: Unsatisfied, time: 0.123547829s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9226, clauses: 38479, status: Satisfied, time: 0.172182017s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9516, clauses: 39671, status: Satisfied, time: 0.152577568s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6005, clauses: 23952
last 869 length 3813
last 651 length 2674
CNF 869 vars 3813 clauses
CNF 651 vars 2674 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 10 rules on 3 letters       mirror
SRS with 10 rules on 3 letters       DP
SRS with 5 strict rules and 10 weak rules on 6 letters       weights
SRS with 2 strict rules and 10 weak rules on 4 letters       EDG
SRS with 2 strict rules and 10 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 10 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [a, c] -> [c, c, a, a, b] {- Input 2 -}
  [b, b] -> [] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [a] {- Input 1 -}
  [b, a, b] -> [b] {- Input 1 -}
  [c, a, b] -> [c] {- Input 1 -}
  [a, c] -> [c, c, a, a, b] {- Input 2 -}
  [a, b, b] -> [a] {- Input 3 -}
  [b, b, b] -> [b] {- Input 3 -}
  [c, b, b] -> [c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a] {- Mirror (Input 1) -}
  [b, a, b] -> [b] {- Mirror (Input 1) -}
  [b, a, c] -> [c] {- Mirror (Input 1) -}
  [c, a] -> [b, a, a, c, c] {- Mirror (Input 2) -}
  [b, b, a] -> [a] {- Mirror (Input 3) -}
  [b, b, b] -> [b] {- Mirror (Input 3) -}
  [b, b, c] -> [c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a] |-> [a#, a, c, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, c, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, a] |-> [b#, a, a, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A  1A 1A  \
        | -1A 0A -1A |
        \ -   -  0A  / )
  ( b
  , Wk  / -   1A 0A \
        | -1A -  1A |
        \ -   -  0A / )
  ( c
  , Wk  / 0A -   -   \
        | 0A -1A -1A |
        \ -  -   0A  / )
  ( c#
  , Wk  / 1A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(10,3)\Deepee(5/10,6)\Weight\EDG(2/10,4)\Matrix{\ArcticBZ}{3}(0/10,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 12} , self = 38 , parent = Nothing , duration = 0.152554786000 , status
F            = Fail , start = 2025-09-03 11:02:32.798595835 UTC , finish = 2025-09-03
F            11:02:32.951150621 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F          = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F          = 12} , self = 44 , parent = Nothing , duration = 0.265554298000 , status
| F          = Fail , start = 2025-09-03 11:02:32.798657852 UTC , finish = 2025-09-03
| F          11:02:33.06421215 UTC , thread_cap_info = ("ThreadId 34", 2, False)}
| F          
| | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F        = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | F        = 0 , alphabet_size = 9 , total_length = 180} , self = 64 , parent = Nothing
| | F        , duration = 0.507136266000 , status = Fail , start = 2025-09-03 11:02:32.809318979
| | F        UTC , finish = 2025-09-03 11:02:33.316455245 UTC , thread_cap_info = ("ThreadId
| | F        53", 1, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F      = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 180} , self = 47 , parent = Nothing , duration = 0.217608710000 , status
| | | F      = Fail , start = 2025-09-03 11:02:32.874704082 UTC , finish = 2025-09-03
| | | F      11:02:33.092312792 UTC , thread_cap_info = ("ThreadId 68", 2, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F    = 180} , self = 48 , parent = Nothing , duration = 0.217607643000 , status
| | | | F    = Fail , start = 2025-09-03 11:02:32.874712136 UTC , finish = 2025-09-03
| | | | F    11:02:33.092319779 UTC , thread_cap_info = ("ThreadId 70", 2, False)}
| | | | F    
| | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F  = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
| | | | | F  , duration = 0.214916185000 , status = Fail , start = 2025-09-03 11:02:32.909334817
| | | | | F  UTC , finish = 2025-09-03 11:02:33.124251002 UTC , thread_cap_info = ("ThreadId
| | | | | F  75", 0, False)}
| | | | | F  
F | | | | |  
  F | | | |  
    | F | |  
    |   F |  
    |     F  
F   |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   |        = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
F   |        alphabet_size = 4 , total_length = 49} , self = 68 , parent = Nothing ,
F   |        duration = 0.319564168000 , status = Fail , start = 2025-09-03 11:02:33.293731428
F   |        UTC , finish = 2025-09-03 11:02:33.613295596 UTC , thread_cap_info = ("ThreadId
F   |        101", 0, False)}
F   |        
|   F        
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F          = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| F          = 47} , self = 67 , parent = Nothing , duration = 0.151602350000 , status
| F          = Fail , start = 2025-09-03 11:02:33.329372166 UTC , finish = 2025-09-03
| F          11:02:33.480974516 UTC , thread_cap_info = ("ThreadId 104", 0, False)}
| F          
| | S        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | S        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | S        = 4 , total_length = 49} , self = 70 , parent = Nothing , duration = 0.327039088000
| | S        , status = Success , start = 2025-09-03 11:02:33.336352748 UTC , finish
| | S        = 2025-09-03 11:02:33.663391836 UTC , thread_cap_info = ("ThreadId 106",
| | S        0, False)}
| | S        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | | F      alphabet_size = 4 , total_length = 47} , self = 69 , parent = Nothing ,
| | | F      duration = 0.200330498000 , status = Fail , start = 2025-09-03 11:02:33.412995572
| | | F      UTC , finish = 2025-09-03 11:02:33.61332607 UTC , thread_cap_info = ("ThreadId
| | | F      108", 0, False)}
| | | F      
| F | |      
| S | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| S | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| S | |      = 4 , total_length = 47} , self = 72 , parent = Nothing , duration = 0.233544841000
| S | |      , status = Success , start = 2025-09-03 11:02:33.481024861 UTC , finish
| S | |      = 2025-09-03 11:02:33.714569702 UTC , thread_cap_info = ("ThreadId 109",
| S | |      0, False)}
| S | |      
F | | |      
  | | F      
E | |        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | |        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
E | |        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
E | |        = 4 , total_length = 49} , self = 73 , parent = Nothing , duration = 0.107773518000
E | |        , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:33.621561714
E | |        UTC , finish = 2025-09-03 11:02:33.729335232 UTC , thread_cap_info = ("ThreadId
E | |        114", 0, False)}
E | |        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | E      = 4 , total_length = 47} , self = 79 , parent = Nothing , duration = 0.106567430000
| | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:33.629323491
| | | E      UTC , finish = 2025-09-03 11:02:33.735890921 UTC , thread_cap_info = ("ThreadId
| | | E      115", 0, False)}
| | | E      
| | S |      
| S   |      
E     |      
      E      
