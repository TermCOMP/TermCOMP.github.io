last 2751 length 11570
last 1302 length 5533
CNF 2751 vars 11570 clauses
last 1056 length 4394
CNF 1302 vars 5533 clauses
last 990 length 4088
last 1157 length 4951
CNF 1056 vars 4394 clauses
last 3493 length 14968
CNF 990 vars 4088 clauses
CNF 1157 vars 4951 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2649, clauses: 9956
CNF 3493 vars 14968 clauses
last 2649 length 9956
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2344, clauses: 8746
last 2344 length 8746
CNF 2649 vars 9956 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8283, clauses: 34803
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8948, clauses: 37549
CNF 2344 vars 8746 clauses
last 8948 length 37549
last 8283 length 34803
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2649, clauses: 9956, status: Satisfied, time: 0.185699534s
CNF 8283 vars 34803 clauses
CNF 8948 vars 37549 clauses
last 802 length 3474
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2344, clauses: 8746, status: Satisfied, time: 0.073051408s
last 803 length 3367
CNF 803 vars 3367 clauses
CNF 802 vars 3474 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6646
last 1810 length 6646
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6771, clauses: 28395
last 6771 length 28395
CNF 1810 vars 6646 clauses
CNF 6771 vars 28395 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 10 strict rules and 3 weak rules on 4 letters       weights
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b] -> [b, b, b, b] {- Input 0 -}
  [a, a, b, b] -> [a, a, a, b] {- Input 1 -}
  [b, a, b, a] -> [a, b, a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, a] -> [b, b, b, b] {- Mirror (Input 0) -}
  [b, b, a, a] -> [b, a, a, a] {- Mirror (Input 1) -}
  [a, b, a, b] -> [b, a, b, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [a#, b, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [b#, a] {- DP (Top 2) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [b#, a, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (a#, 2/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 3A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 8A 10A 10A - \
        | 8A 10A 10A - |
        | 8A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(10/3,4)\Weight\EDG(2/3,3)\Matrix{\Arctic}{3}(1/3,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6646, status: Unsatisfied, time: 0.096240029s
last 4612 length 20120
CNF 4612 vars 20120 clauses
last 4896 length 21020
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                  = 24} , self = 66 , parent = Nothing , duration = 0.342223722000 , status
F                  = Fail , start = 2025-09-03 11:55:48.813954786 UTC , finish = 2025-09-03
F                  11:55:49.156178508 UTC , thread_cap_info = ("ThreadId 23", 3, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                = 24} , self = 83 , parent = Nothing , duration = 0.409656247000 , status
| F                = Fail , start = 2025-09-03 11:55:48.813987945 UTC , finish = 2025-09-03
| F                11:55:49.223644192 UTC , thread_cap_info = ("ThreadId 42", 3, False)}
| F                
| | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F              = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | F              = 0 , alphabet_size = 4 , total_length = 120} , self = 64 , parent = Nothing
| | F              , duration = 0.255788668000 , status = Fail , start = 2025-09-03 11:55:48.815465598
| | F              UTC , finish = 2025-09-03 11:55:49.071254266 UTC , thread_cap_info = ("ThreadId
| | F              64", 1, False)}
| | F              
| | | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F            = Size { num_rules = 12 , num_strict_rules = 12 , num_top_rules = 0 , num_weak_rules
| | | F            = 0 , alphabet_size = 4 , total_length = 120} , self = 67 , parent = Nothing
| | | F            , duration = 0.362610294000 , status = Fail , start = 2025-09-03 11:55:48.822818773
| | | F            UTC , finish = 2025-09-03 11:55:49.185429067 UTC , thread_cap_info = ("ThreadId
| | | F            62", 1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F          = 120} , self = 65 , parent = Nothing , duration = 0.270869222000 , status
| | | | F          = Fail , start = 2025-09-03 11:55:48.833936872 UTC , finish = 2025-09-03
| | | | F          11:55:49.104806094 UTC , thread_cap_info = ("ThreadId 73", 2, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F        = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F        = 120} , self = 56 , parent = Nothing , duration = 0.105643618000 , status
| | | | | F        = Fail , start = 2025-09-03 11:55:48.833945565 UTC , finish = 2025-09-03
| | | | | F        11:55:48.939589183 UTC , thread_cap_info = ("ThreadId 75", 2, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | | F      = 48} , self = 62 , parent = Nothing , duration = 0.113936732000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:55:48.874198963 UTC , finish = 2025-09-03
| | | | | | F      11:55:48.988135695 UTC , thread_cap_info = ("ThreadId 90", 0, False)}
| | | | | | F      
| | | | | F |      
| | | | | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S |      = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | S |      = 4 , total_length = 48} , self = 73 , parent = Nothing , duration = 0.246851451000
| | | | | S |      , status = Success , start = 2025-09-03 11:55:48.940130809 UTC , finish
| | | | | S |      = 2025-09-03 11:55:49.18698226 UTC , thread_cap_info = ("ThreadId 99",
| | | | | S |      0, False)}
| | | | | S |      
| | | | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S    = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | | | S    = 3 , total_length = 40} , self = 87 , parent = Nothing , duration = 0.255505950000
| | | | | | | S    , status = Success , start = 2025-09-03 11:55:48.980030746 UTC , finish
| | | | | | | S    = 2025-09-03 11:55:49.235536696 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | S    0, False)}
| | | | | | | S    
| | | | | | F |    
| | | | | | E |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | | | E |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | | E |    = 3 , total_length = 40} , self = 92 , parent = Nothing , duration = 0.319428387000
| | | | | | E |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:55:49.000674484
| | | | | | E |    UTC , finish = 2025-09-03 11:55:49.320102871 UTC , thread_cap_info = ("ThreadId
| | | | | | E |    105", 0, False)}
| | | | | | E |    
| | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | | E  = 4 , total_length = 48} , self = 77 , parent = Nothing , duration = 0.194391062000
| | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:55:49.020680242
| | | | | | | | E  UTC , finish = 2025-09-03 11:55:49.215071304 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  106", 0, False)}
| | | | | | | | E  
| | F | | | | | |  
| |   | F | | | |  
F |   |   | | | |  
  |   F   | | | |  
  |       S | | |  
  |         | | E  
  F         | |    
            | S    
            E      
