last 732 length 3076
last 1986 length 9092
CNF 732 vars 3076 clauses
last 2034 length 10250
CNF 1986 vars 9092 clauses
last 864 length 3647
CNF 2034 vars 10250 clauses
last 996 length 4085
CNF 996 vars 4085 clauses
last 688 length 2816
CNF 864 vars 3647 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1585, clauses: 5884
last 1585 length 5884
CNF 688 vars 2816 clauses
CNF 1585 vars 5884 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1585, clauses: 5884, status: Satisfied, time: 0.010467633s
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       context
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [a, a, b] -> [a] {- Input 1 -}
  [b, a, b] -> [b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a, a] -> [a, a, a, b, a, b] {- Mirror (Input 0) -}
  [b, a, a] -> [a] {- Mirror (Input 1) -}
  [b, a, b] -> [b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 9A 11A 11A - \
        | 9A 11A 11A - |
        | 9A 11A 11A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Context\Mirror(3,2)\Deepee\EDG(2/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf}Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1919, clauses: 7116
);Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5990, clauses: 25006
last 1919 length 7116
last 4354 length 18524
nohslast 4370 length 19348
 =last 5990 length 25006
 CNF 1919 vars 7116 clauses
CNF 4354 vars 18524 clauses
CNF 4370 vars 19348 clauses
letCNF 5990 vars 25006 clauses
 last 6786 length 31479
last 8044 length 36881
{Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1919, clauses: 7116, status: Satisfied, time: 0.133982093s
noh CNF 6786 vars 31479 clauses
CNF 8044 vars 36881 clauses
= \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F    = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
F    = 0 , alphabet_size = 4 , total_length = 64} , self = 73 , parent = Nothing
F    , duration = 0.139911797000 , status = Fail , start = 2025-09-03 10:55:45.047136681
F    UTC , finish = 2025-09-03 10:55:45.187048478 UTC , thread_cap_info = ("ThreadId
F    62", 2, False)}
F    
F    
S    Info { what = "Context { when = When_Empty, close = Empty, side = R, tracing
S    = False}" , input_size = Size { num_rules = 8 , num_strict_rules = 8 ,
S    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
S    = 64} , self = 77 , parent = Nothing , duration = 0.109936201000 , status
S    = Success , start = 2025-09-03 10:55:45.187111697 UTC , finish = 2025-09-03
S    10:55:45.297047898 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
S    
| F  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| F  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| F  = Size { num_rules = 27 , num_strict_rules = 19 , num_top_rules = 19 ,
| F  num_weak_rules = 8 , alphabet_size = 6 , total_length = 220} , self = 79
| F  , parent = Nothing , duration = 0.109955423000 , status = Fail , start
| F  = 2025-09-03 10:55:45.187118258 UTC , finish = 2025-09-03 10:55:45.297073681
| F  UTC , thread_cap_info = ("ThreadId 121", 2, False)}
| F  
S |  
  F  
