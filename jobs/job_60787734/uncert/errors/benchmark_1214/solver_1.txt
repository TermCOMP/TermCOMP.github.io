last 520 length 2142
last 588 length 2408
CNF 520 vars 2142 clauses
last 702 length 3137
CNF 588 vars 2408 clauses
last 544 length 2208
CNF 702 vars 3137 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2234, clauses: 7953
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2444, clauses: 8736
CNF 544 vars 2208 clauses
last 2234 length 7953
last 2444 length 8736
CNF 2234 vars 7953 clauses
last 4011 length 20109
CNF 4011 vars 20109 clauses
last 3490 length 15679
CNF 2444 vars 8736 clauses
CNF 3490 vars 15679 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2234, clauses: 7953, status: Unsatisfied, time: 0.119074405s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2444, clauses: 8736, status: Unsatisfied, time: 0.154633288s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29405
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7968, clauses: 33123
last 7092 length 29405
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4503, clauses: 17878
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5013, clauses: 19954
last 7968 length 33123
last 4503 length 17878
CNF 7092 vars 29405 clauses
last 5013 length 19954
CNF 5013 vars 19954 clauses
CNF 7968 vars 33123 clauses
CNF 4503 vars 17878 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29405, status: Satisfied, time: 0.186568938s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b] -> [c] {- Input 2 -}
  [c, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [b] -> [c] {- Mirror (Input 2) -}
  [c, c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [b] -> [c] {- Mirror (Input 2) -}
  [a, c, c] -> [a] {- Mirror (Input 3) -}
  [b, c, c] -> [b] {- Mirror (Input 3) -}
  [c, c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b] -> [c] {- Input 2 -}
  [c, c, a] -> [a] {- Input 3 -}
  [c, c, b] -> [b] {- Input 3 -}
  [c, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, b] |-> [b#, a, a] {- DP (Top 2) (Input 1) -}
  [a#, b] |-> [b#, b, a, a] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [c#, b, b, a, a] {- DP (Top 0) (Input 1) -}
  [b#] |-> [c#] {- DP (Top 0) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  1A 1A  \
        | -1A 0A -2A |
        \ -   -  0A  / )
  ( b
  , Wk  / 1A  2A 2A  \
        | -2A -  -2A |
        \ -   -  0A  / )
  ( c
  , Wk  / -   2A 1A \
        | -2A -  -  |
       Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7968, clauses: 33123, status: Satisfied, time: 0.154569004s
 \ -   -  0A / )
  ( a#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(2/8,4)\Matrix{\ArcticBZ}{3}(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E              = 12} , self = 74 , parent = Nothing , duration = 0.574737498000 , status
E              = Except "AsyncCancelled" , start = 2025-09-03 11:12:35.909534445 UTC ,
E              finish = 2025-09-03 11:12:36.484271943 UTC , thread_cap_info = ("ThreadId
E              36", 0, False)}
E              
| F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F            = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F            = 0 , alphabet_size = 9 , total_length = 180} , self = 65 , parent = Nothing
| F            , duration = 0.295227676000 , status = Fail , start = 2025-09-03 11:12:35.959671335
| F            UTC , finish = 2025-09-03 11:12:36.254899011 UTC , thread_cap_info = ("ThreadId
| F            67", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 61 , parent = Nothing , duration = 0.198606083000 , status
| | F          = Fail , start = 2025-09-03 11:12:35.983523282 UTC , finish = 2025-09-03
| | F          11:12:36.182129365 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| | F          
| | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F        = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | F        alphabet_size = 4 , total_length = 37} , self = 59 , parent = Nothing ,
| | | F        duration = 0.174705469000 , status = Fail , start = 2025-09-03 11:12:35.99232437
| | | F        UTC , finish = 2025-09-03 11:12:36.167029839 UTC , thread_cap_info = ("ThreadId
| | | F        93", 2, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F      = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F      = 180} , self = 58 , parent = Nothing , duration = 0.142552632000 , status
| | | | F      = Fail , start = 2025-09-03 11:12:35.999354233 UTC , finish = 2025-09-03
| | | | F      11:12:36.141906865 UTC , thread_cap_info = ("ThreadId 73", 0, False)}
| | | | F      
| | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F    = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | | F    alphabet_size = 4 , total_length = 39} , self = 63 , parent = Nothing ,
| | | | | F    duration = 0.188001087000 , status = Fail , start = 2025-09-03 11:12:36.011472913
| | | | | F    UTC , finish = 2025-09-03 11:12:36.199474 UTC , thread_cap_info = ("ThreadId
| | | | | F    95", 2, False)}
| | | | | F    
| | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | | | | S  = 4 , total_length = 37} , self = 69 , parent = Nothing , duration = 0.419098306000
| | | | | | S  , status = Success , start = 2025-09-03 11:12:36.047547058 UTC , finish
| | | | | | S  = 2025-09-03 11:12:36.466645364 UTC , thread_cap_info = ("ThreadId 100",
| | | | | | S  2, False)}
| | | | | | S  
| | | | F | |  
| | | F   | |  
| | F     | |  
| |       F |  
| | E       |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E       |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E       |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E       |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | E       |  = 4 , total_length = 37} , self = 71 , parent = Nothing , duration = 0.247453889000
| | E       |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:12:36.219355622
| | E       |  UTC , finish = 2025-09-03 11:12:36.466809511 UTC , thread_cap_info = ("ThreadId
| | E       |  107", 2, False)}
| | E       |  
| F |       |  
|   |       S  
|   E          
E              
