last 753 length 3236
CNF 753 vars 3236 clauses
last 1012 length 4219
last 1034 length 4406
last 810 length 3462
CNF 1034 vars 4406 clauses
last 1868 length 8569
CNF 1868 vars 8569 clauses
CNF 810 vars 3462 clauses
CNF 1012 vars 4219 clauses
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7339
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7357

last 2017 length 7339
last 2017 length 7357
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 32 epsilon transitions
SRS with 1 rules on 2 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height -1 and with 1 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b] -> [a, b, b, b] {- Input 0 -}
  [b, b, a, b] -> [b, b, a, a] {- Input 1 -}
  [a, a, a, b] -> [b, a, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, a] -> [b, b, b, a] {- Mirror (Input 0) -}
  [b, a, b, b] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b, a, a, a] -> [a, a, a, b] {- Mirror (Input 2) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1), (1, -1), (2, 2)], epsilons = [((0, 0, 0), (1, 2, 0)), ((0, 0, 1), (1, 2, 0)), ((0, 0, 2), (0, 0, 0)), ((0, 0, 2), (0, 1, 0)), ((0, 0, 2), (0, 2, 0)), ((0, 0, 2), (1, 2, 0)), ((0, 1, 2), (1, 2, 0)), ((0, 1, 3), (0, 0, 0)), ((0, 1, 3), (0, 1, 0)), ((0, 1, 3), (0, 2, 0)), ((0, 1, 3), (1, 2, 0)), ((0, 2, 3), (0, 0, 0)), ((0, 2, 3), (0, 1, 0)), ((0, 2, 3), (0, 2, 0)), ((0, 2, 3), (1, 2, 0)), ((1, 2, 3), (1, 2, 0)), ((1, 2, 3), (2, 2, 0)), ((2, 2, 3), (2, 2, 0)), ((1, 2, 4), (0, 0, 0)), ((1, 2, 4), (0, 1, 0)), ((1, 2, 4), (0, 2, 0)), ((1, 2, 4), (1, 2, 0)), ((1, 2, 4), (2, 2, 0)), ((1, 2, 4), (1, 2, 1)), ((1, 2, 4), (0, 2, 3)), ((1, 2, 4), (1, 2, 3)), ((2, 2, 4), (1, 2, 0)), ((2, 2, 4), (2, 2, 0)), ((2, 2, 4), (1, 2, 1)), ((2, 2, 4), (2, 2, 1)), ((2, 2, 4), (1, 2, 3)), ((2, 2, 4), (2, 2, 3))]}
   property Termination
has value Just True
for SRS
  [b, a, a, a] -> [a, a, a, b] {- Mirror (Input 2) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, -1)], epsilons = [((0, 0, 3), (0, 0, 0))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: \Mirror(3,2)\RelRFCmb{2}(1,2)\RelRFCmb{-1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 2017 vars 7357 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F    = 0 , alphabet_size = 2 , total_length = 24} , self = 41 , parent = Nothing
F    , duration = 0.139176208000 , status = Fail , start = 2025-09-03 12:05:00.330296472
F    UTC , finish = 2025-09-03 12:05:00.46947268 UTC , thread_cap_info = ("ThreadId
F    49", 3, False)}
F    
| F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| F  = 0 , alphabet_size = 2 , total_length = 24} , self = 40 , parent = Nothing
| F  , duration = 0.132875740000 , status = Fail , start = 2025-09-03 12:05:00.335930839
| F  UTC , finish = 2025-09-03 12:05:00.468806579 UTC , thread_cap_info = ("ThreadId
| F  51", 3, False)}
| F  
| F  
F    
