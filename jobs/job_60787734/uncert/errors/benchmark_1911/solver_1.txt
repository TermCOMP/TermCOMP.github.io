last 1014 length 4288
last 1096 length 4524
CNF 1014 vars 4288 clauses
last 1096 length 4524
CNF 1096 vars 4524 clauses
CNF 1096 vars 4524 clauses
last 1014 length 4288
CNF 1014 vars 4288 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3084, clauses: 11261
last 3084 length 11261
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3084, clauses: 11261
last 3084 length 11261
CNF 3084 vars 11261 clauses
CNF 3084 vars 11261 clauses
last 3276 length 13629
last 3576 length 15033
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10879, clauses: 45457
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3084, clauses: 11261, status: Satisfied, time: 0.203888326s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3084, clauses: 11261, status: Satisfied, time: 0.22310386s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10879, clauses: 45457
last 10879 length 45457
last 10879 length 45457
CNF 3576 vars 15033 clauses
**************************************************
summary
**************************************************
SRS with 8 rules on 5 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 200 rules on 24 letters       weights
SRS with 16 rules on 7 letters       mirror
SRS with 16 rules on 7 letters       DP
SRS with 36 strict rules and 16 weak rules on 11 letters       weights
SRS with 0 strict rules and 16 weak rules on 7 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [1, 2, 1] -> [2, 0, 2] {- Input 0 -}
  [0, 2, 1] -> [1, 0, 2] {- Input 1 -}
  [L, 2, 1] -> [L, 1, 0, 2] {- Input 2 -}
  [1, 2, 0] -> [2, 0, 1] {- Input 3 -}
  [1, 2, R] -> [2, 0, 1, R] {- Input 4 -}
  [0, 2, 0] -> [1, 0, 1] {- Input 5 -}
  [L, 2, 0] -> [L, 1, 0, 1] {- Input 6 -}
  [0, 2, R] -> [1, 0, 1, R] {- Input 7 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[1, 1], [1, 2], [2, 1], [1, 1]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[1, 1], [1, 2], [2, 1], [1, 2]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[1, 1], [1, 2], [2, 1], [1, 0]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[1, 1], [1, 2], [2, 1], [1, L]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 0 (Concon 3 (Input 0)) -}
  [[1, 1], [1, 2], [2, 1], [1, R]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 0 (Concon 4 (Input 0)) -}
  [[2, 1], [1, 2], [2, 1], [1, 1]] -> [ [2, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[2, 1], [1, 2], [2, 1], [1, 2]] -> [ [2, 2] , [2, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[2, 1], [1, 2], [2, 1], [1, 0]] -> [ [2, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[2, 1], [1, 2], [2, 1], [1, L]] -> [ [2, 2] , [2, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 1 (Concon 3 (Input 0)) -}
  [[2, 1], [1, 2], [2, 1], [1, R]] -> [ [2, 2] , [2, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 1 (Concon 4 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, 1]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, 2]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, 0]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, L]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 2 (Concon 3 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, R]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 2 (Concon 4 (Input 0)) -}
  [[L, 1], [1, 2], [2, 1], [1, 1]] -> [ [L, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 3 (Concon 0 (Input 0)) -}
  [[L, 1], [1, 2], [2, 1], [1, 2]] -> [ [L, 2] , [2, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 3 (Concon 1 (Input 0)) -}
  [[L, 1], [1, 2], [2, 1], [1, 0]] -> [ [L, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 3 (Concon 2 (Input 0)) -}
  [[L, 1], [1, 2], [2, 1], [1, L]] -> [ [L, 2] , [2, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 3 (Concon 3 (Input 0)) -}
  [[L, 1], [1, 2], [2, 1], [1, R]] -> [ [L, 2] , [2, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 3 (Concon 4 (Input 0)) -}
  [[R, 1], [1, 2], [2, 1], [1, 1]] -> [ [R, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 4 (Concon 0 (Input 0)) -}
  [[R, 1], [1, 2], [2, 1], [1, 2]] -> [ [R, 2] , [2, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 4 (Concon 1 (Input 0)) -}
  [[R, 1], [1, 2], [2, 1], [1, 0]] -> [ [R, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 4 (Concon 2 (Input 0)) -}
  [[R, 1], [1, 2], [2, 1], [1, L]] -> [ [R, 2] , [2, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 4 (Concon 3 (Input 0)) -}
  [[R, 1], [1, 2], [2, 1], [1, R]] -> [ [R, 2] , [2, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 4 (Concon 4 (Input 0)) -}
  [[1, 0], [0, 2], [2, 1], [1, 1]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[1, 0], [0, 2], [2, 1], [1, 2]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[1, 0], [0, 2], [2, 1], [1, 0]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[1, 0], [0, 2], [2, 1], [1, L]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 0 (Concon 3 (Input 1)) -}
  [[1, 0], [0, 2], [2, 1], [1, R]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 0 (Concon 4 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, 1]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, 2]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, 0]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, L]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 1 (Concon 3 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, R]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 1 (Concon 4 (Input 1)) -}
  [[0, 0], [0, 2], [2, 1], [1, 1]] -> [ [0, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[0, 0], [0, 2], [2, 1], [1, 2]] -> [ [0, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[0, 0], [0, 2], [2, 1], [1, 0]] -> [ [0, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[0, 0], [0, 2], [2, 1], [1, L]] -> [ [0, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 2 (Concon 3 (Input 1)) -}
  [[0, 0], [0, 2], [2, 1], [1, R]] -> [ [0, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 2 (Concon 4 (Input 1)) -}
  [[L, 0], [0, 2], [2, 1], [1, 1]] -> [ [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 3 (Concon 0 (Input 1)) -}
  [[L, 0], [0, 2], [2, 1], [1, 2]] -> [ [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 3 (Concon 1 (Input 1)) -}
  [[L, 0], [0, 2], [2, 1], [1, 0]] -> [ [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 3 (Concon 2 (Input 1)) -}
  [[L, 0], [0, 2], [2, 1], [1, L]] -> [ [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 3 (Concon 3 (Input 1)) -}
  [[L, 0], [0, 2], [2, 1], [1, R]] -> [ [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 3 (Concon 4 (Input 1)) -}
  [[R, 0], [0, 2], [2, 1], [1, 1]] -> [ [R, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 4 (Concon 0 (Input 1)) -}
  [[R, 0], [0, 2], [2, 1], [1, 2]] -> [ [R, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 4 (Concon 1 (Input 1)) -}
  [[R, 0], [0, 2], [2, 1], [1, 0]] -> [ [R, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 4 (Concon 2 (Input 1)) -}
  [[R, 0], [0, 2], [2, 1], [1, L]] -> [ [R, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 4 (Concon 3 (Input 1)) -}
  [[R, 0], [0, 2], [2, 1], [1, R]] -> [ [R, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 4 (Concon 4 (Input 1)) -}
  [[1, L], [L, 2], [2, 1], [1, 1]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[1, L], [L, 2], [2, 1], [1, 2]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[1, L], [L, 2], [2, 1], [1, 0]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[1, L], [L, 2], [2, 1], [1, L]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 0 (Concon 3 (Input 2)) -}
  [[1, L], [L, 2], [2, 1], [1, R]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 0 (Concon 4 (Input 2)) -}
  [[2, L], [L, 2], [2, 1], [1, 1]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[2, L], [L, 2], [2, 1], [1, 2]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[2, L], [L, 2], [2, 1], [1, 0]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[2, L], [L, 2], [2, 1], [1, L]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 1 (Concon 3 (Input 2)) -}
  [[2, L], [L, 2], [2, 1], [1, R]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 1 (Concon 4 (Input 2)) -}
  [[0, L], [L, 2], [2, 1], [1, 1]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[0, L], [L, 2], [2, 1], [1, 2]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[0, L], [L, 2], [2, 1], [1, 0]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[0, L], [L, 2], [2, 1], [1, L]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 2 (Concon 3 (Input 2)) -}
  [[0, L], [L, 2], [2, 1], [1, R]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 2 (Concon 4 (Input 2)) -}
  [[L, L], [L, 2], [2, 1], [1, 1]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 3 (Concon 0 (Input 2)) -}
  [[L, L], [L, 2], [2, 1], [1, 2]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 3 (Concon 1 (Input 2)) -}
  [[L, L], [L, 2], [2, 1], [1, 0]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 3 (Concon 2 (Input 2)) -}
  [[L, L], [L, 2], [2, 1], [1, L]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 3 (Concon 3 (Input 2)) -}
  [[L, L], [L, 2], [2, 1], [1, R]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 3 (Concon 4 (Input 2)) -}
  [[R, L], [L, 2], [2, 1], [1, 1]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 4 (Concon 0 (Input 2)) -}
  [[R, L], [L, 2], [2, 1], [1, 2]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 2 ] ] {- Semlab 4 (Concon 1 (Input 2)) -}
  [[R, L], [L, 2], [2, 1], [1, 0]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 4 (Concon 2 (Input 2)) -}
  [[R, L], [L, 2], [2, 1], [1, L]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , L ] ] {- Semlab 4 (Concon 3 (Input 2)) -}
  [[R, L], [L, 2], [2, 1], [1, R]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 2] , [ 2 , R ] ] {- Semlab 4 (Concon 4 (Input 2)) -}
  [[1, 1], [1, 2], [2, 0], [0, 1]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[1, 1], [1, 2], [2, 0], [0, 2]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[1, 1], [1, 2], [2, 0], [0, 0]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[1, 1], [1, 2], [2, 0], [0, L]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 0 (Concon 3 (Input 3)) -}
  [[1, 1], [1, 2], [2, 0], [0, R]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 0 (Concon 4 (Input 3)) -}
  [[2, 1], [1, 2], [2, 0], [0, 1]] -> [ [2, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[2, 1], [1, 2], [2, 0], [0, 2]] -> [ [2, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[2, 1], [1, 2], [2, 0], [0, 0]] -> [ [2, 2] , [2, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[2, 1], [1, 2], [2, 0], [0, L]] -> [ [2, 2] , [2, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 1 (Concon 3 (Input 3)) -}
  [[2, 1], [1, 2], [2, 0], [0, R]] -> [ [2, 2] , [2, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 1 (Concon 4 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, 1]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, 2]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, 0]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, L]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 2 (Concon 3 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, R]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 2 (Concon 4 (Input 3)) -}
  [[L, 1], [1, 2], [2, 0], [0, 1]] -> [ [L, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 3 (Concon 0 (Input 3)) -}
  [[L, 1], [1, 2], [2, 0], [0, 2]] -> [ [L, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 3 (Concon 1 (Input 3)) -}
  [[L, 1], [1, 2], [2, 0], [0, 0]] -> [ [L, 2] , [2, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 3 (Concon 2 (Input 3)) -}
  [[L, 1], [1, 2], [2, 0], [0, L]] -> [ [L, 2] , [2, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 3 (Concon 3 (Input 3)) -}
  [[L, 1], [1, 2], [2, 0], [0, R]] -> [ [L, 2] , [2, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 3 (Concon 4 (Input 3)) -}
  [[R, 1], [1, 2], [2, 0], [0, 1]] -> [ [R, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 4 (Concon 0 (Input 3)) -}
  [[R, 1], [1, 2], [2, 0], [0, 2]] -> [ [R, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 4 (Concon 1 (Input 3)) -}
  [[R, 1], [1, 2], [2, 0], [0, 0]] -> [ [R, 2] , [2, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 4 (Concon 2 (Input 3)) -}
  [[R, 1], [1, 2], [2, 0], [0, L]] -> [ [R, 2] , [2, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 4 (Concon 3 (Input 3)) -}
  [[R, 1], [1, 2], [2, 0], [0, R]] -> [ [R, 2] , [2, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 4 (Concon 4 (Input 3)) -}
  [[1, 1], [1, 2], [2, R], [R, 1]] -> [ [1, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[1, 1], [1, 2], [2, R], [R, 2]] -> [ [1, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[1, 1], [1, 2], [2, R], [R, 0]] -> [ [1, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[1, 1], [1, 2], [2, R], [R, L]] -> [ [1, 2] , [2, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 0 (Concon 3 (Input 4)) -}
  [[1, 1], [1, 2], [2, R], [R, R]] -> [ [1, 2] , [2, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 0 (Concon 4 (Input 4)) -}
  [[2, 1], [1, 2], [2, R], [R, 1]] -> [ [2, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[2, 1], [1, 2], [2, R], [R, 2]] -> [ [2, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[2, 1], [1, 2], [2, R], [R, 0]] -> [ [2, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[2, 1], [1, 2], [2, R], [R, L]] -> [ [2, 2] , [2, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 1 (Concon 3 (Input 4)) -}
  [[2, 1], [1, 2], [2, R], [R, R]] -> [ [2, 2] , [2, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 1 (Concon 4 (Input 4)) -}
  [[0, 1], [1, 2], [2, R], [R, 1]] -> [ [0, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[0, 1], [1, 2], [2, R], [R, 2]] -> [ [0, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[0, 1], [1, 2], [2, R], [R, 0]] -> [ [0, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 2 (Concon 2 (Input 4)) -}
  [[0, 1], [1, 2], [2, R], [R, L]] -> [ [0, 2] , [2, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 2 (Concon 3 (Input 4)) -}
  [[0, 1], [1, 2], [2, R], [R, R]] -> [ [0, 2] , [2, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 2 (Concon 4 (Input 4)) -}
  [[L, 1], [1, 2], [2, R], [R, 1]] -> [ [L, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 3 (Concon 0 (Input 4)) -}
  [[L, 1], [1, 2], [2, R], [R, 2]] -> [ [L, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 3 (Concon 1 (Input 4)) -}
  [[L, 1], [1, 2], [2, R], [R, 0]] -> [ [L, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 3 (Concon 2 (Input 4)) -}
  [[L, 1], [1, 2], [2, R], [R, L]] -> [ [L, 2] , [2, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 3 (Concon 3 (Input 4)) -}
  [[L, 1], [1, 2], [2, R], [R, R]] -> [ [L, 2] , [2, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 3 (Concon 4 (Input 4)) -}
  [[R, 1], [1, 2], [2, R], [R, 1]] -> [ [R, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 4 (Concon 0 (Input 4)) -}
  [[R, 1], [1, 2], [2, R], [R, 2]] -> [ [R, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 4 (Concon 1 (Input 4)) -}
  [[R, 1], [1, 2], [2, R], [R, 0]] -> [ [R, 2] , [2, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 4 (Concon 2 (Input 4)) -}
  [[R, 1], [1, 2], [2, R], [R, L]] -> [ [R, 2] , [2, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 4 (Concon 3 (Input 4)) -}
  [[R, 1], [1, 2], [2, R], [R, R]] -> [ [R, 2] , [2, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 4 (Concon 4 (Input 4)) -}
  [[1, 0], [0, 2], [2, 0], [0, 1]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[1, 0], [0, 2], [2, 0], [0, 2]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[1, 0], [0, 2], [2, 0], [0, 0]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 0 (Concon 2 (Input 5)) -}
  [[1, 0], [0, 2], [2, 0], [0, L]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 0 (Concon 3 (Input 5)) -}
  [[1, 0], [0, 2], [2, 0], [0, R]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 0 (Concon 4 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, 1]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, 2]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, 0]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 1 (Concon 2 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, L]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 1 (Concon 3 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, R]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 1 (Concon 4 (Input 5)) -}
  [[0, 0], [0, 2], [2, 0], [0, 1]] -> [ [0, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 2 (Concon 0 (Input 5)) -}
  [[0, 0], [0, 2], [2, 0], [0, 2]] -> [ [0, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 2 (Concon 1 (Input 5)) -}
  [[0, 0], [0, 2], [2, 0], [0, 0]] -> [ [0, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 2 (Concon 2 (Input 5)) -}
  [[0, 0], [0, 2], [2, 0], [0, L]] -> [ [0, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 2 (Concon 3 (Input 5)) -}
  [[0, 0], [0, 2], [2, 0], [0, R]] -> [ [0, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 2 (Concon 4 (Input 5)) -}
  [[L, 0], [0, 2], [2, 0], [0, 1]] -> [ [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 3 (Concon 0 (Input 5)) -}
  [[L, 0], [0, 2], [2, 0], [0, 2]] -> [ [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 3 (Concon 1 (Input 5)) -}
  [[L, 0], [0, 2], [2, 0], [0, 0]] -> [ [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 3 (Concon 2 (Input 5)) -}
  [[L, 0], [0, 2], [2, 0], [0, L]] -> [ [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 3 (Concon 3 (Input 5)) -}
  [[L, 0], [0, 2], [2, 0], [0, R]] -> [ [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 3 (Concon 4 (Input 5)) -}
  [[R, 0], [0, 2], [2, 0], [0, 1]] -> [ [R, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 4 (Concon 0 (Input 5)) -}
  [[R, 0], [0, 2], [2, 0], [0, 2]] -> [ [R, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 4 (Concon 1 (Input 5)) -}
  [[R, 0], [0, 2], [2, 0], [0, 0]] -> [ [R, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 4 (Concon 2 (Input 5)) -}
  [[R, 0], [0, 2], [2, 0], [0, L]] -> [ [R, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 4 (Concon 3 (Input 5)) -}
  [[R, 0], [0, 2], [2, 0], [0, R]] -> [ [R, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 4 (Concon 4 (Input 5)) -}
  [[1, L], [L, 2], [2, 0], [0, 1]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 0 (Concon 0 (Input 6)) -}
  [[1, L], [L, 2], [2, 0], [0, 2]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 0 (Concon 1 (Input 6)) -}
  [[1, L], [L, 2], [2, 0], [0, 0]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 0 (Concon 2 (Input 6)) -}
  [[1, L], [L, 2], [2, 0], [0, L]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 0 (Concon 3 (Input 6)) -}
  [[1, L], [L, 2], [2, 0], [0, R]] -> [ [1, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 0 (Concon 4 (Input 6)) -}
  [[2, L], [L, 2], [2, 0], [0, 1]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 1 (Concon 0 (Input 6)) -}
  [[2, L], [L, 2], [2, 0], [0, 2]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 1 (Concon 1 (Input 6)) -}
  [[2, L], [L, 2], [2, 0], [0, 0]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 1 (Concon 2 (Input 6)) -}
  [[2, L], [L, 2], [2, 0], [0, L]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 1 (Concon 3 (Input 6)) -}
  [[2, L], [L, 2], [2, 0], [0, R]] -> [ [2, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 1 (Concon 4 (Input 6)) -}
  [[0, L], [L, 2], [2, 0], [0, 1]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 2 (Concon 0 (Input 6)) -}
  [[0, L], [L, 2], [2, 0], [0, 2]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 2 (Concon 1 (Input 6)) -}
  [[0, L], [L, 2], [2, 0], [0, 0]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 2 (Concon 2 (Input 6)) -}
  [[0, L], [L, 2], [2, 0], [0, L]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 2 (Concon 3 (Input 6)) -}
  [[0, L], [L, 2], [2, 0], [0, R]] -> [ [0, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 2 (Concon 4 (Input 6)) -}
  [[L, L], [L, 2], [2, 0], [0, 1]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 3 (Concon 0 (Input 6)) -}
  [[L, L], [L, 2], [2, 0], [0, 2]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 3 (Concon 1 (Input 6)) -}
  [[L, L], [L, 2], [2, 0], [0, 0]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 3 (Concon 2 (Input 6)) -}
  [[L, L], [L, 2], [2, 0], [0, L]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 3 (Concon 3 (Input 6)) -}
  [[L, L], [L, 2], [2, 0], [0, R]] -> [ [L, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 3 (Concon 4 (Input 6)) -}
  [[R, L], [L, 2], [2, 0], [0, 1]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 4 (Concon 0 (Input 6)) -}
  [[R, L], [L, 2], [2, 0], [0, 2]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 4 (Concon 1 (Input 6)) -}
  [[R, L], [L, 2], [2, 0], [0, 0]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , 0 ] ] {- Semlab 4 (Concon 2 (Input 6)) -}
  [[R, L], [L, 2], [2, 0], [0, L]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , L ] ] {- Semlab 4 (Concon 3 (Input 6)) -}
  [[R, L], [L, 2], [2, 0], [0, R]] -> [ [R, L] , [L, 1] , [1, 0] , [0, 1] , [ 1 , R ] ] {- Semlab 4 (Concon 4 (Input 6)) -}
  [[1, 0], [0, 2], [2, R], [R, 1]] -> [ [1, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 0 (Concon 0 (Input 7)) -}
  [[1, 0], [0, 2], [2, R], [R, 2]] -> [ [1, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 0 (Concon 1 (Input 7)) -}
  [[1, 0], [0, 2], [2, R], [R, 0]] -> [ [1, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 0 (Concon 2 (Input 7)) -}
  [[1, 0], [0, 2], [2, R], [R, L]] -> [ [1, 1] , [1, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 0 (Concon 3 (Input 7)) -}
  [[1, 0], [0, 2], [2, R], [R, R]] -> [ [1, 1] , [1, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 0 (Concon 4 (Input 7)) -}
  [[2, 0], [0, 2], [2, R], [R, 1]] -> [ [2, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 1 (Concon 0 (Input 7)) -}
  [[2, 0], [0, 2], [2, R], [R, 2]] -> [ [2, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 1 (Concon 1 (Input 7)) -}
  [[2, 0], [0, 2], [2, R], [R, 0]] -> [ [2, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 1 (Concon 2 (Input 7)) -}
  [[2, 0], [0, 2], [2, R], [R, L]] -> [ [2, 1] , [1, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 1 (Concon 3 (Input 7)) -}
  [[2, 0], [0, 2], [2, R], [R, R]] -> [ [2, 1] , [1, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 1 (Concon 4 (Input 7)) -}
  [[0, 0], [0, 2], [2, R], [R, 1]] -> [ [0, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 2 (Concon 0 (Input 7)) -}
  [[0, 0], [0, 2], [2, R], [R, 2]] -> [ [0, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 2 (Concon 1 (Input 7)) -}
  [[0, 0], [0, 2], [2, R], [R, 0]] -> [ [0, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 2 (Concon 2 (Input 7)) -}
  [[0, 0], [0, 2], [2, R], [R, L]] -> [ [0, 1] , [1, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 2 (Concon 3 (Input 7)) -}
  [[0, 0], [0, 2], [2, R], [R, R]] -> [ [0, 1] , [1, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 2 (Concon 4 (Input 7)) -}
  [[L, 0], [0, 2], [2, R], [R, 1]] -> [ [L, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 3 (Concon 0 (Input 7)) -}
  [[L, 0], [0, 2], [2, R], [R, 2]] -> [ [L, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 3 (Concon 1 (Input 7)) -}
  [[L, 0], [0, 2], [2, R], [R, 0]] -> [ [L, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 3 (Concon 2 (Input 7)) -}
  [[L, 0], [0, 2], [2, R], [R, L]] -> [ [L, 1] , [1, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 3 (Concon 3 (Input 7)) -}
  [[L, 0], [0, 2], [2, R], [R, R]] -> [ [L, 1] , [1, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 3 (Concon 4 (Input 7)) -}
  [[R, 0], [0, 2], [2, R], [R, 1]] -> [ [R, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 1 ] ] {- Semlab 4 (Concon 0 (Input 7)) -}
  [[R, 0], [0, 2], [2, R], [R, 2]] -> [ [R, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 2 ] ] {- Semlab 4 (Concon 1 (Input 7)) -}
  [[R, 0], [0, 2], [2, R], [R, 0]] -> [ [R, 1] , [1, 0] , [0, 1] , [1, R] , [ R , 0 ] ] {- Semlab 4 (Concon 2 (Input 7)) -}
  [[R, 0], [0, 2], [2, R], [R, L]] -> [ [R, 1] , [1, 0] , [0, 1] , [1, R] , [ R , L ] ] {- Semlab 4 (Concon 3 (Input 7)) -}
  [[R, 0], [0, 2], [2, R], [R, R]] -> [ [R, 1] , [1, 0] , [0, 1] , [1, R] , [ R , R ] ] {- Semlab 4 (Concon 4 (Input 7)) -}
reason
  CNF 10879 vars 45457 clauses
([L, L], 0/1)
  ([L, 1], 0/1)
  ([L, 2], 1/1)
  ([L, 0], 1/1)
  ([1, L], 1/1)
  ([1, 1], 3/1)
  ([1, R], 0/1)
  ([1, 2], 6/1)
  ([1, 0], 0/1)
  ([R, L], 0/1)
  ([R, 1], 1/1)
  ([R, R], 0/1)
  ([R, 2], 0/1)
  ([R, 0], 1/1)
  ([2, L], 0/1)
  ([2, 1], 6/1)
  ([2, R], 1/1)
  ([2, 2], 0/1)
  ([2, 0], 3/1)
  ([0, L], 1/1)
  ([0, 1], 0/1)
  ([0, R], 1/1)
  ([0, 2], 3/1)
  ([0, 0], 1/1)
   property Termination
has value Just True
for SRS
  [[1, 1], [1, 2], [2, 1], [1, 1]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[1, 1], [1, 2], [2, 1], [1, 0]] -> [ [1, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, 1]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[0, 1], [1, 2], [2, 1], [1, 0]] -> [ [0, 2] , [2, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[1, 0], [0, 2], [2, 1], [1, 1]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[1, 0], [0, 2], [2, 1], [1, 0]] -> [ [1, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, 1]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , 1 ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[2, 0], [0, 2], [2, 1], [1, 0]] -> [ [2, 1] , [1, 0] , [0, 2] , [ 2 , 0 ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[1, 1], [1, 2], [2, 0], [0, 1]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[1, 1], [1, 2], [2, 0], [0, 2]] -> [ [1, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, 1]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[0, 1], [1, 2], [2, 0], [0, 2]] -> [ [0, 2] , [2, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[1, 0], [0, 2], [2, 0], [0, 1]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 0 (Concon 0 (Input 5)) -}
  [[1, 0], [0, 2], [2, 0], [0, 2]] -> [ [1, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 0 (Concon 1 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, 1]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , 1 ] ] {- Semlab 1 (Concon 0 (Input 5)) -}
  [[2, 0], [0, 2], [2, 0], [0, 2]] -> [ [2, 1] , [1, 0] , [0, 1] , [ 1 , 2 ] ] {- Semlab 1 (Concon 1 (Input 5)) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[1, 1], [2, 1], [1, 2], [1, 1]] -> [ [2, 1] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- Mirror (Semlab 0 (Concon 0 (Input 0))) -}
  [[1, 0], [2, 1], [1, 2], [1, 1]] -> [ [2, 0] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- Mirror (Semlab 0 (Concon 2 (Input 0))) -}
  [[1, 1], [2, 1], [1, 2], [0, 1]] -> [ [2, 1] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- Mirror (Semlab 2 (Concon 0 (Input 0))) -}
  [[1, 0], [2, 1], [1, 2], [0, 1]] -> [ [2, 0] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- Mirror (Semlab 2 (Concon 2 (Input 0))) -}
  [[1, 1], [2, 1], [0, 2], [1, 0]] -> [ [2, 1] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- Mirror (Semlab 0 (Concon 0 (Input 1))) -}
  [[1, 0], [2, 1], [0, 2], [1, 0]] -> [ [2, 0] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- Mirror (Semlab 0 (Concon 2 (Input 1))) -}
  [[1, 1], [2, 1], [0, 2], [2, 0]] -> [ [2, 1] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- Mirror (Semlab 1 (Concon 0 (Input 1))) -}
  [[1, 0], [2, 1], [0, 2], [2, 0]] -> [ [2, 0] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- Mirror (Semlab 1 (Concon 2 (Input 1))) -}
  [[0, 1], [2, 0], [1, 2], [1, 1]] -> [ [1, 1] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- Mirror (Semlab 0 (Concon 0 (Input 3))) -}
  [[0, 2], [2, 0], [1, 2], [1, 1]] -> [ [1, 2] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- Mirror (Semlab 0 (Concon 1 (Input 3))) -}
  [[0, 1], [2, 0], [1, 2], [0, 1]] -> [ [1, 1] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- Mirror (Semlab 2 (Concon 0 (Input 3))) -}
  [[0, 2], [2, 0], [1, 2], [0, 1]] -> [ [1, 2] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- Mirror (Semlab 2 (Concon 1 (Input 3))) -}
  [[0, 1], [2, 0], [0, 2], [1, 0]] -> [ [1, 1] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- Mirror (Semlab 0 (Concon 0 (Input 5))) -}
  [[0, 2], [2, 0], [0, 2], [1, 0]] -> [ [1, 2] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- Mirror (Semlab 0 (Concon 1 (Input 5))) -}
  [[0, 1], [2, 0], [0, 2], [2, 0]] -> [ [1, 1] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- Mirror (Semlab 1 (Concon 0 (Input 5))) -}
  [[0, 2], [2, 0], [0, 2], [2, 0]] -> [ [1, 2] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- Mirror (Semlab 1 (Concon 1 (Input 5))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[1, 1], [2, 1], [1, 2], [1, 1]] ->= [ [2, 1] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[1, 0], [2, 1], [1, 2], [1, 1]] ->= [ [2, 0] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[1, 1], [2, 1], [1, 2], [0, 1]] ->= [ [2, 1] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[1, 0], [2, 1], [1, 2], [0, 1]] ->= [ [2, 0] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[1, 1], [2, 1], [0, 2], [1, 0]] ->= [ [2, 1] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 1)))) -}
  [[1, 0], [2, 1], [0, 2], [1, 0]] ->= [ [2, 0] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[1, 1], [2, 1], [0, 2], [2, 0]] ->= [ [2, 1] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[1, 0], [2, 1], [0, 2], [2, 0]] ->= [ [2, 0] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[0, 1], [2, 0], [1, 2], [1, 1]] ->= [ [1, 1] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 3)))) -}
  [[0, 2], [2, 0], [1, 2], [1, 1]] ->= [ [1, 2] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 3)))) -}
  [[0, 1], [2, 0], [1, 2], [0, 1]] ->= [ [1, 1] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 3)))) -}
  [[0, 2], [2, 0], [1, 2], [0, 1]] ->= [ [1, 2] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 3)))) -}
  [[0, 1], [2, 0], [0, 2], [1, 0]] ->= [ [1, 1] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 2], [2, 0], [0, 2], [1, 0]] ->= [ [1, 2] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 5)))) -}
  [[0, 1], [2, 0], [0, 2], [2, 0]] ->= [ [1, 1] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 5)))) -}
  [[0, 2], [2, 0], [0, 2], [2, 0]] ->= [ [1, 2] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 5)))) -}
  [[1, 1]#, [2, 1], [1, 2], [1, 1]] |-> [ [0, 2]# , [2, 0] , [ 1 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[1, 1]#, [2, 1], [1, 2], [0, 1]] |-> [ [ 0 , 2 ]# ] {- DP (Top 3) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[1, 1]#, [2, 1], [1, 2], [0, 1]] |-> [ [0, 2]# , [2, 0] , [ 0 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[1, 1]#, [2, 1], [0, 2], [1, 0]] |-> [ [ 1 , 1 ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 0 (Input 1)))) -}
  [[1, 1]#, [2, 1], [0, 2], [1, 0]] |-> [ [1, 0]# , [ 1 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 0 (Input 1)))) -}
  [[1, 1]#, [2, 1], [0, 2], [1, 0]] |-> [ [0, 2]# , [1, 0] , [ 1 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 1)))) -}
  [[1, 1]#, [2, 1], [0, 2], [2, 0]] |-> [ [1, 0]# , [ 2 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[1, 1]#, [2, 1], [0, 2], [2, 0]] |-> [ [0, 2]# , [1, 0] , [ 2 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[1, 0]#, [2, 1], [1, 2], [1, 1]] |-> [ [0, 2]# , [2, 0] , [ 1 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[1, 0]#, [2, 1], [1, 2], [0, 1]] |-> [ [ 0 , 2 ]# ] {- DP (Top 3) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[1, 0]#, [2, 1], [1, 2], [0, 1]] |-> [ [0, 2]# , [2, 0] , [ 0 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[1, 0]#, [2, 1], [0, 2], [1, 0]] |-> [ [ 1 , 1 ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[1, 0]#, [2, 1], [0, 2], [1, 0]] |-> [ [1, 0]# , [ 1 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[1, 0]#, [2, 1], [0, 2], [1, 0]] |-> [ [0, 2]# , [1, 0] , [ 1 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[1, 0]#, [2, 1], [0, 2], [2, 0]] |-> [ [1, 0]# , [ 2 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[1, 0]#, [2, 1], [0, 2], [2, 0]] |-> [ [0, 2]# , [1, 0] , [ 2 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[0, 1]#, [2, 0], [1, 2], [1, 1]] |-> [ [1, 1]# , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 3)))) -}
  [[0, 1]#, [2, 0], [1, 2], [1, 1]] |-> [ [0, 1]# , [2, 0] , [ 1 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 3)))) -}
  [[0, 1]#, [2, 0], [1, 2], [0, 1]] |-> [ [1, 1]# , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 3)))) -}
  [[0, 1]#, [2, 0], [1, 2], [0, 1]] |-> [ [0, 1]# , [2, 0] , [ 0 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 3)))) -}
  [[0, 1]#, [2, 0], [1, 2], [0, 1]] |-> [ [ 0 , 2 ]# ] {- DP (Top 3) (Mirror (Semlab 2 (Concon 0 (Input 3)))) -}
  [[0, 1]#, [2, 0], [0, 2], [1, 0]] |-> [ [ 1 , 1 ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [1, 0]] |-> [ [1, 1]# , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [1, 0]] |-> [ [1, 0]# , [ 1 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [1, 0]] |-> [ [0, 1]# , [1, 0] , [ 1 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [2, 0]] |-> [ [1, 1]# , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [2, 0]] |-> [ [1, 0]# , [ 2 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 0 (Input 5)))) -}
  [[0, 1]#, [2, 0], [0, 2], [2, 0]] |-> [ [0, 1]# , [1, 0] , [ 2 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 5)))) -}
  [[0, 2]#, [2, 0], [1, 2], [1, 1]] |-> [ [0, 1]# , [2, 0] , [ 1 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Input 3)))) -}
  [[0, 2]#, [2, 0], [1, 2], [0, 1]] |-> [ [0, 1]# , [2, 0] , [ 0 , 2 ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 1 (Input 3)))) -}
  [[0, 2]#, [2, 0], [1, 2], [0, 1]] |-> [ [ 0 , 2 ]# ] {- DP (Top 3) (Mirror (Semlab 2 (Concon 1 (Input 3)))) -}
  [[0, 2]#, [2, 0], [0, 2], [1, 0]] |-> [ [ 1 , 1 ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 1 (Input 5)))) -}
  [[0, 2]#, [2, 0], [0, 2], [1, 0]] |-> [ [1, 0]# , [ 1 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 5)))) -}
  [[0, 2]#, [2, 0], [0, 2], [1, 0]] |-> [ [0, 1]# , [1, 0] , [ 1 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Input 5)))) -}
  [[0, 2]#, [2, 0], [0, 2], [2, 0]] |-> [ [1, 0]# , [ 2 , 1 ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 1 (Input 5)))) -}
  [[0, 2]#, [2, 0], [0, 2], [2, 0]] |-> [ [0, 1]# , [1, 0] , [ 2 , 1 ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 1 (Input 5)))) -}
reason
  ([1, 1], 2/1)
  ([1, 2], 2/1)
  ([1, 0], 2/1)
  ([2, 1], 2/1)
  ([2, 0], 2/1)
  ([0, 1], 2/1)
  ([0, 2], 2/1)
  ([1, 1]#, 0/1)
  ([1, 0]#, 0/1)
  ([0, 1]#, 2/1)
  ([0, 2]#, 1/1)
   property Termination
has value Just True
for SRS
  [[1, 1], [2, 1], [1, 2], [1, 1]] ->= [ [2, 1] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[1, 0], [2, 1], [1, 2], [1, 1]] ->= [ [2, 0] , [0, 2] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[1, 1], [2, 1], [1, 2], [0, 1]] ->= [ [2, 1] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[1, 0], [2, 1], [1, 2], [0, 1]] ->= [ [2, 0] , [0, 2] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[1, 1], [2, 1], [0, 2], [1, 0]] ->= [ [2, 1] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 1)))) -}
  [[1, 0], [2, 1], [0, 2], [1, 0]] ->= [ [2, 0] , [0, 2] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[1, 1], [2, 1], [0, 2], [2, 0]] ->= [ [2, 1] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[1, 0], [2, 1], [0, 2], [2, 0]] ->= [ [2, 0] , [0, 2] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[0, 1], [2, 0], [1, 2], [1, 1]] ->= [ [1, 1] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 3)))) -}
  [[0, 2], [2, 0], [1, 2], [1, 1]] ->= [ [1, 2] , [0, 1] , [2, 0] , [ 1 , 2 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 3)))) -}
  [[0, 1], [2, 0], [1, 2], [0, 1]] ->= [ [1, 1] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 3)))) -}
  [[0, 2], [2, 0], [1, 2], [0, 1]] ->= [ [1, 2] , [0, 1] , [2, 0] , [ 0 , 2 ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 3)))) -}
  [[0, 1], [2, 0], [0, 2], [1, 0]] ->= [ [1, 1] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 5)))) -}
  [[0, 2], [2, 0], [0, 2], [1, 0]] ->= [ [1, 2] , [0, 1] , [1, 0] , [ 1 , 1 ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 5)))) -}
  [[0, 1], [2, 0], [0, 2], [2, 0]] ->= [ [1, 1] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 5)))) -}
  [[0, 2], [2, 0], [0, 2], [2, 0]] ->= [ [1, 2] , [0, 1] , [1, 0] , [ 2 , 1 ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 5)))) -}
reason
  EDG

**************************************************
skeleton: (8,5)\TileAllAll{2}(200,24)\Weight\Mirror(16,7)\Deepee(36/16,11)\Weight(0/16,7)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 10879 vars 45457 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 7 , total_length = 128} , self = 64 , parent = Nothing
F          , duration = 0.424222576000 , status = Fail , start = 2025-09-03 13:59:49.128725052
F          UTC , finish = 2025-09-03 13:59:49.552947628 UTC , thread_cap_info = ("ThreadId
F          61", 0, False)}
F          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 7 , total_length = 128} , self = 67 , parent = Nothing
| F        , duration = 0.436877209000 , status = Fail , start = 2025-09-03 13:59:49.1287303
| F        UTC , finish = 2025-09-03 13:59:49.565607509 UTC , thread_cap_info = ("ThreadId
| F        63", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F      = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | F      = 52} , self = 53 , parent = Nothing , duration = 0.103540157000 , status
| | F      = Fail , start = 2025-09-03 13:59:49.208867624 UTC , finish = 2025-09-03
| | F      13:59:49.312407781 UTC , thread_cap_info = ("ThreadId 85", 2, False)}
| | F      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| | | S    = 5 , total_length = 52} , self = 82 , parent = Nothing , duration = 0.350856307000
| | | S    , status = Success , start = 2025-09-03 13:59:49.225681377 UTC , finish
| | | S    = 2025-09-03 13:59:49.576537684 UTC , thread_cap_info = ("ThreadId 93",
| | | S    2, False)}
| | | S    
| | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S  = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| | | | S  = 5 , total_length = 52} , self = 80 , parent = Nothing , duration = 0.323682997000
| | | | S  , status = Success , start = 2025-09-03 13:59:49.250979624 UTC , finish
| | | | S  = 2025-09-03 13:59:49.574662621 UTC , thread_cap_info = ("ThreadId 95",
| | | | S  2, False)}
| | | | S  
| | F | |  
| | E | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | |  = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | E | |  = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | E | |  = 128} , self = 84 , parent = Nothing , duration = 0.215453409000 , status
| | E | |  = Except "AsyncCancelled" , start = 2025-09-03 13:59:49.361232864 UTC ,
| | E | |  finish = 2025-09-03 13:59:49.576686273 UTC , thread_cap_info = ("ThreadId
| | E | |  106", 3, False)}
| | E | |  
F | | | |  
  F | | |  
    | | S  
    | S    
    E      
