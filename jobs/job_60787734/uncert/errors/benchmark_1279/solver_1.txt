last 501 length 1928
CNF 501 vars 1928 clauses
last 402 length 1577
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1985, clauses: 7209
last 1985 length 7209
CNF 402 vars 1577 clauses
last 732 length 2947
last 669 length 2816
CNF 1985 vars 7209 clauses
CNF 732 vars 2947 clauses
CNF 669 vars 2816 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1985, clauses: 7209, status: Satisfied, time: 0.048738787s
last 4154 length 21124
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4671, clauses: 19065
last 3998 length 17778
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2468, clauses: 9036
CNF 4154 vars 21124 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23189
last 374 length 1483
last 431 length 1663
CNF 3998 vars 17778 clauses
last 2468 length 9036
last 5670 length 23189
CNF 431 vars 1663 clauses
CNF 374 vars 1483 clauses
CNF 2468 vars 9036 clauses
CNF 5670 vars 23189 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1879, clauses: 6730
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23189, status: Satisfied, time: 0.090471509s
last 1879 length 6730
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4625, clauses: 18889
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 4625 length 18889
CNF 1879 vars 6730 clauses
last 426 length 1775
last 518 length 2233
CNF 426 vars 1775 clauses
CNF 4625 vars 18889 clauses
CNF 518 vars 2233 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 6474
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1879, clauses: 6730, status: Unsatisfied, time: 0.10234222s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4364, clauses: 17703
last 1835 length 6474
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2892, clauses: 11405
last 4364 length 17703
last 2892 length 11405
CNF 1835 vars 6474 clauses
CNF 4364 vars 17703 clauses
CNF 2892 vars 11405 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 6474, status: Satisfied, time: 0.068078793s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4364, clauses: 17703, status: Satisfied, time: 0.031633322s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       EDG
SRS with 6 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 3 weak rules on 6 letters       EDG
SRS with 3 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 6 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [b, a, c] -> [c, b, a, a] {- Input 1 -}
  [b, b] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [c, a, b] -> [a, a, b, c] {- Mirror (Input 1) -}
  [b, b] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [c#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a, b] |-> [a#, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a, b] |-> [b#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a, b] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [c#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a, b] |-> [a#, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a, b] |-> [b#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a, b] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  2A 2A \
        | -1A -  -  |
        \ -   -  0A / )
  ( b
  , Wk  / 0A  - -  \
        | -1A - -  |
        \ -   - 0A / )
  ( c
  , Wk  / 0A  - -  \
        | -1A - -  |
        \ -   - 0A / )
  ( a#
  , Wk  / 0A - 0A \
        | -  - -  |
        \ -  - 0A / )
  ( b#
  , Wk  / 0A - -2A \
        | -  - -   |
        \ -  - 0A  / )
  ( c#
  , Wk  / 0A - -2A \
        | -  - -   |
        \ -  - 0A  / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [c#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [c#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, b] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 1A -  \
        | 0A 0A 1A |
        \ -  -  0A / )
  ( b
  , Wk  / 0A 1A -  \
        | -  0A -  |
        \ -  -  0A / )
  ( c
  , Wk  / 0A 1A -  \
        | -  0A -  |
        \ -  -  0A / )
  ( a#
  , Wk  / 0A - -2A \
        | -  - -   |
        \ -  - 0A  / )
  ( b#
  , Wk  / 0A - -2A \
        | -  - -   |
        \ -  - 0A  / )
  ( c#
  , Wk  / 0A 1A -2A \
        | -  -  -   |
        \ -  -  0A  / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [c#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a, b] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee\EDG(6/3,6)\Matrix{\ArcticBZ}{3}\EDG(3/3,6)\Matrix{\ArcticBZ}{3}(2/3,6)\Weight(0/3,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                    , closure = Backward\n , start_strict_only = True\n , max_closure_length
E                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                    = 12} , self = 106 , parent = Nothing , duration = 0.731604994000 , status
E                    = Except "AsyncCancelled" , start = 2025-09-03 11:29:49.160091024 UTC ,
E                    finish = 2025-09-03 11:29:49.891696018 UTC , thread_cap_info = ("ThreadId
E                    35", 3, False)}
E                    
| E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E                  = 12} , self = 102 , parent = Nothing , duration = 0.724872402000 , status
| E                  = Except "AsyncCancelled" , start = 2025-09-03 11:29:49.160144947 UTC ,
| E                  finish = 2025-09-03 11:29:49.885017349 UTC , thread_cap_info = ("ThreadId
| E                  36", 2, False)}
| E                  
| | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F                = 162} , self = 73 , parent = Nothing , duration = 0.408073014000 , status
| | F                = Fail , start = 2025-09-03 11:29:49.185372932 UTC , finish = 2025-09-03
| | F                11:29:49.593445946 UTC , thread_cap_info = ("ThreadId 70", 3, False)}
| | F                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F              = 162} , self = 72 , parent = Nothing , duration = 0.387996776000 , status
| | | F              = Fail , start = 2025-09-03 11:29:49.18538066 UTC , finish = 2025-09-03
| | | F              11:29:49.573377436 UTC , thread_cap_info = ("ThreadId 72", 3, False)}
| | | F              
| | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F            = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size = 6 , total_length
| | | | F            = 39} , self = 62 , parent = Nothing , duration = 0.189298949000 , status
| | | | F            = Fail , start = 2025-09-03 11:29:49.203037007 UTC , finish = 2025-09-03
| | | | F            11:29:49.392335956 UTC , thread_cap_info = ("ThreadId 90", 1, False)}
| | | | F            
| | | | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S          = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | S          = 5 , total_length = 29} , self = 65 , parent = Nothing , duration = 0.281446627000
| | | | | S          , status = Success , start = 2025-09-03 11:29:49.211643694 UTC , finish
| | | | | S          = 2025-09-03 11:29:49.493090321 UTC , thread_cap_info = ("ThreadId 92",
| | | | | S          1, False)}
| | | | | S          
| | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | F        = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size = 6 , total_length
| | | | | | F        = 39} , self = 63 , parent = Nothing , duration = 0.254218424000 , status
| | | | | | F        = Fail , start = 2025-09-03 11:29:49.229143524 UTC , finish = 2025-09-03
| | | | | | F        11:29:49.483361948 UTC , thread_cap_info = ("ThreadId 93", 1, False)}
| | | | | | F        
| | | | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | | | E      = 5 , total_length = 29} , self = 67 , parent = Nothing , duration = 0.277725758000
| | | | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:29:49.247503709
| | | | | | | E      UTC , finish = 2025-09-03 11:29:49.525229467 UTC , thread_cap_info = ("ThreadId
| | | | | | | E      96", 1, False)}
| | | | | | | E      
| | | | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | F    = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | | | F    = 0 , alphabet_size = 9 , total_length = 162} , self = 86 , parent = Nothing
| | | | | | | | F    , duration = 0.556826948000 , status = Fail , start = 2025-09-03 11:29:49.297686278
| | | | | | | | F    UTC , finish = 2025-09-03 11:29:49.854513226 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F    100", 3, False)}
| | | | | | | | F    
| | | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | F  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | F  = 0 , alphabet_size = 9 , total_length = 162} , self = 64 , parent = Nothing
| | | | | | | | | F  , duration = 0.166057481000 , status = Fail , start = 2025-09-03 11:29:49.317788736
| | | | | | | | | F  UTC , finish = 2025-09-03 11:29:49.483846217 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | F  102", 3, False)}
| | | | | | | | | F  
| | | | F | | | | |  
| | | | F | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F | | | | |  = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | F | | | | |  = 6 , total_length = 39} , self = 78 , parent = Nothing , duration = 0.252275616000
| | | | F | | | | |  , status = Fail , start = 2025-09-03 11:29:49.444764638 UTC , finish =
| | | | F | | | | |  2025-09-03 11:29:49.697040254 UTC , thread_cap_info = ("ThreadId 104",
| | | | F | | | | |  1, False)}
| | | | F | | | | |  
| | | | | | F | | |  
| | | | | |   | | F  
| | | | | | S | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | S | |    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | | | S | |    = 6 , total_length = 39} , self = 76 , parent = Nothing , duration = 0.210968007000
| | | | | | S | |    , status = Success , start = 2025-09-03 11:29:49.483895582 UTC , finish
| | | | | | S | |    = 2025-09-03 11:29:49.694863589 UTC , thread_cap_info = ("ThreadId 105",
| | | | | | S | |    1, False)}
| | | | | | S | |    
| | | | | S | | |    
| | | | |   | E |    
| | | | | F |   |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F |   |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | F |   |    = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 5 , total_length
| | | | | F |   |    = 25} , self = 75 , parent = Nothing , duration = 0.122606265000 , status
| | | | | F |   |    = Fail , start = 2025-09-03 11:29:49.525569311 UTC , finish = 2025-09-03
| | | | | F |   |    11:29:49.648175576 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
| | | | | F |   |    
| | | F | | |   |    
| | F   | | |   |    
| | F   | | |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F   | | |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   | | |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   | | |   |    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | F   | | |   |    = 5 , total_length = 25} , self = 85 , parent = Nothing , duration = 0.212904303000
| | F   | | |   |    , status = Fail , start = 2025-09-03 11:29:49.597751112 UTC , finish =
| | F   | | |   |    2025-09-03 11:29:49.810655415 UTC , thread_cap_info = ("ThreadId 118",
| | F   | | |   |    1, False)}
| | F   | | |   |    
| | |   | F |   |    
| | |   |   S   |    
| | |   F       |    
| | | S         |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S         |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S         |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S         |    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | S         |    = 6 , total_length = 24} , self = 96 , parent = Nothing , duration = 0.153547800000
| | | S         |    , status = Success , start = 2025-09-03 11:29:49.728536472 UTC , finish
| | | S         |    = 2025-09-03 11:29:49.882084272 UTC , thread_cap_info = ("ThreadId 132",
| | | S         |    1, False)}
| | | S         |    
| | | | S       |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S       |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S       |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S       |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S       |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S       |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | S       |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | S       |    = 6 , total_length = 24} , self = 97 , parent = Nothing , duration = 0.154556116000
| | | | S       |    , status = Success , start = 2025-09-03 11:29:49.728553502 UTC , finish
| | | | S       |    = 2025-09-03 11:29:49.883109618 UTC , thread_cap_info = ("ThreadId 133",
| | | | S       |    1, False)}
| | | | S       |    
| | F | |       |    
| |   | |       F    
| |   S |            
| |     S            
| E                  
E                    
