last 4956 length 33380
CNF 4956 vars 33380 clauses
last 7498 length 56026
CNF 7498 vars 56026 clauses
last 7508 length 34605
CNF 7508 vars 34605 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       Drop
SRS with 1 rules on 2 letters       mirror
SRS with 1 rules on 2 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 73 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, b, a, a, a, a] -> [ a , a , a , a , a , a , b , b , a , a , a , b , b ] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [b, b, a, a, a, a] -> [ a , a , a , a , b , b , a , a , a , b , b ] {- Dropped 2 0 (Input 0) -}
    reason
      mirror
       property Termination
    has value Just True
    for SRS
      [a, a, a, a, b, b] -> [ b , b , a , a , a , b , b , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 73 states

   property Termination
has value Just True
for SRS
  [b, b, a, a, a, a] -> [ a , a , a , a , b , b , a , a , a , b , b ] {- Dropped 2 0 (Input 0) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a, a, b, b] -> [ b , b , a , a , a , b , b , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 73 states

**************************************************
skeleton: (1,2)\Drop{2}{0}\Mirror(1,2)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 6
  max duration 1.275540128000
  min duration 0.246474812000
  total durat. 3.532367695000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 21}
    , self = 81
    , parent = Nothing
    , duration = 1.275540128000
    , status = Fail
    , start = 2025-09-03 12:14:07.43168997 UTC
    , finish = 2025-09-03 12:14:08.707230098 UTC
    , thread_cap_info = ("ThreadId 125", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 2
  max duration 1.548427803000
  min duration 1.382553656000
  total durat. 2.930981459000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 17}
    , self = 83
    , parent = Nothing
    , duration = 1.382553656000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.389328764 UTC
    , finish = 2025-09-03 12:14:08.77188242 UTC
    , thread_cap_info = ("ThreadId 119", 3, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 19}
    , self = 85
    , parent = Nothing
    , duration = 1.548427803000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.282562529 UTC
    , finish = 2025-09-03 12:14:08.830990332 UTC
    , thread_cap_info = ("ThreadId 112", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 3
  max duration 1.456259052000
  min duration 1.020664839000
  total durat. 3.655953481000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 21}
    , self = 84
    , parent = Nothing
    , duration = 1.020664839000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.75122735 UTC
    , finish = 2025-09-03 12:14:08.771892189 UTC
    , thread_cap_info = ("ThreadId 133", 3, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 17}
    , self = 79
    , parent = Nothing
    , duration = 1.179029590000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.351970425 UTC
    , finish = 2025-09-03 12:14:08.531000015 UTC
    , thread_cap_info = ("ThreadId 118", 3, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 19}
    , self = 82
    , parent = Nothing
    , duration = 1.456259052000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.250988059 UTC
    , finish = 2025-09-03 12:14:08.707247111 UTC
    , thread_cap_info = ("ThreadId 111", 3, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 3
  max duration 1.419468668000
  min duration 1.018753020000
  total durat. 3.857502813000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 17}
    , self = 77
    , parent = Nothing
    , duration = 1.018753020000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.112223508 UTC
    , finish = 2025-09-03 12:14:08.130976528 UTC
    , thread_cap_info = ("ThreadId 66", 3, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 21}
    , self = 80
    , parent = Nothing
    , duration = 1.419281125000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.232055033 UTC
    , finish = 2025-09-03 12:14:08.651336158 UTC
    , thread_cap_info = ("ThreadId 103", 3, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 19}
    , self = 78
    , parent = Nothing
    , duration = 1.419468668000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:14:07.071508121 UTC
    , finish = 2025-09-03 12:14:08.490976789 UTC
    , thread_cap_info = ("ThreadId 51", 3, False)}
**************************************************
E                              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                              = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E                              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                              = 19} , self = 78 , parent = Nothing , duration = 1.419468668000 , status
E                              = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.071508121 UTC ,
E                              finish = 2025-09-03 12:14:08.490976789 UTC , thread_cap_info = ("ThreadId
E                              51", 3, False)}
E                              
| F                            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F                            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F                            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F                            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F                            = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| F                            = 0 , alphabet_size = 2 , total_length = 19} , self = 60 , parent = Nothing
| F                            , duration = 0.638734519000 , status = Fail , start = 2025-09-03 12:14:07.071575794
| F                            UTC , finish = 2025-09-03 12:14:07.710310313 UTC , thread_cap_info = ("ThreadId
| F                            62", 3, False)}
| F                            
| | F                          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F                          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F                          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F                          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F                          = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | F                          = 0 , alphabet_size = 2 , total_length = 19} , self = 56 , parent = Nothing
| | F                          , duration = 0.429691929000 , status = Fail , start = 2025-09-03 12:14:07.092472485
| | F                          UTC , finish = 2025-09-03 12:14:07.522164414 UTC , thread_cap_info = ("ThreadId
| | F                          64", 3, False)}
| | F                          
| | | E                        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | E                        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | E                        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | E                        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | E                        = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E                        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E                        = 17} , self = 77 , parent = Nothing , duration = 1.018753020000 , status
| | | E                        = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.112223508 UTC ,
| | | E                        finish = 2025-09-03 12:14:08.130976528 UTC , thread_cap_info = ("ThreadId
| | | E                        66", 3, False)}
| | | E                        
| | | | F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F                      = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F                      = 92} , self = 75 , parent = Nothing , duration = 0.922077649000 , status
| | | | F                      = Fail , start = 2025-09-03 12:14:07.150995324 UTC , finish = 2025-09-03
| | | | F                      12:14:08.073072973 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| | | | F                      
| | | | | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F                    = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F                    = 92} , self = 59 , parent = Nothing , duration = 0.522809803000 , status
| | | | | F                    = Fail , start = 2025-09-03 12:14:07.170990895 UTC , finish = 2025-09-03
| | | | | F                    12:14:07.693800698 UTC , thread_cap_info = ("ThreadId 94", 1, False)}
| | | | | F                    
| | | | | | F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F                  = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | | F                  = 0 , alphabet_size = 4 , total_length = 92} , self = 58 , parent = Nothing
| | | | | | F                  , duration = 0.476570631000 , status = Fail , start = 2025-09-03 12:14:07.211700977
| | | | | | F                  UTC , finish = 2025-09-03 12:14:07.688271608 UTC , thread_cap_info = ("ThreadId
| | | | | | F                  113", 2, False)}
| | | | | | F                  
| | | | | | | F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F                = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | | | F                = 0 , alphabet_size = 4 , total_length = 92} , self = 55 , parent = Nothing
| | | | | | | F                , duration = 0.246474812000 , status = Fail , start = 2025-09-03 12:14:07.23203167
| | | | | | | F                UTC , finish = 2025-09-03 12:14:07.478506482 UTC , thread_cap_info = ("ThreadId
| | | | | | | F                115", 2, False)}
| | | | | | | F                
| | | | | | | | E              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | E              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | E              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | E              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | E              = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | E              = 0 , alphabet_size = 2 , total_length = 17} , self = 74 , parent = Nothing
| | | | | | | | E              , duration = 0.758939583000 , status = Except "AsyncCancelled" , start
| | | | | | | | E              = 2025-09-03 12:14:07.232037319 UTC , finish = 2025-09-03 12:14:07.990976902
| | | | | | | | E              UTC , thread_cap_info = ("ThreadId 102", 3, False)}
| | | | | | | | E              
| | | | | | | | | E            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | | | | E            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | | | | E            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | | | | E            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | | | | E            = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | E            = 21} , self = 80 , parent = Nothing , duration = 1.419281125000 , status
| | | | | | | | | E            = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.232055033 UTC ,
| | | | | | | | | E            finish = 2025-09-03 12:14:08.651336158 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | E            103", 3, False)}
| | | | | | | | | E            
| | | | | | | | | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | E          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | E          = 19} , self = 82 , parent = Nothing , duration = 1.456259052000 , status
| | | | | | | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.250988059 UTC ,
| | | | | | | | | | E          finish = 2025-09-03 12:14:08.707247111 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | E          111", 3, False)}
| | | | | | | | | | E          
| | | | | | | | | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | E        = 19} , self = 85 , parent = Nothing , duration = 1.548427803000 , status
| | | | | | | | | | | E        = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.282562529 UTC ,
| | | | | | | | | | | E        finish = 2025-09-03 12:14:08.830990332 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | E        112", 3, False)}
| | | | | | | | | | | E        
| | | | | | | | | | | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | E      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | E      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | E      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | E      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | E      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | E      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | E      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | E      = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | E      = 17} , self = 79 , parent = Nothing , duration = 1.179029590000 , status
| | | | | | | | | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.351970425 UTC ,
| | | | | | | | | | | | E      finish = 2025-09-03 12:14:08.531000015 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | E      118", 3, False)}
| | | | | | | | | | | | E      
| | | | | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | E    = 17} , self = 83 , parent = Nothing , duration = 1.382553656000 , status
| | | | | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.389328764 UTC ,
| | | | | | | | | | | | | E    finish = 2025-09-03 12:14:08.77188242 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | E    119", 3, False)}
| | | | | | | | | | | | | E    
| | | | | | | | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | | | | | F  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | | | | | F  = 0 , alphabet_size = 2 , total_length = 21} , self = 81 , parent = Nothing
| | | | | | | | | | | | | | F  , duration = 1.275540128000 , status = Fail , start = 2025-09-03 12:14:07.43168997
| | | | | | | | | | | | | | F  UTC , finish = 2025-09-03 12:14:08.707230098 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | F  125", 3, False)}
| | | | | | | | | | | | | | F  
| | | | | | | F | | | | | | |  
| | F | | | |   | | | | | | |  
| | F | | | |   | | | | | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F | | | |   | | | | | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F | | | |   | | | | | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F | | | |   | | | | | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F | | | |   | | | | | | |  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | F | | | |   | | | | | | |  = 0 , alphabet_size = 2 , total_length = 21} , self = 76 , parent = Nothing
| | F | | | |   | | | | | | |  , duration = 0.465355676000 , status = Fail , start = 2025-09-03 12:14:07.611014581
| | F | | | |   | | | | | | |  UTC , finish = 2025-09-03 12:14:08.076370257 UTC , thread_cap_info = ("ThreadId
| | F | | | |   | | | | | | |  129", 3, False)}
| | F | | | |   | | | | | | |  
| | | | | | F   | | | | | | |  
| | | | | F     | | | | | | |  
| F | | |       | | | | | | |  
| E | | |       | | | | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | |       | | | | | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | |       | | | | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | |       | | | | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | |       | | | | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | |       | | | | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | |       | | | | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | |       | | | | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | |       | | | | | | |  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E | | |       | | | | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E | | |       | | | | | | |  = 21} , self = 84 , parent = Nothing , duration = 1.020664839000 , status
| E | | |       | | | | | | |  = Except "AsyncCancelled" , start = 2025-09-03 12:14:07.75122735 UTC ,
| E | | |       | | | | | | |  finish = 2025-09-03 12:14:08.771892189 UTC , thread_cap_info = ("ThreadId
| E | | |       | | | | | | |  133", 3, False)}
| E | | |       | | | | | | |  
| | | | |       E | | | | | |  
| | | | F         | | | | | |  
| | F |           | | | | | |  
| |   E           | | | | | |  
E |               | | | | | |  
  |               | | | E | |  
  |               E | |   | |  
  |                 | |   | F  
  |                 E |   |    
  |                   |   E    
  E                   |        
                      E        
