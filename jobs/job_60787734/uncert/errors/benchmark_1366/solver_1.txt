last 2707 length 12726
CNF 2707 vars 12726 clauses
last 3069 length 16840
CNF 3069 vars 16840 clauses
last 369 length 1426
CNF 369 vars 1426 clauses
last 379 length 1482
CNF 379 vars 1482 clauses
last 521 length 2064
CNF 521 vars 2064 clauses
last 470 length 1894
CNF 470 vars 1894 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1997, clauses: 7044
last 1997 length 7044
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8251
last 2314 length 8251
CNF 1997 vars 7044 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6454, clauses: 26671
CNF 2314 vars 8251 clauses
last 6454 length 26671
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6289, clauses: 25859
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1997, clauses: 7044, status: Unsatisfied, time: 0.119047552s
last 6289 length 25859
CNF 6454 vars 26671 clauses
CNF 6289 vars 25859 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8251, status: Satisfied, time: 0.15456524s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6454, clauses: 26671, status: Satisfied, time: 0.076026348s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4072, clauses: 15826
last 386 length 1503
CNF 386 vars 1503 clauses
last 415 length 1596
last 409 length 1634
last 423 length 1733
CNF 423 vars 1733 clauses
CNF 415 vars 1596 clauses
CNF 409 vars 1634 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2105, clauses: 7473
last 2105 length 7473
CNF 2105 vars 7473 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1904, clauses: 6726
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2105, clauses: 7473, status: Satisfied, time: 0.080694527s
last 1904 length 6726
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 36 rules on 9 letters       weights
SRS with 16 rules on 9 letters       DP
SRS with 50 strict rules and 16 weak rules on 16 letters       weights
SRS with 3 strict rules and 16 weak rules on 12 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [a, b] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, b] -> [a, b, c, c] {- Input 3 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
CNF 1904 vars 6726 clauses
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, a], [a, c]] -> [ [a, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, b]] -> [ [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, c]] -> [ [b, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a], [a, a], [a, a]] -> [ [c, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a], [a, a], [a, b]] -> [ [c, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, a], [a, a], [a, c]] -> [ [c, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, c], [c, b], [b, a]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, c], [c, b], [b, a]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, c], [c, b], [b, b]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, c], [c, b], [b, c]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, b]] -> [ [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a], [a, a], [a, b]] -> [ [c, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[a, c], [c, b], [b, a]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, c], [c, b], [b, a]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, c], [c, b], [b, b]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, c], [c, b], [b, c]] -> [ [c, a] , [a, b] , [b, c] , [c, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 3)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[c, a], [a, b]] ->= [[c, b]] {- DP Nontop (Semlab 2 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[c, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 2 (Concon 1 (Input 1))) -}
  [[a, b], [b, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, c]] ->= [[a, c]] {- DP Nontop (Semlab 0 (Concon 2 (Input 2))) -}
  [[a, c], [c, b], [b, a]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c], [c, b], [b, b]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c], [c, b], [b, c]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 0 (Concon 2 (Input 3))) -}
  [[b, c], [c, b], [b, a]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c], [c, b], [b, b]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c], [c, b], [b, c]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 1 (Concon 2 (Input 3))) -}
  [[c, c], [c, b], [b, a]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c], [c, b], [b, b]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c], [c, b], [b, c]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 2 (Concon 2 (Input 3))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [a, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 1))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [a, b]# , [ b , b ] ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 1))) -}
  [[a, b]#, [b, a]] |-> [[a, a]#] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, c]] |-> [[a, c]#] {- DP (Top 0) (Semlab 0 (Concon 2 (Input 2))) -}
  [[a, c]#, [c, b], [b, a]] |-> [ [a, a]# , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c]#, [c, b], [b, a]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c]#, [c, b], [b, a]] |-> [ [b, c]# , [c, c] , [ c , a ] ] {- DP (Top 2) (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c]#, [c, b], [b, a]] |-> [ [ c , a ]# ] {- DP (Top 4) (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c]#, [c, b], [b, a]] |-> [ [c, c]# , [ c , a ] ] {- DP (Top 3) (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c]#, [c, b], [b, b]] |-> [ [a, a]# , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c]#, [c, b], [b, b]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c]#, [c, b], [b, b]] |-> [ [b, c]# , [c, c] , [ c , b ] ] {- DP (Top 2) (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c]#, [c, b], [b, b]] |-> [ [c, c]# , [ c , b ] ] {- DP (Top 3) (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c]#, [c, b], [b, c]] |-> [ [a, a]# , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 0) (Semlab 0 (Concon 2 (Input 3))) -}
  [[a, c]#, [c, b], [b, c]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 1) (Semlab 0 (Concon 2 (Input 3))) -}
  [[a, c]#, [c, b], [b, c]] |-> [ [b, c]# , [c, c] , [ c , c ] ] {- DP (Top 2) (Semlab 0 (Concon 2 (Input 3))) -}
  [[a, c]#, [c, b], [b, c]] |-> [ [ c , c ]# ] {- DP (Top 4) (Semlab 0 (Concon 2 (Input 3))) -}
  [[a, c]#, [c, b], [b, c]] |-> [ [c, c]# , [ c , c ] ] {- DP (Top 3) (Semlab 0 (Concon 2 (Input 3))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [a, b]# , [ b , b ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [b, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, c]#, [c, b], [b, a]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c]#, [c, b], [b, a]] |-> [ [b, a]# , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c]#, [c, b], [b, a]] |-> [ [b, c]# , [c, c] , [ c , a ] ] {- DP (Top 2) (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c]#, [c, b], [b, a]] |-> [ [ c , a ]# ] {- DP (Top 4) (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c]#, [c, b], [b, a]] |-> [ [c, c]# , [ c , a ] ] {- DP (Top 3) (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c]#, [c, b], [b, b]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c]#, [c, b], [b, b]] |-> [ [b, a]# , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c]#, [c, b], [b, b]] |-> [ [b, c]# , [c, c] , [ c , b ] ] {- DP (Top 2) (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c]#, [c, b], [b, b]] |-> [ [c, c]# , [ c , b ] ] {- DP (Top 3) (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c]#, [c, b], [b, c]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 1) (Semlab 1 (Concon 2 (Input 3))) -}
  [[b, c]#, [c, b], [b, c]] |-> [ [b, a]# , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 0) (Semlab 1 (Concon 2 (Input 3))) -}
  [[b, c]#, [c, b], [b, c]] |-> [ [b, c]# , [c, c] , [ c , c ] ] {- DP (Top 2) (Semlab 1 (Concon 2 (Input 3))) -}
  [[b, c]#, [c, b], [b, c]] |-> [ [ c , c ]# ] {- DP (Top 4) (Semlab 1 (Concon 2 (Input 3))) -}
  [[b, c]#, [c, b], [b, c]] |-> [ [c, c]# , [ c , c ] ] {- DP (Top 3) (Semlab 1 (Concon 2 (Input 3))) -}
  [[c, a]#, [a, a], [a, b]] |-> [ [a, b]# , [ b , b ] ] {- DP (Top 1) (Semlab 2 (Concon 1 (Input 1))) -}
  [[c, a]#, [a, a], [a, b]] |-> [ [c, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 2 (Concon 1 (Input 1))) -}
  [[c, c]#, [c, b], [b, a]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 1) (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c]#, [c, b], [b, a]] |-> [ [b, c]# , [c, c] , [ c , a ] ] {- DP (Top 2) (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c]#, [c, b], [b, a]] |-> [ [ c , a ]# ] {- DP (Top 4) (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c]#, [c, b], [b, a]] |-> [ [c, a]# , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP (Top 0) (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c]#, [c, b], [b, a]] |-> [ [c, c]# , [ c , a ] ] {- DP (Top 3) (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c]#, [c, b], [b, b]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 1) (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c]#, [c, b], [b, b]] |-> [ [b, c]# , [c, c] , [ c , b ] ] {- DP (Top 2) (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c]#, [c, b], [b, b]] |-> [ [c, a]# , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP (Top 0) (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c]#, [c, b], [b, b]] |-> [ [c, c]# , [ c , b ] ] {- DP (Top 3) (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c]#, [c, b], [b, c]] |-> [ [a, b]# , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 1) (Semlab 2 (Concon 2 (Input 3))) -}
  [[c, c]#, [c, b], [b, c]] |-> [ [b, c]# , [c, c] , [ c , c ] ] {- DP (Top 2) (Semlab 2 (Concon 2 (Input 3))) -}
  [[c, c]#, [c, b], [b, c]] |-> [ [c, a]# , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP (Top 0) (Semlab 2 (Concon 2 (Input 3))) -}
  [[c, c]#, [c, b], [b, c]] |-> [ [ c , c ]# ] {- DP (Top 4) (Semlab 2 (Concon 2 (Input 3))) -}
  [[c, c]#, [c, b], [b, c]] |-> [ [c, c]# , [ c , c ] ] {- DP (Top 3) (Semlab 2 (Concon 2 (Input 3))) -}
reason
  ([a, a], 4/1)
  ([a, b], 0/1)
  ([a, c], 0/1)
  ([b, a], 4/1)
  ([b, b], 4/1)
  ([b, c], 0/1)
  ([c, a], 4/1)
  ([c, b], 4/1)
  ([c, c], 0/1)
  ([a, a]#, 3/1)
  ([a, b]#, 2/1)
  ([a, c]#, 1/1)
  ([b, a]#, 3/1)
  ([b, c]#, 4/1)
  ([c, a]#, 3/1)
  ([c, c]#, 4/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[c, a], [a, b]] ->= [[c, b]] {- DP Nontop (Semlab 2 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[c, a], [a, a], [a, b]] ->= [ [c, a] , [a, b] , [ b , b ] ] {- DP Nontop (Semlab 2 (Concon 1 (Input 1))) -}
  [[a, b], [b, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, c]] ->= [[a, c]] {- DP Nontop (Semlab 0 (Concon 2 (Input 2))) -}
  [[a, c], [c, b], [b, a]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 3))) -}
  [[a, c], [c, b], [b, b]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 3))) -}
  [[a, c], [c, b], [b, c]] ->= [ [a, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 0 (Concon 2 (Input 3))) -}
  [[b, c], [c, b], [b, a]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 3))) -}
  [[b, c], [c, b], [b, b]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 3))) -}
  [[b, c], [c, b], [b, c]] ->= [ [b, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 1 (Concon 2 (Input 3))) -}
  [[c, c], [c, b], [b, a]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , a ] ] {- DP Nontop (Semlab 2 (Concon 0 (Input 3))) -}
  [[c, c], [c, b], [b, b]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , b ] ] {- DP Nontop (Semlab 2 (Concon 1 (Input 3))) -}
  [[c, c], [c, b], [b, c]] ->= [ [c, a] , [a, b] , [b, c] , [c, c] , [ c , c ] ] {- DP Nontop (Semlab 2 (Concon 2 (Input 3))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [a, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [b, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 1))) -}
  [[c, a]#, [a, a], [a, b]] |-> [ [c, a]# , [a, b] , [ b , b ] ] {- DP (Top 0) (Semlab 2 (Concon 1 (Input 1))) -}
reason
  EDG

**************************************************
skeleton: (4,3)\TileAllAll{2}(36,9)\Weight(16,9)\Deepee(50/16,16)\Weight(3/16,12)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 3 , total_length = 12} , self = 48 , parent = Nothing
F          , duration = 0.138100519000 , status = Fail , start = 2025-09-03 11:42:01.850154195
F          UTC , finish = 2025-09-03 11:42:01.988254714 UTC , thread_cap_info = ("ThreadId
F          41", 3, False)}
F          
| F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F        = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
| F        = 0 , alphabet_size = 9 , total_length = 102} , self = 86 , parent = Nothing
| F        , duration = 0.379399408000 , status = Fail , start = 2025-09-03 11:42:01.951297671
| F        UTC , finish = 2025-09-03 11:42:02.330697079 UTC , thread_cap_info = ("ThreadId
| F        81", 1, False)}
| F        
F |        
F |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |        = 9 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 8 , alphabet_size
F |        = 4 , total_length = 32} , self = 67 , parent = Nothing , duration = 0.171518529000
F |        , status = Fail , start = 2025-09-03 11:42:02.003604093 UTC , finish =
F |        2025-09-03 11:42:02.175122622 UTC , thread_cap_info = ("ThreadId 103",
F |        3, False)}
F |        
| | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 8 , alphabet_size
| | S      = 4 , total_length = 32} , self = 70 , parent = Nothing , duration = 0.199890494000
| | S      , status = Success , start = 2025-09-03 11:42:02.024414961 UTC , finish
| | S      = 2025-09-03 11:42:02.224305455 UTC , thread_cap_info = ("ThreadId 106",
| | S      3, False)}
| | S      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
| | | S    alphabet_size = 5 , total_length = 39} , self = 68 , parent = Nothing ,
| | | S    duration = 0.172705230000 , status = Success , start = 2025-09-03 11:42:02.048707833
| | | S    UTC , finish = 2025-09-03 11:42:02.221413063 UTC , thread_cap_info = ("ThreadId
| | | S    107", 3, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| | | | E  = 5 , total_length = 39} , self = 77 , parent = Nothing , duration = 0.154133687000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:02.085794592
| | | | E  UTC , finish = 2025-09-03 11:42:02.239928279 UTC , thread_cap_info = ("ThreadId
| | | | E  109", 3, False)}
| | | | E  
F | | | |  
  | | S |  
  | S   |  
  |     E  
  F        
