last 452 length 1760
CNF 452 vars 1760 clauses
last 451 length 1764
CNF 451 vars 1764 clauses
last 503 length 2049
CNF 503 vars 2049 clauses
last 4963 length 24787
last 462 length 1849
last 4109 length 18533
CNF 4963 vars 24787 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2052, clauses: 7310
CNF 462 vars 1849 clauses
CNF 4109 vars 18533 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2155, clauses: 7630
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6165, clauses: 25385
last 2052 length 7310
last 2155 length 7630
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6128, clauses: 25313
last 6165 length 25385
last 6128 length 25313
CNF 2155 vars 7630 clauses
CNF 6165 vars 25385 clauses
CNF 2052 vars 7310 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2155, clauses: 7630, status: Unsatisfied, time: 0.093945328s
CNF 6128 vars 25313 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2052, clauses: 7310, status: Unsatisfied, time: 0.189899941s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3865, clauses: 15167
last 3865 length 15167
CNF 3865 vars 15167 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3850, clauses: 15134
last 3850 length 15134
CNF 3850 vars 15134 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3850, clauses: 15134, status: Unsatisfied, time: 0.632379523s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6128, clauses: 25313, status: Unsatisfied, time: 1.004213735s
[Info] pool sizes (success) 35509 seen 19670 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [b, c, b, c, b, c, b, c, a, b, c, c, b, b, c, c]
to
  [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, c, b, b, c, c]
via 28 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, c, a, a] {- Input 1 -}
  [a, c, c] -> [b, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [b, c, b, c, b, c, b, c, a, b, c, c, b, b, c, c], via = [(Step   { rule = 1, position = 8}, [b, c, b, c, b, c, b, c, b, c, a, a, c, c, b, b, c, c]), (Step   { rule = 2, position = 11}, [b, c, b, c, b, c, b, c, b, c, a, b, a, b, b, c, c]), (Step   { rule = 1, position = 12}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, a, b, c, c]), (Step   { rule = 1, position = 15}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, a, a, c, c]), (Step   { rule = 2, position = 18}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, a, b, a]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, a, b]), (Step   { rule = 1, position = 17}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, b, c, a, a]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, b, c, a]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, c, b, c]), (Step   { rule = 1, position = 14}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, c, a, a, c, b, c]), (Step   { rule = 0, position = 16}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, c, a, c, b, c]), (Step   { rule = 0, position = 16}, [b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, c, c, b, c]), (Step   { rule = 1, position = 10}, [b, c, b, c, b, c, b, c, b, c, b, c, a, a, b, c, b, c, c, b, c]), (Step   { rule = 1, position = 13}, [b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, a, a, c, b, c, c, b, c]), (Step   { rule = 0, position = 15}, [b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, a, c, b, c, c, b, c]), (Step   { rule = 0, position = 15}, [b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, c, b, c, c, b, c]), (Step   { rule = 1, position = 12}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, a, c, c, b, c, c, b, c]), (Step   { rule = 2, position = 15}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, a, b, c, c, b, c]), (Step   { rule = 1, position = 16}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, a, c, c, b, c]), (Step   { rule = 2, position = 19}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, a, b, a, b, c]), (Step   { rule = 0, position = 18}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, a, b, c]), (Step   { rule = 1, position = 19}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, b, c, a, a, c]), (Step   { rule = 0, position = 21}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, b, c, a, c]), (Step   { rule = 0, position = 21}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, b, c, b, b, c, c]), (Step   { rule = 1, position = 14}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, a, b, c, b, b, c, c]), (Step   { rule = 1, position = 17}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, a, a, c, b, b, c, c]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, a, c, b, b, c, c]), (Step   { rule = 0, position = 19}, [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, c, b, b, c, c])], to = [b, c, b, c, b, c, b, c, b, c, b, c, b, c, b, c, a, b, c, c, b, b, c, c]}

**************************************************
skeleton: (3,3)\Loop{28}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 0.940697776000
  min duration 0.040552772000
  total durat. 1.266086865000
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.054697826000
  min duration 1.054697826000
  total durat. 1.054697826000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 5
      , alphabet_size = 4
      , total_length = 31}
    , self = 85
    , parent = Nothing
    , duration = 1.054697826000
    , status = Fail
    , start = 2025-09-03 11:13:58.449579168 UTC
    , finish = 2025-09-03 11:13:59.504276994 UTC
    , thread_cap_info = ("ThreadId 106", 1, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 12} , self = 62 , parent = Nothing , duration = 0.150773447000 , status
F                  = Fail , start = 2025-09-03 11:13:58.074639334 UTC , finish = 2025-09-03
F                  11:13:58.225412781 UTC , thread_cap_info = ("ThreadId 29", 2, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 162} , self = 66 , parent = Nothing , duration = 0.411326299000 , status
| F                = Fail , start = 2025-09-03 11:13:58.076350613 UTC , finish = 2025-09-03
| F                11:13:58.487676912 UTC , thread_cap_info = ("ThreadId 59", 0, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F              = 12} , self = 69 , parent = Nothing , duration = 0.913531982000 , status
| | F              = Fail , start = 2025-09-03 11:13:58.084075851 UTC , finish = 2025-09-03
| | F              11:13:58.997607833 UTC , thread_cap_info = ("ThreadId 41", 2, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 162} , self = 63 , parent = Nothing , duration = 0.206348986000 , status
| | | F            = Fail , start = 2025-09-03 11:13:58.084076841 UTC , finish = 2025-09-03
| | | F            11:13:58.290425827 UTC , thread_cap_info = ("ThreadId 61", 0, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F          = 31} , self = 65 , parent = Nothing , duration = 0.307890325000 , status
| | | | F          = Fail , start = 2025-09-03 11:13:58.141650673 UTC , finish = 2025-09-03
| | | | F          11:13:58.449540998 UTC , thread_cap_info = ("ThreadId 88", 1, False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | F        = 5 , total_length = 31} , self = 67 , parent = Nothing , duration = 0.424709851000
| | | | | F        , status = Fail , start = 2025-09-03 11:13:58.154162096 UTC , finish =
| | | | | F        2025-09-03 11:13:58.578871947 UTC , thread_cap_info = ("ThreadId 93", 1,
| | | | | F        False)}
| | | | | F        
| | | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F      = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | F      = 0 , alphabet_size = 9 , total_length = 162} , self = 64 , parent = Nothing
| | | | | | F      , duration = 0.244248819000 , status = Fail , start = 2025-09-03 11:13:58.204093778
| | | | | | F      UTC , finish = 2025-09-03 11:13:58.448342597 UTC , thread_cap_info = ("ThreadId
| | | | | | F      99", 3, False)}
| | | | | | F      
| | | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | F    = 4 , total_length = 31} , self = 68 , parent = Nothing , duration = 0.405219273000
| | | | | | | F    , status = Fail , start = 2025-09-03 11:13:58.208846629 UTC , finish =
| | | | | | | F    2025-09-03 11:13:58.614065902 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | | F    1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | F  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | | | | | | F  = 0 , alphabet_size = 9 , total_length = 162} , self = 70 , parent = Nothing
| | | | | | | | F  , duration = 0.940697776000 , status = Fail , start = 2025-09-03 11:13:58.224523994
| | | | | | | | F  UTC , finish = 2025-09-03 11:13:59.16522177 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F  101", 3, False)}
| | | | | | | | F  
F | | | | | | | |  
  | | F | | | | |  
  | |   | | F | |  
  | |   F |   | |  
F | |     |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
F | |     |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
F | |     |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
F | |     |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | |     |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | |     |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
F | |     |   | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F | |     |   | |  = 4 , total_length = 31} , self = 85 , parent = Nothing , duration = 1.054697826000
F | |     |   | |  , status = Fail , start = 2025-09-03 11:13:58.449579168 UTC , finish =
F | |     |   | |  2025-09-03 11:13:59.504276994 UTC , thread_cap_info = ("ThreadId 106",
F | |     |   | |  1, False)}
F | |     |   | |  
| F |     |   | |  
|   |     F   | |  
|   |         F |  
| F |           |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| F |           |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| F |           |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| F |           |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F |           |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F |           |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| F |           |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| F |           |  = 4 , total_length = 31} , self = 84 , parent = Nothing , duration = 0.809786189000
| F |           |  , status = Fail , start = 2025-09-03 11:13:58.625655339 UTC , finish =
| F |           |  2025-09-03 11:13:59.435441528 UTC , thread_cap_info = ("ThreadId 114",
| F |           |  1, False)}
| F |           |  
| | F           |  
| | S           |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | S           |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | S           |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | S           |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | S           |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | S           |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | S           |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | S           |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | S           |  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | S           |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | S           |  = 12} , self = 86 , parent = Nothing , duration = 0.591335762000 , status
| | S           |  = Success , start = 2025-09-03 11:13:58.997625872 UTC , finish = 2025-09-03
| | S           |  11:13:59.588961634 UTC , thread_cap_info = ("ThreadId 117", 2, False)}
| | S           |  
| | |           F  
| F |              
F   |              
    S              
