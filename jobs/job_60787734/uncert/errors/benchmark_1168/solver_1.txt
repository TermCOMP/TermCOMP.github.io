last 5218 length 26680
last 6349 length 39138
CNF 6349 vars 39138 clauses
CNF 5218 vars 26680 clauses
last 688 length 2774
CNF 688 vars 2774 clauses
last 664 length 2675
CNF 664 vars 2675 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2624, clauses: 9468
last 2624 length 9468
last 542 length 2195
last 556 length 2244
[Info] pool sizes (success) 34483 seen 12363 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 542 vars 2195 clauses
CNF 2624 vars 9468 clauses
CNF 556 vars 2244 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7505, clauses: 31019
last 7505 length 31019
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [b, a, b, a, c, c]
to
  [b, a, b, a, c, c, a, b, a]
via 10 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  CNF 7505 vars 31019 clauses
[a] -> [b] {- Input 1 -}
  [b, a, c] -> [c, c, a, b, a] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [b, a, b, a, c, c], via = [(Step   { rule = 2, position = 2}, [b, a, c, c, a, b, a, c]), (Step   { rule = 0, position = 4}, [b, a, c, c, b, a, c]), (Step   { rule = 2, position = 0}, [c, c, a, b, a, c, b, a, c]), (Step   { rule = 3, position = 0}, [c, a, b, a, c, b, a, c]), (Step   { rule = 3, position = 0}, [a, b, a, c, b, a, c]), (Step   { rule = 1, position = 0}, [b, b, a, c, b, a, c]), (Step   { rule = 2, position = 1}, [b, c, c, a, b, a, b, a, c]), (Step   { rule = 3, position = 1}, [b, c, a, b, a, b, a, c]), (Step   { rule = 3, position = 1}, [b, a, b, a, b, a, c]), (Step   { rule = 2, position = 4}, [b, a, b, a, c, c, a, b, a])], to = [b, a, b, a, c, c, a, b, a]}

**************************************************
skeleton: (4,3)\Loop{10}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F        = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F        = 12} , self = 40 , parent = Nothing , duration = 0.170452769000 , status
F        = Fail , start = 2025-09-03 11:09:59.709682717 UTC , finish = 2025-09-03
F        11:09:59.880135486 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F        
| S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| S      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| S      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| S      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| S      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| S      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| S      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| S      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| S      = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| S      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| S      = 12} , self = 64 , parent = Nothing , duration = 0.473042506000 , status
| S      = Success , start = 2025-09-03 11:09:59.709694381 UTC , finish = 2025-09-03
| S      11:10:00.182736887 UTC , thread_cap_info = ("ThreadId 43", 2, False)}
| S      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 180} , self = 48 , parent = Nothing , duration = 0.232988982000 , status
| | F    = Fail , start = 2025-09-03 11:09:59.71748256 UTC , finish = 2025-09-03
| | F    11:09:59.950471542 UTC , thread_cap_info = ("ThreadId 65", 0, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F  = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F  = 180} , self = 47 , parent = Nothing , duration = 0.217688985000 , status
| | | F  = Fail , start = 2025-09-03 11:09:59.725770638 UTC , finish = 2025-09-03
| | | F  11:09:59.943459623 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| | | F  
F | | |  
  | | F  
  | F    
  S      
