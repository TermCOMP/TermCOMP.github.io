last 340 length 1381
last 330 length 1333
CNF 340 vars 1381 clauses
last 386 length 1621
CNF 330 vars 1333 clauses
CNF 386 vars 1621 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1749, clauses: 6200
last 1749 length 6200
last 3954 length 17852
last 486 length 2119
CNF 1749 vars 6200 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1823, clauses: 6411
CNF 3954 vars 17852 clauses
last 4858 length 24365
last 1823 length 6411
CNF 486 vars 2119 clauses
CNF 4858 vars 24365 clauses
CNF 1823 vars 6411 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4579, clauses: 18723
last 4579 length 18723
CNF 4579 vars 18723 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1823, clauses: 6411, status: Satisfied, time: 0.067051414s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4362, clauses: 17697
last 4362 length 17697
CNF 4362 vars 17697 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1749, clauses: 6200, status: Unsatisfied, time: 0.185119092s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4579, clauses: 18723, status: Satisfied, time: 0.124239359s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       weights
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       weights
SRS with 3 strict rules and 3 weak rules on 6 letters       EDG
SRS with 3 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 6 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c] -> [b] {- Input 0 -}
  [c, b, b] -> [a] {- Input 1 -}
  [c] -> [b] {- Input 2 -}
  [a, a] -> [c, b, a, c] {- Input 3 -}
reason
  (a, 1/1)
  (b, 1/3)
  (c, 1/3)
   property Termination
has value Just True
for SRS
  [c, b, b] -> [a] {- Input 1 -}
  [c] -> [b] {- Input 2 -}
  [a, a] -> [c, b, a, c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, c] -> [a] {- Mirror (Input 1) -}
  [c] -> [b] {- Mirror (Input 2) -}
  [a, a] -> [c, a, b, c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, c] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, a] ->= [c, a, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#, a] |-> [a#, b, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [a#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 3)) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 3)) -}
  [a#, a] |-> [c#, a, b, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b, c] |-> [a#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b, 1/3)
  (c, 1/3)
  (a#, 2/3)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, c] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, a] ->= [c, a, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a#, a] |-> [c#, a, b, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b, c] |-> [a#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#, a, b, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, c] |-> [a#] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, b, c] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, a] ->= [c, a, b, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 6A 6A 6A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 17A 17A 19A - \
        | 17A 17A 19A - |
        | 17A 17A 19A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 14A 17A - \
        | 14A 14A 17A - |
        | 14A 14A 17A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 14A 14A 17A - \
        | 14A 14A 17A - |
        | 14A 14A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#, a, b, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#] |-> [b#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, c] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, a] ->= [c, a, b, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, c] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, a] ->= [c, a, b, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Weight\Mirror(3,3)\Deepee(6/3,6)\Weight\EDG(3/3,6)\Matrix{\Arctic}{3}(2/3,6)\Weight(0/3,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F          = 162} , self = 61 , parent = Nothing , duration = 0.116516557000 , status
F          = Fail , start = 2025-09-03 13:42:06.713336464 UTC , finish = 2025-09-03
F          13:42:06.829853021 UTC , thread_cap_info = ("ThreadId 63", 2, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 63 , parent = Nothing , duration = 0.138794568000 , status
| F        = Fail , start = 2025-09-03 13:42:06.718106553 UTC , finish = 2025-09-03
| F        13:42:06.856901121 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | F      = 5 , total_length = 22} , self = 70 , parent = Nothing , duration = 0.204919762000
| | F      , status = Fail , start = 2025-09-03 13:42:06.747877815 UTC , finish =
| | F      2025-09-03 13:42:06.952797577 UTC , thread_cap_info = ("ThreadId 87", 0,
| | F      False)}
| | F      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | S    = 6 , total_length = 24} , self = 64 , parent = Nothing , duration = 0.122020352000
| | | S    , status = Success , start = 2025-09-03 13:42:06.761245518 UTC , finish
| | | S    = 2025-09-03 13:42:06.88326587 UTC , thread_cap_info = ("ThreadId 89",
| | | S    0, False)}
| | | S    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | S  = 5 , total_length = 22} , self = 71 , parent = Nothing , duration = 0.209356693000
| | | | S  , status = Success , start = 2025-09-03 13:42:06.765045239 UTC , finish
| | | | S  = 2025-09-03 13:42:06.974401932 UTC , thread_cap_info = ("ThreadId 90",
| | | | S  3, False)}
| | | | S  
F | | | |  
  F | | |  
    | S |  
F   |   |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F   |   |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F   |   |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F   |   |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F   |   |  = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
F   |   |  = 0 , alphabet_size = 9 , total_length = 162} , self = 74 , parent = Nothing
F   |   |  , duration = 0.132099118000 , status = Fail , start = 2025-09-03 13:42:06.887306949
F   |   |  UTC , finish = 2025-09-03 13:42:07.019406067 UTC , thread_cap_info = ("ThreadId
F   |   |  109", 1, False)}
F   |   |  
|   F   |  
|       S  
F          
