last 1259 length 5165
last 987 length 4052
last 846 length 3418
CNF 987 vars 4052 clauses
last 1101 length 4657
CNF 1259 vars 5165 clauses
CNF 846 vars 3418 clauses
CNF 1101 vars 4657 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3200, clauses: 12045
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2753, clauses: 9936
last 3200 length 12045
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8597, clauses: 35753
last 2753 length 9936
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8736, clauses: 36326
last 8597 length 35753
last 8736 length 36326
CNF 2753 vars 9936 clauses
CNF 8597 vars 35753 clauses
CNF 3200 vars 12045 clauses
CNF 8736 vars 36326 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2753, clauses: 9936, status: Satisfied, time: 0.115603088s
last 7799 length 40600
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3200, clauses: 12045, status: Satisfied, time: 0.231421313s
last 6922 length 31689
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8736, clauses: 36326, status: Satisfied, time: 0.133724254s
CNF 7799 vars 40600 clauses
CNF 6922 vars 31689 clauses
last 809 length 3305
last 738 length 2997
last 946 length 4072
last 913 length 3820
CNF 809 vars 3305 clauses
CNF 738 vars 2997 clauses
CNF 946 vars 4072 clauses
CNF 913 vars 3820 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2765, clauses: 9984
last 2765 length 9984
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2659, clauses: 9484
last 2659 length 9484
CNF 2659 vars 9484 clauses
CNF 2765 vars 9984 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8306, clauses: 34542
last 8306 length 34542
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8553, clauses: 35603
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2765, clauses: 9984, status: Satisfied, time: 0.10965823s
last 8553 length 35603
CNF 8553 vars 35603 clauses
last 889 length 3728
last 915 length 3953
CNF 889 vars 3728 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2659, clauses: 9484, status: Unsatisfied, time: 0.148770408s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8553, clauses: 35603, status: Satisfied, time: 0.054091645s
CNF 915 vars 3953 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2566, clauses: 9247
last 2566 length 9247
CNF 2566 vars 9247 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2566, clauses: 9247, status: Satisfied, time: 0.019255342s
last 790 length 3218
CNF 790 vars 3218 clauses
last 722 length 2927
CNF 722 vars 2927 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 7 strict rules and 6 weak rules on 5 letters       EDG
SRS with 7 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 6 weak rules on 5 letters       EDG
SRS with 4 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 6 weak rules on 5 letters       EDG
SRS with 3 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, c] -> [b, b, a, a] {- Input 0 -}
  [b] -> [c, c, a, a] {- Input 1 -}
  [b, c] -> [a] {- Input 2 -}
  [a, a, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, b] {- Mirror (Input 0) -}
  [b] -> [a, a, c, c] {- Mirror (Input 1) -}
  [c, b] -> [a] {- Mirror (Input 2) -}
  [c, a, a] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, b] {- Mirror (Input 0) -}
  [b] -> [a, a, c, c] {- Mirror (Input 1) -}
  [c, b] -> [a] {- Mirror (Input 2) -}
  [a, c, a, a] -> [a] {- Mirror (Input 3) -}
  [b, c, a, a] -> [b] {- Mirror (Input 3) -}
  [c, c, a, a] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, b, c] -> [b, b, a, a] {- Input 0 -}
  [b] -> [c, c, a, a] {- Input 1 -}
  [b, c] -> [a] {- Input 2 -}
  [a, a, c, a] -> [a] {- Input 3 -}
  [a, a, c, b] -> [b] {- Input 3 -}
  [a, a, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, a, b, c] |-> [a#] {- DP (Top 3) (Input 0) -}
  [a#, a, b, c] |-> [a#, a] {- DP (Top 2) (Input 0) -}
  [a#, a, b, c] |-> [b#, a, a] {- DP (Top 1) (Input 0) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, c] |-> [a#] {- DP (Top 3) (Input 0) -}
  [a#, a, b, c] |-> [a#, a] {- DP (Top 2) (Input 0) -}
  [a#, a, b, c] |-> [b#, a, a] {- DP (Top 1) (Input 0) -}
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 5A 5A 5A - \
        | 5A 5A 5A - |
        | 5A 5A 5A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 5A 8A 8A - \
        | 5A 8A 8A - |
        | 5A 8A 8A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 4A 7A 7A - \
        | 4A 7A 7A - |
        | 4A 7A 7A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b, c] |-> [b#, b, a, a] {- DP (Top 0) (Input 0) -}
  [b#] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 2A 2A 2A - \
        | 2A 2A 2A - |
        | 2A 2A 2A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a, b, c] ->= [b, b, a, a] {- DP Nontop (Input 0) -}
  [b] ->= [c, c, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a] {- DP Nontop (Input 2) -}
  [a, a, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [a, a, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [a, a, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(6,3)\Deepee\EDG(7/6,5)\Matrix{\Arctic}{3}\EDG(4/6,5)\Matrix{\Arctic}{3}\EDG(3/6,5)\Matrix{\Arctic}{3}(0/6,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.682022478000
  min duration 0.017836304000
  total durat. 1.041309044000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.518967925000
  min duration 0.068248351000
  total durat. 1.124277326000
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 19} , self = 32 , parent = Nothing , duration = 0.104826325000 , status
F                  = Fail , start = 2025-09-03 13:44:23.490031476 UTC , finish = 2025-09-03
F                  13:44:23.594857801 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 19} , self = 61 , parent = Nothing , duration = 0.282496084000 , status
| F                = Fail , start = 2025-09-03 13:44:23.49006533 UTC , finish = 2025-09-03
| F                13:44:23.772561414 UTC , thread_cap_info = ("ThreadId 37", 0, False)}
| F                
| | F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F              = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F              = 0 , alphabet_size = 3 , total_length = 19} , self = 40 , parent = Nothing
| | F              , duration = 0.154164546000 , status = Fail , start = 2025-09-03 13:44:23.496360861
| | F              UTC , finish = 2025-09-03 13:44:23.650525407 UTC , thread_cap_info = ("ThreadId
| | F              45", 2, False)}
| | F              
F | |              
F | |              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | |              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | |              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | |              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | |              = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F | |              = 0 , alphabet_size = 9 , total_length = 243} , self = 77 , parent = Nothing
F | |              , duration = 0.702885520000 , status = Fail , start = 2025-09-03 13:44:23.59489466
F | |              UTC , finish = 2025-09-03 13:44:24.29778018 UTC , thread_cap_info = ("ThreadId
F | |              67", 1, False)}
F | |              
| | F              
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F              = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 243} , self = 83 , parent = Nothing , duration = 0.698265202000 , status
| | F              = Fail , start = 2025-09-03 13:44:23.651587244 UTC , finish = 2025-09-03
| | F              13:44:24.349852446 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 243} , self = 82 , parent = Nothing , duration = 0.682022478000 , status
| | | F            = Fail , start = 2025-09-03 13:44:23.651595523 UTC , finish = 2025-09-03
| | | F            13:44:24.333618001 UTC , thread_cap_info = ("ThreadId 87", 0, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | | | F          = 7 , num_top_rules = 7 , num_weak_rules = 6 , alphabet_size = 5 , total_length
| | | | F          = 65} , self = 62 , parent = Nothing , duration = 0.117116927000 , status
| | | | F          = Fail , start = 2025-09-03 13:44:23.670088029 UTC , finish = 2025-09-03
| | | | F          13:44:23.787204956 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| | | | F          
| | | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | E        , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size
| | | | | E        = 5 , total_length = 47} , self = 68 , parent = Nothing , duration = 0.422273624000
| | | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:44:23.694907269
| | | | | E        UTC , finish = 2025-09-03 13:44:24.117180893 UTC , thread_cap_info = ("ThreadId
| | | | | E        101", 2, False)}
| | | | | E        
| | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S      = 13 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 6 ,
| | | | | | S      alphabet_size = 5 , total_length = 65} , self = 72 , parent = Nothing ,
| | | | | | S      duration = 0.518967925000 , status = Success , start = 2025-09-03 13:44:23.719206873
| | | | | | S      UTC , finish = 2025-09-03 13:44:24.238174798 UTC , thread_cap_info = ("ThreadId
| | | | | | S      102", 2, False)}
| | | | | | S      
| | | | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S    = 10 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 ,
| | | | | | | S    alphabet_size = 5 , total_length = 47} , self = 66 , parent = Nothing ,
| | | | | | | S    duration = 0.321239776000 , status = Success , start = 2025-09-03 13:44:23.736763793
| | | | | | | S    UTC , finish = 2025-09-03 13:44:24.058003569 UTC , thread_cap_info = ("ThreadId
| | | | | | | S    100", 2, False)}
| | | | | | | S    
| F | | | | | |    
| F | | | | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| F | | | | | |    { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| F | | | | | |    = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| F | | | | | |    = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| F | | | | | |    = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F | | | | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F | | | | | |    = 19} , self = 63 , parent = Nothing , duration = 0.116714315000 , status
| F | | | | | |    = Fail , start = 2025-09-03 13:44:23.772573386 UTC , finish = 2025-09-03
| F | | | | | |    13:44:23.889287701 UTC , thread_cap_info = ("ThreadId 103", 0, False)}
| F | | | | | |    
| | | | F | | |    
| | | | S | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 13
| | | | S | | |    , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 6 , alphabet_size
| | | | S | | |    = 5 , total_length = 65} , self = 75 , parent = Nothing , duration = 0.493954331000
| | | | S | | |    , status = Success , start = 2025-09-03 13:44:23.797358536 UTC , finish
| | | | S | | |    = 2025-09-03 13:44:24.291312867 UTC , thread_cap_info = ("ThreadId 104",
| | | | S | | |    2, False)}
| | | | S | | |    
| | | | | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | E  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | E  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | E  = 19} , self = 112 , parent = Nothing , duration = 0.959100037000 , status
| | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 13:44:23.857284124 UTC ,
| | | | | | | | E  finish = 2025-09-03 13:44:24.816384161 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  105", 0, False)}
| | | | | | | | E  
| F | | | | | | |  
|   | | | | | S |  
|   | | | E |   |  
|   | | |   S   |  
|   | | S       |  
F   | |         |  
    | F         |  
    F           |  
F               |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F               |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F               |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F               |  = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
F               |  = 5 , total_length = 42} , self = 96 , parent = Nothing , duration = 0.326742551000
F               |  , status = Fail , start = 2025-09-03 13:44:24.361320758 UTC , finish =
F               |  2025-09-03 13:44:24.688063309 UTC , thread_cap_info = ("ThreadId 132",
F               |  2, False)}
F               |  
| S             |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S             |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S             |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S             |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S             |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S             |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| S             |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| S             |  = 5 , total_length = 42} , self = 97 , parent = Nothing , duration = 0.319676320000
| S             |  , status = Success , start = 2025-09-03 13:44:24.377178281 UTC , finish
| S             |  = 2025-09-03 13:44:24.696854601 UTC , thread_cap_info = ("ThreadId 133",
| S             |  2, False)}
| S             |  
| | S           |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S           |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S           |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S           |  = 10 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 ,
| | S           |  alphabet_size = 5 , total_length = 47} , self = 88 , parent = Nothing ,
| | S           |  duration = 0.215821274000 , status = Success , start = 2025-09-03 13:44:24.416371958
| | S           |  UTC , finish = 2025-09-03 13:44:24.632193232 UTC , thread_cap_info = ("ThreadId
| | S           |  134", 2, False)}
| | S           |  
| | | E         |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E         |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | E         |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 6 , alphabet_size
| | | E         |  = 5 , total_length = 47} , self = 90 , parent = Nothing , duration = 0.198518178000
| | | E         |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:44:24.437232679
| | | E         |  UTC , finish = 2025-09-03 13:44:24.635750857 UTC , thread_cap_info = ("ThreadId
| | | E         |  135", 2, False)}
| | | E         |  
| | S |         |  
| |   E         |  
F |             |  
  S             |  
                E  
