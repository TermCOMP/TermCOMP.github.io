last 3000 length 14434
last 2634 length 11991
CNF 3000 vars 14434 clauses
CNF 2634 vars 11991 clauses
last 618 length 2620
last 809 length 3442
CNF 809 vars 3442 clauses
last 720 length 3139
CNF 720 vars 3139 clauses
CNF 618 vars 2620 clauses
last 1037 length 4407
CNF 1037 vars 4407 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 5989
last 1654 length 5989
CNF 1654 vars 5989 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902
last 2156 length 7902
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 5989, status: Unsatisfied, time: 0.08614122s
CNF 2156 vars 7902 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25733
last 6145 length 25733
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902, status: Satisfied, time: 0.075178969s
CNF 6145 vars 25733 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3678, clauses: 15310
last 3678 length 15310
CNF 3678 vars 15310 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       DP
SRS with 6 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b, b] -> [a, a, b, b] {- Input 0 -}
  [a, b, a, a] -> [b, a, a, b] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a#, b, a, a] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [a#, b, a, a] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [a#, b, a, a] |-> [b#] {- DP (Top 3) (Input 1) -}
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [a#, b, b] {- DP (Top 1) (Input 0) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 10A 11A 11A - \
        | 10A 11A 11A - |
        | 10A 11A 11A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 8A 10A 10A - \
        | 8A 10A 10A - |
        | 8A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Deepee(6/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F            = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F            = 80} , self = 56 , parent = Nothing , duration = 0.137739483000 , status
F            = Fail , start = 2025-09-03 11:53:57.323919868 UTC , finish = 2025-09-03
F            11:53:57.461659351 UTC , thread_cap_info = ("ThreadId 44", 1, False)}
F            
| F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F          = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F          = 16} , self = 61 , parent = Nothing , duration = 0.141092311000 , status
| F          = Fail , start = 2025-09-03 11:53:57.326093616 UTC , finish = 2025-09-03
| F          11:53:57.467185927 UTC , thread_cap_info = ("ThreadId 50", 3, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F        = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F        = 80} , self = 57 , parent = Nothing , duration = 0.127832889000 , status
| | F        = Fail , start = 2025-09-03 11:53:57.336014435 UTC , finish = 2025-09-03
| | F        11:53:57.463847324 UTC , thread_cap_info = ("ThreadId 46", 1, False)}
| | F        
| | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F      = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | F      = 0 , alphabet_size = 2 , total_length = 16} , self = 41 , parent = Nothing
| | | F      , duration = 0.107873630000 , status = Fail , start = 2025-09-03 11:53:57.338774739
| | | F      UTC , finish = 2025-09-03 11:53:57.446648369 UTC , thread_cap_info = ("ThreadId
| | | F      36", 2, False)}
| | | F      
| | | | F    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | F    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F    = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | F    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | F    = 16} , self = 67 , parent = Nothing , duration = 0.278656622000 , status
| | | | F    = Fail , start = 2025-09-03 11:53:57.359081465 UTC , finish = 2025-09-03
| | | | F    11:53:57.637738087 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
| | | | F    
| | | | | F  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | F  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | F  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | F  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | F  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | F  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | F  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | F  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | F  = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | | F  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | F  = 16} , self = 68 , parent = Nothing , duration = 0.277076440000 , status
| | | | | F  = Fail , start = 2025-09-03 11:53:57.377971425 UTC , finish = 2025-09-03
| | | | | F  11:53:57.655047865 UTC , thread_cap_info = ("ThreadId 65", 3, False)}
| | | | | F  
| | | F | |  
F | |   | |  
  | F   | |  
F |     | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F |     | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F |     | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F |     | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F |     | |  = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
F |     | |  = 0 , alphabet_size = 4 , total_length = 80} , self = 71 , parent = Nothing
F |     | |  , duration = 0.224748509000 , status = Fail , start = 2025-09-03 11:53:57.463995151
F |     | |  UTC , finish = 2025-09-03 11:53:57.68874366 UTC , thread_cap_info = ("ThreadId
F |     | |  98", 0, False)}
F |     | |  
| F     | |  
| F     | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F     | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F     | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F     | |  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F     | |  = 3 , total_length = 24} , self = 66 , parent = Nothing , duration = 0.109551543000
| F     | |  , status = Fail , start = 2025-09-03 11:53:57.488829855 UTC , finish =
| F     | |  2025-09-03 11:53:57.598381398 UTC , thread_cap_info = ("ThreadId 104",
| F     | |  2, False)}
| F     | |  
| | S   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S   | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | S   | |  = 4 , total_length = 32} , self = 69 , parent = Nothing , duration = 0.167693423000
| | S   | |  , status = Success , start = 2025-09-03 11:53:57.496023752 UTC , finish
| | S   | |  = 2025-09-03 11:53:57.663717175 UTC , thread_cap_info = ("ThreadId 105",
| | S   | |  2, False)}
| | S   | |  
| | | E | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | E | |  = 4 , total_length = 32} , self = 72 , parent = Nothing , duration = 0.186263155000
| | | E | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:53:57.516042391
| | | E | |  UTC , finish = 2025-09-03 11:53:57.702305546 UTC , thread_cap_info = ("ThreadId
| | | E | |  109", 1, False)}
| | | E | |  
| F | | | |  
|   | | F |  
|   | |   F  
|   S |      
F     |      
      E      
