last 1552 length 6662
last 1681 length 7003
last 418 length 1651
CNF 1552 vars 6662 clauses
last 769 length 3221
CNF 1681 vars 7003 clauses
last 504 length 2024
CNF 418 vars 1651 clauses
CNF 769 vars 3221 clauses
last 842 length 3396
CNF 504 vars 2024 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1525, clauses: 5548
CNF 842 vars 3396 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2447, clauses: 9102
last 1525 length 5548
last 2447 length 9102
CNF 1525 vars 5548 clauses
CNF 2447 vars 9102 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4519, clauses: 18721
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6736, clauses: 27985
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1525, clauses: 5548, status: Unsatisfied, time: 0.096205206s
last 4519 length 18721
last 6736 length 27985
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2447, clauses: 9102, status: Unsatisfied, time: 0.124084092s
CNF 4519 vars 18721 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2853, clauses: 11490
CNF 6736 vars 27985 clauses
[Info] pool sizes (success) 37158 seen 18218 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4277, clauses: 17159
last 2853 length 11490
last 4277 length 17159
CNF 2853 vars 11490 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       looping derivation
from
  [b, b, a, a, a, a, a, a, b, a, b]
to
  [b, b, a, a, a, a, a, a, b, a, b, a]
via 24 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, a, b, a] {- Input 1 -}
  [b, b, b] -> [a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [b, b, a, a, a, a, a, a, b, a, b], via = [(Step   { rule = 1, position = 6}, [b, b, a, a, a, a, b, a, b, a, a, b]), (Step   { rule = 1, position = 4}, [b, b, a, a, b, a, b, a, a, b, a, a, b]), (Step   { rule = 1, position = 2}, [b, b, b, a, b, a, a, b, a, a, b, a, a, b]), (Step   { rule = 2, position = 0}, [a, a, b, a, a, b, a, a, b, a, a, b]), (Step   { rule = 1, position = 3}, [a, a, b, b, a, b, a, a, a, b, a, a, b]), (Step   { rule = 0, position = 4}, [a, a, b, b, b, a, a, a, b, a, a, b]), (Step   { rule = 2, position = 2}, [a, a, a, a, a, a, b, a, a, b]), (Step   { rule = 1, position = 4}, [a, a, a, a, b, a, b, a, a, a, b]), (Step   { rule = 1, position = 2}, [a, a, b, a, b, a, a, b, a, a, a, b]), (Step   { rule = 1, position = 0}, [b, a, b, a, a, b, a, a, b, a, a, a, b]), (Step   { rule = 0, position = 1}, [b, b, a, a, b, a, a, b, a, a, a, b]), (Step   { rule = 1, position = 2}, [b, b, b, a, b, a, a, a, b, a, a, a, b]), (Step   { rule = 2, position = 0}, [a, a, b, a, a, a, b, a, a, a, b]), (Step   { rule = 1, position = 4}, [a, a, b, a, b, a, b, a, a, a, a, b]), (Step   { rule = 1, position = 0}, [b, a, b, a, a, b, a, b, a, a, a, a, b]), (Step   { rule = 1, position = 3}, [b, a, b, b, a, b, a, a, b, a, a, a, a, b]), (Step   { rule = 0, position = 4}, [b, a, b, b, b, a, a, b, a, a, a, a, b]), (Step   { rule = 2, position = 2}, [b, a, a, a, a, b, a, a, a, a, b]), (Step   { rule = 1, position = 3}, [b, a, a, b, a, b, a, a, a, a, a, b]), (Step   { rule = 1, position = 1}, [b, b, a, b, a, a, b, a, a, a, a, a, b]), (Step   { rule = 1, position = 4}, [b, b, a, b, b, a, b, a, a, a, a, a, a, b]), (Step   { rule = 0, position = 5}, [b, b, a, b, b, b, a, a, a, a, a, a, b]), (Step   { rule = 2, position = 3}, [b, b, a, a, a, a, a, a, a, a, b]), (Step   { rule = 1, position = 8}, [b, b, a, a, a, a, a, a, b, a, b, a])], to = [b, b, a, a, a, a, a, a, b, a, b, a]}

**************************************************
skeleton: (3,2)\Loop{24}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 4277 vars 17159 clauses


**************************************************
S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S      , closure = Forward\n , start_strict_only = True\n , max_closure_length
S      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
S      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
S      = 12} , self = 69 , parent = Nothing , duration = 0.397842715000 , status
S      = Success , start = 2025-09-03 10:57:47.229488723 UTC , finish = 2025-09-03
S      10:57:47.627331438 UTC , thread_cap_info = ("ThreadId 26", 0, False)}
S      
| F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F    = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| F    = 3 , total_length = 27} , self = 67 , parent = Nothing , duration = 0.189481383000
| F    , status = Fail , start = 2025-09-03 10:57:47.336546309 UTC , finish =
| F    2025-09-03 10:57:47.526027692 UTC , thread_cap_info = ("ThreadId 104",
| F    3, False)}
| F    
| | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F  = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | F  = 4 , total_length = 43} , self = 68 , parent = Nothing , duration = 0.219390278000
| | F  , status = Fail , start = 2025-09-03 10:57:47.346172504 UTC , finish =
| | F  2025-09-03 10:57:47.565562782 UTC , thread_cap_info = ("ThreadId 106",
| | F  3, False)}
| | F  
| F |  
|   F  
S      
