last 5381 length 29372
last 6698 length 43650
CNF 5381 vars 29372 clauses
CNF 6698 vars 43650 clauses
last 871 length 3742
CNF 871 vars 3742 clauses
last 1400 length 7079
CNF 1400 vars 7079 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2586, clauses: 9362
last 2586 length 9362
last 632 length 2729
last 671 length 2701
CNF 632 vars 2729 clauses
CNF 2586 vars 9362 clauses
CNF 671 vars 2701 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8556, clauses: 35655
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2303, clauses: 8184
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2586, clauses: 9362, status: Unsatisfied, time: 0.364646453s
last 8556 length 35655
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7640, clauses: 31769
last 2303 length 8184
last 7640 length 31769
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5362, clauses: 21612
CNF 8556 vars 35655 clauses
CNF 2303 vars 8184 clauses
CNF 7640 vars 31769 clauses
last 5362 length 21612
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2303, clauses: 8184, status: Unsatisfied, time: 0.601852386s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8556, clauses: 35655, status: Satisfied, time: 0.690072994s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7640, clauses: 31769, status: Satisfied, time: 0.362338295s
CNF 5362 vars 21612 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4793, clauses: 19278
last 4793 length 19278
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 5 strict rules and 7 weak rules on 5 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, b, a, a, c, a] {- Input 1 -}
  [c, c, a] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [b, b, a, a, c, a] {- Input 1 -}
  [a, c, c, a] -> [a] {- Input 2 -}
  [b, c, c, a] -> [b] {- Input 2 -}
  [c, c, c, a] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, c, a, a, b, b] {- Mirror (Input 1) -}
  [a, c, c, a] -> [a] {- Mirror (Input 2) -}
  [a, c, c, b] -> [b] {- Mirror (Input 2) -}
  [a, c, c, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [a#, a, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, b, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, c, a, a, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 5) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 1A -1A 1A \
        | -  0A  1A |
        \ -  -   0A / )
  ( b
  , Wk  / 0A -2A -   \
        | 1A -   -2A |
        \ -  -   0A  / )
  ( c
  , Wk  / -  -1A 0A \
        | 0A 0A  -  |
        \ -  -   0A / )
  ( b#
  , Wk  / 1A -1A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [a, c, c, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(7,3)\Deepee(5/7,5)\Weight\EDG(2/7,4)\Matrix{\ArcticBZ}{3}(0/7,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.905955864000
  min duration 0.132370309000
  total durat. 2.240739074000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 27
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 162}
    , self = 70
    , parent = Nothing
    , duration = 1.905955864000
    , status = Fail
    , start = 2025-09-03 11:09:01.643971213 UTC
    , finish = 2025-09-03 11:09:03.549927077 UTC
    , thread_cap_info = ("ThreadId 52", 0, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.268313077000
  min duration 0.966642255000
  total durat. 2.234955332000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 46}
    , self = 71
    , parent = Nothing
    , duration = 1.268313077000
    , status = Success
    , start = 2025-09-03 11:09:02.310729646 UTC
    , finish = 2025-09-03 11:09:03.579042723 UTC
    , thread_cap_info = ("ThreadId 108", 1, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.939987552000
  min duration 0.579629028000
  total durat. 1.519616580000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.898087356000
  min duration 1.898087356000
  total durat. 1.898087356000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 82
    , parent = Nothing
    , duration = 1.898087356000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:09:01.690319143 UTC
    , finish = 2025-09-03 11:09:03.588406499 UTC
    , thread_cap_info = ("ThreadId 69", 1, False)}
**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F            = 12} , self = 38 , parent = Nothing , duration = 0.155869159000 , status
F            = Fail , start = 2025-09-03 11:09:01.642570479 UTC , finish = 2025-09-03
F            11:09:01.798439638 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 9 , total_length = 162} , self = 70 , parent = Nothing
| F          , duration = 1.905955864000 , status = Fail , start = 2025-09-03 11:09:01.643971213
| F          UTC , finish = 2025-09-03 11:09:03.549927077 UTC , thread_cap_info = ("ThreadId
| F          52", 0, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 162} , self = 48 , parent = Nothing , duration = 0.250672810000 , status
| | F        = Fail , start = 2025-09-03 11:09:01.64938069 UTC , finish = 2025-09-03
| | F        11:09:01.9000535 UTC , thread_cap_info = ("ThreadId 62", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 162} , self = 47 , parent = Nothing , duration = 0.218978647000 , status
| | | F      = Fail , start = 2025-09-03 11:09:01.657848395 UTC , finish = 2025-09-03
| | | F      11:09:01.876827042 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
| | | F      
| | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E    = 12} , self = 82 , parent = Nothing , duration = 1.898087356000 , status
| | | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:09:01.690319143 UTC ,
| | | | E    finish = 2025-09-03 11:09:03.588406499 UTC , thread_cap_info = ("ThreadId
| | | | E    69", 1, False)}
| | | | E    
F | | | |    
F | | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F | | | |    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F | | | |    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F | | | |    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F | | | |    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
F | | | |    = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
F | | | |    , duration = 0.132370309000 , status = Fail , start = 2025-09-03 11:09:01.817692551
F | | | |    UTC , finish = 2025-09-03 11:09:01.95006286 UTC , thread_cap_info = ("ThreadId
F | | | |    78", 1, False)}
F | | | |    
| | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F  = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | F  = 0 , alphabet_size = 3 , total_length = 12} , self = 50 , parent = Nothing
| | | | | F  , duration = 0.202412901000 , status = Fail , start = 2025-09-03 11:09:01.83768773
| | | | | F  UTC , finish = 2025-09-03 11:09:02.040100631 UTC , thread_cap_info = ("ThreadId
| | | | | F  80", 1, False)}
| | | | | F  
| | | F | |  
| | F   | |  
F |     | |  
  |     | F  
F |     |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |     |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |     |    = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
F |     |    alphabet_size = 4 , total_length = 46} , self = 68 , parent = Nothing ,
F |     |    duration = 0.579629028000 , status = Fail , start = 2025-09-03 11:09:02.278124527
F |     |    UTC , finish = 2025-09-03 11:09:02.857753555 UTC , thread_cap_info = ("ThreadId
F |     |    103", 1, False)}
F |     |    
| | F   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | F   |    = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F   |    = 39} , self = 67 , parent = Nothing , duration = 0.306099614000 , status
| | F   |    = Fail , start = 2025-09-03 11:09:02.298126078 UTC , finish = 2025-09-03
| | F   |    11:09:02.604225692 UTC , thread_cap_info = ("ThreadId 104", 1, False)}
| | F   |    
| | | F |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F |    = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | F |    = 39} , self = 66 , parent = Nothing , duration = 0.178816075000 , status
| | | F |    = Fail , start = 2025-09-03 11:09:02.300315973 UTC , finish = 2025-09-03
| | | F |    11:09:02.479132048 UTC , thread_cap_info = ("ThreadId 105", 1, False)}
| | | F |    
| | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | | | | S  = 4 , total_length = 46} , self = 71 , parent = Nothing , duration = 1.268313077000
| | | | | S  , status = Success , start = 2025-09-03 11:09:02.310729646 UTC , finish
| | | | | S  = 2025-09-03 11:09:03.579042723 UTC , thread_cap_info = ("ThreadId 108",
| | | | | S  1, False)}
| | | | | S  
| | | F | |  
| | | F | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F | |  = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | F | |  = 4 , total_length = 39} , self = 69 , parent = Nothing , duration = 0.939987552000
| | | F | |  , status = Fail , start = 2025-09-03 11:09:02.557699006 UTC , finish =
| | | F | |  2025-09-03 11:09:03.497686558 UTC , thread_cap_info = ("ThreadId 110",
| | | F | |  1, False)}
| | | F | |  
| | F | | |  
| | S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | S | | |  = 4 , total_length = 39} , self = 73 , parent = Nothing , duration = 0.966642255000
| | S | | |  , status = Success , start = 2025-09-03 11:09:02.62003195 UTC , finish
| | S | | |  = 2025-09-03 11:09:03.586674205 UTC , thread_cap_info = ("ThreadId 111",
| | S | | |  1, False)}
| | S | | |  
F | | | | |  
E | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
E | | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
E | | | | |  = 4 , total_length = 46} , self = 76 , parent = Nothing , duration = 0.710506725000
E | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:09:02.877744334
E | | | | |  UTC , finish = 2025-09-03 11:09:03.588251059 UTC , thread_cap_info = ("ThreadId
E | | | | |  112", 1, False)}
E | | | | |  
| | | F | |  
| F |   | |  
|   |   | S  
|   S   |    
E       |    
        E    
