last 4597 length 26172
last 5636 length 39897
CNF 5636 vars 39897 clauses
CNF 4597 vars 26172 clauses
last 758 length 3388
CNF 758 vars 3388 clauses
last 507 length 2121
CNF 507 vars 2121 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2458, clauses: 8740
last 2458 length 8740
CNF 2458 vars 8740 clauses
last 538 length 2238
CNF 538 vars 2238 clauses
last 774 length 3446
CNF 774 vars 3446 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7631, clauses: 31633
last 7631 length 31633
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2458, clauses: 8740, status: Unsatisfied, time: 0.094529056s
CNF 7631 vars 31633 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2564, clauses: 9165
last 2564 length 9165
CNF 2564 vars 9165 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7631, clauses: 31633, status: Satisfied, time: 0.077426623s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7677, clauses: 31809
last 7677 length 31809
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2564, clauses: 9165, status: Unsatisfied, time: 0.128696061s
CNF 7677 vars 31809 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4804, clauses: 19139
last 4804 length 19139
CNF 4804 vars 19139 clauses
last 695 length 3147
CNF 695 vars 3147 clauses
last 411 length 1761
CNF 411 vars 1761 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1955, clauses: 6903
last 1955 length 6903
CNF 1955 vars 6903 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1955, clauses: 6903, status: Unsatisfied, time: 0.060454557s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6918, clauses: 28737
last 6918 length 28737
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4228, clauses: 16922
last 4228 length 16922
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7677, clauses: 31809, status: Satisfied, time: 0.372931372s
CNF 4228 vars 16922 clauses
CNF 6918 vars 28737 clauses
last 507 length 2121
last 758 length 3388
CNF 507 vars 2121 clauses
CNF 758 vars 3388 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6918, clauses: 28737, status: Satisfied, time: 0.095709286s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2458, clauses: 8740
last 2458 length 8740
CNF 2458 vars 8740 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2458, clauses: 8740, status: Unsatisfied, time: 0.08858097s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7631, clauses: 31633
last 7631 length 31633
CNF 7631 vars 31633 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4729, clauses: 18853
last 4729 length 18853
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [a, b, a, c, c] {- Input 0 -}
  [c, a] -> [] {- Input 1 -}
  [c, b] -> [a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a, b, a, c, c] {- Input 0 -}
  [a, c, a] -> [a] {- Input 1 -}
  [b, c, a] -> [b] {- Input 1 -}
  [c, c, a] -> [c] {- Input 1 -}
  [c, b] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [c, c, a, b, a] {- Mirror (Input 0) -}
  [a, c, a] -> [a] {- Mirror (Input 1) -}
  [a, c, b] -> [b] {- Mirror (Input 1) -}
  [a, c, c] -> [c] {- Mirror (Input 1) -}
  [b, c] -> [a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [a#, b, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, a] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, a] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / - 0A 0A \
        | - 1A 1A |
        \ - -  0A / )
  ( b
  , Wk  / -  1A  1A \
        | 1A -1A 0A |
        \ -  -   0A / )
  ( c
  , Wk  / -  0A  1A \
        | 0A -1A 0A |
        \ -  -   0A / )
  ( a#
  , Wk  / - -1A 0A \
        | - -   -  |
        \ - -   0A / )
  ( b#
  , Wk  / 0A -2A 0A \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, a] {- DP (Top 3) (Mirror (Input 0)) -}
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 1A -1A 1A \
        | 0A -   -  |
        \ -  -   0A / )
  ( b
  , Wk  / -1A 0A 0A \
        | -   1A -  |
        \ -   -  0A / )
  ( c
  , Wk  / -  0A 0A \
        | 1A -  1A |
        \ -  -  0A / )
  ( a#
  , Wk  / 1A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [c, c, a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b, c] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee\EDG(3/5,5)\Matrix{\ArcticBZ}{3}(2/5,5)\Weight\EDG(1/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F        = 12} , self = 69 , parent = Nothing , duration = 0.352608620000 , status
F        = Fail , start = 2025-09-03 11:33:30.937507258 UTC , finish = 2025-09-03
F        11:33:31.290115878 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
F        
| F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F      = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| F      = 119} , self = 48 , parent = Nothing , duration = 0.159188348000 , status
| F      = Fail , start = 2025-09-03 11:33:30.953854941 UTC , finish = 2025-09-03
| F      11:33:31.113043289 UTC , thread_cap_info = ("ThreadId 57", 0, False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | F    = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | F    = 119} , self = 49 , parent = Nothing , duration = 0.143784061000 , status
| | F    = Fail , start = 2025-09-03 11:33:30.970010543 UTC , finish = 2025-09-03
| | F    11:33:31.113794604 UTC , thread_cap_info = ("ThreadId 59", 0, False)}
| | F    
| F |    
|   F    
| F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| F      = 5 , total_length = 34} , self = 68 , parent = Nothing , duration = 0.129632668000
| F      , status = Fail , start = 2025-09-03 11:33:31.144581249 UTC , finish =
| F      2025-09-03 11:33:31.274213917 UTC , thread_cap_info = ("ThreadId 100",
| F      3, False)}
| F      
| | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | S    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | S    = 5 , total_length = 34} , self = 70 , parent = Nothing , duration = 0.182874314000
| | S    , status = Success , start = 2025-09-03 11:33:31.174575124 UTC , finish
| | S    = 2025-09-03 11:33:31.357449438 UTC , thread_cap_info = ("ThreadId 103",
| | S    3, False)}
| | S    
| F |    
| F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |    = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| F |    = 5 , total_length = 37} , self = 73 , parent = Nothing , duration = 0.182619441000
| F |    , status = Fail , start = 2025-09-03 11:33:31.28264319 UTC , finish = 2025-09-03
| F |    11:33:31.465262631 UTC , thread_cap_info = ("ThreadId 110", 3, False)}
| F |    
F | |    
E | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
E | |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
E | |    = 5 , total_length = 34} , self = 72 , parent = Nothing , duration = 0.172879641000
E | |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:33:31.290159205
E | |    UTC , finish = 2025-09-03 11:33:31.463038846 UTC , thread_cap_info = ("ThreadId
E | |    111", 3, False)}
E | |    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | S  = 5 , total_length = 37} , self = 81 , parent = Nothing , duration = 0.494532535000
| | | S  , status = Success , start = 2025-09-03 11:33:31.310838513 UTC , finish
| | | S  = 2025-09-03 11:33:31.805371048 UTC , thread_cap_info = ("ThreadId 113",
| | | S  2, False)}
| | | S  
| | S |  
E |   |  
  F   |  
E     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
E     |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
E     |  = 5 , total_length = 37} , self = 83 , parent = Nothing , duration = 0.365261170000
E     |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:33:31.470337999
E     |  UTC , finish = 2025-09-03 11:33:31.835599169 UTC , thread_cap_info = ("ThreadId
E     |  117", 2, False)}
E     |  
| S   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| S   |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| S   |  = 4 , total_length = 27} , self = 90 , parent = Nothing , duration = 0.306742109000
| S   |  , status = Success , start = 2025-09-03 11:33:31.572076124 UTC , finish
| S   |  = 2025-09-03 11:33:31.878818233 UTC , thread_cap_info = ("ThreadId 127",
| S   |  2, False)}
| S   |  
| | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | E |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | E |  = 4 , total_length = 27} , self = 92 , parent = Nothing , duration = 0.301113998000
| | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:33:31.651787034
| | E |  UTC , finish = 2025-09-03 11:33:31.952901032 UTC , thread_cap_info = ("ThreadId
| | E |  129", 2, False)}
| | E |  
| | | S  
E | |    
F | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
F | |    = 5 , total_length = 34} , self = 94 , parent = Nothing , duration = 0.115699173000
F | |    , status = Fail , start = 2025-09-03 11:33:31.859368217 UTC , finish =
F | |    2025-09-03 11:33:31.97506739 UTC , thread_cap_info = ("ThreadId 140", 3,
F | |    False)}
F | |    
| S |    
|   E    
F        
