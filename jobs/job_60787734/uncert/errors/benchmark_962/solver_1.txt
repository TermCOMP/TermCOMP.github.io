last 947 length 3955
last 847 length 3396
CNF 947 vars 3955 clauses
last 1810 length 7921
last 947 length 3841
CNF 847 vars 3396 clauses
last 927 length 3922
CNF 947 vars 3841 clauses
CNF 1810 vars 7921 clauses
CNF 927 vars 3922 clauses
last 1846 length 7665
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2241, clauses: 8303
last 2241 length 8303
CNF 1846 vars 7665 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2465, clauses: 9279
CNF 2241 vars 8303 clauses
last 2465 length 9279
CNF 2465 vars 9279 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2241, clauses: 8303, status: Unsatisfied, time: 0.137223221s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7146, clauses: 29817
last 7146 length 29817
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2465, clauses: 9279, status: Unsatisfied, time: 0.162535846s
CNF 7146 vars 29817 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4339, clauses: 17681
last 4339 length 17681
CNF 4339 vars 17681 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6947, clauses: 28984
last 6947 length 28984
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4322, clauses: 17848
last 4322 length 17848
CNF 4322 vars 17848 clauses
CNF 6947 vars 28984 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4322, clauses: 17848, status: Satisfied, time: 0.831472647s
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       weights
SRS with 5 strict rules and 2 weak rules on 4 letters       EDG
SRS with 5 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [b, a, a, a] {- Input 0 -}
  [b, a, b, a] -> [a, b, b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, a, a, b] {- Mirror (Input 0) -}
  [a, b, a, b] -> [b, b, a] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a, b] ->= [b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, b, a, b] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, b, a, b] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (a, 0/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a, b] ->= [b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, a, b] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a, b] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a, b] ->= [b, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 1 0 1 \
        | 0 1 2 |
        \ 0 0 1 / )
  ( b
  , Wk  / 0 1 1 \
        | 1 1 0 |
        \ 0 0 1 / )
  ( a#
  , Wk  / 1 0 1 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( b#
  , Wk  / 0 1 1 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [a#, b, a, b] |-> [b#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a, b] ->= [b, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 1/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a, b] ->= [b, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(7/2,4)\Weight\EDG(5/2,4)\Matrix{\Natural}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.167866239000
  min duration 1.167866239000
  total durat. 1.167866239000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 43}
    , self = 73
    , parent = Nothing
    , duration = 1.167866239000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:37:51.753849182 UTC
    , finish = 2025-09-03 13:37:52.921715421 UTC
    , thread_cap_info = ("ThreadId 95", 2, False)}
**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F            = 14} , self = 69 , parent = Nothing , duration = 0.448850371000 , status
F            = Fail , start = 2025-09-03 13:37:51.64111071 UTC , finish = 2025-09-03
F            13:37:52.089961081 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F          = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F          = 72} , self = 60 , parent = Nothing , duration = 0.100933770000 , status
| F          = Fail , start = 2025-09-03 13:37:51.66271604 UTC , finish = 2025-09-03
| F          13:37:51.76364981 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | F        = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | F        = 34} , self = 63 , parent = Nothing , duration = 0.105768390000 , status
| | F        = Fail , start = 2025-09-03 13:37:51.69101418 UTC , finish = 2025-09-03
| | F        13:37:51.79678257 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | F        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 7 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | F      = 4 , total_length = 43} , self = 68 , parent = Nothing , duration = 0.219919840000
| | | F      , status = Fail , start = 2025-09-03 13:37:51.708575149 UTC , finish =
| | | F      2025-09-03 13:37:51.928494989 UTC , thread_cap_info = ("ThreadId 90", 2,
| | | F      False)}
| | | F      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 5 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | | | F    = 4 , total_length = 34} , self = 67 , parent = Nothing , duration = 0.194233103000
| | | | F    , status = Fail , start = 2025-09-03 13:37:51.709470917 UTC , finish =
| | | | F    2025-09-03 13:37:51.90370402 UTC , thread_cap_info = ("ThreadId 92", 1,
| | | | F    False)}
| | | | F    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | | | E  = 4 , total_length = 43} , self = 73 , parent = Nothing , duration = 1.167866239000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:37:51.753849182
| | | | | E  UTC , finish = 2025-09-03 13:37:52.921715421 UTC , thread_cap_info = ("ThreadId
| | | | | E  95", 2, False)}
| | | | | E  
| F | | | |  
|   F | | |  
| F   | | |  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F   | | |  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F   | | |  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F   | | |  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F   | | |  = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| F   | | |  = 0 , alphabet_size = 4 , total_length = 72} , self = 70 , parent = Nothing
| F   | | |  , duration = 0.755871462000 , status = Fail , start = 2025-09-03 13:37:51.873706888
| F   | | |  UTC , finish = 2025-09-03 13:37:52.62957835 UTC , thread_cap_info = ("ThreadId
| F   | | |  111", 3, False)}
| F   | | |  
| |   | F |  
| |   F   |  
| | S     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | S     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | S     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | S     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | S     |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | S     |  = 4 , total_length = 43} , self = 71 , parent = Nothing , duration = 0.905866386000
| | S     |  , status = Success , start = 2025-09-03 13:37:52.00616225 UTC , finish
| | S     |  = 2025-09-03 13:37:52.912028636 UTC , thread_cap_info = ("ThreadId 115",
| | S     |  2, False)}
| | S     |  
F | |     |  
  F |     |  
    S     |  
          E  
