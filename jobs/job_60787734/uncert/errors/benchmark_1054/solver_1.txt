last 1658 length 7202
CNF 1658 vars 7202 clauses
last 1542 length 6728
CNF 1542 vars 6728 clauses
last 594 length 2355
CNF 594 vars 2355 clauses
last 499 length 1972
CNF 499 vars 1972 clauses
last 1070 length 5246
last 1082 length 4818
CNF 1070 vars 5246 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1861, clauses: 6937
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4566, clauses: 18839
CNF 1082 vars 4818 clauses
last 1861 length 6937
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 8409
last 4566 length 18839
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5485, clauses: 22740
last 2168 length 8409
CNF 1861 vars 6937 clauses
CNF 4566 vars 18839 clauses
last 5485 length 22740
CNF 2168 vars 8409 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1861, clauses: 6937, status: Satisfied, time: 0.352922594s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4566, clauses: 18839, status: Satisfied, time: 0.345765969s
CNF 5485 vars 22740 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 8409, status: Satisfied, time: 0.190161189s
last 463 length 1850
CNF 463 vars 1850 clauses
last 515 length 2052
CNF 515 vars 2052 clauses
last 839 length 3871
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1755, clauses: 6422
CNF 839 vars 3871 clauses
last 916 length 4661
last 1755 length 6422
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4520, clauses: 18663
CNF 916 vars 4661 clauses
last 4520 length 18663
CNF 1755 vars 6422 clauses
CNF 4520 vars 18663 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1839, clauses: 6863
last 1839 length 6863
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5101, clauses: 21132
CNF 1839 vars 6863 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1755, clauses: 6422, status: Unsatisfied, time: 0.1178513s
last 5101 length 21132
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1839, clauses: 6863, status: Satisfied, time: 0.059790855s
CNF 5101 vars 21132 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2814, clauses: 11461
last 2814 length 11461
CNF 2814 vars 11461 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4520, clauses: 18663, status: Unsatisfied, time: 0.172085748s
last 638 length 3091
last 925 length 4601
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2877, clauses: 11125
last 2877 length 11125
CNF 2877 vars 11125 clauses
CNF 925 vars 4601 clauses
CNF 638 vars 3091 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1628, clauses: 5847
last 1628 length 5847
CNF 1628 vars 5847 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1628, clauses: 5847, status: Satisfied, time: 0.015105684s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5054, clauses: 20947
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2814, clauses: 11461, status: Unsatisfied, time: 0.196475179s
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 5 strict rules and 2 weak rules on 4 letters       EDG
SRS with 5 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 2 weak rules on 4 letters       EDG
SRS with 3 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [b, a, b, b] -> [b, b, b, a, a] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, b, a, b] -> [a, a, b, b, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [b#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 2A 5A 5A - \
        | 2A 5A 5A - |
        | 2A 5A 5A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 2A 2A 4A - \
        | 2A 2A 4A - |
        | 2A 2A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 5A 5A 7A - \
        | 5A 5A 7A - |
        | 5A 5A 7A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 5A 5A 5A - \
        | 5A 5A 5A - |
        | 5A 5A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 2A 3A 5A - \
        | 2A 3A 5A - |
        | 2A 3A 5A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 2A 2A - \
        | 1A 2A 2A - |
        | 1A 2A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, b, a, b] |-> [a#, a, b, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, b] ->= [a, a, b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee\EDG(5/2,4)\Matrix{\Arctic}{3}\EDG(3/2,4)\Matrix{\Arctic}{3}\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.613256824000
  min duration 0.055545311000
  total durat. 1.158005803000
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = False}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F          = 11} , self = 68 , parent = Nothing , duration = 0.921593742000 , status
F          = Fail , start = 2025-09-03 10:52:10.426456995 UTC , finish = 2025-09-03
F          10:52:11.348050737 UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F        = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F        = 11} , self = 42 , parent = Nothing , duration = 0.207714479000 , status
| F        = Fail , start = 2025-09-03 10:52:10.426555584 UTC , finish = 2025-09-03
| F        10:52:10.634270063 UTC , thread_cap_info = ("ThreadId 36", 3, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 2 , total_length = 11} , self = 39 , parent = Nothing
| | F      , duration = 0.172002307000 , status = Fail , start = 2025-09-03 10:52:10.426592083
| | F      UTC , finish = 2025-09-03 10:52:10.59859439 UTC , thread_cap_info = ("ThreadId
| | F      43", 3, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 4 , total_length = 60} , self = 48 , parent = Nothing
| | | F    , duration = 0.252111372000 , status = Fail , start = 2025-09-03 10:52:10.427424741
| | | F    UTC , finish = 2025-09-03 10:52:10.679536113 UTC , thread_cap_info = ("ThreadId
| | | F    54", 1, False)}
| | | F    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F  = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules
| | | | F  = 0 , alphabet_size = 2 , total_length = 11} , self = 46 , parent = Nothing
| | | | F  , duration = 0.222646479000 , status = Fail , start = 2025-09-03 10:52:10.43663734
| | | | F  UTC , finish = 2025-09-03 10:52:10.659283819 UTC , thread_cap_info = ("ThreadId
| | | | F  45", 3, False)}
| | | | F  
| | F | |  
| F   | |  
|     | F  
|     F    
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F        = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F        = 43} , self = 66 , parent = Nothing , duration = 0.255833269000 , status
| F        = Fail , start = 2025-09-03 10:52:10.816664606 UTC , finish = 2025-09-03
| F        10:52:11.072497875 UTC , thread_cap_info = ("ThreadId 104", 3, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 6 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | S      = 4 , total_length = 31} , self = 69 , parent = Nothing , duration = 0.613256824000
| | S      , status = Success , start = 2025-09-03 10:52:10.829038755 UTC , finish
| | S      = 2025-09-03 10:52:11.442295579 UTC , thread_cap_info = ("ThreadId 105",
| | S      3, False)}
| | S      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F    = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | F    = 43} , self = 67 , parent = Nothing , duration = 0.340462180000 , status
| | | F    = Fail , start = 2025-09-03 10:52:10.837014136 UTC , finish = 2025-09-03
| | | F    10:52:11.177476316 UTC , thread_cap_info = ("ThreadId 103", 3, False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | | S  = 4 , total_length = 31} , self = 71 , parent = Nothing , duration = 0.566187900000
| | | | S  , status = Success , start = 2025-09-03 10:52:10.87664133 UTC , finish
| | | | S  = 2025-09-03 10:52:11.44282923 UTC , thread_cap_info = ("ThreadId 107",
| | | | S  3, False)}
| | | | S  
| F | | |  
| S | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | |  = 7 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| S | | |  = 4 , total_length = 43} , self = 76 , parent = Nothing , duration = 0.379655322000
| S | | |  , status = Success , start = 2025-09-03 10:52:11.076733649 UTC , finish
| S | | |  = 2025-09-03 10:52:11.456388971 UTC , thread_cap_info = ("ThreadId 109",
| S | | |  3, False)}
| S | | |  
| | | F |  
| | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | E |  = 4 , total_length = 43} , self = 79 , parent = Nothing , duration = 0.270384193000
| | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:52:11.196684836
| | | E |  UTC , finish = 2025-09-03 10:52:11.467069029 UTC , thread_cap_info = ("ThreadId
| | | E |  110", 3, False)}
| | | E |  
F | | | |  
  | S | |  
  |   | S  
  S   |    
      E    
F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F          = 5 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
F          = 4 , total_length = 26} , self = 88 , parent = Nothing , duration = 0.149916256000
F          , status = Fail , start = 2025-09-03 10:52:11.467844782 UTC , finish =
F          2025-09-03 10:52:11.617761038 UTC , thread_cap_info = ("ThreadId 125",
F          3, False)}
F          
| F        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| F        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| F        = 4 , total_length = 26} , self = 96 , parent = Nothing , duration = 0.228507650000
| F        , status = Fail , start = 2025-09-03 10:52:11.494486475 UTC , finish =
| F        2025-09-03 10:52:11.722994125 UTC , thread_cap_info = ("ThreadId 132",
| F        3, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 5 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | S      = 4 , total_length = 30} , self = 89 , parent = Nothing , duration = 0.109548346000
| | S      , status = Success , start = 2025-09-03 10:52:11.529552934 UTC , finish
| | S      = 2025-09-03 10:52:11.63910128 UTC , thread_cap_info = ("ThreadId 135",
| | S      3, False)}
| | S      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
| | | E    = 4 , total_length = 30} , self = 91 , parent = Nothing , duration = 0.140367803000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 10:52:11.557652838
| | | E    UTC , finish = 2025-09-03 10:52:11.698020641 UTC , thread_cap_info = ("ThreadId
| | | E    137", 3, False)}
| | | E    
F | | |    
F | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F | | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
F | | |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size
F | | |    = 4 , total_length = 26} , self = 104 , parent = Nothing , duration = 0.256219483000
F | | |    , status = Fail , start = 2025-09-03 10:52:11.618516259 UTC , finish =
F | | |    2025-09-03 10:52:11.874735742 UTC , thread_cap_info = ("ThreadId 140",
F | | |    3, False)}
F | | |    
| | S |    
| |   E    
| F        
F          
