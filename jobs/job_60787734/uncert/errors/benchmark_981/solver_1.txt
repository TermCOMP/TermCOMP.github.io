last 555 length 2172
CNF 555 vars 2172 clauses
last 571 length 2337
last 506 length 2066
CNF 571 vars 2337 clauses
last 485 length 1907
CNF 485 vars 1907 clauses
CNF 506 vars 2066 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2427, clauses: 8768
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2102, clauses: 7524
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6719, clauses: 27755
last 2427 length 8768
last 2102 length 7524
last 6719 length 27755
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5795, clauses: 23855
CNF 2427 vars 8768 clauses
last 4783 length 24027
last 4183 length 19081
CNF 6719 vars 27755 clauses
last 5795 length 23855
CNF 2102 vars 7524 clauses
CNF 4183 vars 19081 clauses
CNF 4783 vars 24027 clauses
CNF 5795 vars 23855 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2427, clauses: 8768, status: Unsatisfied, time: 0.282331966s
[Info] pool sizes (success) 30263 seen 14357 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2102, clauses: 7524, status: Unsatisfied, time: 0.316893307s
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       looping derivation
from
  [c, b, b, b, b, b, b]
to
  [b, b, c, c, b, b, b, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]
via 38 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a, a, a] -> [b, b, c, c] {- Input 0 -}
  [c, b] -> [a, a, c] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [c, b, b, b, b, b, b], via = [(Step   { rule = 1, position = 0}, [a, a, c, b, b, b, b, b]), (Step   { rule = 1, position = 2}, [a, a, a, a, c, b, b, b, b]), (Step   { rule = 1, position = 4}, [a, a, a, a, a, a, c, b, b, b]), (Step   { rule = 0, position = 3}, [a, a, a, b, b, c, c, c, b, b, b]), (Step   { rule = 1, position = 7}, [a, a, a, b, b, c, c, a, a, c, b, b]), (Step   { rule = 1, position = 9}, [a, a, a, b, b, c, c, a, a, a, a, c, b]), (Step   { rule = 0, position = 7}, [a, a, a, b, b, c, c, b, b, c, c, a, c, b]), (Step   { rule = 1, position = 6}, [a, a, a, b, b, c, a, a, c, b, c, c, a, c, b]), (Step   { rule = 1, position = 13}, [a, a, a, b, b, c, a, a, c, b, c, c, a, a, a, c]), (Step   { rule = 0, position = 12}, [a, a, a, b, b, c, a, a, c, b, c, c, b, b, c, c, c]), (Step   { rule = 1, position = 11}, [a, a, a, b, b, c, a, a, c, b, c, a, a, c, b, c, c, c]), (Step   { rule = 1, position = 13}, [a, a, a, b, b, c, a, a, c, b, c, a, a, a, a, c, c, c, c]), (Step   { rule = 0, position = 11}, [a, a, a, b, b, c, a, a, c, b, c, b, b, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 10}, [a, a, a, b, b, c, a, a, c, b, a, a, c, b, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 12}, [a, a, a, b, b, c, a, a, c, b, a, a, a, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 10}, [a, a, a, b, b, c, a, a, c, b, b, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 8}, [a, a, a, b, b, c, a, a, a, a, c, b, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 10}, [a, a, a, b, b, c, a, a, a, a, a, a, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 9}, [a, a, a, b, b, c, a, a, a, b, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 6}, [a, a, a, b, b, c, b, b, c, c, b, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 9}, [a, a, a, b, b, c, b, b, c, a, a, c, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 11}, [a, a, a, b, b, c, b, b, c, a, a, a, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 9}, [a, a, a, b, b, c, b, b, c, b, b, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 8}, [a, a, a, b, b, c, b, b, a, a, c, b, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 10}, [a, a, a, b, b, c, b, b, a, a, a, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 8}, [a, a, a, b, b, c, b, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 5}, [a, a, a, b, b, a, a, c, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 7}, [a, a, a, b, b, a, a, a, a, c, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 9}, [a, a, a, b, b, a, a, a, a, a, a, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 8}, [a, a, a, b, b, a, a, a, b, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 5}, [a, a, a, b, b, b, b, c, c, b, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 8}, [a, a, a, b, b, b, b, c, a, a, c, b, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 10}, [a, a, a, b, b, b, b, c, a, a, a, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 8}, [a, a, a, b, b, b, b, c, b, b, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 7}, [a, a, a, b, b, b, b, a, a, c, b, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 1, position = 9}, [a, a, a, b, b, b, b, a, a, a, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 7}, [a, a, a, b, b, b, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]), (Step   { rule = 0, position = 0}, [b, b, c, c, b, b, b, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c])], to = [b, b, c, c, b, b, b, b, b, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c, b, c, c, a, c, c, c, a, c, c, c, c]}

**************************************************
skeleton: (2,3)\Loop{38}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4167, clauses: 16577
last 4167 length 16577
cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3578, clauses: 14209

last 3578 length 14209

**************************************************
S              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S              , closure = Forward\n , start_strict_only = True\n , max_closure_length
S              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
S              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
S              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
S              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
S              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
S              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S              = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
S              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S              = 12} , self = 70 , parent = Nothing , duration = 0.524224970000 , status
S              = Success , start = 2025-09-03 13:41:28.093391115 UTC , finish = 2025-09-03
S              13:41:28.617616085 UTC , thread_cap_info = ("ThreadId 49", 2, False)}
S              
| F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F            = Size { num_rules = 18 , num_strict_rules = 18 , num_top_rules = 0 , num_weak_rules
| F            = 0 , alphabet_size = 9 , total_length = 144} , self = 53 , parent = Nothing
| F            , duration = 0.179885986000 , status = Fail , start = 2025-09-03 13:41:28.103218714
| F            UTC , finish = 2025-09-03 13:41:28.2831047 UTC , thread_cap_info = ("ThreadId
| F            58", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F          = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | F          = 28} , self = 55 , parent = Nothing , duration = 0.116123716000 , status
| | F          = Fail , start = 2025-09-03 13:41:28.168461146 UTC , finish = 2025-09-03
| | F          13:41:28.284584862 UTC , thread_cap_info = ("ThreadId 84", 0, False)}
| | F          
| | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F        = 7 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | F        = 5 , total_length = 33} , self = 68 , parent = Nothing , duration = 0.379080741000
| | | F        , status = Fail , start = 2025-09-03 13:41:28.175775246 UTC , finish =
| | | F        2025-09-03 13:41:28.554855987 UTC , thread_cap_info = ("ThreadId 85", 0,
| | | F        False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | F      = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F      = 144} , self = 67 , parent = Nothing , duration = 0.300014750000 , status
| | | | F      = Fail , start = 2025-09-03 13:41:28.243454672 UTC , finish = 2025-09-03
| | | | F      13:41:28.543469422 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| | | | F      
| | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F    = 6 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 2 , alphabet_size
| | | | | F    = 5 , total_length = 28} , self = 71 , parent = Nothing , duration = 0.376907049000
| | | | | F    , status = Fail , start = 2025-09-03 13:41:28.243501972 UTC , finish =
| | | | | F    2025-09-03 13:41:28.620409021 UTC , thread_cap_info = ("ThreadId 98", 0,
| | | | | F    False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | F  = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | F  = 144} , self = 69 , parent = Nothing , duration = 0.301207302000 , status
| | | | | | F  = Fail , start = 2025-09-03 13:41:28.263455253 UTC , finish = 2025-09-03
| | | | | | F  13:41:28.564662555 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| | | | | | F  
| F | | | | |  
|   F | | | |  
|     | F | |  
|     F   | |  
|         | F  
S         |    
          F    
