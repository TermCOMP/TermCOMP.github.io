last 1882 length 7986
CNF 1882 vars 7986 clauses
last 1696 length 7012
CNF 1696 vars 7012 clauses
last 533 length 2078
CNF 533 vars 2078 clauses
last 533 length 2078
last 458 length 1767
last 458 length 1767
CNF 533 vars 2078 clauses
CNF 458 vars 1767 clauses
CNF 458 vars 1767 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2462, clauses: 8859
last 2462 length 8859
CNF 2462 vars 8859 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2462, clauses: 8859
last 2462 length 8859
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2462, clauses: 8859, status: Unsatisfied, time: 0.08567307s
CNF 2462 vars 8859 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23159
last 5670 length 23159
CNF 5670 vars 23159 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23159
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2462, clauses: 8859, status: Unsatisfied, time: 0.089256337s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3627, clauses: 14116
last 5670 length 23159
last 3627 length 14116
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3627, clauses: 14116
CNF 5670 vars 23159 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23159, status: Satisfied, time: 0.091631862s
last 3627 length 14116
CNF 3627 vars 14116 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5670, clauses: 23159, status: Satisfied, time: 0.046749003s
CNF 3627 vars 14116 clauses
last 337 length 1298
last 291 length 1119
CNF 291 vars 1119 clauses
CNF 337 vars 1298 clauses
last 201 length 767
last 257 length 995
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2028, clauses: 7070
last 2028 length 7070
CNF 201 vars 767 clauses
CNF 2028 vars 7070 clauses
CNF 257 vars 995 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1632, clauses: 5633
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2028, clauses: 7070, status: Unsatisfied, time: 0.081681746s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4994, clauses: 20317
last 1632 length 5633
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4575, clauses: 18661
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3137, clauses: 12100
last 4994 length 20317
last 4575 length 18661
CNF 1632 vars 5633 clauses
last 3137 length 12100
CNF 4994 vars 20317 clauses
CNF 4575 vars 18661 clauses
**************************************************
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1632, clauses: 5633, status: Unsatisfied, time: 0.057102331s
CNF 3137 vars 12100 clauses
summary
**************************************************
SRS with 3 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 27 rules on 9 letters       weights
SRS with 15 rules on 9 letters       mirror
SRS with 15 rules on 9 letters       DP
SRS with 38 strict rules and 15 weak rules on 16 letters       weights
SRS with 14 strict rules and 15 weak rules on 15 letters       EDG
SRS with 1 strict rules and 15 weak rules on Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4994, clauses: 20317, status: Satisfied, time: 0.053892603s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4575, clauses: 18661, status: Satisfied, time: 0.044847891s
10 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [b, a, b] -> [a, a, a] {- Input 1 -}
  [c, c] -> [a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, b], [b, c], [c, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b], [b, c], [c, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] -> [[a, b], [b, c], [c, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, b], [b, c], [c, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b], [b, c], [c, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] -> [[b, b], [b, c], [c, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] -> [[c, b], [b, c], [c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b], [b, c], [c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] -> [[c, b], [b, c], [c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, b]] -> [ [a, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, c]] -> [ [a, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, a]] -> [ [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, b]] -> [ [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, c]] -> [ [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, a]] -> [ [c, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, b]] -> [ [c, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, c]] -> [ [c, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, c], [c, c], [c, a]] -> [[a, a], [a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, c], [c, c], [c, b]] -> [[a, a], [a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, c], [c, c], [c, c]] -> [[a, a], [a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, c], [c, c], [c, a]] -> [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b]] -> [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, c]] -> [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, c], [c, c], [c, a]] -> [[c, a], [a, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, c], [c, c], [c, b]] -> [[c, a], [a, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, c], [c, c], [c, c]] -> [[c, a], [a, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 1/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, b], [b, c], [c, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b], [b, c], [c, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, c]] -> [[a, b], [b, c], [c, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, b], [b, c], [c, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b], [b, c], [c, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, c]] -> [[b, b], [b, c], [c, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, a]] -> [[c, b], [b, c], [c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b]] -> [[c, b], [b, c], [c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, c]] -> [[c, b], [b, c], [c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, b], [b, a], [a, b], [b, c]] -> [ [a, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, c]] -> [ [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, b], [b, a], [a, b], [b, c]] -> [ [c, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[b, c], [c, c], [c, a]] -> [[b, a], [a, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, c], [c, c], [c, b]] -> [[b, a], [a, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, c], [c, c], [c, c]] -> [[b, a], [a, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [ [c, a] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, b], [a, a]] -> [ [c, b] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 1 (Input 0))) -}
  [[a, c], [a, a]] -> [ [c, c] , [b, c] , [a, b] ] {- Mirror (Semlab 0 (Concon 2 (Input 0))) -}
  [[a, a], [b, a]] -> [ [c, a] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 0 (Input 0))) -}
  [[a, b], [b, a]] -> [ [c, b] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, c], [b, a]] -> [ [c, c] , [b, c] , [b, b] ] {- Mirror (Semlab 1 (Concon 2 (Input 0))) -}
  [[a, a], [c, a]] -> [ [c, a] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 0 (Input 0))) -}
  [[a, b], [c, a]] -> [ [c, b] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 1 (Input 0))) -}
  [[a, c], [c, a]] -> [ [c, c] , [b, c] , [c, b] ] {- Mirror (Semlab 2 (Concon 2 (Input 0))) -}
  [[b, c], [a, b], [b, a], [a, b]] -> [ [a, c] , [a, a] , [a, a] , [ a , a ] ] {- Mirror (Semlab 0 (Concon 2 (Input 1))) -}
  [[b, c], [a, b], [b, a], [b, b]] -> [ [a, c] , [a, a] , [a, a] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 2 (Input 1))) -}
  [[b, c], [a, b], [b, a], [c, b]] -> [ [a, c] , [a, a] , [a, a] , [ c , a ] ] {- Mirror (Semlab 2 (Concon 2 (Input 1))) -}
  [[c, a], [c, c], [b, c]] -> [ [a, a] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 0 (Input 2))) -}
  [[c, b], [c, c], [b, c]] -> [ [a, b] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 1 (Input 2))) -}
  [[c, c], [c, c], [b, c]] -> [ [a, c] , [ b , a ] ] {- Mirror (Semlab 1 (Concon 2 (Input 2))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] ->= [ [c, a] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, b], [a, a]] ->= [ [c, b] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, c], [a, a]] ->= [ [c, c] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, a], [b, a]] ->= [ [c, a] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, b], [b, a]] ->= [ [c, b] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, c], [b, a]] ->= [ [c, c] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, a], [c, a]] ->= [ [c, a] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, b], [c, a]] ->= [ [c, b] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, c], [c, a]] ->= [ [c, c] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[b, c], [a, b], [b, a], [a, b]] ->= [ [a, c] , [a, a] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [b, b]] ->= [ [a, c] , [a, a] , [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [c, b]] ->= [ [a, c] , [a, a] , [a, a] , [ c , a ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[c, a], [c, c], [b, c]] ->= [ [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[c, b], [c, c], [b, c]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[c, c], [c, c], [b, c]] ->= [ [a, c] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, a]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, a]#, [a, a]] |-> [ [b, c]# , [ a , b ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, a]#, [a, a]] |-> [ [c, a]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, a]#, [b, a]] |-> [ [b, c]# , [ b , b ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, a]#, [b, a]] |-> [ [c, a]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, a]#, [c, a]] |-> [ [b, c]# , [ c , b ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, a]#, [c, a]] |-> [ [c, a]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, a]#, [c, a]] |-> [ [ c , b ]# ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, b]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, b]#, [a, a]] |-> [ [b, c]# , [ a , b ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, b]#, [a, a]] |-> [ [c, b]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, b]#, [b, a]] |-> [ [b, c]# , [ b , b ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, b]#, [b, a]] |-> [ [c, b]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, b]#, [c, a]] |-> [ [b, c]# , [ c , b ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, b]#, [c, a]] |-> [ [ c , b ]# ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, b]#, [c, a]] |-> [ [c, b]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, c]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, c]#, [a, a]] |-> [ [b, c]# , [ a , b ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, c]#, [a, a]] |-> [ [c, c]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, c]#, [b, a]] |-> [ [b, c]# , [ b , b ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, c]#, [b, a]] |-> [ [c, c]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, c]#, [c, a]] |-> [ [b, c]# , [ c , b ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[a, c]#, [c, a]] |-> [ [ c , b ]# ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[a, c]#, [c, a]] |-> [ [c, c]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[b, c]#, [a, b], [b, a], [a, b]] |-> [ [ a , a ]# ] {- DP (Top 3) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [a, b]] |-> [ [a, a]# , [ a , a ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [a, b]] |-> [ [a, a]# , [a, a] , [ a , a ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [a, b]] |-> [ [a, c]# , [a, a] , [a, a] , [ a , a ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [b, b]] |-> [ [a, a]# , [a, a] , [ b , a ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [b, b]] |-> [ [a, a]# , [ b , a ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [b, b]] |-> [ [a, c]# , [a, a] , [a, a] , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [c, b]] |-> [ [a, a]# , [a, a] , [ c , a ] ] {- DP (Top 1) (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [c, b]] |-> [ [a, a]# , [ c , a ] ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [c, b]] |-> [ [a, c]# , [a, a] , [a, a] , [ c , a ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[b, c]#, [a, b], [b, a], [c, b]] |-> [ [ c , a ]# ] {- DP (Top 3) (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[c, a]#, [c, c], [b, c]] |-> [ [a, a]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[c, b]#, [c, c], [b, c]] |-> [ [a, b]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[c, c]#, [c, c], [b, c]] |-> [ [a, c]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 3/1)
  ([b, a], 3/1)
  ([b, b], 3/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 3/1)
  ([a, a]#, 2/1)
  ([a, b]#, 1/1)
  ([a, c]#, 2/1)
  ([b, c]#, 0/1)
  ([c, a]#, 2/1)
  ([c, b]#, 1/1)
  ([c, c]#, 2/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] ->= [ [c, a] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, b], [a, a]] ->= [ [c, b] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, c], [a, a]] ->= [ [c, c] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, a], [b, a]] ->= [ [c, a] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, b], [b, a]] ->= [ [c, b] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, c], [b, a]] ->= [ [c, c] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, a], [c, a]] ->= [ [c, a] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, b], [c, a]] ->= [ [c, b] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, c], [c, a]] ->= [ [c, c] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[b, c], [a, b], [b, a], [a, b]] ->= [ [a, c] , [a, a] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [b, b]] ->= [ [a, c] , [a, a] , [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [c, b]] ->= [ [a, c] , [a, a] , [a, a] , [ c , a ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[c, a], [c, c], [b, c]] ->= [ [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[c, b], [c, c], [b, c]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[c, c], [c, c], [b, c]] ->= [ [a, c] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
  [[a, a]#, [a, a]] |-> [ [c, a]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, a]#, [b, a]] |-> [ [c, a]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, a]#, [c, a]] |-> [ [c, a]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, b]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, b]#, [a, a]] |-> [ [c, b]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, b]#, [b, a]] |-> [ [c, b]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, b]#, [c, a]] |-> [ [ c , b ]# ] {- DP (Top 2) (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, b]#, [c, a]] |-> [ [c, b]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, c]#, [a, a]] |-> [ [c, c]# , [b, c] , [ a , b ] ] {- DP (Top 0) (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, c]#, [b, a]] |-> [ [c, c]# , [b, c] , [ b , b ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, c]#, [c, a]] |-> [ [c, c]# , [b, c] , [ c , b ] ] {- DP (Top 0) (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[c, a]#, [c, c], [b, c]] |-> [ [a, a]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[c, b]#, [c, c], [b, c]] |-> [ [a, b]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[c, c]#, [c, c], [b, c]] |-> [ [a, c]# , [ b , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [[a, b]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, a], [a, a]] ->= [ [c, a] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
  [[a, b], [a, a]] ->= [ [c, b] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
  [[a, c], [a, a]] ->= [ [c, c] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
  [[a, a], [b, a]] ->= [ [c, a] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [[a, b], [b, a]] ->= [ [c, b] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [[a, c], [b, a]] ->= [ [c, c] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
  [[a, a], [c, a]] ->= [ [c, a] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
  [[a, b], [c, a]] ->= [ [c, b] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
  [[a, c], [c, a]] ->= [ [c, c] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
  [[b, c], [a, b], [b, a], [a, b]] ->= [ [a, c] , [a, a] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [b, b]] ->= [ [a, c] , [a, a] , [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
  [[b, c], [a, b], [b, a], [c, b]] ->= [ [a, c] , [a, a] , [a, a] , [ c , a ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
  [[c, a], [c, c], [b, c]] ->= [ [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
  [[c, b], [c, c], [b, c]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[c, c], [c, c], [b, c]] ->= [ [a, c] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
reason
  remove un-usable
    SRS
      [[a, a], [a, a]] ->= [ [c, a] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 0 (Input 0)))) -}
      [[a, b], [a, a]] ->= [ [c, b] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
      [[a, c], [a, a]] ->= [ [c, c] , [b, c] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 0)))) -}
      [[a, a], [b, a]] ->= [ [c, a] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
      [[a, b], [b, a]] ->= [ [c, b] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
      [[a, c], [b, a]] ->= [ [c, c] , [b, c] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 0)))) -}
      [[a, a], [c, a]] ->= [ [c, a] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 0 (Input 0)))) -}
      [[a, b], [c, a]] ->= [ [c, b] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 1 (Input 0)))) -}
      [[a, c], [c, a]] ->= [ [c, c] , [b, c] , [ c , b ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 0)))) -}
      [[b, c], [a, b], [b, a], [a, b]] ->= [ [a, c] , [a, a] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 2 (Input 1)))) -}
      [[b, c], [a, b], [b, a], [b, b]] ->= [ [a, c] , [a, a] , [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 1)))) -}
      [[b, c], [a, b], [b, a], [c, b]] ->= [ [a, c] , [a, a] , [a, a] , [ c , a ] ] {- DP Nontop (Mirror (Semlab 2 (Concon 2 (Input 1)))) -}
      [[c, a], [c, c], [b, c]] ->= [ [a, a] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 2)))) -}
      [[c, b], [c, c], [b, c]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
      [[c, c], [c, c], [b, c]] ->= [ [a, c] , [ b , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 2 (Input 2)))) -}
   property Termination
has value Just True
for SRS
  [[a, b]#, [a, a]] |-> [ [ a , b ]# ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 0)))) -}
reason
  ([a, a], 1/1)
  ([a, b]#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,3)\TileAllAll{2}(27,9)\Weight\Mirror(15,9)\Deepee(38/15,16)\Weight(14/15,15)\EDG(1/15,10)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
last 3700 length 15361
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F          = Size { num_rules = 15 , num_strict_rules = 15 , num_top_rules = 0 , num_weak_rules
F          = 0 , alphabet_size = 9 , total_length = 84} , self = 88 , parent = Nothing
F          , duration = 0.559260054000 , status = Fail , start = 2025-09-03 11:33:34.546226625
F          UTC , finish = 2025-09-03 11:33:35.105486679 UTC , thread_cap_info = ("ThreadId
F          65", 2, False)}
F          
| F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F        = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| F        = 6 , total_length = 35} , self = 67 , parent = Nothing , duration = 0.108357877000
| F        , status = Fail , start = 2025-09-03 11:33:34.681233559 UTC , finish =
| F        2025-09-03 11:33:34.789591436 UTC , thread_cap_info = ("ThreadId 104",
| F        3, False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | F      = 6 , total_length = 35} , self = 68 , parent = Nothing , duration = 0.195105228000
| | F      , status = Fail , start = 2025-09-03 11:33:34.703857203 UTC , finish =
| | F      2025-09-03 11:33:34.898962431 UTC , thread_cap_info = ("ThreadId 107",
| | F      3, False)}
| | F      
| | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | S    = 6 , total_length = 35} , self = 69 , parent = Nothing , duration = 0.235098625000
| | | S    , status = Success , start = 2025-09-03 11:33:34.706195379 UTC , finish
| | | S    = 2025-09-03 11:33:34.941294004 UTC , thread_cap_info = ("ThreadId 108",
| | | S    3, False)}
| | | S    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | S  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | S  = 6 , total_length = 35} , self = 71 , parent = Nothing , duration = 0.201786531000
| | | | S  , status = Success , start = 2025-09-03 11:33:34.745636605 UTC , finish
| | | | S  = 2025-09-03 11:33:34.947423136 UTC , thread_cap_info = ("ThreadId 109",
| | | | S  3, False)}
| | | | S  
| F | | |  
|   F | |  
|     S |  
|       S  
| F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F        = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| F        = 6 , total_length = 24} , self = 87 , parent = Nothing , duration = 0.131471051000
| F        , status = Fail , start = 2025-09-03 11:33:34.963905789 UTC , finish =
| F        2025-09-03 11:33:35.09537684 UTC , thread_cap_info = ("ThreadId 129", 3,
| F        False)}
| F        
| F        
F          
