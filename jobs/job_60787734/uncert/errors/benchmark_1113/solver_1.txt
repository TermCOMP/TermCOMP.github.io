last 4058 length 19611
CNF 4058 vars 19611 clauses
last 3947 length 17336
last 589 length 2278
last 474 length 1863
CNF 589 vars 2278 clauses
CNF 474 vars 1863 clauses
CNF 3947 vars 17336 clauses
last 792 length 3147
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2094, clauses: 7679
last 2094 length 7679
CNF 792 vars 3147 clauses
last 640 length 2545
CNF 2094 vars 7679 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2505, clauses: 9269
last 2505 length 9269
CNF 640 vars 2545 clauses
CNF 2505 vars 9269 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6134, clauses: 25347
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2094, clauses: 7679, status: Satisfied, time: 0.105059516s
last 6134 length 25347
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2505, clauses: 9269, status: Satisfied, time: 0.082556528s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6259, clauses: 25801
last 528 length 2063
last 463 length 1849
last 600 length 2409
last 695 length 2775
CNF 463 vars 1849 clauses
CNF 528 vars 2063 clauses
CNF 695 vars 2775 clauses
CNF 600 vars 2409 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1979, clauses: 7155
last 1979 length 7155
CNF 1979 vars 7155 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2387, clauses: 8724
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1979, clauses: 7155, status: Unsatisfied, time: 0.097317452s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6087, clauses: 25168
last 2387 length 8724
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6213, clauses: 25619
last 6087 length 25168
last 6213 length 25619
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3788, clauses: 15000
last 3788 length 15000
CNF 2387 vars 8724 clauses
CNF 6087 vars 25168 clauses
CNF 3788 vars 15000 clauses
CNF 6213 vars 25619 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2387, clauses: 8724, status: Satisfied, time: 0.087055519s
last 546 length 2175
last 541 length 2171
CNF 541 vars 2171 clauses
CNF 546 vars 2175 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2176, clauses: 7831
last 2176 length 7831
CNF 2176 vars 7831 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6087, clauses: 25168, status: Unsatisfied, time: 0.22354808s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2176, clauses: 7831, status: Satisfied, time: 0.047324723s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3228, clauses: 12483
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3788, clauses: 15000, status: Unsatisfied, time: 0.288496183s
last 3228 length 12483
CNF 3228 vars 12483 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 4 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, a, a, a] {- Input 1 -}
  [c, a] -> [b, b] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [c, a, a, a] {- Input 1 -}
  [c, a] -> [b, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, a, c] {- Mirror (Input 1) -}
  [a, c] -> [b, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 13A 13A - \
        | 10A 13A 13A - |
        | 10A 13A 13A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, a, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, c] |-> [b#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [b#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee\EDG(5/5,5)\Matrix{\Arctic}{3}\EDG(4/5,5)\Matrix{\Arctic}{3}\EDG(3/5,5)\Matrix{\Arctic}{3}(2/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F              = 12} , self = 63 , parent = Nothing , duration = 0.171331290000 , status
F              = Fail , start = 2025-09-03 11:00:45.52957854 UTC , finish = 2025-09-03
F              11:00:45.70090983 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 62 , parent = Nothing , duration = 0.155730001000 , status
| F            = Fail , start = 2025-09-03 11:00:45.540042763 UTC , finish = 2025-09-03
| F            11:00:45.695772764 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| F            
| | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E          = 12} , self = 102 , parent = Nothing , duration = 0.818836227000 , status
| | E          = Except "AsyncCancelled" , start = 2025-09-03 11:00:45.547574381 UTC ,
| | E          finish = 2025-09-03 11:00:46.366410608 UTC , thread_cap_info = ("ThreadId
| | E          51", 1, False)}
| | E          
| | | F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F        = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | | F        = 0 , alphabet_size = 9 , total_length = 162} , self = 65 , parent = Nothing
| | | F        , duration = 0.181185302000 , status = Fail , start = 2025-09-03 11:00:45.547581993
| | | F        UTC , finish = 2025-09-03 11:00:45.728767295 UTC , thread_cap_info = ("ThreadId
| | | F        63", 3, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F      = 162} , self = 53 , parent = Nothing , duration = 0.103495626000 , status
| | | | F      = Fail , start = 2025-09-03 11:00:45.547584828 UTC , finish = 2025-09-03
| | | | F      11:00:45.651080454 UTC , thread_cap_info = ("ThreadId 73", 0, False)}
| | | | F      
| | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | F    = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules = 0 , num_weak_rules
| | | | | F    = 0 , alphabet_size = 3 , total_length = 12} , self = 40 , parent = Nothing
| | | | | F    , duration = 0.100651055000 , status = Fail , start = 2025-09-03 11:00:45.547585627
| | | | | F    UTC , finish = 2025-09-03 11:00:45.648236682 UTC , thread_cap_info = ("ThreadId
| | | | | F    49", 2, False)}
| | | | | F    
| | | | | F    
| | | | F      
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F      = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F      = 45} , self = 66 , parent = Nothing , duration = 0.113382343000 , status
| | | | F      = Fail , start = 2025-09-03 11:00:45.664999223 UTC , finish = 2025-09-03
| | | | F      11:00:45.778381566 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | | | F      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | S    = 4 , total_length = 35} , self = 67 , parent = Nothing , duration = 0.167648400000
| | | | | S    , status = Success , start = 2025-09-03 11:00:45.666610932 UTC , finish
| | | | | S    = 2025-09-03 11:00:45.834259332 UTC , thread_cap_info = ("ThreadId 102",
| | | | | S    2, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | E  = 4 , total_length = 35} , self = 69 , parent = Nothing , duration = 0.151463100000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:45.684106109
| | | | | | E  UTC , finish = 2025-09-03 11:00:45.835569209 UTC , thread_cap_info = ("ThreadId
| | | | | | E  103", 2, False)}
| | | | | | E  
| F | | | | |  
F   | | | | |  
S   | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | | | |  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
S   | | | | |  alphabet_size = 5 , total_length = 45} , self = 74 , parent = Nothing ,
S   | | | | |  duration = 0.132892935000 , status = Success , start = 2025-09-03 11:00:45.726465371
S   | | | | |  UTC , finish = 2025-09-03 11:00:45.859358306 UTC , thread_cap_info = ("ThreadId
S   | | | | |  107", 2, False)}
S   | | | | |  
|   | F | | |  
|   |   F | |  
|   |     S |  
|   |       E  
S   |          
F   |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   |          = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
F   |          = 4 , total_length = 31} , self = 85 , parent = Nothing , duration = 0.148180324000
F   |          , status = Fail , start = 2025-09-03 11:00:45.874708893 UTC , finish =
F   |          2025-09-03 11:00:46.022889217 UTC , thread_cap_info = ("ThreadId 127",
F   |          2, False)}
F   |          
| F |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| F |          , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| F |          = 4 , total_length = 31} , self = 95 , parent = Nothing , duration = 0.365163104000
| F |          , status = Fail , start = 2025-09-03 11:00:45.887977485 UTC , finish =
| F |          2025-09-03 11:00:46.253140589 UTC , thread_cap_info = ("ThreadId 128",
| F |          2, False)}
| F |          
| | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | S        = 5 , total_length = 40} , self = 86 , parent = Nothing , duration = 0.188464157000
| | | S        , status = Success , start = 2025-09-03 11:00:45.906198123 UTC , finish
| | | S        = 2025-09-03 11:00:46.09466228 UTC , thread_cap_info = ("ThreadId 130",
| | | S        2, False)}
| | | S        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | E      = 5 , total_length = 40} , self = 88 , parent = Nothing , duration = 0.195066790000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:45.926477263
| | | | E      UTC , finish = 2025-09-03 11:00:46.121544053 UTC , thread_cap_info = ("ThreadId
| | | | E      131", 2, False)}
| | | | E      
F | | | |      
F | | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F | | | |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F | | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F | | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
F | | | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
F | | | |      = 4 , total_length = 31} , self = 101 , parent = Nothing , duration = 0.315170183000
F | | | |      , status = Fail , start = 2025-09-03 11:00:46.022943385 UTC , finish =
F | | | |      2025-09-03 11:00:46.338113568 UTC , thread_cap_info = ("ThreadId 132",
F | | | |      2, False)}
F | | | |      
| | | S |      
| | |   E      
| | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S        = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | S        = 5 , total_length = 34} , self = 96 , parent = Nothing , duration = 0.138803837000
| | | S        , status = Success , start = 2025-09-03 11:00:46.13286743 UTC , finish
| | | S        = 2025-09-03 11:00:46.271671267 UTC , thread_cap_info = ("ThreadId 145",
| | | S        2, False)}
| | | S        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | E      = 5 , total_length = 34} , self = 98 , parent = Nothing , duration = 0.114084290000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:46.223077553
| | | | E      UTC , finish = 2025-09-03 11:00:46.337161843 UTC , thread_cap_info = ("ThreadId
| | | | E      146", 2, False)}
| | | | E      
| F | | |      
|   | S |      
|   |   E      
F   |          
    E          
