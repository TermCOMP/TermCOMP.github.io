last 2041 length 8681
last 2015 length 8360
CNF 2041 vars 8681 clauses
last 1640 length 7556
CNF 1640 vars 7556 clauses
CNF 2015 vars 8360 clauses
last 1650 length 7406
CNF 1650 vars 7406 clauses
[Info] pool sizes (success) 28698 seen 13463 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 20 rules on 13 letters       looping derivation
from
  [BA, BAAA, A, b, a, a, a, b, a]
to
  [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a]
via 20 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [B, a] -> [BA] {- Input 0 -}
  [B, b] -> [B, B] {- Input 1 -}
  [BA, a] -> [BAA] {- Input 2 -}
  [BA, b] -> [BA, B] {- Input 3 -}
  [BAA, a] -> [BAAA] {- Input 4 -}
  [BAA, b] -> [BAA, B] {- Input 5 -}
  [BAAA, a] -> [BAAA, A] {- Input 6 -}
  [BAAA, b] -> [BAAAB] {- Input 7 -}
  [BAAAB, a] -> [BAAABA] {- Input 8 -}
  [BAAAB, b] -> [BAAAB, B] {- Input 9 -}
  [BAAABA, a] -> [BAAABAA] {- Input 10 -}
  [BAAABA, b] -> [BAAABA, B] {- Input 11 -}
  [BAAABAA, a] -> [BAAABAAA] {- Input 12 -}
  [BAAABAA, b] -> [BAAABAA, B] {- Input 13 -}
  [BAAABAAA] -> [a, b, a] {- Input 14 -}
  [A, a] -> [A, A] {- Input 15 -}
  [A, b] -> [AB] {- Input 16 -}
  [AB, a] -> [ABA] {- Input 17 -}
  [AB, b] -> [AB, B] {- Input 18 -}
  [ABA] -> [b, a, a, a, b, a, a, a] {- Input 19 -}
reason
  Nontermination
    Derive   { from = [BA, BAAA, A, b, a, a, a, b, a], via = [(Step   { rule = 16, position = 2}, [BA, BAAA, AB, a, a, a, b, a]), (Step   { rule = 17, position = 2}, [BA, BAAA, ABA, a, a, b, a]), (Step   { rule = 19, position = 2}, [BA, BAAA, b, a, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 7, position = 1}, [BA, BAAAB, a, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 8, position = 1}, [BA, BAAABA, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 10, position = 1}, [BA, BAAABAA, a, b, a, a, a, a, a, b, a]), (Step   { rule = 12, position = 1}, [BA, BAAABAAA, b, a, a, a, a, a, b, a]), (Step   { rule = 14, position = 1}, [BA, a, b, a, b, a, a, a, a, a, b, a]), (Step   { rule = 2, position = 0}, [BAA, b, a, b, a, a, a, a, a, b, a]), (Step   { rule = 5, position = 0}, [BAA, B, a, b, a, a, a, a, a, b, a]), (Step   { rule = 0, position = 1}, [BAA, BA, b, a, a, a, a, a, b, a]), (Step   { rule = 3, position = 1}, [BAA, BA, B, a, a, a, a, a, b, a]), (Step   { rule = 0, position = 2}, [BAA, BA, BA, a, a, a, a, b, a]), (Step   { rule = 2, position = 2}, [BAA, BA, BAA, a, a, a, b, a]), (Step   { rule = 4, position = 2}, [BAA, BA, BAAA, a, a, b, a]), (Step   { rule = 6, position = 2}, [BAA, BA, BAAA, A, a, b, a]), (Step   { rule = 15, position = 3}, [BAA, BA, BAAA, A, A, b, a]), (Step   { rule = 16, position = 4}, [BAA, BA, BAAA, A, AB, a]), (Step   { rule = 17, position = 4}, [BAA, BA, BAAA, A, ABA]), (Step   { rule = 19, position = 4}, [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a])], to = [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a]}

**************************************************
skeleton: (20,13)\Loop{20}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S            , closure = Forward\n , start_strict_only = True\n , max_closure_length
S            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S            = True})" , input_size = Size { num_rules = 20 , num_strict_rules = 20
S            , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 13 , total_length
S            = 76} , self = 56 , parent = Nothing , duration = 0.432483196000 , status
S            = Success , start = 2025-09-03 11:03:25.267045381 UTC , finish = 2025-09-03
S            11:03:25.699528577 UTC , thread_cap_info = ("ThreadId 43", 2, False)}
S            
| F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F          = Size { num_rules = 20 , num_strict_rules = 20 , num_top_rules = 0 , num_weak_rules
| F          = 0 , alphabet_size = 13 , total_length = 76} , self = 32 , parent = Nothing
| F          , duration = 0.115943382000 , status = Fail , start = 2025-09-03 11:03:25.301882723
| F          UTC , finish = 2025-09-03 11:03:25.417826105 UTC , thread_cap_info = ("ThreadId
| F          50", 2, False)}
| F          
| | S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S        = Size { num_rules = 2873 , num_strict_rules = 2873 , num_top_rules = 0
| | S        , num_weak_rules = 0 , alphabet_size = 169 , total_length = 16562} , self
| | S        = 58 , parent = Nothing , duration = 0.429931355000 , status = Success
| | S        , start = 2025-09-03 11:03:25.35259533 UTC , finish = 2025-09-03 11:03:25.782526685
| | S        UTC , thread_cap_info = ("ThreadId 64", 0, False)}
| | S        
| F |        
| F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| F |        = 25 , num_top_rules = 25 , num_weak_rules = 20 , alphabet_size = 22 ,
| F |        total_length = 160} , self = 54 , parent = Nothing , duration = 0.164657481000
| F |        , status = Fail , start = 2025-09-03 11:03:25.522186945 UTC , finish =
| F |        2025-09-03 11:03:25.686844426 UTC , thread_cap_info = ("ThreadId 81", 2,
| F |        False)}
| F |        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| | | F      = 25 , num_top_rules = 25 , num_weak_rules = 20 , alphabet_size = 22 ,
| | | F      total_length = 160} , self = 52 , parent = Nothing , duration = 0.122666480000
| | | F      , status = Fail , start = 2025-09-03 11:03:25.541895227 UTC , finish =
| | | F      2025-09-03 11:03:25.664561707 UTC , thread_cap_info = ("ThreadId 82", 2,
| | | F      False)}
| | | F      
| | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | F    { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | F    = MSB_First}\n , max_size = Nothing\n , max_height = Just 5\n , initial
| | | | F    = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | F    = False}" , input_size = Size { num_rules = 17 , num_strict_rules = 17
| | | | F    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 13 , total_length
| | | | F    = 64} , self = 55 , parent = Nothing , duration = 0.142363951000 , status
| | | | F    = Fail , start = 2025-09-03 11:03:25.55584099 UTC , finish = 2025-09-03
| | | | F    11:03:25.698204941 UTC , thread_cap_info = ("ThreadId 83", 0, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 30 , num_strict_rules
| | | | | F  = 10 , num_top_rules = 10 , num_weak_rules = 20 , alphabet_size = 16 ,
| | | | | F  total_length = 124} , self = 57 , parent = Nothing , duration = 0.111069798000
| | | | | F  , status = Fail , start = 2025-09-03 11:03:25.614413771 UTC , finish =
| | | | | F  2025-09-03 11:03:25.725483569 UTC , thread_cap_info = ("ThreadId 88", 2,
| | | | | F  False)}
| | | | | F  
| | | F | |  
| F |   | |  
|   |   F |  
S   |     |  
    |     F  
    S        
