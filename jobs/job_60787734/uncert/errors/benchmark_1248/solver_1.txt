last 761 length 3102
CNF 761 vars 3102 clauses
last 829 length 3762
last 599 length 2433
last 606 length 2475
CNF 829 vars 3762 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2205, clauses: 8114
CNF 599 vars 2433 clauses
CNF 606 vars 2475 clauses
last 2205 length 8114
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2179, clauses: 7795
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6721, clauses: 27892
CNF 2205 vars 8114 clauses
last 2179 length 7795
last 6721 length 27892
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6463, clauses: 26709
CNF 2179 vars 7795 clauses
last 6463 length 26709
CNF 6721 vars 27892 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2205, clauses: 8114, status: Unsatisfied, time: 0.165532094s
CNF 6463 vars 26709 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2179, clauses: 7795, status: Unsatisfied, time: 0.150098178s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4213, clauses: 17033
last 4213 length 17033
CNF 4213 vars 17033 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 2 and with 45 epsilon transitions
SRS with 2 rules on 3 letters       mirror
SRS with 2 rules on 3 letters       relatively RFC-matchbounded for method RFC at bound  Merge with height bound 2 and actual height 1 and with 10 epsilon transitions
SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [c, c, b] -> [a, c, a, c, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a] -> [] {- Mirror (Input 1) -}
  [b, c, c] -> [c, c, a, c, a] {- Mirror (Input 2) -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 2), (1, -1), (2, 2)], epsilons = [((0, 0, 0), (0, 1, 0)), ((0, 0, 0), (0, 2, 0)), ((1, 0, 0), (0, 1, 0)), ((1, 0, 0), (0, 2, 0)), ((1, 0, 0), (1, 2, 0)), ((2, 0, 0), (0, 2, 0)), ((2, 0, 0), (1, 2, 0)), ((2, 0, 0), (2, 2, 0)), ((1, 0, 1), (0, 2, 3)), ((1, 0, 1), (0, 2, 5)), ((2, 0, 1), (0, 2, 1)), ((2, 0, 1), (1, 2, 1)), ((2, 0, 1), (2, 2, 1)), ((2, 0, 1), (1, 2, 3)), ((2, 0, 1), (2, 2, 3)), ((2, 0, 1), (1, 2, 5)), ((2, 0, 1), (2, 2, 5)), ((0, 2, 2), (1, 0, 0)), ((0, 2, 2), (0, 1, 0)), ((0, 2, 2), (0, 2, 0)), ((0, 2, 2), (1, 2, 0)), ((1, 2, 2), (2, 0, 0)), ((1, 2, 2), (0, 2, 0)), ((1, 2, 2), (1, 2, 0)), ((1, 2, 2), (2, 2, 0)), ((2, 2, 2), (2, 0, 0)), ((2, 2, 2), (0, 2, 0)), ((2, 2, 2), (1, 2, 0)), ((2, 2, 2), (2, 2, 0)), ((0, 2, 4), (1, 0, 0)), ((0, 2, 4), (0, 1, 0)), ((0, 2, 4), (0, 2, 0)), ((0, 2, 4), (1, 2, 0)), ((1, 2, 4), (2, 0, 0)), ((1, 2, 4), (0, 2, 0)), ((1, 2, 4), (1, 2, 0)), ((1, 2, 4), (2, 2, 0)), ((2, 2, 4), (2, 0, 0)), ((2, 2, 4), (0, 2, 0)), ((2, 2, 4), (1, 2, 0)), ((2, 2, 4), (2, 2, 0)), ((1, 2, 5), (0, 2, 1)), ((1, 2, 5), (1, 2, 1)), ((2, 2, 5), (1, 2, 1)), ((2, 2, 5), (2, 2, 1))]}
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, c, c] -> [c, c, a, c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [c, c, b] -> [a, c, a, c, c] {- Input 2 -}
reason
  right-barren
    Barren   { method_ = RFC, bound = 2, at_bound = Merge, rule_height = [(0, 1), (1, -1)], epsilons = [((0, 1, 0), (1, 0, 0)), ((1, 0, 1), (1, 0, 0)), ((1, 0, 1), (0, 1, 0)), ((1, 0, 1), (0, 1, 1)), ((1, 0, 1), (0, 1, 3)), ((0, 1, 2), (1, 0, 0)), ((0, 1, 3), (1, 0, 0)), ((0, 1, 3), (0, 1, 0)), ((0, 1, 4), (1, 0, 0)), ((0, 1, 4), (0, 1, 0))]}
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: \Mirror(3,3)\RelRFCmb{2}\Mirror(2,3)\RelRFCmb{1}(0,0)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F        , closure = Forward\n , start_strict_only = True\n , max_closure_length
F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F        = 12} , self = 57 , parent = Nothing , duration = 0.209385282000 , status
F        = Fail , start = 2025-09-03 11:22:51.955685691 UTC , finish = 2025-09-03
F        11:22:52.165070973 UTC , thread_cap_info = ("ThreadId 37", 0, False)}
F        
| F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F      = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| F      = 34} , self = 51 , parent = Nothing , duration = 0.101157389000 , status
| F      = Fail , start = 2025-09-03 11:22:52.009424958 UTC , finish = 2025-09-03
| F      11:22:52.110582347 UTC , thread_cap_info = ("ThreadId 75", 2, False)}
| F      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | F    = 4 , total_length = 38} , self = 61 , parent = Nothing , duration = 0.190556564000
| | F    , status = Fail , start = 2025-09-03 11:22:52.013620071 UTC , finish =
| | F    2025-09-03 11:22:52.204176635 UTC , thread_cap_info = ("ThreadId 77", 2,
| | F    False)}
| | F    
| | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | F  = 5 , total_length = 34} , self = 63 , parent = Nothing , duration = 0.202047752000
| | | F  , status = Fail , start = 2025-09-03 11:22:52.060916825 UTC , finish =
| | | F  2025-09-03 11:22:52.262964577 UTC , thread_cap_info = ("ThreadId 86", 2,
| | | F  False)}
| | | F  
| F | |  
F   | |  
E   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
E   | |  = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
E   | |  = 126} , self = 64 , parent = Nothing , duration = 0.159408249000 , status
E   | |  = Except "AsyncCancelled" , start = 2025-09-03 11:22:52.176713496 UTC ,
E   | |  finish = 2025-09-03 11:22:52.336121745 UTC , thread_cap_info = ("ThreadId
E   | |  109", 0, False)}
E   | |  
|   F |  
|     F  
E        
