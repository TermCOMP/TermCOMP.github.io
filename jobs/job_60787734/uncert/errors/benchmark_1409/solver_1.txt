last 561 length 2194
last 455 length 1787
CNF 455 vars 1787 clauses
last 488 length 1878
CNF 561 vars 2194 clauses
last 398 length 1549
CNF 488 vars 1878 clauses
CNF 398 vars 1549 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9030
last 2513 length 9030
CNF 2513 vars 9030 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8212
last 2314 length 8212
CNF 2314 vars 8212 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9030, status: Unsatisfied, time: 0.106286168s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8212, status: Unsatisfied, time: 0.108202171s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6629, clauses: 27285
last 6629 length 27285
CNF 6629 vars 27285 clauses
last 4197 length 21330
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6291, clauses: 25859
last 6291 length 25859
last 3785 length 17096
CNF 6291 vars 25859 clauses
CNF 3785 vars 17096 clauses
CNF 4197 vars 21330 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4063, clauses: 15749
last 4063 length 15749
CNF 4063 vars 15749 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4308, clauses: 16779
last 4308 length 16779
CNF 4308 vars 16779 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6291, clauses: 25859, status: Unsatisfied, time: 0.487312232s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4063, clauses: 15749, status: Unsatisfied, time: 0.436820541s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3753, clauses: 14198
last 3753 length 14198
[Info] pool sizes (success) 45882 seen 24004 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 3753 vars 14198 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6629, clauses: 27285, status: Unsatisfied, time: 0.684162288s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4308, clauses: 16779, status: Unsatisfied, time: 0.467663455s
**************************************************
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10967, clauses: 43544
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3753, clauses: 14198, status: Unsatisfied, time: 0.218389302s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4070, clauses: 15692
last 7573 length 31311
last 5926 length 23720
last 10967 length 43544
summary
last 4070 length 15692
CNF 5926 vars 23720 clauses
CNF 7573 vars 31311 clauses
CNF 10967 vars 43544 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11415, clauses: 45532
**************************************************
CNF 4070 vars 15692 clauses
last 11415 length 45532
last 9237 length 42132
SRS with 4 rules on 3 letters       looping derivation
from
  [a, a, b, b, c, a, a, b]
to
  [b, b, a, a, b, b, c, a, a, b]
via 21 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b, a, b, c] {- Input 1 -}
  [c] -> [] {- Input 2 -}
  [c, b] -> [a, c] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [a, a, b, b, c, a, a, b], via = [(Step   { rule = 1, position = 5}, [a, a, b, b, c, b, a, b, c, b]), (Step   { rule = 2, position = 8}, [a, a, b, b, c, b, a, b, b]), (Step   { rule = 3, position = 4}, [a, a, b, b, a, c, a, b, b]), (Step   { rule = 2, position = 5}, [a, a, b, b, a, a, b, b]), (Step   { rule = 1, position = 4}, [a, a, b, b, b, a, b, c, b, b]), (Step   { rule = 0, position = 5}, [a, a, b, b, b, b, c, b, b]), (Step   { rule = 3, position = 6}, [a, a, b, b, b, b, a, c, b]), (Step   { rule = 3, position = 7}, [a, a, b, b, b, b, a, a, c]), (Step   { rule = 2, position = 8}, [a, a, b, b, b, b, a, a]), (Step   { rule = 1, position = 0}, [b, a, b, c, b, b, b, b, a, a]), (Step   { rule = 0, position = 1}, [b, b, c, b, b, b, b, a, a]), (Step   { rule = 3, position = 2}, [b, b, a, c, b, b, b, a, a]), (Step   { rule = 3, position = 3}, [b, b, a, a, c, b, b, a, a]), (Step   { rule = 1, position = 7}, [b, b, a, a, c, b, b, b, a, b, c]), (Step   { rule = 2, position = 10}, [b, b, a, a, c, b, b, b, a, b]), (Step   { rule = 3, position = 4}, [b, b, a, a, a, c, b, b, a, b]), (Step   { rule = 3, position = 5}, [b, b, a, a, a, a, c, b, a, b]), (Step   { rule = 1, position = 4}, [b, b, a, a, b, a, b, c, c, b, a, b]), (Step   { rule = 0, position = 5}, [b, b, a, a, b, b, c, c, b, a, b]), (Step   { rule = 3, position = 7}, [b, b, a, a, b, b, c, a, c, a, b]), (Step   { rule = 2, position = 8}, [b, b, a, a, b, b, c, a, a, b])], to = [b, b, a, a, b, b, c, a, a, b]}

**************************************************
skeleton: (4,3)\Loop{21}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S              , closure = Backward\n , start_strict_only = True\n , max_closure_length
S              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S              = 12} , self = 71 , parent = Nothing , duration = 0.839927239000 , status
S              = Success , start = 2025-09-03 11:52:53.175983589 UTC , finish = 2025-09-03
S              11:52:54.015910828 UTC , thread_cap_info = ("ThreadId 35", 2, False)}
S              
| F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F            = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F            = 0 , alphabet_size = 9 , total_length = 180} , self = 72 , parent = Nothing
| F            , duration = 0.826945861000 , status = Fail , start = 2025-09-03 11:52:53.190193809
| F            UTC , finish = 2025-09-03 11:52:54.01713967 UTC , thread_cap_info = ("ThreadId
| F            63", 0, False)}
| F            
| | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F          = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | F          alphabet_size = 5 , total_length = 43} , self = 57 , parent = Nothing ,
| | F          duration = 0.126925900000 , status = Fail , start = 2025-09-03 11:52:53.248830414
| | F          UTC , finish = 2025-09-03 11:52:53.375756314 UTC , thread_cap_info = ("ThreadId
| | F          86", 1, False)}
| | F          
| | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F        = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
| | | F        alphabet_size = 5 , total_length = 38} , self = 58 , parent = Nothing ,
| | | F        duration = 0.144642422000 , status = Fail , start = 2025-09-03 11:52:53.265939092
| | | F        UTC , finish = 2025-09-03 11:52:53.410581514 UTC , thread_cap_info = ("ThreadId
| | | F        91", 1, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F      = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F      = 180} , self = 62 , parent = Nothing , duration = 0.272352940000 , status
| | | | F      = Fail , start = 2025-09-03 11:52:53.299816253 UTC , finish = 2025-09-03
| | | | F      11:52:53.572169193 UTC , thread_cap_info = ("ThreadId 96", 3, False)}
| | | | F      
| | | | | F    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | F    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | F    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | F    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | | | F    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| | | | | F    = 5 , total_length = 38} , self = 69 , parent = Nothing , duration = 0.645339093000
| | | | | F    , status = Fail , start = 2025-09-03 11:52:53.302656535 UTC , finish =
| | | | | F    2025-09-03 11:52:53.947995628 UTC , thread_cap_info = ("ThreadId 93", 1,
| | | | | F    False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | | F  = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | F  = 180} , self = 63 , parent = Nothing , duration = 0.266960160000 , status
| | | | | | F  = Fail , start = 2025-09-03 11:52:53.306822043 UTC , finish = 2025-09-03
| | | | | | F  11:52:53.573782203 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | | | | | F  
| | F | | | |  
| |   F | | |  
| | F   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F   | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | F   | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| | F   | | |  = 5 , total_length = 38} , self = 70 , parent = Nothing , duration = 0.527553205000
| | F   | | |  , status = Fail , start = 2025-09-03 11:52:53.459020433 UTC , finish =
| | F   | | |  2025-09-03 11:52:53.986573638 UTC , thread_cap_info = ("ThreadId 105",
| | F   | | |  1, False)}
| | F   | | |  
| | |   F | |  
| | |     | F  
| | |     F    
| | F          
S |            
  F            
