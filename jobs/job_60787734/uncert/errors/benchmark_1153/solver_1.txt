last 3833 length 17179
CNF 3833 vars 17179 clauses
last 4670 length 23203
CNF 4670 vars 23203 clauses
last 746 length 3011
CNF 746 vars 3011 clauses
last 679 length 2764
CNF 679 vars 2764 clauses
last 792 length 3209
last 727 length 3013
CNF 727 vars 3013 clauses
CNF 792 vars 3209 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2663, clauses: 9498
last 2663 length 9498
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2756, clauses: 9891
last 2756 length 9891
CNF 2663 vars 9498 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8930, clauses: 37197
CNF 2756 vars 9891 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2663, clauses: 9498, status: Unsatisfied, time: 0.164442086s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9222, clauses: 38447
last 8930 length 37197
last 9222 length 38447
CNF 9222 vars 38447 clauses
CNF 8930 vars 37197 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2756, clauses: 9891, status: Unsatisfied, time: 0.282236066s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9222, clauses: 38447, status: Satisfied, time: 0.165531579s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5661, clauses: 22626
last 5661 length 22626
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8930, clauses: 37197, status: Satisfied, time: 0.198166711s
CNF 5661 vars 22626 clauses
last 697 length 2891
CNF 697 vars 2891 clauses
last 722 length 2941
CNF 722 vars 2941 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2543, clauses: 9066
last 2543 length 9066
CNF 2543 vars 9066 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 10 rules on 3 letters       mirror
SRS with 10 rules on 3 letters       DP
SRS with 5 strict rules and 10 weak rules on 6 letters       weights
SRS with 2 strict rules and 10 weak rules on 4 letters       EDG
SRS with 2 strict rules and 10 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 10 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, b, a, a, c] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, b, c] -> [] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [b, b, a, a, c] {- Input 1 -}
  [a, b] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [c, b] -> [c] {- Input 2 -}
  [a, c, b, c] -> [a] {- Input 3 -}
  [b, c, b, c] -> [b] {- Input 3 -}
  [c, c, b, c] -> [c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [c, a, a, b, b] {- Mirror (Input 1) -}
  [b, a] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [b, c] -> [c] {- Mirror (Input 2) -}
  [c, b, c, a] -> [a] {- Mirror (Input 3) -}
  [c, b, c, b] -> [b] {- Mirror (Input 3) -}
  [c, b, c, c] -> [c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [b#, a] |-> [a#, a, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, b, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, a, a, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [b#, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 4) (Mirror (Input 1)) -}
  [b#, a] |-> [b#, b] {- DP (Top 3) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A 1A 1A \
        | -  0A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / 0A - 0A \
        | 0A - -  |
        \ -  - 0A / )
  ( c
  , Wk  / -1A 1A 1A \
        | -1A -  -  |
        \ -   -  0A / )
  ( b#
  , Wk  / 0A 0A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [c, a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(10,3)\Deepee(5/10,6)\Weight\EDG(2/10,4)\Matrix{\ArcticBZ}{3}(0/10,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F        = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
F        = 0 , alphabet_size = 9 , total_length = 180} , self = 35 , parent = Nothing
F        , duration = 0.102405623000 , status = Fail , start = 2025-09-03 11:08:22.184401128
F        UTC , finish = 2025-09-03 11:08:22.286806751 UTC , thread_cap_info = ("ThreadId
F        51", 1, False)}
F        
| F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F      = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| F      = 0 , alphabet_size = 3 , total_length = 12} , self = 49 , parent = Nothing
| F      , duration = 0.176117220000 , status = Fail , start = 2025-09-03 11:08:22.271815829
| F      UTC , finish = 2025-09-03 11:08:22.447933049 UTC , thread_cap_info = ("ThreadId
| F      72", 2, False)}
| F      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 180} , self = 45 , parent = Nothing , duration = 0.114180805000 , status
| | F    = Fail , start = 2025-09-03 11:08:22.277419385 UTC , finish = 2025-09-03
| | F    11:08:22.39160019 UTC , thread_cap_info = ("ThreadId 66", 0, False)}
| | F    
F | |    
F | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | |    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
F | |    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F | |    = 180} , self = 48 , parent = Nothing , duration = 0.112316082000 , status
F | |    = Fail , start = 2025-09-03 11:08:22.306948203 UTC , finish = 2025-09-03
F | |    11:08:22.419264285 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
F | |    
| | F    
F |      
  F      
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
F        alphabet_size = 4 , total_length = 47} , self = 67 , parent = Nothing ,
F        duration = 0.221568067000 , status = Fail , start = 2025-09-03 11:08:22.513773317
F        UTC , finish = 2025-09-03 11:08:22.735341384 UTC , thread_cap_info = ("ThreadId
F        105", 3, False)}
F        
| S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| S      = 4 , total_length = 47} , self = 71 , parent = Nothing , duration = 0.412684138000
| S      , status = Success , start = 2025-09-03 11:08:22.518349464 UTC , finish
| S      = 2025-09-03 11:08:22.931033602 UTC , thread_cap_info = ("ThreadId 106",
| S      3, False)}
| S      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | F    alphabet_size = 4 , total_length = 49} , self = 68 , parent = Nothing ,
| | F    duration = 0.300852375000 , status = Fail , start = 2025-09-03 11:08:22.577604065
| | F    UTC , finish = 2025-09-03 11:08:22.87845644 UTC , thread_cap_info = ("ThreadId
| | F    108", 3, False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | S  = 4 , total_length = 49} , self = 69 , parent = Nothing , duration = 0.309325535000
| | | S  , status = Success , start = 2025-09-03 11:08:22.598222032 UTC , finish
| | | S  = 2025-09-03 11:08:22.907547567 UTC , thread_cap_info = ("ThreadId 109",
| | | S  3, False)}
| | | S  
F | | |  
E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
E | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
E | | |  = 4 , total_length = 47} , self = 78 , parent = Nothing , duration = 0.222086271000
E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:08:22.736638867
E | | |  UTC , finish = 2025-09-03 11:08:22.958725138 UTC , thread_cap_info = ("ThreadId
E | | |  111", 3, False)}
E | | |  
| | F |  
| |   S  
| S      
E        
