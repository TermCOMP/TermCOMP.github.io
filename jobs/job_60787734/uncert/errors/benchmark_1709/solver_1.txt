**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       Drop
SRS with 1 rules on 2 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 75 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, a, b, a, a, b, b, a, a, b] -> [ a , a , b , b , a , a , b , a , a , b , a , a , b , b ] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [b, a, a, b, a, a, b, b, a, a] -> [ a , a , b , b , a , a , b , a , a , b , a , a , b ] {- Dropped 0 1 (Input 0) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 75 states

   property Termination
has value Just True
for SRS
  [b, a, a, b, a, a, b, b, a, a] -> [ a , a , b , b , a , a , b , a , a , b , a , a , b ] {- Dropped 0 1 (Input 0) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 75 states

**************************************************
skeleton: \Drop{0}{1}(1,2)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F            = 25} , self = 55 , parent = Nothing , duration = 0.337089997000 , status
F            = Fail , start = 2025-09-03 12:48:46.387631566 UTC , finish = 2025-09-03
F            12:48:46.724721563 UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F            
| E          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| E          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| E          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| E          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| E          = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E          = 23} , self = 54 , parent = Nothing , duration = 0.300501175000 , status
| E          = Except "AsyncCancelled" , start = 2025-09-03 12:48:46.388418798 UTC ,
| E          finish = 2025-09-03 12:48:46.688919973 UTC , thread_cap_info = ("ThreadId
| E          53", 0, False)}
| E          
| | E        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | E        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | E        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | E        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | E        = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | E        = 25} , self = 56 , parent = Nothing , duration = 0.441757307000 , status
| | E        = Except "AsyncCancelled" , start = 2025-09-03 12:48:46.397672658 UTC ,
| | E        finish = 2025-09-03 12:48:46.839429965 UTC , thread_cap_info = ("ThreadId
| | E        66", 0, False)}
| | E        
| | | E      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | E      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | E      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | E      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | E      = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | E      = 0 , alphabet_size = 2 , total_length = 23} , self = 53 , parent = Nothing
| | | E      , duration = 0.161142887000 , status = Except "AsyncCancelled" , start
| | | E      = 2025-09-03 12:48:46.419430549 UTC , finish = 2025-09-03 12:48:46.580573436
| | | E      UTC , thread_cap_info = ("ThreadId 86", 0, False)}
| | | E      
| | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | E    = 23} , self = 57 , parent = Nothing , duration = 0.479498006000 , status
| | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:48:46.439921975 UTC ,
| | | | E    finish = 2025-09-03 12:48:46.919419981 UTC , thread_cap_info = ("ThreadId
| | | | E    98", 0, False)}
| | | | E    
| | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | E  = 23} , self = 59 , parent = Nothing , duration = 0.759997834000 , status
| | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:48:46.459420569 UTC ,
| | | | | E  finish = 2025-09-03 12:48:47.219418403 UTC , thread_cap_info = ("ThreadId
| | | | | E  99", 0, False)}
| | | | | E  
| | | E | |  
| | | E | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E | |  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E | |  = 25} , self = 58 , parent = Nothing , duration = 0.439858514000 , status
| | | E | |  = Except "AsyncCancelled" , start = 2025-09-03 12:48:46.599563471 UTC ,
| | | E | |  finish = 2025-09-03 12:48:47.039421985 UTC , thread_cap_info = ("ThreadId
| | | E | |  109", 0, False)}
| | | E | |  
| E | | | |  
F   | | | |  
    E | | |  
      | E |  
      E   |  
          E  
