last 609 length 2479
CNF 609 vars 2479 clauses
last 623 length 2550
CNF 623 vars 2550 clauses
last 823 length 3409
CNF 823 vars 3409 clauses
last 3173 length 14604
CNF 3173 vars 14604 clauses
last 786 length 3237
CNF 786 vars 3237 clauses
last 4176 length 20388
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2600, clauses: 9471
CNF 4176 vars 20388 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2087, clauses: 7527
last 2600 length 9471
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 27713
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7677, clauses: 31863
last 2087 length 7527
CNF 2600 vars 9471 clauses
last 6674 length 27713
last 7677 length 31863
CNF 2087 vars 7527 clauses
CNF 6674 vars 27713 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2600, clauses: 9471, status: Satisfied, time: 0.126691013s
CNF 7677 vars 31863 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 27713, status: Satisfied, time: 0.121096064s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 495 length 2057
last 602 length 2482
CNF 602 vars 2482 clauses
CNF 495 vars 2057 clauses
last 735 length 3088
CNF 735 vars 3088 clauses
last 683 length 2814
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1874, clauses: 6666
last 1874 length 6666
CNF 1874 vars 6666 clauses
CNF 683 vars 2814 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2401, clauses: 8659
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1874, clauses: 6666, status: Satisfied, time: 0.029899527s
last 2401 length 8659
CNF 2401 vars 8659 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       weights
SRS with 3 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a, b] -> [a, b, a, a, c] {- Input 1 -}
  [c, b] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a, a] -> [c, a, a, b, a] {- Mirror (Input 1) -}
  [b, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a, a] -> [c, a, a, b, a] {- Mirror (Input 1) -}
  [a, b, c] -> [a] {- Mirror (Input 2) -}
  [b, b, c] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a, b] -> [a, b, a, a, c] {- Input 1 -}
  [c, b, a] -> [a] {- Input 2 -}
  [c, b, b] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, b, a, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [c#] {- DP (Top 4) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, b, a, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -1A 0A 0A \
        | 0A  1A 0A |
        \ -   -  0A / )
  ( b
  , Wk  / -1A 0A  0A  \
        | 0A  -2A -2A |
        \ -   -   0A  / )
  ( c
  , Wk  / -1A 0A  0A \
        | 0A  -1A -  |
        \ -   -   0A / )
  ( a#
  , Wk  / 0A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 2A 2A 3A - \
        | 2A 2A 3A - |
        | 2A 2A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\Weight(3/5,4)\EDG(2/5,4)\Matrix{\ArcticBZ}{3}\EDG(1/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2401, clauses: 8659, status: Satisfied, time: 0.016208713s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
F              , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
F              = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
F              False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
F              = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
F              = 0 , alphabet_size = 9 , total_length = 162} , self = 71 , parent = Nothing
F              , duration = 0.345461689000 , status = Fail , start = 2025-09-03 11:21:37.642322407
F              UTC , finish = 2025-09-03 11:21:37.987784096 UTC , thread_cap_info = ("ThreadId
F              60", 1, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 66 , parent = Nothing , duration = 0.177716441000 , status
| F            = Fail , start = 2025-09-03 11:21:37.649526231 UTC , finish = 2025-09-03
| F            11:21:37.827242672 UTC , thread_cap_info = ("ThreadId 72", 2, False)}
| F            
| | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F          = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F          = 0 , alphabet_size = 9 , total_length = 162} , self = 65 , parent = Nothing
| | F          , duration = 0.123936795000 , status = Fail , start = 2025-09-03 11:21:37.661458682
| | F          UTC , finish = 2025-09-03 11:21:37.785395477 UTC , thread_cap_info = ("ThreadId
| | F          62", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F        = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F        = 42} , self = 64 , parent = Nothing , duration = 0.105965634000 , status
| | | F        = Fail , start = 2025-09-03 11:21:37.676193068 UTC , finish = 2025-09-03
| | | F        11:21:37.782158702 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | F        
| | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | F      = 4 , total_length = 33} , self = 73 , parent = Nothing , duration = 0.301121382000
| | | | F      , status = Fail , start = 2025-09-03 11:21:37.687837252 UTC , finish =
| | | | F      2025-09-03 11:21:37.988958634 UTC , thread_cap_info = ("ThreadId 94", 0,
| | | | F      False)}
| | | | F      
| | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | S    = 4 , total_length = 33} , self = 69 , parent = Nothing , duration = 0.286218856000
| | | | | S    , status = Success , start = 2025-09-03 11:21:37.698691756 UTC , finish
| | | | | S    = 2025-09-03 11:21:37.984910612 UTC , thread_cap_info = ("ThreadId 97",
| | | | | S    0, False)}
| | | | | S    
| | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | S  = 5 , total_length = 42} , self = 67 , parent = Nothing , duration = 0.200154278000
| | | | | | S  , status = Success , start = 2025-09-03 11:21:37.758478654 UTC , finish
| | | | | | S  = 2025-09-03 11:21:37.958632932 UTC , thread_cap_info = ("ThreadId 101",
| | | | | | S  0, False)}
| | | | | | S  
| | | F | | |  
| | | E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | E | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | E | | |  = 5 , total_length = 42} , self = 72 , parent = Nothing , duration = 0.205701504000
| | | E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:21:37.782185373
| | | E | | |  UTC , finish = 2025-09-03 11:21:37.987886877 UTC , thread_cap_info = ("ThreadId
| | | E | | |  106", 0, False)}
| | | E | | |  
| | F | | | |  
| F   | | | |  
|     | | | S  
|     | | S    
F     | |      
      E |      
        F      
