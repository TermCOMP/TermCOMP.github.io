last 3939 length 16931
CNF 3939 vars 16931 clauses
last 5346 length 22741
CNF 5346 vars 22741 clauses
last 1817 length 7796
CNF 1817 vars 7796 clauses
last 2056 length 8924
CNF 2056 vars 8924 clauses
last 2052 length 8834
last 1717 length 7387
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3100, clauses: 11902
CNF 2052 vars 8834 clauses
CNF 1717 vars 7387 clauses
last 3100 length 11902
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10492, clauses: 44093
last 10492 length 44093
CNF 3100 vars 11902 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3121, clauses: 12037
CNF 10492 vars 44093 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10496, clauses: 44105
last 3121 length 12037
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3100, clauses: 11902, status: Satisfied, time: 0.254532694s
last 10496 length 44105
CNF 3121 vars 12037 clauses
CNF 10496 vars 44105 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3121, clauses: 12037, status: Satisfied, time: 0.066103549s
last 1503 length 6303
CNF 1503 vars 6303 clauses
last 1524 length 6595
CNF 1524 vars 6595 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2582, clauses: 9675
last 2582 length 9675
last 1094 length 4631
CNF 1094 vars 4631 clauses
last 1135 length 4830
CNF 2582 vars 9675 clauses
CNF 1135 vars 4830 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2582, clauses: 9675, status: Satisfied, time: 0.066129144s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2188, clauses: 8065
last 2188 length 8065
CNF 2188 vars 8065 clauses
last 5976 length 25896
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2188, clauses: 8065, status: Unsatisfied, time: 0.11839551s
CNF 5976 vars 25896 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8567, clauses: 36019
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5176, clauses: 21524
last 7977 length 34096
**************************************************last 8567 length 36019

last 5176 length 21524
CNF 7977 vars 34096 clauses
last 8507 length 40694
summary
**************************************************
SRS with 4 rules on 2 letters       DP
SRS with 13 strict rules and 4 weak rules on 4 letters       weights
SRS with 4 strict rules and 4 weak rules on 4 letters       EDG
SRS with 4 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 4 weak rules on 4 letters       EDG
SRS with 2 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 4 letters       weights
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, b] -> [b, a, b, a] {- Input 0 -}
  [a, b, b, b] -> [a, a, a, b] {- Input 1 -}
  [b, a, a, b] -> [b, b, a, b] {- Input 2 -}
  [b, a, a, a] -> [a, a, a, b] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, b, b, b] |-> [a#] {- DP (Top 3) (Input 0) -}
  [a#, b, b, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [a#, b, b, b] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [a#, b, b, b] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [a#, b, b, b] |-> [a#, b, a] {- DP (Top 1) (Input 0) -}
  [a#, b, b, b] |-> [b#, a] {- DP (Top 2) (Input 0) -}
  [a#, b, b, b] |-> [b#, a, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, a, a, a] |-> [a#, a, b] {- DP (Top 1) (Input 3) -}
  [b#, a, a, a] |-> [a#, b] {- DP (Top 2) (Input 3) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 3) (Input 3) -}
  [b#, a, a, b] |-> [b#, a, b] {- DP (Top 1) (Input 2) -}
  [b#, a, a, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 2) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, b, b, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [a#, b, b, b] |-> [b#, a, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, a, a, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [a#, b, b, b] |-> [b#, a, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, a, a, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 2) -}
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [b#, a, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [b#, a, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  CNF 8567 vars 36019 clauses
CNF 5176 vars 21524 clauses
, Wk  / 3A 3A 3A - \last 10740 length 50782

       CNF 8507 vars 40694 clauses
 | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 2A 2A 3A - \
        | 2A 2A 3A - |
        | 2A 2A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 2A 4A 4A - \
        | 2A 4A 4A - |
        | 2A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, b, b, b] ->= [b, a, b, a] {- DP Nontop (Input 0) -}
  [a, b, b, b] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [b, a, a, b] ->= [b, b, a, b] {- DP Nontop (Input 2) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,2)\Deepee(13/4,4)\Weight\EDG(4/4,4)\Matrix{\Arctic}{3}\EDG(2/4,4)\Matrix{\Arctic}{3}(1/4,4)\Weight(0/4,2)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 4
  max duration 1.047340693000
  min duration 0.155917022000
  total durat. 1.934495204000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 16
      , num_strict_rules = 16
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 160}
    , self = 68
    , parent = Nothing
    , duration = 1.047340693000
    , status = Fail
    , start = 2025-09-03 12:05:11.519278487 UTC
    , finish = 2025-09-03 12:05:12.56661918 UTC
    , thread_cap_info = ("ThreadId 64", 0, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.800396891000
  min duration 1.800396891000
  total durat. 1.800396891000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 32}
    , self = 107
    , parent = Nothing
    , duration = 1.800396891000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:05:11.46024425 UTC
    , finish = 2025-09-03 12:05:13.260641141 UTC
    , thread_cap_info = ("ThreadId 35", 0, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.631403601000
  min duration 1.631403601000
  total durat. 1.631403601000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 32}
    , self = 106
    , parent = Nothing
    , duration = 1.631403601000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:05:11.607892924 UTC
    , finish = 2025-09-03 12:05:13.239296525 UTC
    , thread_cap_info = ("ThreadId 73", 3, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                  = 32} , self = 64 , parent = Nothing , duration = 0.758744445000 , status
F                  = Fail , start = 2025-09-03 12:05:11.459568847 UTC , finish = 2025-09-03
F                  12:05:12.218313292 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                = 32} , self = 36 , parent = Nothing , duration = 0.147661285000 , status
| F                = Fail , start = 2025-09-03 12:05:11.459570392 UTC , finish = 2025-09-03
| F                12:05:11.607231677 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
| F                
| | E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | E              = 32} , self = 107 , parent = Nothing , duration = 1.800396891000 , status
| | E              = Except "AsyncCancelled" , start = 2025-09-03 12:05:11.46024425 UTC ,
| | E              finish = 2025-09-03 12:05:13.260641141 UTC , thread_cap_info = ("ThreadId
| | E              35", 0, False)}
| | E              
| | | F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F            = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
| | | F            = 0 , alphabet_size = 4 , total_length = 160} , self = 38 , parent = Nothing
| | | F            , duration = 0.155917022000 , status = Fail , start = 2025-09-03 12:05:11.515659827
| | | F            UTC , finish = 2025-09-03 12:05:11.671576849 UTC , thread_cap_info = ("ThreadId
| | | F            66", 0, False)}
| | | F            
| | | | F          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | F          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | F          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | F          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | F          = Size { num_rules = 16 , num_strict_rules = 16 , num_top_rules = 0 , num_weak_rules
| | | | F          = 0 , alphabet_size = 4 , total_length = 160} , self = 68 , parent = Nothing
| | | | F          , duration = 1.047340693000 , status = Fail , start = 2025-09-03 12:05:11.519278487
| | | | F          UTC , finish = 2025-09-03 12:05:12.56661918 UTC , thread_cap_info = ("ThreadId
| | | | F          64", 0, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | F        = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F        = 160} , self = 44 , parent = Nothing , duration = 0.388420232000 , status
| | | | | F        = Fail , start = 2025-09-03 12:05:11.519283462 UTC , finish = 2025-09-03
| | | | | F        12:05:11.907703694 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | F      = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | F      = 160} , self = 43 , parent = Nothing , duration = 0.203698228000 , status
| | | | | | F      = Fail , start = 2025-09-03 12:05:11.559990788 UTC , finish = 2025-09-03
| | | | | | F      12:05:11.763689016 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
| | | | | | F      
| F | | | | |      
| E | | | | |      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | | | |      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | | | |      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | | | |      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | | | |      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | | | |      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | | | |      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | | | |      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | | | |      = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E | | | | |      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E | | | | |      = 32} , self = 106 , parent = Nothing , duration = 1.631403601000 , status
| E | | | | |      = Except "AsyncCancelled" , start = 2025-09-03 12:05:11.607892924 UTC ,
| E | | | | |      finish = 2025-09-03 12:05:13.239296525 UTC , thread_cap_info = ("ThreadId
| E | | | | |      73", 3, False)}
| E | | | | |      
| | | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F    = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | | | | | F    = 0 , alphabet_size = 2 , total_length = 32} , self = 48 , parent = Nothing
| | | | | | | F    , duration = 0.307707450000 , status = Fail , start = 2025-09-03 12:05:11.671120221
| | | | | | | F    UTC , finish = 2025-09-03 12:05:11.978827671 UTC , thread_cap_info = ("ThreadId
| | | | | | | F    75", 3, False)}
| | | | | | | F    
| | | F | | | |    
| | | F | | | |    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F | | | |    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F | | | |    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F | | | |    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F | | | |    = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | F | | | |    = 0 , alphabet_size = 2 , total_length = 32} , self = 49 , parent = Nothing
| | | F | | | |    , duration = 0.423530039000 , status = Fail , start = 2025-09-03 12:05:11.679300844
| | | F | | | |    UTC , finish = 2025-09-03 12:05:12.102830883 UTC , thread_cap_info = ("ThreadId
| | | F | | | |    77", 3, False)}
| | | F | | | |    
| | | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | | | | | F  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | | | | | F  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | | | | | | F  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | | | | | F  = False}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | | | | | | | F  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | F  = 32} , self = 45 , parent = Nothing , duration = 0.148928443000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 12:05:11.760280387 UTC , finish = 2025-09-03
| | | | | | | | F  12:05:11.90920883 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| | | | | | | | F  
| | | | | | F | |  
| | | | | F   | |  
| | | | |     | F  
| | | | |     F    
| | | F |          
| | | F |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F |          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F |          = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F |          = 64} , self = 65 , parent = Nothing , duration = 0.157946584000 , status
| | | F |          = Fail , start = 2025-09-03 12:05:12.105974725 UTC , finish = 2025-09-03
| | | F |          12:05:12.263921309 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
| | | F |          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | F        = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | F        = 64} , self = 66 , parent = Nothing , duration = 0.267254479000 , status
| | | | | F        = Fail , start = 2025-09-03 12:05:12.186957479 UTC , finish = 2025-09-03
| | | | | F        12:05:12.454211958 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F      = 64} , self = 67 , parent = Nothing , duration = 0.259978567000 , status
| | | | | | F      = Fail , start = 2025-09-03 12:05:12.19929745 UTC , finish = 2025-09-03
| | | | | | F      12:05:12.459276017 UTC , thread_cap_info = ("ThreadId 103", 3, False)}
| | | | | | F      
F | | | | | |      
S | | | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | | |      = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
S | | | | | |      = 4 , total_length = 64} , self = 82 , parent = Nothing , duration = 0.452875820000
S | | | | | |      , status = Success , start = 2025-09-03 12:05:12.219993845 UTC , finish
S | | | | | |      = 2025-09-03 12:05:12.672869665 UTC , thread_cap_info = ("ThreadId 104",
S | | | | | |      3, False)}
S | | | | | |      
| | | F | | |      
| | | E | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E | | |      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | E | | |      = 4 , total_length = 64} , self = 84 , parent = Nothing , duration = 0.424698984000
| | | E | | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:12.285993392
| | | E | | |      UTC , finish = 2025-09-03 12:05:12.710692376 UTC , thread_cap_info = ("ThreadId
| | | E | | |      106", 3, False)}
| | | E | | |      
| | | | | F |      
| | | | | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S |      = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | S |      = 4 , total_length = 64} , self = 86 , parent = Nothing , duration = 0.268367055000
| | | | | S |      , status = Success , start = 2025-09-03 12:05:12.454313658 UTC , finish
| | | | | S |      = 2025-09-03 12:05:12.722680713 UTC , thread_cap_info = ("ThreadId 108",
| | | | | S |      3, False)}
| | | | | S |      
| | | | | | F      
| | | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | | E      = 4 , total_length = 64} , self = 91 , parent = Nothing , duration = 0.275328372000
| | | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:12.48002943
| | | | | | E      UTC , finish = 2025-09-03 12:05:12.755357802 UTC , thread_cap_info = ("ThreadId
| | | | | | E      110", 3, False)}
| | | | | | E      
| | | | F | |      
S | | |   | |      
  | | E   | |      
  | |     S |      
  | |       E      
E | |              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
E | |              , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
E | |              = 4 , total_length = 48} , self = 102 , parent = Nothing , duration = 0.170483642000
E | |              , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:12.828848287
E | |              UTC , finish = 2025-09-03 12:05:12.999331929 UTC , thread_cap_info = ("ThreadId
E | |              147", 3, False)}
E | |              
| | | F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F            = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | | F            = 3 , total_length = 40} , self = 104 , parent = Nothing , duration = 0.167177766000
| | | F            , status = Fail , start = 2025-09-03 12:05:12.859360859 UTC , finish =
| | | F            2025-09-03 12:05:13.026538625 UTC , thread_cap_info = ("ThreadId 149",
| | | F            3, False)}
| | | F            
E | | |            
  | | F            
  E |              
    E              
