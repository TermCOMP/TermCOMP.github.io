last 505 length 1968
CNF 505 vars 1968 clauses
last 522 length 2061
last 869 length 3464
CNF 522 vars 2061 clauses
CNF 869 vars 3464 clauses
last 723 length 3057
last 3907 length 17737
last 4442 length 22247
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1967, clauses: 7044
CNF 723 vars 3057 clauses
CNF 3907 vars 17737 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9674
CNF 4442 vars 22247 clauses
last 1967 length 7044
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6380, clauses: 26443
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29540
last 2607 length 9674
CNF 1967 vars 7044 clauses
last 6380 length 26443
last 7140 length 29540
CNF 2607 vars 9674 clauses
CNF 6380 vars 26443 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1967, clauses: 7044, status: Satisfied, time: 0.648144918s
CNF 7140 vars 29540 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9674, status: Satisfied, time: 0.501304864s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29540, status: Satisfied, time: 0.46204424s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 3 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [c, b] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [a, b, c] -> [a] {- Mirror (Input 2) -}
  [b, b, c] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [c, b, a] -> [a] {- Input 2 -}
  [c, b, b] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#] |-> [c#] {- DP (Top 1) (Input 0) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(3/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.025979731000
  min duration 0.026633695000
  total durat. 1.093167992000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 27
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 162}
    , self = 66
    , parent = Nothing
    , duration = 1.025979731000
    , status = Fail
    , start = 2025-09-03 11:29:56.56569771 UTC
    , finish = 2025-09-03 11:29:57.591677441 UTC
    , thread_cap_info = ("ThreadId 59", 0, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.018553026000
  min duration 0.970183320000
  total durat. 1.988736346000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 5
      , alphabet_size = 5
      , total_length = 46}
    , self = 70
    , parent = Nothing
    , duration = 1.018553026000
    , status = Success
    , start = 2025-09-03 11:29:56.69214856 UTC
    , finish = 2025-09-03 11:29:57.710701586 UTC
    , thread_cap_info = ("ThreadId 96", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.283637047000
  min duration 1.283637047000
  total durat. 1.283637047000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 79
    , parent = Nothing
    , duration = 1.283637047000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:29:56.576941289 UTC
    , finish = 2025-09-03 11:29:57.860578336 UTC
    , thread_cap_info = ("ThreadId 41", 2, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.123610896000
  min duration 1.123610896000
  total durat. 1.123610896000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 78
    , parent = Nothing
    , duration = 1.123610896000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:29:56.736921938 UTC
    , finish = 2025-09-03 11:29:57.860532834 UTC
    , thread_cap_info = ("ThreadId 98", 2, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 1
  max duration 1.292445430000
  min duration 1.292445430000
  total durat. 1.292445430000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 77
    , parent = Nothing
    , duration = 1.292445430000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:29:56.564521543 UTC
    , finish = 2025-09-03 11:29:57.856966973 UTC
    , thread_cap_info = ("ThreadId 22", 2, False)}
**************************************************
E                    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                    = False}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                    = 12} , self = 77 , parent = Nothing , duration = 1.292445430000 , status
E                    = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.564521543 UTC ,
E                    finish = 2025-09-03 11:29:57.856966973 UTC , thread_cap_info = ("ThreadId
E                    22", 2, False)}
E                    
| F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                  = 12} , self = 53 , parent = Nothing , duration = 0.116873720000 , status
| F                  = Fail , start = 2025-09-03 11:29:56.564561276 UTC , finish = 2025-09-03
| F                  11:29:56.681434996 UTC , thread_cap_info = ("ThreadId 40", 2, False)}
| F                  
| | F                Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F                , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F                = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F                False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F                = Size { num_rules = 27 , num_strict_rules = 27 , num_top_rules = 0 , num_weak_rules
| | F                = 0 , alphabet_size = 9 , total_length = 162} , self = 66 , parent = Nothing
| | F                , duration = 1.025979731000 , status = Fail , start = 2025-09-03 11:29:56.56569771
| | F                UTC , finish = 2025-09-03 11:29:57.591677441 UTC , thread_cap_info = ("ThreadId
| | F                59", 0, False)}
| | F                
| | | E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E              = 12} , self = 79 , parent = Nothing , duration = 1.283637047000 , status
| | | E              = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.576941289 UTC ,
| | | E              finish = 2025-09-03 11:29:57.860578336 UTC , thread_cap_info = ("ThreadId
| | | E              41", 2, False)}
| | | E              
| | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F            = 162} , self = 64 , parent = Nothing , duration = 0.321790638000 , status
| | | | F            = Fail , start = 2025-09-03 11:29:56.576987176 UTC , finish = 2025-09-03
| | | | F            11:29:56.898777814 UTC , thread_cap_info = ("ThreadId 70", 1, False)}
| | | | F            
| | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F          = 162} , self = 65 , parent = Nothing , duration = 0.481235587000 , status
| | | | | F          = Fail , start = 2025-09-03 11:29:56.597671132 UTC , finish = 2025-09-03
| | | | | F          11:29:57.078906719 UTC , thread_cap_info = ("ThreadId 72", 1, False)}
| | | | | F          
| | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | F        = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | | | F        = 46} , self = 63 , parent = Nothing , duration = 0.201444445000 , status
| | | | | | F        = Fail , start = 2025-09-03 11:29:56.655524906 UTC , finish = 2025-09-03
| | | | | | F        11:29:56.856969351 UTC , thread_cap_info = ("ThreadId 93", 3, False)}
| | | | | | F        
| | | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | | S      = 4 , total_length = 31} , self = 67 , parent = Nothing , duration = 0.970183320000
| | | | | | | S      , status = Success , start = 2025-09-03 11:29:56.667085125 UTC , finish
| | | | | | | S      = 2025-09-03 11:29:57.637268445 UTC , thread_cap_info = ("ThreadId 91",
| | | | | | | S      3, False)}
| | | | | | | S      
| F | | | | | |      
| S | | | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | | | | |      = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| S | | | | | |      alphabet_size = 5 , total_length = 46} , self = 70 , parent = Nothing ,
| S | | | | | |      duration = 1.018553026000 , status = Success , start = 2025-09-03 11:29:56.69214856
| S | | | | | |      UTC , finish = 2025-09-03 11:29:57.710701586 UTC , thread_cap_info = ("ThreadId
| S | | | | | |      96", 3, False)}
| S | | | | | |      
| | | | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | | | E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | | | E    = 4 , total_length = 31} , self = 69 , parent = Nothing , duration = 0.952053530000
| | | | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.724896195
| | | | | | | | E    UTC , finish = 2025-09-03 11:29:57.676949725 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E    97", 3, False)}
| | | | | | | | E    
| | | | | | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | E  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | E  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | | | | E  = 12} , self = 78 , parent = Nothing , duration = 1.123610896000 , status
| | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 11:29:56.736921938 UTC ,
| | | | | | | | | E  finish = 2025-09-03 11:29:57.860532834 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | E  98", 2, False)}
| | | | | | | | | E  
| | | | | | F | | |  
| | | | | | S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | S | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | | | | S | | |  = 5 , total_length = 46} , self = 73 , parent = Nothing , duration = 0.844601944000
| | | | | | S | | |  , status = Success , start = 2025-09-03 11:29:56.877101313 UTC , finish
| | | | | | S | | |  = 2025-09-03 11:29:57.721703257 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | S | | |  3, False)}
| | | | | | S | | |  
| | | | F | | | | |  
| | | |   F | | | |  
| | F |     | | | |  
| |   |     | S | |  
| |   |     |   E |  
| S   |     |     |  
|     |     S     |  
E     |           |  
      |           E  
      E              
