last 609 length 2401
last 679 length 2683
CNF 609 vars 2401 clauses
last 550 length 2227
CNF 679 vars 2683 clauses
CNF 550 vars 2227 clauses
last 564 length 2276
CNF 564 vars 2276 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2636, clauses: 9513
last 2636 length 9513
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7911
last 4070 length 18131
last 4943 length 24090
CNF 2636 vars 9513 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7507, clauses: 31025
last 2216 length 7911
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29357
CNF 4070 vars 18131 clauses
CNF 4943 vars 24090 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2636, clauses: 9513, status: Unsatisfied, time: 0.230736302s
last 7507 length 31025
CNF 2216 vars 7911 clauses
last 7086 length 29357
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4824, clauses: 18981
CNF 7086 vars 29357 clauses
CNF 7507 vars 31025 clauses
last 4824 length 18981
CNF 4824 vars 18981 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7911, status: Unsatisfied, time: 0.342739764s
[Info] pool sizes (success) 52499 seen 21087 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29357, status: Unsatisfied, time: 0.21228021s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4489, clauses: 17660
last 4489 length 17660
CNF 4489 vars 17660 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [b, b, b, b, c, c]
to
  [b, b, b, b, b, c, c, a, a, a]
via 17 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [b, b, c] -> [c, c, a, a, a] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [b, b, b, b, c, c], via = [(Step   { rule = 2, position = 2}, [b, b, c, c, a, a, a, c]), (Step   { rule = 1, position = 5}, [b, b, c, c, a, b, a, c]), (Step   { rule = 1, position = 6}, [b, b, c, c, a, b, b, c]), (Step   { rule = 1, position = 4}, [b, b, c, c, b, b, b, c]), (Step   { rule = 2, position = 0}, [c, c, a, a, a, c, b, b, b, c]), (Step   { rule = 3, position = 0}, [c, a, a, a, c, b, b, b, c]), (Step   { rule = 3, position = 0}, [a, a, a, c, b, b, b, c]), (Step   { rule = 1, position = 2}, [a, a, b, c, b, b, b, c]), (Step   { rule = 1, position = 1}, [a, b, b, c, b, b, b, c]), (Step   { rule = 1, position = 0}, [b, b, b, c, b, b, b, c]), (Step   { rule = 2, position = 1}, [b, c, c, a, a, a, b, b, b, c]), (Step   { rule = 3, position = 1}, [b, c, a, a, a, b, b, b, c]), (Step   { rule = 3, position = 1}, [b, a, a, a, b, b, b, c]), (Step   { rule = 1, position = 3}, [b, a, a, b, b, b, b, c]), (Step   { rule = 1, position = 2}, [b, a, b, b, b, b, b, c]), (Step   { rule = 1, position = 1}, [b, b, b, b, b, b, b, c]), (Step   { rule = 2, position = 5}, [b, b, b, b, b, c, c, a, a, a])], to = [b, b, b, b, b, c, c, a, a, a]}

**************************************************
skeleton: (4,3)\Loop{17}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S              , closure = Forward\n , start_strict_only = True\n , max_closure_length
S              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S              = 12} , self = 69 , parent = Nothing , duration = 0.729505278000 , status
S              = Success , start = 2025-09-03 11:14:18.142696624 UTC , finish = 2025-09-03
S              11:14:18.872201902 UTC , thread_cap_info = ("ThreadId 35", 2, False)}
S              
| F            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| F            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| F            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| F            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| F            = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| F            = 0 , alphabet_size = 9 , total_length = 180} , self = 64 , parent = Nothing
| F            , duration = 0.443675695000 , status = Fail , start = 2025-09-03 11:14:18.20865309
| F            UTC , finish = 2025-09-03 11:14:18.652328785 UTC , thread_cap_info = ("ThreadId
| F            67", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 180} , self = 65 , parent = Nothing , duration = 0.484596143000 , status
| | F          = Fail , start = 2025-09-03 11:14:18.225267238 UTC , finish = 2025-09-03
| | F          11:14:18.709863381 UTC , thread_cap_info = ("ThreadId 71", 2, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 180} , self = 67 , parent = Nothing , duration = 0.502467591000 , status
| | | F        = Fail , start = 2025-09-03 11:14:18.245272679 UTC , finish = 2025-09-03
| | | F        11:14:18.74774027 UTC , thread_cap_info = ("ThreadId 73", 2, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | F      = 37} , self = 55 , parent = Nothing , duration = 0.102126331000 , status
| | | | F      = Fail , start = 2025-09-03 11:14:18.263350641 UTC , finish = 2025-09-03
| | | | F      11:14:18.365476972 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | | F      
| | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F    = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | | | F    alphabet_size = 5 , total_length = 45} , self = 66 , parent = Nothing ,
| | | | | F    duration = 0.460711264000 , status = Fail , start = 2025-09-03 11:14:18.265478919
| | | | | F    UTC , finish = 2025-09-03 11:14:18.726190183 UTC , thread_cap_info = ("ThreadId
| | | | | F    95", 0, False)}
| | | | | F    
| | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | | | F  alphabet_size = 4 , total_length = 37} , self = 68 , parent = Nothing ,
| | | | | | F  duration = 0.534485576000 , status = Fail , start = 2025-09-03 11:14:18.290785322
| | | | | | F  UTC , finish = 2025-09-03 11:14:18.825270898 UTC , thread_cap_info = ("ThreadId
| | | | | | F  96", 0, False)}
| | | | | | F  
| | | | F | |  
| | | | F | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | F | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | F | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | F | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | F | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | F | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | F | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | | F | |  = 4 , total_length = 37} , self = 70 , parent = Nothing , duration = 0.508084437000
| | | | F | |  , status = Fail , start = 2025-09-03 11:14:18.365543772 UTC , finish =
| | | | F | |  2025-09-03 11:14:18.873628209 UTC , thread_cap_info = ("ThreadId 101",
| | | | F | |  0, False)}
| | | | F | |  
| F | | | | |  
|   F | | | |  
|     | | F |  
|     F |   |  
|       |   F  
S       |      
        F      
