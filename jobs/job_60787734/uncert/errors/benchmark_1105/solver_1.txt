last 575 length 2293
CNF 575 vars 2293 clauses
last 565 length 2198
last 539 length 2196
CNF 565 vars 2198 clauses
CNF 539 vars 2196 clauses
last 486 length 1952
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2246, clauses: 8106
CNF 486 vars 1952 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7911
last 2246 length 8106
last 6019 length 41453
last 5605 length 29969
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7086, clauses: 29357
last 2216 length 7911
CNF 2246 vars 8106 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6800, clauses: 28151
CNF 6019 vars 41453 clauses
CNF 5605 vars 29969 clauses
last 7086 length 29357
CNF 2216 vars 7911 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2246, clauses: 8106, status: Satisfied, time: 0.332294426s
last 6800 length 28151
CNF 7086 vars 29357 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2216, clauses: 7911, status: Satisfied, time: 0.539011019s
last 454 length 1768
CNF 454 vars 1768 clauses
last 467 length 1885
CNF 467 vars 1885 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2138, clauses: 7623
last 2138 length 7623
CNF 2138 vars 7623 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 4 strict rules and 8 weak rules on 5 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b, c] -> [c, c, a, b, a] {- Input 2 -}
  [c] -> [] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a] -> [b] {- Input 1 -}
  [a, b, c] -> [c, c, a, b, a] {- Input 2 -}
  [a, c] -> [a] {- Input 3 -}
  [b, c] -> [b] {- Input 3 -}
  [c, c] -> [c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [a] -> [b] {- Mirror (Input 1) -}
  [c, b, a] -> [a, b, a, c, c] {- Mirror (Input 2) -}
  [c, a] -> [a] {- Mirror (Input 3) -}
  [c, b] -> [b] {- Mirror (Input 3) -}
  [c, c] -> [c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a, b, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, b, a] |-> [a#, b, a, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, a] |-> [a#, c, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, b, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, b, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a, b, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, b, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, b, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, b, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a, b, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 14A 15A 15A - \
        | 14A 15A 15A - |
        | 14A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [c, b, a] ->= [a, b, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [c, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee(4/8,5)\Weight\EDG(2/8,4)\Matrix{\Arctic}{3}(0/8,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.782265998000
  min duration 0.562977512000
  total durat. 1.345243510000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.778184803000
  min duration 0.652603782000
  total durat. 1.430788585000
**************************************************
F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
F                = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                = 180} , self = 65 , parent = Nothing , duration = 0.666028179000 , status
F                = Fail , start = 2025-09-03 11:00:25.90467314 UTC , finish = 2025-09-03
F                11:00:26.570701319 UTC , thread_cap_info = ("ThreadId 61", 0, False)}
F                
| F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F              = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 180} , self = 64 , parent = Nothing , duration = 0.620503932000 , status
| F              = Fail , start = 2025-09-03 11:00:25.910668167 UTC , finish = 2025-09-03
| F              11:00:26.531172099 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F            = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | F            = 38} , self = 59 , parent = Nothing , duration = 0.124291233000 , status
| | F            = Fail , start = 2025-09-03 11:00:26.003395819 UTC , finish = 2025-09-03
| | F            11:00:26.127687052 UTC , thread_cap_info = ("ThreadId 85", 2, False)}
| | F            
| | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S          = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | S          alphabet_size = 4 , total_length = 37} , self = 86 , parent = Nothing ,
| | | S          duration = 0.778184803000 , status = Success , start = 2025-09-03 11:00:26.012752022
| | | S          UTC , finish = 2025-09-03 11:00:26.790936825 UTC , thread_cap_info = ("ThreadId
| | | S          89", 2, False)}
| | | S          
| | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S        = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | S        alphabet_size = 4 , total_length = 38} , self = 67 , parent = Nothing ,
| | | | S        duration = 0.652603782000 , status = Success , start = 2025-09-03 11:00:26.031088742
| | | | S        UTC , finish = 2025-09-03 11:00:26.683692524 UTC , thread_cap_info = ("ThreadId
| | | | S        90", 2, False)}
| | | | S        
| | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | | | E      = 4 , total_length = 37} , self = 90 , parent = Nothing , duration = 0.782265998000
| | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:26.050477534
| | | | | E      UTC , finish = 2025-09-03 11:00:26.832743532 UTC , thread_cap_info = ("ThreadId
| | | | | E      91", 2, False)}
| | | | | E      
| | F | | |      
| | E | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E | | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | E | | |      = 4 , total_length = 38} , self = 69 , parent = Nothing , duration = 0.562977512000
| | E | | |      , status = Except "AsyncCancelled" , start = 2025-09-03 11:00:26.127708726
| | E | | |      UTC , finish = 2025-09-03 11:00:26.690686238 UTC , thread_cap_info = ("ThreadId
| | E | | |      97", 2, False)}
| | E | | |      
| | | | | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F    = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | | | | F    = 0 , alphabet_size = 9 , total_length = 180} , self = 63 , parent = Nothing
| | | | | | F    , duration = 0.131893434000 , status = Fail , start = 2025-09-03 11:00:26.170677949
| | | | | | F    UTC , finish = 2025-09-03 11:00:26.302571383 UTC , thread_cap_info = ("ThreadId
| | | | | | F    102", 1, False)}
| | | | | | F    
| | | | | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F  = Size { num_rules = 36 , num_strict_rules = 36 , num_top_rules = 0 , num_weak_rules
| | | | | | | F  = 0 , alphabet_size = 9 , total_length = 180} , self = 66 , parent = Nothing
| | | | | | | F  , duration = 0.492124811000 , status = Fail , start = 2025-09-03 11:00:26.190896625
| | | | | | | F  UTC , finish = 2025-09-03 11:00:26.683021436 UTC , thread_cap_info = ("ThreadId
| | | | | | | F  104", 1, False)}
| | | | | | | F  
| | | | | | F |  
| F | | | |   |  
F   | | | |   |  
    | | | |   F  
    | | S |      
    E |   |      
      S   |      
          E      
