last 9138 length 54522
CNF 9138 vars 54522 clauses
last 8454 length 65264
CNF 8454 vars 65264 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       Drop
SRS with 1 rules on 2 letters       mirror
SRS with 1 rules on 2 letters       Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 130 states

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a, a, a, a, a, a, a] -> [ a , a , a , a , a , a , a , a , a , b , a , a , a , b ] {- Input 0 -}
reason
  Drop
    property Termination
    has value Just True
    for SRS
      [b, a, a, a, a, a, a, a] -> [ a , a , a , a , a , a , a , b , a , a , a , b ] {- Dropped 2 0 (Input 0) -}
    reason
      mirror
       property Termination
    has value Just True
    for SRS
      [a, a, a, a, a, a, a, b] -> [ b , a , a , a , b , a , a , a , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
    reason
      Matchbound
        Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 130 states

   property Termination
has value Just True
for SRS
  [b, a, a, a, a, a, a, a] -> [ a , a , a , a , a , a , a , b , a , a , a , b ] {- Dropped 2 0 (Input 0) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a, a, a, a, a, b] -> [ b , a , a , a , b , a , a , a , a , a , a , a ] {- Mirror (Dropped 2 0 (Input 0)) -}
reason
  Matchbound
    Matchbound   { method = RFC, implementation = Exact, cpf_state_encoding = Encoding   { base = 10, order = MSB_First}, max_size = Just 10000, max_height = Just 5, initial = Paths, verbose = False, tracing = False, draw = False, cpf = False} matchbound 1 certified by automaton with 130 states

**************************************************
skeleton: (1,2)\Drop{2}{0}\Mirror(1,2)\Rfcmatchbound{1}[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.122385950000
  min duration 1.122385950000
  total durat. 1.122385950000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 104}
    , self = 75
    , parent = Nothing
    , duration = 1.122385950000
    , status = Fail
    , start = 2025-09-03 12:06:53.453662638 UTC
    , finish = 2025-09-03 12:06:54.576048588 UTC
    , thread_cap_info = ("ThreadId 35", 0, False)}
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 6
  max duration 1.460385441000
  min duration 0.243581573000
  total durat. 4.403219127000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 22}
    , self = 76
    , parent = Nothing
    , duration = 1.172715317000
    , status = Fail
    , start = 2025-09-03 12:06:53.574009398 UTC
    , finish = 2025-09-03 12:06:54.746724715 UTC
    , thread_cap_info = ("ThreadId 96", 1, False)}
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 24}
    , self = 81
    , parent = Nothing
    , duration = 1.460385441000
    , status = Fail
    , start = 2025-09-03 12:06:53.874155924 UTC
    , finish = 2025-09-03 12:06:55.334541365 UTC
    , thread_cap_info = ("ThreadId 125", 1, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 3
  max duration 1.744520435000
  min duration 0.980010585000
  total durat. 4.104535167000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 20}
    , self = 83
    , parent = Nothing
    , duration = 1.380004147000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:54.073642196 UTC
    , finish = 2025-09-03 12:06:55.453646343 UTC
    , thread_cap_info = ("ThreadId 130", 1, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 22}
    , self = 85
    , parent = Nothing
    , duration = 1.744520435000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.809133681 UTC
    , finish = 2025-09-03 12:06:55.553654116 UTC
    , thread_cap_info = ("ThreadId 121", 1, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 3
  max duration 1.580208416000
  min duration 1.079670843000
  total durat. 3.999472906000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 20}
    , self = 79
    , parent = Nothing
    , duration = 1.079670843000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:54.05398829 UTC
    , finish = 2025-09-03 12:06:55.133659133 UTC
    , thread_cap_info = ("ThreadId 129", 1, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 24}
    , self = 84
    , parent = Nothing
    , duration = 1.339593647000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:54.114063315 UTC
    , finish = 2025-09-03 12:06:55.453656962 UTC
    , thread_cap_info = ("ThreadId 131", 1, False)}
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 22}
    , self = 82
    , parent = Nothing
    , duration = 1.580208416000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.773647256 UTC
    , finish = 2025-09-03 12:06:55.353855672 UTC
    , thread_cap_info = ("ThreadId 120", 1, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = False}"
  total number 4
  max duration 2.146866309000
  min duration 1.133092059000
  total durat. 6.517919761000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 20}
    , self = 77
    , parent = Nothing
    , duration = 1.133092059000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.613639947 UTC
    , finish = 2025-09-03 12:06:54.746732006 UTC
    , thread_cap_info = ("ThreadId 90", 1, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 22}
    , self = 78
    , parent = Nothing
    , duration = 1.578653201000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.514988995 UTC
    , finish = 2025-09-03 12:06:55.093642196 UTC
    , thread_cap_info = ("ThreadId 82", 1, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 24}
    , self = 80
    , parent = Nothing
    , duration = 1.659308192000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.634347935 UTC
    , finish = 2025-09-03 12:06:55.293656127 UTC
    , thread_cap_info = ("ThreadId 107", 1, False)}
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 24}
    , self = 87
    , parent = Nothing
    , duration = 2.146866309000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:06:53.44679748 UTC
    , finish = 2025-09-03 12:06:55.593663789 UTC
    , thread_cap_info = ("ThreadId 42", 1, False)}
**************************************************
F                                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                                = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F                                = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F                                = 104} , self = 70 , parent = Nothing , duration = 0.760272469000 , status
F                                = Fail , start = 2025-09-03 12:06:53.434526567 UTC , finish = 2025-09-03
F                                12:06:54.194799036 UTC , thread_cap_info = ("ThreadId 33", 0, False)}
F                                
| E                              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| E                              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| E                              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| E                              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| E                              = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E                              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E                              = 24} , self = 87 , parent = Nothing , duration = 2.146866309000 , status
| E                              = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.44679748 UTC ,
| E                              finish = 2025-09-03 12:06:55.593663789 UTC , thread_cap_info = ("ThreadId
| E                              42", 1, False)}
| E                              
| | F                            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F                            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F                            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F                            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F                            = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | F                            = 0 , alphabet_size = 4 , total_length = 104} , self = 57 , parent = Nothing
| | F                            , duration = 0.593051021000 , status = Fail , start = 2025-09-03 12:06:53.448710575
| | F                            UTC , finish = 2025-09-03 12:06:54.041761596 UTC , thread_cap_info = ("ThreadId
| | F                            68", 3, False)}
| | F                            
| | | F                          Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F                          , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F                          = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F                          False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F                          = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules = 0 , num_weak_rules
| | | F                          = 0 , alphabet_size = 4 , total_length = 104} , self = 52 , parent = Nothing
| | | F                          , duration = 0.401805013000 , status = Fail , start = 2025-09-03 12:06:53.448715189
| | | F                          UTC , finish = 2025-09-03 12:06:53.850520202 UTC , thread_cap_info = ("ThreadId
| | | F                          70", 3, False)}
| | | F                          
| | | | F                        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F                        = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F                        = 104} , self = 75 , parent = Nothing , duration = 1.122385950000 , status
| | | | F                        = Fail , start = 2025-09-03 12:06:53.453662638 UTC , finish = 2025-09-03
| | | | F                        12:06:54.576048588 UTC , thread_cap_info = ("ThreadId 35", 0, False)}
| | | | F                        
| | | | | E                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | E                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | E                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | E                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | E                      = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | E                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | E                      = 22} , self = 78 , parent = Nothing , duration = 1.578653201000 , status
| | | | | E                      = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.514988995 UTC ,
| | | | | E                      finish = 2025-09-03 12:06:55.093642196 UTC , thread_cap_info = ("ThreadId
| | | | | E                      82", 1, False)}
| | | | | E                      
| | | | | | F                    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | F                    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | F                    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | F                    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | F                    = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | F                    = 0 , alphabet_size = 2 , total_length = 22} , self = 76 , parent = Nothing
| | | | | | F                    , duration = 1.172715317000 , status = Fail , start = 2025-09-03 12:06:53.574009398
| | | | | | F                    UTC , finish = 2025-09-03 12:06:54.746724715 UTC , thread_cap_info = ("ThreadId
| | | | | | F                    96", 1, False)}
| | | | | | F                    
| | | | | | | F                  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F                  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F                  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F                  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F                  = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F                  = 0 , alphabet_size = 2 , total_length = 22} , self = 51 , parent = Nothing
| | | | | | | F                  , duration = 0.243581573000 , status = Fail , start = 2025-09-03 12:06:53.593650625
| | | | | | | F                  UTC , finish = 2025-09-03 12:06:53.837232198 UTC , thread_cap_info = ("ThreadId
| | | | | | | F                  98", 1, False)}
| | | | | | | F                  
| | | | | | | | E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | | | E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | | | E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | | | E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | | | E                = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | E                = 20} , self = 77 , parent = Nothing , duration = 1.133092059000 , status
| | | | | | | | E                = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.613639947 UTC ,
| | | | | | | | E                finish = 2025-09-03 12:06:54.746732006 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E                90", 1, False)}
| | | | | | | | E                
| | | | | | | | | E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| | | | | | | | | E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| | | | | | | | | E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| | | | | | | | | E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| | | | | | | | | E              = False}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | E              = 24} , self = 80 , parent = Nothing , duration = 1.659308192000 , status
| | | | | | | | | E              = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.634347935 UTC ,
| | | | | | | | | E              finish = 2025-09-03 12:06:55.293656127 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | E              107", 1, False)}
| | | | | | | | | E              
| | | | | | | | | | E            Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | E            , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | E            = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | E            False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | E            = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | E            = 0 , alphabet_size = 2 , total_length = 20} , self = 74 , parent = Nothing
| | | | | | | | | | E            , duration = 0.859938352000 , status = Except "AsyncCancelled" , start
| | | | | | | | | | E            = 2025-09-03 12:06:53.71371498 UTC , finish = 2025-09-03 12:06:54.573653332
| | | | | | | | | | E            UTC , thread_cap_info = ("ThreadId 115", 1, False)}
| | | | | | | | | | E            
| | | | | | | | | | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | E          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | E          = 22} , self = 82 , parent = Nothing , duration = 1.580208416000 , status
| | | | | | | | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.773647256 UTC ,
| | | | | | | | | | | E          finish = 2025-09-03 12:06:55.353855672 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | E          120", 1, False)}
| | | | | | | | | | | E          
| | | | | | | | | | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | E        = 22} , self = 85 , parent = Nothing , duration = 1.744520435000 , status
| | | | | | | | | | | | E        = Except "AsyncCancelled" , start = 2025-09-03 12:06:53.809133681 UTC ,
| | | | | | | | | | | | E        finish = 2025-09-03 12:06:55.553654116 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | E        121", 1, False)}
| | | | | | | | | | | | E        
| | | | | | | F | | | | |        
| | | F | | |   | | | | |        
| | | F | | |   | | | | |        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | F | | |   | | | | |        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | F | | |   | | | | |        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | F | | |   | | | | |        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | F | | |   | | | | |        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | F | | |   | | | | |        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | F | | |   | | | | |        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | F | | |   | | | | |        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | F | | |   | | | | |        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | F | | |   | | | | |        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | F | | |   | | | | |        = 24} , self = 65 , parent = Nothing , duration = 0.259521413000 , status
| | | F | | |   | | | | |        = Fail , start = 2025-09-03 12:06:53.874145376 UTC , finish = 2025-09-03
| | | F | | |   | | | | |        12:06:54.133666789 UTC , thread_cap_info = ("ThreadId 124", 1, False)}
| | | F | | |   | | | | |        
| | | | | | | F | | | | |        Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | F | | | | |        , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | F | | | | |        = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | F | | | | |        False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | F | | | | |        = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | F | | | | |        = 0 , alphabet_size = 2 , total_length = 24} , self = 81 , parent = Nothing
| | | | | | | F | | | | |        , duration = 1.460385441000 , status = Fail , start = 2025-09-03 12:06:53.874155924
| | | | | | | F | | | | |        UTC , finish = 2025-09-03 12:06:55.334541365 UTC , thread_cap_info = ("ThreadId
| | | | | | | F | | | | |        125", 1, False)}
| | | | | | | F | | | | |        
| | | | | | | | | | | | | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | | | | | | | | | | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | | | | | | | | | | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | | | | | | | | | | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | | | | | | | | | | F      = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules
| | | | | | | | | | | | | F      = 0 , alphabet_size = 2 , total_length = 24} , self = 73 , parent = Nothing
| | | | | | | | | | | | | F      , duration = 0.531680762000 , status = Fail , start = 2025-09-03 12:06:53.893655585
| | | | | | | | | | | | | F      UTC , finish = 2025-09-03 12:06:54.425336347 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | F      127", 1, False)}
| | | | | | | | | | | | | F      
| | F | | | | | | | | | | |      
| | E | | | | | | | | | | |      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E | | | | | | | | | | |      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E | | | | | | | | | | |      = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E | | | | | | | | | | |      , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E | | | | | | | | | | |      max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E | | | | | | | | | | |      [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E | | | | | | | | | | |      string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E | | | | | | | | | | |      , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E | | | | | | | | | | |      = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | E | | | | | | | | | | |      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | E | | | | | | | | | | |      = 20} , self = 79 , parent = Nothing , duration = 1.079670843000 , status
| | E | | | | | | | | | | |      = Except "AsyncCancelled" , start = 2025-09-03 12:06:54.05398829 UTC ,
| | E | | | | | | | | | | |      finish = 2025-09-03 12:06:55.133659133 UTC , thread_cap_info = ("ThreadId
| | E | | | | | | | | | | |      129", 1, False)}
| | E | | | | | | | | | | |      
| | | | | | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | E    = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | | E    = 20} , self = 83 , parent = Nothing , duration = 1.380004147000 , status
| | | | | | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:06:54.073642196 UTC ,
| | | | | | | | | | | | | | E    finish = 2025-09-03 12:06:55.453646343 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | E    130", 1, False)}
| | | | | | | | | | | | | | E    
| | | | | | | | | | | | | | | E  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | | | | | | E  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | | | | | | E  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | | | | | | E  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | | | | | | E  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | | | | | | E  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | | | | | | E  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | | | | | | E  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | | | | | | E  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | | | | | | | | | | | | E  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | | | | | | E  = 24} , self = 84 , parent = Nothing , duration = 1.339593647000 , status
| | | | | | | | | | | | | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:06:54.114063315 UTC ,
| | | | | | | | | | | | | | | E  finish = 2025-09-03 12:06:55.453656962 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | | | | | E  131", 1, False)}
| | | | | | | | | | | | | | | E  
| | | F | | | | | | | | | | | |  
F | |   | | | | | | | | | | | |  
  | |   | | | | | | | | | F | |  
  | |   | | | | | | E | |   | |  
  | |   F | | | | |   | |   | |  
E | |     | | | | |   | |   | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E | |     | | | | |   | |   | |  , closure = Backward\n , start_strict_only = True\n , max_closure_length
E | |     | | | | |   | |   | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E | |     | | | | |   | |   | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E | |     | | | | |   | |   | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E | |     | | | | |   | |   | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E | |     | | | | |   | |   | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E | |     | | | | |   | |   | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E | |     | | | | |   | |   | |  = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
E | |     | | | | |   | |   | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E | |     | | | | |   | |   | |  = 24} , self = 86 , parent = Nothing , duration = 0.980010585000 , status
E | |     | | | | |   | |   | |  = Except "AsyncCancelled" , start = 2025-09-03 12:06:54.613649734 UTC ,
E | |     | | | | |   | |   | |  finish = 2025-09-03 12:06:55.593660319 UTC , thread_cap_info = ("ThreadId
E | |     | | | | |   | |   | |  151", 1, False)}
E | |     | | | | |   | |   | |  
| | |     | F | | |   | |   | |  
| | |     |   | E |   | |   | |  
| | |     E   |   |   | |   | |  
| | E         |   |   | |   | |  
| |           |   E   | |   | |  
| |           F       | |   | |  
| |                   E |   | |  
| |                     |   E |  
| |                     |     E  
| |                     E        
E |                              
  E                              
