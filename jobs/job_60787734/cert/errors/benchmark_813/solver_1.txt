Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16786, clauses: 72976
last 16786 length 72976
CNF 16786 vars 72976 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16786, clauses: 72976, status: Satisfied, time: 0.591080508s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24077, clauses: 114489
last 24077 length 114489
CNF 24077 vars 114489 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24077, clauses: 114489, status: Satisfied, time: 0.692156562s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16156, clauses: 69076
last 16156 length 69076
CNF 16156 vars 69076 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16156, clauses: 69076, status: Satisfied, time: 1.04177488s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17449, clauses: 74947
last 17449 length 74947
CNF 17449 vars 74947 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17449, clauses: 74947, status: Satisfied, time: 0.822648136s
**************************************************
summary
**************************************************
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 114 strict rules and 7 weak rules on 6 letters       EDG
SRS with 54 strict rules and 7 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 29 strict rules and 7 weak rules on 6 letters       EDG
SRS with 29 strict rules and 7 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 7 weak rules on 6 letters       weights
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [1, 2, 1, 1, 0, 0, 1, 0, 2, 1, 1, 0, 2] -> [ 1 , 2 , 2 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 2 , 0 , 1 , 0 , 0 , 2 , 2 ] {- Input 0 -}
  [2, 0, 1, 2, 1, 2, 1, 2, 1, 0, 0, 1, 0] -> [ 2 , 2 , 0 , 0 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 2 , 0 ] {- Input 1 -}
  [2, 1, 0, 0, 2, 1, 1, 1, 0, 1, 2, 2, 0] -> [ 0 , 0 , 2 , 1 , 0 , 0 , 1 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 2 , 1 , 0 ] {- Input 2 -}
  [2, 2, 0, 0, 1, 0, 2, 1, 1, 1, 0, 0, 1] -> [ 2 , 2 , 1 , 1 , 2 , 0 , 0 , 1 , 2 , 2 , 0 , 2 , 0 , 0 , 2 , 2 , 2 ] {- Input 3 -}
  [2, 2, 1, 0, 1, 0, 1, 1, 0, 0, 0, 2, 0] -> [ 0 , 2 , 2 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 2 , 0 ] {- Input 4 -}
  [2, 2, 1, 1, 0, 2, 0, 0, 0, 2, 2, 0, 0] -> [ 0 , 0 , 1 , 2 , 0 , 0 , 0 , 2 , 2 , 0 , 1 , 2 , 2 , 2 , 2 , 0 , 0 ] {- Input 5 -}
  [2, 2, 2, 1, 0, 2, 0, 0, 1, 0, 1, 0, 2] -> [ 0 , 2 , 2 , 0 , 0 , 2 , 2 , 2 , 1 , 2 , 0 , 0 , 2 , 2 , 0 , 2 , 2 ] {- Input 6 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] -> [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- Mirror (Input 0) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] -> [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- Mirror (Input 1) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] -> [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- Mirror (Input 2) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] -> [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- Mirror (Input 3) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] -> [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- Mirror (Input 4) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] -> [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- Mirror (Input 5) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] -> [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- Mirror (Input 6) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 1# , 1 , 2 , 2 ] {- DP (Top 13) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 1# , 2 , 2 ] {- DP (Top 14) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 1# , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 9) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 1 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 7) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 0) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 0# , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 11) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 0# , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 6) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 0# , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 4) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 0# , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 10) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 0# , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 3) (Mirror (Input 3)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 1# , 2 , 2 , 1 ] {- DP (Top 13) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 1# , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 4) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 1# , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 8) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 7) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 1 ] {- DP (Top 14) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 6) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 0) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 10) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 1 , 2 , 2 , 1 ] {- DP (Top 12) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 3) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 5) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 9) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 11) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 0# , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 2) (Mirror (Input 0)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 1# , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 8) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 7) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 9) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 ] {- DP (Top 14) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 0) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 3) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 10) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 4) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 11) (Mirror (Input 6)) -}
  [ 2# , 0 , 1 , 0 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 6) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 2 , 2 , 0 ] {- DP (Top 13) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 2) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 5) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 0 , 2 , 2 , 0 ] {- DP (Top 12) (Mirror (Input 6)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 9) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 3) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 10) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 4) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 11) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 1# , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 2 ] {- DP (Top 15) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 1) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 0 , 0 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 2 , 2 ] {- DP (Top 14) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 7) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 2 , 2 ] {- DP (Top 13) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 6) (Mirror (Input 1)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 1# , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 9) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 1# , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 1) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 1# , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 3) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 1# , 2 , 0 , 0 ] {- DP (Top 13) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 1# , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 10) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 2) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 7) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 6) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 4) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 2)) -}
  [ 0# , 2 , 2 , 1 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 1 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 0) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 1 , 2 , 0 , 0 ] {- DP (Top 12) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 11) (Mirror (Input 2)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 4) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 5) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 6) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 2 , 2 , 0 ] {- DP (Top 13) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 10) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 1# , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 7) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 2 , 0 ] {- DP (Top 14) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 4)) -}
  [ 0# , 2 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 3) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 1 , 2 , 2 , 0 ] {- DP (Top 12) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 9) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 0) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 2) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 11) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 0# , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 8) (Mirror (Input 4)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 1# , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 6) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 1# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 0 ] {- DP (Top 13) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 4) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 3) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 2) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 9) (Mirror (Input 5)) -}
  [ 0# , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 0 , 1 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 2 , 1 , 0 , 0 ] {- DP (Top 12) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 1) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 7) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 11) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 0) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 10) (Mirror (Input 5)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 1# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 5)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 1 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 3)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 7) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 9) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 ] {- DP (Top 14) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 0) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 3) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 10) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 6)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 7) (Mirror (Input 0)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 4) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 11) (Mirror (Input 6)) -}
  [ 2# , 0 , 1 , 0 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 6)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 1)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 0 , 2 , 2 , 0 ] {- DP (Top 12) (Mirror (Input 6)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 0 ] {- DP (Top 13) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 4) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 3) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 2) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 9) (Mirror (Input 5)) -}
  [ 0# , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 0 , 1 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 5)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 2 ] {- DP (Top 15) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 1) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 0 , 0 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 2 , 2 ] {- DP (Top 14) (Mirror (Input 1)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 2) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 7) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 6) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 4) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 2)) -}
  [ 0# , 2 , 2 , 1 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 1 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 2)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 2 , 2 ] {- DP (Top 13) (Mirror (Input 1)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 5)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 2)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 2 , 0 ] {- DP (Top 14) (Mirror (Input 4)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 4)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 1 ] {- DP (Top 14) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 6) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 0) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 10) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 4)) -}
  [ 0# , 2 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 4)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 7) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 0) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 3)) -}
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 0
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 1#
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
  ( 2#
  , Wk  / 9A 12A 12A - \
        | 9A 12A 12A - |
        | 9A 12A 12A - |
        \ -  -   -   - / )
  ( 0#
  , Wk  / 12A 12A 12A - \
        | 12A 12A 12A - |
        | 12A 12A 12A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 1# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 5)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 6)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 7) (Mirror (Input 0)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 4) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 11) (Mirror (Input 6)) -}
  [ 2# , 0 , 1 , 0 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 6)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 1)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 0 , 2 , 2 , 0 ] {- DP (Top 12) (Mirror (Input 6)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 0 ] {- DP (Top 13) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 9) (Mirror (Input 5)) -}
  [ 0# , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 0 , 1 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 5)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 0 , 0 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 2 , 2 ] {- DP (Top 14) (Mirror (Input 1)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 2)) -}
  [ 0# , 2 , 2 , 1 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 1 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 2)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 2 , 2 ] {- DP (Top 13) (Mirror (Input 1)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 5)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 2)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 4)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 10) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 4)) -}
  [ 0# , 2 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 4)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 3)) -}
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 1# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 5)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 3)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 6)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 7) (Mirror (Input 0)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 4) (Mirror (Input 6)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 2# , 0 , 0 , 2 , 2 , 0 ] {- DP (Top 11) (Mirror (Input 6)) -}
  [ 2# , 0 , 1 , 0 , 1 , 0 , 0 , 2 , 0 , 1 , 2 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 6)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 1)) -}
  [2#, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] |-> [ 0# , 0 , 2 , 2 , 0 ] {- DP (Top 12) (Mirror (Input 6)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 5) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 1 , 0 , 0 ] {- DP (Top 13) (Mirror (Input 5)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 2# , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP (Top 9) (Mirror (Input 5)) -}
  [ 0# , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 0 , 1 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 5)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 0 , 0 , 2 , 2 ] {- DP (Top 12) (Mirror (Input 1)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 2 , 2 ] {- DP (Top 14) (Mirror (Input 1)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP (Top 8) (Mirror (Input 2)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 2# , 0 , 0 ] {- DP (Top 14) (Mirror (Input 2)) -}
  [ 0# , 2 , 2 , 1 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 1 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 2)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 0# , 0 , 2 , 2 ] {- DP (Top 13) (Mirror (Input 1)) -}
  [0#, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 5)) -}
  [0#, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] |-> [ 0# , 0 ] {- DP (Top 15) (Mirror (Input 2)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 ] {- DP (Top 15) (Mirror (Input 4)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 10) (Mirror (Input 0)) -}
  [2#, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] |-> [ 2# , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 4)) -}
  [ 0# , 2 , 0 , 0 , 0 , 1 , 1 , 0 , 1 , 0 , 1 , 2 , 2 ] |-> [0#] {- DP (Top 16) (Mirror (Input 4)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 3)) -}
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( 1
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 1#
  , Wk  / 13A 13A 13A - \
        | 13A 13A 13A - |
        | 13A 13A 13A - |
        \ -   -   -   - / )
  ( 2#
  , Wk  / 13A 13A 13A - \
        | 13A 13A 13A - |
        | 13A 13A 13A - |
        \ -   -   -   - / )
  ( 0#
  , Wk  / 13A 13A 13A - \
        | 13A 13A 13A - |
        | 13A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 8) (Mirror (Input 3)) -}
  [0#, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] |-> [ 2# , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 1)) -}
  [0#, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] |-> [ 2# , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP (Top 1) (Mirror (Input 4)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 5) (Mirror (Input 3)) -}
  [1#, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] |-> [ 2# , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP (Top 2) (Mirror (Input 3)) -}
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  (1, 0/1)
  (2, 0/1)
  (0, 0/1)
  (1#, 1/1)
  (2#, 0/1)
  (0#, 1/1)
   property Termination
has value Just True
for SRS
  [2, 0, 1, 1, 2, 0, 1, 0, 0, 1, 1, 2, 1] ->= [ 2 , 2 , 0 , 0 , 1 , 0 , 2 , 2 , 1 , 0 , 2 , 0 , 0 , 1 , 2 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [0, 1, 0, 0, 1, 2, 1, 2, 1, 2, 1, 0, 2] ->= [ 0 , 2 , 2 , 1 , 1 , 1 , 0 , 0 , 0 , 1 , 1 , 1 , 2 , 0 , 0 , 2 , 2 ] {- DP Nontop (Mirror (Input 1)) -}
  [0, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 1, 2] ->= [ 0 , 1 , 2 , 1 , 2 , 2 , 2 , 2 , 2 , 1 , 1 , 0 , 0 , 1 , 2 , 0 , 0 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 0, 0, 1, 1, 1, 2, 0, 1, 0, 0, 2, 2] ->= [ 2 , 2 , 2 , 0 , 0 , 2 , 0 , 2 , 2 , 1 , 0 , 0 , 2 , 1 , 1 , 2 , 2 ] {- DP Nontop (Mirror (Input 3)) -}
  [0, 2, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 2] ->= [ 0 , 2 , 0 , 0 , 1 , 1 , 1 , 1 , 0 , 0 , 1 , 0 , 0 , 1 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 4)) -}
  [0, 0, 2, 2, 0, 0, 0, 2, 0, 1, 1, 2, 2] ->= [ 0 , 0 , 2 , 2 , 2 , 2 , 1 , 0 , 2 , 2 , 0 , 0 , 0 , 2 , 1 , 0 , 0 ] {- DP Nontop (Mirror (Input 5)) -}
  [2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 2, 2] ->= [ 2 , 2 , 0 , 2 , 2 , 0 , 0 , 2 , 1 , 2 , 2 , 2 , 0 , 0 , 2 , 2 , 0 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(7,3)\Deepee(114/7,6)\EDG(54/7,6)\Matrix{\Arctic}{3}\EDG(29/7,6)\Matrix{\Arctic}{3}(5/7,6)\Weight(0/7,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "EDG { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
  total number 7
  max duration 2.380599380000
  min duration 0.000007797000
  total durat. 2.599258474000
  Info
    { what = "EDG   { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
    , input_size = Size
      { num_rules = 726
      , num_strict_rules = 663
      , num_top_rules = 663
      , num_weak_rules = 63
      , alphabet_size = 15
      , total_length = 17874}
    , self = 51
    , parent = Nothing
    , duration = 2.380599380000
    , status = Success
    , start = 2025-09-03 13:13:44.981127165 UTC
    , finish = 2025-09-03 13:13:47.361726545 UTC
    , thread_cap_info = ("ThreadId 80", 2, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 3.079990778000
  min duration 3.039601257000
  total durat. 15.278894936000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 34
      , num_strict_rules = 27
      , num_top_rules = 27
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 715}
    , self = 54
    , parent = Nothing
    , duration = 3.039601257000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:44.861536449 UTC
    , finish = 2025-09-03 13:13:47.901137706 UTC
    , thread_cap_info = ("ThreadId 66", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 318
      , num_strict_rules = 255
      , num_top_rules = 255
      , num_weak_rules = 63
      , alphabet_size = 15
      , total_length = 7152}
    , self = 67
    , parent = Nothing
    , duration = 3.039893257000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:47.381431241 UTC
    , finish = 2025-09-03 13:13:50.421324498 UTC
    , thread_cap_info = ("ThreadId 97", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 29
      , num_top_rules = 29
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 790}
    , self = 78
    , parent = Nothing
    , duration = 3.059429278000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:51.361703269 UTC
    , finish = 2025-09-03 13:13:54.421132547 UTC
    , thread_cap_info = ("ThreadId 126", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 654}
    , self = 76
    , parent = Nothing
    , duration = 3.059980366000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:50.121149274 UTC
    , finish = 2025-09-03 13:13:53.18112964 UTC
    , thread_cap_info = ("ThreadId 115", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 61
      , num_strict_rules = 54
      , num_top_rules = 54
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 1386}
    , self = 58
    , parent = Nothing
    , duration = 3.079990778000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:45.12114318 UTC
    , finish = 2025-09-03 13:13:48.201133958 UTC
    , thread_cap_info = ("ThreadId 90", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.119696860000
  min duration 3.119696860000
  total durat. 3.119696860000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 63
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 2016}
    , self = 56
    , parent = Nothing
    , duration = 3.119696860000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:44.901443318 UTC
    , finish = 2025-09-03 13:13:48.021140178 UTC
    , thread_cap_info = ("ThreadId 73", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 3.079988779000
  min duration 3.039375479000
  total durat. 15.277713696000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 29
      , num_top_rules = 29
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 790}
    , self = 79
    , parent = Nothing
    , duration = 3.039375479000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:51.381769553 UTC
    , finish = 2025-09-03 13:13:54.421145032 UTC
    , thread_cap_info = ("ThreadId 127", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 654}
    , self = 77
    , parent = Nothing
    , duration = 3.040004939000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:50.141144717 UTC
    , finish = 2025-09-03 13:13:53.181149656 UTC
    , thread_cap_info = ("ThreadId 116", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 61
      , num_strict_rules = 54
      , num_top_rules = 54
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 1386}
    , self = 59
    , parent = Nothing
    , duration = 3.058386381000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:45.142760882 UTC
    , finish = 2025-09-03 13:13:48.201147263 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 318
      , num_strict_rules = 255
      , num_top_rules = 255
      , num_weak_rules = 63
      , alphabet_size = 15
      , total_length = 7152}
    , self = 68
    , parent = Nothing
    , duration = 3.059958118000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:47.401189949 UTC
    , finish = 2025-09-03 13:13:50.461148067 UTC
    , thread_cap_info = ("ThreadId 98", 2, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 34
      , num_strict_rules = 27
      , num_top_rules = 27
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 715}
    , self = 55
    , parent = Nothing
    , duration = 3.079988779000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:13:44.881145526 UTC
    , finish = 2025-09-03 13:13:47.961134305 UTC
    , thread_cap_info = ("ThreadId 67", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.140644886000
  min duration 3.140644886000
  total durat. 3.140644886000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 63
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 2016}
    , self = 57
    , parent = Nothing
    , duration = 3.140644886000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:44.921133341 UTC
    , finish = 2025-09-03 13:13:48.061778227 UTC
    , thread_cap_info = ("ThreadId 75", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 4
  max duration 2.841370774000
  min duration 1.819362557000
  total durat. 9.822841096000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 34
      , num_strict_rules = 27
      , num_top_rules = 27
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 715}
    , self = 62
    , parent = Nothing
    , duration = 1.819362557000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:48.06176801 UTC
    , finish = 2025-09-03 13:13:49.881130567 UTC
    , thread_cap_info = ("ThreadId 104", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 654}
    , self = 82
    , parent = Nothing
    , duration = 2.460960519000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:53.261511275 UTC
    , finish = 2025-09-03 13:13:55.722471794 UTC
    , thread_cap_info = ("ThreadId 131", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 29
      , num_top_rules = 29
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 790}
    , self = 89
    , parent = Nothing
    , duration = 2.701147246000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:54.461871779 UTC
    , finish = 2025-09-03 13:13:57.163019025 UTC
    , thread_cap_info = ("ThreadId 136", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 61
      , num_strict_rules = 54
      , num_top_rules = 54
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 1386}
    , self = 71
    , parent = Nothing
    , duration = 2.841370774000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:48.28113391 UTC
    , finish = 2025-09-03 13:13:51.122504684 UTC
    , thread_cap_info = ("ThreadId 109", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 2.686266695000
  min duration 1.736046627000
  total durat. 9.295184114000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 34
      , num_strict_rules = 27
      , num_top_rules = 27
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 715}
    , self = 60
    , parent = Nothing
    , duration = 1.736046627000
    , status = Success
    , start = 2025-09-03 13:13:48.002021842 UTC
    , finish = 2025-09-03 13:13:49.738068469 UTC
    , thread_cap_info = ("ThreadId 103", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 24
      , num_top_rules = 24
      , num_weak_rules = 7
      , alphabet_size = 5
      , total_length = 654}
    , self = 80
    , parent = Nothing
    , duration = 2.301263932000
    , status = Success
    , start = 2025-09-03 13:13:53.241140023 UTC
    , finish = 2025-09-03 13:13:55.542403955 UTC
    , thread_cap_info = ("ThreadId 130", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 29
      , num_top_rules = 29
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 790}
    , self = 87
    , parent = Nothing
    , duration = 2.571606860000
    , status = Success
    , start = 2025-09-03 13:13:54.430414912 UTC
    , finish = 2025-09-03 13:13:57.002021772 UTC
    , thread_cap_info = ("ThreadId 135", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 61
      , num_strict_rules = 54
      , num_top_rules = 54
      , num_weak_rules = 7
      , alphabet_size = 6
      , total_length = 1386}
    , self = 69
    , parent = Nothing
    , duration = 2.686266695000
    , status = Success
    , start = 2025-09-03 13:13:48.26114116 UTC
    , finish = 2025-09-03 13:13:50.947407855 UTC
    , thread_cap_info = ("ThreadId 108", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 12.549417276000
  min duration 12.549417276000
  total durat. 12.549417276000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 7
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 210}
    , self = 92
    , parent = Nothing
    , duration = 12.549417276000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:13:44.831853652 UTC
    , finish = 2025-09-03 13:13:57.381270928 UTC
    , thread_cap_info = ("ThreadId 57", 1, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 210} , self
F                  = 37 , parent = Nothing , duration = 0.102446840000 , status = Fail , start
F                  = 2025-09-03 13:13:44.825558527 UTC , finish = 2025-09-03 13:13:44.928005367
F                  UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E                , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E                max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E                [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E                string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E                , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E                = 210} , self = 92 , parent = Nothing , duration = 12.549417276000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 13:13:44.831853652 UTC ,
| E                finish = 2025-09-03 13:13:57.381270928 UTC , thread_cap_info = ("ThreadId
| E                57", 1, False)}
| E                
| | S              Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S              verbose = False}" , input_size = Size { num_rules = 121 , num_strict_rules
| | S              = 114 , num_top_rules = 114 , num_weak_rules = 7 , alphabet_size = 6 ,
| | S              total_length = 2756} , self = 46 , parent = Nothing , duration = 0.200999526000
| | S              , status = Success , start = 2025-09-03 13:13:44.838756356 UTC , finish
| | S              = 2025-09-03 13:13:45.039755882 UTC , thread_cap_info = ("ThreadId 45",
| | S              3, False)}
| | S              
| | | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 34 , num_strict_rules
| | | E            = 27 , num_top_rules = 27 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | E            = 715} , self = 54 , parent = Nothing , duration = 3.039601257000 , status
| | | E            = Except "<<timeout>>" , start = 2025-09-03 13:13:44.861536449 UTC , finish
| | | E            = 2025-09-03 13:13:47.901137706 UTC , thread_cap_info = ("ThreadId 66",
| | | E            3, False)}
| | | E            
| | | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 34 , num_strict_rules
| | | | E          = 27 , num_top_rules = 27 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | | E          = 715} , self = 55 , parent = Nothing , duration = 3.079988779000 , status
| | | | E          = Except "<<timeout>>" , start = 2025-09-03 13:13:44.881145526 UTC , finish
| | | | E          = 2025-09-03 13:13:47.961134305 UTC , thread_cap_info = ("ThreadId 67",
| | | | E          3, False)}
| | | | E          
| | | | | E        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | E        = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | E        = 2016} , self = 56 , parent = Nothing , duration = 3.119696860000 , status
| | | | | E        = Except "AsyncCancelled" , start = 2025-09-03 13:13:44.901443318 UTC ,
| | | | | E        finish = 2025-09-03 13:13:48.021140178 UTC , thread_cap_info = ("ThreadId
| | | | | E        73", 1, False)}
| | | | | E        
| | | | | | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| | | | | | E      = 63 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | | E      = 2016} , self = 57 , parent = Nothing , duration = 3.140644886000 , status
| | | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 13:13:44.921133341 UTC ,
| | | | | | E      finish = 2025-09-03 13:13:48.061778227 UTC , thread_cap_info = ("ThreadId
| | | | | | E      75", 1, False)}
| | | | | | E      
F | | | | | |      
S | | | | | |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
S | | | | | |      verbose = False}" , input_size = Size { num_rules = 726 , num_strict_rules
S | | | | | |      = 663 , num_top_rules = 663 , num_weak_rules = 63 , alphabet_size = 15
S | | | | | |      , total_length = 17874} , self = 51 , parent = Nothing , duration = 2.380599380000
S | | | | | |      , status = Success , start = 2025-09-03 13:13:44.981127165 UTC , finish
S | | | | | |      = 2025-09-03 13:13:47.361726545 UTC , thread_cap_info = ("ThreadId 80",
S | | | | | |      2, False)}
S | | | | | |      
| | S | | | |      
| | E | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 61 , num_strict_rules
| | E | | | |      = 54 , num_top_rules = 54 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | E | | | |      = 1386} , self = 58 , parent = Nothing , duration = 3.079990778000 , status
| | E | | | |      = Except "<<timeout>>" , start = 2025-09-03 13:13:45.12114318 UTC , finish
| | E | | | |      = 2025-09-03 13:13:48.201133958 UTC , thread_cap_info = ("ThreadId 90",
| | E | | | |      3, False)}
| | E | | | |      
| | | | | | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 61 , num_strict_rules
| | | | | | | E    = 54 , num_top_rules = 54 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | | | | | | E    = 1386} , self = 59 , parent = Nothing , duration = 3.058386381000 , status
| | | | | | | E    = Except "<<timeout>>" , start = 2025-09-03 13:13:45.142760882 UTC , finish
| | | | | | | E    = 2025-09-03 13:13:48.201147263 UTC , thread_cap_info = ("ThreadId 91",
| | | | | | | E    3, False)}
| | | | | | | E    
S | | | | | | |    
E | | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E | | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E | | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 318 , num_strict_rules
E | | | | | | |    = 255 , num_top_rules = 255 , num_weak_rules = 63 , alphabet_size = 15
E | | | | | | |    , total_length = 7152} , self = 67 , parent = Nothing , duration = 3.039893257000
E | | | | | | |    , status = Except "<<timeout>>" , start = 2025-09-03 13:13:47.381431241
E | | | | | | |    UTC , finish = 2025-09-03 13:13:50.421324498 UTC , thread_cap_info = ("ThreadId
E | | | | | | |    97", 2, False)}
E | | | | | | |    
| | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 318 , num_strict_rules
| | | | | | | | E  = 255 , num_top_rules = 255 , num_weak_rules = 63 , alphabet_size = 15
| | | | | | | | E  , total_length = 7152} , self = 68 , parent = Nothing , duration = 3.059958118000
| | | | | | | | E  , status = Except "<<timeout>>" , start = 2025-09-03 13:13:47.401189949
| | | | | | | | E  UTC , finish = 2025-09-03 13:13:50.461148067 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  98", 2, False)}
| | | | | | | | E  
| | | E | | | | |  
| | |   E | | | |  
| | | S   | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S   | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S   | | | |  = 34 , num_strict_rules = 27 , num_top_rules = 27 , num_weak_rules = 7
| | | S   | | | |  , alphabet_size = 5 , total_length = 715} , self = 60 , parent = Nothing
| | | S   | | | |  , duration = 1.736046627000 , status = Success , start = 2025-09-03 13:13:48.002021842
| | | S   | | | |  UTC , finish = 2025-09-03 13:13:49.738068469 UTC , thread_cap_info = ("ThreadId
| | | S   | | | |  103", 3, False)}
| | | S   | | | |  
| | | |   E | | |  
| | | | E   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 34
| | | | E   | | |  , num_strict_rules = 27 , num_top_rules = 27 , num_weak_rules = 7 , alphabet_size
| | | | E   | | |  = 5 , total_length = 715} , self = 62 , parent = Nothing , duration = 1.819362557000
| | | | E   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:13:48.06176801
| | | | E   | | |  UTC , finish = 2025-09-03 13:13:49.881130567 UTC , thread_cap_info = ("ThreadId
| | | | E   | | |  104", 3, False)}
| | | | E   | | |  
| | | | |   E | |  
| | E | |     | |  
| |   | |     E |  
| | S | |       |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |       |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |       |  = 61 , num_strict_rules = 54 , num_top_rules = 54 , num_weak_rules = 7
| | S | |       |  , alphabet_size = 6 , total_length = 1386} , self = 69 , parent = Nothing
| | S | |       |  , duration = 2.686266695000 , status = Success , start = 2025-09-03 13:13:48.26114116
| | S | |       |  UTC , finish = 2025-09-03 13:13:50.947407855 UTC , thread_cap_info = ("ThreadId
| | S | |       |  108", 3, False)}
| | S | |       |  
| | | | | E     |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 61
| | | | | E     |  , num_strict_rules = 54 , num_top_rules = 54 , num_weak_rules = 7 , alphabet_size
| | | | | E     |  = 6 , total_length = 1386} , self = 71 , parent = Nothing , duration =
| | | | | E     |  2.841370774000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | | | E     |  13:13:48.28113391 UTC , finish = 2025-09-03 13:13:51.122504684 UTC , thread_cap_info
| | | | | E     |  = ("ThreadId 109", 3, False)}
| | | | | E     |  
| | | S | |     |  
| | |   E |     |  
| | | E   |     |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E   |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E   |     |  = False\n , verbose = False}" , input_size = Size { num_rules = 31 , num_strict_rules
| | | E   |     |  = 24 , num_top_rules = 24 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | E   |     |  = 654} , self = 76 , parent = Nothing , duration = 3.059980366000 , status
| | | E   |     |  = Except "<<timeout>>" , start = 2025-09-03 13:13:50.121149274 UTC , finish
| | | E   |     |  = 2025-09-03 13:13:53.18112964 UTC , thread_cap_info = ("ThreadId 115",
| | | E   |     |  3, False)}
| | | E   |     |  
| | | | E |     |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E |     |  = False\n , verbose = False}" , input_size = Size { num_rules = 31 , num_strict_rules
| | | | E |     |  = 24 , num_top_rules = 24 , num_weak_rules = 7 , alphabet_size = 5 , total_length
| | | | E |     |  = 654} , self = 77 , parent = Nothing , duration = 3.040004939000 , status
| | | | E |     |  = Except "<<timeout>>" , start = 2025-09-03 13:13:50.141144717 UTC , finish
| | | | E |     |  = 2025-09-03 13:13:53.181149656 UTC , thread_cap_info = ("ThreadId 116",
| | | | E |     |  3, False)}
| | | | E |     |  
E | | | | |     |  
  | | | | |     E  
  | S | | |        
  |   | | E        
E |   | |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E |   | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E |   | |          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
E |   | |          = 29 , num_top_rules = 29 , num_weak_rules = 7 , alphabet_size = 6 , total_length
E |   | |          = 790} , self = 78 , parent = Nothing , duration = 3.059429278000 , status
E |   | |          = Except "<<timeout>>" , start = 2025-09-03 13:13:51.361703269 UTC , finish
E |   | |          = 2025-09-03 13:13:54.421132547 UTC , thread_cap_info = ("ThreadId 126",
E |   | |          3, False)}
E |   | |          
| | E | |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | |          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | E | |          = 29 , num_top_rules = 29 , num_weak_rules = 7 , alphabet_size = 6 , total_length
| | E | |          = 790} , self = 79 , parent = Nothing , duration = 3.039375479000 , status
| | E | |          = Except "<<timeout>>" , start = 2025-09-03 13:13:51.381769553 UTC , finish
| | E | |          = 2025-09-03 13:13:54.421145032 UTC , thread_cap_info = ("ThreadId 127",
| | E | |          3, False)}
| | E | |          
| | | E |          
| | |   E          
| | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S            = 31 , num_strict_rules = 24 , num_top_rules = 24 , num_weak_rules = 7
| | | S            , alphabet_size = 5 , total_length = 654} , self = 80 , parent = Nothing
| | | S            , duration = 2.301263932000 , status = Success , start = 2025-09-03 13:13:53.241140023
| | | S            UTC , finish = 2025-09-03 13:13:55.542403955 UTC , thread_cap_info = ("ThreadId
| | | S            130", 3, False)}
| | | S            
| | | | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 31
| | | | E          , num_strict_rules = 24 , num_top_rules = 24 , num_weak_rules = 7 , alphabet_size
| | | | E          = 5 , total_length = 654} , self = 82 , parent = Nothing , duration = 2.460960519000
| | | | E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:13:53.261511275
| | | | E          UTC , finish = 2025-09-03 13:13:55.722471794 UTC , thread_cap_info = ("ThreadId
| | | | E          131", 3, False)}
| | | | E          
E | | | |          
  | E | |          
S |   | |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   | |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   | |          = 36 , num_strict_rules = 29 , num_top_rules = 29 , num_weak_rules = 7
S |   | |          , alphabet_size = 6 , total_length = 790} , self = 87 , parent = Nothing
S |   | |          , duration = 2.571606860000 , status = Success , start = 2025-09-03 13:13:54.430414912
S |   | |          UTC , finish = 2025-09-03 13:13:57.002021772 UTC , thread_cap_info = ("ThreadId
S |   | |          135", 3, False)}
S |   | |          
| | E | |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 36
| | E | |          , num_strict_rules = 29 , num_top_rules = 29 , num_weak_rules = 7 , alphabet_size
| | E | |          = 6 , total_length = 790} , self = 89 , parent = Nothing , duration = 2.701147246000
| | E | |          , status = Except "AsyncCancelled" , start = 2025-09-03 13:13:54.461871779
| | E | |          UTC , finish = 2025-09-03 13:13:57.163019025 UTC , thread_cap_info = ("ThreadId
| | E | |          136", 3, False)}
| | E | |          
| | | S |          
| | |   E          
S | |              
  | E              
  E                
