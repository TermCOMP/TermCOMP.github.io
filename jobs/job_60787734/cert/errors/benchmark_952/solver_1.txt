last 2053 length 11043
last 5031 length 40466
last 3063 length 19859
CNF 3063 vars 19859 clauses
CNF 2053 vars 11043 clauses
last 3166 length 16869
CNF 3166 vars 16869 clauses
CNF 5031 vars 40466 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3706, clauses: 13399
last 3706 length 13399
CNF 3706 vars 13399 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4348, clauses: 15940
last 4348 length 15940
CNF 4348 vars 15940 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3706, clauses: 13399, status: Satisfied, time: 0.251256987s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4348, clauses: 15940, status: Unsatisfied, time: 0.187583102s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14988, clauses: 62621
last 14988 length 62621
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9158, clauses: 37890
last 9158 length 37890
**************************************************
summary
**************************************************
SRS with 5 rules on 5 letters       context
SRS with 9 rules on 5 letters       mirror
SRS with 9 rules on 5 letters       DP
SRS with 17 strict rules and 9 weak rules on 6 letters       weights
SRS with 6 strict rules and 9 weak rules on 6 letters       EDG
SRS with 1 strict rules and 9 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 9 weak rules on 5 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, s] -> [s, s, s, p, s, b, p, p, s, s] {- Input 0 -}
  [b, s] -> [s, s, s, p, p, s, s, c, p, s, p, s] {- Input 1 -}
  [c, s] -> [p, s, p, s, a, p, s, p, s] {- Input 2 -}
  [p, p, s] -> [p] {- Input 3 -}
  [p, s] -> [] {- Input 4 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, s] -> [s, s, s, p, s, b, p, p, s, s] {- Input 0 -}
  [b, s] -> [s, s, s, p, p, s, s, c, p, s, p, s] {- Input 1 -}
  [c, s] -> [p, s, p, s, a, p, s, p, s] {- Input 2 -}
  [p, p, s] -> [p] {- Input 3 -}
  [s, p, s] -> [s] {- Input 4 -}
  [p, p, s] -> [p] {- Input 4 -}
  [a, p, s] -> [a] {- Input 4 -}
  [b, p, s] -> [b] {- Input 4 -}
  [c, p, s] -> [c] {- Input 4 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [s, a] -> [s, s, p, p, b, s, p, s, s, s] {- Mirror (Input 0) -}
  [s, b] -> [s, p, s, p, c, s, s, p, p, s, s, s] {- Mirror (Input 1) -}
  [s, c] -> [s, p, s, p, a, s, p, s, p] {- Mirror (Input 2) -}
  [s, p, p] -> [p] {- Mirror (Input 3) -}
  [s, p, s] -> [s] {- Mirror (Input 4) -}
  [s, p, p] -> [p] {- Mirror (Input 4) -}
  [s, p, a] -> [a] {- Mirror (Input 4) -}
  [s, p, b] -> [b] {- Mirror (Input 4) -}
  [s, p, c] -> [c] {- Mirror (Input 4) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [s, a] ->= [s, s, p, p, b, s, p, s, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [s, b] ->= [ s , p , s , p , c , s , s , p , p , s , s , s ] {- DP Nontop (Mirror (Input 1)) -}
  [s, c] ->= [s, p, s, p, a, s, p, s, p] {- DP Nontop (Mirror (Input 2)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, b] ->= [b] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, c] ->= [c] {- DP Nontop (Mirror (Input 4)) -}
  [s#, a] |-> [s#] {- DP (Top 9) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, s] {- DP (Top 8) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, s, s] {- DP (Top 7) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, s, p, p, b, s, p, s, s, s] {- DP (Top 0) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, p, s, s, s] {- DP (Top 5) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, p, p, b, s, p, s, s, s] {- DP (Top 1) (Mirror (Input 0)) -}
  [s#, b] |-> [s#] {- DP (Top 11) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, s] {- DP (Top 10) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, s, s] {- DP (Top 9) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, s, p, p, s, s, s] {- DP (Top 5) (Mirror (Input 1)) -}
  [s#, b] |-> [ s# , p , s , p , c , s , s , p , p , s , s , s ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, p, p, s, s, s] {- DP (Top 6) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, p, c, s, s, p, p, s, s, s] {- DP (Top 2) (Mirror (Input 1)) -}
  [s#, c] |-> [s#, p] {- DP (Top 7) (Mirror (Input 2)) -}
  [s#, c] |-> [s#, p, s, p] {- DP (Top 5) (Mirror (Input 2)) -}
  [s#, c] |-> [s#, p, s, p, a, s, p, s, p] {- DP (Top 0) (Mirror (Input 2)) -}
  [s#, c] |-> [s#, p, a, s, p, s, p] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  CNF 14988 vars 62621 clauses
(CNF 9158 vars 37890 clauses
s, 0/1)
  (p, 0/1)
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (s#, 0/1)
   property Termination
has value Just True
for SRS
  [s, a] ->= [s, s, p, p, b, s, p, s, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [s, b] ->= [ s , p , s , p , c , s , s , p , p , s , s , s ] {- DP Nontop (Mirror (Input 1)) -}
  [s, c] ->= [s, p, s, p, a, s, p, s, p] {- DP Nontop (Mirror (Input 2)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, b] ->= [b] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, c] ->= [c] {- DP Nontop (Mirror (Input 4)) -}
  [s#, a] |-> [s#, s, p, p, b, s, p, s, s, s] {- DP (Top 0) (Mirror (Input 0)) -}
  [s#, a] |-> [s#, p, p, b, s, p, s, s, s] {- DP (Top 1) (Mirror (Input 0)) -}
  [s#, b] |-> [ s# , p , s , p , c , s , s , p , p , s , s , s ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, b] |-> [s#, p, c, s, s, p, p, s, s, s] {- DP (Top 2) (Mirror (Input 1)) -}
  [s#, c] |-> [s#, p, s, p, a, s, p, s, p] {- DP (Top 0) (Mirror (Input 2)) -}
  [s#, c] |-> [s#, p, a, s, p, s, p] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, a] |-> [s#, s, p, p, b, s, p, s, s, s] {- DP (Top 0) (Mirror (Input 0)) -}
  [s, a] ->= [s, s, p, p, b, s, p, s, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [s, b] ->= [ s , p , s , p , c , s , s , p , p , s , s , s ] {- DP Nontop (Mirror (Input 1)) -}
  [s, c] ->= [s, p, s, p, a, s, p, s, p] {- DP Nontop (Mirror (Input 2)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, b] ->= [b] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, c] ->= [c] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( s
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a
  , Wk  / 9A 12A 12A - \
        | 6A 9A  9A  - |
        | 6A 9A  9A  - |
        \ -  -   -   - / )
  ( b
  , Wk  / 6A 9A 9A - \
        | 6A 9A 9A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 6A 9A 9A - \
        | 6A 9A 9A - |
        | 6A 9A 9A - |
        \ -  -  -  - / )
  ( s#
  , Wk  / 8A 9A 10A - \
        | 8A 9A 10A - |
        | 8A 9A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [s, a] ->= [s, s, p, p, b, s, p, s, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [s, b] ->= [ s , p , s , p , c , s , s , p , p , s , s , s ] {- DP Nontop (Mirror (Input 1)) -}
  [s, c] ->= [s, p, s, p, a, s, p, s, p] {- DP Nontop (Mirror (Input 2)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, b] ->= [b] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, c] ->= [c] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG

**************************************************
skeleton: (5,5)\Context\Mirror(9,5)\Deepee(17/9,6)\Weight(6/9,6)\EDG(1/9,6)\Matrix{\Arctic}{3}(0/9,5)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S          = Size { num_rules = 536 , num_strict_rules = 411 , num_top_rules = 411
S          , num_weak_rules = 125 , alphabet_size = 45 , total_length = 4889} , self
S          = 49 , parent = Nothing , duration = 0.108146384000 , status = Success
S          , start = 2025-09-03 13:36:59.995853509 UTC , finish = 2025-09-03 13:37:00.103999893
S          UTC , thread_cap_info = ("ThreadId 69", 0, False)}
S          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F        = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 6 , total_length
| F        = 73} , self = 60 , parent = Nothing , duration = 0.240818101000 , status
| F        = Fail , start = 2025-09-03 13:37:00.055334985 UTC , finish = 2025-09-03
| F        13:37:00.296153086 UTC , thread_cap_info = ("ThreadId 88", 2, False)}
| F        
| | S      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S      verbose = False}" , input_size = Size { num_rules = 234 , num_strict_rules
| | S      = 109 , num_top_rules = 109 , num_weak_rules = 125 , alphabet_size = 30
| | S      , total_length = 2796} , self = 52 , parent = Nothing , duration = 0.134606261000
| | S      , status = Success , start = 2025-09-03 13:37:00.072786377 UTC , finish
| | S      = 2025-09-03 13:37:00.207392638 UTC , thread_cap_info = ("ThreadId 60",
| | S      0, False)}
| | S      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F    = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 6 , total_length
| | | F    = 73} , self = 57 , parent = Nothing , duration = 0.194765915000 , status
| | | F    = Fail , start = 2025-09-03 13:37:00.07278764 UTC , finish = 2025-09-03
| | | F    13:37:00.267553555 UTC , thread_cap_info = ("ThreadId 87", 2, False)}
| | | F    
S | | |    
F | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F | | |    = 3 , num_top_rules = 3 , num_weak_rules = 9 , alphabet_size = 8 , total_length
F | | |    = 82} , self = 58 , parent = Nothing , duration = 0.123623356000 , status
F | | |    = Fail , start = 2025-09-03 13:37:00.152793936 UTC , finish = 2025-09-03
F | | |    13:37:00.276417292 UTC , thread_cap_info = ("ThreadId 90", 2, False)}
F | | |    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 9 , alphabet_size = 8 , total_length
| | | | F  = 82} , self = 61 , parent = Nothing , duration = 0.155384029000 , status
| | | | F  = Fail , start = 2025-09-03 13:37:00.180197444 UTC , finish = 2025-09-03
| | | | F  13:37:00.335581473 UTC , thread_cap_info = ("ThreadId 91", 2, False)}
| | | | F  
| | S | |  
| |   F |  
| | S   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S   |  = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
| | S   |  alphabet_size = 6 , total_length = 73} , self = 63 , parent = Nothing ,
| | S   |  duration = 0.317971923000 , status = Success , start = 2025-09-03 13:37:00.276390772
| | S   |  UTC , finish = 2025-09-03 13:37:00.594362695 UTC , thread_cap_info = ("ThreadId
| | S   |  103", 2, False)}
| | S   |  
F | |   |  
  F |   |  
F   |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   |   |  = 12 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 9 ,
F   |   |  alphabet_size = 8 , total_length = 82} , self = 64 , parent = Nothing ,
F   |   |  duration = 0.281575812000 , status = Fail , start = 2025-09-03 13:37:00.313005306
F   |   |  UTC , finish = 2025-09-03 13:37:00.594581118 UTC , thread_cap_info = ("ThreadId
F   |   |  105", 2, False)}
F   |   |  
|   |   F  
| E |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| E |      = 6 , total_length = 73} , self = 66 , parent = Nothing , duration = 0.366387029000
| E |      , status = Except "AsyncCancelled" , start = 2025-09-03 13:37:00.347248634
| E |      UTC , finish = 2025-09-03 13:37:00.713635663 UTC , thread_cap_info = ("ThreadId
| E |      110", 2, False)}
| E |      
| | S      
F |        
  E        
