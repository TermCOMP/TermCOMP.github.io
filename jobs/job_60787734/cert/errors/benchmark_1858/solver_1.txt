last 411 length 1638
CNF 411 vars 1638 clauses
last 403 length 1638
CNF 403 vars 1638 clauses
last 351 length 1438
last 430 length 1779
CNF 351 vars 1438 clauses
CNF 430 vars 1779 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2151, clauses: 7625
last 2151 length 7625
CNF 2151 vars 7625 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2233, clauses: 7822
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2151, clauses: 7625, status: Satisfied, time: 0.064520798s
last 2233 length 7822
last 9331 length 41515
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6766, clauses: 27791
last 247 length 980
last 235 length 912
CNF 2233 vars 7822 clauses
last 6766 length 27791
CNF 9331 vars 41515 clauses
CNF 247 vars 980 clauses
CNF 235 vars 912 clauses
CNF 6766 vars 27791 clauses
last 8590 length 35958
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2233, clauses: 7822, status: Satisfied, time: 0.098159932s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1493, clauses: 5229
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4536, clauses: 18601
**************************************************last 1493 length 5229

last 4536 length 18601
last 9390 length 39436
last 9133 length 39352
CNF 1493 vars 5229 clauses
summaryCNF 4536 vars 18601 clauses

CNF 9390 vars 39436 clauses
last 9387 length 39373
CNF 9133 vars 39352 clauses
**************************************************last 10274 length 45667
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4536, clauses: 18601, status: Satisfied, time: 0.179521292s

SRS with 5 rules on 4 letters       DP
SRS with 9 strict rules and 5 weak rules on 7 letters       weights
SRS with 3 strict rules and 5 weak rules on 6 letters       EDG
SRS with 2 strict rules and 5 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 6 letters       weights
SRS with 0 strict rules and 5 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [f] -> [n, c, c] {- Input 0 -}
  [c, f] -> [f, c, c] {- Input 1 -}
  [c, c] -> [c] {- Input 2 -}
  [n, s] -> [f, s, s] {- Input 3 -}
  [n, f] -> [f, n] {- Input 4 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [f] ->= [n, c, c] {- DP Nontop (Input 0) -}
  [c, f] ->= [f, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [c] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s, s] {- DP Nontop (Input 3) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 4) -}
  [n#, s] |-> [f#, s, s] {- DP (Top 0) (Input 3) -}
  [n#, f] |-> [n#] {- DP (Top 1) (Input 4) -}
  [n#, f] |-> [f#, n] {- DP (Top 0) (Input 4) -}
  [f#] |-> [n#, c, c] {- DP (Top 0) (Input 0) -}
  [f#] |-> [c#] {- DP (Top 2) (Input 0) -}
  [f#] |-> [c#, c] {- DP (Top 1) (Input 0) -}
  [c#, f] |-> [f#, c, c] {- DP (Top 0) (Input 1) -}
  [c#, f] |-> [c#] {- DP (Top 2) (Input 1) -}
  [c#, f] |-> [c#, c] {- DP (Top 1) (Input 1) -}
reason
  (s, 0/1)
  (n, 2/1)
  (f, 2/1)
  (c, 0/1)
  (n#, 2/1)
  (f#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [f] ->= [n, c, c] {- DP Nontop (Input 0) -}
  [c, f] ->= [f, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [c] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s, s] {- DP Nontop (Input 3) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 4) -}
  [n#, s] |-> [f#, s, s] {- DP (Top 0) (Input 3) -}
  [n#, f] |-> [f#, n] {- DP (Top 0) (Input 4) -}
  [f#] |-> [n#, c, c] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [n#, f] |-> [f#, n] {- DP (Top 0) (Input 4) -}
  [f#] |-> [n#, c, c] {- DP (Top 0) (Input 0) -}
  [f] ->= [n, c, c] {- DP Nontop (Input 0) -}
  [c, f] ->= [f, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [c] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s, s] {- DP Nontop (Input 3) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 4) -}
reason
  ( s
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1493, clauses: 5229, status: Unsatisfied, time: 0.245478387s

  ( n
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( f
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( n#
  , Wk  / 15A 18A 18A - \
        | 15A 18A 18A - |
        | 15A 18A 18A - |
        \ -   -   -   - / )
  ( f#
  , Wk  / 18A 18A 21A - \
        | 18A 18A 21A - |
        | 18A 18A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [n#, f] |-> [f#, n] {- DP (Top 0) (Input 4) -}
  [f] ->= [n, c, c] {- DP Nontop (Input 0) -}
  [c, f] ->= [f, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [c] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s, s] {- DP Nontop (Input 3) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 4) -}
reason
  (s, 0/1)
  (n, 0/1)
  (f, 0/1)
  (c, 0/1)
  (n#, 1/1)
  (f#, 0/1)
   property Termination
has value Just True
for SRS
  [f] ->= [n, c, c] {- DP Nontop (Input 0) -}
  [c, f] ->= [f, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [c] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s, s] {- DP Nontop (Input 3) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 4) -}
reason
  EDG

**************************************************
skeleton: (5,4)\Deepee(9/5,7)\Weight(3/5,6)\EDG(2/5,6)\Matrix{\Arctic}{3}(1/5,6)\Weight(0/5,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let CNF 9387 vars 39373 clauses
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S        = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S        = 5 , total_length = 30} , self = 45 , parent = Nothing , duration = 0.220463335000
S        , status = Success , start = 2025-09-03 13:27:48.361525927 UTC , finish
S        = 2025-09-03 13:27:48.581989262 UTC , thread_cap_info = ("ThreadId 78",
S        1, False)}
S        
| E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| E      = 5 , total_length = 30} , self = 47 , parent = Nothing , duration = 0.217222158000
| E      , status = Except "AsyncCancelled" , start = 2025-09-03 13:27:48.364995139
| E      UTC , finish = 2025-09-03 13:27:48.582217297 UTC , thread_cap_info = ("ThreadId
| E      80", 1, False)}
| E      
| | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | S    = 6 , total_length = 29} , self = 61 , parent = Nothing , duration = 0.366807041000
| | S    , status = Success , start = 2025-09-03 13:27:48.407997087 UTC , finish
| | S    = 2025-09-03 13:27:48.774804128 UTC , thread_cap_info = ("ThreadId 82",
| | S    1, False)}
| | S    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E  = 6 , total_length = 29} , self = 63 , parent = Nothing , duration = 0.348649046000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:27:48.426392549
| | | E  UTC , finish = 2025-09-03 13:27:48.775041595 UTC , thread_cap_info = ("ThreadId
| | | E  85", 1, False)}
| | | E  
S | | |  
  E | |  
    S |  
      E  
