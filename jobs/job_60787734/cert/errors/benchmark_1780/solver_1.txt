last 653 length 2678
CNF 653 vars 2678 clauses
last 601 length 2634
last 298 length 1208
CNF 601 vars 2634 clauses
last 339 length 1344
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2494, clauses: 9151
CNF 298 vars 1208 clauses
last 2494 length 9151
CNF 339 vars 1344 clauses
CNF 2494 vars 9151 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2494, clauses: 9151, status: Satisfied, time: 0.020758408s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1559, clauses: 5511
last 1559 length 5511
CNF 1559 vars 5511 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1559, clauses: 5511, status: Satisfied, time: 0.080501043s
last 335 length 1343
last 321 length 1261
CNF 335 vars 1343 clauses
last 291 length 1187
last 293 length 1174
CNF 321 vars 1261 clauses
CNF 293 vars 1174 clauses
CNF 291 vars 1187 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1755, clauses: 6137
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1451, clauses: 5082
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5159, clauses: 21167
last 1755 length 6137
last 5159 length 21167
last 1451 length 5082
CNF 1755 vars 6137 clauses
last 2774 length 12593
last 3137 length 13862
CNF 5159 vars 21167 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4492, clauses: 18453
last 3306 length 14590
CNF 1451 vars 5082 clauses
last 4061 length 17476
last 3566 length 15711
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1755, clauses: 6137, status: Unsatisfied, time: 0.177842415s
last 3759 length 18158
CNF 2774 vars 12593 clauses
CNF 3137 vars 13862 clauses
last 4492 length 18453
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5159, clauses: 21167, status: Unsatisfied, time: 0.298375046s
CNF 3306 vars 14590 clauses
CNF 4061 vars 17476 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1451, clauses: 5082, status: Satisfied, time: 0.320780153s
CNF 3566 vars 15711 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3148, clauses: 12373
CNF 3759 vars 18158 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2860, clauses: 10696
CNF 4492 vars 18453 clauses
last 3148 length 12373
last 2860 length 10696
CNF 3148 vars 12373 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7153, clauses: 26086
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8420, clauses: 31197
last 7153 length 26086

CNF 2860 vars 10696 clauses
last 8420 length 31197
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3148, clauses: 12373, status: Satisfied, time: 0.260236175s
CNF 7153 vars 26086 clauses
summary
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2860, clauses: 10696, status: Unsatisfied, time: 0.203483569s
CNF 8420 vars 31197 clauses
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 7 strict rules and 3 weak rules on 5 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
  SRS with 1 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [b, a, a, a] {- Input 0 -}
  [b, a] -> [a, a] {- Input 1 -}
  [a, a] -> [a, c, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [a, a, a, b] {- Mirror (Input 0) -}
  [a, b] -> [a, a] {- Mirror (Input 1) -}
  [a, a] -> [b, c, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [b#, c, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
      [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
      [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [a#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 1A 2A 2A - \
        | 1A 2A 2A - |
        | 1A 2A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 2A 2A 3A - \
        | 2A 2A 3A - |
        | 2A 2A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, a] ->= [a, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [b, c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(7/3,5)\EDG[(1/3,4)\Usable(1,2)\Weight(0,0)\EDG[],(2/3,4)\Matrix{\Arctic}{3}\EDG(1/3,4)\Matrix{\Arctic}{3}(0/3,3)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.536950479000
  min duration 0.018477047000
  total durat. 1.523803171000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.506129742000
  min duration 0.010599908000
  total durat. 1.501289331000
**************************************************
E                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                      = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E                      = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 15} , self
E                      = 91 , parent = Nothing , duration = 0.988810219000 , status = Except "AsyncCancelled"
E                      , start = 2025-09-03 13:08:40.030684935 UTC , finish = 2025-09-03 13:08:41.019495154
E                      UTC , thread_cap_info = ("ThreadId 22", 0, False)}
E                      
| E                    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E                    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E                    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E                    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E                    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E                    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E                    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| E                    = 5 , total_length = 40} , self = 55 , parent = Nothing , duration = 0.109351262000
| E                    , status = Except "AsyncCancelled" , start = 2025-09-03 13:08:40.10381043
| E                    UTC , finish = 2025-09-03 13:08:40.213161692 UTC , thread_cap_info = ("ThreadId
| E                    85", 1, False)}
| E                    
| E                    
| F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F                    = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| F                    = 129} , self = 80 , parent = Nothing , duration = 0.536950479000 , status
| F                    = Fail , start = 2025-09-03 13:08:40.223131052 UTC , finish = 2025-09-03
| F                    13:08:40.760081531 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| F                    
| | F                  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F                  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F                  = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | F                  = 5 , total_length = 22} , self = 78 , parent = Nothing , duration = 0.406491551000
| | F                  , status = Fail , start = 2025-09-03 13:08:40.231070561 UTC , finish =
| | F                  2025-09-03 13:08:40.637562112 UTC , thread_cap_info = ("ThreadId 120",
| | F                  1, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F                = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| | | F                = 129} , self = 79 , parent = Nothing , duration = 0.506129742000 , status
| | | F                = Fail , start = 2025-09-03 13:08:40.239464271 UTC , finish = 2025-09-03
| | | F                13:08:40.745594013 UTC , thread_cap_info = ("ThreadId 103", 3, False)}
| | | F                
| | | | F              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | F              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | F              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | F              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | F              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | F              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | F              , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | F              = 5 , total_length = 22} , self = 81 , parent = Nothing , duration = 0.532210622000
| | | | F              , status = Fail , start = 2025-09-03 13:08:40.247715916 UTC , finish =
| | | | F              2025-09-03 13:08:40.779926538 UTC , thread_cap_info = ("ThreadId 122",
| | | | F              1, False)}
| | | | F              
| | | | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S            = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | | S            = 4 , total_length = 19} , self = 82 , parent = Nothing , duration = 0.533457661000
| | | | | S            , status = Success , start = 2025-09-03 13:08:40.279505576 UTC , finish
| | | | | S            = 2025-09-03 13:08:40.812963237 UTC , thread_cap_info = ("ThreadId 123",
| | | | | S            1, False)}
| | | | | S            
| | | | | | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | | | E          , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | | | E          = 4 , total_length = 19} , self = 88 , parent = Nothing , duration = 0.636410086000
| | | | | | E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:08:40.304951188
| | | | | | E          UTC , finish = 2025-09-03 13:08:40.941361274 UTC , thread_cap_info = ("ThreadId
| | | | | | E          125", 1, False)}
| | | | | | E          
| | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | F        = 9 , num_top_rules = 9 , num_weak_rules = 18 , alphabet_size = 12 , total_length
| | | | | | | F        = 173} , self = 85 , parent = Nothing , duration = 0.461113452000 , status
| | | | | | | F        = Fail , start = 2025-09-03 13:08:40.359478816 UTC , finish = 2025-09-03
| | | | | | | F        13:08:40.820592268 UTC , thread_cap_info = ("ThreadId 127", 3, False)}
| | | | | | | F        
| | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | F      = 9 , num_top_rules = 9 , num_weak_rules = 18 , alphabet_size = 12 , total_length
| | | | | | | | F      = 173} , self = 84 , parent = Nothing , duration = 0.441118360000 , status
| | | | | | | | F      = Fail , start = 2025-09-03 13:08:40.379473269 UTC , finish = 2025-09-03
| | | | | | | | F      13:08:40.820591629 UTC , thread_cap_info = ("ThreadId 128", 1, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | F    = 139} , self = 87 , parent = Nothing , duration = 0.422025303000 , status
| | | | | | | | | F    = Fail , start = 2025-09-03 13:08:40.419466351 UTC , finish = 2025-09-03
| | | | | | | | | F    13:08:40.841491654 UTC , thread_cap_info = ("ThreadId 132", 3, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 18 , alphabet_size = 9 , total_length
| | | | | | | | | | F  = 139} , self = 86 , parent = Nothing , duration = 0.371692735000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-03 13:08:40.458715098 UTC , finish = 2025-09-03
| | | | | | | | | | F  13:08:40.830407833 UTC , thread_cap_info = ("ThreadId 134", 1, False)}
| | | | | | | | | | F  
| | F | | | | | | | |  
| |   F | | | | | | |  
| F     | | | | | | |  
|       F | | | | | |  
|         S | | | | |  
|           | | F | |  
|           | F   | |  
|           |     | F  
|           |     F    
|           E          
E                      
