last 1881 length 10247
CNF 1881 vars 10247 clauses
last 2960 length 19053
last 3781 length 30025
CNF 2960 vars 19053 clauses
CNF 3781 vars 30025 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3604, clauses: 13093
last 3604 length 13093
CNF 3604 vars 13093 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4058, clauses: 14703
last 4058 length 14703
CNF 4058 vars 14703 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3604, clauses: 13093, status: Satisfied, time: 0.202252064s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13660, clauses: 57157
last 6274 length 43018
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4058, clauses: 14703, status: Unsatisfied, time: 0.153432087s
**************************************************
summary
**************************************************
SRS with 7 rules on 5 letters       weights
SRS with 5 rules on 5 letters       context
SRS with 9 rules on 5 letters       mirror
SRS with 9 rules on 5 letters       DP
SRS with 17 strict rules and 9 weak rules on 7 letters       weights
SRS with 5 strict rules and 9 weak rules on 7 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 9 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 9 weak rules on 5 letters       EDG

  2 SRS with 1 strict rules and 9 weak rules on 6 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [q, 0] -> [p, p, s, s, 0, s, s, s, s] {- Input 0 -}
  [q, s] -> [p, p, s, s, s, s, s, s, r, p, p, s, s] {- Input 1 -}
  [r, 0] -> [p, s, p, s, 0, p, p, p, s, s, s] {- Input 2 -}
  [r, s] -> [p, s, p, s, s, q, p, s, p, s] {- Input 3 -}
  [p, p, s] -> [p] {- Input 4 -}
  [p, s] -> [] {- Input 5 -}
  [p, 0] -> [0, s, s, s] {- Input 6 -}
reason
  (s, 0/1)
  (p, 0/1)
  (0, 0/1)
  (r, 1/1)
  (q, 1/1)
   property Termination
has value Just True
for SRS
  [q, s] -> [p, p, s, s, s, s, s, s, r, p, p, s, s] {- Input 1 -}
  [r, s] -> [p, s, p, s, s, q, p, s, p, s] {- Input 3 -}
  [p, p, s] -> [p] {- Input 4 -}
  [p, s] -> [] {- Input 5 -}
  [p, 0] -> [0, s, s, s] {- Input 6 -}
reason
  context
   property Termination
has value Just True
for SRS
  [q, s] -> [p, p, s, s, s, s, s, s, r, p, p, s, s] {- Input 1 -}
  [r, s] -> [p, s, p, s, s, q, p, s, p, s] {- Input 3 -}
  [p, p, s] -> [p] {- Input 4 -}
  [s, p, s] -> [s] {- Input 5 -}
  [p, p, s] -> [p] {- Input 5 -}
  [0, p, s] -> [0] {- Input 5 -}
  [r, p, s] -> [r] {- Input 5 -}
  [q, p, s] -> [q] {- Input 5 -}
  [p, 0] -> [0, s, s, s] {- Input 6 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [s, q] -> [s, s, p, p, r, s, s, s, s, s, s, p, p] {- Mirror (Input 1) -}
  [s, r] -> [s, p, s, p, q, s, s, p, s, p] {- Mirror (Input 3) -}
  [s, p, p] -> [p] {- Mirror (Input 4) -}
  [s, p, s] -> [s] {- Mirror (Input 5) -}
  [s, p, p] -> [p] {- Mirror (Input 5) -}
  [s, p, 0] -> [0] {- Mirror (Input 5) -}
  [s, p, r] -> [r] {- Mirror (Input 5) -}
  [s, p, q] -> [q] {- Mirror (Input 5) -}
  [0, p] -> [s, s, s, 0] {- Mirror (Input 6) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
  [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
  [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s#, r] |-> [s#, s, p, s, p] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, r] |-> [s#, p] {- DP (Top 8) (Mirror (Input 3)) -}
  [s#, r] |-> [s#, p, s, p] {- DP (Top 6) (Mirror (Input 3)) -}
  [s#, r] |-> [s#, p, s, p, q, s, s, p, s, p] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, r] |-> [s#, p, q, s, s, p, s, p] {- DP (Top 2) (Mirror (Input 3)) -}
  [s#, q] |-> [s#, s, s, s, s, s, p, p] {- DP (Top 5) (Mirror (Input 1)) -}
  [s#, q] |-> [s#, s, s, s, s, p, p] {- DP (Top 6) (Mirror (Input 1)) -}
  [s#, q] |-> [s#, s, s, s, p, p] {- DP (Top 7) (Mirror (Input 1)) -}
  [s#, q] |-> [s#, s, s, p, p] {- DP (Top 8) (Mirror (Input 1)) -}
  [s#, q] |-> [s#, s, p, p] {- DP (Top 9) (Mirror (Input 1)) -}
  [s#, q] |-> [ s# , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, q] |-> [s#, p, p] {- DP (Top 10) (Mirror (Input 1)) -}
  [s#, q] |-> [ s# , p , p , r , s , s , s , s , s , s , p , p ] {- DP (Top 1) (Mirror (Input 1)) -}
  [0#, p] |-> [s#, s, s, 0] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, p] |-> [s#, s, 0] {- DP (Top 1) (Mirror (Input 6)) -}
  [0#, p] |-> [s#, 0] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
reason
CNF 6274 vars 43018 clauses
  (s, 0/1)
  (p, 0/1)
  (0, 0/1)
  (r, 1/1)
  (q, 1/1)
  (s#, 0/1)
  (0#, 1/1)
   property Termination
has value Just True
for SRS
  [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
  [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
  [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s#, r] |-> [s#, p, s, p, q, s, s, p, s, p] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, r] |-> [s#, p, q, s, s, p, s, p] {- DP (Top 2) (Mirror (Input 3)) -}
  [s#, q] |-> [ s# , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, q] |-> [ s# , p , p , r , s , s , s , s , s , s , p , p ] {- DP (Top 1) (Mirror (Input 1)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, q] |-> [ s# , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
  [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
  [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( s
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( r
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( q
  , Wk  / 3A 6A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( s#
  , Wk  / 12A 13A 13A - \
        | 12A 13A 13A - |
        | 12A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
  [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
  [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
  [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
  [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
  [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
reason
  remove un-usable
    SRS
      [s, q] ->= [ s , s , p , p , r , s , s , s , s , s , s , p , p ] {- DP Nontop (Mirror (Input 1)) -}
      [s, r] ->= [s, p, s, p, q, s, s, p, s, p] {- DP Nontop (Mirror (Input 3)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 4)) -}
      [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 5)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 5)) -}
      [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 5)) -}
      [s, p, r] ->= [r] {- DP Nontop (Mirror (Input 5)) -}
      [s, p, q] ->= [q] {- DP Nontop (Mirror (Input 5)) -}
      [0, p] ->= [s, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
reason
  (p, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (7,5)\Weight(5,5)\Context\Mirror(9,5)\Deepee(17/9,7)\Weight(5/9,7)\EDG[(1/9,6)\Matrix{\Arctic}{3}(0/9,5)\EDG[],(1/9,6)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F      = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 6 , total_length
F      = 72} , self = 51 , parent = Nothing , duration = 0.108119887000 , status
F      = Fail , start = 2025-09-03 13:38:39.380884869 UTC , finish = 2025-09-03
F      13:38:39.489004756 UTC , thread_cap_info = ("ThreadId 54", 1, False)}
F      
| F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F    = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 6 , total_length
| F    = 72} , self = 52 , parent = Nothing , duration = 0.121801063000 , status
| F    = Fail , start = 2025-09-03 13:38:39.38354077 UTC , finish = 2025-09-03
| F    13:38:39.505341833 UTC , thread_cap_info = ("ThreadId 58", 1, False)}
| F    
| | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S  verbose = False}" , input_size = Size { num_rules = 231 , num_strict_rules
| | S  = 133 , num_top_rules = 133 , num_weak_rules = 98 , alphabet_size = 37
| | S  , total_length = 2488} , self = 53 , parent = Nothing , duration = 0.105864260000
| | S  , status = Success , start = 2025-09-03 13:38:39.44528086 UTC , finish
| | S  = 2025-09-03 13:38:39.55114512 UTC , thread_cap_info = ("ThreadId 71",
| | S  0, False)}
| | S  
F | |  
S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | |  = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
S | |  alphabet_size = 6 , total_length = 72} , self = 60 , parent = Nothing ,
S | |  duration = 0.255525777000 , status = Success , start = 2025-09-03 13:38:39.495686098
S | |  UTC , finish = 2025-09-03 13:38:39.751211875 UTC , thread_cap_info = ("ThreadId
S | |  94", 1, False)}
S | |  
| F |  
| E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| E |  = 6 , total_length = 72} , self = 62 , parent = Nothing , duration = 0.246041510000
| E |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:38:39.523500705
| E |  UTC , finish = 2025-09-03 13:38:39.769542215 UTC , thread_cap_info = ("ThreadId
| E |  96", 1, False)}
| E |  
| | S  
S |    
  E    
