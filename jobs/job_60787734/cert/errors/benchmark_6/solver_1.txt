last 703 length 2761
last 553 length 2157
CNF 703 vars 2761 clauses
last 779 length 3221
last 657 length 2703
CNF 553 vars 2157 clauses
CNF 657 vars 2703 clauses
CNF 779 vars 3221 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2187, clauses: 8054
last 2187 length 8054
last 1994 length 8087
CNF 1994 vars 8087 clauses
last 3472 length 14557
CNF 3472 vars 14557 clauses
last 2706 length 11885
CNF 2706 vars 11885 clauses
CNF 2187 vars 8054 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1792, clauses: 6574
last 1792 length 6574
CNF 1792 vars 6574 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2187, clauses: 8054, status: Satisfied, time: 0.083061736s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1792, clauses: 6574, status: Satisfied, time: 0.031380075s
last 3855 length 16932
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5939, clauses: 24777
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6604, clauses: 27513
last 509 length 2081
CNF 3855 vars 16932 clauses
last 477 length 1883
CNF 509 vars 2081 clauses
last 4088 length 18030
**************************************************last 3246 length 13332

CNF 477 vars 1883 clauses
CNF 4088 vars 18030 clauses
CNF 3246 vars 13332 clauses
summary
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 4 strict rules and 3 weak rules on Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5408, clauses: 20820
4 last 5408 length 20820
letters       weights
SRS with 3 strict rules and 3 weak rules on 4 letters       EDG
SRS with 3 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 4 letters       weights
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a] -> [b, b, a] {- Input 0 -}
  [a, b, a] -> [b, b, a] {- Input 1 -}
  [b, a, b] -> [a, a, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, b, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b] {- DP Nontop (Input 2) -}
  [a#, a, a] |-> [b#, a] {- DP (Top 1) (Input 0) -}
  [a#, a, a] |-> [b#, b, a] {- DP (Top 0) (Input 0) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [b#, a, b] |-> [a#, a, b] {- DP (Top 0) (Input 2) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, b, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b] {- DP Nontop (Input 2) -}
  [a#, a, a] |-> [b#, b, a] {- DP (Top 0) (Input 0) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [b#, a, b] |-> [a#, a, b] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a] |-> [b#, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, b] |-> [a#, a, b] {- DP (Top 0) (Input 2) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [a, a, a] ->= [b, b, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 3A 6A 6A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, a] |-> [b#, b, a] {- DP (Top 0) (Input 0) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [a, a, a] ->= [b, b, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [b, b, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, a, b] ->= [a, a, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee(4/3,4)\Weight\EDG(3/3,4)\Matrix{\Arctic}{3}(2/3,4)\Weight(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 5408 vars 20820 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F              = 18} , self = 67 , parent = Nothing , duration = 0.241857307000 , status
F              = Fail , start = 2025-09-03 10:45:22.126345297 UTC , finish = 2025-09-03
F              10:45:22.368202604 UTC , thread_cap_info = ("ThreadId 36", 1, False)}
F              
| S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S            = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| S            = 3 , total_length = 30} , self = 64 , parent = Nothing , duration = 0.152151792000
| S            , status = Success , start = 2025-09-03 10:45:22.175501674 UTC , finish
| S            = 2025-09-03 10:45:22.327653466 UTC , thread_cap_info = ("ThreadId 92",
| S            0, False)}
| S            
| | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | E          , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | E          = 3 , total_length = 30} , self = 68 , parent = Nothing , duration = 0.207682624000
| | E          , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:22.17756017
| | E          UTC , finish = 2025-09-03 10:45:22.385242794 UTC , thread_cap_info = ("ThreadId
| | E          93", 0, False)}
| | E          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | F        = 4 , num_top_rules = 4 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | F        = 128} , self = 62 , parent = Nothing , duration = 0.143044769000 , status
| | | F        = Fail , start = 2025-09-03 10:45:22.177564687 UTC , finish = 2025-09-03
| | | F        10:45:22.320609456 UTC , thread_cap_info = ("ThreadId 90", 2, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F      = 96} , self = 60 , parent = Nothing , duration = 0.121593122000 , status
| | | | F      = Fail , start = 2025-09-03 10:45:22.177591926 UTC , finish = 2025-09-03
| | | | F      10:45:22.299185048 UTC , thread_cap_info = ("ThreadId 96", 1, False)}
| | | | F      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | S    = 4 , total_length = 36} , self = 63 , parent = Nothing , duration = 0.105769048000
| | | | | S    , status = Success , start = 2025-09-03 10:45:22.217565442 UTC , finish
| | | | | S    = 2025-09-03 10:45:22.32333449 UTC , thread_cap_info = ("ThreadId 101",
| | | | | S    0, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | E  = 4 , total_length = 36} , self = 73 , parent = Nothing , duration = 0.157681251000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:22.240372399
| | | | | | E  UTC , finish = 2025-09-03 10:45:22.39805365 UTC , thread_cap_info = ("ThreadId
| | | | | | E  103", 0, False)}
| | | | | | E  
| | | | F | |  
| | | F   | |  
| | |     S |  
| S |       |  
F   |       |  
    E       |  
            E  
