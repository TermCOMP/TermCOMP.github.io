last 254 length 979
last 220 length 857
CNF 254 vars 979 clauses
last 350 length 1445
CNF 220 vars 857 clauses
last 309 length 1296
CNF 350 vars 1445 clauses
CNF 309 vars 1296 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1442, clauses: 5040
last 1442 length 5040
last 3616 length 18850
CNF 3616 vars 18850 clauses
CNF 1442 vars 5040 clauses
last 3507 length 15786
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1838, clauses: 6441
last 1838 length 6441
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1442, clauses: 5040, status: Satisfied, time: 0.05460934s
CNF 3507 vars 15786 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4375, clauses: 17773
CNF 1838 vars 6441 clauses
last 174 length 687
last 302 length 1275
last 4375 length 17773
last 6502 length 29677
last 7974 length 33689
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1838, clauses: 6441, status: Satisfied, time: 0.129500049s
CNF 174 vars 687 clauses
CNF 302 vars 1275 clauses
last 9642 length 46370
CNF 6502 vars 29677 clauses
last 343 length 1424
last 208 length 809
CNF 7974 vars 33689 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1334, clauses: 4611
last 13244 length 56884
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3908, clauses: 15947
CNF 208 vars 809 clauses
CNF 9642 vars 46370 clauses
CNF 343 vars 1424 clauses
last 1334 length 4611
last 3908 length 15947
CNF 13244 vars 56884 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1732, clauses: 6016
CNF 1334 vars 4611 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4329, clauses: 17597
CNF 3908 vars 15947 clauses
last 1732 length 6016
last 4329 length 17597
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1334, clauses: 4611, status: Satisfied, time: 0.326873881s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3908, clauses: 15947, status: Satisfied, time: 0.367436371s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 22685, clauses: 89802
CNF 4329 vars 17597 clauses
CNF 1732 vars 6016 clauses
last 22685 length 89802
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1732, clauses: 6016, status: Unsatisfied, time: 0.317676115s
CNF 22685 vars 89802 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       weights
SRS with 4 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 5 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
  SRS with 1 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, c, a, b] {- Input 1 -}
  [b, b] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [b, a, c, c] {- Mirror (Input 1) -}
  [b, b] -> [a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, c, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, a, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
      [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (b, 2/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 1A 0A 1A \
        | 1A 0A -  |
        \ -  -  0A / )
  ( b
  , Wk  / -  0A 1A \
        | 1A 0A -  |
        \ -  -  0A / )
  ( c
  , Wk  / 0A -1A -   \
        | 1A -   -1A |
        \ -  -   0A  / )
  ( c#
  , Wk  / 0A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(6/3,6)\Weight(4/3,6)\EDG[(2/3,5)\Usable(2,3)\Weight(0,0)\EDG[],(2/3,4)\Matrix{\Arctic}{3}\EDG(1/3,4)\Matrix{\ArcticBZ}{3}(0/3,3)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.580334829000
  min duration 0.015733564000
  total durat. 1.615855164000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.407769690000
  min duration 0.006128090000
  total durat. 1.309013656000
**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                  = 153} , self = 69 , parent = Nothing , duration = 0.133490030000 , status
F                  = Fail , start = 2025-09-03 10:52:22.858308691 UTC , finish = 2025-09-03
F                  10:52:22.991798721 UTC , thread_cap_info = ("ThreadId 81", 3, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 11} , self = 79 , parent = Nothing , duration = 0.407659126000 , status
| F                = Fail , start = 2025-09-03 10:52:22.866219345 UTC , finish = 2025-09-03
| F                10:52:23.273878471 UTC , thread_cap_info = ("ThreadId 53", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 153} , self = 60 , parent = Nothing , duration = 0.107742331000 , status
| | F              = Fail , start = 2025-09-03 10:52:22.866227783 UTC , finish = 2025-09-03
| | F              10:52:22.973970114 UTC , thread_cap_info = ("ThreadId 83", 3, False)}
| | F              
| | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S            = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | S            = 5 , total_length = 23} , self = 70 , parent = Nothing , duration = 0.315254986000
| | | S            , status = Success , start = 2025-09-03 10:52:22.876317363 UTC , finish
| | | S            = 2025-09-03 10:52:23.191572349 UTC , thread_cap_info = ("ThreadId 95",
| | | S            1, False)}
| | | S            
| | | | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E          , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | E          = 5 , total_length = 23} , self = 72 , parent = Nothing , duration = 0.305602579000
| | | | E          , status = Except "AsyncCancelled" , start = 2025-09-03 10:52:22.886178141
| | | | E          UTC , finish = 2025-09-03 10:52:23.19178072 UTC , thread_cap_info = ("ThreadId
| | | | E          96", 1, False)}
| | | | E          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | | F        = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | F        total_length = 372} , self = 84 , parent = Nothing , duration = 0.482272168000
| | | | | F        , status = Fail , start = 2025-09-03 10:52:22.886199212 UTC , finish =
| | | | | F        2025-09-03 10:52:23.36847138 UTC , thread_cap_info = ("ThreadId 103", 2,
| | | | | F        False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | | | F      = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | F      total_length = 372} , self = 80 , parent = Nothing , duration = 0.407769690000
| | | | | | F      , status = Fail , start = 2025-09-03 10:52:22.907210854 UTC , finish =
| | | | | | F      2025-09-03 10:52:23.314980544 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | F      2, False)}
| | | | | | F      
| | F | | | |      
| | F | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F | | | |      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | F | | | |      = 15} , self = 77 , parent = Nothing , duration = 0.255277900000 , status
| | F | | | |      = Fail , start = 2025-09-03 10:52:22.98379417 UTC , finish = 2025-09-03
| | F | | | |      10:52:23.23907207 UTC , thread_cap_info = ("ThreadId 116", 1, False)}
| | F | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | F    = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | | | F    = 15} , self = 78 , parent = Nothing , duration = 0.263576214000 , status
| | | | | | | F    = Fail , start = 2025-09-03 10:52:22.984472811 UTC , finish = 2025-09-03
| | | | | | | F    10:52:23.248049025 UTC , thread_cap_info = ("ThreadId 117", 1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 108 , num_strict_rules
| | | | | | | | F  = 81 , num_top_rules = 81 , num_weak_rules = 27 , alphabet_size = 18 ,
| | | | | | | | F  total_length = 567} , self = 83 , parent = Nothing , duration = 0.371408190000
| | | | | | | | F  , status = Fail , start = 2025-09-03 10:52:22.989224627 UTC , finish =
| | | | | | | | F  2025-09-03 10:52:23.360632817 UTC , thread_cap_info = ("ThreadId 119",
| | | | | | | | F  2, False)}
| | | | | | | | F  
F | | | | | | | |  
F | | | | | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 108 , num_strict_rules
F | | | | | | | |  = 81 , num_top_rules = 81 , num_weak_rules = 27 , alphabet_size = 18 ,
F | | | | | | | |  total_length = 567} , self = 85 , parent = Nothing , duration = 0.580334829000
F | | | | | | | |  , status = Fail , start = 2025-09-03 10:52:23.006933529 UTC , finish =
F | | | | | | | |  2025-09-03 10:52:23.587268358 UTC , thread_cap_info = ("ThreadId 118",
F | | | | | | | |  1, False)}
F | | | | | | | |  
| | | S | | | | |  
| | |   E | | | |  
| | | F   | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | F   | | | |  = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 5 , total_length
| | | F   | | | |  = 20} , self = 81 , parent = Nothing , duration = 0.130649644000 , status
| | | F   | | | |  = Fail , start = 2025-09-03 10:52:23.1919471 UTC , finish = 2025-09-03
| | | F   | | | |  10:52:23.322596744 UTC , thread_cap_info = ("ThreadId 130", 1, False)}
| | | F   | | | |  
| | | | F | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F | | | |  = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 5 , total_length
| | | | F | | | |  = 20} , self = 82 , parent = Nothing , duration = 0.136633811000 , status
| | | | F | | | |  = Fail , start = 2025-09-03 10:52:23.191948382 UTC , finish = 2025-09-03
| | | | F | | | |  10:52:23.328582193 UTC , thread_cap_info = ("ThreadId 131", 1, False)}
| | | | F | | | |  
| | F | | | | | |  
| | S | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | | | | | |  = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | S | | | | | |  = 4 , total_length = 15} , self = 86 , parent = Nothing , duration = 0.516974377000
| | S | | | | | |  , status = Success , start = 2025-09-03 10:52:23.239111226 UTC , finish
| | S | | | | | |  = 2025-09-03 10:52:23.756085603 UTC , thread_cap_info = ("ThreadId 133",
| | S | | | | | |  1, False)}
| | S | | | | | |  
| | | | | | | F |  
| | | | | | | S |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | | | | S |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | | | | S |  = 4 , total_length = 15} , self = 87 , parent = Nothing , duration = 0.507566760000
| | | | | | | S |  , status = Success , start = 2025-09-03 10:52:23.248694317 UTC , finish
| | | | | | | S |  = 2025-09-03 10:52:23.756261077 UTC , thread_cap_info = ("ThreadId 134",
| | | | | | | S |  1, False)}
| | | | | | | S |  
| F | | | | | | |  
|   | | | | F | |  
|   | F | |   | |  
| F |   | |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F |   | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |   | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |   | |   | |  = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| F |   | |   | |  = 5 , total_length = 20} , self = 92 , parent = Nothing , duration = 0.548214672000
| F |   | |   | |  , status = Fail , start = 2025-09-03 10:52:23.322624917 UTC , finish =
| F |   | |   | |  2025-09-03 10:52:23.870839589 UTC , thread_cap_info = ("ThreadId 140",
| F |   | |   | |  1, False)}
| F |   | |   | |  
| | |   F |   | |  
| | |     |   | F  
| | |     F   |    
F | |         |    
  | S         |    
  |           S    
  F                
