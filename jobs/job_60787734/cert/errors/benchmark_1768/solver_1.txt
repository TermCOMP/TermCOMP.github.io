last 977 length 4088
CNF 977 vars 4088 clauses
last 891 length 3889
CNF 891 vars 3889 clauses
last 608 length 2528
last 584 length 2447
last 4009 length 21106
CNF 4009 vars 21106 clauses
CNF 608 vars 2528 clauses
CNF 584 vars 2447 clauses
last 4095 length 19234
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2820, clauses: 10592
last 6401 length 34550
last 5137 length 24748
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2301, clauses: 8366
last 5695 length 28988
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7929, clauses: 32941
last 7015 length 42135
CNF 4095 vars 19234 clauses
last 2820 length 10592
CNF 6401 vars 34550 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7220, clauses: 30033
last 2301 length 8366
CNF 5137 vars 24748 clauses
last 7929 length 32941
CNF 5695 vars 28988 clauses
CNF 7015 vars 42135 clauses
CNF 2820 vars 10592 clauses
last 7220 length 30033
CNF 2301 vars 8366 clauses
CNF 7929 vars 32941 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2820, clauses: 10592, status: Satisfied, time: 0.341818213s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7700, clauses: 28323
CNF 7220 vars 30033 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2301, clauses: 8366, status: Satisfied, time: 0.280839794s
last 5341 length 23844
last 4827 length 23363
last 7700 length 28323
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7220, clauses: 30033, status: Satisfied, time: 0.395910512s

CNF 4827 vars 23363 clauses
CNF 5341 vars 23844 clauses
CNF 7700 vars 28323 clauses
summary
**************************************************
SRS with 4 rules on 4 letters       weights
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 5 letters       EDG
SRS with 5 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 5 letters       weights
SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b, c] {- Input 0 -}
  [b] -> [c, c] {- Input 1 -}
  [c, d] -> [a, b, c, a] {- Input 2 -}
  [a, a] -> [a, c, b, a] {- Input 3 -}
reason
  (d, 1/1)
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b, c] {- Input 0 -}
  [b] -> [c, c] {- Input 1 -}
  [a, a] -> [a, c, b, a] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
  [a#, a] |-> [a#, c, b, a] {- DP (Top 0) (Input 3) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 3) -}
  [b#, c, a] |-> [a#, b, a, b, c] {- DP (Top 0) (Input 0) -}
  [b#, c, a] |-> [a#, b, c] {- DP (Top 2) (Input 0) -}
  [b#, c, a] |-> [b#, a, b, c] {- DP (Top 1) (Input 0) -}
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [a#, b, c] {- DP (Top 2) (Input 0) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 3) -}
  [b#, c, a] |-> [a#, b, a, b, c] {- DP (Top 0) (Input 0) -}
  [b#, c, a] |-> [b#, a, b, c] {- DP (Top 1) (Input 0) -}
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 3) -}
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
reason
  remove un-usable
    SRS
      [b, c, a] ->= [a, b, a, b, c] {- DP Nontop (Input 0) -}
      [b] ->= [c, c] {- DP Nontop (Input 1) -}
      [a, a] ->= [a, c, b, a] {- DP Nontop (Input 3) -}
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#, c] {- DP (Top 3) (Input 0) -}
reason
  (a, 1/1)
  (c, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (4,4)\Weight(3,3)\Deepee(6/3,5)\EDG(5/3,5)\Matrix{\Arctic}{3}(2/3,5)\Weight\EDG(1/3,4)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.469297466000
  min duration 0.044679502000
  total durat. 1.093676497000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.439052738000
  min duration 0.039535463000
  total durat. 1.219471504000
**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
F                  = 17 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
F                  = 142} , self = 62 , parent = Nothing , duration = 0.452214602000 , status
F                  = Fail , start = 2025-09-03 13:03:28.369054697 UTC , finish = 2025-09-03
F                  13:03:28.821269299 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
F                  
| F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| F                = 17 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| F                = 142} , self = 59 , parent = Nothing , duration = 0.115269242000 , status
| F                = Fail , start = 2025-09-03 13:03:28.381105918 UTC , finish = 2025-09-03
| F                13:03:28.49637516 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
| F                
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | F              = 3 , num_top_rules = 3 , num_weak_rules = 17 , alphabet_size = 9 , total_length
| | F              = 166} , self = 65 , parent = Nothing , duration = 0.469297466000 , status
| | F              = Fail , start = 2025-09-03 13:03:28.432498744 UTC , finish = 2025-09-03
| | F              13:03:28.90179621 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | F            = 3 , num_top_rules = 3 , num_weak_rules = 17 , alphabet_size = 9 , total_length
| | | F            = 166} , self = 63 , parent = Nothing , duration = 0.439052738000 , status
| | | F            = Fail , start = 2025-09-03 13:03:28.442919531 UTC , finish = 2025-09-03
| | | F            13:03:28.881972269 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | F          = 33} , self = 60 , parent = Nothing , duration = 0.127484927000 , status
| | | | F          = Fail , start = 2025-09-03 13:03:28.446363736 UTC , finish = 2025-09-03
| | | | F          13:03:28.573848663 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | F        = 33} , self = 61 , parent = Nothing , duration = 0.229696177000 , status
| | | | | F        = Fail , start = 2025-09-03 13:03:28.4520203 UTC , finish = 2025-09-03
| | | | | F        13:03:28.681716477 UTC , thread_cap_info = ("ThreadId 102", 0, False)}
| | | | | F        
| | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S      = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | | | S      = 5 , total_length = 47} , self = 73 , parent = Nothing , duration = 0.755681594000
| | | | | | S      , status = Success , start = 2025-09-03 13:03:28.464829438 UTC , finish
| | | | | | S      = 2025-09-03 13:03:29.220511032 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | S      0, False)}
| | | | | | S      
| | | | | | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | | | | | | S    = 2 , num_top_rules = 2 , num_weak_rules = 17 , alphabet_size = 9 , total_length
| | | | | | | S    = 156} , self = 66 , parent = Nothing , duration = 0.413029198000 , status
| | | | | | | S    = Success , start = 2025-09-03 13:03:28.489287869 UTC , finish = 2025-09-03
| | | | | | | S    13:03:28.902317067 UTC , thread_cap_info = ("ThreadId 105", 3, False)}
| | | | | | | S    
| F | | | | | |    
| F | | | | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| F | | | | | |    = 2 , num_top_rules = 2 , num_weak_rules = 17 , alphabet_size = 9 , total_length
| F | | | | | |    = 156} , self = 64 , parent = Nothing , duration = 0.395917884000 , status
| F | | | | | |    = Fail , start = 2025-09-03 13:03:28.499797548 UTC , finish = 2025-09-03
| F | | | | | |    13:03:28.895715432 UTC , thread_cap_info = ("ThreadId 106", 2, False)}
| F | | | | | |    
| | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | | | | | E  = 5 , total_length = 47} , self = 75 , parent = Nothing , duration = 0.729934711000
| | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:03:28.510998707
| | | | | | | | E  UTC , finish = 2025-09-03 13:03:29.240933418 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  109", 0, False)}
| | | | | | | | E  
| | | | F | | | |  
| | | |   F | | |  
F | | |     | | |  
  | | F     | | |  
  F |       | | |  
F   |       | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   |       | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   |       | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   |       | | |  = 19 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 17 ,
F   |       | | |  alphabet_size = 9 , total_length = 156} , self = 68 , parent = Nothing
F   |       | | |  , duration = 0.139973512000 , status = Fail , start = 2025-09-03 13:03:28.89981258
F   |       | | |  UTC , finish = 2025-09-03 13:03:29.039786092 UTC , thread_cap_info = ("ThreadId
F   |       | | |  123", 3, False)}
F   |       | | |  
|   F       | | |  
|           | S |  
F           |   |  
            S   |  
                E  
