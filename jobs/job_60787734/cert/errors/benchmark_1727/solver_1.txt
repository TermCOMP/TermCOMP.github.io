last 1494 length 7405
CNF 1494 vars 7405 clauses
last 1804 length 8834
CNF 1804 vars 8834 clauses
last 2154 length 9972
last 2338 length 11386
last 2679 length 12582
last 2791 length 13621
CNF 2154 vars 9972 clauses
CNF 2338 vars 11386 clauses
CNF 2791 vars 13621 clauses
CNF 2679 vars 12582 clauses
last 3699 length 17044
last 4266 length 22891
last 2120 length 10391
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 8538
last 2934 length 14016
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2057, clauses: 7941
CNF 3699 vars 17044 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2971, clauses: 11590
CNF 4266 vars 22891 clauses
last 2156 length 8538
CNF 2120 vars 10391 clauses
last 2057 length 7941
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6807, clauses: 28488
CNF 2934 vars 14016 clauses
last 2971 length 11590
CNF 2156 vars 8538 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7367, clauses: 30989
last 6807 length 28488
CNF 2057 vars 7941 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10181, clauses: 42739
CNF 2971 vars 11590 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1954, clauses: 7564
last 7367 length 30989
CNF 6807 vars 28488 clauses
last 10181 length 42739
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2057, clauses: 7941, status: Satisfied, time: 0.24439077s
last 1954 length 7564
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 8538, status: Unsatisfied, time: 0.269014383s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7031, clauses: 29589
CNF 7367 vars 30989 clauses
CNF 1954 vars 7564 clauses
CNF 10181 vars 42739 clauses
last 7031 length 29589
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2971, clauses: 11590, status: Satisfied, time: 0.280019429s
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4451, clauses: 19049

CNF 7031 vars 29589 clauses
last 4451 length 19049
summary
CNF 4451 vars 19049 clauses
**************************************************
SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 rules on 4 letters       weights
SRS with 2 rules on 4 letters       mirror
SRS with 2 rules on 4 letters       DP
SRS with 10 strict rules and 2 weak rules on 6 letters       weights
SRS with 6 strict rules and 2 weak rules on 6 letters       EDG
SRS with 2 strict rules and 2 weak rules on 5 letters       Usable
SRS with 2 strict rules and 1 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, a, b, a, a, a, b] -> [ a , a , b , a , a , a , b , a , b , a , b , a , b ] {- Input 0 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [ [b, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, b] ] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [ [b, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] ] -> [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [ [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, b] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [ [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [ [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, b] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [ [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] ] -> [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] , [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [ [b, b] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] -> [ [b, b] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [a, a] ] {- Mirror (Semlab 1 (Concon 0 (Input 0))) -}
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [a, a] ] {- Mirror (Semlab 1 (Concon 1 (Input 0))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [ [b, b] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 10) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 6) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 4) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 10) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 6) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 4) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, b]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([b, a]#, 0/1)
  ([b, b]#, 1/1)
   property Termination
has value Just True
for SRS
  [ [b, b] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 10) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 6) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 4) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, b]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, b]# , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 0) (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 10) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 6) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, b] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
reason
  remove un-usable
    SRS
      [ [b, b] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 0)))) -}
   property Termination
has value Just True
for SRS
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 10) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] |-> [ [b, a]# , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP (Top 6) (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
reason
  ( [a, a]
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( [a, b]
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( [b, a]
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( [b, a]#
  , Wk  / 15A 16A 16A - \
        | 15A 16A 16A - |
        | 15A 16A 16A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [ [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] ] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [a, a] , [a, a] , [b, a] , [a, b] , [a, a] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 0)))) -}
reason
  EDG

**************************************************
skeleton: (1,2)\TileAllAll{2}(4,4)\Weight\Mirror(2,4)\Deepee(10/2,6)\Weight(6/2,6)\EDG(2/2,5)\Usable(2/1,4)\Matrix{\Arctic}{3}(0/1,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1954, clauses: 7564, status: Unsatisfied, time: 0.133236994s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.395533692000
  min duration 0.114711355000
  total durat. 1.446992154000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.399653859000
  min duration 0.080803250000
  total durat. 1.485553782000
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 22} , self
F                  = 59 , parent = Nothing , duration = 0.423997318000 , status = Fail , start
F                  = 2025-09-03 12:54:19.610922381 UTC , finish = 2025-09-03 12:54:20.034919699
F                  UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| F                = 2 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                = 48} , self = 51 , parent = Nothing , duration = 0.114711355000 , status
| F                = Fail , start = 2025-09-03 12:54:19.612072249 UTC , finish = 2025-09-03
| F                12:54:19.726783604 UTC , thread_cap_info = ("ThreadId 53", 1, False)}
| F                
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | F              = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | F              = 56} , self = 58 , parent = Nothing , duration = 0.278495046000 , status
| | F              = Fail , start = 2025-09-03 12:54:19.707026089 UTC , finish = 2025-09-03
| | F              12:54:19.985521135 UTC , thread_cap_info = ("ThreadId 91", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F            = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | | F            = 56} , self = 61 , parent = Nothing , duration = 0.341025086000 , status
| | | F            = Fail , start = 2025-09-03 12:54:19.725407848 UTC , finish = 2025-09-03
| | | F            12:54:20.066432934 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | F            
| F | |            
| F | |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F | |            = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| F | |            = 64} , self = 60 , parent = Nothing , duration = 0.275774439000 , status
| F | |            = Fail , start = 2025-09-03 12:54:19.764423165 UTC , finish = 2025-09-03
| F | |            12:54:20.040197604 UTC , thread_cap_info = ("ThreadId 98", 2, False)}
| F | |            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | F          = 96} , self = 63 , parent = Nothing , duration = 0.382477622000 , status
| | | | F          = Fail , start = 2025-09-03 12:54:19.784093937 UTC , finish = 2025-09-03
| | | | F          12:54:20.166571559 UTC , thread_cap_info = ("ThreadId 100", 0, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F        = 64} , self = 64 , parent = Nothing , duration = 0.399653859000 , status
| | | | | F        = Fail , start = 2025-09-03 12:54:19.784094638 UTC , finish = 2025-09-03
| | | | | F        12:54:20.183748497 UTC , thread_cap_info = ("ThreadId 99", 2, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | | | F      = 96} , self = 62 , parent = Nothing , duration = 0.275761916000 , status
| | | | | | F      = Fail , start = 2025-09-03 12:54:19.804091919 UTC , finish = 2025-09-03
| | | | | | F      12:54:20.079853835 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | F    = 50} , self = 65 , parent = Nothing , duration = 0.395533692000 , status
| | | | | | | F    = Fail , start = 2025-09-03 12:54:19.904099915 UTC , finish = 2025-09-03
| | | | | | | F    12:54:20.299633607 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | | F  = 50} , self = 66 , parent = Nothing , duration = 0.388309671000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 12:54:19.924147673 UTC , finish = 2025-09-03
| | | | | | | | F  12:54:20.312457344 UTC , thread_cap_info = ("ThreadId 110", 0, False)}
| | | | | | | | F  
| | F | | | | | |  
F |   | | | | | |  
S |   | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   | | | | | |  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
S |   | | | | | |  = 4 , total_length = 56} , self = 67 , parent = Nothing , duration = 0.380654116000
S |   | | | | | |  , status = Success , start = 2025-09-03 12:54:20.038393972 UTC , finish
S |   | | | | | |  = 2025-09-03 12:54:20.419048088 UTC , thread_cap_info = ("ThreadId 111",
S |   | | | | | |  0, False)}
S |   | | | | | |  
| F   | | | | | |  
| F   | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F   | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F   | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F   | | | | | |  = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| F   | | | | | |  = 3 , total_length = 64} , self = 69 , parent = Nothing , duration = 0.383970351000
| F   | | | | | |  , status = Fail , start = 2025-09-03 12:54:20.040217952 UTC , finish =
| F   | | | | | |  2025-09-03 12:54:20.424188303 UTC , thread_cap_info = ("ThreadId 112",
| F   | | | | | |  2, False)}
| F   | | | | | |  
| |   F | | | | |  
| | E   | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | E   | | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | E   | | | | |  = 4 , total_length = 56} , self = 70 , parent = Nothing , duration = 0.370236428000
| | E   | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 12:54:20.076065104
| | E   | | | | |  UTC , finish = 2025-09-03 12:54:20.446301532 UTC , thread_cap_info = ("ThreadId
| | E   | | | | |  113", 0, False)}
| | E   | | | | |  
| | |   | | F | |  
| | |   F |   | |  
| | |     F   | |  
| | |         F |  
| | |           F  
S | |              
  F |              
    E              
