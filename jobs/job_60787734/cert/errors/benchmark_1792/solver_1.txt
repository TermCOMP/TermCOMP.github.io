last 1160 length 5125
CNF 1160 vars 5125 clauses
last 1401 length 6052
CNF 1401 vars 6052 clauses
last 2145 length 10660
CNF 2145 vars 10660 clauses
last 2157 length 10050
CNF 2157 vars 10050 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 7350
last 1853 length 7350
CNF 1853 vars 7350 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1853, clauses: 7350, status: Satisfied, time: 0.037324818s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5615, clauses: 23485
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7893
last 2048 length 7893
last 1420 length 6349
last 1165 length 5289
CNF 1420 vars 6349 clauses
CNF 2048 vars 7893 clauses
CNF 1165 vars 5289 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1735, clauses: 6652
last 1735 length 6652
CNF 1735 vars 6652 clauses
last 4532 length 23939
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6783, clauses: 28451
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7893, status: Satisfied, time: 0.113082935s
last 6783 length 28451
CNF 4532 vars 23939 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1735, clauses: 6652, status: Unsatisfied, time: 0.05886615s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5861, clauses: 24557
last 5861 length 24557
CNF 5861 vars 24557 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       DP
SRS with 6 strict rules and 1 weak rules on 3 letters       EDG
SRS with 3 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b, a, a, a] -> [a, a, a, a, b, a, b, a, b] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a, b, a, a, a] ->= [a, a, a, a, b, a, b, a, b] {- DP Nontop (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [ a# , a , a , a , b , a , b , a , b ] {- DP (Top 0) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, a, a, b, a, b, a, b] {- DP (Top 1) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, a, b, a, b, a, b] {- DP (Top 2) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, b] {- DP (Top 7) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, b, a, b] {- DP (Top 5) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, b, a, b, a, b] {- DP (Top 3) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a, b, a, a, a] |-> [a#, b, a, b, a, b] {- DP (Top 3) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, b] {- DP (Top 7) (Input 0) -}
  [a#, b, a, b, a, a, a] |-> [a#, b, a, b] {- DP (Top 5) (Input 0) -}
  [a, b, a, b, a, a, a] ->= [a, a, a, a, b, a, b, a, b] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 12A 15A 15A - \
        | 12A 15A 15A - |
        | 12A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, b, a, b, a, a, a] ->= [a, a, a, a, b, a, b, a, b] {- DP Nontop (Input 0) -}
reason
  EDG

**************************************************
skeleton: (1,2)\Deepee(6/1,3)\EDG(3/1,3)\Matrix{\Arctic}{3}(0/1,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F          = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F          = 46} , self = 41 , parent = Nothing , duration = 0.127921903000 , status
F          = Fail , start = 2025-09-03 13:11:07.715567743 UTC , finish = 2025-09-03
F          13:11:07.843489646 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F        = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| F        = 46} , self = 40 , parent = Nothing , duration = 0.122681020000 , status
| F        = Fail , start = 2025-09-03 13:11:07.715572468 UTC , finish = 2025-09-03
| F        13:11:07.838253488 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
| F        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F      = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F      = 72} , self = 61 , parent = Nothing , duration = 0.519550868000 , status
| | F      = Fail , start = 2025-09-03 13:11:07.715587516 UTC , finish = 2025-09-03
| | F      13:11:08.235138384 UTC , thread_cap_info = ("ThreadId 69", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F    = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F    = 49} , self = 44 , parent = Nothing , duration = 0.196400957000 , status
| | | F    = Fail , start = 2025-09-03 13:11:07.716345615 UTC , finish = 2025-09-03
| | | F    13:11:07.912746572 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F  = 49} , self = 45 , parent = Nothing , duration = 0.183350164000 , status
| | | | F  = Fail , start = 2025-09-03 13:11:07.729490465 UTC , finish = 2025-09-03
| | | | F  13:11:07.912840629 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
| | | | F  
| F | | |  
F   | | |  
S   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | |  = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
S   | | |  = 3 , total_length = 46} , self = 46 , parent = Nothing , duration = 0.142772314000
S   | | |  , status = Success , start = 2025-09-03 13:11:07.843537449 UTC , finish
S   | | |  = 2025-09-03 13:11:07.986309763 UTC , thread_cap_info = ("ThreadId 86",
S   | | |  2, False)}
S   | | |  
| E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| E | | |  = 3 , total_length = 46} , self = 48 , parent = Nothing , duration = 0.163294115000
| E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:11:07.843545663
| E | | |  UTC , finish = 2025-09-03 13:11:08.006839778 UTC , thread_cap_info = ("ThreadId
| E | | |  87", 2, False)}
| E | | |  
| | | F |  
| | |   F  
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | | S    = 3 , total_length = 49} , self = 56 , parent = Nothing , duration = 0.298835060000
| | | S    , status = Success , start = 2025-09-03 13:11:07.912857982 UTC , finish
| | | S    = 2025-09-03 13:11:08.211693042 UTC , thread_cap_info = ("ThreadId 90",
| | | S    1, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | | | E  = 3 , total_length = 49} , self = 58 , parent = Nothing , duration = 0.300616215000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:11:07.912863659
| | | | E  UTC , finish = 2025-09-03 13:11:08.213479874 UTC , thread_cap_info = ("ThreadId
| | | | E  91", 1, False)}
| | | | E  
S | | | |  
  E | | |  
F   | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
F   | | |  = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F   | | |  = 37} , self = 54 , parent = Nothing , duration = 0.103766113000 , status
F   | | |  = Fail , start = 2025-09-03 13:11:08.007028515 UTC , finish = 2025-09-03
F   | | |  13:11:08.110794628 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
F   | | |  
| F | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| F | | |  = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| F | | |  = 37} , self = 55 , parent = Nothing , duration = 0.130836593000 , status
| F | | |  = Fail , start = 2025-09-03 13:11:08.02055367 UTC , finish = 2025-09-03
| F | | |  13:11:08.151390263 UTC , thread_cap_info = ("ThreadId 99", 2, False)}
| F | | |  
F | | | |  
F | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | | |  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
F | | | |  = 3 , total_length = 37} , self = 62 , parent = Nothing , duration = 0.151531726000
F | | | |  , status = Fail , start = 2025-09-03 13:11:08.113218217 UTC , finish =
F | | | |  2025-09-03 13:11:08.264749943 UTC , thread_cap_info = ("ThreadId 105",
F | | | |  2, False)}
F | | | |  
| F | | |  
|   | S |  
|   |   E  
|   F      
F          
