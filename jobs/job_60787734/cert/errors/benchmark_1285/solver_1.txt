last 5235 length 25645
last 5321 length 25769
CNF 5235 vars 25645 clauses
CNF 5321 vars 25769 clauses
last 1418 length 6464
CNF 1418 vars 6464 clauses
last 1659 length 8483
last 745 length 3369
CNF 745 vars 3369 clauses
CNF 1659 vars 8483 clauses
last 577 length 2471
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8855
last 2355 length 8855
last 9907 length 42891
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6309
last 1736 length 6309
CNF 577 vars 2471 clauses
CNF 2355 vars 8855 clauses
CNF 1736 vars 6309 clauses
CNF 9907 vars 42891 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8855, status: Satisfied, time: 0.168874623s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6425, clauses: 26567
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6309, status: Unsatisfied, time: 0.121566702s
[Info] pool sizes (success) 67762 seen 22088 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5379, clauses: 22260
last 5379 length 22260
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       looping derivation
from
  [b, b, b, b, b, b, b, b, a, c]
to
  [b, c, c, b, c, c, b, b, c, c, a, c, c, b, b, b, b, b, b, b, b, a, c, b, b, b]
via 31 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [b] {- Input 0 -}
  [b, b, a, c] -> [a, c, c, a, a, a] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [b, b, b, b, b, b, b, b, a, c], via = [(Step   { rule = 1, position = 6}, [b, b, b, b, b, b, a, c, c, a, a, a]), (Step   { rule = 0, position = 11}, [b, b, b, b, b, b, a, c, c, a, a, b]), (Step   { rule = 0, position = 10}, [b, b, b, b, b, b, a, c, c, a, b, b]), (Step   { rule = 0, position = 9}, [b, b, b, b, b, b, a, c, c, b, b, b]), (Step   { rule = 1, position = 4}, [b, b, b, b, a, c, c, a, a, a, c, b, b, b]), (Step   { rule = 0, position = 8}, [b, b, b, b, a, c, c, a, b, a, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, b, b, b, a, c, c, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 2}, [b, b, a, c, c, a, a, a, c, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 6}, [b, b, a, c, c, a, b, a, c, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 5}, [b, b, a, c, c, b, b, a, c, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 5}, [b, b, a, c, c, a, c, c, a, a, a, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 10}, [b, b, a, c, c, a, c, c, a, a, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 9}, [b, b, a, c, c, a, c, c, a, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 8}, [b, b, a, c, c, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 0}, [a, c, c, a, a, a, c, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 4}, [a, c, c, a, b, a, c, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 3}, [a, c, c, b, b, a, c, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 0}, [b, c, c, b, b, a, c, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 3}, [b, c, c, a, c, c, a, a, a, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 8}, [b, c, c, a, c, c, a, a, b, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, c, c, a, c, c, a, b, b, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 6}, [b, c, c, a, c, c, b, b, b, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 3}, [b, c, c, b, c, c, b, b, b, a, c, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 7}, [b, c, c, b, c, c, b, a, c, c, a, a, a, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 11}, [b, c, c, b, c, c, b, a, c, c, a, b, a, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 10}, [b, c, c, b, c, c, b, a, c, c, b, b, a, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, c, c, b, c, c, b, b, c, c, b, b, a, c, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 1, position = 10}, [b, c, c, b, c, c, b, b, c, c, a, c, c, a, a, a, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 15}, [b, c, c, b, c, c, b, b, c, c, a, c, c, a, a, b, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 14}, [b, c, c, b, c, c, b, b, c, c, a, c, c, a, b, b, b, b, b, b, b, a, c, b, b, b]), (Step   { rule = 0, position = 13}, [b, c, c, b, c, c, b, b, c, c, a, c, c, b, b, b, b, b, b, b, b, a, c, b, b, b])], to = [b, c, c, b, c, c, b, b, c, c, a, c, c, b, b, b, b, b, b, b, b, a, c, b, b, b]}

**************************************************
skeleton: (2,3)\Loop{31}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : CNF 5379 vars 22260 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3258, clauses: 13302
last 3258 length 13302
"KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.601134911000
  min duration 0.066553105000
  total durat. 1.021871519000
**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
F            = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F            = 144} , self = 55 , parent = Nothing , duration = 0.223329072000 , status
F            = Fail , start = 2025-09-03 11:26:00.749041626 UTC , finish = 2025-09-03
F            11:26:00.972370698 UTC , thread_cap_info = ("ThreadId 67", 1, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F          = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 144} , self = 56 , parent = Nothing , duration = 0.225380093000 , status
| F          = Fail , start = 2025-09-03 11:26:00.749053462 UTC , finish = 2025-09-03
| F          11:26:00.974433555 UTC , thread_cap_info = ("ThreadId 69", 1, False)}
| F          
| | S        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | S        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | S        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | S        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | S        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | S        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | S        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | S        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | S        = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | S        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | S        = 12} , self = 67 , parent = Nothing , duration = 0.795927379000 , status
| | S        = Success , start = 2025-09-03 11:26:00.759155045 UTC , finish = 2025-09-03
| | S        11:26:01.555082424 UTC , thread_cap_info = ("ThreadId 76", 0, False)}
| | S        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 60 , num_strict_rules
| | | F      = 42 , num_top_rules = 42 , num_weak_rules = 18 , alphabet_size = 15 ,
| | | F      total_length = 417} , self = 63 , parent = Nothing , duration = 0.601134911000
| | | F      , status = Fail , start = 2025-09-03 11:26:00.772573369 UTC , finish =
| | | F      2025-09-03 11:26:01.37370828 UTC , thread_cap_info = ("ThreadId 78", 0,
| | | F      False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F    = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | F    = 42} , self = 59 , parent = Nothing , duration = 0.101242641000 , status
| | | | F    = Fail , start = 2025-09-03 11:26:00.932661458 UTC , finish = 2025-09-03
| | | | F    11:26:01.033904099 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | F  = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | | | | F  = 42} , self = 60 , parent = Nothing , duration = 0.128803410000 , status
| | | | | F  = Fail , start = 2025-09-03 11:26:00.970524201 UTC , finish = 2025-09-03
| | | | | F  11:26:01.099327611 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | | | | F  
F | | | | |  
  F | | | |  
    | | F |  
F   | |   |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |   |  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F   | |   |  = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F   | |   |  = 25} , self = 62 , parent = Nothing , duration = 0.198754787000 , status
F   | |   |  = Fail , start = 2025-09-03 11:26:01.037256692 UTC , finish = 2025-09-03
F   | |   |  11:26:01.236011479 UTC , thread_cap_info = ("ThreadId 106", 3, False)}
F   | |   |  
| S | |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | |   |  = 7 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| S | |   |  = 5 , total_length = 42} , self = 64 , parent = Nothing , duration = 0.419385503000
| S | |   |  , status = Success , start = 2025-09-03 11:26:01.07360672 UTC , finish
| S | |   |  = 2025-09-03 11:26:01.492992223 UTC , thread_cap_info = ("ThreadId 110",
| S | |   |  3, False)}
| S | |   |  
| | | |   F  
| | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 2 , alphabet_size
| | | | E    = 5 , total_length = 42} , self = 66 , parent = Nothing , duration = 0.439391801000
| | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:26:01.113240321
| | | | E    UTC , finish = 2025-09-03 11:26:01.552632122 UTC , thread_cap_info = ("ThreadId
| | | | E    112", 3, False)}
| | | | E    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | F  = 4 , total_length = 25} , self = 69 , parent = Nothing , duration = 0.379025452000
| | | | | F  , status = Fail , start = 2025-09-03 11:26:01.193786671 UTC , finish =
| | | | | F  2025-09-03 11:26:01.572812123 UTC , thread_cap_info = ("ThreadId 114",
| | | | | F  3, False)}
| | | | | F  
F | | | | |  
  | | F | |  
  S |   | |  
    |   E |  
    S     |  
          F  
CNF 3258 vars 13302 clauses
