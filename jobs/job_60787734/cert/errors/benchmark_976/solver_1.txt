last 606 length 2379
last 787 length 3204
last 763 length 2972
CNF 606 vars 2379 clauses
CNF 787 vars 3204 clauses
last 741 length 3022
CNF 763 vars 2972 clauses
CNF 741 vars 3022 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2628, clauses: 9755
last 2628 length 9755
CNF 2628 vars 9755 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2867, clauses: 10386
last 2867 length 10386
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2628, clauses: 9755, status: Satisfied, time: 0.089169005s
last 6920 length 28944
CNF 2867 vars 10386 clauses
last 6572 length 28350
CNF 6572 vars 28350 clauses
CNF 6920 vars 28944 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6744, clauses: 28017
last 6744 length 28017
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2867, clauses: 10386, status: Unsatisfied, time: 0.123790714s
last 448 length 1812
last 468 length 1865
CNF 448 vars 1812 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8841, clauses: 36787
CNF 468 vars 1865 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5476, clauses: 22041
last 8841 length 36787
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6475
last 11408 length 49847
last 5476 length 22041
last 14456 length 60256
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5648, clauses: 23520
last 1786 length 6475
CNF 5476 vars 22041 clauses
CNF 11408 vars 49847 clauses
CNF 8841 vars 36787 clauses
last 5648 length 23520
CNF 14456 vars 60256 clauses
CNF 1786 vars 6475 clauses
last 14815 length 62304
CNF 5648 vars 23520 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1786, clauses: 6475, status: Satisfied, time: 0.39153368s
CNF 14815 vars 62304 clauses
last 22850 length 93639
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5476, clauses: 22041, status: Unsatisfied, time: 0.577049969s
last 336 length 1361
last 338 length 1344
CNF 22850 vars 93639 clauses
CNF 336 vars 1361 clauses
CNF 338 vars 1344 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4658, clauses: 18040
last 4658 length 18040
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5173
last 1456 length 5173
CNF 4658 vars 18040 clauses
CNF 1456 vars 5173 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5015, clauses: 20843
last 5015 length 20843
CNF 5015 vars 20843 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1456, clauses: 5173, status: Unsatisfied, time: 0.099631059s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4658, clauses: 18040, status: Unsatisfied, time: 0.185105835s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5015, clauses: 20843, status: Satisfied, time: 0.059533728s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3054, clauses: 12254
last 3054 length 12254
CNF 3054 vars 12254 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8841, clauses: 36787, status: Unsatisfied, time: 1.544336914s
**************************************************
summary
**************************************************
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 12 strict rules and 5 weak rules on 6 letters       weights
SRS with 8 strict rules and 5 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 6 strict rules and 5 weak rules on 5 letters       Usable
  SRS with 6 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 3 strict rules and 3 weak rules on 4 letters       weights
  SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
  SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
  SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

  2 SRS with 2 strict rules and 5 weak rules on 4 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b] -> [a] {- Input 0 -}
  [a, a] -> [a, b, a] {- Input 1 -}
  [b, c] -> [c, a, a] {- Input 2 -}
  [a, c] -> [c, b, b] {- Input 3 -}
  [a, a, a] -> [b, a, a] {- Input 4 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, b] -> [a] {- Mirror (Input 0) -}
  [a, a] -> [a, b, a] {- Mirror (Input 1) -}
  [c, b] -> [a, a, c] {- Mirror (Input 2) -}
  [c, a] -> [b, b, c] {- Mirror (Input 3) -}
  [a, a, a] -> [a, a, b] {- Mirror (Input 4) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [a#, a, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 4)) -}
  [a#, a, a] |-> [b#] {- DP (Top 2) (Mirror (Input 4)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a] |-> [b#, b, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, a] |-> [b#, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, a] |-> [c#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, b] |-> [a#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [a#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [a#, a, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 4)) -}
  [a#, a, a] |-> [b#] {- DP (Top 2) (Mirror (Input 4)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a] |-> [c#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [a#, a, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 4)) -}
  [a#, a, a] |-> [b#] {- DP (Top 2) (Mirror (Input 4)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  remove un-usable
    SRS
      [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
      [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [a#, a, a] |-> [a#, b] {- DP (Top 1) (Mirror (Input 4)) -}
  [a#, a, a] |-> [b#] {- DP (Top 2) (Mirror (Input 4)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, a, a] |-> [a#, a, b] {- DP (Top 0) (Mirror (Input 4)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( a
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 6A 9A 9A - \
        | 6A 9A 9A - |
        | 6A 9A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( a
  , Wk  / -   - 0A \
        | -1A - 0A |
        \ -   - 0A / )
  ( b
  , Wk  / 1A  -   0A \
        | -1A -1A -  |
        \ -   -   0A / )
  ( a#
  , Wk  / 0A 2A -  \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
  [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
reason
  remove un-usable
    SRS
      [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
      [a, a] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
      [c, b] ->= [a, a, c] {- DP Nontop (Mirror (Input 2)) -}
      [c, a] ->= [b, b, c] {- DP Nontop (Mirror (Input 3)) -}
      [a, a, a] ->= [a, a, b] {- DP Nontop (Mirror (Input 4)) -}
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 2) (Mirror (Input 3)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(5,3)\Deepee(12/5,6)\Weight(8/5,6)\EDG[(6/5,5)\Usable(6/3,4)\Matrix{\Arctic}{3}(3/3,4)\Weight\EDG(2/3,3)\Matrix{\Arctic}{3}\EDG(1/3,3)\Matrix{\ArcticBZ}{3}(0/3,2)\EDG[],(2/5,4)\Usable(2,3)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14889, clauses: 61873
last 14889 length 61873
{verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 14889 vars 61873 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 1.098125005000
  min duration 0.084921336000
  total durat. 2.905989771000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 135
      , num_strict_rules = 90
      , num_top_rules = 90
      , num_weak_rules = 45
      , alphabet_size = 15
      , total_length = 861}
    , self = 84
    , parent = Nothing
    , duration = 1.098125005000
    , status = Fail
    , start = 2025-09-03 13:40:19.024751903 UTC
    , finish = 2025-09-03 13:40:20.122876908 UTC
    , thread_cap_info = ("ThreadId 121", 2, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.843734689000
  min duration 0.059070814000
  total durat. 2.323744822000
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.961455769000
  min duration 1.961455769000
  total durat. 1.961455769000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 9
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 5
      , alphabet_size = 5
      , total_length = 44}
    , self = 94
    , parent = Nothing
    , duration = 1.961455769000
    , status = Fail
    , start = 2025-09-03 13:40:18.791652133 UTC
    , finish = 2025-09-03 13:40:20.753107902 UTC
    , thread_cap_info = ("ThreadId 94", 1, False)}
**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
F                  = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                  = 315} , self = 57 , parent = Nothing , duration = 0.280631494000 , status
F                  = Fail , start = 2025-09-03 13:40:18.66521108 UTC , finish = 2025-09-03
F                  13:40:18.945842574 UTC , thread_cap_info = ("ThreadId 77", 0, False)}
F                  
| F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 45 , num_strict_rules
| F                = 45 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 315} , self = 59 , parent = Nothing , duration = 0.266203442000 , status
| F                = Fail , start = 2025-09-03 13:40:18.684948614 UTC , finish = 2025-09-03
| F                13:40:18.951152056 UTC , thread_cap_info = ("ThreadId 79", 0, False)}
| F                
| | S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S              = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | S              = 4 , total_length = 43} , self = 56 , parent = Nothing , duration = 0.202150882000
| | S              , status = Success , start = 2025-09-03 13:40:18.723006378 UTC , finish
| | S              = 2025-09-03 13:40:18.92515726 UTC , thread_cap_info = ("ThreadId 88",
| | S              1, False)}
| | S              
| | | F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F            = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | F            = 5 , total_length = 44} , self = 65 , parent = Nothing , duration = 0.207764891000
| | | F            , status = Fail , start = 2025-09-03 13:40:18.753920311 UTC , finish =
| | | F            2025-09-03 13:40:18.961685202 UTC , thread_cap_info = ("ThreadId 91", 1,
| | | F            False)}
| | | F            
| | | | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E          , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | E          = 4 , total_length = 43} , self = 60 , parent = Nothing , duration = 0.203801376000
| | | | E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:40:18.755891441
| | | | E          UTC , finish = 2025-09-03 13:40:18.959692817 UTC , thread_cap_info = ("ThreadId
| | | | E          93", 1, False)}
| | | | E          
| | | | | F        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | F        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | F        , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | F        = 5 , total_length = 44} , self = 94 , parent = Nothing , duration = 1.961455769000
| | | | | F        , status = Fail , start = 2025-09-03 13:40:18.791652133 UTC , finish =
| | | | | F        2025-09-03 13:40:20.753107902 UTC , thread_cap_info = ("ThreadId 94", 1,
| | | | | F        False)}
| | | | | F        
| | | | | | S      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | S      verbose = False}" , input_size = Size { num_rules = 141 , num_strict_rules
| | | | | | S      = 96 , num_top_rules = 96 , num_weak_rules = 45 , alphabet_size = 16 ,
| | | | | | S      total_length = 906} , self = 66 , parent = Nothing , duration = 0.144281081000
| | | | | | S      , status = Success , start = 2025-09-03 13:40:18.845311171 UTC , finish
| | | | | | S      = 2025-09-03 13:40:18.989592252 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | S      2, False)}
| | | | | | S      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | | | | | | F    = 36 , num_top_rules = 36 , num_weak_rules = 45 , alphabet_size = 13 ,
| | | | | | | F    total_length = 547} , self = 72 , parent = Nothing , duration = 0.766734129000
| | | | | | | F    , status = Fail , start = 2025-09-03 13:40:18.909280515 UTC , finish =
| | | | | | | F    2025-09-03 13:40:19.676014644 UTC , thread_cap_info = ("ThreadId 105",
| | | | | | | F    2, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | | | | | | | F  = 36 , num_top_rules = 36 , num_weak_rules = 45 , alphabet_size = 13 ,
| | | | | | | | F  total_length = 547} , self = 71 , parent = Nothing , duration = 0.669314825000
| | | | | | | | F  , status = Fail , start = 2025-09-03 13:40:18.924858155 UTC , finish =
| | | | | | | | F  2025-09-03 13:40:19.59417298 UTC , thread_cap_info = ("ThreadId 106", 2,
| | | | | | | | F  False)}
| | | | | | | | F  
| | S | | | | | |  
F |   | | | | | |  
  F   | | | | | |  
      | E | | | |  
F     |   | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F     |   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     |   | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
F     |   | | | |  = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F     |   | | | |  = 26} , self = 69 , parent = Nothing , duration = 0.205420510000 , status
F     |   | | | |  = Fail , start = 2025-09-03 13:40:18.959842083 UTC , finish = 2025-09-03
F     |   | | | |  13:40:19.165262593 UTC , thread_cap_info = ("ThreadId 116", 1, False)}
F     |   | | | |  
|     F   | | | |  
| F       | | | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F       | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F       | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| F       | | | |  = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| F       | | | |  = 26} , self = 70 , parent = Nothing , duration = 0.274050457000 , status
| F       | | | |  = Fail , start = 2025-09-03 13:40:18.962992833 UTC , finish = 2025-09-03
| F       | | | |  13:40:19.23704329 UTC , thread_cap_info = ("ThreadId 115", 1, False)}
| F       | | | |  
| | F     | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F     | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F     | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F     | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F     | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F     | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | F     | | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | F     | | | |  = 5 , total_length = 44} , self = 81 , parent = Nothing , duration = 0.960264775000
| | F     | | | |  , status = Fail , start = 2025-09-03 13:40:18.964791213 UTC , finish =
| | F     | | | |  2025-09-03 13:40:19.925055988 UTC , thread_cap_info = ("ThreadId 117",
| | F     | | | |  1, False)}
| | F     | | | |  
| | |     | S | |  
| | | F   |   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   |   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 135 , num_strict_rules
| | | F   |   | |  = 90 , num_top_rules = 90 , num_weak_rules = 45 , alphabet_size = 15 ,
| | | F   |   | |  total_length = 861} , self = 84 , parent = Nothing , duration = 1.098125005000
| | | F   |   | |  , status = Fail , start = 2025-09-03 13:40:19.024751903 UTC , finish =
| | | F   |   | |  2025-09-03 13:40:20.122876908 UTC , thread_cap_info = ("ThreadId 121",
| | | F   |   | |  2, False)}
| | | F   |   | |  
| | | | F |   | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F |   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 135 , num_strict_rules
| | | | F |   | |  = 90 , num_top_rules = 90 , num_weak_rules = 45 , alphabet_size = 15 ,
| | | | F |   | |  total_length = 861} , self = 80 , parent = Nothing , duration = 0.843734689000
| | | | F |   | |  , status = Fail , start = 2025-09-03 13:40:19.065812537 UTC , finish =
| | | | F |   | |  2025-09-03 13:40:19.909547226 UTC , thread_cap_info = ("ThreadId 123",
| | | | F |   | |  2, False)}
| | | | F |   | |  
F | | | | |   | |  
S | | | | |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | |   | |  = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
S | | | | |   | |  = 3 , total_length = 26} , self = 73 , parent = Nothing , duration = 0.516884575000
S | | | | |   | |  , status = Success , start = 2025-09-03 13:40:19.18479093 UTC , finish
S | | | | |   | |  = 2025-09-03 13:40:19.701675505 UTC , thread_cap_info = ("ThreadId 124",
S | | | | |   | |  1, False)}
S | | | | |   | |  
| F | | | |   | |  
| E | | | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| E | | | |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| E | | | |   | |  = 3 , total_length = 26} , self = 75 , parent = Nothing , duration = 0.510505183000
| E | | | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:40:19.23706605
| E | | | |   | |  UTC , finish = 2025-09-03 13:40:19.747571233 UTC , thread_cap_info = ("ThreadId
| E | | | |   | |  125", 1, False)}
| E | | | |   | |  
| | | | | |   | F  
| | | | | |   F    
S | | | | |        
  E | | | |        
F   | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F   | | | |        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
F   | | | |        = 20} , self = 83 , parent = Nothing , duration = 0.308397536000 , status
F   | | | |        = Fail , start = 2025-09-03 13:40:19.814156815 UTC , finish = 2025-09-03
F   | | | |        13:40:20.122554351 UTC , thread_cap_info = ("ThreadId 140", 1, False)}
F   | | | |        
|   | | F |        
| F | |   |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |   |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |   |        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F | |   |        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| F | |   |        = 20} , self = 82 , parent = Nothing , duration = 0.209309038000 , status
| F | |   |        = Fail , start = 2025-09-03 13:40:19.909555216 UTC , finish = 2025-09-03
| F | |   |        13:40:20.118864254 UTC , thread_cap_info = ("ThreadId 141", 1, False)}
| F | |   |        
| | F |   |        
| | F |   |        Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| | F |   |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |   |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |   |        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | F |   |        = 5 , total_length = 44} , self = 86 , parent = Nothing , duration = 0.389407924000
| | F |   |        , status = Fail , start = 2025-09-03 13:40:19.946538346 UTC , finish =
| | F |   |        2025-09-03 13:40:20.33594627 UTC , thread_cap_info = ("ThreadId 142", 1,
| | F |   |        False)}
| | F |   |        
| F | |   |        
F   | |   |        
    | F   |        
F   |     |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   |     |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   |     |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   |     |        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
F   |     |        = 3 , total_length = 20} , self = 85 , parent = Nothing , duration = 0.160739938000
F   |     |        , status = Fail , start = 2025-09-03 13:40:20.12290037 UTC , finish = 2025-09-03
F   |     |        13:40:20.283640308 UTC , thread_cap_info = ("ThreadId 146", 1, False)}
F   |     |        
| S |     |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S |     |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S |     |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S |     |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S |     |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S |     |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| S |     |        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| S |     |        = 3 , total_length = 20} , self = 87 , parent = Nothing , duration = 0.209400466000
| S |     |        , status = Success , start = 2025-09-03 13:40:20.126851836 UTC , finish
| S |     |        = 2025-09-03 13:40:20.336252302 UTC , thread_cap_info = ("ThreadId 148",
| S |     |        1, False)}
| S |     |        
F | |     |        
E | |     |        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | |     |        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | |     |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | |     |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |     |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |     |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E | |     |        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
E | |     |        = 3 , total_length = 20} , self = 89 , parent = Nothing , duration = 0.123241501000
E | |     |        , status = Except "AsyncCancelled" , start = 2025-09-03 13:40:20.283667451
E | |     |        UTC , finish = 2025-09-03 13:40:20.406908952 UTC , thread_cap_info = ("ThreadId
E | |     |        152", 1, False)}
E | |     |        
| | F     |        
| S       |        
E         |        
          F        
