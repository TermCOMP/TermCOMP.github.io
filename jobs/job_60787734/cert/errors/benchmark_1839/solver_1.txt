last 404 length 1532
last 409 length 1570
CNF 409 vars 1570 clauses
CNF 404 vars 1532 clauses
last 447 length 1747
CNF 447 vars 1747 clauses
last 365 length 1396
last 389 length 1515
CNF 365 vars 1396 clauses
last 305 length 1182
CNF 389 vars 1515 clauses
CNF 305 vars 1182 clauses
last 268 length 1014
CNF 268 vars 1014 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2164, clauses: 7537
last 2164 length 7537
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1767, clauses: 6134
last 1767 length 6134
CNF 2164 vars 7537 clauses
CNF 1767 vars 6134 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1767, clauses: 6134, status: Unsatisfied, time: 0.087545397s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7082, clauses: 29013
last 7082 length 29013
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5767, clauses: 23637
last 5767 length 23637
CNF 7082 vars 29013 clauses
CNF 5767 vars 23637 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5767, clauses: 23637, status: Satisfied, time: 0.040485332s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2164, clauses: 7537, status: Unsatisfied, time: 0.173451116s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7082, clauses: 29013, status: Satisfied, time: 0.138799437s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4310, clauses: 16536
last 4310 length 16536
CNF 4310 vars 16536 clauses
**************************************************
summary
**************************************************
SRS with 9 rules on 6 letters       weights
SRS with 8 rules on 6 letters       DP
SRS with 10 strict rules and 8 weak rules on 10 letters       weights
SRS with 1 strict rules and 8 weak rules on 7 letters       EDG
SRS with 1 strict rules and 8 weak rules on 7 letters       Usable
SRS with 1 strict rules and 7 weak rules on 6 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 6 weak rules on 6 letters       EDG
SRS with 1 strict rules and 6 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 5 letters       weights
SRS with 0 strict rules and 4 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [t, f] -> [t, c, n] {- Input 0 -}
  [n, f] -> [f, n] {- Input 1 -}
  [o, f] -> [f, o] {- Input 2 -}
  [n, s] -> [f, s] {- Input 3 -}
  [o, s] -> [f, s] {- Input 4 -}
  [c, f] -> [f, c] {- Input 5 -}
  [c, n] -> [n, c] {- Input 6 -}
  [c, o] -> [o, c] {- Input 7 -}
  [c, o] -> [o] {- Input 8 -}
reason
  (s, 0/1)
  (t, 0/1)
  (n, 0/1)
  (f, 0/1)
  (o, 1/1)
  (c, 0/1)
   property Termination
has value Just True
for SRS
  [t, f] -> [t, c, n] {- Input 0 -}
  [n, f] -> [f, n] {- Input 1 -}
  [o, f] -> [f, o] {- Input 2 -}
  [n, s] -> [f, s] {- Input 3 -}
  [c, f] -> [f, c] {- Input 5 -}
  [c, n] -> [n, c] {- Input 6 -}
  [c, o] -> [o, c] {- Input 7 -}
  [c, o] -> [o] {- Input 8 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [t, f] ->= [t, c, n] {- DP Nontop (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [o, f] ->= [f, o] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
  [t#, f] |-> [n#] {- DP (Top 2) (Input 0) -}
  [t#, f] |-> [c#, n] {- DP (Top 1) (Input 0) -}
  [n#, f] |-> [n#] {- DP (Top 1) (Input 1) -}
  [o#, f] |-> [o#] {- DP (Top 1) (Input 2) -}
  [c#, n] |-> [n#, c] {- DP (Top 0) (Input 6) -}
  [c#, n] |-> [c#] {- DP (Top 1) (Input 6) -}
  [c#, f] |-> [c#] {- DP (Top 1) (Input 5) -}
  [c#, o] |-> [o#, c] {- DP (Top 0) (Input 7) -}
  [c#, o] |-> [c#] {- DP (Top 1) (Input 7) -}
reason
  (s, 0/1)
  (t, 0/1)
  (n, 1/1)
  (f, 1/1)
  (o, 2/1)
  (c, 0/1)
  (t#, 2/1)
  (n#, 0/1)
  (o#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [t, f] ->= [t, c, n] {- DP Nontop (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [o, f] ->= [f, o] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
  [t, f] ->= [t, c, n] {- DP Nontop (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [o, f] ->= [f, o] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [t, f] ->= [t, c, n] {- DP Nontop (Input 0) -}
   property Termination
has value Just True
for SRS
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [o, f] ->= [f, o] {- DP Nontop (Input 2) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
reason
  ( s
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( n
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( f
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( o
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( c
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( t#
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [t#, f] |-> [t#, c, n] {- DP (Top 0) (Input 0) -}
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
reason
  ( s
  , Wk  / 0A -  0A \
        | 1A 1A 1A |
        \ -  -  0A / )
  ( n
  , Wk  / 0A 0A -2A \
        | -  1A -   |
        \ -  -  0A  / )
  ( f
  , Wk  / 1A 0A 0A \
        | -  1A -  |
        \ -  -  0A / )
  ( o
  , Wk  / 2A 1A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / 0A -1A -  \
        | -  -   -  |
        \ -  -   0A / )
  ( t#
  , Wk  / 0A 0A -2A \
        | -  -  -   |
        \ -  -  0A  / )
   property Termination
has value Just True
for SRS
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [n, s] ->= [f, s] {- DP Nontop (Input 3) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
  [c, o] ->= [o] {- DP Nontop (Input 8) -}
reason
  (s, 0/1)
  (n, 1/1)
  (f, 0/1)
  (o, 0/1)
  (c, 1/1)
   property Termination
has value Just True
for SRS
  [n, f] ->= [f, n] {- DP Nontop (Input 1) -}
  [c, f] ->= [f, c] {- DP Nontop (Input 5) -}
  [c, n] ->= [n, c] {- DP Nontop (Input 6) -}
  [c, o] ->= [o, c] {- DP Nontop (Input 7) -}
reason
  EDG

**************************************************
skeleton: (9,6)\Weight(8,6)\Deepee(10/8,10)\Weight\EDG(1/8,7)\Usable(1/7,6)\Matrix{\Natural}{2}\EDG(1/6,6)\Matrix{\ArcticBZ}{3}(0/6,5)\Weight(0/4,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F        = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
F        = 6 , total_length = 28} , self = 67 , parent = Nothing , duration = 0.193347653000
F        , status = Fail , start = 2025-09-03 13:22:22.005373211 UTC , finish =
F        2025-09-03 13:22:22.198720864 UTC , thread_cap_info = ("ThreadId 79", 1,
F        False)}
F        
| S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| S      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| S      = 6 , total_length = 28} , self = 72 , parent = Nothing , duration = 0.259049423000
| S      , status = Success , start = 2025-09-03 13:22:22.006421711 UTC , finish
| S      = 2025-09-03 13:22:22.265471134 UTC , thread_cap_info = ("ThreadId 80",
| S      2, False)}
| S      
| | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F    = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | F    = 5 , total_length = 21} , self = 50 , parent = Nothing , duration = 0.109126420000
| | F    , status = Fail , start = 2025-09-03 13:22:22.007101751 UTC , finish =
| | F    2025-09-03 13:22:22.116228171 UTC , thread_cap_info = ("ThreadId 82", 0,
| | F    False)}
| | F    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | S  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | | S  = 5 , total_length = 21} , self = 54 , parent = Nothing , duration = 0.142116502000
| | | S  , status = Success , start = 2025-09-03 13:22:22.023881321 UTC , finish
| | | S  = 2025-09-03 13:22:22.165997823 UTC , thread_cap_info = ("ThreadId 84",
| | | S  0, False)}
| | | S  
| | F |  
| |   S  
F |      
E |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
E |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
E |      = 6 , total_length = 28} , self = 86 , parent = Nothing , duration = 0.141666334000
E |      , status = Except "AsyncCancelled" , start = 2025-09-03 13:22:22.215907958
E |      UTC , finish = 2025-09-03 13:22:22.357574292 UTC , thread_cap_info = ("ThreadId
E |      119", 2, False)}
E |      
| S      
E        
