last 1253 length 5388
CNF 1253 vars 5388 clauses
last 1917 length 8186
last 1224 length 5120
last 1658 length 7166
last 4054 length 17571
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2602, clauses: 9727
last 6763 length 29715
CNF 1917 vars 8186 clauses
CNF 1224 vars 5120 clauses
last 4987 length 21524
last 7634 length 33268
last 6452 length 28550
CNF 1658 vars 7166 clauses
CNF 4054 vars 17571 clauses
last 2602 length 9727
last 6320 length 28314
CNF 6763 vars 29715 clauses
CNF 4987 vars 21524 clauses
CNF 7634 vars 33268 clauses
CNF 6452 vars 28550 clauses
CNF 2602 vars 9727 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3214, clauses: 12250
CNF 6320 vars 28314 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9495, clauses: 40019
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10498, clauses: 44131
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8965, clauses: 34963
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2602, clauses: 9727, status: Satisfied, time: 0.487255561s
last 3214 length 12250
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7439, clauses: 28479
last 9495 length 40019
last 10498 length 44131
last 8965 length 34963
CNF 3214 vars 12250 clauses
last 7439 length 28479
last 946 length 3953
CNF 10498 vars 44131 clauses
last 913 length 3739
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3214, clauses: 12250, status: Satisfied, time: 0.864224642s
CNF 8965 vars 34963 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 32982, clauses: 139825
CNF 946 vars 3953 clauses
CNF 7439 vars 28479 clauses
CNF 913 vars 3739 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30120, clauses: 127680
last 32982 length 139825
**************************************************last 30120 length 127680

summary
**************************************************
SRS with 4 rules on 2 letters       DP
SRS with 8 strict rules and 4 weak rules on 4 letters       weights
SRS with 4 strict rules and 4 weak rules on 4 letters       EDG
SRS with 4 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 4 letters       weights
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b, a] -> [b, a, a, a] {- Input 0 -}
  [b, b, b, b] -> [b, a, a, b] {- Input 1 -}
  [a, a, b, a] -> [b, a, b, a] {- Input 2 -}
  [b, a, a, b] -> [a, a, a, b] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [a#, a] {- DP (Top 2) (Input 0) -}
  [b#, b, b, a] |-> [a#, a, a] {- DP (Top 1) (Input 0) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [b#, b, b, b] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [b#, a, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 15A 15A 16A - \
        | 15A 15A 16A - |
        | 15A 15A 16A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 14A 15A 15A - \
        | 14A 15A 15A - |
        | 14A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a, b] |-> [a#, a, a, b] {- DP (Top 0) (Input 3) -}
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a, a, b, a] ->= [b, a, b, a] {- DP Nontop (Input 2) -}
  [b, a, a, b] ->= [a, a, a, b] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,2)\Deepee(8/4,4)\Weight\EDG(4/4,4)\Matrix{\Arctic}{3}(1/4,4)\Weight(0/4,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8965, clauses: 34963, status: Satisfied, time: 0.74638133s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 1.017037263000
  min duration 0.113411280000
  total durat. 3.890200047000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 24
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 16
      , alphabet_size = 6
      , total_length = 240}
    , self = 64
    , parent = Nothing
    , duration = 1.017037263000
    , status = Fail
    , start = 2025-09-03 12:05:05.687360945 UTC
    , finish = 2025-09-03 12:05:06.704398208 UTC
    , thread_cap_info = ("ThreadId 62", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.034622056000
  min duration 0.446316007000
  total durat. 3.418295630000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 20
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 16
      , alphabet_size = 5
      , total_length = 200}
    , self = 66
    , parent = Nothing
    , duration = 1.034622056000
    , status = Fail
    , start = 2025-09-03 12:05:05.840105972 UTC
    , finish = 2025-09-03 12:05:06.874728028 UTC
    , thread_cap_info = ("ThreadId 88", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.470129388000
  min duration 1.001840709000
  total durat. 2.471970097000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 3
      , total_length = 48}
    , self = 69
    , parent = Nothing
    , duration = 1.001840709000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:05:06.358396465 UTC
    , finish = 2025-09-03 12:05:07.360237174 UTC
    , thread_cap_info = ("ThreadId 113", 2, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 64}
    , self = 76
    , parent = Nothing
    , duration = 1.470129388000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:05:06.37465603 UTC
    , finish = 2025-09-03 12:05:07.844785418 UTC
    , thread_cap_info = ("ThreadId 115", 0, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.480131763000
  min duration 1.190832727000
  total durat. 2.670964490000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 3
      , total_length = 48}
    , self = 67
    , parent = Nothing
    , duration = 1.190832727000
    , status = Success
    , start = 2025-09-03 12:05:05.969047068 UTC
    , finish = 2025-09-03 12:05:07.159879795 UTC
    , thread_cap_info = ("ThreadId 102", 2, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 4
      , total_length = 64}
    , self = 74
    , parent = Nothing
    , duration = 1.480131763000
    , status = Success
    , start = 2025-09-03 12:05:06.355216044 UTC
    , finish = 2025-09-03 12:05:07.835347807 UTC
    , thread_cap_info = ("ThreadId 114", 0, False)}
**************************************************
F                    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                    = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F                    = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 32} , self
F                    = 49 , parent = Nothing , duration = 0.188525135000 , status = Fail , start
F                    = 2025-09-03 12:05:05.66336352 UTC , finish = 2025-09-03 12:05:05.851888655
F                    UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F                    
| F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                  = 32} , self = 37 , parent = Nothing , duration = 0.110518265000 , status
| F                  = Fail , start = 2025-09-03 12:05:05.663414059 UTC , finish = 2025-09-03
| F                  12:05:05.773932324 UTC , thread_cap_info = ("ThreadId 35", 2, False)}
| F                  
| | F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | F                = 32} , self = 51 , parent = Nothing , duration = 0.188747305000 , status
| | F                = Fail , start = 2025-09-03 12:05:05.663501305 UTC , finish = 2025-09-03
| | F                12:05:05.85224861 UTC , thread_cap_info = ("ThreadId 37", 3, False)}
| | F                
| | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | F              = 8 , num_top_rules = 8 , num_weak_rules = 16 , alphabet_size = 6 , total_length
| | | F              = 240} , self = 64 , parent = Nothing , duration = 1.017037263000 , status
| | | F              = Fail , start = 2025-09-03 12:05:05.687360945 UTC , finish = 2025-09-03
| | | F              12:05:06.704398208 UTC , thread_cap_info = ("ThreadId 62", 0, False)}
| | | F              
| | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| | | | F            = 8 , num_top_rules = 8 , num_weak_rules = 16 , alphabet_size = 6 , total_length
| | | | F            = 240} , self = 62 , parent = Nothing , duration = 0.797209374000 , status
| | | | F            = Fail , start = 2025-09-03 12:05:05.700525223 UTC , finish = 2025-09-03
| | | | F            12:05:06.497734597 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| | | | F            
| | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | F          = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | F          = 160} , self = 63 , parent = Nothing , duration = 0.939981024000 , status
| | | | | F          = Fail , start = 2025-09-03 12:05:05.754698745 UTC , finish = 2025-09-03
| | | | | F          12:05:06.694679769 UTC , thread_cap_info = ("ThreadId 74", 3, False)}
| | | | | F          
| | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | F        = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | | F        = 160} , self = 61 , parent = Nothing , duration = 0.643029967000 , status
| | | | | | F        = Fail , start = 2025-09-03 12:05:05.754722369 UTC , finish = 2025-09-03
| | | | | | F        12:05:06.397752336 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | | | | | F        
| F | | | | |        
| F | | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| F | | | | |        = 4 , num_top_rules = 4 , num_weak_rules = 16 , alphabet_size = 5 , total_length
| F | | | | |        = 200} , self = 65 , parent = Nothing , duration = 0.944479378000 , status
| F | | | | |        = Fail , start = 2025-09-03 12:05:05.814662724 UTC , finish = 2025-09-03
| F | | | | |        12:05:06.759142102 UTC , thread_cap_info = ("ThreadId 87", 0, False)}
| F | | | | |        
| | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 16 , alphabet_size = 5 , total_length
| | | | | | | F      = 200} , self = 66 , parent = Nothing , duration = 1.034622056000 , status
| | | | | | | F      = Fail , start = 2025-09-03 12:05:05.840105972 UTC , finish = 2025-09-03
| | | | | | | F      12:05:06.874728028 UTC , thread_cap_info = ("ThreadId 88", 0, False)}
| | | | | | | F      
F | | | | | | |      
  | F | | | | |      
F |   | | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |   | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |   | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F |   | | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
F |   | | | | |      = 48} , self = 59 , parent = Nothing , duration = 0.497118226000 , status
F |   | | | | |      = Fail , start = 2025-09-03 12:05:05.852346615 UTC , finish = 2025-09-03
F |   | | | | |      12:05:06.349464841 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
F |   | | | | |      
| | F | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F | | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
| | F | | | | |      = 48} , self = 56 , parent = Nothing , duration = 0.113411280000 , status
| | F | | | | |      = Fail , start = 2025-09-03 12:05:05.855594737 UTC , finish = 2025-09-03
| | F | | | | |      12:05:05.969006017 UTC , thread_cap_info = ("ThreadId 95", 2, False)}
| | F | | | | |      
| | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | F    = 64} , self = 58 , parent = Nothing , duration = 0.467531024000 , status
| | | | | | | | F    = Fail , start = 2025-09-03 12:05:05.875922597 UTC , finish = 2025-09-03
| | | | | | | | F    12:05:06.343453621 UTC , thread_cap_info = ("ThreadId 98", 1, False)}
| | | | | | | | F    
| | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | | | | F  = 64} , self = 60 , parent = Nothing , duration = 0.446316007000 , status
| | | | | | | | | F  = Fail , start = 2025-09-03 12:05:05.911898085 UTC , finish = 2025-09-03
| | | | | | | | | F  12:05:06.358214092 UTC , thread_cap_info = ("ThreadId 99", 1, False)}
| | | | | | | | | F  
| | F | | | | | | |  
| | S | | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | | | | | | |  = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | S | | | | | | |  = 3 , total_length = 48} , self = 67 , parent = Nothing , duration = 1.190832727000
| | S | | | | | | |  , status = Success , start = 2025-09-03 12:05:05.969047068 UTC , finish
| | S | | | | | | |  = 2025-09-03 12:05:07.159879795 UTC , thread_cap_info = ("ThreadId 102",
| | S | | | | | | |  2, False)}
| | S | | | | | | |  
| | | | | | | | F |  
F | | | | | | |   |  
S | | | | | | |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | | | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | | | |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | | | |   |  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
S | | | | | | |   |  = 4 , total_length = 64} , self = 74 , parent = Nothing , duration = 1.480131763000
S | | | | | | |   |  , status = Success , start = 2025-09-03 12:05:06.355216044 UTC , finish
S | | | | | | |   |  = 2025-09-03 12:05:07.835347807 UTC , thread_cap_info = ("ThreadId 114",
S | | | | | | |   |  0, False)}
S | | | | | | |   |  
| | | | | | | |   F  
| | | | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | | E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | | | | | E    = 3 , total_length = 48} , self = 69 , parent = Nothing , duration = 1.001840709000
| | | | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:06.358396465
| | | | | | | | E    UTC , finish = 2025-09-03 12:05:07.360237174 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E    113", 2, False)}
| | | | | | | | E    
| | | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | | | | | E  = 4 , total_length = 64} , self = 76 , parent = Nothing , duration = 1.470129388000
| | | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:06.37465603
| | | | | | | | | E  UTC , finish = 2025-09-03 12:05:07.844785418 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | E  115", 0, False)}
| | | | | | | | | E  
| | | | | | F | | |  
| | | | F |   | | |  
| | | |   F   | | |  
| | | F       | | |  
| F |         | | |  
|   |         F | |  
|   S           | |  
|               E |  
| F               |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F               |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F               |  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| F               |  = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 3 , total_length
| F               |  = 40} , self = 78 , parent = Nothing , duration = 0.407760078000 , status
| F               |  = Fail , start = 2025-09-03 12:05:07.456908334 UTC , finish = 2025-09-03
| F               |  12:05:07.864668412 UTC , thread_cap_info = ("ThreadId 129", 2, False)}
| F               |  
S |               |  
  |               E  
  F                  
