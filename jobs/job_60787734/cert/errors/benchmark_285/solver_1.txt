last 713 length 3060
CNF 713 vars 3060 clauses
last 822 length 3416
last 883 length 3757
last 2168 length 9408
CNF 2168 vars 9408 clauses
last 3212 length 13662
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1762, clauses: 6670
CNF 822 vars 3416 clauses
last 690 length 2814
CNF 883 vars 3757 clauses
CNF 3212 vars 13662 clauses
last 3070 length 14089
last 1762 length 6670
last 3552 length 15930
last 4966 length 23351
CNF 3070 vars 14089 clauses
CNF 690 vars 2814 clauses
last 4882 length 22528
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1865, clauses: 6936
CNF 1762 vars 6670 clauses
CNF 3552 vars 15930 clauses
CNF 4966 vars 23351 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5608, clauses: 23428
last 1865 length 6936
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4476, clauses: 17243
CNF 4882 vars 22528 clauses
last 5608 length 23428
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1762, clauses: 6670, status: Unsatisfied, time: 0.200530939s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5936, clauses: 24741
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4394, clauses: 17268
CNF 1865 vars 6936 clauses
last 4476 length 17243
CNF 5608 vars 23428 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16062, clauses: 67537
last 5936 length 24741
last 4394 length 17268
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3412, clauses: 14196
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1865, clauses: 6936, status: Satisfied, time: 0.327030995s
CNF 4476 vars 17243 clauses
last 16062 length 67537
last 3412 length 14196
CNF 4394 vars 17268 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4476, clauses: 17243, status: Satisfied, time: 0.333788025s
CNF 3412 vars 14196 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15737, clauses: 66243
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4394, clauses: 17268, status: Satisfied, time: 0.199089251s

last 15737 length 66243
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 6 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 0, 0, 0] -> [0, 1, 0, 1] {- Input 0 -}
  [0, 1, 0, 1] -> [0, 0, 1, 0] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] -> [1, 0, 1, 0] {- Mirror (Input 0) -}
  [1, 0, 1, 0] -> [0, 1, 0, 0] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 0, 1, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [1#, 0, 0] {- DP (Top 1) (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 0] {- DP (Top 2) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [0#, 0, 0, 0] |-> [1#, 0, 1, 0] {- DP (Top 0) (Mirror (Input 0)) -}
  [0#, 0, 0, 0] |-> [0#, 1, 0] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (1, 1/1)
  (0, 1/1)
  (1#, 0/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 0, 1, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#, 0, 1, 0] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#, 0, 1, 0] {- DP (Top 0) (Mirror (Input 0)) -}
  [0, 0, 0, 0] ->= [1, 0, 1, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( 1
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 0
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 1#
  , Wk  / 8A 11A 11A - \
        | 8A 11A 11A - |
        | 8A 11A 11A - |
        \ -  -   -   - / )
  ( 0#
  , Wk  / 8A 8A 10A - \
        | 8A 8A 10A - |
        | 8A 8A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [0#, 0, 0, 0] |-> [1#, 0, 1, 0] {- DP (Top 0) (Mirror (Input 0)) -}
  [0, 0, 0, 0] ->= [1, 0, 1, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  (1, 0/1)
  (0, 0/1)
  (1#, 0/1)
  (0#, 1/1)
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 0, 1, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(6/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 16062 vars 67537 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.402470433000
  min duration 0.167037938000
  total durat. 1.376582957000
**************************************************
F                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                      = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F                      = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 16} , self
F                      = 57 , parent = Nothing , duration = 0.167327104000 , status = Fail , start
F                      = 2025-09-03 11:22:07.512703076 UTC , finish = 2025-09-03 11:22:07.68003018
F                      UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F                      
| F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F                    = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                    = 80} , self = 62 , parent = Nothing , duration = 0.295354597000 , status
| F                    = Fail , start = 2025-09-03 11:22:07.517557297 UTC , finish = 2025-09-03
| F                    11:22:07.812911894 UTC , thread_cap_info = ("ThreadId 81", 0, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F                  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | F                  = 120} , self = 64 , parent = Nothing , duration = 0.319992103000 , status
| | F                  = Fail , start = 2025-09-03 11:22:07.520292307 UTC , finish = 2025-09-03
| | F                  11:22:07.84028441 UTC , thread_cap_info = ("ThreadId 90", 3, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F                = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| | | F                = 32} , self = 58 , parent = Nothing , duration = 0.191727886000 , status
| | | F                = Fail , start = 2025-09-03 11:22:07.520371824 UTC , finish = 2025-09-03
| | | F                11:22:07.71209971 UTC , thread_cap_info = ("ThreadId 86", 2, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F              = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F              = 80} , self = 56 , parent = Nothing , duration = 0.111666812000 , status
| | | | F              = Fail , start = 2025-09-03 11:22:07.524678018 UTC , finish = 2025-09-03
| | | | F              11:22:07.63634483 UTC , thread_cap_info = ("ThreadId 93", 0, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | F            = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | F            = 120} , self = 60 , parent = Nothing , duration = 0.203100167000 , status
| | | | | F            = Fail , start = 2025-09-03 11:22:07.524678396 UTC , finish = 2025-09-03
| | | | | F            11:22:07.727778563 UTC , thread_cap_info = ("ThreadId 91", 3, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | F          = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | F          = 32} , self = 59 , parent = Nothing , duration = 0.167037938000 , status
| | | | | | F          = Fail , start = 2025-09-03 11:22:07.549099866 UTC , finish = 2025-09-03
| | | | | | F          11:22:07.716137804 UTC , thread_cap_info = ("ThreadId 98", 2, False)}
| | | | | | F          
| | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | | F        = 32} , self = 61 , parent = Nothing , duration = 0.263738687000 , status
| | | | | | | F        = Fail , start = 2025-09-03 11:22:07.54910326 UTC , finish = 2025-09-03
| | | | | | | F        11:22:07.812841947 UTC , thread_cap_info = ("ThreadId 99", 2, False)}
| | | | | | | F        
| | | | | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | F      = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | | | | F      = 3 , total_length = 32} , self = 66 , parent = Nothing , duration = 0.499166379000
| | | | | | | | F      , status = Fail , start = 2025-09-03 11:22:07.567145693 UTC , finish =
| | | | | | | | F      2025-09-03 11:22:08.066312072 UTC , thread_cap_info = ("ThreadId 100",
| | | | | | | | F      2, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | | F    = 120} , self = 65 , parent = Nothing , duration = 0.402470433000 , status
| | | | | | | | | F    = Fail , start = 2025-09-03 11:22:07.602038749 UTC , finish = 2025-09-03
| | | | | | | | | F    11:22:08.004509182 UTC , thread_cap_info = ("ThreadId 105", 3, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | | | F  = 120} , self = 63 , parent = Nothing , duration = 0.221560531000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-03 11:22:07.604688132 UTC , finish = 2025-09-03
| | | | | | | | | | F  11:22:07.826248663 UTC , thread_cap_info = ("ThreadId 106", 2, False)}
| | | | | | | | | | F  
| | | | F | | | | | |  
F | | |   | | | | | |  
  | | F   | | | | | |  
  | |     | F | | | |  
S | |     |   | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | |     |   | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | |     |   | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | |     |   | | | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
S | |     |   | | | |  = 4 , total_length = 32} , self = 67 , parent = Nothing , duration = 0.454783271000
S | |     |   | | | |  , status = Success , start = 2025-09-03 11:22:07.721276407 UTC , finish
S | |     |   | | | |  = 2025-09-03 11:22:08.176059678 UTC , thread_cap_info = ("ThreadId 110",
S | |     |   | | | |  2, False)}
S | |     |   | | | |  
| | |     F   | | | |  
| | |         F | | |  
| F |           | | |  
| E |           | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |           | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |           | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |           | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |           | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |           | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E |           | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| E |           | | |  = 4 , total_length = 32} , self = 69 , parent = Nothing , duration = 0.465204406000
| E |           | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:22:07.813969607
| E |           | | |  UTC , finish = 2025-09-03 11:22:08.279174013 UTC , thread_cap_info = ("ThreadId
| E |           | | |  119", 2, False)}
| E |           | | |  
| | |           | | F  
| | F           | |    
| |             | F    
| |             F      
S |                    
  E                    
