last 720 length 3139
last 618 length 2620
CNF 618 vars 2620 clauses
CNF 720 vars 3139 clauses
last 809 length 3442
last 1037 length 4407
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 5989
CNF 1037 vars 4407 clauses
CNF 809 vars 3442 clauses
last 3000 length 14434
last 2634 length 11991
last 1654 length 5989
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25733
last 3598 length 16584
last 4198 length 19409
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902
CNF 3000 vars 14434 clauses
last 4066 length 19912
CNF 2634 vars 11991 clauses
last 5324 length 25097
CNF 1654 vars 5989 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7396, clauses: 30961
last 6145 length 25733
CNF 4198 vars 19409 clauses
CNF 3598 vars 16584 clauses
last 2156 length 7902
CNF 4066 vars 19912 clauses
last 7396 length 30961
CNF 6145 vars 25733 clauses
CNF 5324 vars 25097 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 5989, status: Unsatisfied, time: 0.466676013s
CNF 2156 vars 7902 clauses
CNF 7396 vars 30961 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5379, clauses: 20429
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4692, clauses: 17447
last 5379 length 20429
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902, status: Satisfied, time: 0.609183088s
last 4692 length 17447
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25733, status: Unsatisfied, time: 0.660036214s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3678, clauses: 15310
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19447, clauses: 82039
CNF 5379 vars 20429 clauses
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20738, clauses: 87473

last 3678 length 15310
last 19447 length 82039
last 20738 length 87473
CNF 4692 vars 17447 clauses
summaryCNF 3678 vars 15310 clauses

**************************************************
SRS with 2 rules on 2 letters       DP
SRS with 6 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, b, b] -> [a, a, b, b] {- Input 0 -}
  [a, b, a, a] -> [b, a, a, b] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a#, b, a, a] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [a#, b, a, a] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [a#, b, a, a] |-> [b#] {- DP (Top 3) (Input 1) -}
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b#, b, b, b] |-> [a#, b, b] {- DP (Top 1) (Input 0) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 10A 11A 11A - \
        | 10A 11A 11A - |
        | 10A 11A 11A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 8A 10A 10A - \
        | 8A 10A 10A - |
        | 8A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, b, b] ->= [a, a, b, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [b, a, a, b] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Deepee(6/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.584367256000
  min duration 0.110004578000
  total durat. 1.957378720000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.685210195000
  min duration 0.099188102000
  total durat. 2.109996732000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.041397430000
  min duration 1.041397430000
  total durat. 1.041397430000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 32}
    , self = 70
    , parent = Nothing
    , duration = 1.041397430000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:54:18.680599969 UTC
    , finish = 2025-09-03 11:54:19.721997399 UTC
    , thread_cap_info = ("ThreadId 110", 1, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.063612760000
  min duration 1.063612760000
  total durat. 1.063612760000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 2
      , alphabet_size = 4
      , total_length = 32}
    , self = 68
    , parent = Nothing
    , duration = 1.063612760000
    , status = Success
    , start = 2025-09-03 11:54:18.657865386 UTC
    , finish = 2025-09-03 11:54:19.721478146 UTC
    , thread_cap_info = ("ThreadId 109", 1, False)}
**************************************************
F                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                      , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                      = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F                      = 16} , self = 57 , parent = Nothing , duration = 0.202922202000 , status
F                      = Fail , start = 2025-09-03 11:54:18.355989675 UTC , finish = 2025-09-03
F                      11:54:18.558911877 UTC , thread_cap_info = ("ThreadId 26", 2, False)}
F                      
| F                    Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F                    , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F                    = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F                    , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F                    = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
| F                    = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 16} , self
| F                    = 40 , parent = Nothing , duration = 0.112921391000 , status = Fail , start
| F                    = 2025-09-03 11:54:18.356033973 UTC , finish = 2025-09-03 11:54:18.468955364
| F                    UTC , thread_cap_info = ("ThreadId 22", 0, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F                  = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F                  = 80} , self = 62 , parent = Nothing , duration = 0.584367256000 , status
| | F                  = Fail , start = 2025-09-03 11:54:18.362915284 UTC , finish = 2025-09-03
| | F                  11:54:18.94728254 UTC , thread_cap_info = ("ThreadId 66", 3, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F                = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F                = 80} , self = 61 , parent = Nothing , duration = 0.517623801000 , status
| | | F                = Fail , start = 2025-09-03 11:54:18.362918129 UTC , finish = 2025-09-03
| | | F                11:54:18.88054193 UTC , thread_cap_info = ("ThreadId 68", 3, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | F              = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size = 3 , total_length
| | | | F              = 24} , self = 48 , parent = Nothing , duration = 0.110004578000 , status
| | | | F              = Fail , start = 2025-09-03 11:54:18.3639427 UTC , finish = 2025-09-03
| | | | F              11:54:18.473947278 UTC , thread_cap_info = ("ThreadId 74", 1, False)}
| | | | F              
| | | | | F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | F            = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | | F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | F            = 16} , self = 58 , parent = Nothing , duration = 0.212881554000 , status
| | | | | F            = Fail , start = 2025-09-03 11:54:18.381973015 UTC , finish = 2025-09-03
| | | | | F            11:54:18.594854569 UTC , thread_cap_info = ("ThreadId 54", 2, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | F          = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | F          = 32} , self = 60 , parent = Nothing , duration = 0.254524040000 , status
| | | | | | F          = Fail , start = 2025-09-03 11:54:18.409428364 UTC , finish = 2025-09-03
| | | | | | F          11:54:18.663952404 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| | | | | | F          
| | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | | | F        = 32} , self = 59 , parent = Nothing , duration = 0.244055249000 , status
| | | | | | | F        = Fail , start = 2025-09-03 11:54:18.412975323 UTC , finish = 2025-09-03
| | | | | | | F        11:54:18.657030572 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | | | | | | F        
| F | | | | | |        
|   | | F | | |        
| F | |   | | |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | |   | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | |   | | |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | |   | | |        = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F | |   | | |        = 3 , total_length = 24} , self = 67 , parent = Nothing , duration = 0.786646136000
| F | |   | | |        , status = Fail , start = 2025-09-03 11:54:18.47398847 UTC , finish = 2025-09-03
| F | |   | | |        11:54:19.260634606 UTC , thread_cap_info = ("ThreadId 95", 1, False)}
| F | |   | | |        
| | | | F | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F | | |        = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | F | | |        = 120} , self = 63 , parent = Nothing , duration = 0.512530888000 , status
| | | | F | | |        = Fail , start = 2025-09-03 11:54:18.477970293 UTC , finish = 2025-09-03
| | | | F | | |        11:54:18.990501181 UTC , thread_cap_info = ("ThreadId 99", 2, False)}
| | | | F | | |        
| | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | | F      = 120} , self = 66 , parent = Nothing , duration = 0.685210195000 , status
| | | | | | | | F      = Fail , start = 2025-09-03 11:54:18.479985557 UTC , finish = 2025-09-03
| | | | | | | | F      11:54:19.165195752 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | | F    = 100} , self = 64 , parent = Nothing , duration = 0.495951958000 , status
| | | | | | | | | F    = Fail , start = 2025-09-03 11:54:18.500094743 UTC , finish = 2025-09-03
| | | | | | | | | F    11:54:18.996046701 UTC , thread_cap_info = ("ThreadId 102", 2, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | | | F  = 100} , self = 65 , parent = Nothing , duration = 0.563919385000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-03 11:54:18.52168358 UTC , finish = 2025-09-03
| | | | | | | | | | F  11:54:19.085602965 UTC , thread_cap_info = ("ThreadId 103", 2, False)}
| | | | | | | | | | F  
F | | | | | | | | | |  
  | | | | F | | | | |  
  | | | |   | F | | |  
S | | | |   |   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | |   |   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | |   |   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | |   |   | | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
S | | | |   |   | | |  = 4 , total_length = 32} , self = 68 , parent = Nothing , duration = 1.063612760000
S | | | |   |   | | |  , status = Success , start = 2025-09-03 11:54:18.657865386 UTC , finish
S | | | |   |   | | |  = 2025-09-03 11:54:19.721478146 UTC , thread_cap_info = ("ThreadId 109",
S | | | |   |   | | |  1, False)}
S | | | |   |   | | |  
| | | | |   F   | | |  
| | | | | E     | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E     | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E     | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E     | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E     | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E     | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | | E     | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | E     | | |  = 4 , total_length = 32} , self = 70 , parent = Nothing , duration = 1.041397430000
| | | | | E     | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:54:18.680599969
| | | | | E     | | |  UTC , finish = 2025-09-03 11:54:19.721997399 UTC , thread_cap_info = ("ThreadId
| | | | | E     | | |  110", 1, False)}
| | | | | E     | | |  
| | | F | |     | | |  
| | F   | |     | | |  
| |     F |     | | |  
| |       |     | F |  
| |       |     |   F  
| |       |     F      
| F       |            
S         |            
          E            
