last 2893 length 14024
last 2867 length 12984
CNF 2893 vars 14024 clauses
CNF 2867 vars 12984 clauses
last 4178 length 19531
CNF 4178 vars 19531 clauses
last 4190 length 19609
CNF 4190 vars 19609 clauses
last 5094 length 25368
CNF 5094 vars 25368 clauses
last 5132 length 25450
last 669 length 2809
CNF 669 vars 2809 clauses
last 759 length 3289
last 1722 length 7804
CNF 759 vars 3289 clauses
CNF 1722 vars 7804 clauses
last 1436 length 6641
CNF 1436 vars 6641 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       weights
SRS with 2 rules on 2 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 1 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 4 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 4 weak rules on 3 letters       no strict rules

  2 SRS with 1 rules on 2 letters       split
  2 sub-proofs
    1 SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 4 rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Input 0 -}
  [b, a, b, b] -> [b, b, a, b] {- Input 1 -}
  [a, b, a, b] -> [a, b, b, b] {- Input 2 -}
reason
  (a, 1/1)
  (b, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Input 0 -}
  [b, a, b, b] -> [b, b, a, b] {- Input 1 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, a] {- Input 0 -}
  [b, a, b, b] -> [b, b, a, b] {- Input 1 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, b], [b, a], [a, b], [b, b], [b, a]] -> [ [a, b] , [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, b], [b, b]] -> [ [a, b] , [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, b], [b, a]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, b], [b, b], [b, b]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  ( [a, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Input 0 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, a] {- Input 0 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3,2)\Weight(2,2)\Split[(1/1,2)\TileAllAll{2}(4/4,4)\Matrix{\Natural}{2}(0/4,3)[],(1,2)\Split[(1,2)\TileAllAll{2}(4,3)\Matrix{\Natural}{2}(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 16} , self
F          = 48 , parent = Nothing , duration = 0.180740976000 , status = Fail , start
F          = 2025-09-03 12:18:20.781456747 UTC , finish = 2025-09-03 12:18:20.962197723
F          UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| S        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| S        = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| S        = 100} , self = 68 , parent = Nothing , duration = 0.253078392000 , status
| S        = Success , start = 2025-09-03 12:18:20.788652451 UTC , finish = 2025-09-03
| S        12:18:21.041730843 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| S        
| | S      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | S      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | S      = 100} , self = 59 , parent = Nothing , duration = 0.203554137000 , status
| | S      = Success , start = 2025-09-03 12:18:20.799346941 UTC , finish = 2025-09-03
| | S      12:18:21.002901078 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | S      
| | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | E    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | E    = 100} , self = 70 , parent = Nothing , duration = 0.232931130000 , status
| | | E    = Except "AsyncCancelled" , start = 2025-09-03 12:18:20.819426927 UTC ,
| | | E    finish = 2025-09-03 12:18:21.052358057 UTC , thread_cap_info = ("ThreadId
| | | E    80", 1, False)}
| | | E    
| | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | E  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | E  = 100} , self = 75 , parent = Nothing , duration = 0.204204128000 , status
| | | | E  = Except "AsyncCancelled" , start = 2025-09-03 12:18:20.859090958 UTC ,
| | | | E  finish = 2025-09-03 12:18:21.063295086 UTC , thread_cap_info = ("ThreadId
| | | | E  81", 0, False)}
| | | | E  
F | | | |  
  | S | |  
  S   | |  
      E |  
        E  
