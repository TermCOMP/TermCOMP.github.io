last 248 length 967
CNF 248 vars 967 clauses
last 368 length 1530
CNF 368 vars 1530 clauses
last 576 length 2379
CNF 576 vars 2379 clauses
last 608 length 2626
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1547, clauses: 5409
CNF 608 vars 2626 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2456, clauses: 8865
last 1547 length 5409
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4540, clauses: 18615
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5668, clauses: 23183
last 2456 length 8865
last 5554 length 22901
last 6470 length 26981
last 4540 length 18615
CNF 1547 vars 5409 clauses
last 5668 length 23183
CNF 2456 vars 8865 clauses
CNF 6470 vars 26981 clauses
CNF 5554 vars 22901 clauses
CNF 5668 vars 23183 clauses
CNF 4540 vars 18615 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1547, clauses: 5409, status: Unsatisfied, time: 0.191924722s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2456, clauses: 8865, status: Unsatisfied, time: 0.11757485s
last 3928 length 17678
last 4786 length 24103
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4540, clauses: 18615, status: Satisfied, time: 0.256532115s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5668, clauses: 23183, status: Satisfied, time: 0.258117181s
last 10948 length 50695
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2799, clauses: 10962
last 14910 length 63743
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13676, clauses: 51969
**************************************************
last 2799 length 10962
last 13676 length 51969
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       EDG
SRS with 6 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 6 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, b, b] -> [c] {- Input 1 -}
  [a, c] -> [c, b, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, b, a] -> [c] {- Mirror (Input 1) -}
  [c, a] -> [a, a, b, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, b, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [a#, a, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, b, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, a] |-> [b#, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 3) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 1A  1A 1A \
        | -1A 0A -  |
        \ -   -  0A / )
  ( b
  , Wk  / -1A 1A 0A \
        | -1A 0A -  |
        \ -   -  0A / )
  ( c
  , Wk  / 1A  -   -   \
        | -1A -2A -2A |
        \ -   -   0A  / )
  ( a#
  , Wk  / 0A 1A -2A \
        | -  -  -   |
        \ -  -  0A  / )
  ( b#
  , Wk  / 0A 1A -  \
        | -  -  -  |
        \ -  -  0A / )
  ( c#
  , Wk  / 1A -2A -2A \
        | -  -   -   |
        \ -  -   0A  / )
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a] |-> [c#] {- DP (Top 0) (Mirror (Input 1)) -}CNF 10948 vars 50695 clauses
CNF 2799 vars 10962 clauses

CNF 14910 vars 63743 clauses
CNF 13676 vars 51969 clauses
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [a, a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee\EDG(6/3,6)\Matrix{\ArcticBZ}{3}(2/3,6)\Weight(0/3,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.800188045000
  min duration 0.752820941000
  total durat. 1.553008986000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.598062351000
  min duration 0.553973174000
  total durat. 1.152035525000
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F              = 55 , parent = Nothing , duration = 0.257505697000 , status = Fail , start
F              = 2025-09-03 11:24:41.239115058 UTC , finish = 2025-09-03 11:24:41.496620755
F              UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F              
| F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F            = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| F            = 4 , total_length = 19} , self = 62 , parent = Nothing , duration = 0.553973174000
| F            , status = Fail , start = 2025-09-03 11:24:41.259358801 UTC , finish =
| F            2025-09-03 11:24:41.813331975 UTC , thread_cap_info = ("ThreadId 74", 3,
| F            False)}
| F            
| | S          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | S          , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | S          = 4 , total_length = 19} , self = 64 , parent = Nothing , duration = 0.800188045000
| | S          , status = Success , start = 2025-09-03 11:24:41.27507397 UTC , finish
| | S          = 2025-09-03 11:24:42.075262015 UTC , thread_cap_info = ("ThreadId 77",
| | S          3, False)}
| | S          
| | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F        = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | F        = 6 , total_length = 36} , self = 63 , parent = Nothing , duration = 0.598062351000
| | | F        , status = Fail , start = 2025-09-03 11:24:41.275198816 UTC , finish =
| | | F        2025-09-03 11:24:41.873261167 UTC , thread_cap_info = ("ThreadId 79", 2,
| | | F        False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | F      = 27 , num_top_rules = 27 , num_weak_rules = 27 , alphabet_size = 12 ,
| | | | F      total_length = 297} , self = 57 , parent = Nothing , duration = 0.281868769000
| | | | F      , status = Fail , start = 2025-09-03 11:24:41.29314272 UTC , finish = 2025-09-03
| | | | F      11:24:41.575011489 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | | | | F    = 27 , num_top_rules = 27 , num_weak_rules = 27 , alphabet_size = 12 ,
| | | | | F    total_length = 297} , self = 59 , parent = Nothing , duration = 0.307493890000
| | | | | F    , status = Fail , start = 2025-09-03 11:24:41.313155748 UTC , finish =
| | | | | F    2025-09-03 11:24:41.620649638 UTC , thread_cap_info = ("ThreadId 85", 3,
| | | | | F    False)}
| | | | | F    
| | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | S  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | | | S  = 6 , total_length = 36} , self = 66 , parent = Nothing , duration = 0.752820941000
| | | | | | S  , status = Success , start = 2025-09-03 11:24:41.322984802 UTC , finish
| | | | | | S  = 2025-09-03 11:24:42.075805743 UTC , thread_cap_info = ("ThreadId 90",
| | | | | | S  2, False)}
| | | | | | S  
F | | | | | |  
  | | | F | |  
  | | |   F |  
  F | |     |  
    | F     |  
E   |       |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E   |       |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E   |       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E   |       |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E   |       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E   |       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
E   |       |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
E   |       |  = 6 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.193269207000
E   |       |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:24:41.893162058
E   |       |  UTC , finish = 2025-09-03 11:24:42.086431265 UTC , thread_cap_info = ("ThreadId
E   |       |  119", 2, False)}
E   |       |  
|   S       |  
|           S  
E              
