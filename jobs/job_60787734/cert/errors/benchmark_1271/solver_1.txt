last 419 length 1833
last 371 length 1555
CNF 419 vars 1833 clauses
last 284 length 1113
CNF 284 vars 1113 clauses
CNF 371 vars 1555 clauses
last 342 length 1408
CNF 342 vars 1408 clauses
last 2397 length 10176
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1943, clauses: 6798
CNF 2397 vars 10176 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1770, clauses: 6311
last 3256 length 13945
last 1943 length 6798
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4961, clauses: 20267
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4880, clauses: 20047
last 7723 length 31848
last 5283 length 21003
last 1770 length 6311
CNF 3256 vars 13945 clauses
CNF 1943 vars 6798 clauses
last 14704 length 92448
last 19594 length 96361
last 4961 length 20267
last 4880 length 20047
CNF 5283 vars 21003 clauses
CNF 7723 vars 31848 clauses
CNF 1770 vars 6311 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1943, clauses: 6798, status: Satisfied, time: 0.498333303s
CNF 14704 vars 92448 clauses
CNF 4961 vars 20267 clauses
CNF 19594 vars 96361 clauses
CNF 4880 vars 20047 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1770, clauses: 6311, status: Satisfied, time: 0.386892639s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17177, clauses: 65679
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4880, clauses: 20047, status: Satisfied, time: 0.385228291s
last 238 length 943
last 364 length 1534
last 17177 length 65679
CNF 238 vars 943 clauses
CNF 364 vars 1534 clauses
CNF 17177 vars 65679 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 7 strict rules and 3 weak rules on 6 letters       weights
SRS with 5 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 5 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 3 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, c, c, a, b] {- Input 1 -}
  [b, b] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [b, a, c, c, c] {- Mirror (Input 1) -}
  [b, b] -> [a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, c, c, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, a, c, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
      [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (b, 2/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, c, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c#
  , Wk  / 15A 15A 18A - \
        | 15A 15A 18A - |
        | 15A 15A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [b, a, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(7/3,6)\Weight(5/3,6)\EDG[(2/3,5)\Usable(2,3)\Weight(0,0)\EDG[],(3/3,4)\Matrix{\Arctic}{3}(0/3,3)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.821994775000
  min duration 0.008661251000
  total durat. 2.068401110000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.718938168000
  min duration 0.013742277000
  total durat. 1.416015957000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.976263034000
  min duration 0.826243678000
  total durat. 1.802506712000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.934550048000
  min duration 0.760216157000
  total durat. 1.694766205000
**************************************************
F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                  = 162} , self = 62 , parent = Nothing , duration = 0.114065303000 , status
F                  = Fail , start = 2025-09-03 11:25:22.886911492 UTC , finish = 2025-09-03
F                  11:25:23.000976795 UTC , thread_cap_info = ("ThreadId 91", 0, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 162} , self = 63 , parent = Nothing , duration = 0.553378447000 , status
| F                = Fail , start = 2025-09-03 11:25:22.900784931 UTC , finish = 2025-09-03
| F                11:25:23.454163378 UTC , thread_cap_info = ("ThreadId 89", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | F              = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | F              total_length = 381} , self = 65 , parent = Nothing , duration = 0.659149207000
| | F              , status = Fail , start = 2025-09-03 11:25:22.900806365 UTC , finish =
| | F              2025-09-03 11:25:23.559955572 UTC , thread_cap_info = ("ThreadId 100",
| | F              3, False)}
| | F              
| | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S            = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | S            = 4 , total_length = 24} , self = 74 , parent = Nothing , duration = 0.934550048000
| | | S            , status = Success , start = 2025-09-03 11:25:22.90628975 UTC , finish
| | | S            = 2025-09-03 11:25:23.840839798 UTC , thread_cap_info = ("ThreadId 102",
| | | S            2, False)}
| | | S            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | F          = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | F          total_length = 381} , self = 64 , parent = Nothing , duration = 0.555207074000
| | | | F          , status = Fail , start = 2025-09-03 11:25:22.92066795 UTC , finish = 2025-09-03
| | | | F          11:25:23.475875024 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | F          
| | | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S        = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | S        = 5 , total_length = 24} , self = 66 , parent = Nothing , duration = 0.760216157000
| | | | | S        , status = Success , start = 2025-09-03 11:25:22.920679458 UTC , finish
| | | | | S        = 2025-09-03 11:25:23.680895615 UTC , thread_cap_info = ("ThreadId 104",
| | | | | S        2, False)}
| | | | | S        
| | | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | E      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | | E      = 5 , total_length = 24} , self = 69 , parent = Nothing , duration = 0.826243678000
| | | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:25:22.934062322
| | | | | | E      UTC , finish = 2025-09-03 11:25:23.760306 UTC , thread_cap_info = ("ThreadId
| | | | | | E      105", 2, False)}
| | | | | | E      
| | | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | E    = 4 , total_length = 24} , self = 77 , parent = Nothing , duration = 0.976263034000
| | | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:25:22.960298165
| | | | | | | E    UTC , finish = 2025-09-03 11:25:23.936561199 UTC , thread_cap_info = ("ThreadId
| | | | | | | E    107", 2, False)}
| | | | | | | E    
| | | | | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 117 , num_strict_rules
| | | | | | | | F  = 90 , num_top_rules = 90 , num_weak_rules = 27 , alphabet_size = 18 ,
| | | | | | | | F  total_length = 657} , self = 72 , parent = Nothing , duration = 0.821994775000
| | | | | | | | F  , status = Fail , start = 2025-09-03 11:25:23.000955204 UTC , finish =
| | | | | | | | F  2025-09-03 11:25:23.822949979 UTC , thread_cap_info = ("ThreadId 110",
| | | | | | | | F  3, False)}
| | | | | | | | F  
F | | | | | | | |  
F | | | | | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 117 , num_strict_rules
F | | | | | | | |  = 90 , num_top_rules = 90 , num_weak_rules = 27 , alphabet_size = 18 ,
F | | | | | | | |  total_length = 657} , self = 68 , parent = Nothing , duration = 0.718938168000
F | | | | | | | |  , status = Fail , start = 2025-09-03 11:25:23.020798526 UTC , finish =
F | | | | | | | |  2025-09-03 11:25:23.739736694 UTC , thread_cap_info = ("ThreadId 111",
F | | | | | | | |  3, False)}
F | | | | | | | |  
| F | | | | | | |  
|   | | F | | | |  
|   F |   | | | |  
|     |   S | | |  
F     |     | | |  
      |     E | |  
      |       | F  
      S       |    
              E    
