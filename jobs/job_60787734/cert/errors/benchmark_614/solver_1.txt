last 3290 length 23434
CNF 3290 vars 23434 clauses
last 2674 length 15904
last 4640 length 25063
CNF 2674 vars 15904 clauses
CNF 4640 vars 25063 clauses
last 6000 length 29042
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2433, clauses: 9548
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2873, clauses: 11826
last 2433 length 9548
CNF 6000 vars 29042 clauses
last 2873 length 11826
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7852, clauses: 32889
CNF 2433 vars 9548 clauses
last 7852 length 32889
CNF 2873 vars 11826 clauses
CNF 7852 vars 32889 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7852, clauses: 32889, status: Satisfied, time: 0.114059738s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2433, clauses: 9548, status: Satisfied, time: 0.219910769s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8243, clauses: 34544
last 8243 length 34544
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2873, clauses: 11826, status: Unsatisfied, time: 0.221692708s
CNF 8243 vars 34544 clauses
last 3170 length 22987
CNF 3170 vars 22987 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8243, clauses: 34544, status: Satisfied, time: 0.421407367s
last 4430 length 24200
CNF 4430 vars 24200 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2222, clauses: 8601
last 2222 length 8601
CNF 2222 vars 8601 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2222, clauses: 8601, status: Satisfied, time: 0.13620679s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7514, clauses: 31463
last 7514 length 31463
CNF 7514 vars 31463 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       DP
SRS with 5 strict rules and 4 weak rules on 4 letters       EDG
SRS with 5 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [DP (Top 7) (Input 3), DP (Top 4) (Input 2)] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [DP (Top 7) (Input 3), DP (Top 4) (Input 2)] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 3) -}
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
reason
  ( 1
  , Wk  / - 2A 0A \
        | - 1A 1A |
        \ - -  0A / )
  ( 2
  , Wk  / - -   0A \
        | - -2A -  |
        \ - -   0A / )
  ( 0
  , Wk  / 1A - 2A \
        | 0A - 0A |
        \ -  - 0A / )
  ( 0#
  , Wk  / 0A - 0A \
        | -  - -  |
        \ -  - 0A / )
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Deepee\EDG(5/4,4)\Matrix{\ArcticBZ}{3}(0/4,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.687938881000
  min duration 0.501562043000
  total durat. 1.786801431000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.438065026000
  min duration 0.318004540000
  total durat. 1.108809175000
Fail : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = True}"
  total number 1
  max duration 1.424526322000
  min duration 1.424526322000
  total durat. 1.424526322000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = True}"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 74}
    , self = 69
    , parent = Nothing
    , duration = 1.424526322000
    , status = Fail
    , start = 2025-09-03 12:21:27.618397459 UTC
    , finish = 2025-09-03 12:21:29.042923781 UTC
    , thread_cap_info = ("ThreadId 22", 2, False)}
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 74} , self
F          = 69 , parent = Nothing , duration = 1.424526322000 , status = Fail , start
F          = 2025-09-03 12:21:27.618397459 UTC , finish = 2025-09-03 12:21:29.042923781
F          UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F        = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F        = 94} , self = 58 , parent = Nothing , duration = 0.597300507000 , status
| F        = Fail , start = 2025-09-03 12:21:27.630817287 UTC , finish = 2025-09-03
| F        12:21:28.228117794 UTC , thread_cap_info = ("ThreadId 60", 3, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F      = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F      = 94} , self = 56 , parent = Nothing , duration = 0.318004540000 , status
| | F      = Fail , start = 2025-09-03 12:21:27.651648328 UTC , finish = 2025-09-03
| | F      12:21:27.969652868 UTC , thread_cap_info = ("ThreadId 61", 3, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F    = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | F    = 139} , self = 59 , parent = Nothing , duration = 0.687938881000 , status
| | | F    = Fail , start = 2025-09-03 12:21:27.764423559 UTC , finish = 2025-09-03
| | | F    12:21:28.45236244 UTC , thread_cap_info = ("ThreadId 98", 3, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F  = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F  = 139} , self = 57 , parent = Nothing , duration = 0.352739609000 , status
| | | | F  = Fail , start = 2025-09-03 12:21:27.82381785 UTC , finish = 2025-09-03
| | | | F  12:21:28.176557459 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | | | F  
| | F | |  
| | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |  = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | S | |  = 4 , total_length = 94} , self = 61 , parent = Nothing , duration = 0.519828624000
| | S | |  , status = Success , start = 2025-09-03 12:21:28.050185741 UTC , finish
| | S | |  = 2025-09-03 12:21:28.570014365 UTC , thread_cap_info = ("ThreadId 104",
| | S | |  3, False)}
| | S | |  
| | | | F  
| | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F  = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | | F  = 4 , total_length = 139} , self = 68 , parent = Nothing , duration = 0.457540870000
| | | | F  , status = Fail , start = 2025-09-03 12:21:28.188223089 UTC , finish =
| | | | F  2025-09-03 12:21:28.645763959 UTC , thread_cap_info = ("ThreadId 107",
| | | | F  3, False)}
| | | | F  
| F | | |  
| S | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| S | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| S | | |  = 4 , total_length = 94} , self = 60 , parent = Nothing , duration = 0.324045597000
| S | | |  , status = Success , start = 2025-09-03 12:21:28.245129194 UTC , finish
| S | | |  = 2025-09-03 12:21:28.569174791 UTC , thread_cap_info = ("ThreadId 108",
| S | | |  3, False)}
| S | | |  
| | | F |  
| | | S |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | S |  = 4 , total_length = 139} , self = 70 , parent = Nothing , duration = 0.619309290000
| | | S |  , status = Success , start = 2025-09-03 12:21:28.452449729 UTC , finish
| | | S |  = 2025-09-03 12:21:29.071759019 UTC , thread_cap_info = ("ThreadId 112",
| | | S |  3, False)}
| | | S |  
| S | | |  
|   S | |  
| F   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F   | |  = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| F   | |  = 87} , self = 75 , parent = Nothing , duration = 0.501562043000 , status
| F   | |  = Fail , start = 2025-09-03 12:21:28.64575383 UTC , finish = 2025-09-03
| F   | |  12:21:29.147315873 UTC , thread_cap_info = ("ThreadId 119", 3, False)}
| F   | |  
| |   | F  
| | F |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F |    = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | F |    = 87} , self = 71 , parent = Nothing , duration = 0.438065026000 , status
| | F |    = Fail , start = 2025-09-03 12:21:28.64577668 UTC , finish = 2025-09-03
| | F |    12:21:29.083841706 UTC , thread_cap_info = ("ThreadId 120", 3, False)}
| | F |    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | | E  = 4 , total_length = 139} , self = 73 , parent = Nothing , duration = 0.317145381000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 12:21:28.807404247
| | | | E  UTC , finish = 2025-09-03 12:21:29.124549628 UTC , thread_cap_info = ("ThreadId
| | | | E  122", 3, False)}
| | | | E  
F | | | |  
  | | S |  
  | F   |  
S |     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |     |  = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
S |     |  = 4 , total_length = 87} , self = 77 , parent = Nothing , duration = 0.196965837000
S |     |  , status = Success , start = 2025-09-03 12:21:29.094635677 UTC , finish
S |     |  = 2025-09-03 12:21:29.291601514 UTC , thread_cap_info = ("ThreadId 126",
S |     |  3, False)}
S |     |  
| |     E  
| F        
S          
