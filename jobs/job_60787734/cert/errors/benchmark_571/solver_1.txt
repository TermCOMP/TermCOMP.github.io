last 14162 length 64274
CNF 14162 vars 64274 clauses
last 14341 length 66910
last 24395 length 114289
CNF 14341 vars 66910 clauses
last 26787 length 119001
CNF 26787 vars 119001 clauses
CNF 24395 vars 114289 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21563, clauses: 80109
last 21563 length 80109
CNF 21563 vars 80109 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21563, clauses: 80109, status: Satisfied, time: 0.614374675s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 34337, clauses: 135291
last 34337 length 135291
CNF 34337 vars 135291 clauses
last 13926 length 63278
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 34337, clauses: 135291, status: Satisfied, time: 0.763475796s
last 14329 length 66943
CNF 13926 vars 63278 clauses
CNF 14329 vars 66943 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21350, clauses: 79212
last 21350 length 79212
CNF 21350 vars 79212 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21350, clauses: 79212, status: Satisfied, time: 0.937139972s
last 20139 length 89177
last 21859 length 101012
CNF 20139 vars 89177 clauses
CNF 21859 vars 101012 clauses
last 14340 length 64809
last 14978 length 70455
CNF 14340 vars 64809 clauses
CNF 14978 vars 70455 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30043, clauses: 115792
last 30043 length 115792
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21464, clauses: 79803
last 21464 length 79803
CNF 30043 vars 115792 clauses
CNF 21464 vars 79803 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30043, clauses: 115792, status: Satisfied, time: 0.728500563s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21464, clauses: 79803, status: Satisfied, time: 0.568494131s
last 14268 length 64531
last 14861 length 69997
CNF 14268 vars 64531 clauses
CNF 14861 vars 69997 clauses
last 19262 length 85340
last 20971 length 97273
CNF 19262 vars 85340 clauses
CNF 20971 vars 97273 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21053, clauses: 78279
last 21053 length 78279
CNF 21053 vars 78279 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21053, clauses: 78279, status: Satisfied, time: 0.629114626s
**************************************************
summary
**************************************************
SRS with 50 rules on 6 letters       mirror
SRS with 50 rules on 6 letters       DP
SRS with 133 strict rules and 50 weak rules on 10 letters       weights
SRS with 105 strict rules and 50 weak rules on 10 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 50 weak rules on 7 letters       EDG
  SRS with 1 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 50 weak rules on 6 letters       EDG

  2 SRS with 2 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 50 weak rules on 7 letters       EDG
  SRS with 1 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 50 weak rules on 6 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 0, 1] -> [0, 0, 2, 1, 3] {- Input 0 -}
  [0, 0, 1] -> [0, 0, 2, 2, 3, 1] {- Input 1 -}
  [0, 4, 1] -> [0, 4, 2, 2, 1] {- Input 2 -}
  [0, 4, 1] -> [0, 2, 3, 1, 4, 2] {- Input 3 -}
  [1, 0, 1] -> [0, 2, 1, 1] {- Input 4 -}
  [1, 0, 1] -> [0, 2, 1, 1, 2] {- Input 5 -}
  [1, 0, 1] -> [1, 0, 3, 2, 1] {- Input 6 -}
  [1, 4, 0] -> [1, 0, 3, 2, 4, 2] {- Input 7 -}
  [1, 4, 1] -> [4, 2, 1, 1] {- Input 8 -}
  [1, 4, 1] -> [4, 2, 1, 1, 2, 1] {- Input 9 -}
  [4, 0, 1] -> [4, 0, 2, 1] {- Input 10 -}
  [5, 0, 1] -> [5, 0, 2, 1] {- Input 11 -}
  [5, 0, 1] -> [0, 2, 1, 5, 3] {- Input 12 -}
  [5, 0, 1] -> [0, 3, 2, 1, 5, 5] {- Input 13 -}
  [5, 0, 1] -> [3, 0, 2, 3, 5, 1] {- Input 14 -}
  [5, 0, 5] -> [0, 3, 2, 5, 3, 5] {- Input 15 -}
  [5, 4, 1] -> [2, 4, 2, 5, 1, 3] {- Input 16 -}
  [5, 4, 1] -> [4, 5, 2, 1, 3, 3] {- Input 17 -}
  [0, 0, 4, 5] -> [0, 5, 0, 2, 4, 2] {- Input 18 -}
  [0, 1, 2, 0] -> [2, 0, 2, 1, 0] {- Input 19 -}
  [0, 2, 0, 1] -> [0, 0, 2, 1, 3] {- Input 20 -}
  [0, 3, 4, 0] -> [3, 2, 4, 0, 0, 3] {- Input 21 -}
  [0, 4, 0, 4] -> [0, 0, 3, 2, 4, 4] {- Input 22 -}
  [1, 0, 1, 4] -> [2, 3, 1, 1, 4, 0] {- Input 23 -}
  [1, 0, 3, 1] -> [4, 2, 3, 1, 1, 0] {- Input 24 -}
  [1, 2, 0, 4] -> [1, 4, 2, 0, 3, 2] {- Input 25 -}
  [1, 3, 0, 4] -> [4, 0, 3, 2, 1, 3] {- Input 26 -}
  [1, 4, 1, 5] -> [2, 1, 2, 5, 1, 4] {- Input 27 -}
  [4, 0, 5, 1] -> [0, 2, 4, 2, 1, 5] {- Input 28 -}
  [4, 1, 0, 0] -> [3, 2, 1, 4, 0, 0] {- Input 29 -}
  [4, 1, 0, 4] -> [4, 4, 0, 2, 1] {- Input 30 -}
  [5, 0, 0, 1] -> [0, 3, 2, 5, 1, 0] {- Input 31 -}
  [5, 0, 3, 1] -> [0, 5, 3, 2, 1] {- Input 32 -}
  [5, 0, 3, 1] -> [0, 3, 5, 2, 2, 1] {- Input 33 -}
  [5, 0, 5, 1] -> [5, 2, 5, 3, 1, 0] {- Input 34 -}
  [5, 2, 4, 1] -> [2, 1, 4, 2, 5] {- Input 35 -}
  [5, 4, 1, 5] -> [4, 5, 5, 2, 1] {- Input 36 -}
  [5, 4, 1, 5] -> [2, 1, 5, 4, 2, 5] {- Input 37 -}
  [5, 4, 3, 1] -> [5, 4, 2, 1, 3] {- Input 38 -}
  [5, 4, 3, 1] -> [3, 5, 2, 4, 2, 1] {- Input 39 -}
  [5, 4, 3, 1] -> [5, 2, 4, 3, 2, 1] {- Input 40 -}
  [5, 5, 0, 4] -> [5, 0, 2, 5, 4, 2] {- Input 41 -}
  [0, 0, 3, 3, 1] -> [0, 3, 0, 1, 2, 3] {- Input 42 -}
  [0, 2, 4, 3, 1] -> [0, 2, 3, 1, 4, 2] {- Input 43 -}
  [0, 5, 4, 1, 1] -> [4, 0, 2, 5, 1, 1] {- Input 44 -}
  [1, 2, 4, 3, 1] -> [1, 2, 3, 3, 1, 4] {- Input 45 -}
  [4, 0, 0, 3, 1] -> [4, 0, 3, 2, 1, 0] {- Input 46 -}
  [4, 0, 0, 3, 1] -> [4, 3, 2, 0, 0, 1] {- Input 47 -}
  [5, 1, 0, 0, 5] -> [5, 0, 0, 2, 1, 5] {- Input 48 -}
  [5, 4, 2, 0, 1] -> [2, 5, 4, 0, 2, 1] {- Input 49 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [1, 0, 0] -> [3, 1, 2, 0, 0] {- Mirror (Input 0) -}
  [1, 0, 0] -> [1, 3, 2, 2, 0, 0] {- Mirror (Input 1) -}
  [1, 4, 0] -> [1, 2, 2, 4, 0] {- Mirror (Input 2) -}
  [1, 4, 0] -> [2, 4, 1, 3, 2, 0] {- Mirror (Input 3) -}
  [1, 0, 1] -> [1, 1, 2, 0] {- Mirror (Input 4) -}
  [1, 0, 1] -> [2, 1, 1, 2, 0] {- Mirror (Input 5) -}
  [1, 0, 1] -> [1, 2, 3, 0, 1] {- Mirror (Input 6) -}
  [0, 4, 1] -> [2, 4, 2, 3, 0, 1] {- Mirror (Input 7) -}
  [1, 4, 1] -> [1, 1, 2, 4] {- Mirror (Input 8) -}
  [1, 4, 1] -> [1, 2, 1, 1, 2, 4] {- Mirror (Input 9) -}
  [1, 0, 4] -> [1, 2, 0, 4] {- Mirror (Input 10) -}
  [1, 0, 5] -> [1, 2, 0, 5] {- Mirror (Input 11) -}
  [1, 0, 5] -> [3, 5, 1, 2, 0] {- Mirror (Input 12) -}
  [1, 0, 5] -> [5, 5, 1, 2, 3, 0] {- Mirror (Input 13) -}
  [1, 0, 5] -> [1, 5, 3, 2, 0, 3] {- Mirror (Input 14) -}
  [5, 0, 5] -> [5, 3, 5, 2, 3, 0] {- Mirror (Input 15) -}
  [1, 4, 5] -> [3, 1, 5, 2, 4, 2] {- Mirror (Input 16) -}
  [1, 4, 5] -> [3, 3, 1, 2, 5, 4] {- Mirror (Input 17) -}
  [5, 4, 0, 0] -> [2, 4, 2, 0, 5, 0] {- Mirror (Input 18) -}
  [0, 2, 1, 0] -> [0, 1, 2, 0, 2] {- Mirror (Input 19) -}
  [1, 0, 2, 0] -> [3, 1, 2, 0, 0] {- Mirror (Input 20) -}
  [0, 4, 3, 0] -> [3, 0, 0, 4, 2, 3] {- Mirror (Input 21) -}
  [4, 0, 4, 0] -> [4, 4, 2, 3, 0, 0] {- Mirror (Input 22) -}
  [4, 1, 0, 1] -> [0, 4, 1, 1, 3, 2] {- Mirror (Input 23) -}
  [1, 3, 0, 1] -> [0, 1, 1, 3, 2, 4] {- Mirror (Input 24) -}
  [4, 0, 2, 1] -> [2, 3, 0, 2, 4, 1] {- Mirror (Input 25) -}
  [4, 0, 3, 1] -> [3, 1, 2, 3, 0, 4] {- Mirror (Input 26) -}
  [5, 1, 4, 1] -> [4, 1, 5, 2, 1, 2] {- Mirror (Input 27) -}
  [1, 5, 0, 4] -> [5, 1, 2, 4, 2, 0] {- Mirror (Input 28) -}
  [0, 0, 1, 4] -> [0, 0, 4, 1, 2, 3] {- Mirror (Input 29) -}
  [4, 0, 1, 4] -> [1, 2, 0, 4, 4] {- Mirror (Input 30) -}
  [1, 0, 0, 5] -> [0, 1, 5, 2, 3, 0] {- Mirror (Input 31) -}
  [1, 3, 0, 5] -> [1, 2, 3, 5, 0] {- Mirror (Input 32) -}
  [1, 3, 0, 5] -> [1, 2, 2, 5, 3, 0] {- Mirror (Input 33) -}
  [1, 5, 0, 5] -> [0, 1, 3, 5, 2, 5] {- Mirror (Input 34) -}
  [1, 4, 2, 5] -> [5, 2, 4, 1, 2] {- Mirror (Input 35) -}
  [5, 1, 4, 5] -> [1, 2, 5, 5, 4] {- Mirror (Input 36) -}
  [5, 1, 4, 5] -> [5, 2, 4, 5, 1, 2] {- Mirror (Input 37) -}
  [1, 3, 4, 5] -> [3, 1, 2, 4, 5] {- Mirror (Input 38) -}
  [1, 3, 4, 5] -> [1, 2, 4, 2, 5, 3] {- Mirror (Input 39) -}
  [1, 3, 4, 5] -> [1, 2, 3, 4, 2, 5] {- Mirror (Input 40) -}
  [4, 0, 5, 5] -> [2, 4, 5, 2, 0, 5] {- Mirror (Input 41) -}
  [1, 3, 3, 0, 0] -> [3, 2, 1, 0, 3, 0] {- Mirror (Input 42) -}
  [1, 3, 4, 2, 0] -> [2, 4, 1, 3, 2, 0] {- Mirror (Input 43) -}
  [1, 1, 4, 5, 0] -> [1, 1, 5, 2, 0, 4] {- Mirror (Input 44) -}
  [1, 3, 4, 2, 1] -> [4, 1, 3, 3, 2, 1] {- Mirror (Input 45) -}
  [1, 3, 0, 0, 4] -> [0, 1, 2, 3, 0, 4] {- Mirror (Input 46) -}
  [1, 3, 0, 0, 4] -> [1, 0, 0, 2, 3, 4] {- Mirror (Input 47) -}
  [5, 0, 0, 1, 5] -> [5, 1, 2, 0, 0, 5] {- Mirror (Input 48) -}
  [1, 0, 2, 4, 5] -> [1, 2, 0, 4, 5, 2] {- Mirror (Input 49) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
  [1#, 1, 4, 5, 0] |-> [1#, 1, 5, 2, 0, 4] {- DP (Top 0) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [1#, 5, 2, 0, 4] {- DP (Top 1) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [4#] {- DP (Top 5) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [0#, 4] {- DP (Top 4) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [5#, 2, 0, 4] {- DP (Top 2) (Mirror (Input 44)) -}
  [1#, 4, 1] |-> [1#, 1, 2, 4] {- Many [ DP (Top 2) (Mirror (Input 9)) , DP (Top 0) (Mirror (Input 8)) ] -}
  [1#, 4, 1] |-> [1#, 2, 1, 1, 2, 4] {- DP (Top 0) (Mirror (Input 9)) -}
  [1#, 4, 1] |-> [1#, 2, 4] {- Many [ DP (Top 3) (Mirror (Input 9)) , DP (Top 1) (Mirror (Input 8)) ] -}
  [1#, 4, 1] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 9)) , DP (Top 3) (Mirror (Input 8)) ] -}
  [1#, 4, 2, 5] |-> [1#, 2] {- DP (Top 3) (Mirror (Input 35)) -}
  [1#, 4, 2, 5] |-> [4#, 1, 2] {- DP (Top 2) (Mirror (Input 35)) -}
  [1#, 4, 2, 5] |-> [5#, 2, 4, 1, 2] {- DP (Top 0) (Mirror (Input 35)) -}
  [1#, 4, 0] |-> [1#, 2, 2, 4, 0] {- DP (Top 0) (Mirror (Input 2)) -}
  [1#, 4, 0] |-> [1#, 3, 2, 0] {- DP (Top 2) (Mirror (Input 3)) -}
  [1#, 4, 0] |-> [4#, 1, 3, 2, 0] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, 4, 5] |-> [1#, 2, 5, 4] {- DP (Top 2) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [1#, 5, 2, 4, 2] {- DP (Top 1) (Mirror (Input 16)) -}
  [1#, 4, 5] |-> [4#] {- DP (Top 5) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [4#, 2] {- DP (Top 4) (Mirror (Input 16)) -}
  [1#, 4, 5] |-> [5#, 4] {- DP (Top 4) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [5#, 2, 4, 2] {- DP (Top 2) (Mirror (Input 16)) -}
  [1#, 0, 1] |-> [1#, 1, 2, 0] {- Many [ DP (Top 1) (Mirror (Input 5)) , DP (Top 0) (Mirror (Input 4)) ] -}
  [1#, 0, 1] |-> [1#, 2, 0] {- Many [ DP (Top 2) (Mirror (Input 5)) , DP (Top 1) (Mirror (Input 4)) ] -}
  [1#, 0, 1] |-> [1#, 2, 3, 0, 1] {- DP (Top 0) (Mirror (Input 6)) -}
  [1#, 0, 1] |-> [0#] {- Many [ DP (Top 4) (Mirror (Input 5)) , DP (Top 3) (Mirror (Input 4)) ] -}
  [1#, 0, 4] |-> [1#, 2, 0, 4] {- DP (Top 0) (Mirror (Input 10)) -}
  [1#, 0, 2, 4, 5] |-> [1#, 2, 0, 4, 5, 2] {- DP (Top 0) (Mirror (Input 49)) -}
  [1#, 0, 2, 4, 5] |-> [4#, 5, 2] {- DP (Top 3) (Mirror (Input 49)) -}
  [1#, 0, 2, 4, 5] |-> [0#, 4, 5, 2] {- DP (Top 2) (Mirror (Input 49)) -}
  [1#, 0, 2, 4, 5] |-> [5#, 2] {- DP (Top 4) (Mirror (Input 49)) -}
  [1#, 0, 2, 0] |-> [1#, 2, 0, 0] {- DP (Top 1) (Mirror (Input 20)) -}
  [1#, 0, 2, 0] |-> [0#, 0] {- DP (Top 3) (Mirror (Input 20)) -}
  [1#, 0, 0] |-> [1#, 2, 0, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [1#, 0, 0] |-> [1#, 3, 2, 2, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [1#, 0, 0, 5] |-> [1#, 5, 2, 3, 0] {- DP (Top 1) (Mirror (Input 31)) -}
  [1#, 0, 0, 5] |-> [0#] {- DP (Top 5) (Mirror (Input 31)) -}
  [1#, 0, 0, 5] |-> [0#, 1, 5, 2, 3, 0] {- DP (Top 0) (Mirror (Input 31)) -}
  [1#, 0, 0, 5] |-> [5#, 2, 3, 0] {- DP (Top 2) (Mirror (Input 31)) -}
  [1#, 0, 5] |-> [1#, 2, 0] {- DP (Top 2) (Mirror (Input 12)) -}
  [1#, 0, 5] |-> [1#, 2, 0, 5] {- DP (Top 0) (Mirror (Input 11)) -}
  [1#, 0, 5] |-> [1#, 2, 3, 0] {- DP (Top 2) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [1#, 5, 3, 2, 0, 3] {- DP (Top 0) (Mirror (Input 14)) -}
  [1#, 0, 5] |-> [0#] {- Many [ DP (Top 5) (Mirror (Input 13)) , DP (Top 4) (Mirror (Input 12)) ] -}
  [1#, 0, 5] |-> [0#, 3] {- DP (Top 4) (Mirror (Input 14)) -}
  [1#, 0, 5] |-> [5#, 1, 2, 0] {- DP (Top 1) (Mirror (Input 12)) -}
  [1#, 0, 5] |-> [5#, 1, 2, 3, 0] {- DP (Top 1) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [5#, 5, 1, 2, 3, 0] {- DP (Top 0) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [5#, 3, 2, 0, 3] {- DP (Top 1) (Mirror (Input 14)) -}
  [1#, 5, 0, 4] |-> [1#, 2, 4, 2, 0] {- DP (Top 1) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [4#, 2, 0] {- DP (Top 3) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [0#] {- DP (Top 5) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [5#, 1, 2, 4, 2, 0] {- DP (Top 0) (Mirror (Input 28)) -}
  [1#, 5, 0, 5] |-> [1#, 3, 5, 2, 5] {- DP (Top 1) (Mirror (Input 34)) -}
  [1#, 5, 0, 5] |-> [0#, 1, 3, 5, 2, 5] {- DP (Top 0) (Mirror (Input 34)) -}
  [1#, 5, 0, 5] |-> [5#, 2, 5] {- DP (Top 3) (Mirror (Input 34)) -}
  [1#, 3, 4, 2, 1] |-> [1#, 3, 3, 2, 1] {- DP (Top 1) (Mirror (Input 45)) -}
  [1#, 3, 4, 2, 1] |-> [4#, 1, 3, 3, 2, 1] {- DP (Top 0) (Mirror (Input 45)) -}
  [1#, 3, 4, 2, 0] |-> [1#, 3, 2, 0] {- DP (Top 2) (Mirror (Input 43)) -}
  [1#, 3, 4, 2, 0] |-> [4#, 1, 3, 2, 0] {- DP (Top 1) (Mirror (Input 43)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 4, 2, 5, 3] {- DP (Top 0) (Mirror (Input 39)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 4, 5] {- DP (Top 1) (Mirror (Input 38)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 3, 4, 2, 5] {- DP (Top 0) (Mirror (Input 40)) -}
  [1#, 3, 4, 5] |-> [4#, 2, 5] {- DP (Top 3) (Mirror (Input 40)) -}
  [1#, 3, 4, 5] |-> [4#, 2, 5, 3] {- DP (Top 2) (Mirror (Input 39)) -}
  [1#, 3, 4, 5] |-> [5#, 3] {- DP (Top 4) (Mirror (Input 39)) -}
  [1#, 3, 0, 1] |-> [1#, 1, 3, 2, 4] {- DP (Top 1) (Mirror (Input 24)) -}
  [1#, 3, 0, 1] |-> [1#, 3, 2, 4] {- DP (Top 2) (Mirror (Input 24)) -}
  [1#, 3, 0, 1] |-> [4#] {- DP (Top 5) (Mirror (Input 24)) -}
  [1#, 3, 0, 1] |-> [0#, 1, 1, 3, 2, 4] {- DP (Top 0) (Mirror (Input 24)) -}
  [1#, 3, 0, 0, 4] |-> [1#, 2, 3, 0, 4] {- DP (Top 1) (Mirror (Input 46)) -}
  [1#, 3, 0, 0, 4] |-> [1#, 0, 0, 2, 3, 4] {- DP (Top 0) (Mirror (Input 47)) -}
  [1#, 3, 0, 0, 4] |-> [0#, 1, 2, 3, 0, 4] {- DP (Top 0) (Mirror (Input 46)) -}
  [1#, 3, 0, 0, 4] |-> [0#, 2, 3, 4] {- DP (Top 2) (Mirror (Input 47)) -}
  [1#, 3, 0, 0, 4] |-> [0#, 0, 2, 3, 4] {- DP (Top 1) (Mirror (Input 47)) -}
  [1#, 3, 0, 5] |-> [1#, 2, 2, 5, 3, 0] {- DP (Top 0) (Mirror (Input 33)) -}
  [1#, 3, 0, 5] |-> [1#, 2, 3, 5, 0] {- DP (Top 0) (Mirror (Input 32)) -}
  [1#, 3, 0, 5] |-> [0#] {- Many [ DP (Top 5) (Mirror (Input 33)) , DP (Top 4) (Mirror (Input 32)) ] -}
  [1#, 3, 0, 5] |-> [5#, 0] {- DP (Top 3) (Mirror (Input 32)) -}
  [1#, 3, 0, 5] |-> [5#, 3, 0] {- DP (Top 3) (Mirror (Input 33)) -}
  [1#, 3, 3, 0, 0] |-> [1#, 0, 3, 0] {- DP (Top 2) (Mirror (Input 42)) -}
  [1#, 3, 3, 0, 0] |-> [0#, 3, 0] {- DP (Top 3) (Mirror (Input 42)) -}
  [4#, 1, 0, 1] |-> [1#, 1, 3, 2] {- DP (Top 2) (Mirror (Input 23)) -}
  [4#, 1, 0, 1] |-> [1#, 3, 2] {- DP (Top 3) (Mirror (Input 23)) -}
  [4#, 1, 0, 1] |-> [4#, 1, 1, 3, 2] {- DP (Top 1) (Mirror (Input 23)) -}
  [4#, 1, 0, 1] |-> [0#, 4, 1, 1, 3, 2] {- DP (Top 0) (Mirror (Input 23)) -}
  [4#, 0, 1, 4] |-> [1#, 2, 0, 4, 4] {- DP (Top 0) (Mirror (Input 30)) -}
  [4#, 0, 1, 4] |-> [4#, 4] {- DP (Top 3) (Mirror (Input 30)) -}
  [4#, 0, 1, 4] |-> [0#, 4, 4] {- DP (Top 2) (Mirror (Input 30)) -}
  [4#, 0, 4, 0] |-> [4#, 4, 2, 3, 0, 0] {- DP (Top 0) (Mirror (Input 22)) -}
  [4#, 0, 4, 0] |-> [4#, 2, 3, 0, 0] {- DP (Top 1) (Mirror (Input 22)) -}
  [4#, 0, 4, 0] |-> [0#, 0] {- DP (Top 4) (Mirror (Input 22)) -}
  [4#, 0, 2, 1] |-> [4#, 1] {- DP (Top 4) (Mirror (Input 25)) -}
  [4#, 0, 2, 1] |-> [0#, 2, 4, 1] {- DP (Top 2) (Mirror (Input 25)) -}
  [4#, 0, 5, 5] |-> [4#, 5, 2, 0, 5] {- DP (Top 1) (Mirror (Input 41)) -}
  [4#, 0, 5, 5] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 41)) -}
  [4#, 0, 5, 5] |-> [5#, 2, 0, 5] {- DP (Top 2) (Mirror (Input 41)) -}
  [4#, 0, 3, 1] |-> [1#, 2, 3, 0, 4] {- DP (Top 1) (Mirror (Input 26)) -}
  [4#, 0, 3, 1] |-> [4#] {- DP (Top 5) (Mirror (Input 26)) -}
  [4#, 0, 3, 1] |-> [0#, 4] {- DP (Top 4) (Mirror (Input 26)) -}
  [0#, 4, 1] |-> [4#, 2, 3, 0, 1] {- DP (Top 1) (Mirror (Input 7)) -}
  [0#, 4, 1] |-> [0#, 1] {- DP (Top 4) (Mirror (Input 7)) -}
  [0#, 4, 3, 0] |-> [4#, 2, 3] {- DP (Top 3) (Mirror (Input 21)) -}
  [0#, 4, 3, 0] |-> [0#, 4, 2, 3] {- DP (Top 2) (Mirror (Input 21)) -}
  [0#, 4, 3, 0] |-> [0#, 0, 4, 2, 3] {- DP (Top 1) (Mirror (Input 21)) -}
  [0#, 2, 1, 0] |-> [1#, 2, 0, 2] {- DP (Top 1) (Mirror (Input 19)) -}
  [0#, 2, 1, 0] |-> [0#, 1, 2, 0, 2] {- DP (Top 0) (Mirror (Input 19)) -}
  [0#, 2, 1, 0] |-> [0#, 2] {- DP (Top 3) (Mirror (Input 19)) -}
  [0#, 0, 1, 4] |-> [1#, 2, 3] {- DP (Top 3) (Mirror (Input 29)) -}
  [0#, 0, 1, 4] |-> [4#, 1, 2, 3] {- DP (Top 2) (Mirror (Input 29)) -}
  [0#, 0, 1, 4] |-> [0#, 4, 1, 2, 3] {- DP (Top 1) (Mirror (Input 29)) -}
  [0#, 0, 1, 4] |-> [0#, 0, 4, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [5#, 1, 4, 1] |-> [1#, 2] {- DP (Top 4) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [1#, 5, 2, 1, 2] {- DP (Top 1) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [4#, 1, 5, 2, 1, 2] {- DP (Top 0) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [5#, 2, 1, 2] {- DP (Top 2) (Mirror (Input 27)) -}
  [5#, 1, 4, 5] |-> [1#, 2] {- DP (Top 4) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [1#, 2, 5, 5, 4] {- DP (Top 0) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [4#] {- DP (Top 4) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [4#, 5, 1, 2] {- DP (Top 2) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 1, 2] {- DP (Top 3) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 4] {- DP (Top 3) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [5#, 2, 4, 5, 1, 2] {- DP (Top 0) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 5, 4] {- DP (Top 2) (Mirror (Input 36)) -}
  [5#, 4, 0, 0] |-> [4#, 2, 0, 5, 0] {- DP (Top 1) (Mirror (Input 18)) -}
  [5#, 4, 0, 0] |-> [0#, 5, 0] {- DP (Top 3) (Mirror (Input 18)) -}
  [5#, 4, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 18)) -}
  [5#, 0, 0, 1, 5] |-> [1#, 2, 0, 0, 5] {- DP (Top 1) (Mirror (Input 48)) -}
  [5#, 0, 0, 1, 5] |-> [0#, 0, 5] {- DP (Top 3) (Mirror (Input 48)) -}
  [5#, 0, 0, 1, 5] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 48)) -}
  [5#, 0, 0, 1, 5] |-> [5#, 1, 2, 0, 0, 5] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 5] |-> [0#] {- DP (Top 5) (Mirror (Input 15)) -}
  [5#, 0, 5] |-> [5#, 2, 3, 0] {- DP (Top 2) (Mirror (Input 15)) -}
  [5#, 0, 5] |-> [5#, 3, 5, 2, 3, 0] {- DP (Top 0) (Mirror (Input 15)) -}
reason
  (1, 0/1)
  (4, 0/1)
  (2, 0/1)
  (0, 1/1)
  (5, 0/1)
  (3, 0/1)
  (1#, 0/1)
  (4#, 0/1)
  (0#, 1/1)
  (5#, 0/1)
   property Termination
has value Just True
for SRS
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
  [1#, 1, 4, 5, 0] |-> [1#, 1, 5, 2, 0, 4] {- DP (Top 0) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [1#, 5, 2, 0, 4] {- DP (Top 1) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [0#, 4] {- DP (Top 4) (Mirror (Input 44)) -}
  [1#, 1, 4, 5, 0] |-> [5#, 2, 0, 4] {- DP (Top 2) (Mirror (Input 44)) -}
  [1#, 4, 1] |-> [1#, 1, 2, 4] {- Many [ DP (Top 2) (Mirror (Input 9)) , DP (Top 0) (Mirror (Input 8)) ] -}
  [1#, 4, 1] |-> [1#, 2, 1, 1, 2, 4] {- DP (Top 0) (Mirror (Input 9)) -}
  [1#, 4, 1] |-> [1#, 2, 4] {- Many [ DP (Top 3) (Mirror (Input 9)) , DP (Top 1) (Mirror (Input 8)) ] -}
  [1#, 4, 1] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 9)) , DP (Top 3) (Mirror (Input 8)) ] -}
  [1#, 4, 2, 5] |-> [1#, 2] {- DP (Top 3) (Mirror (Input 35)) -}
  [1#, 4, 2, 5] |-> [4#, 1, 2] {- DP (Top 2) (Mirror (Input 35)) -}
  [1#, 4, 2, 5] |-> [5#, 2, 4, 1, 2] {- DP (Top 0) (Mirror (Input 35)) -}
  [1#, 4, 0] |-> [1#, 2, 2, 4, 0] {- DP (Top 0) (Mirror (Input 2)) -}
  [1#, 4, 0] |-> [1#, 3, 2, 0] {- DP (Top 2) (Mirror (Input 3)) -}
  [1#, 4, 0] |-> [4#, 1, 3, 2, 0] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, 4, 5] |-> [1#, 2, 5, 4] {- DP (Top 2) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [1#, 5, 2, 4, 2] {- DP (Top 1) (Mirror (Input 16)) -}
  [1#, 4, 5] |-> [4#] {- DP (Top 5) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [4#, 2] {- DP (Top 4) (Mirror (Input 16)) -}
  [1#, 4, 5] |-> [5#, 4] {- DP (Top 4) (Mirror (Input 17)) -}
  [1#, 4, 5] |-> [5#, 2, 4, 2] {- DP (Top 2) (Mirror (Input 16)) -}
  [1#, 0, 1] |-> [1#, 1, 2, 0] {- Many [ DP (Top 1) (Mirror (Input 5)) , DP (Top 0) (Mirror (Input 4)) ] -}
  [1#, 0, 1] |-> [1#, 2, 0] {- Many [ DP (Top 2) (Mirror (Input 5)) , DP (Top 1) (Mirror (Input 4)) ] -}
  [1#, 0, 1] |-> [1#, 2, 3, 0, 1] {- DP (Top 0) (Mirror (Input 6)) -}
  [1#, 0, 1] |-> [0#] {- Many [ DP (Top 4) (Mirror (Input 5)) , DP (Top 3) (Mirror (Input 4)) ] -}
  [1#, 0, 4] |-> [1#, 2, 0, 4] {- DP (Top 0) (Mirror (Input 10)) -}
  [1#, 0, 2, 4, 5] |-> [1#, 2, 0, 4, 5, 2] {- DP (Top 0) (Mirror (Input 49)) -}
  [1#, 0, 2, 4, 5] |-> [0#, 4, 5, 2] {- DP (Top 2) (Mirror (Input 49)) -}
  [1#, 0, 2, 0] |-> [1#, 2, 0, 0] {- DP (Top 1) (Mirror (Input 20)) -}
  [1#, 0, 2, 0] |-> [0#, 0] {- DP (Top 3) (Mirror (Input 20)) -}
  [1#, 0, 0] |-> [1#, 2, 0, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [1#, 0, 0] |-> [1#, 3, 2, 2, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [1#, 0, 0, 5] |-> [0#, 1, 5, 2, 3, 0] {- DP (Top 0) (Mirror (Input 31)) -}
  [1#, 0, 5] |-> [1#, 2, 0] {- DP (Top 2) (Mirror (Input 12)) -}
  [1#, 0, 5] |-> [1#, 2, 0, 5] {- DP (Top 0) (Mirror (Input 11)) -}
  [1#, 0, 5] |-> [1#, 2, 3, 0] {- DP (Top 2) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [1#, 5, 3, 2, 0, 3] {- DP (Top 0) (Mirror (Input 14)) -}
  [1#, 0, 5] |-> [0#] {- Many [ DP (Top 5) (Mirror (Input 13)) , DP (Top 4) (Mirror (Input 12)) ] -}
  [1#, 0, 5] |-> [0#, 3] {- DP (Top 4) (Mirror (Input 14)) -}
  [1#, 0, 5] |-> [5#, 1, 2, 0] {- DP (Top 1) (Mirror (Input 12)) -}
  [1#, 0, 5] |-> [5#, 1, 2, 3, 0] {- DP (Top 1) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [5#, 5, 1, 2, 3, 0] {- DP (Top 0) (Mirror (Input 13)) -}
  [1#, 0, 5] |-> [5#, 3, 2, 0, 3] {- DP (Top 1) (Mirror (Input 14)) -}
  [1#, 5, 0, 4] |-> [1#, 2, 4, 2, 0] {- DP (Top 1) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [4#, 2, 0] {- DP (Top 3) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [0#] {- DP (Top 5) (Mirror (Input 28)) -}
  [1#, 5, 0, 4] |-> [5#, 1, 2, 4, 2, 0] {- DP (Top 0) (Mirror (Input 28)) -}
  [1#, 5, 0, 5] |-> [0#, 1, 3, 5, 2, 5] {- DP (Top 0) (Mirror (Input 34)) -}
  [1#, 3, 4, 2, 1] |-> [1#, 3, 3, 2, 1] {- DP (Top 1) (Mirror (Input 45)) -}
  [1#, 3, 4, 2, 1] |-> [4#, 1, 3, 3, 2, 1] {- DP (Top 0) (Mirror (Input 45)) -}
  [1#, 3, 4, 2, 0] |-> [1#, 3, 2, 0] {- DP (Top 2) (Mirror (Input 43)) -}
  [1#, 3, 4, 2, 0] |-> [4#, 1, 3, 2, 0] {- DP (Top 1) (Mirror (Input 43)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 4, 2, 5, 3] {- DP (Top 0) (Mirror (Input 39)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 4, 5] {- DP (Top 1) (Mirror (Input 38)) -}
  [1#, 3, 4, 5] |-> [1#, 2, 3, 4, 2, 5] {- DP (Top 0) (Mirror (Input 40)) -}
  [1#, 3, 4, 5] |-> [4#, 2, 5] {- DP (Top 3) (Mirror (Input 40)) -}
  [1#, 3, 4, 5] |-> [4#, 2, 5, 3] {- DP (Top 2) (Mirror (Input 39)) -}
  [1#, 3, 4, 5] |-> [5#, 3] {- DP (Top 4) (Mirror (Input 39)) -}
  [1#, 3, 0, 1] |-> [0#, 1, 1, 3, 2, 4] {- DP (Top 0) (Mirror (Input 24)) -}
  [1#, 3, 0, 0, 4] |-> [1#, 0, 0, 2, 3, 4] {- DP (Top 0) (Mirror (Input 47)) -}
  [1#, 3, 0, 0, 4] |-> [0#, 1, 2, 3, 0, 4] {- DP (Top 0) (Mirror (Input 46)) -}
  [1#, 3, 0, 0, 4] |-> [0#, 0, 2, 3, 4] {- DP (Top 1) (Mirror (Input 47)) -}
  [1#, 3, 0, 5] |-> [1#, 2, 2, 5, 3, 0] {- DP (Top 0) (Mirror (Input 33)) -}
  [1#, 3, 0, 5] |-> [1#, 2, 3, 5, 0] {- DP (Top 0) (Mirror (Input 32)) -}
  [1#, 3, 0, 5] |-> [0#] {- Many [ DP (Top 5) (Mirror (Input 33)) , DP (Top 4) (Mirror (Input 32)) ] -}
  [1#, 3, 0, 5] |-> [5#, 0] {- DP (Top 3) (Mirror (Input 32)) -}
  [1#, 3, 0, 5] |-> [5#, 3, 0] {- DP (Top 3) (Mirror (Input 33)) -}
  [1#, 3, 3, 0, 0] |-> [1#, 0, 3, 0] {- DP (Top 2) (Mirror (Input 42)) -}
  [1#, 3, 3, 0, 0] |-> [0#, 3, 0] {- DP (Top 3) (Mirror (Input 42)) -}
  [4#, 1, 0, 1] |-> [0#, 4, 1, 1, 3, 2] {- DP (Top 0) (Mirror (Input 23)) -}
  [4#, 0, 1, 4] |-> [1#, 2, 0, 4, 4] {- DP (Top 0) (Mirror (Input 30)) -}
  [4#, 0, 1, 4] |-> [0#, 4, 4] {- DP (Top 2) (Mirror (Input 30)) -}
  [4#, 0, 4, 0] |-> [4#, 4, 2, 3, 0, 0] {- DP (Top 0) (Mirror (Input 22)) -}
  [4#, 0, 4, 0] |-> [4#, 2, 3, 0, 0] {- DP (Top 1) (Mirror (Input 22)) -}
  [4#, 0, 4, 0] |-> [0#, 0] {- DP (Top 4) (Mirror (Input 22)) -}
  [4#, 0, 2, 1] |-> [0#, 2, 4, 1] {- DP (Top 2) (Mirror (Input 25)) -}
  [4#, 0, 5, 5] |-> [4#, 5, 2, 0, 5] {- DP (Top 1) (Mirror (Input 41)) -}
  [4#, 0, 5, 5] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 41)) -}
  [4#, 0, 5, 5] |-> [5#, 2, 0, 5] {- DP (Top 2) (Mirror (Input 41)) -}
  [4#, 0, 3, 1] |-> [1#, 2, 3, 0, 4] {- DP (Top 1) (Mirror (Input 26)) -}
  [4#, 0, 3, 1] |-> [0#, 4] {- DP (Top 4) (Mirror (Input 26)) -}
  [0#, 4, 1] |-> [4#, 2, 3, 0, 1] {- DP (Top 1) (Mirror (Input 7)) -}
  [0#, 4, 1] |-> [0#, 1] {- DP (Top 4) (Mirror (Input 7)) -}
  [0#, 4, 3, 0] |-> [0#, 0, 4, 2, 3] {- DP (Top 1) (Mirror (Input 21)) -}
  [0#, 2, 1, 0] |-> [0#, 1, 2, 0, 2] {- DP (Top 0) (Mirror (Input 19)) -}
  [0#, 0, 1, 4] |-> [0#, 0, 4, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [5#, 1, 4, 1] |-> [1#, 2] {- DP (Top 4) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [1#, 5, 2, 1, 2] {- DP (Top 1) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [4#, 1, 5, 2, 1, 2] {- DP (Top 0) (Mirror (Input 27)) -}
  [5#, 1, 4, 1] |-> [5#, 2, 1, 2] {- DP (Top 2) (Mirror (Input 27)) -}
  [5#, 1, 4, 5] |-> [1#, 2] {- DP (Top 4) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [1#, 2, 5, 5, 4] {- DP (Top 0) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [4#] {- DP (Top 4) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [4#, 5, 1, 2] {- DP (Top 2) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 1, 2] {- DP (Top 3) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 4] {- DP (Top 3) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [5#, 2, 4, 5, 1, 2] {- DP (Top 0) (Mirror (Input 37)) -}
  [5#, 1, 4, 5] |-> [5#, 5, 4] {- DP (Top 2) (Mirror (Input 36)) -}
  [5#, 4, 0, 0] |-> [4#, 2, 0, 5, 0] {- DP (Top 1) (Mirror (Input 18)) -}
  [5#, 4, 0, 0] |-> [0#, 5, 0] {- DP (Top 3) (Mirror (Input 18)) -}
  [5#, 0, 0, 1, 5] |-> [1#, 2, 0, 0, 5] {- DP (Top 1) (Mirror (Input 48)) -}
  [5#, 0, 0, 1, 5] |-> [0#, 0, 5] {- DP (Top 3) (Mirror (Input 48)) -}
  [5#, 0, 0, 1, 5] |-> [5#, 1, 2, 0, 0, 5] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 5] |-> [0#] {- DP (Top 5) (Mirror (Input 15)) -}
  [5#, 0, 5] |-> [5#, 2, 3, 0] {- DP (Top 2) (Mirror (Input 15)) -}
  [5#, 0, 5] |-> [5#, 3, 5, 2, 3, 0] {- DP (Top 0) (Mirror (Input 15)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [5#, 1, 4, 5] |-> [5#, 5, 4] {- DP (Top 2) (Mirror (Input 36)) -}
  [5#, 1, 4, 5] |-> [5#, 4] {- DP (Top 3) (Mirror (Input 36)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5#
  , Wk  / 3A 3A 4A - \
        | 3A 3A 4A - |
        | 3A 3A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [5#, 1, 4, 5] |-> [5#, 5, 4] {- DP (Top 2) (Mirror (Input 36)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [5#, 1, 4, 5] |-> [5#, 5, 4] {- DP (Top 2) (Mirror (Input 36)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 6A 6A 6A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5#
  , Wk  / 10A 10A 13A - \
        | 10A 10A 13A - |
        | 10A 10A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, 0, 1, 4] |-> [0#, 0, 4, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [0#, 4, 1] |-> [0#, 1] {- DP (Top 4) (Mirror (Input 7)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 6A 9A 9A - \
        | 6A 9A 9A - |
        | 6A 6A 9A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 0#
  , Wk  / 1A 2A 3A - \
        | 1A 2A 3A - |
        | 1A 2A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [0#, 0, 1, 4] |-> [0#, 0, 4, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 0, 1, 4] |-> [0#, 0, 4, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 0
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 5
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 0#
  , Wk  / 15A 15A 17A - \
        | 15A 15A 17A - |
        | 15A 15A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [1, 0, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 0] ->= [1, 3, 2, 2, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1, 4, 0] ->= [1, 2, 2, 4, 0] {- DP Nontop (Mirror (Input 2)) -}
  [1, 4, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 3)) -}
  [1, 0, 1] ->= [1, 1, 2, 0] {- DP Nontop (Mirror (Input 4)) -}
  [1, 0, 1] ->= [2, 1, 1, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [1, 0, 1] ->= [1, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 6)) -}
  [0, 4, 1] ->= [2, 4, 2, 3, 0, 1] {- DP Nontop (Mirror (Input 7)) -}
  [1, 4, 1] ->= [1, 1, 2, 4] {- DP Nontop (Mirror (Input 8)) -}
  [1, 4, 1] ->= [1, 2, 1, 1, 2, 4] {- DP Nontop (Mirror (Input 9)) -}
  [1, 0, 4] ->= [1, 2, 0, 4] {- DP Nontop (Mirror (Input 10)) -}
  [1, 0, 5] ->= [1, 2, 0, 5] {- DP Nontop (Mirror (Input 11)) -}
  [1, 0, 5] ->= [3, 5, 1, 2, 0] {- DP Nontop (Mirror (Input 12)) -}
  [1, 0, 5] ->= [5, 5, 1, 2, 3, 0] {- DP Nontop (Mirror (Input 13)) -}
  [1, 0, 5] ->= [1, 5, 3, 2, 0, 3] {- DP Nontop (Mirror (Input 14)) -}
  [5, 0, 5] ->= [5, 3, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 15)) -}
  [1, 4, 5] ->= [3, 1, 5, 2, 4, 2] {- DP Nontop (Mirror (Input 16)) -}
  [1, 4, 5] ->= [3, 3, 1, 2, 5, 4] {- DP Nontop (Mirror (Input 17)) -}
  [5, 4, 0, 0] ->= [2, 4, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 18)) -}
  [0, 2, 1, 0] ->= [0, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 19)) -}
  [1, 0, 2, 0] ->= [3, 1, 2, 0, 0] {- DP Nontop (Mirror (Input 20)) -}
  [0, 4, 3, 0] ->= [3, 0, 0, 4, 2, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 4, 0] ->= [4, 4, 2, 3, 0, 0] {- DP Nontop (Mirror (Input 22)) -}
  [4, 1, 0, 1] ->= [0, 4, 1, 1, 3, 2] {- DP Nontop (Mirror (Input 23)) -}
  [1, 3, 0, 1] ->= [0, 1, 1, 3, 2, 4] {- DP Nontop (Mirror (Input 24)) -}
  [4, 0, 2, 1] ->= [2, 3, 0, 2, 4, 1] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3, 1] ->= [3, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 26)) -}
  [5, 1, 4, 1] ->= [4, 1, 5, 2, 1, 2] {- DP Nontop (Mirror (Input 27)) -}
  [1, 5, 0, 4] ->= [5, 1, 2, 4, 2, 0] {- DP Nontop (Mirror (Input 28)) -}
  [0, 0, 1, 4] ->= [0, 0, 4, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [4, 0, 1, 4] ->= [1, 2, 0, 4, 4] {- DP Nontop (Mirror (Input 30)) -}
  [1, 0, 0, 5] ->= [0, 1, 5, 2, 3, 0] {- DP Nontop (Mirror (Input 31)) -}
  [1, 3, 0, 5] ->= [1, 2, 3, 5, 0] {- DP Nontop (Mirror (Input 32)) -}
  [1, 3, 0, 5] ->= [1, 2, 2, 5, 3, 0] {- DP Nontop (Mirror (Input 33)) -}
  [1, 5, 0, 5] ->= [0, 1, 3, 5, 2, 5] {- DP Nontop (Mirror (Input 34)) -}
  [1, 4, 2, 5] ->= [5, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [5, 1, 4, 5] ->= [1, 2, 5, 5, 4] {- DP Nontop (Mirror (Input 36)) -}
  [5, 1, 4, 5] ->= [5, 2, 4, 5, 1, 2] {- DP Nontop (Mirror (Input 37)) -}
  [1, 3, 4, 5] ->= [3, 1, 2, 4, 5] {- DP Nontop (Mirror (Input 38)) -}
  [1, 3, 4, 5] ->= [1, 2, 4, 2, 5, 3] {- DP Nontop (Mirror (Input 39)) -}
  [1, 3, 4, 5] ->= [1, 2, 3, 4, 2, 5] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 5] ->= [2, 4, 5, 2, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [1, 3, 3, 0, 0] ->= [3, 2, 1, 0, 3, 0] {- DP Nontop (Mirror (Input 42)) -}
  [1, 3, 4, 2, 0] ->= [2, 4, 1, 3, 2, 0] {- DP Nontop (Mirror (Input 43)) -}
  [1, 1, 4, 5, 0] ->= [1, 1, 5, 2, 0, 4] {- DP Nontop (Mirror (Input 44)) -}
  [1, 3, 4, 2, 1] ->= [4, 1, 3, 3, 2, 1] {- DP Nontop (Mirror (Input 45)) -}
  [1, 3, 0, 0, 4] ->= [0, 1, 2, 3, 0, 4] {- DP Nontop (Mirror (Input 46)) -}
  [1, 3, 0, 0, 4] ->= [1, 0, 0, 2, 3, 4] {- DP Nontop (Mirror (Input 47)) -}
  [5, 0, 0, 1, 5] ->= [5, 1, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 48)) -}
  [1, 0, 2, 4, 5] ->= [1, 2, 0, 4, 5, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(50,6)\Deepee(133/50,10)\Weight(105/50,10)\EDG[(2/50,7)\Matrix{\Arctic}{3}\EDG(1/50,7)\Matrix{\Arctic}{3}(0/50,6)\EDG[],(2/50,7)\Matrix{\Arctic}{3}\EDG(1/50,7)\Matrix{\Arctic}{3}(0/50,6)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 29523, clauses: 113741
last 29523 length 113741
CNF 29523 vars 113741 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 2.183350182000
  min duration 1.041876355000
  total durat. 11.244486278000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 483}
    , self = 51
    , parent = Nothing
    , duration = 1.041876355000
    , status = Fail
    , start = 2025-09-03 12:17:08.268595054 UTC
    , finish = 2025-09-03 12:17:09.310471409 UTC
    , thread_cap_info = ("ThreadId 91", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 477}
    , self = 65
    , parent = Nothing
    , duration = 1.242075428000
    , status = Fail
    , start = 2025-09-03 12:17:11.808156207 UTC
    , finish = 2025-09-03 12:17:13.050231635 UTC
    , thread_cap_info = ("ThreadId 106", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 485}
    , self = 80
    , parent = Nothing
    , duration = 1.253160111000
    , status = Fail
    , start = 2025-09-03 12:17:15.408159591 UTC
    , finish = 2025-09-03 12:17:16.661319702 UTC
    , thread_cap_info = ("ThreadId 126", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 480}
    , self = 96
    , parent = Nothing
    , duration = 1.441753591000
    , status = Fail
    , start = 2025-09-03 12:17:18.948138093 UTC
    , finish = 2025-09-03 12:17:20.389891684 UTC
    , thread_cap_info = ("ThreadId 146", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 53
      , num_top_rules = 53
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 865}
    , self = 54
    , parent = Nothing
    , duration = 1.903409264000
    , status = Fail
    , start = 2025-09-03 12:17:08.048149227 UTC
    , finish = 2025-09-03 12:17:09.951558491 UTC
    , thread_cap_info = ("ThreadId 87", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 684}
    , self = 98
    , parent = Nothing
    , duration = 2.178861347000
    , status = Fail
    , start = 2025-09-03 12:17:18.848141526 UTC
    , finish = 2025-09-03 12:17:21.027002873 UTC
    , thread_cap_info = ("ThreadId 144", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 81
      , num_strict_rules = 31
      , num_top_rules = 31
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 695}
    , self = 79
    , parent = Nothing
    , duration = 2.183350182000
    , status = Fail
    , start = 2025-09-03 12:17:13.329290742 UTC
    , finish = 2025-09-03 12:17:15.512640924 UTC
    , thread_cap_info = ("ThreadId 117", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 2.204228599000
  min duration 1.233617918000
  total durat. 11.550187209000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 483}
    , self = 52
    , parent = Nothing
    , duration = 1.233617918000
    , status = Fail
    , start = 2025-09-03 12:17:08.356480674 UTC
    , finish = 2025-09-03 12:17:09.590098592 UTC
    , thread_cap_info = ("ThreadId 92", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 477}
    , self = 67
    , parent = Nothing
    , duration = 1.263399526000
    , status = Fail
    , start = 2025-09-03 12:17:11.828135737 UTC
    , finish = 2025-09-03 12:17:13.091535263 UTC
    , thread_cap_info = ("ThreadId 107", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 485}
    , self = 81
    , parent = Nothing
    , duration = 1.286271506000
    , status = Fail
    , start = 2025-09-03 12:17:15.428133726 UTC
    , finish = 2025-09-03 12:17:16.714405232 UTC
    , thread_cap_info = ("ThreadId 127", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 480}
    , self = 97
    , parent = Nothing
    , duration = 1.620034193000
    , status = Fail
    , start = 2025-09-03 12:17:18.968133261 UTC
    , finish = 2025-09-03 12:17:20.588167454 UTC
    , thread_cap_info = ("ThreadId 147", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 53
      , num_top_rules = 53
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 865}
    , self = 53
    , parent = Nothing
    , duration = 1.824376701000
    , status = Fail
    , start = 2025-09-03 12:17:08.068137188 UTC
    , finish = 2025-09-03 12:17:09.892513889 UTC
    , thread_cap_info = ("ThreadId 88", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 81
      , num_strict_rules = 31
      , num_top_rules = 31
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 695}
    , self = 78
    , parent = Nothing
    , duration = 2.118258766000
    , status = Fail
    , start = 2025-09-03 12:17:13.349724618 UTC
    , finish = 2025-09-03 12:17:15.467983384 UTC
    , thread_cap_info = ("ThreadId 118", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 684}
    , self = 99
    , parent = Nothing
    , duration = 2.204228599000
    , status = Fail
    , start = 2025-09-03 12:17:18.86813388 UTC
    , finish = 2025-09-03 12:17:21.072362479 UTC
    , thread_cap_info = ("ThreadId 145", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 6
  max duration 3.060377190000
  min duration 1.231321356000
  total durat. 12.648693871000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 480}
    , self = 102
    , parent = Nothing
    , duration = 1.231321356000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:20.756804822 UTC
    , finish = 2025-09-03 12:17:21.988126178 UTC
    , thread_cap_info = ("ThreadId 153", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 483}
    , self = 57
    , parent = Nothing
    , duration = 1.657317590000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:09.710825334 UTC
    , finish = 2025-09-03 12:17:11.368142924 UTC
    , thread_cap_info = ("ThreadId 98", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 485}
    , self = 86
    , parent = Nothing
    , duration = 1.761385223000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:16.928559104 UTC
    , finish = 2025-09-03 12:17:18.689944327 UTC
    , thread_cap_info = ("ThreadId 133", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 477}
    , self = 73
    , parent = Nothing
    , duration = 1.998397152000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:13.152311405 UTC
    , finish = 2025-09-03 12:17:15.150708557 UTC
    , thread_cap_info = ("ThreadId 114", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 53
      , num_top_rules = 53
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 865}
    , self = 64
    , parent = Nothing
    , duration = 2.939895360000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:10.088233721 UTC
    , finish = 2025-09-03 12:17:13.028129081 UTC
    , thread_cap_info = ("ThreadId 100", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 81
      , num_strict_rules = 31
      , num_top_rules = 31
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 695}
    , self = 87
    , parent = Nothing
    , duration = 3.060377190000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:17:15.668138002 UTC
    , finish = 2025-09-03 12:17:18.728515192 UTC
    , thread_cap_info = ("ThreadId 129", 0, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 3.041984656000
  min duration 1.316648885000
  total durat. 12.591336323000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 480}
    , self = 100
    , parent = Nothing
    , duration = 1.316648885000
    , status = Success
    , start = 2025-09-03 12:17:20.428482074 UTC
    , finish = 2025-09-03 12:17:21.745130959 UTC
    , thread_cap_info = ("ThreadId 150", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 483}
    , self = 55
    , parent = Nothing
    , duration = 1.706502602000
    , status = Success
    , start = 2025-09-03 12:17:09.455354353 UTC
    , finish = 2025-09-03 12:17:11.161856955 UTC
    , thread_cap_info = ("ThreadId 95", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 485}
    , self = 82
    , parent = Nothing
    , duration = 1.795367818000
    , status = Success
    , start = 2025-09-03 12:17:16.748136164 UTC
    , finish = 2025-09-03 12:17:18.543503982 UTC
    , thread_cap_info = ("ThreadId 132", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 477}
    , self = 71
    , parent = Nothing
    , duration = 1.894065176000
    , status = Success
    , start = 2025-09-03 12:17:13.068139571 UTC
    , finish = 2025-09-03 12:17:14.962204747 UTC
    , thread_cap_info = ("ThreadId 113", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 53
      , num_top_rules = 53
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 865}
    , self = 62
    , parent = Nothing
    , duration = 2.836767186000
    , status = Success
    , start = 2025-09-03 12:17:09.989441067 UTC
    , finish = 2025-09-03 12:17:12.826208253 UTC
    , thread_cap_info = ("ThreadId 99", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 81
      , num_strict_rules = 31
      , num_top_rules = 31
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 695}
    , self = 84
    , parent = Nothing
    , duration = 3.041984656000
    , status = Success
    , start = 2025-09-03 12:17:15.549189146 UTC
    , finish = 2025-09-03 12:17:18.591173802 UTC
    , thread_cap_info = ("ThreadId 128", 0, False)}
Success : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 4
  max duration 0.982288646000
  min duration 0.002528936000
  total durat. 1.898826281000
**************************************************
S            Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
S            epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
S            = Size { num_rules = 8496 , num_strict_rules = 6696 , num_top_rules = 6696
S            , num_weak_rules = 1800 , alphabet_size = 60 , total_length = 80172} ,
S            self = 50 , parent = Nothing , duration = 0.982288646000 , status = Success
S            , start = 2025-09-03 12:17:07.915461995 UTC , finish = 2025-09-03 12:17:08.897750641
S            UTC , thread_cap_info = ("ThreadId 75", 2, False)}
S            
| S          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S          = Size { num_rules = 7992 , num_strict_rules = 6192 , num_top_rules = 6192
| S          , num_weak_rules = 1800 , alphabet_size = 60 , total_length = 76668} ,
| S          self = 49 , parent = Nothing , duration = 0.894120900000 , status = Success
| S          , start = 2025-09-03 12:17:07.928359564 UTC , finish = 2025-09-03 12:17:08.822480464
| S          UTC , thread_cap_info = ("ThreadId 80", 2, False)}
| S          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 103 , num_strict_rules
| | F        = 53 , num_top_rules = 53 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 865} , self = 54 , parent = Nothing , duration = 1.903409264000
| | F        , status = Fail , start = 2025-09-03 12:17:08.048149227 UTC , finish =
| | F        2025-09-03 12:17:09.951558491 UTC , thread_cap_info = ("ThreadId 87", 0,
| | F        False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 103 , num_strict_rules
| | | F      = 53 , num_top_rules = 53 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 865} , self = 53 , parent = Nothing , duration = 1.824376701000
| | | F      , status = Fail , start = 2025-09-03 12:17:08.068137188 UTC , finish =
| | | F      2025-09-03 12:17:09.892513889 UTC , thread_cap_info = ("ThreadId 88", 0,
| | | F      False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
| | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| | | | F    = 483} , self = 51 , parent = Nothing , duration = 1.041876355000 , status
| | | | F    = Fail , start = 2025-09-03 12:17:08.268595054 UTC , finish = 2025-09-03
| | | | F    12:17:09.310471409 UTC , thread_cap_info = ("ThreadId 91", 0, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
| | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| | | | | F  = 483} , self = 52 , parent = Nothing , duration = 1.233617918000 , status
| | | | | F  = Fail , start = 2025-09-03 12:17:08.356480674 UTC , finish = 2025-09-03
| | | | | F  12:17:09.590098592 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | | | F  
| S | | | |  
S   | | | |  
    | | F |  
S   | |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |   |  = 52 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 ,
S   | |   |  alphabet_size = 7 , total_length = 483} , self = 55 , parent = Nothing
S   | |   |  , duration = 1.706502602000 , status = Success , start = 2025-09-03 12:17:09.455354353
S   | |   |  UTC , finish = 2025-09-03 12:17:11.161856955 UTC , thread_cap_info = ("ThreadId
S   | |   |  95", 0, False)}
S   | |   |  
|   | |   F  
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 52
| E | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 483} , self = 57 , parent = Nothing , duration = 1.657317590000
| E | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:17:09.710825334
| E | |      UTC , finish = 2025-09-03 12:17:11.368142924 UTC , thread_cap_info = ("ThreadId
| E | |      98", 0, False)}
| E | |      
| | | F      
| | F        
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 103 , num_strict_rules = 53 , num_top_rules = 53 , num_weak_rules = 50
| | S        , alphabet_size = 10 , total_length = 865} , self = 62 , parent = Nothing
| | S        , duration = 2.836767186000 , status = Success , start = 2025-09-03 12:17:09.989441067
| | S        UTC , finish = 2025-09-03 12:17:12.826208253 UTC , thread_cap_info = ("ThreadId
| | S        99", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 103
| | | E      , num_strict_rules = 53 , num_top_rules = 53 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 865} , self = 64 , parent = Nothing , duration =
| | | E      2.939895360000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:17:10.088233721 UTC , finish = 2025-09-03 12:17:13.028129081 UTC , thread_cap_info
| | | E      = ("ThreadId 100", 0, False)}
| | | E      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
F   | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 477} , self = 65 , parent = Nothing , duration = 1.242075428000 , status
F   | |      = Fail , start = 2025-09-03 12:17:11.808156207 UTC , finish = 2025-09-03
F   | |      12:17:13.050231635 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| F | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 477} , self = 67 , parent = Nothing , duration = 1.263399526000 , status
| F | |      = Fail , start = 2025-09-03 12:17:11.828135737 UTC , finish = 2025-09-03
| F | |      12:17:13.091535263 UTC , thread_cap_info = ("ThreadId 107", 0, False)}
| F | |      
| | S |      
| |   E      
F |          
S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |          = 51 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 ,
S |          alphabet_size = 7 , total_length = 477} , self = 71 , parent = Nothing
S |          , duration = 1.894065176000 , status = Success , start = 2025-09-03 12:17:13.068139571
S |          UTC , finish = 2025-09-03 12:17:14.962204747 UTC , thread_cap_info = ("ThreadId
S |          113", 0, False)}
S |          
| F          
| E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 51
| E          , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size
| E          = 7 , total_length = 477} , self = 73 , parent = Nothing , duration = 1.998397152000
| E          , status = Except "AsyncCancelled" , start = 2025-09-03 12:17:13.152311405
| E          UTC , finish = 2025-09-03 12:17:15.150708557 UTC , thread_cap_info = ("ThreadId
| E          114", 0, False)}
| E          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | F        = 31 , num_top_rules = 31 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 695} , self = 79 , parent = Nothing , duration = 2.183350182000
| | F        , status = Fail , start = 2025-09-03 12:17:13.329290742 UTC , finish =
| | F        2025-09-03 12:17:15.512640924 UTC , thread_cap_info = ("ThreadId 117",
| | F        0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | | F      = 31 , num_top_rules = 31 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 695} , self = 78 , parent = Nothing , duration = 2.118258766000
| | | F      , status = Fail , start = 2025-09-03 12:17:13.349724618 UTC , finish =
| | | F      2025-09-03 12:17:15.467983384 UTC , thread_cap_info = ("ThreadId 118",
| | | F      0, False)}
| | | F      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
F   | |      = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 485} , self = 80 , parent = Nothing , duration = 1.253160111000 , status
F   | |      = Fail , start = 2025-09-03 12:17:15.408159591 UTC , finish = 2025-09-03
F   | |      12:17:16.661319702 UTC , thread_cap_info = ("ThreadId 126", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
| F | |      = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 485} , self = 81 , parent = Nothing , duration = 1.286271506000 , status
| F | |      = Fail , start = 2025-09-03 12:17:15.428133726 UTC , finish = 2025-09-03
| F | |      12:17:16.714405232 UTC , thread_cap_info = ("ThreadId 127", 0, False)}
| F | |      
| | | F      
| | F        
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 81 , num_strict_rules = 31 , num_top_rules = 31 , num_weak_rules = 50
| | S        , alphabet_size = 10 , total_length = 695} , self = 84 , parent = Nothing
| | S        , duration = 3.041984656000 , status = Success , start = 2025-09-03 12:17:15.549189146
| | S        UTC , finish = 2025-09-03 12:17:18.591173802 UTC , thread_cap_info = ("ThreadId
| | S        128", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 81
| | | E      , num_strict_rules = 31 , num_top_rules = 31 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 695} , self = 87 , parent = Nothing , duration =
| | | E      3.060377190000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:17:15.668138002 UTC , finish = 2025-09-03 12:17:18.728515192 UTC , thread_cap_info
| | | E      = ("ThreadId 129", 0, False)}
| | | E      
F | | |      
  F | |      
S   | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |      = 52 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 ,
S   | |      alphabet_size = 7 , total_length = 485} , self = 82 , parent = Nothing
S   | |      , duration = 1.795367818000 , status = Success , start = 2025-09-03 12:17:16.748136164
S   | |      UTC , finish = 2025-09-03 12:17:18.543503982 UTC , thread_cap_info = ("ThreadId
S   | |      132", 0, False)}
S   | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 52
| E | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 485} , self = 86 , parent = Nothing , duration = 1.761385223000
| E | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:17:16.928559104
| E | |      UTC , finish = 2025-09-03 12:17:18.689944327 UTC , thread_cap_info = ("ThreadId
| E | |      133", 0, False)}
| E | |      
S | | |      
  | S |      
  E   |      
      E      
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
F            = 30 , num_top_rules = 30 , num_weak_rules = 50 , alphabet_size = 10 ,
F            total_length = 684} , self = 98 , parent = Nothing , duration = 2.178861347000
F            , status = Fail , start = 2025-09-03 12:17:18.848141526 UTC , finish =
F            2025-09-03 12:17:21.027002873 UTC , thread_cap_info = ("ThreadId 144",
F            0, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
| F          = 30 , num_top_rules = 30 , num_weak_rules = 50 , alphabet_size = 10 ,
| F          total_length = 684} , self = 99 , parent = Nothing , duration = 2.204228599000
| F          , status = Fail , start = 2025-09-03 12:17:18.86813388 UTC , finish = 2025-09-03
| F          12:17:21.072362479 UTC , thread_cap_info = ("ThreadId 145", 0, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | F        = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| | F        = 480} , self = 96 , parent = Nothing , duration = 1.441753591000 , status
| | F        = Fail , start = 2025-09-03 12:17:18.948138093 UTC , finish = 2025-09-03
| | F        12:17:20.389891684 UTC , thread_cap_info = ("ThreadId 146", 0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| | | F      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| | | F      = 480} , self = 97 , parent = Nothing , duration = 1.620034193000 , status
| | | F      = Fail , start = 2025-09-03 12:17:18.968133261 UTC , finish = 2025-09-03
| | | F      12:17:20.588167454 UTC , thread_cap_info = ("ThreadId 147", 0, False)}
| | | F      
| | F |      
| | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |      = 51 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 ,
| | S |      alphabet_size = 7 , total_length = 480} , self = 100 , parent = Nothing
| | S |      , duration = 1.316648885000 , status = Success , start = 2025-09-03 12:17:20.428482074
| | S |      UTC , finish = 2025-09-03 12:17:21.745130959 UTC , thread_cap_info = ("ThreadId
| | S |      150", 0, False)}
| | S |      
| | | F      
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 51
| | | E      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size
| | | E      = 7 , total_length = 480} , self = 102 , parent = Nothing , duration =
| | | E      1.231321356000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:17:20.756804822 UTC , finish = 2025-09-03 12:17:21.988126178 UTC , thread_cap_info
| | | E      = ("ThreadId 153", 0, False)}
| | | E      
F | | |      
  F | |      
    S |      
      E      
