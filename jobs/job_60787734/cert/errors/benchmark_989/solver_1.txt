last 498 length 1869
last 531 length 2014
CNF 498 vars 1869 clauses
CNF 531 vars 2014 clauses
last 564 length 2105
last 567 length 2132
CNF 564 vars 2105 clauses
CNF 567 vars 2132 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3770, clauses: 13224
last 3770 length 13224
CNF 3770 vars 13224 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10037, clauses: 40983
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3770, clauses: 13224, status: Satisfied, time: 0.161031153s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4151, clauses: 14547
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10153, clauses: 41297
last 428 length 1607
last 493 length 1874
last 4151 length 14547
last 10153 length 41297
CNF 428 vars 1607 clauses
CNF 4151 vars 14547 clauses
CNF 493 vars 1874 clauses
CNF 10153 vars 41297 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3465, clauses: 12062
last 3465 length 12062
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4151, clauses: 14547, status: Satisfied, time: 0.110232549s
CNF 3465 vars 12062 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9653, clauses: 39397
last 9653 length 39397
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3465, clauses: 12062, status: Unsatisfied, time: 0.184767015s
CNF 9653 vars 39397 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6159, clauses: 23312
last 6159 length 23312
CNF 6159 vars 23312 clauses
**************************************************
summary
**************************************************
SRS with 7 rules on 6 letters       mirror
SRS with 7 rules on 6 letters       context
SRS with 12 rules on 6 letters       mirror
SRS with 12 rules on 6 letters       DP
SRS with 7 strict rules and 12 weak rules on 11 letters       EDG
SRS with 7 strict rules and 12 weak rules on 11 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 12 weak rules on 8 letters       weights
SRS with 0 strict rules and 12 weak rules on 6 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, b] {- Input 0 -}
  [c, b] -> [d] {- Input 1 -}
  [e, b] -> [c, c] {- Input 2 -}
  [d, b] -> [b, f] {- Input 3 -}
  [f] -> [a, e] {- Input 4 -}
  [c] -> [] {- Input 5 -}
  [a, a] -> [f] {- Input 6 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, b] {- Mirror (Input 0) -}
  [b, c] -> [d] {- Mirror (Input 1) -}
  [b, e] -> [c, c] {- Mirror (Input 2) -}
  [b, d] -> [f, b] {- Mirror (Input 3) -}
  [f] -> [e, a] {- Mirror (Input 4) -}
  [c] -> [] {- Mirror (Input 5) -}
  [a, a] -> [f] {- Mirror (Input 6) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b, b] {- Mirror (Input 0) -}
  [b, c] -> [d] {- Mirror (Input 1) -}
  [b, e] -> [c, c] {- Mirror (Input 2) -}
  [b, d] -> [f, b] {- Mirror (Input 3) -}
  [f] -> [e, a] {- Mirror (Input 4) -}
  [d, c] -> [d] {- Mirror (Input 5) -}
  [a, c] -> [a] {- Mirror (Input 5) -}
  [f, c] -> [f] {- Mirror (Input 5) -}
  [b, c] -> [b] {- Mirror (Input 5) -}
  [e, c] -> [e] {- Mirror (Input 5) -}
  [c, c] -> [c] {- Mirror (Input 5) -}
  [a, a] -> [f] {- Mirror (Input 6) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, b] {- Input 0 -}
  [c, b] -> [d] {- Input 1 -}
  [e, b] -> [c, c] {- Input 2 -}
  [d, b] -> [b, f] {- Input 3 -}
  [f] -> [a, e] {- Input 4 -}
  [c, d] -> [d] {- Input 5 -}
  [c, a] -> [a] {- Input 5 -}
  [c, f] -> [f] {- Input 5 -}
  [c, b] -> [b] {- Input 5 -}
  [c, e] -> [e] {- Input 5 -}
  [c, c] -> [c] {- Input 5 -}
  [a, a] -> [f] {- Input 6 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b, b] {- DP Nontop (Input 0) -}
  [c, b] ->= [d] {- DP Nontop (Input 1) -}
  [e, b] ->= [c, c] {- DP Nontop (Input 2) -}
  [d, b] ->= [b, f] {- DP Nontop (Input 3) -}
  [f] ->= [a, e] {- DP Nontop (Input 4) -}
  [c, d] ->= [d] {- DP Nontop (Input 5) -}
  [c, a] ->= [a] {- DP Nontop (Input 5) -}
  [c, f] ->= [f] {- DP Nontop (Input 5) -}
  [c, b] ->= [b] {- DP Nontop (Input 5) -}
  [c, e] ->= [e] {- DP Nontop (Input 5) -}
  [c, c] ->= [c] {- DP Nontop (Input 5) -}
  [a, a] ->= [f] {- DP Nontop (Input 6) -}
  [d#, b] |-> [f#] {- DP (Top 1) (Input 3) -}
  [a#, a] |-> [f#] {- DP (Top 0) (Input 6) -}
  [f#] |-> [a#, e] {- DP (Top 0) (Input 4) -}
  [f#] |-> [e#] {- DP (Top 1) (Input 4) -}
  [e#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [e#, b] |-> [c#, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [d#] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [d#, b] |-> [f#] {- DP (Top 1) (Input 3) -}
  [f#] |-> [a#, e] {- DP (Top 0) (Input 4) -}
  [a#, a] |-> [f#] {- DP (Top 0) (Input 6) -}
  [f#] |-> [e#] {- DP (Top 1) (Input 4) -}
  [e#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [c#, b] |-> [d#] {- DP (Top 0) (Input 1) -}
  [e#, b] |-> [c#, c] {- DP (Top 0) (Input 2) -}
  [a] ->= [b, b] {- DP Nontop (Input 0) -}
  [c, b] ->= [d] {- DP Nontop (Input 1) -}
  [e, b] ->= [c, c] {- DP Nontop (Input 2) -}
  [d, b] ->= [b, f] {- DP Nontop (Input 3) -}
  [f] ->= [a, e] {- DP Nontop (Input 4) -}
  [c, d] ->= [d] {- DP Nontop (Input 5) -}
  [c, a] ->= [a] {- DP Nontop (Input 5) -}
  [c, f] ->= [f] {- DP Nontop (Input 5) -}
  [c, b] ->= [b] {- DP Nontop (Input 5) -}
  [c, e] ->= [e] {- DP Nontop (Input 5) -}
  [c, c] ->= [c] {- DP Nontop (Input 5) -}
  [a, a] ->= [f] {- DP Nontop (Input 6) -}
reason
  ( d
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a
  , Wk  / 3A 3A 6A - \
        | 3A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( f
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( e
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( d#
  , Wk  / 17A 19A 19A - \
        | 17A 19A 19A - |
        | 17A 19A 19A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 18A 18A 21A - \
        | 18A 18A 21A - |
        | 18A 18A 21A - |
        \ -   -   -   - / )
  ( f#
  , Wk  / 19A 20A 22A - \
        | 19A 20A 22A - |
        | 19A 20A 22A - |
        \ -   -   -   - / )
  ( e#
  , Wk  / 18A 18A 21A - \
        | 18A 18A 21A - |
        | 18A 18A 21A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 17A 18A 20A - \
        | 17A 18A 20A - |
        | 17A 18A 20A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [d#, b] |-> [f#] {- DP (Top 1) (Input 3) -}
  [a] ->= [b, b] {- DP Nontop (Input 0) -}
  [c, b] ->= [d] {- DP Nontop (Input 1) -}
  [e, b] ->= [c, c] {- DP Nontop (Input 2) -}
  [d, b] ->= [b, f] {- DP Nontop (Input 3) -}
  [f] ->= [a, e] {- DP Nontop (Input 4) -}
  [c, d] ->= [d] {- DP Nontop (Input 5) -}
  [c, a] ->= [a] {- DP Nontop (Input 5) -}
  [c, f] ->= [f] {- DP Nontop (Input 5) -}
  [c, b] ->= [b] {- DP Nontop (Input 5) -}
  [c, e] ->= [e] {- DP Nontop (Input 5) -}
  [c, c] ->= [c] {- DP Nontop (Input 5) -}
  [a, a] ->= [f] {- DP Nontop (Input 6) -}
reason
  (d, 0/1)
  (a, 0/1)
  (f, 0/1)
  (b, 0/1)
  (e, 0/1)
  (c, 0/1)
  (d#, 1/1)
  (f#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b, b] {- DP Nontop (Input 0) -}
  [c, b] ->= [d] {- DP Nontop (Input 1) -}
  [e, b] ->= [c, c] {- DP Nontop (Input 2) -}
  [d, b] ->= [b, f] {- DP Nontop (Input 3) -}
  [f] ->= [a, e] {- DP Nontop (Input 4) -}
  [c, d] ->= [d] {- DP Nontop (Input 5) -}
  [c, a] ->= [a] {- DP Nontop (Input 5) -}
  [c, f] ->= [f] {- DP Nontop (Input 5) -}
  [c, b] ->= [b] {- DP Nontop (Input 5) -}
  [c, e] ->= [e] {- DP Nontop (Input 5) -}
  [c, c] ->= [c] {- DP Nontop (Input 5) -}
  [a, a] ->= [f] {- DP Nontop (Input 6) -}
reason
  EDG

**************************************************
skeleton: \Mirror(7,6)\Context\Mirror(12,6)\Deepee\EDG(7/12,11)\Matrix{\Arctic}{3}(1/12,8)\Weight(0/12,6)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 18
E          , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size
E          = 9 , total_length = 55} , self = 54 , parent = Nothing , duration = 0.286022888000
E          , status = Except "AsyncCancelled" , start = 2025-09-03 13:42:46.203684382
E          UTC , finish = 2025-09-03 13:42:46.48970727 UTC , thread_cap_info = ("ThreadId
E          78", 2, False)}
E          
| S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S        = Size { num_rules = 704 , num_strict_rules = 452 , num_top_rules = 452
| S        , num_weak_rules = 252 , alphabet_size = 60 , total_length = 3288} , self
| S        = 50 , parent = Nothing , duration = 0.112569422000 , status = Success
| S        , start = 2025-09-03 13:42:46.21038 UTC , finish = 2025-09-03 13:42:46.322949422
| S        UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| S        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 18 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 12 ,
| | S      alphabet_size = 9 , total_length = 55} , self = 52 , parent = Nothing ,
| | S      duration = 0.271164249000 , status = Success , start = 2025-09-03 13:42:46.218208491
| | S      UTC , finish = 2025-09-03 13:42:46.48937274 UTC , thread_cap_info = ("ThreadId
| | S      77", 2, False)}
| | S      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 19 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 12 ,
| | | S    alphabet_size = 11 , total_length = 59} , self = 62 , parent = Nothing
| | | S    , duration = 0.402876014000 , status = Success , start = 2025-09-03 13:42:46.290360303
| | | S    UTC , finish = 2025-09-03 13:42:46.693236317 UTC , thread_cap_info = ("ThreadId
| | | S    95", 2, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 19
| | | | E  , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 12 , alphabet_size
| | | | E  = 11 , total_length = 59} , self = 65 , parent = Nothing , duration = 0.513430881000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:42:46.29223428
| | | | E  UTC , finish = 2025-09-03 13:42:46.805665161 UTC , thread_cap_info = ("ThreadId
| | | | E  96", 2, False)}
| | | | E  
| S | | |  
|   S | |  
E     | |  
F     | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F     | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F     | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F     | |  = 16 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 12 ,
F     | |  alphabet_size = 9 , total_length = 49} , self = 64 , parent = Nothing ,
F     | |  duration = 0.238656200000 , status = Fail , start = 2025-09-03 13:42:46.551731275
F     | |  UTC , finish = 2025-09-03 13:42:46.790387475 UTC , thread_cap_info = ("ThreadId
F     | |  111", 2, False)}
F     | |  
|     S |  
F       |  
        E  
