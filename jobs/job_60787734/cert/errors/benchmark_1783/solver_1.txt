last 511 length 2051
last 551 length 2173
CNF 551 vars 2173 clauses
CNF 511 vars 2051 clauses
last 624 length 2456
CNF 624 vars 2456 clauses
last 530 length 2122
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6837, clauses: 28122
last 6837 length 28122
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2759, clauses: 9948
last 2759 length 9948
CNF 530 vars 2122 clauses
last 4056 length 17242
CNF 2759 vars 9948 clauses
CNF 4056 vars 17242 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2877, clauses: 10457
last 2877 length 10457
CNF 6837 vars 28122 clauses
last 4596 length 20536
CNF 2877 vars 10457 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2759, clauses: 9948, status: Satisfied, time: 0.08935815s
CNF 4596 vars 20536 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6883, clauses: 28304
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2877, clauses: 10457, status: Satisfied, time: 0.075298327s
**************************************************last 5427 length 23274

last 6377 length 28252
last 6883 length 28304
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 8 strict rules and 3 weak rules on 6 letters       weights
SRS with 6 strict rules and 3 weak rules on 6 letters       EDG
SRS with 6 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 3 weak rules on 6 letters       weights
SRS with 2 strict rules and 3 weak rules on 5 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
CNF 6377 vars 28252 clauses
CNF 5427 vars 23274 clauses
CNF 6883 vars 28304 clauses
  last 5278 length 22214
[a, b] -> [b, c, a] {- Input 0 -}last 5950 length 26498

  [b, c] -> [c, b, b] {- Input 1 -}
  [c, a] -> [a, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [a, c, b] {- Mirror (Input 0) -}
  [c, b] -> [b, b, c] {- Mirror (Input 1) -}
  [a, c] -> [c, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [c#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [b#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a] |-> [c#, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, b] |-> [b#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [c#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b] |-> [b#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [c#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [b#, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 15A 15A 15A - \
        | 15A 15A 15A - |
        | 15A 15A 15A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 16A 19A 19A - \
        | 16A 19A 19A - |
        | 16A 19A 19A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 2A 2A 4A - \
        | 2A 2A 4A - |
        | 2A 2A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6883, clauses: 28304, status: Satisfied, time: 0.050585372s
[a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, c] |-> [c#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a] |-> [a#, c, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 2/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
      [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
      [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [a#, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (c, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
  [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, a] ->= [a, c, b] {- DP Nontop (Mirror (Input 0)) -}
      [c, b] ->= [b, b, c] {- DP Nontop (Mirror (Input 1)) -}
      [a, c] ->= [c, a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (b, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(8/3,6)\Weight\EDG(6/3,6)\Matrix{\Arctic}{3}(4/3,6)\Weight(2/3,5)\EDG[(1/3,4)\Usable(1,2)\Weight(0,0)\EDG[],(1/3,4)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 5278 vars 22214 clauses
CNF 5950 vars 26498 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S          = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
S          = 6 , total_length = 38} , self = 58 , parent = Nothing , duration = 0.235988239000
S          , status = Success , start = 2025-09-03 13:08:22.56028026 UTC , finish
S          = 2025-09-03 13:08:22.796268499 UTC , thread_cap_info = ("ThreadId 75",
S          0, False)}
S          
| E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E        , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| E        = 6 , total_length = 38} , self = 60 , parent = Nothing , duration = 0.227845145000
| E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:08:22.568519875
| E        UTC , finish = 2025-09-03 13:08:22.79636502 UTC , thread_cap_info = ("ThreadId
| E        76", 0, False)}
| E        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 180} , self = 55 , parent = Nothing , duration = 0.137003023000 , status
| | F      = Fail , start = 2025-09-03 13:08:22.592799553 UTC , finish = 2025-09-03
| | F      13:08:22.729802576 UTC , thread_cap_info = ("ThreadId 82", 2, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 180} , self = 70 , parent = Nothing , duration = 0.222678697000 , status
| | | F    = Fail , start = 2025-09-03 13:08:22.608441156 UTC , finish = 2025-09-03
| | | F    13:08:22.831119853 UTC , thread_cap_info = ("ThreadId 84", 2, False)}
| | | F    
| | | | S  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | S  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | S  = Size { num_rules = 126 , num_strict_rules = 99 , num_top_rules = 99 ,
| | | | S  num_weak_rules = 27 , alphabet_size = 18 , total_length = 711} , self =
| | | | S  57 , parent = Nothing , duration = 0.107797571000 , status = Success ,
| | | | S  start = 2025-09-03 13:08:22.683209623 UTC , finish = 2025-09-03 13:08:22.791007194
| | | | S  UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | S  
| | F | |  
| |   | S  
S |   |    
  E   |    
      F    
