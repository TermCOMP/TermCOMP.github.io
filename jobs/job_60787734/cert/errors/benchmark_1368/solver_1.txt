last 787 length 3660
last 5590 length 29940
last 894 length 3830
last 1013 length 4338
last 684 length 3222
CNF 787 vars 3660 clauses
last 5875 length 40994
CNF 5590 vars 29940 clauses
CNF 894 vars 3830 clauses
CNF 1013 vars 4338 clauses
CNF 684 vars 3222 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7991
last 11109 length 50203
CNF 5875 vars 40994 clauses
last 14978 length 65190
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1844, clauses: 6630
last 2181 length 7991
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5756, clauses: 23833
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6680, clauses: 27733
CNF 11109 vars 50203 clauses
last 1844 length 6630
CNF 14978 vars 65190 clauses
last 5756 length 23833
last 6680 length 27733
CNF 2181 vars 7991 clauses
CNF 1844 vars 6630 clauses
CNF 6680 vars 27733 clauses
CNF 5756 vars 23833 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1844, clauses: 6630, status: Satisfied, time: 0.149553281s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2181, clauses: 7991, status: Satisfied, time: 0.22659636s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6680, clauses: 27733, status: Satisfied, time: 0.124782655s
last 635 length 2672
CNF 635 vars 2672 clauses
last 799 length 3231
CNF 799 vars 3231 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 3 letters       context
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 5 strict rules and 4 weak rules on 5 letters       weights
SRS with 2 strict rules and 4 weak rules on 4 letters       EDG
SRS with 2 strict rules and 4 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [b, b, c, a, a, a] {- Input 0 -}
  [b, c, a] -> [] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, b] -> [b, b, c, a, a, a] {- Input 0 -}
  [a, b, c, a] -> [a] {- Input 1 -}
  [b, b, c, a] -> [b] {- Input 1 -}
  [c, b, c, a] -> [c] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, a, a, c, b, b] {- Mirror (Input 0) -}
  [a, c, b, a] -> [a] {- Mirror (Input 1) -}
  [a, c, b, b] -> [b] {- Mirror (Input 1) -}
  [a, c, b, c] -> [c] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, a, a, c, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, a, c, b, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [a#, c, b, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 4) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 15A 16A 18A - \
        | 15A 16A 18A - |
        | 15A 16A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, a, a, c, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [a, c, b, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,3)\Context\Mirror(4,3)\Deepee(5/4,5)\Weight\EDG(2/4,4)\Matrix{\Arctic}{3}(0/4,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.843176779000
  min duration 0.016111961000
  total durat. 2.612256873000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.937262833000
  min duration 0.021295340000
  total durat. 2.625368066000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.639749816000
  min duration 0.439952385000
  total durat. 1.079702201000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.132799802000
  min duration 1.132799802000
  total durat. 1.132799802000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 80
    , parent = Nothing
    , duration = 1.132799802000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:42:21.679888374 UTC
    , finish = 2025-09-03 11:42:22.812688176 UTC
    , thread_cap_info = ("ThreadId 64", 0, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F                  = 42 , parent = Nothing , duration = 0.133022504000 , status = Fail , start
F                  = 2025-09-03 11:42:21.667029784 UTC , finish = 2025-09-03 11:42:21.800052288
F                  UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F                = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 144} , self = 58 , parent = Nothing , duration = 0.606023899000 , status
| F                = Fail , start = 2025-09-03 11:42:21.66839983 UTC , finish = 2025-09-03
| F                11:42:22.274423729 UTC , thread_cap_info = ("ThreadId 57", 1, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | F              = 18 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 144} , self = 62 , parent = Nothing , duration = 0.937262833000 , status
| | F              = Fail , start = 2025-09-03 11:42:21.677279931 UTC , finish = 2025-09-03
| | F              11:42:22.614542764 UTC , thread_cap_info = ("ThreadId 59", 1, False)}
| | F              
| | | E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E            = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E            = 12} , self = 80 , parent = Nothing , duration = 1.132799802000 , status
| | | E            = Except "AsyncCancelled" , start = 2025-09-03 11:42:21.679888374 UTC ,
| | | E            finish = 2025-09-03 11:42:22.812688176 UTC , thread_cap_info = ("ThreadId
| | | E            64", 0, False)}
| | | E            
F | | |            
F | | |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |            = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
F | | |            = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 4 , total_length
F | | |            = 39} , self = 60 , parent = Nothing , duration = 0.633432526000 , status
F | | |            = Fail , start = 2025-09-03 11:42:21.800076544 UTC , finish = 2025-09-03
F | | |            11:42:22.43350907 UTC , thread_cap_info = ("ThreadId 83", 2, False)}
F | | |            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | F          = 39} , self = 57 , parent = Nothing , duration = 0.263459353000 , status
| | | | F          = Fail , start = 2025-09-03 11:42:21.814733726 UTC , finish = 2025-09-03
| | | | F          11:42:22.078193079 UTC , thread_cap_info = ("ThreadId 89", 2, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | F        = 33} , self = 59 , parent = Nothing , duration = 0.513511708000 , status
| | | | | F        = Fail , start = 2025-09-03 11:42:21.822803256 UTC , finish = 2025-09-03
| | | | | F        11:42:22.336314964 UTC , thread_cap_info = ("ThreadId 92", 2, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 4 , total_length
| | | | | | F      = 33} , self = 61 , parent = Nothing , duration = 0.603050420000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:42:21.831292412 UTC , finish = 2025-09-03
| | | | | | F      11:42:22.434342832 UTC , thread_cap_info = ("ThreadId 93", 2, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 58 , num_strict_rules
| | | | | | | F    = 40 , num_top_rules = 40 , num_weak_rules = 18 , alphabet_size = 14 ,
| | | | | | | F    total_length = 461} , self = 64 , parent = Nothing , duration = 0.843176779000
| | | | | | | F    , status = Fail , start = 2025-09-03 11:42:21.859698469 UTC , finish =
| | | | | | | F    2025-09-03 11:42:22.702875248 UTC , thread_cap_info = ("ThreadId 99", 3,
| | | | | | | F    False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 58 , num_strict_rules
| | | | | | | | F  = 40 , num_top_rules = 40 , num_weak_rules = 18 , alphabet_size = 14 ,
| | | | | | | | F  total_length = 461} , self = 63 , parent = Nothing , duration = 0.800300120000
| | | | | | | | F  , status = Fail , start = 2025-09-03 11:42:21.872282401 UTC , finish =
| | | | | | | | F  2025-09-03 11:42:22.672582521 UTC , thread_cap_info = ("ThreadId 100",
| | | | | | | | F  2, False)}
| | | | | | | | F  
| | | | F | | | |  
| | | | S | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S | | | |  = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | | | S | | | |  = 4 , total_length = 39} , self = 65 , parent = Nothing , duration = 0.639749816000
| | | | S | | | |  , status = Success , start = 2025-09-03 11:42:22.132288384 UTC , finish
| | | | S | | | |  = 2025-09-03 11:42:22.7720382 UTC , thread_cap_info = ("ThreadId 108",
| | | | S | | | |  2, False)}
| | | | S | | | |  
| F | | | | | | |  
|   | | | F | | |  
| S | | |   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | |   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | |   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | |   | | |  = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| S | | |   | | |  = 4 , total_length = 33} , self = 67 , parent = Nothing , duration = 0.439952385000
| S | | |   | | |  , status = Success , start = 2025-09-03 11:42:22.336347457 UTC , finish
| S | | |   | | |  = 2025-09-03 11:42:22.776299842 UTC , thread_cap_info = ("ThreadId 110",
| S | | |   | | |  2, False)}
| S | | |   | | |  
F | | | |   | | |  
S | | | |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | | | |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | | |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | | |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
S | | | |   | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
S | | | |   | | |  = 4 , total_length = 39} , self = 66 , parent = Nothing , duration = 0.342448918000
S | | | |   | | |  , status = Success , start = 2025-09-03 11:42:22.433562852 UTC , finish
S | | | |   | | |  = 2025-09-03 11:42:22.77601177 UTC , thread_cap_info = ("ThreadId 111",
S | | | |   | | |  2, False)}
S | | | |   | | |  
| | | | |   F | |  
| | | | | E   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | E   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | | E   | |  = 4 , total_length = 33} , self = 75 , parent = Nothing , duration = 0.337904769000
| | | | | E   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:42:22.453007782
| | | | | E   | |  UTC , finish = 2025-09-03 11:42:22.790912551 UTC , thread_cap_info = ("ThreadId
| | | | | E   | |  112", 2, False)}
| | | | | E   | |  
| | F | | |   | |  
| |   | | |   | F  
| |   | | |   F    
| |   | S |        
S |   |   |        
  S   |   |        
      |   E        
      E            
