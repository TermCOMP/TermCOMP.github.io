last 1174 length 4780
CNF 1174 vars 4780 clauses
last 1180 length 4926
CNF 1180 vars 4926 clauses
last 1089 length 4479
last 1124 length 4504
CNF 1089 vars 4479 clauses
CNF 1124 vars 4504 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4337, clauses: 15567
last 4337 length 15567
CNF 4337 vars 15567 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4346, clauses: 15540
last 4346 length 15540
CNF 4346 vars 15540 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15723, clauses: 65485
last 15723 length 65485
CNF 15723 vars 65485 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15723, clauses: 65485, status: Satisfied, time: 0.179921729s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4337, clauses: 15567, status: Unsatisfied, time: 0.548162233s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15721, clauses: 65489
last 15721 length 65489
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
CNF 15721 vars 65489 clauses
last 1080 length 4330
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15721, clauses: 65489, status: Satisfied, time: 0.291374351s
last 1031 length 4247
CNF 1080 vars 4330 clauses
CNF 1031 vars 4247 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9725, clauses: 38790
last 9725 length 38790
CNF 9725 vars 38790 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4040, clauses: 14403
last 4040 length 14403
CNF 4040 vars 14403 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4040, clauses: 14403, status: Satisfied, time: 0.222238936s
last 1090 length 4410
last 1099 length 4582
CNF 1090 vars 4410 clauses
CNF 1099 vars 4582 clauses
**************************************************
summary
**************************************************
SRS with 9 rules on 6 letters       mirror
SRS with 9 rules on 6 letters       context
SRS with 14 rules on 6 letters       mirror
SRS with 14 rules on 6 letters       DP
SRS with 18 strict rules and 14 weak rules on 10 letters       weights
SRS with 4 strict rules and 14 weak rules on 9 letters       EDG
3 sub-proofs
  1 SRS with 1 strict rules and 14 weak rules on 7 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 14 weak rules on 7 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 14 weak rules on 7 letters       EDG
  SRS with 1 strict rules and 14 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 14 weak rules on 6 letters       EDG

  3 SRS with 1 strict rules and 14 weak rules on 7 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [r1, a] -> [a, a, a, r1] {- Input 0 -}
  [r2, a] -> [a, a, a, r2] {- Input 1 -}
  [a, l1] -> [l1, a, a, a] {- Input 2 -}
  [a, a, l2] -> [l2, a, a] {- Input 3 -}
  [r1, b] -> [l1, b] {- Input 4 -}
  [r2, b] -> [l2, a, b] {- Input 5 -}
  [b, l1] -> [b, r2] {- Input 6 -}
  [b, l2] -> [b, r1] {- Input 7 -}
  [a, a] -> [] {- Input 8 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, r1] -> [r1, a, a, a] {- Mirror (Input 0) -}
  [a, r2] -> [r2, a, a, a] {- Mirror (Input 1) -}
  [l1, a] -> [a, a, a, l1] {- Mirror (Input 2) -}
  [l2, a, a] -> [a, a, l2] {- Mirror (Input 3) -}
  [b, r1] -> [b, l1] {- Mirror (Input 4) -}
  [b, r2] -> [b, a, l2] {- Mirror (Input 5) -}
  [l1, b] -> [r2, b] {- Mirror (Input 6) -}
  [l2, b] -> [r1, b] {- Mirror (Input 7) -}
  [a, a] -> [] {- Mirror (Input 8) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, r1] -> [r1, a, a, a] {- Mirror (Input 0) -}
  [a, r2] -> [r2, a, a, a] {- Mirror (Input 1) -}
  [l1, a] -> [a, a, a, l1] {- Mirror (Input 2) -}
  [l2, a, a] -> [a, a, l2] {- Mirror (Input 3) -}
  [b, r1] -> [b, l1] {- Mirror (Input 4) -}
  [b, r2] -> [b, a, l2] {- Mirror (Input 5) -}
  [l1, b] -> [r2, b] {- Mirror (Input 6) -}
  [l2, b] -> [r1, b] {- Mirror (Input 7) -}
  [r1, a, a] -> [r1] {- Mirror (Input 8) -}
  [l1, a, a] -> [l1] {- Mirror (Input 8) -}
  [l2, a, a] -> [l2] {- Mirror (Input 8) -}
  [a, a, a] -> [a] {- Mirror (Input 8) -}
  [b, a, a] -> [b] {- Mirror (Input 8) -}
  [r2, a, a] -> [r2] {- Mirror (Input 8) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [r1, a] -> [a, a, a, r1] {- Input 0 -}
  [r2, a] -> [a, a, a, r2] {- Input 1 -}
  [a, l1] -> [l1, a, a, a] {- Input 2 -}
  [a, a, l2] -> [l2, a, a] {- Input 3 -}
  [r1, b] -> [l1, b] {- Input 4 -}
  [r2, b] -> [l2, a, b] {- Input 5 -}
  [b, l1] -> [b, r2] {- Input 6 -}
  [b, l2] -> [b, r1] {- Input 7 -}
  [a, a, r1] -> [r1] {- Input 8 -}
  [a, a, l1] -> [l1] {- Input 8 -}
  [a, a, l2] -> [l2] {- Input 8 -}
  [a, a, a] -> [a] {- Input 8 -}
  [a, a, b] -> [b] {- Input 8 -}
  [a, a, r2] -> [r2] {- Input 8 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
  [r1#, a] |-> [r1#] {- DP (Top 3) (Input 0) -}
  [r1#, a] |-> [a#, r1] {- DP (Top 2) (Input 0) -}
  [r1#, a] |-> [a#, a, r1] {- DP (Top 1) (Input 0) -}
  [r1#, a] |-> [a#, a, a, r1] {- DP (Top 0) (Input 0) -}
  [a#, l1] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, l1] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a#, l1] |-> [a#, a, a] {- DP (Top 1) (Input 2) -}
  [a#, a, l2] |-> [a#] {- DP (Top 2) (Input 3) -}
  [a#, a, l2] |-> [a#, a] {- DP (Top 1) (Input 3) -}
  [b#, l1] |-> [b#, r2] {- DP (Top 0) (Input 6) -}
  [b#, l1] |-> [r2#] {- DP (Top 1) (Input 6) -}
  [b#, l2] |-> [r1#] {- DP (Top 1) (Input 7) -}
  [b#, l2] |-> [b#, r1] {- DP (Top 0) (Input 7) -}
  [r2#, a] |-> [a#, a, a, r2] {- DP (Top 0) (Input 1) -}
  [r2#, a] |-> [a#, a, r2] {- DP (Top 1) (Input 1) -}
  [r2#, a] |-> [a#, r2] {- DP (Top 2) (Input 1) -}
  [r2#, a] |-> [r2#] {- DP (Top 3) (Input 1) -}
  [r2#, b] |-> [a#, b] {- DP (Top 1) (Input 5) -}
reason
  (r1, 1/1)
  (l1, 1/1)
  (l2, 1/1)
  (a, 0/1)
  (b, 0/1)
  (r2, 1/1)
  (r1#, 2/1)
  (a#, 0/1)
  (b#, 2/1)
  (r2#, 2/1)
   property Termination
has value Just True
for SRS
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
  [r1#, a] |-> [r1#] {- DP (Top 3) (Input 0) -}
  [b#, l1] |-> [b#, r2] {- DP (Top 0) (Input 6) -}
  [b#, l2] |-> [b#, r1] {- DP (Top 0) (Input 7) -}
  [r2#, a] |-> [r2#] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [r1#, a] |-> [r1#] {- DP (Top 3) (Input 0) -}
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
      [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
      [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
      [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
      [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
      [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
      [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
      [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
      [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
      [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
      [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
      [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
      [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
      [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
   property Termination
has value Just True
for SRS
  [r1#, a] |-> [r1#] {- DP (Top 3) (Input 0) -}
reason
  (a, 1/1)
  (r1#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, l1] |-> [b#, r2] {- DP (Top 0) (Input 6) -}
  [b#, l2] |-> [b#, r1] {- DP (Top 0) (Input 7) -}
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  ( r1
  , Wk  / -1A 1A  0A \
        | -1A -1A -  |
        \ -   -   0A / )
  ( l1
  , Wk  / -1A 1A  0A  \
        | -1A -1A -1A |
        \ -   -   0A  / )
  ( l2
  , Wk  / 0A 2A  1A  \
        | -  -1A -2A |
        \ -  -   0A  / )
  ( a
  , Wk  / -1A 1A 0A  \
        | -1A -  -2A |
        \ -   -  0A  / )
  ( b
  , Wk  / -   -  0A \
        | -1A 0A 0A |
        \ -   -  0A / )
  ( r2
  , Wk  / -1A 1A  0A  \
        | -1A -1A -1A |
        \ -   -   0A  / )
  ( b#
  , Wk  / 0A - -  \
        | -  - -  |
        \ -  - 0A / )
   property Termination
has value Just True
for SRS
  [b#, l1] |-> [b#, r2] {- DP (Top 0) (Input 6) -}
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, l1] |-> [b#, r2] {- DP (Top 0) (Input 6) -}
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  ( r1
  , Wk  / 21A 21A 21A - \
        | 21A 21A 21A - |
        | 21A 21A 21A - |
        \ -   -   -   - / )
  ( l1
  , Wk  / 21A 21A 21A - \
        | 21A 21A 21A - |
        | 21A 21A 21A - |
        \ -   -   -   - / )
  ( l2
  , Wk  / 21A 21A 21A - \
        | 18A 18A 21A - |
        | 18A 18A 18A - |
        \ -   -   -   - / )
  ( a
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( r2
  , Wk  / 21A 21A 21A - \
        | 18A 21A 21A - |
        | 18A 18A 18A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 1A 2A 3A - \
        | 1A 2A 3A - |
        | 1A 2A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [r2#, a] |-> [r2#] {- DP (Top 3) (Input 1) -}
  [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
  [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
  [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
  [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
  [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
  [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
  [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
  [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
  [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
  [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
  [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
  [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
reason
  remove un-usable
    SRS
      [r1, a] ->= [a, a, a, r1] {- DP Nontop (Input 0) -}
      [r2, a] ->= [a, a, a, r2] {- DP Nontop (Input 1) -}
      [a, l1] ->= [l1, a, a, a] {- DP Nontop (Input 2) -}
      [a, a, l2] ->= [l2, a, a] {- DP Nontop (Input 3) -}
      [r1, b] ->= [l1, b] {- DP Nontop (Input 4) -}
      [r2, b] ->= [l2, a, b] {- DP Nontop (Input 5) -}
      [b, l1] ->= [b, r2] {- DP Nontop (Input 6) -}
      [b, l2] ->= [b, r1] {- DP Nontop (Input 7) -}
      [a, a, r1] ->= [r1] {- DP Nontop (Input 8) -}
      [a, a, l1] ->= [l1] {- DP Nontop (Input 8) -}
      [a, a, l2] ->= [l2] {- DP Nontop (Input 8) -}
      [a, a, a] ->= [a] {- DP Nontop (Input 8) -}
      [a, a, b] ->= [b] {- DP Nontop (Input 8) -}
      [a, a, r2] ->= [r2] {- DP Nontop (Input 8) -}
   property Termination
has value Just True
for SRS
  [r2#, a] |-> [r2#] {- DP (Top 3) (Input 1) -}
reason
  (a, 1/1)
  (r2#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(9,6)\Context\Mirror(14,6)\Deepee(18/14,10)\Weight(4/14,9)\EDG[(1/14,7)\Usable(1,2)\Weight(0,0)\EDG[],(2/14,7)\Matrix{\ArcticBZ}{3}\EDG(1/14,7)\Matrix{\Arctic}{3}(0/14,6)\EDG[],(1/14,7)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4031, clauses: 14394
last 4031 length 14394
CNF 4031 vars 14394 clauses

Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.975409011000
  min duration 0.497800511000
  total durat. 1.473209522000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.669190674000
  min duration 0.612602252000
  total durat. 1.281792926000
**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = True}" , input_size = Size { num_rules = 9 , num_strict_rules = 9 , num_top_rules
F            = 0 , num_weak_rules = 0 , alphabet_size = 6 , total_length = 43} , self
F            = 53 , parent = Nothing , duration = 0.240994240000 , status = Fail , start
F            = 2025-09-03 13:27:33.861048929 UTC , finish = 2025-09-03 13:27:34.102043169
F            UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F            
| S          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S          = Size { num_rules = 850 , num_strict_rules = 627 , num_top_rules = 627
| S          , num_weak_rules = 223 , alphabet_size = 56 , total_length = 5000} , self
| S          = 51 , parent = Nothing , duration = 0.129711726000 , status = Success
| S          , start = 2025-09-03 13:27:33.925965506 UTC , finish = 2025-09-03 13:27:34.055677232
| S          UTC , thread_cap_info = ("ThreadId 72", 0, False)}
| S          
| | S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S        = Size { num_rules = 850 , num_strict_rules = 627 , num_top_rules = 627
| | S        , num_weak_rules = 223 , alphabet_size = 56 , total_length = 5032} , self
| | S        = 56 , parent = Nothing , duration = 0.176872944000 , status = Success
| | S        , start = 2025-09-03 13:27:33.953367802 UTC , finish = 2025-09-03 13:27:34.130240746
| | S        UTC , thread_cap_info = ("ThreadId 74", 0, False)}
| | S        
| S |        
| S |        Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| S |        verbose = False}" , input_size = Size { num_rules = 334 , num_strict_rules
| S |        = 111 , num_top_rules = 111 , num_weak_rules = 223 , alphabet_size = 55
| S |        , total_length = 2200} , self = 58 , parent = Nothing , duration = 0.108239928000
| S |        , status = Success , start = 2025-09-03 13:27:34.06327365 UTC , finish
| S |        = 2025-09-03 13:27:34.171513578 UTC , thread_cap_info = ("ThreadId 66",
| S |        0, False)}
| S |        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 16 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 14 ,
| | | F      alphabet_size = 7 , total_length = 74} , self = 67 , parent = Nothing ,
| | | F      duration = 0.612602252000 , status = Fail , start = 2025-09-03 13:27:34.078857836
| | | F      UTC , finish = 2025-09-03 13:27:34.691460088 UTC , thread_cap_info = ("ThreadId
| | | F      95", 2, False)}
| | | F      
F | | |      
F | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |      Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4031, clauses: 14394, status: Satisfied, time: 0.117047201s
= 16 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 14 ,
F | | |      alphabet_size = 7 , total_length = 73} , self = 68 , parent = Nothing ,
F | | |      duration = 0.669190674000 , status = Fail , start = 2025-09-03 13:27:34.121358887
F | | |      UTC , finish = 2025-09-03 13:27:34.790549561 UTC , thread_cap_info = ("ThreadId
F | | |      99", 2, False)}
F | | |      
| | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 16
| | | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 14 , alphabet_size
| | | | S    = 7 , total_length = 73} , self = 65 , parent = Nothing , duration = 0.497800511000
| | | | S    , status = Success , start = 2025-09-03 13:27:34.123828005 UTC , finish
| | | | S    = 2025-09-03 13:27:34.621628516 UTC , thread_cap_info = ("ThreadId 100",
| | | | S    2, False)}
| | | | S    
| | S | |    
| | S | |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S | |    verbose = False}" , input_size = Size { num_rules = 334 , num_strict_rules
| | S | |    = 111 , num_top_rules = 111 , num_weak_rules = 223 , alphabet_size = 55
| | S | |    , total_length = 2228} , self = 61 , parent = Nothing , duration = 0.195394135000
| | S | |    , status = Success , start = 2025-09-03 13:27:34.144072365 UTC , finish
| | S | |    = 2025-09-03 13:27:34.3394665 UTC , thread_cap_info = ("ThreadId 68", 0,
| | S | |    False)}
| | S | |    
| | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 16
| | | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 14 , alphabet_size
| | | | | S  = 7 , total_length = 74} , self = 73 , parent = Nothing , duration = 0.975409011000
| | | | | S  , status = Success , start = 2025-09-03 13:27:34.147980042 UTC , finish
| | | | | S  = 2025-09-03 13:27:35.123389053 UTC , thread_cap_info = ("ThreadId 101",
| | | | | S  1, False)}
| | | | | S  
| S | | | |  
|   S | | |  
|     | S |  
|     F   |  
| E       |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E       |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E       |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 16
| E       |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 14 , alphabet_size
| E       |  = 7 , total_length = 74} , self = 77 , parent = Nothing , duration = 0.524547459000
| E       |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:27:34.74358714
| E       |  UTC , finish = 2025-09-03 13:27:35.268134599 UTC , thread_cap_info = ("ThreadId
| E       |  116", 1, False)}
| E       |  
F |       |  
F |       |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |       |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |       |  = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
F |       |  = 1 , num_top_rules = 1 , num_weak_rules = 14 , alphabet_size = 7 , total_length
F |       |  = 69} , self = 76 , parent = Nothing , duration = 0.109254488000 , status
F |       |  = Fail , start = 2025-09-03 13:27:35.059651364 UTC , finish = 2025-09-03
F |       |  13:27:35.168905852 UTC , thread_cap_info = ("ThreadId 122", 2, False)}
F |       |  
| |       S  
F |          
S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |          = 15 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 14 ,
S |          alphabet_size = 7 , total_length = 69} , self = 81 , parent = Nothing ,
S |          duration = 0.363760210000 , status = Success , start = 2025-09-03 13:27:35.184647649
S |          UTC , finish = 2025-09-03 13:27:35.548407859 UTC , thread_cap_info = ("ThreadId
S |          127", 2, False)}
S |          
| | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
| | E        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 14 , alphabet_size
| | E        = 7 , total_length = 69} , self = 84 , parent = Nothing , duration = 0.458668079000
| | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:27:35.264617147
| | E        UTC , finish = 2025-09-03 13:27:35.723285226 UTC , thread_cap_info = ("ThreadId
| | E        128", 2, False)}
| | E        
| E |        
S   |        
F   |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   |        = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
F   |        = 1 , num_top_rules = 1 , num_weak_rules = 14 , alphabet_size = 7 , total_length
F   |        = 69} , self = 89 , parent = Nothing , duration = 0.279989507000 , status
F   |        = Fail , start = 2025-09-03 13:27:35.623319299 UTC , finish = 2025-09-03
F   |        13:27:35.903308806 UTC , thread_cap_info = ("ThreadId 134", 2, False)}
F   |        
| F |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| F |        = 1 , num_top_rules = 1 , num_weak_rules = 14 , alphabet_size = 7 , total_length
| F |        = 69} , self = 90 , parent = Nothing , duration = 0.287683062000 , status
| F |        = Fail , start = 2025-09-03 13:27:35.640109372 UTC , finish = 2025-09-03
| F |        13:27:35.927792434 UTC , thread_cap_info = ("ThreadId 135", 2, False)}
| F |        
| | E        
F |          
  F          
