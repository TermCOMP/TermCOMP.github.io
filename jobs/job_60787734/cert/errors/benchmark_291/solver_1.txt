last 2718 length 11940
CNF 2718 vars 11940 clauses
last 666 length 2816
last 2872 length 13246
CNF 2872 vars 13246 clauses
last 935 length 4050
last 763 length 3353
CNF 763 vars 3353 clauses
last 782 length 3268
CNF 666 vars 2816 clauses
CNF 935 vars 4050 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 6007
CNF 782 vars 3268 clauses
last 4076 length 20050
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25713
last 3798 length 17494
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2270, clauses: 8298
last 4034 length 17926
last 1654 length 6007
CNF 4076 vars 20050 clauses
last 4982 length 23026
last 6145 length 25713
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7982, clauses: 33435
last 2270 length 8298
CNF 3798 vars 17494 clauses
CNF 4034 vars 17926 clauses
CNF 1654 vars 6007 clauses
CNF 4982 vars 23026 clauses
CNF 6145 vars 25713 clauses
last 7982 length 33435
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4671, clauses: 17222
CNF 2270 vars 8298 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1654, clauses: 6007, status: Unsatisfied, time: 0.362741145s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5505, clauses: 20858
last 4671 length 17222
CNF 7982 vars 33435 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2270, clauses: 8298, status: Unsatisfied, time: 0.427133945s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19447, clauses: 81999
last 5505 length 20858
CNF 4671 vars 17222 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3678, clauses: 15208
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21036, clauses: 88805
last 19447 length 81999
last 3678 length 15208
CNF 5505 vars 20858 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4788, clauses: 19825
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6145, clauses: 25713, status: Unsatisfied, time: 0.695122625s
last 21036 length 88805
last 4788 length 19825
CNF 3678 vars 15208 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 10452
CNF 19447 vars 81999 clauses
CNF 4788 vars 19825 clauses
CNF 21036 vars 88805 clauses
last 2741 length 10452
CNF 2741 vars 10452 clauses
[Info] pool sizes (success) 150220 seen 87315 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       looping derivation
from
  [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]
to
  [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]
via 80 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [0, 0, 0, 0] -> [0, 1, 1, 1] {- Input 0 -}
  [1, 0, 0, 1] -> [0, 0, 1, 0] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1], via = [(Step   { rule = 1, position = 4}, [0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 6}, [0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 8}, [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 5}, [0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 2}, [0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 4}, [0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 0}, [0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 5}, [0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 5}, [0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 8}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 17}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0]), (Step   { rule = 0, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]), (Step   { rule = 1, position = 16}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]), (Step   { rule = 0, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0]), (Step   { rule = 0, position = 17}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1]), (Step   { rule = 0, position = 13}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 6}, [0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 8}, [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 0, position = 4}, [0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 7}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1]), (Step   { rule = 0, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1]), (Step   { rule = 1, position = 16}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1]), (Step   { rule = 0, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1]), (Step   { rule = 0, position = 8}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1]), (Step   { rule = 1, position = 15}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1]), (Step   { rule = 0, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 9}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 0, position = 7}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1]), (Step   { rule = 1, position = 14}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1]), (Step   { rule = 1, position = 12}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1]), (Step   { rule = 0, position = 15}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1]), (Step   { rule = 1, position = 11}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1]), (Step   { rule = 1, position = 13}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 10}, [0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 2}, [0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 1}, [0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 3}, [0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 1, position = 5}, [0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]), (Step   { rule = 0, position = 1}, [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1])], to = [0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1]}

**************************************************
skeleton: (2,2)\Loop{80}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 10452, status: Unsatisfied, time: 0.506181655s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.428732094000
  min duration 0.070892917000
  total durat. 1.201753276000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.470420236000
  min duration 0.049298812000
  total durat. 1.203982250000
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.288563091000
  min duration 1.288563091000
  total durat. 1.288563091000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 2
      , alphabet_size = 3
      , total_length = 24}
    , self = 69
    , parent = Nothing
    , duration = 1.288563091000
    , status = Fail
    , start = 2025-09-03 11:22:59.415993993 UTC
    , finish = 2025-09-03 11:23:00.704557084 UTC
    , thread_cap_info = ("ThreadId 110", 0, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.779927250000
  min duration 0.766226449000
  total durat. 1.546153699000
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 2.174355314000
  min duration 2.174355314000
  total durat. 2.174355314000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 2
      , num_strict_rules = 2
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 16}
    , self = 70
    , parent = Nothing
    , duration = 2.174355314000
    , status = Success
    , start = 2025-09-03 11:22:59.22056456 UTC
    , finish = 2025-09-03 11:23:01.394919874 UTC
    , thread_cap_info = ("ThreadId 71", 0, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 16} , self
F                  = 52 , parent = Nothing , duration = 0.127849943000 , status = Fail , start
F                  = 2025-09-03 11:22:59.197409083 UTC , finish = 2025-09-03 11:22:59.325259026
F                  UTC , thread_cap_info = ("ThreadId 38", 0, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F                = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                = 80} , self = 55 , parent = Nothing , duration = 0.147514067000 , status
| F                = Fail , start = 2025-09-03 11:22:59.198280258 UTC , finish = 2025-09-03
| F                11:22:59.345794325 UTC , thread_cap_info = ("ThreadId 57", 2, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F              = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F              = 80} , self = 57 , parent = Nothing , duration = 0.186641591000 , status
| | F              = Fail , start = 2025-09-03 11:22:59.198285631 UTC , finish = 2025-09-03
| | F              11:22:59.384927222 UTC , thread_cap_info = ("ThreadId 59", 2, False)}
| | F              
| | | S            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | S            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | S            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | S            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | S            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | S            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | S            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | S            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | S            = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | S            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | S            = 16} , self = 70 , parent = Nothing , duration = 2.174355314000 , status
| | | S            = Success , start = 2025-09-03 11:22:59.22056456 UTC , finish = 2025-09-03
| | | S            11:23:01.394919874 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| | | S            
F | | |            
F | | |            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |            = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F | | |            = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
F | | |            = 100} , self = 64 , parent = Nothing , duration = 0.428732094000 , status
F | | |            = Fail , start = 2025-09-03 11:22:59.325570762 UTC , finish = 2025-09-03
F | | |            11:22:59.754302856 UTC , thread_cap_info = ("ThreadId 94", 1, False)}
F | | |            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F          = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | F          = 100} , self = 63 , parent = Nothing , duration = 0.357248802000 , status
| | | | F          = Fail , start = 2025-09-03 11:22:59.345080227 UTC , finish = 2025-09-03
| | | | F          11:22:59.702329029 UTC , thread_cap_info = ("ThreadId 96", 1, False)}
| | | | F          
| F | | |          
| F | | |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | |          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F | | |          = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F | | |          = 32} , self = 62 , parent = Nothing , duration = 0.215298894000 , status
| F | | |          = Fail , start = 2025-09-03 11:22:59.35194856 UTC , finish = 2025-09-03
| F | | |          11:22:59.567247454 UTC , thread_cap_info = ("ThreadId 99", 0, False)}
| F | | |          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | F        = 32} , self = 61 , parent = Nothing , duration = 0.140372809000 , status
| | | | | F        = Fail , start = 2025-09-03 11:22:59.366992897 UTC , finish = 2025-09-03
| | | | | F        11:22:59.507365706 UTC , thread_cap_info = ("ThreadId 100", 0, False)}
| | | | | F        
| | F | | |        
| | F | | |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F | | |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F | | |        = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | F | | |        = 3 , total_length = 24} , self = 67 , parent = Nothing , duration = 0.766226449000
| | F | | |        , status = Fail , start = 2025-09-03 11:22:59.402014963 UTC , finish =
| | F | | |        2025-09-03 11:23:00.168241412 UTC , thread_cap_info = ("ThreadId 107",
| | F | | |        0, False)}
| | F | | |        
| | | | | | F      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | F      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | F      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | F      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | | | F      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | | | F      = 3 , total_length = 24} , self = 69 , parent = Nothing , duration = 1.288563091000
| | | | | | F      , status = Fail , start = 2025-09-03 11:22:59.415993993 UTC , finish =
| | | | | | F      2025-09-03 11:23:00.704557084 UTC , thread_cap_info = ("ThreadId 110",
| | | | | | F      0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | F    = 120} , self = 65 , parent = Nothing , duration = 0.339315304000 , status
| | | | | | | F    = Fail , start = 2025-09-03 11:22:59.4257668 UTC , finish = 2025-09-03
| | | | | | | F    11:22:59.765082104 UTC , thread_cap_info = ("ThreadId 111", 1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | | F  = 120} , self = 66 , parent = Nothing , duration = 0.470420236000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 11:22:59.464217167 UTC , finish = 2025-09-03
| | | | | | | | F  11:22:59.934637403 UTC , thread_cap_info = ("ThreadId 112", 1, False)}
| | | | | | | | F  
| | | | | F | | |  
| | | | | F | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F | | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | F | | |  = 4 , total_length = 32} , self = 68 , parent = Nothing , duration = 0.779927250000
| | | | | F | | |  , status = Fail , start = 2025-09-03 11:22:59.507393406 UTC , finish =
| | | | | F | | |  2025-09-03 11:23:00.287320656 UTC , thread_cap_info = ("ThreadId 113",
| | | | | F | | |  2, False)}
| | | | | F | | |  
| F | | | | | | |  
|   | | F | | | |  
F   | |   | | | |  
    | |   | | F |  
    | |   | |   F  
    F |   | |      
      |   F |      
      |     F      
      S            
