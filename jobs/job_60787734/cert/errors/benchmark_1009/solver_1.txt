last 1902 length 8635
last 1643 length 7311
last 1743 length 7758
CNF 1643 vars 7311 clauses
CNF 1902 vars 8635 clauses
CNF 1743 vars 7758 clauses
last 1933 length 8575
CNF 1933 vars 8575 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2381, clauses: 9066
last 2381 length 9066
CNF 2381 vars 9066 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2699, clauses: 10266
last 2699 length 10266
CNF 2699 vars 10266 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2381, clauses: 9066, status: Unsatisfied, time: 0.157224104s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8892, clauses: 37403
last 8892 length 37403
CNF 8892 vars 37403 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8892, clauses: 37403, status: Satisfied, time: 0.065273411s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9819, clauses: 41360
last 9819 length 41360
CNF 9819 vars 41360 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2699, clauses: 10266, status: Unsatisfied, time: 0.232617168s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5321, clauses: 23019
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5917, clauses: 25698
last 5917 length 25698
CNF 5917 vars 25698 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 12 strict rules and 3 weak rules on 5 letters       weights
SRS with 3 strict rules and 3 weak rules on 5 letters       EDG
SRS with 1 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, b, b, b, a, a] -> [a, a, c, c, a, a, b, b] {- Input 0 -}
  [a, a, c, c] -> [c, c, c, c, a, a] {- Input 1 -}
  [c, c, c, c, c, c] -> [b, b, c, c, b, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, b, b, b, b, a, a] -> [b, b, a, a, c, c, a, a] {- Mirror (Input 0) -}
  [c, c, a, a] -> [a, a, c, c, c, c] {- Mirror (Input 1) -}
  [c, c, c, c, c, c] -> [b, b, c, c, b, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, b, b, b, a, a] ->= [ b , b , a , a , c , c , a , a ] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, a, a] ->= [a, a, c, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, c, c, c, c] ->= [b, b, c, c, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, b, b, b, b, a, a] |-> [ a# , a , c , c , a , a ] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, a, b, b, b, b, a, a] |-> [ a# , c , c , a , a ] {- DP (Top 3) (Mirror (Input 0)) -}
  [a#, a, b, b, b, b, a, a] |-> [c#, a, a] {- DP (Top 5) (Mirror (Input 0)) -}
  [a#, a, b, b, b, b, a, a] |-> [c#, c, a, a] {- DP (Top 4) (Mirror (Input 0)) -}
  [c#, c, a, a] |-> [a#, a, c, c, c, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, c, a, a] |-> [a#, c, c, c, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c, a, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, c, a, a] |-> [c#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, c, a, a] |-> [c#, c, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, c, a, a] |-> [c#, c, c, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, c, c, c, c, c] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 2)) -}
  [c#, c, c, c, c, c] |-> [c#, c, b, b] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, b, b, b, b, a, a] ->= [ b , b , a , a , c , c , a , a ] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, a, a] ->= [a, a, c, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, c, c, c, c] ->= [b, b, c, c, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, b, b, b, b, a, a] |-> [ a# , a , c , c , a , a ] {- DP (Top 2) (Mirror (Input 0)) -}
  [c#, c, c, c, c, c] |-> [c#, b, b] {- DP (Top 3) (Mirror (Input 2)) -}
  [c#, c, c, c, c, c] |-> [c#, c, b, b] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, b, b, b, a, a] |-> [ a# , a , c , c , a , a ] {- DP (Top 2) (Mirror (Input 0)) -}
  [a, a, b, b, b, b, a, a] ->= [ b , b , a , a , c , c , a , a ] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, a, a] ->= [a, a, c, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, c, c, c, c] ->= [b, b, c, c, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A -  -  \
        | -  0A 0A |
        \ -  -  0A / )
  ( b
  , Wk  / 0A 2A -  \
        | -  -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / - -2A 1A \
        | - 0A  -  |
        \ - -   0A / )
  ( a#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a, a, b, b, b, b, a, a] ->= [ b , b , a , a , c , c , a , a ] {- DP Nontop (Mirror (Input 0)) -}
  [c, c, a, a] ->= [a, a, c, c, c, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, c, c, c, c, c] ->= [b, b, c, c, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(12/3,5)\Weight(3/3,5)\EDG(1/3,4)\Matrix{\ArcticBZ}{3}(0/3,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 38} , self
F          = 44 , parent = Nothing , duration = 0.231141612000 , status = Fail , start
F          = 2025-09-03 10:46:40.943504753 UTC , finish = 2025-09-03 10:46:41.174646365
F          UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| F        = 52} , self = 39 , parent = Nothing , duration = 0.139195005000 , status
| F        = Fail , start = 2025-09-03 10:46:40.945047638 UTC , finish = 2025-09-03
| F        10:46:41.084242643 UTC , thread_cap_info = ("ThreadId 58", 3, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | F      = 52} , self = 41 , parent = Nothing , duration = 0.158628097000 , status
| | F      = Fail , start = 2025-09-03 10:46:40.945050689 UTC , finish = 2025-09-03
| | F      10:46:41.103678786 UTC , thread_cap_info = ("ThreadId 59", 3, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | F    = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | F    = 60} , self = 45 , parent = Nothing , duration = 0.137671196000 , status
| | | F    = Fail , start = 2025-09-03 10:46:41.03699168 UTC , finish = 2025-09-03
| | | F    10:46:41.174662876 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | | F    
| F | |    
|   F |    
| F   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F   |    = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| F   |    = 4 , total_length = 52} , self = 47 , parent = Nothing , duration = 0.225777480000
| F   |    , status = Fail , start = 2025-09-03 10:46:41.103707392 UTC , finish =
| F   |    2025-09-03 10:46:41.329484872 UTC , thread_cap_info = ("ThreadId 84", 3,
| F   |    False)}
| F   |    
| | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |    = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | F |    = 4 , total_length = 60} , self = 62 , parent = Nothing , duration = 0.400918535000
| | F |    , status = Fail , start = 2025-09-03 10:46:41.103712915 UTC , finish =
| | F |    2025-09-03 10:46:41.50463145 UTC , thread_cap_info = ("ThreadId 85", 3,
| | F |    False)}
| | F |    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | S  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | S  = 4 , total_length = 52} , self = 57 , parent = Nothing , duration = 0.308637468000
| | | | S  , status = Success , start = 2025-09-03 10:46:41.104149944 UTC , finish
| | | | S  = 2025-09-03 10:46:41.412787412 UTC , thread_cap_info = ("ThreadId 86",
| | | | S  3, False)}
| | | | S  
F | | | |  
  | | F |  
  F |   |  
E   |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E   |   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E   |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E   |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E   |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E   |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E   |   |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
E   |   |  = 4 , total_length = 52} , self = 64 , parent = Nothing , duration = 0.180382536000
E   |   |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:46:41.344446223
E   |   |  UTC , finish = 2025-09-03 10:46:41.524828759 UTC , thread_cap_info = ("ThreadId
E   |   |  99", 3, False)}
E   |   |  
|   |   S  
|   F      
E          
