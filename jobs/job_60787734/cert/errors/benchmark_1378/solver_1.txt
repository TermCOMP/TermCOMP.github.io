last 442 length 1772
CNF 442 vars 1772 clauses
last 474 length 1868
CNF 474 vars 1868 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2069, clauses: 7401
last 2069 length 7401
last 572 length 2278
CNF 572 vars 2278 clauses
CNF 2069 vars 7401 clauses
last 572 length 2345
CNF 572 vars 2345 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2069, clauses: 7401, status: Satisfied, time: 0.042728462s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 27675
last 412 length 1650
last 404 length 1600
CNF 412 vars 1650 clauses
CNF 404 vars 1600 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6576
last 1856 length 6576
CNF 1856 vars 6576 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8916
last 3877 length 17551
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1856, clauses: 6576, status: Unsatisfied, time: 0.049205657s
last 2477 length 8916
last 4535 length 22634
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6334, clauses: 26255
CNF 3877 vars 17551 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7091, clauses: 29327
last 9577 length 46559
last 7137 length 29232
last 9473 length 38663
last 11460 length 50239
CNF 2477 vars 8916 clauses
last 6334 length 26255
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3888, clauses: 15518
CNF 4535 vars 22634 clauses
last 7091 length 29327
CNF 9577 vars 46559 clauses
CNF 7137 vars 29232 clauses
CNF 9473 vars 38663 clauses
CNF 11460 vars 50239 clauses
last 3888 length 15518
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 8916, status: Satisfied, time: 0.329044718s
CNF 6334 vars 26255 clauses
CNF 7091 vars 29327 clauses
CNF 3888 vars 15518 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6334, clauses: 26255, status: Satisfied, time: 0.204292925s
last 495 length 1975
last 555 length 2278
CNF 555 vars 2278 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [b, b] {- Input 1 -}
  [c, b] -> [a, c, c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [] {- Mirror (Input 0) -}
  [c, a] -> [b, b] {- Mirror (Input 1) -}
  [b, c] -> [a, c, c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Mirror (Input 0) -}
  [b, b, a] -> [b] {- Mirror (Input 0) -}
  [c, b, a] -> [c] {- Mirror (Input 0) -}
  [c, a] -> [b, b] {- Mirror (Input 1) -}
  [b, c] -> [a, c, c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, a] -> [a] {- Input 0 -}
  [a, b, b] -> [b] {- Input 0 -}
  [a, b, c] -> [c] {- Input 0 -}
  [a, c] -> [b, b] {- Input 1 -}
  [c, b] -> [a, c, c, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
  [c#, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [c#, b] |-> [a#, c, c, a] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -2A 0A 0A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / -1A 1A  1A  \
        | 0A  -1A -2A |
        \ -   -   0A  / )
  ( c
  , Wk  / 0A -1A 0A \
        | 1A 0A  1A |
        \ -  -   0A / )
  ( c#
  , Wk  / 1A 0A 1A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [a, b, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, c] ->= [b, b] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c, c, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}\EDG(1/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.612362647000
  min duration 0.012521618000
  total durat. 1.616318318000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.573388351000
  min duration 0.008782423000
  total durat. 1.532297425000
**************************************************
F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                    = False\n , verbose = False}" , input_size = Size { num_rules = 79 , num_strict_rules
F                    = 52 , num_top_rules = 52 , num_weak_rules = 27 , alphabet_size = 15 ,
F                    total_length = 460} , self = 76 , parent = Nothing , duration = 0.612362647000
F                    , status = Fail , start = 2025-09-03 11:44:15.749142624 UTC , finish =
F                    2025-09-03 11:44:16.361505271 UTC , thread_cap_info = ("ThreadId 81", 0,
F                    False)}
F                    
| F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                  = False\n , verbose = False}" , input_size = Size { num_rules = 79 , num_strict_rules
| F                  = 52 , num_top_rules = 52 , num_weak_rules = 27 , alphabet_size = 15 ,
| F                  total_length = 460} , self = 72 , parent = Nothing , duration = 0.573388351000
| F                  , status = Fail , start = 2025-09-03 11:44:15.758721823 UTC , finish =
| F                  2025-09-03 11:44:16.332110174 UTC , thread_cap_info = ("ThreadId 82", 0,
| F                  False)}
| F                  
| | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F                = 162} , self = 69 , parent = Nothing , duration = 0.471124931000 , status
| | F                = Fail , start = 2025-09-03 11:44:15.7787191 UTC , finish = 2025-09-03
| | F                11:44:16.249844031 UTC , thread_cap_info = ("ThreadId 91", 3, False)}
| | F                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F              = 162} , self = 70 , parent = Nothing , duration = 0.463406991000 , status
| | | F              = Fail , start = 2025-09-03 11:44:15.804356784 UTC , finish = 2025-09-03
| | | F              11:44:16.267763775 UTC , thread_cap_info = ("ThreadId 93", 3, False)}
| | | F              
| | | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S            = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | S            = 5 , total_length = 38} , self = 74 , parent = Nothing , duration = 0.537204901000
| | | | S            , status = Success , start = 2025-09-03 11:44:15.804597593 UTC , finish
| | | | S            = 2025-09-03 11:44:16.341802494 UTC , thread_cap_info = ("ThreadId 99",
| | | | S            1, False)}
| | | | S            
| | | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F          = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | F          = 4 , total_length = 27} , self = 68 , parent = Nothing , duration = 0.336808584000
| | | | | F          , status = Fail , start = 2025-09-03 11:44:15.841911939 UTC , finish =
| | | | | F          2025-09-03 11:44:16.178720523 UTC , thread_cap_info = ("ThreadId 113",
| | | | | F          2, False)}
| | | | | F          
| | | | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | E        , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | E        = 5 , total_length = 38} , self = 79 , parent = Nothing , duration = 0.580434221000
| | | | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 11:44:15.866660467
| | | | | | E        UTC , finish = 2025-09-03 11:44:16.447094688 UTC , thread_cap_info = ("ThreadId
| | | | | | E        108", 1, False)}
| | | | | | E        
| | | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 79 , num_strict_rules
| | | | | | | F      = 52 , num_top_rules = 52 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | F      total_length = 442} , self = 73 , parent = Nothing , duration = 0.474765999000
| | | | | | | F      , status = Fail , start = 2025-09-03 11:44:15.86668466 UTC , finish = 2025-09-03
| | | | | | | F      11:44:16.341450659 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
| | | | | | | F      
| | | | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | | S    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | | | | S    = 4 , total_length = 27} , self = 77 , parent = Nothing , duration = 0.558095560000
| | | | | | | | S    , status = Success , start = 2025-09-03 11:44:15.871966683 UTC , finish
| | | | | | | | S    = 2025-09-03 11:44:16.430062243 UTC , thread_cap_info = ("ThreadId 114",
| | | | | | | | S    2, False)}
| | | | | | | | S    
| | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 79 , num_strict_rules
| | | | | | | | | F  = 52 , num_top_rules = 52 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | | F  total_length = 442} , self = 71 , parent = Nothing , duration = 0.450953687000
| | | | | | | | | F  , status = Fail , start = 2025-09-03 11:44:15.87872547 UTC , finish = 2025-09-03
| | | | | | | | | F  11:44:16.329679157 UTC , thread_cap_info = ("ThreadId 110", 0, False)}
| | | | | | | | | F  
| | | | | F | | | |  
| | | | | E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | | E | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | E | | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | E | | | |  = 4 , total_length = 27} , self = 83 , parent = Nothing , duration = 0.423157891000
| | | | | E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:44:16.199082507
| | | | | E | | | |  UTC , finish = 2025-09-03 11:44:16.622240398 UTC , thread_cap_info = ("ThreadId
| | | | | E | | | |  122", 2, False)}
| | | | | E | | | |  
| | F | | | | | | |  
| |   F | | | | | |  
| |     | | | | | F  
| F     | | | | |    
|       | | | F |    
|       S | |   |    
F         | |   |    
          | |   S    
          | E        
          E          
CNF 495 vars 1975 clauses
