last 1797 length 9160
CNF 1797 vars 9160 clauses
last 4870 length 28714
CNF 4870 vars 28714 clauses
last 1545 length 8487
last 5642 length 42639
CNF 5642 vars 42639 clauses
CNF 1545 vars 8487 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1504, clauses: 5533
last 1504 length 5533
last 1559 length 7822
CNF 1504 vars 5533 clauses
last 2969 length 16504
CNF 1559 vars 7822 clauses
CNF 2969 vars 16504 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5518, clauses: 23138
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1504, clauses: 5533, status: Satisfied, time: 0.127125421s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1702, clauses: 6454
last 6746 length 39180
last 6681 length 47730
last 7730 length 41938
**************************************************last 1702 length 6454

CNF 6681 vars 47730 clauses
CNF 6746 vars 39180 clauses
CNF 1702 vars 6454 clauses
CNF 7730 vars 41938 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6149, clauses: 25773
summary
**************************************************
SRS with 1 rules on 2 letters       DP
SRS with 4 strict rules and 1 weak rules on 3 letters       EDG
SRS with 1 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, b, a, b, a] -> [a, b, a, a, b, b, a, b, b, a] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, b, a, b, a] ->= [ a , b , a , a , b , b , a , b , b , a ] {- DP Nontop (Input 0) -}
  [b#, a, b, b, a, b, a] |-> [ b# , a , a , b , b , a , b , b , a ] {- DP (Top 1) (Input 0) -}
  [b#, a, b, b, a, b, a] |-> [b#, a, b, b, a] {- DP (Top 5) (Input 0) -}
  [b#, a, b, b, a, b, a] |-> [b#, b, a] {- DP (Top 7) (Input 0) -}
  [b#, a, b, b, a, b, a] |-> [b#, b, a, b, b, a] {- DP (Top 4) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
last 6149 length 25773
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1702, clauses: 6454, status: Satisfied, time: 0.1126353s
  [b#, a, b, b, a, b, a] |-> [b#, a, b, b, a] {- DP (Top 5) (Input 0) -}
  [b, a, b, b, a, b, a] ->= [ a , b , a , a , b , b , a , b , b , a ] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, a, b, b, a, b, a] ->= [ a , b , a , a , b , b , a , b , b , a ] {- DP Nontop (Input 0) -}
reason
  EDG

**************************************************
skeleton: (1,2)\Deepee(4/1,3)\EDG(1/1,3)\Matrix{\Arctic}{3}(0/1,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 17} , self
F              = 51 , parent = Nothing , duration = 0.243899209000 , status = Fail , start
F              = 2025-09-03 13:11:45.831069306 UTC , finish = 2025-09-03 13:11:46.074968515
F              UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F            = 76} , self = 57 , parent = Nothing , duration = 0.295046076000 , status
| F            = Fail , start = 2025-09-03 13:11:45.832119336 UTC , finish = 2025-09-03
| F            13:11:46.127165412 UTC , thread_cap_info = ("ThreadId 57", 0, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          CNF 6149 vars 25773 clauses
[Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F          = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F          = 76} , self = 58 , parent = Nothing , duration = 0.325098973000 , status
| | F          = Fail , start = 2025-09-03 13:11:45.832121572 UTC , finish = 2025-09-03
| | F          13:11:46.157220545 UTC , thread_cap_info = ("ThreadId 59", 0, False)}
| | F          
| | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | E        = 17} , self = 68 , parent = Nothing , duration = 0.791837104000 , status
| | | E        = Except "AsyncCancelled" , start = 2025-09-03 13:11:45.832943307 UTC ,
| | | E        finish = 2025-09-03 13:11:46.624780411 UTC , thread_cap_info = ("ThreadId
| | | E        61", 1, False)}
| | | E        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | F      = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F      = 29} , self = 59 , parent = Nothing , duration = 0.163110494000 , status
| | | | F      = Fail , start = 2025-09-03 13:11:46.003483863 UTC , finish = 2025-09-03
| | | | F      13:11:46.166594357 UTC , thread_cap_info = ("ThreadId 89", 3, False)}
| | | | F      
F | | | |      
F | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
F | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F | | | |      = 35} , self = 61 , parent = Nothing , duration = 0.276138785000 , status
F | | | |      = Fail , start = 2025-09-03 13:11:46.088766674 UTC , finish = 2025-09-03
F | | | |      13:11:46.364905459 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
F | | | |      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F    = 35} , self = 62 , parent = Nothing , duration = 0.456590695000 , status
| | | | | F    = Fail , start = 2025-09-03 13:11:46.088771784 UTC , finish = 2025-09-03
| | | | | F    13:11:46.545362479 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | | F    
| | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S  = 2 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| | | | | | S  = 3 , total_length = 29} , self = 63 , parent = Nothing , duration = 0.476664550000
| | | | | | S  , status = Success , start = 2025-09-03 13:11:46.106846129 UTC , finish
| | | | | | S  = 2025-09-03 13:11:46.583510679 UTC , thread_cap_info = ("ThreadId 102",
| | | | | | S  3, False)}
| | | | | | S  
| F | | | | |  
|   F | | | |  
|     | F | |  
| E   |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 2
| E   |   | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| E   |   | |  = 3 , total_length = 29} , self = 65 , parent = Nothing , duration = 0.399903641000
| E   |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:11:46.183722083
| E   |   | |  UTC , finish = 2025-09-03 13:11:46.583625724 UTC , thread_cap_info = ("ThreadId
| E   |   | |  109", 3, False)}
| E   |   | |  
F |   |   | |  
  |   |   F |  
  |   |     S  
  E   |        
      E        
