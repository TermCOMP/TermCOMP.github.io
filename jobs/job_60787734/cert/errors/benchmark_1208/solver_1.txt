last 541 length 2205
last 557 length 2231
CNF 541 vars 2205 clauses
last 442 length 1779
CNF 557 vars 2231 clauses
last 481 length 1896
CNF 442 vars 1779 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2670, clauses: 9620
CNF 481 vars 1896 clauses
last 2670 length 9620
last 4017 length 19510
last 3759 length 16858
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8412
CNF 2670 vars 9620 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7425, clauses: 30695
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6503, clauses: 26801
CNF 3759 vars 16858 clauses
CNF 4017 vars 19510 clauses
last 2354 length 8412
last 7425 length 30695
last 6503 length 26801
CNF 2354 vars 8412 clauses
CNF 7425 vars 30695 clauses
CNF 6503 vars 26801 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2670, clauses: 9620, status: Unsatisfied, time: 0.226103057s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2354, clauses: 8412, status: Unsatisfied, time: 0.14405154s
last 7021 length 30046
CNF 7021 vars 30046 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4695, clauses: 18503
last 4695 length 18503
CNF 4695 vars 18503 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16141
last 4110 length 16141
CNF 4110 vars 16141 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6503, clauses: 26801, status: Unsatisfied, time: 0.452342617s
last 9213 length 38782
CNF 9213 vars 38782 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3826, clauses: 14632
last 3826 length 14632
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16141, status: Unsatisfied, time: 0.365913233s
CNF 3826 vars 14632 clauses
[Info] pool sizes (success) 30960 seen 13204 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 10596 length 49136
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [a, b, c, b, c]
to
  [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b]
via 47 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, a, c] {- Input 1 -}
  [c, c] -> [b, b, b, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [a, b, c, b, c], via = [(Step   { rule = 1, position = 0}, [c, a, c, c, b, c]), (Step   { rule = 2, position = 2}, [c, a, b, b, b, a, b, c]), (Step   { rule = 1, position = 1}, [c, c, a, c, b, b, a, b, c]), (Step   { rule = 0, position = 2}, [c, c, c, b, b, a, b, c]), (Step   { rule = 2, position = 1}, [c, b, b, b, a, b, b, a, b, c]), (Step   { rule = 1, position = 4}, [c, b, b, b, c, a, c, b, a, b, c]), (Step   { rule = 0, position = 5}, [c, b, b, b, c, c, b, a, b, c]), (Step   { rule = 1, position = 7}, [c, b, b, b, c, c, b, c, a, c, c]), (Step   { rule = 2, position = 9}, [c, b, b, b, c, c, b, c, a, b, b, b, a]), (Step   { rule = 0, position = 12}, [c, b, b, b, c, c, b, c, a, b, b, b]), (Step   { rule = 1, position = 8}, [c, b, b, b, c, c, b, c, c, a, c, b, b]), (Step   { rule = 0, position = 9}, [c, b, b, b, c, c, b, c, c, c, b, b]), (Step   { rule = 2, position = 8}, [c, b, b, b, c, c, b, c, b, b, b, a, b, b]), (Step   { rule = 1, position = 11}, [c, b, b, b, c, c, b, c, b, b, b, c, a, c, b]), (Step   { rule = 0, position = 12}, [c, b, b, b, c, c, b, c, b, b, b, c, c, b]), (Step   { rule = 2, position = 4}, [c, b, b, b, b, b, b, a, b, c, b, b, b, c, c, b]), (Step   { rule = 1, position = 7}, [c, b, b, b, b, b, b, c, a, c, c, b, b, b, c, c, b]), (Step   { rule = 2, position = 9}, [c, b, b, b, b, b, b, c, a, b, b, b, a, b, b, b, c, c, b]), (Step   { rule = 1, position = 12}, [c, b, b, b, b, b, b, c, a, b, b, b, c, a, c, b, b, c, c, b]), (Step   { rule = 0, position = 13}, [c, b, b, b, b, b, b, c, a, b, b, b, c, c, b, b, c, c, b]), (Step   { rule = 1, position = 8}, [c, b, b, b, b, b, b, c, c, a, c, b, b, c, c, b, b, c, c, b]), (Step   { rule = 0, position = 9}, [c, b, b, b, b, b, b, c, c, c, b, b, c, c, b, b, c, c, b]), (Step   { rule = 2, position = 12}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, a, b, b, c, c, b]), (Step   { rule = 1, position = 15}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, c, a, c, b, c, c, b]), (Step   { rule = 0, position = 16}, [c, b, b, b, b, b, b, c, c, c, b, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 8}, [c, b, b, b, b, b, b, c, b, b, b, a, b, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 11}, [c, b, b, b, b, b, b, c, b, b, b, c, a, c, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 12}, [c, b, b, b, b, b, b, c, b, b, b, c, c, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 11}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 14}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, c, a, c, b, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 15}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, c, c, b, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 14}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, a, b, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 17}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, c, a, c, b, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 18}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, c, c, b, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 17}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, a, b, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 20}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, c, a, c, b, c, c, b, c, c, b]), (Step   { rule = 0, position = 21}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, c, c, b, c, c, b, c, c, b]), (Step   { rule = 2, position = 20}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, a, b, c, c, b, c, c, b]), (Step   { rule = 1, position = 23}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, c, c, c, b, c, c, b]), (Step   { rule = 2, position = 25}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, b, b, b, a, c, b, c, c, b]), (Step   { rule = 0, position = 28}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, a, b, b, b, c, b, c, c, b]), (Step   { rule = 1, position = 24}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, c, a, c, b, b, c, b, c, c, b]), (Step   { rule = 0, position = 25}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, c, c, b, b, c, b, c, c, b]), (Step   { rule = 2, position = 24}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, a, b, b, c, b, c, c, b]), (Step   { rule = 1, position = 27}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, c, a, c, b, c, b, c, c, b]), (Step   { rule = 0, position = 28}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, c, c, b, c, b, c, c, b]), (Step   { rule = 2, position = 27}, [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b])], to = [c, b, b, b, b, b, b, c, b, b, b, b, b, b, b, b, b, b, b, b, b, b, b, c, b, b, b, b, b, b, a, b, c, b, c, c, b]}

**************************************************
skeleton: (3,3)\Loop{47}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4695, clauses: 18503, status: Unsatisfied, time: 0.622357665s
CNF 10596 vars 49136 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.656135851000
  min duration 0.061066353000
  total durat. 1.035583893000
Success : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.104714482000
  min duration 1.104714482000
  total durat. 1.104714482000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 69
    , parent = Nothing
    , duration = 1.104714482000
    , status = Success
    , start = 2025-09-03 11:15:44.694720931 UTC
    , finish = 2025-09-03 11:15:45.799435413 UTC
    , thread_cap_info = ("ThreadId 80", 3, False)}
**************************************************
F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                = 162} , self = 61 , parent = Nothing , duration = 0.221912614000 , status
F                = Fail , start = 2025-09-03 11:15:44.679540257 UTC , finish = 2025-09-03
F                11:15:44.901452871 UTC , thread_cap_info = ("ThreadId 69", 0, False)}
F                
| F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 162} , self = 62 , parent = Nothing , duration = 0.226223558000 , status
| F              = Fail , start = 2025-09-03 11:15:44.681385831 UTC , finish = 2025-09-03
| F              11:15:44.907609389 UTC , thread_cap_info = ("ThreadId 71", 0, False)}
| F              
| | F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F            = 12} , self = 50 , parent = Nothing , duration = 0.145098698000 , status
| | F            = Fail , start = 2025-09-03 11:15:44.691358865 UTC , finish = 2025-09-03
| | F            11:15:44.836457563 UTC , thread_cap_info = ("ThreadId 73", 3, False)}
| | F            
| | | S          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | S          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | S          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | S          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | S          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | S          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | S          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | S          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | S          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | S          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | S          = 12} , self = 69 , parent = Nothing , duration = 1.104714482000 , status
| | | S          = Success , start = 2025-09-03 11:15:44.694720931 UTC , finish = 2025-09-03
| | | S          11:15:45.799435413 UTC , thread_cap_info = ("ThreadId 80", 3, False)}
| | | S          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | F        alphabet_size = 5 , total_length = 40} , self = 63 , parent = Nothing ,
| | | | F        duration = 0.263892086000 , status = Fail , start = 2025-09-03 11:15:44.698864158
| | | | F        UTC , finish = 2025-09-03 11:15:44.962756244 UTC , thread_cap_info = ("ThreadId
| | | | F        79", 2, False)}
| | | | F        
| | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F      = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | F      = 5 , total_length = 35} , self = 64 , parent = Nothing , duration = 0.268157638000
| | | | | F      , status = Fail , start = 2025-09-03 11:15:44.737390766 UTC , finish =
| | | | | F      2025-09-03 11:15:45.005548404 UTC , thread_cap_info = ("ThreadId 87", 2,
| | | | | F      False)}
| | | | | F      
| | | | | | F    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | F    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | F    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | F    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | F    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | F    = 5 , total_length = 35} , self = 66 , parent = Nothing , duration = 0.555932701000
| | | | | | F    , status = Fail , start = 2025-09-03 11:15:44.788485572 UTC , finish =
| | | | | | F    2025-09-03 11:15:45.344418273 UTC , thread_cap_info = ("ThreadId 94", 2,
| | | | | | F    False)}
| | | | | | F    
| | F | | | |    
| | F | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 76 , num_strict_rules
| | F | | | |    = 49 , num_top_rules = 49 , num_weak_rules = 27 , alphabet_size = 15 ,
| | F | | | |    total_length = 414} , self = 67 , parent = Nothing , duration = 0.656135851000
| | F | | | |    , status = Fail , start = 2025-09-03 11:15:44.865175462 UTC , finish =
| | F | | | |    2025-09-03 11:15:45.521311313 UTC , thread_cap_info = ("ThreadId 112",
| | F | | | |    2, False)}
| | F | | | |    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 76 , num_strict_rules
| | | | | | | F  = 49 , num_top_rules = 49 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | F  total_length = 414} , self = 65 , parent = Nothing , duration = 0.284375381000
| | | | | | | F  , status = Fail , start = 2025-09-03 11:15:44.889449686 UTC , finish =
| | | | | | | F  2025-09-03 11:15:45.173825067 UTC , thread_cap_info = ("ThreadId 113",
| | | | | | | F  2, False)}
| | | | | | | F  
F | | | | | | |  
  F | | | | | |  
    | | F | | |  
    | |   F | |  
F   | |     | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F   | |     | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F   | |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F   | |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F   | |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F   | |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
F   | |     | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
F   | |     | |  = 5 , total_length = 35} , self = 68 , parent = Nothing , duration = 0.619390517000
F   | |     | |  , status = Fail , start = 2025-09-03 11:15:45.082006704 UTC , finish =
F   | |     | |  2025-09-03 11:15:45.701397221 UTC , thread_cap_info = ("ThreadId 120",
F   | |     | |  2, False)}
F   | |     | |  
|   | |     | F  
|   | |     F    
|   F |          
F     |          
      S          
