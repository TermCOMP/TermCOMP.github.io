last 17864 length 82765
CNF 17864 vars 82765 clauses
last 17512 length 76935
CNF 17512 vars 76935 clauses
last 22015 length 102505
last 23963 length 106129
CNF 22015 vars 102505 clauses
CNF 23963 vars 106129 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28808, clauses: 111099
last 28808 length 111099
CNF 28808 vars 111099 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28808, clauses: 111099, status: Satisfied, time: 0.394120827s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 34237, clauses: 134950
last 34237 length 134950
CNF 34237 vars 134950 clauses
last 14480 length 64553
CNF 14480 vars 64553 clauses
last 15568 length 72999
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 34237, clauses: 134950, status: Satisfied, time: 0.712708612s
CNF 15568 vars 72999 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24629, clauses: 93282
last 24629 length 93282
CNF 24629 vars 93282 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24629, clauses: 93282, status: Satisfied, time: 0.647937508s
last 23352 length 103080
last 21239 length 98220
CNF 23352 vars 103080 clauses
CNF 21239 vars 98220 clauses
last 14051 length 63191
last 15698 length 74097
CNF 14051 vars 63191 clauses
CNF 15698 vars 74097 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 33494, clauses: 131874
last 33494 length 131874
CNF 33494 vars 131874 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23628, clauses: 88955
last 23628 length 88955
CNF 23628 vars 88955 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 33494, clauses: 131874, status: Satisfied, time: 0.682993181s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23628, clauses: 88955, status: Satisfied, time: 0.39583697s
last 12029 length 54308
last 13906 length 65861
CNF 12029 vars 54308 clauses
CNF 13906 vars 65861 clauses
last 19547 length 93015
last 20061 length 90313
CNF 19547 vars 93015 clauses
CNF 20061 vars 90313 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20785, clauses: 77455
last 20785 length 77455
CNF 20785 vars 77455 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20785, clauses: 77455, status: Satisfied, time: 0.427368351s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30043, clauses: 117022
last 30043 length 117022
last 11759 length 53133
CNF 30043 vars 117022 clauses
CNF 11759 vars 53133 clauses
last 13303 length 63140
CNF 13303 vars 63140 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 30043, clauses: 117022, status: Satisfied, time: 0.660594296s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20364, clauses: 75734
last 20364 length 75734
CNF 20364 vars 75734 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20364, clauses: 75734, status: Satisfied, time: 0.949686016s
last 17696 length 78294
last 18112 length 84546
CNF 17696 vars 78294 clauses
CNF 18112 vars 84546 clauses
last 11795 length 53241
last 13503 length 64260
CNF 11795 vars 53241 clauses
CNF 13503 vars 64260 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20069, clauses: 74664
last 20069 length 74664
CNF 20069 vars 74664 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28568, clauses: 110406
last 28568 length 110406
CNF 28568 vars 110406 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20069, clauses: 74664, status: Satisfied, time: 0.550690261s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28568, clauses: 110406, status: Satisfied, time: 0.732295986s
last 13089 length 62334
last 11644 length 52533
CNF 13089 vars 62334 clauses
CNF 11644 vars 52533 clauses
last 16325 length 72538
last 17620 length 82392
CNF 16325 vars 72538 clauses
CNF 17620 vars 82392 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19967, clauses: 74160
last 19967 length 74160
CNF 19967 vars 74160 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19967, clauses: 74160, status: Satisfied, time: 0.741710669s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 27297, clauses: 104378
last 27297 length 104378
CNF 27297 vars 104378 clauses
last 11749 length 53091
last 13198 length 62712
CNF 11749 vars 53091 clauses
CNF 13198 vars 62712 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 27297, clauses: 104378, status: Satisfied, time: 0.606004267s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20282, clauses: 75450
last 20282 length 75450
CNF 20282 vars 75450 clauses
last 14765 length 66463
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20282, clauses: 75450, status: Satisfied, time: 0.498875108s
last 17257 length 81591
CNF 14765 vars 66463 clauses
CNF 17257 vars 81591 clauses
**************************************************
summary
**************************************************
SRS with 50 rules on 6 letters       mirror
SRS with 50 rules on 6 letters       DP
SRS with 148 strict rules and 50 weak rules on 10 letters       EDG
2 sub-proofs
  1 SRS with 38 strict rules and 50 weak rules on 10 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 19 strict rules and 50 weak rules on 10 letters       EDG
  2 sub-proofs
    1 SRS with 18 strict rules and 50 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 13 strict rules and 50 weak rules on 9 letters       EDG
    SRS with 13 strict rules and 50 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 6 strict rules and 50 weak rules on 8 letters       weights
    SRS with 5 strict rules and 50 weak rules on 8 letters       EDG
    2 sub-proofs
      1 SRS with 4 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
      SRS with 3 strict rules and 50 weak rules on 7 letters       EDG
      SRS with 3 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
      SRS with 0 strict rules and 50 weak rules on 6 letters       EDG

      2 SRS with 1 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
      SRS with 0 strict rules and 50 weak rules on 6 letters       EDG

    2 SRS with 1 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 0 strict rules and 50 weak rules on 6 letters       EDG

  2 SRS with 2 strict rules and 50 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 50 weak rules on 7 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 0] -> [1, 0, 2, 0, 2] {- Input 0 -}
  [0, 0] -> [0, 2, 3, 4, 0, 2] {- Input 1 -}
  [0, 3] -> [0, 2, 3, 2] {- Input 2 -}
  [0, 3] -> [2, 0, 2, 1, 3] {- Input 3 -}
  [0, 3] -> [2, 3, 0, 2, 2] {- Input 4 -}
  [0, 3] -> [0, 2, 2, 2, 3, 2] {- Input 5 -}
  [0, 0, 0] -> [0, 2, 0, 0] {- Input 6 -}
  [0, 0, 4] -> [2, 4, 0, 0, 3, 2] {- Input 7 -}
  [0, 0, 5] -> [0, 5, 2, 0] {- Input 8 -}
  [0, 1, 3] -> [3, 2, 2, 1, 0] {- Input 9 -}
  [0, 3, 0] -> [2, 0, 2, 3, 4, 0] {- Input 10 -}
  [0, 4, 3] -> [3, 0, 2, 4] {- Input 11 -}
  [0, 4, 3] -> [1, 0, 2, 1, 3, 4] {- Input 12 -}
  [0, 4, 3] -> [2, 2, 4, 3, 4, 0] {- Input 13 -}
  [0, 4, 5] -> [2, 4, 0, 5, 2, 5] {- Input 14 -}
  [0, 4, 5] -> [5, 3, 2, 4, 4, 0] {- Input 15 -}
  [0, 5, 0] -> [0, 5, 2, 4, 0] {- Input 16 -}
  [0, 5, 0] -> [5, 0, 2, 3, 2, 0] {- Input 17 -}
  [0, 5, 3] -> [3, 2, 5, 3, 2, 0] {- Input 18 -}
  [1, 0, 0] -> [1, 0, 2, 5, 0, 2] {- Input 19 -}
  [1, 0, 3] -> [2, 1, 3, 0, 5, 2] {- Input 20 -}
  [1, 0, 4] -> [3, 0, 2, 1, 4] {- Input 21 -}
  [1, 0, 4] -> [2, 1, 2, 1, 4, 0] {- Input 22 -}
  [3, 0, 0] -> [3, 0, 2, 0] {- Input 23 -}
  [3, 0, 3] -> [3, 0, 2, 3] {- Input 24 -}
  [3, 0, 3] -> [3, 3, 2, 2, 0] {- Input 25 -}
  [3, 0, 4] -> [2, 2, 3, 4, 0] {- Input 26 -}
  [3, 0, 4] -> [2, 3, 4, 2, 0, 3] {- Input 27 -}
  [3, 0, 4] -> [5, 5, 2, 4, 0, 3] {- Input 28 -}
  [3, 3, 4] -> [3, 2, 1, 3, 2, 4] {- Input 29 -}
  [3, 5, 0] -> [3, 5, 1, 0, 2, 1] {- Input 30 -}
  [4, 0, 4] -> [0, 2, 4, 4, 0] {- Input 31 -}
  [4, 0, 4] -> [1, 4, 0, 2, 4, 0] {- Input 32 -}
  [0, 0, 4, 3] -> [3, 0, 0, 2, 1, 4] {- Input 33 -}
  [0, 0, 5, 3] -> [0, 5, 2, 5, 0, 3] {- Input 34 -}
  [0, 1, 0, 3] -> [2, 1, 0, 3, 0] {- Input 35 -}
  [0, 1, 1, 0] -> [2, 1, 0, 0, 1, 2] {- Input 36 -}
  [0, 4, 0, 0] -> [0, 4, 0, 2, 1, 0] {- Input 37 -}
  [0, 4, 1, 3] -> [2, 1, 4, 2, 0, 3] {- Input 38 -}
  [0, 4, 5, 3] -> [4, 3, 2, 5, 0] {- Input 39 -}
  [0, 4, 5, 3] -> [4, 3, 5, 0, 2, 4] {- Input 40 -}
  [0, 5, 0, 4] -> [5, 0, 0, 2, 4] {- Input 41 -}
  [0, 5, 5, 3] -> [2, 3, 5, 5, 0] {- Input 42 -}
  [1, 3, 0, 4] -> [4, 0, 1, 2, 3] {- Input 43 -}
  [4, 0, 3, 5] -> [5, 2, 3, 4, 2, 0] {- Input 44 -}
  [0, 0, 1, 0, 4] -> [0, 0, 0, 1, 4, 2] {- Input 45 -}
  [0, 0, 5, 5, 3] -> [0, 5, 0, 3, 2, 5] {- Input 46 -}
  [3, 0, 4, 3, 4] -> [3, 0, 3, 4, 2, 4] {- Input 47 -}
  [3, 3, 0, 4, 5] -> [1, 4, 5, 3, 0, 3] {- Input 48 -}
  [3, 4, 2, 0, 3] -> [2, 3, 0, 2, 3, 4] {- Input 49 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, 0] -> [2, 0, 2, 0, 1] {- Mirror (Input 0) -}
  [0, 0] -> [2, 0, 4, 3, 2, 0] {- Mirror (Input 1) -}
  [3, 0] -> [2, 3, 2, 0] {- Mirror (Input 2) -}
  [3, 0] -> [3, 1, 2, 0, 2] {- Mirror (Input 3) -}
  [3, 0] -> [2, 2, 0, 3, 2] {- Mirror (Input 4) -}
  [3, 0] -> [2, 3, 2, 2, 2, 0] {- Mirror (Input 5) -}
  [0, 0, 0] -> [0, 0, 2, 0] {- Mirror (Input 6) -}
  [4, 0, 0] -> [2, 3, 0, 0, 4, 2] {- Mirror (Input 7) -}
  [5, 0, 0] -> [0, 2, 5, 0] {- Mirror (Input 8) -}
  [3, 1, 0] -> [0, 1, 2, 2, 3] {- Mirror (Input 9) -}
  [0, 3, 0] -> [0, 4, 3, 2, 0, 2] {- Mirror (Input 10) -}
  [3, 4, 0] -> [4, 2, 0, 3] {- Mirror (Input 11) -}
  [3, 4, 0] -> [4, 3, 1, 2, 0, 1] {- Mirror (Input 12) -}
  [3, 4, 0] -> [0, 4, 3, 4, 2, 2] {- Mirror (Input 13) -}
  [5, 4, 0] -> [5, 2, 5, 0, 4, 2] {- Mirror (Input 14) -}
  [5, 4, 0] -> [0, 4, 4, 2, 3, 5] {- Mirror (Input 15) -}
  [0, 5, 0] -> [0, 4, 2, 5, 0] {- Mirror (Input 16) -}
  [0, 5, 0] -> [0, 2, 3, 2, 0, 5] {- Mirror (Input 17) -}
  [3, 5, 0] -> [0, 2, 3, 5, 2, 3] {- Mirror (Input 18) -}
  [0, 0, 1] -> [2, 0, 5, 2, 0, 1] {- Mirror (Input 19) -}
  [3, 0, 1] -> [2, 5, 0, 3, 1, 2] {- Mirror (Input 20) -}
  [4, 0, 1] -> [4, 1, 2, 0, 3] {- Mirror (Input 21) -}
  [4, 0, 1] -> [0, 4, 1, 2, 1, 2] {- Mirror (Input 22) -}
  [0, 0, 3] -> [0, 2, 0, 3] {- Mirror (Input 23) -}
  [3, 0, 3] -> [3, 2, 0, 3] {- Mirror (Input 24) -}
  [3, 0, 3] -> [0, 2, 2, 3, 3] {- Mirror (Input 25) -}
  [4, 0, 3] -> [0, 4, 3, 2, 2] {- Mirror (Input 26) -}
  [4, 0, 3] -> [3, 0, 2, 4, 3, 2] {- Mirror (Input 27) -}
  [4, 0, 3] -> [3, 0, 4, 2, 5, 5] {- Mirror (Input 28) -}
  [4, 3, 3] -> [4, 2, 3, 1, 2, 3] {- Mirror (Input 29) -}
  [0, 5, 3] -> [1, 2, 0, 1, 5, 3] {- Mirror (Input 30) -}
  [4, 0, 4] -> [0, 4, 4, 2, 0] {- Mirror (Input 31) -}
  [4, 0, 4] -> [0, 4, 2, 0, 4, 1] {- Mirror (Input 32) -}
  [3, 4, 0, 0] -> [4, 1, 2, 0, 0, 3] {- Mirror (Input 33) -}
  [3, 5, 0, 0] -> [3, 0, 5, 2, 5, 0] {- Mirror (Input 34) -}
  [3, 0, 1, 0] -> [0, 3, 0, 1, 2] {- Mirror (Input 35) -}
  [0, 1, 1, 0] -> [2, 1, 0, 0, 1, 2] {- Mirror (Input 36) -}
  [0, 0, 4, 0] -> [0, 1, 2, 0, 4, 0] {- Mirror (Input 37) -}
  [3, 1, 4, 0] -> [3, 0, 2, 4, 1, 2] {- Mirror (Input 38) -}
  [3, 5, 4, 0] -> [0, 5, 2, 3, 4] {- Mirror (Input 39) -}
  [3, 5, 4, 0] -> [4, 2, 0, 5, 3, 4] {- Mirror (Input 40) -}
  [4, 0, 5, 0] -> [4, 2, 0, 0, 5] {- Mirror (Input 41) -}
  [3, 5, 5, 0] -> [0, 5, 5, 3, 2] {- Mirror (Input 42) -}
  [4, 0, 3, 1] -> [3, 2, 1, 0, 4] {- Mirror (Input 43) -}
  [5, 3, 0, 4] -> [0, 2, 4, 3, 2, 5] {- Mirror (Input 44) -}
  [4, 0, 1, 0, 0] -> [2, 4, 1, 0, 0, 0] {- Mirror (Input 45) -}
  [3, 5, 5, 0, 0] -> [5, 2, 3, 0, 5, 0] {- Mirror (Input 46) -}
  [4, 3, 4, 0, 3] -> [4, 2, 4, 3, 0, 3] {- Mirror (Input 47) -}
  [5, 4, 0, 3, 3] -> [3, 0, 3, 5, 4, 1] {- Mirror (Input 48) -}
  [3, 0, 2, 4, 3] -> [4, 3, 2, 0, 3, 2] {- Mirror (Input 49) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
  [4#, 0, 1] |-> [4#, 1, 2, 1, 2] {- DP (Top 1) (Mirror (Input 22)) -}
  [4#, 0, 1] |-> [4#, 1, 2, 0, 3] {- DP (Top 0) (Mirror (Input 21)) -}
  [4#, 0, 1] |-> [0#, 4, 1, 2, 1, 2] {- DP (Top 0) (Mirror (Input 22)) -}
  [4#, 0, 1] |-> [0#, 3] {- DP (Top 3) (Mirror (Input 21)) -}
  [4#, 0, 1] |-> [3#] {- DP (Top 4) (Mirror (Input 21)) -}
  [4#, 0, 1, 0, 0] |-> [4#, 1, 0, 0, 0] {- DP (Top 1) (Mirror (Input 45)) -}
  [4#, 0, 1, 0, 0] |-> [0#, 0, 0] {- DP (Top 3) (Mirror (Input 45)) -}
  [4#, 0, 4] |-> [4#, 1] {- DP (Top 4) (Mirror (Input 32)) -}
  [4#, 0, 4] |-> [4#, 4, 2, 0] {- DP (Top 1) (Mirror (Input 31)) -}
  [4#, 0, 4] |-> [4#, 2, 0] {- DP (Top 2) (Mirror (Input 31)) -}
  [4#, 0, 4] |-> [4#, 2, 0, 4, 1] {- DP (Top 1) (Mirror (Input 32)) -}
  [4#, 0, 4] |-> [0#] {- DP (Top 4) (Mirror (Input 31)) -}
  [4#, 0, 4] |-> [0#, 4, 1] {- DP (Top 3) (Mirror (Input 32)) -}
  [4#, 0, 4] |-> [0#, 4, 4, 2, 0] {- DP (Top 0) (Mirror (Input 31)) -}
  [4#, 0, 4] |-> [0#, 4, 2, 0, 4, 1] {- DP (Top 0) (Mirror (Input 32)) -}
  [4#, 0, 0] |-> [4#, 2] {- DP (Top 4) (Mirror (Input 7)) -}
  [4#, 0, 0] |-> [0#, 4, 2] {- DP (Top 3) (Mirror (Input 7)) -}
  [4#, 0, 0] |-> [0#, 0, 4, 2] {- DP (Top 2) (Mirror (Input 7)) -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [4#, 0, 5, 0] |-> [4#, 2, 0, 0, 5] {- DP (Top 0) (Mirror (Input 41)) -}
  [4#, 0, 5, 0] |-> [0#, 0, 5] {- DP (Top 2) (Mirror (Input 41)) -}
  [4#, 0, 5, 0] |-> [0#, 5] {- DP (Top 3) (Mirror (Input 41)) -}
  [4#, 0, 5, 0] |-> [5#] {- DP (Top 4) (Mirror (Input 41)) -}
  [4#, 0, 3] |-> [4#, 2, 5, 5] {- DP (Top 2) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [4#, 3, 2] {- DP (Top 3) (Mirror (Input 27)) -}
  [4#, 0, 3] |-> [4#, 3, 2, 2] {- DP (Top 1) (Mirror (Input 26)) -}
  [4#, 0, 3] |-> [0#, 4, 2, 5, 5] {- DP (Top 1) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [0#, 4, 3, 2, 2] {- DP (Top 0) (Mirror (Input 26)) -}
  [4#, 0, 3] |-> [0#, 2, 4, 3, 2] {- DP (Top 1) (Mirror (Input 27)) -}
  [4#, 0, 3] |-> [5#] {- DP (Top 5) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [5#, 5] {- DP (Top 4) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [3#, 2] {- DP (Top 4) (Mirror (Input 27)) -}
  [4#, 0, 3] |-> [3#, 2, 2] {- DP (Top 2) (Mirror (Input 26)) -}
  [4#, 0, 3] |-> [3#, 0, 4, 2, 5, 5] {- DP (Top 0) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [3#, 0, 2, 4, 3, 2] {- DP (Top 0) (Mirror (Input 27)) -}
  [4#, 0, 3, 1] |-> [4#] {- DP (Top 4) (Mirror (Input 43)) -}
  [4#, 0, 3, 1] |-> [0#, 4] {- DP (Top 3) (Mirror (Input 43)) -}
  [4#, 0, 3, 1] |-> [3#, 2, 1, 0, 4] {- DP (Top 0) (Mirror (Input 43)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 2, 4, 3, 0, 3] {- DP (Top 0) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [4#, 3, 3] |-> [4#, 2, 3, 1, 2, 3] {- DP (Top 0) (Mirror (Input 29)) -}
  [4#, 3, 3] |-> [3#, 1, 2, 3] {- DP (Top 2) (Mirror (Input 29)) -}
  [0#, 1, 1, 0] |-> [0#, 1, 2] {- DP (Top 3) (Mirror (Input 36)) -}
  [0#, 1, 1, 0] |-> [0#, 0, 1, 2] {- DP (Top 2) (Mirror (Input 36)) -}
  [0#, 0] |-> [4#, 3, 2, 0] {- DP (Top 2) (Mirror (Input 1)) -}
  [0#, 0] |-> [0#, 1] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, 0] |-> [0#, 4, 3, 2, 0] {- DP (Top 1) (Mirror (Input 1)) -}
  [0#, 0] |-> [0#, 2, 0, 1] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, 0] |-> [3#, 2, 0] {- DP (Top 3) (Mirror (Input 1)) -}
  [0#, 0, 1] |-> [0#, 5, 2, 0, 1] {- DP (Top 1) (Mirror (Input 19)) -}
  [0#, 0, 1] |-> [5#, 2, 0, 1] {- DP (Top 2) (Mirror (Input 19)) -}
  [0#, 0, 4, 0] |-> [0#, 1, 2, 0, 4, 0] {- DP (Top 0) (Mirror (Input 37)) -}
  [0#, 0, 0] |-> [0#, 2, 0] {- DP (Top 1) (Mirror (Input 6)) -}
  [0#, 0, 0] |-> [0#, 0, 2, 0] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, 0, 3] |-> [0#, 2, 0, 3] {- DP (Top 0) (Mirror (Input 23)) -}
  [0#, 5, 0] |-> [4#, 2, 5, 0] {- DP (Top 1) (Mirror (Input 16)) -}
  [0#, 5, 0] |-> [0#, 4, 2, 5, 0] {- DP (Top 0) (Mirror (Input 16)) -}
  [0#, 5, 0] |-> [0#, 2, 3, 2, 0, 5] {- DP (Top 0) (Mirror (Input 17)) -}
  [0#, 5, 0] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 17)) -}
  [0#, 5, 0] |-> [5#] {- DP (Top 5) (Mirror (Input 17)) -}
  [0#, 5, 0] |-> [3#, 2, 0, 5] {- DP (Top 2) (Mirror (Input 17)) -}
  [0#, 5, 3] |-> [0#, 1, 5, 3] {- DP (Top 2) (Mirror (Input 30)) -}
  [0#, 3, 0] |-> [4#, 3, 2, 0, 2] {- DP (Top 1) (Mirror (Input 10)) -}
  [0#, 3, 0] |-> [0#, 4, 3, 2, 0, 2] {- DP (Top 0) (Mirror (Input 10)) -}
  [0#, 3, 0] |-> [0#, 2] {- DP (Top 4) (Mirror (Input 10)) -}
  [0#, 3, 0] |-> [3#, 2, 0, 2] {- DP (Top 2) (Mirror (Input 10)) -}
  [5#, 4, 0] |-> [4#, 4, 2, 3, 5] {- DP (Top 1) (Mirror (Input 15)) -}
  [5#, 4, 0] |-> [4#, 2] {- DP (Top 4) (Mirror (Input 14)) -}
  [5#, 4, 0] |-> [4#, 2, 3, 5] {- DP (Top 2) (Mirror (Input 15)) -}
  [5#, 4, 0] |-> [0#, 4, 4, 2, 3, 5] {- DP (Top 0) (Mirror (Input 15)) -}
  [5#, 4, 0] |-> [0#, 4, 2] {- DP (Top 3) (Mirror (Input 14)) -}
  [5#, 4, 0] |-> [5#] {- DP (Top 5) (Mirror (Input 15)) -}
  [5#, 4, 0] |-> [5#, 2, 5, 0, 4, 2] {- DP (Top 0) (Mirror (Input 14)) -}
  [5#, 4, 0] |-> [5#, 0, 4, 2] {- DP (Top 2) (Mirror (Input 14)) -}
  [5#, 4, 0] |-> [3#, 5] {- DP (Top 4) (Mirror (Input 15)) -}
  [5#, 4, 0, 3, 3] |-> [4#, 1] {- DP (Top 4) (Mirror (Input 48)) -}
  [5#, 4, 0, 3, 3] |-> [0#, 3, 5, 4, 1] {- DP (Top 1) (Mirror (Input 48)) -}
  [5#, 4, 0, 3, 3] |-> [5#, 4, 1] {- DP (Top 3) (Mirror (Input 48)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 5, 4, 1] {- DP (Top 2) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [0#, 2, 5, 0] {- DP (Top 0) (Mirror (Input 8)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [5#, 3, 0, 4] |-> [4#, 3, 2, 5] {- DP (Top 2) (Mirror (Input 44)) -}
  [5#, 3, 0, 4] |-> [0#, 2, 4, 3, 2, 5] {- DP (Top 0) (Mirror (Input 44)) -}
  [5#, 3, 0, 4] |-> [5#] {- DP (Top 5) (Mirror (Input 44)) -}
  [5#, 3, 0, 4] |-> [3#, 2, 5] {- DP (Top 3) (Mirror (Input 44)) -}
  [3#, 1, 4, 0] |-> [4#, 1, 2] {- DP (Top 3) (Mirror (Input 38)) -}
  [3#, 1, 4, 0] |-> [0#, 2, 4, 1, 2] {- DP (Top 1) (Mirror (Input 38)) -}
  [3#, 1, 4, 0] |-> [3#, 0, 2, 4, 1, 2] {- DP (Top 0) (Mirror (Input 38)) -}
  [3#, 1, 0] |-> [0#, 1, 2, 2, 3] {- DP (Top 0) (Mirror (Input 9)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [4#, 2, 2] {- DP (Top 3) (Mirror (Input 13)) -}
  [3#, 4, 0] |-> [4#, 2, 0, 3] {- DP (Top 0) (Mirror (Input 11)) -}
  [3#, 4, 0] |-> [4#, 3, 1, 2, 0, 1] {- DP (Top 0) (Mirror (Input 12)) -}
  [3#, 4, 0] |-> [4#, 3, 4, 2, 2] {- DP (Top 1) (Mirror (Input 13)) -}
  [3#, 4, 0] |-> [0#, 1] {- DP (Top 4) (Mirror (Input 12)) -}
  [3#, 4, 0] |-> [0#, 4, 3, 4, 2, 2] {- DP (Top 0) (Mirror (Input 13)) -}
  [3#, 4, 0] |-> [0#, 3] {- DP (Top 2) (Mirror (Input 11)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 4, 0] |-> [3#, 1, 2, 0, 1] {- DP (Top 1) (Mirror (Input 12)) -}
  [3#, 4, 0] |-> [3#, 4, 2, 2] {- DP (Top 2) (Mirror (Input 13)) -}
  [3#, 4, 0, 0] |-> [4#, 1, 2, 0, 0, 3] {- DP (Top 0) (Mirror (Input 33)) -}
  [3#, 4, 0, 0] |-> [0#, 0, 3] {- DP (Top 3) (Mirror (Input 33)) -}
  [3#, 4, 0, 0] |-> [0#, 3] {- DP (Top 4) (Mirror (Input 33)) -}
  [3#, 4, 0, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 33)) -}
  [3#, 0] |-> [0#, 2] {- DP (Top 3) (Mirror (Input 3)) -}
  [3#, 0] |-> [0#, 3, 2] {- DP (Top 2) (Mirror (Input 4)) -}
  [3#, 0] |-> [3#, 1, 2, 0, 2] {- DP (Top 0) (Mirror (Input 3)) -}
  [3#, 0] |-> [3#, 2] {- DP (Top 3) (Mirror (Input 4)) -}
  [3#, 0] |-> [3#, 2, 2, 2, 0] {- DP (Top 1) (Mirror (Input 5)) -}
  [3#, 0] |-> [3#, 2, 0] {- DP (Top 1) (Mirror (Input 2)) -}
  [3#, 0, 1] |-> [0#, 3, 1, 2] {- DP (Top 2) (Mirror (Input 20)) -}
  [3#, 0, 1] |-> [5#, 0, 3, 1, 2] {- DP (Top 1) (Mirror (Input 20)) -}
  [3#, 0, 1] |-> [3#, 1, 2] {- DP (Top 3) (Mirror (Input 20)) -}
  [3#, 0, 1, 0] |-> [0#, 1, 2] {- DP (Top 2) (Mirror (Input 35)) -}
  [3#, 0, 1, 0] |-> [0#, 3, 0, 1, 2] {- DP (Top 0) (Mirror (Input 35)) -}
  [3#, 0, 1, 0] |-> [3#, 0, 1, 2] {- DP (Top 1) (Mirror (Input 35)) -}
  [3#, 0, 2, 4, 3] |-> [4#, 3, 2, 0, 3, 2] {- DP (Top 0) (Mirror (Input 49)) -}
  [3#, 0, 2, 4, 3] |-> [0#, 3, 2] {- DP (Top 3) (Mirror (Input 49)) -}
  [3#, 0, 2, 4, 3] |-> [3#, 2] {- DP (Top 4) (Mirror (Input 49)) -}
  [3#, 0, 2, 4, 3] |-> [3#, 2, 0, 3, 2] {- DP (Top 1) (Mirror (Input 49)) -}
  [3#, 0, 3] |-> [0#, 2, 2, 3, 3] {- DP (Top 0) (Mirror (Input 25)) -}
  [3#, 0, 3] |-> [3#, 2, 0, 3] {- DP (Top 0) (Mirror (Input 24)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [3#, 5, 4, 0] |-> [4#, 2, 0, 5, 3, 4] {- DP (Top 0) (Mirror (Input 40)) -}
  [3#, 5, 4, 0] |-> [0#, 5, 2, 3, 4] {- DP (Top 0) (Mirror (Input 39)) -}
  [3#, 5, 4, 0] |-> [0#, 5, 3, 4] {- DP (Top 2) (Mirror (Input 40)) -}
  [3#, 5, 4, 0] |-> [5#, 2, 3, 4] {- DP (Top 1) (Mirror (Input 39)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [0#, 2, 3, 5, 2, 3] {- DP (Top 0) (Mirror (Input 18)) -}
  [3#, 5, 0] |-> [5#, 2, 3] {- DP (Top 3) (Mirror (Input 18)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 0] |-> [3#, 5, 2, 3] {- DP (Top 2) (Mirror (Input 18)) -}
  [3#, 5, 0, 0] |-> [0#, 5, 2, 5, 0] {- DP (Top 1) (Mirror (Input 34)) -}
  [3#, 5, 0, 0] |-> [5#, 2, 5, 0] {- DP (Top 2) (Mirror (Input 34)) -}
  [3#, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 34)) -}
  [3#, 5, 0, 0] |-> [3#, 0, 5, 2, 5, 0] {- DP (Top 0) (Mirror (Input 34)) -}
  [3#, 5, 5, 0] |-> [0#, 5, 5, 3, 2] {- DP (Top 0) (Mirror (Input 42)) -}
  [3#, 5, 5, 0] |-> [5#, 5, 3, 2] {- DP (Top 1) (Mirror (Input 42)) -}
  [3#, 5, 5, 0] |-> [5#, 3, 2] {- DP (Top 2) (Mirror (Input 42)) -}
  [3#, 5, 5, 0] |-> [3#, 2] {- DP (Top 3) (Mirror (Input 42)) -}
  [3#, 5, 5, 0, 0] |-> [0#, 5, 0] {- DP (Top 3) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [5#, 2, 3, 0, 5, 0] {- DP (Top 0) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [4#, 0, 1] |-> [0#, 3] {- DP (Top 3) (Mirror (Input 21)) -}
  [0#, 5, 0] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 17)) -}
  [0#, 5, 0] |-> [5#] {- DP (Top 5) (Mirror (Input 17)) -}
  [5#, 4, 0] |-> [5#] {- DP (Top 5) (Mirror (Input 15)) -}
  [5#, 4, 0] |-> [3#, 5] {- DP (Top 4) (Mirror (Input 15)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [0#, 3] {- DP (Top 2) (Mirror (Input 11)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 4, 0, 0] |-> [0#, 0, 3] {- DP (Top 3) (Mirror (Input 33)) -}
  [3#, 4, 0, 0] |-> [0#, 3] {- DP (Top 4) (Mirror (Input 33)) -}
  [3#, 4, 0, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 33)) -}
  [3#, 0, 1, 0] |-> [0#, 3, 0, 1, 2] {- DP (Top 0) (Mirror (Input 35)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [0#, 5, 3, 4] {- DP (Top 2) (Mirror (Input 40)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [5#, 3, 0, 4] |-> [5#] {- DP (Top 5) (Mirror (Input 44)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 34)) -}
  [3#, 5, 5, 0, 0] |-> [0#, 5, 0] {- DP (Top 3) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 0, 1] |-> [3#] {- DP (Top 4) (Mirror (Input 21)) -}
  [4#, 0, 1, 0, 0] |-> [0#, 0, 0] {- DP (Top 3) (Mirror (Input 45)) -}
  [4#, 0, 4] |-> [0#] {- DP (Top 4) (Mirror (Input 31)) -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [4#, 0, 5, 0] |-> [0#, 0, 5] {- DP (Top 2) (Mirror (Input 41)) -}
  [4#, 0, 5, 0] |-> [0#, 5] {- DP (Top 3) (Mirror (Input 41)) -}
  [4#, 0, 5, 0] |-> [5#] {- DP (Top 4) (Mirror (Input 41)) -}
  [4#, 0, 3] |-> [5#] {- DP (Top 5) (Mirror (Input 28)) -}
  [4#, 0, 3] |-> [5#, 5] {- DP (Top 4) (Mirror (Input 28)) -}
  [4#, 0, 3, 1] |-> [4#] {- DP (Top 4) (Mirror (Input 43)) -}
  [4#, 0, 3, 1] |-> [0#, 4] {- DP (Top 3) (Mirror (Input 43)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 5
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4#
  , Wk  / 14A 17A 17A - \
        | 14A 17A 17A - |
        | 14A 17A 17A - |
        \ -   -   -   - / )
  ( 0#
  , Wk  / 12A 15A 15A - \
        | 12A 15A 15A - |
        | 12A 15A 15A - |
        \ -   -   -   - / )
  ( 5#
  , Wk  / 14A 14A 17A - \
        | 14A 14A 17A - |
        | 14A 14A 17A - |
        \ -   -   -   - / )
  ( 3#
  , Wk  / 14A 14A 14A - \
        | 14A 14A 14A - |
        | 14A 14A 14A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [0#, 5, 0] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 17)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [5#, 3, 0, 4] |-> [5#] {- DP (Top 5) (Mirror (Input 44)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 34)) -}
  [3#, 5, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [4#, 0, 3] |-> [5#] {- DP (Top 5) (Mirror (Input 28)) -}
  [4#, 0, 3, 1] |-> [4#] {- DP (Top 4) (Mirror (Input 43)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [5#, 3, 0, 4] |-> [5#] {- DP (Top 5) (Mirror (Input 44)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 34)) -}
  [3#, 5, 5, 0, 0] |-> [5#, 0] {- DP (Top 4) (Mirror (Input 46)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 0, 3] |-> [5#] {- DP (Top 5) (Mirror (Input 28)) -}
  [4#, 0, 3, 1] |-> [4#] {- DP (Top 4) (Mirror (Input 43)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 5
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4#
  , Wk  / 9A 9A 12A - \
        | 9A 9A 12A - |
        | 9A 9A 12A - |
        \ -  -  -   - / )
  ( 5#
  , Wk  / 6A 9A 9A - \
        | 6A 9A 9A - |
        | 6A 9A 9A - |
        \ -  -  -  - / )
  ( 3#
  , Wk  / 9A 9A 12A - \
        | 9A 9A 12A - |
        | 9A 9A 12A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [4#, 0, 0] |-> [3#, 0, 0, 4, 2] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 4, 0] |-> [3#] {- DP (Top 3) (Mirror (Input 11)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 4, 0] |-> [5#, 3, 4] {- DP (Top 3) (Mirror (Input 40)) -}
  [5#, 4, 0, 3, 3] |-> [3#, 0, 3, 5, 4, 1] {- DP (Top 0) (Mirror (Input 48)) -}
  [5#, 0, 0] |-> [5#, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [3#, 5, 4, 0] |-> [3#, 4] {- Many [ DP (Top 4) (Mirror (Input 40)) , DP (Top 3) (Mirror (Input 39)) ] -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [4#, 3, 4, 0, 3] |-> [3#, 0, 3] {- DP (Top 3) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4#
  , Wk  / 6A 6A 6A - \
        | 6A 6A 6A - |
        | 6A 6A 6A - |
        \ -  -  -  - / )
  ( 5#
  , Wk  / 3A 6A 6A - \
        | 3A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( 3#
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [3#, 5, 4, 0] |-> [4#] {- Many [ DP (Top 5) (Mirror (Input 40)) , DP (Top 4) (Mirror (Input 39)) ] -}
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  (1, 0/1)
  (4, 0/1)
  (2, 0/1)
  (0, 0/1)
  (5, 0/1)
  (3, 0/1)
  (4#, 0/1)
  (3#, 1/1)
   property Termination
has value Just True
for SRS
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [3#, 5, 5, 0, 0] |-> [3#, 0, 5, 0] {- DP (Top 2) (Mirror (Input 46)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 3#
  , Wk  / 21A 22A 23A - \
        | 21A 22A 23A - |
        | 21A 22A 23A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [3#, 1, 0] |-> [3#] {- DP (Top 4) (Mirror (Input 9)) -}
  [3#, 0, 3] |-> [3#, 3] {- DP (Top 3) (Mirror (Input 25)) -}
  [3#, 5, 0] |-> [3#] {- DP (Top 5) (Mirror (Input 18)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 5
  , Wk  / 0A  0A  3A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3#
  , Wk  / 10A 12A 13A - \
        | 10A 12A 13A - |
        | 10A 12A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [4#, 3, 4, 0, 3] |-> [4#, 3, 0, 3] {- DP (Top 2) (Mirror (Input 47)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 2
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 0
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 5
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4#
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, 5, 0] |-> [0#, 5] {- DP (Top 4) (Mirror (Input 17)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 4
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0#
  , Wk  / 8A 10A 11A - \
        | 8A 10A 11A - |
        | 8A 10A 11A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, 0] |-> [0#, 1] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, 1, 1, 0] |-> [0#, 0, 1, 2] {- DP (Top 2) (Mirror (Input 36)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( 5
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 3
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0#
  , Wk  / 6A 8A 8A - \
        | 6A 8A 8A - |
        | 6A 8A 8A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [0#, 1, 1, 0] |-> [0#, 0, 1, 2] {- DP (Top 2) (Mirror (Input 36)) -}
  [0, 0] ->= [2, 0, 2, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [0, 0] ->= [2, 0, 4, 3, 2, 0] {- DP Nontop (Mirror (Input 1)) -}
  [3, 0] ->= [2, 3, 2, 0] {- DP Nontop (Mirror (Input 2)) -}
  [3, 0] ->= [3, 1, 2, 0, 2] {- DP Nontop (Mirror (Input 3)) -}
  [3, 0] ->= [2, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 4)) -}
  [3, 0] ->= [2, 3, 2, 2, 2, 0] {- DP Nontop (Mirror (Input 5)) -}
  [0, 0, 0] ->= [0, 0, 2, 0] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 0] ->= [2, 3, 0, 0, 4, 2] {- DP Nontop (Mirror (Input 7)) -}
  [5, 0, 0] ->= [0, 2, 5, 0] {- DP Nontop (Mirror (Input 8)) -}
  [3, 1, 0] ->= [0, 1, 2, 2, 3] {- DP Nontop (Mirror (Input 9)) -}
  [0, 3, 0] ->= [0, 4, 3, 2, 0, 2] {- DP Nontop (Mirror (Input 10)) -}
  [3, 4, 0] ->= [4, 2, 0, 3] {- DP Nontop (Mirror (Input 11)) -}
  [3, 4, 0] ->= [4, 3, 1, 2, 0, 1] {- DP Nontop (Mirror (Input 12)) -}
  [3, 4, 0] ->= [0, 4, 3, 4, 2, 2] {- DP Nontop (Mirror (Input 13)) -}
  [5, 4, 0] ->= [5, 2, 5, 0, 4, 2] {- DP Nontop (Mirror (Input 14)) -}
  [5, 4, 0] ->= [0, 4, 4, 2, 3, 5] {- DP Nontop (Mirror (Input 15)) -}
  [0, 5, 0] ->= [0, 4, 2, 5, 0] {- DP Nontop (Mirror (Input 16)) -}
  [0, 5, 0] ->= [0, 2, 3, 2, 0, 5] {- DP Nontop (Mirror (Input 17)) -}
  [3, 5, 0] ->= [0, 2, 3, 5, 2, 3] {- DP Nontop (Mirror (Input 18)) -}
  [0, 0, 1] ->= [2, 0, 5, 2, 0, 1] {- DP Nontop (Mirror (Input 19)) -}
  [3, 0, 1] ->= [2, 5, 0, 3, 1, 2] {- DP Nontop (Mirror (Input 20)) -}
  [4, 0, 1] ->= [4, 1, 2, 0, 3] {- DP Nontop (Mirror (Input 21)) -}
  [4, 0, 1] ->= [0, 4, 1, 2, 1, 2] {- DP Nontop (Mirror (Input 22)) -}
  [0, 0, 3] ->= [0, 2, 0, 3] {- DP Nontop (Mirror (Input 23)) -}
  [3, 0, 3] ->= [3, 2, 0, 3] {- DP Nontop (Mirror (Input 24)) -}
  [3, 0, 3] ->= [0, 2, 2, 3, 3] {- DP Nontop (Mirror (Input 25)) -}
  [4, 0, 3] ->= [0, 4, 3, 2, 2] {- DP Nontop (Mirror (Input 26)) -}
  [4, 0, 3] ->= [3, 0, 2, 4, 3, 2] {- DP Nontop (Mirror (Input 27)) -}
  [4, 0, 3] ->= [3, 0, 4, 2, 5, 5] {- DP Nontop (Mirror (Input 28)) -}
  [4, 3, 3] ->= [4, 2, 3, 1, 2, 3] {- DP Nontop (Mirror (Input 29)) -}
  [0, 5, 3] ->= [1, 2, 0, 1, 5, 3] {- DP Nontop (Mirror (Input 30)) -}
  [4, 0, 4] ->= [0, 4, 4, 2, 0] {- DP Nontop (Mirror (Input 31)) -}
  [4, 0, 4] ->= [0, 4, 2, 0, 4, 1] {- DP Nontop (Mirror (Input 32)) -}
  [3, 4, 0, 0] ->= [4, 1, 2, 0, 0, 3] {- DP Nontop (Mirror (Input 33)) -}
  [3, 5, 0, 0] ->= [3, 0, 5, 2, 5, 0] {- DP Nontop (Mirror (Input 34)) -}
  [3, 0, 1, 0] ->= [0, 3, 0, 1, 2] {- DP Nontop (Mirror (Input 35)) -}
  [0, 1, 1, 0] ->= [2, 1, 0, 0, 1, 2] {- DP Nontop (Mirror (Input 36)) -}
  [0, 0, 4, 0] ->= [0, 1, 2, 0, 4, 0] {- DP Nontop (Mirror (Input 37)) -}
  [3, 1, 4, 0] ->= [3, 0, 2, 4, 1, 2] {- DP Nontop (Mirror (Input 38)) -}
  [3, 5, 4, 0] ->= [0, 5, 2, 3, 4] {- DP Nontop (Mirror (Input 39)) -}
  [3, 5, 4, 0] ->= [4, 2, 0, 5, 3, 4] {- DP Nontop (Mirror (Input 40)) -}
  [4, 0, 5, 0] ->= [4, 2, 0, 0, 5] {- DP Nontop (Mirror (Input 41)) -}
  [3, 5, 5, 0] ->= [0, 5, 5, 3, 2] {- DP Nontop (Mirror (Input 42)) -}
  [4, 0, 3, 1] ->= [3, 2, 1, 0, 4] {- DP Nontop (Mirror (Input 43)) -}
  [5, 3, 0, 4] ->= [0, 2, 4, 3, 2, 5] {- DP Nontop (Mirror (Input 44)) -}
  [4, 0, 1, 0, 0] ->= [2, 4, 1, 0, 0, 0] {- DP Nontop (Mirror (Input 45)) -}
  [3, 5, 5, 0, 0] ->= [5, 2, 3, 0, 5, 0] {- DP Nontop (Mirror (Input 46)) -}
  [4, 3, 4, 0, 3] ->= [4, 2, 4, 3, 0, 3] {- DP Nontop (Mirror (Input 47)) -}
  [5, 4, 0, 3, 3] ->= [3, 0, 3, 5, 4, 1] {- DP Nontop (Mirror (Input 48)) -}
  [3, 0, 2, 4, 3] ->= [4, 3, 2, 0, 3, 2] {- DP Nontop (Mirror (Input 49)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(50,6)\Deepee(148/50,10)\EDG[(38/50,10)\Matrix{\Arctic}{3}(19/50,10)\EDG[(18/50,9)\Matrix{\Arctic}{3}\EDG(13/50,9)\Matrix{\Arctic}{3}(6/50,8)\Weight(5/50,8)\EDG[(4/50,7)\Matrix{\Arctic}{3}\EDG(3/50,7)\Matrix{\Arctic}{3}(0/50,6)\EDG[],(1/50,7)\Matrix{\Arctic}{3}(0/50,6)\EDG[]],(1/50,7)\Matrix{\Arctic}{3}(0/50,6)\EDG[]],(2/50,7)\Matrix{\Arctic}{3}(1/50,7)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 14
  max duration 1.809882222000
  min duration 0.784470221000
  total durat. 18.003180149000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 462}
    , self = 96
    , parent = Nothing
    , duration = 1.071667260000
    , status = Fail
    , start = 2025-09-03 12:09:52.561417977 UTC
    , finish = 2025-09-03 12:09:53.633085237 UTC
    , thread_cap_info = ("ThreadId 143", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 68
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 552}
    , self = 63
    , parent = Nothing
    , duration = 1.074647516000
    , status = Fail
    , start = 2025-09-03 12:09:46.828214256 UTC
    , finish = 2025-09-03 12:09:47.902861772 UTC
    , thread_cap_info = ("ThreadId 106", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 668}
    , self = 52
    , parent = Nothing
    , duration = 1.139961752000
    , status = Fail
    , start = 2025-09-03 12:09:43.911395003 UTC
    , finish = 2025-09-03 12:09:45.051356755 UTC
    , thread_cap_info = ("ThreadId 63", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 13
      , num_top_rules = 13
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 525}
    , self = 80
    , parent = Nothing
    , duration = 1.182641904000
    , status = Fail
    , start = 2025-09-03 12:09:49.80928246 UTC
    , finish = 2025-09-03 12:09:50.991924364 UTC
    , thread_cap_info = ("ThreadId 126", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 452}
    , self = 152
    , parent = Nothing
    , duration = 1.277615707000
    , status = Fail
    , start = 2025-09-03 12:10:04.672859202 UTC
    , finish = 2025-09-03 12:10:05.950474909 UTC
    , thread_cap_info = ("ThreadId 216", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 71
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 566}
    , self = 166
    , parent = Nothing
    , duration = 1.324114214000
    , status = Fail
    , start = 2025-09-03 12:10:06.288789361 UTC
    , finish = 2025-09-03 12:10:07.612903575 UTC
    , thread_cap_info = ("ThreadId 227", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 679}
    , self = 123
    , parent = Nothing
    , duration = 1.564151692000
    , status = Fail
    , start = 2025-09-03 12:09:56.84872414 UTC
    , finish = 2025-09-03 12:09:58.412875832 UTC
    , thread_cap_info = ("ThreadId 172", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 627}
    , self = 143
    , parent = Nothing
    , duration = 1.587445488000
    , status = Fail
    , start = 2025-09-03 12:10:01.691951744 UTC
    , finish = 2025-09-03 12:10:03.279397232 UTC
    , thread_cap_info = ("ThreadId 201", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 96
      , num_strict_rules = 46
      , num_top_rules = 46
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 731}
    , self = 99
    , parent = Nothing
    , duration = 1.625052337000
    , status = Fail
    , start = 2025-09-03 12:09:52.630205132 UTC
    , finish = 2025-09-03 12:09:54.255257469 UTC
    , thread_cap_info = ("ThreadId 146", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 115
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 834}
    , self = 78
    , parent = Nothing
    , duration = 1.779091350000
    , status = Fail
    , start = 2025-09-03 12:09:48.148591339 UTC
    , finish = 2025-09-03 12:09:49.927682689 UTC
    , thread_cap_info = ("ThreadId 117", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 117
      , num_strict_rules = 67
      , num_top_rules = 67
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 852}
    , self = 54
    , parent = Nothing
    , duration = 1.809882222000
    , status = Fail
    , start = 2025-09-03 12:09:44.008736686 UTC
    , finish = 2025-09-03 12:09:45.818618908 UTC
    , thread_cap_info = ("ThreadId 85", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 14
  max duration 1.798949354000
  min duration 0.872139312000
  total durat. 18.426208150000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 462}
    , self = 97
    , parent = Nothing
    , duration = 1.103224121000
    , status = Fail
    , start = 2025-09-03 12:09:52.568192911 UTC
    , finish = 2025-09-03 12:09:53.671417032 UTC
    , thread_cap_info = ("ThreadId 145", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 68
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 552}
    , self = 69
    , parent = Nothing
    , duration = 1.189167727000
    , status = Fail
    , start = 2025-09-03 12:09:46.91650536 UTC
    , finish = 2025-09-03 12:09:48.105673087 UTC
    , thread_cap_info = ("ThreadId 107", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 13
      , num_top_rules = 13
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 525}
    , self = 81
    , parent = Nothing
    , duration = 1.262949455000
    , status = Fail
    , start = 2025-09-03 12:09:49.828956981 UTC
    , finish = 2025-09-03 12:09:51.091906436 UTC
    , thread_cap_info = ("ThreadId 127", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 452}
    , self = 155
    , parent = Nothing
    , duration = 1.269168854000
    , status = Fail
    , start = 2025-09-03 12:10:04.693388441 UTC
    , finish = 2025-09-03 12:10:05.962557295 UTC
    , thread_cap_info = ("ThreadId 217", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 71
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 566}
    , self = 167
    , parent = Nothing
    , duration = 1.314425220000
    , status = Fail
    , start = 2025-09-03 12:10:06.308200202 UTC
    , finish = 2025-09-03 12:10:07.622625422 UTC
    , thread_cap_info = ("ThreadId 228", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 96
      , num_strict_rules = 46
      , num_top_rules = 46
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 731}
    , self = 98
    , parent = Nothing
    , duration = 1.544575658000
    , status = Fail
    , start = 2025-09-03 12:09:52.688426169 UTC
    , finish = 2025-09-03 12:09:54.233001827 UTC
    , thread_cap_info = ("ThreadId 147", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 117
      , num_strict_rules = 67
      , num_top_rules = 67
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 852}
    , self = 53
    , parent = Nothing
    , duration = 1.707139713000
    , status = Fail
    , start = 2025-09-03 12:09:44.038871418 UTC
    , finish = 2025-09-03 12:09:45.746011131 UTC
    , thread_cap_info = ("ThreadId 86", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 679}
    , self = 124
    , parent = Nothing
    , duration = 1.726137528000
    , status = Fail
    , start = 2025-09-03 12:09:56.869937351 UTC
    , finish = 2025-09-03 12:09:58.596074879 UTC
    , thread_cap_info = ("ThreadId 173", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 627}
    , self = 144
    , parent = Nothing
    , duration = 1.797704951000
    , status = Fail
    , start = 2025-09-03 12:10:01.696697264 UTC
    , finish = 2025-09-03 12:10:03.494402215 UTC
    , thread_cap_info = ("ThreadId 202", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 115
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 834}
    , self = 79
    , parent = Nothing
    , duration = 1.798949354000
    , status = Fail
    , start = 2025-09-03 12:09:48.155565333 UTC
    , finish = 2025-09-03 12:09:49.954514687 UTC
    , thread_cap_info = ("ThreadId 118", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 13
  max duration 2.777659046000
  min duration 1.279982655000
  total durat. 24.882778850000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 462}
    , self = 102
    , parent = Nothing
    , duration = 1.279982655000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:53.768213636 UTC
    , finish = 2025-09-03 12:09:55.048196291 UTC
    , thread_cap_info = ("ThreadId 151", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 13
      , num_top_rules = 13
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 525}
    , self = 87
    , parent = Nothing
    , duration = 1.362763468000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:51.18820933 UTC
    , finish = 2025-09-03 12:09:52.550972798 UTC
    , thread_cap_info = ("ThreadId 133", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 668}
    , self = 57
    , parent = Nothing
    , duration = 1.439974095000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:45.148219748 UTC
    , finish = 2025-09-03 12:09:46.588193843 UTC
    , thread_cap_info = ("ThreadId 96", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 452}
    , self = 163
    , parent = Nothing
    , duration = 1.507874412000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:10:06.009293497 UTC
    , finish = 2025-09-03 12:10:07.517167909 UTC
    , thread_cap_info = ("ThreadId 223", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 68
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 552}
    , self = 73
    , parent = Nothing
    , duration = 1.560016038000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:48.128206844 UTC
    , finish = 2025-09-03 12:09:49.688222882 UTC
    , thread_cap_info = ("ThreadId 116", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 53
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 453}
    , self = 118
    , parent = Nothing
    , duration = 1.718277286000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:56.411066807 UTC
    , finish = 2025-09-03 12:09:58.129344093 UTC
    , thread_cap_info = ("ThreadId 167", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 449}
    , self = 129
    , parent = Nothing
    , duration = 1.804470206000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:59.308812126 UTC
    , finish = 2025-09-03 12:10:01.113282332 UTC
    , thread_cap_info = ("ThreadId 188", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 117
      , num_strict_rules = 67
      , num_top_rules = 67
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 852}
    , self = 65
    , parent = Nothing
    , duration = 2.069068298000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:45.909612539 UTC
    , finish = 2025-09-03 12:09:47.978680837 UTC
    , thread_cap_info = ("ThreadId 100", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 445}
    , self = 147
    , parent = Nothing
    , duration = 2.118475146000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:10:02.291826753 UTC
    , finish = 2025-09-03 12:10:04.410301899 UTC
    , thread_cap_info = ("ThreadId 206", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 96
      , num_strict_rules = 46
      , num_top_rules = 46
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 731}
    , self = 111
    , parent = Nothing
    , duration = 2.303066548000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:54.308343589 UTC
    , finish = 2025-09-03 12:09:56.611410137 UTC
    , thread_cap_info = ("ThreadId 155", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 627}
    , self = 156
    , parent = Nothing
    , duration = 2.459348647000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:10:03.588843986 UTC
    , finish = 2025-09-03 12:10:06.048192633 UTC
    , thread_cap_info = ("ThreadId 211", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 115
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 834}
    , self = 86
    , parent = Nothing
    , duration = 2.481803005000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:50.048204453 UTC
    , finish = 2025-09-03 12:09:52.530007458 UTC
    , thread_cap_info = ("ThreadId 129", 0, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 679}
    , self = 136
    , parent = Nothing
    , duration = 2.777659046000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:09:58.691971385 UTC
    , finish = 2025-09-03 12:10:01.469630431 UTC
    , thread_cap_info = ("ThreadId 184", 0, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 13
  max duration 2.812409003000
  min duration 1.196610794000
  total durat. 24.946716409000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 54
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 462}
    , self = 100
    , parent = Nothing
    , duration = 1.196610794000
    , status = Success
    , start = 2025-09-03 12:09:53.688206363 UTC
    , finish = 2025-09-03 12:09:54.884817157 UTC
    , thread_cap_info = ("ThreadId 150", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 52
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 452}
    , self = 161
    , parent = Nothing
    , duration = 1.446219417000
    , status = Success
    , start = 2025-09-03 12:10:05.958249142 UTC
    , finish = 2025-09-03 12:10:07.404468559 UTC
    , thread_cap_info = ("ThreadId 222", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 63
      , num_strict_rules = 13
      , num_top_rules = 13
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 525}
    , self = 84
    , parent = Nothing
    , duration = 1.453739790000
    , status = Success
    , start = 2025-09-03 12:09:51.048207795 UTC
    , finish = 2025-09-03 12:09:52.501947585 UTC
    , thread_cap_info = ("ThreadId 132", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 668}
    , self = 55
    , parent = Nothing
    , duration = 1.518120947000
    , status = Success
    , start = 2025-09-03 12:09:44.908389312 UTC
    , finish = 2025-09-03 12:09:46.426510259 UTC
    , thread_cap_info = ("ThreadId 95", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 68
      , num_strict_rules = 18
      , num_top_rules = 18
      , num_weak_rules = 50
      , alphabet_size = 9
      , total_length = 552}
    , self = 71
    , parent = Nothing
    , duration = 1.616717574000
    , status = Success
    , start = 2025-09-03 12:09:47.948663325 UTC
    , finish = 2025-09-03 12:09:49.565380899 UTC
    , thread_cap_info = ("ThreadId 112", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 449}
    , self = 127
    , parent = Nothing
    , duration = 1.778649140000
    , status = Success
    , start = 2025-09-03 12:09:59.188203095 UTC
    , finish = 2025-09-03 12:10:00.966852235 UTC
    , thread_cap_info = ("ThreadId 187", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 53
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 453}
    , self = 116
    , parent = Nothing
    , duration = 1.782159996000
    , status = Success
    , start = 2025-09-03 12:09:56.17065089 UTC
    , finish = 2025-09-03 12:09:57.952810886 UTC
    , thread_cap_info = ("ThreadId 166", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 51
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 50
      , alphabet_size = 7
      , total_length = 445}
    , self = 145
    , parent = Nothing
    , duration = 2.031665498000
    , status = Success
    , start = 2025-09-03 12:10:02.208212778 UTC
    , finish = 2025-09-03 12:10:04.239878276 UTC
    , thread_cap_info = ("ThreadId 205", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 117
      , num_strict_rules = 67
      , num_top_rules = 67
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 852}
    , self = 62
    , parent = Nothing
    , duration = 2.071976104000
    , status = Success
    , start = 2025-09-03 12:09:45.828207181 UTC
    , finish = 2025-09-03 12:09:47.900183285 UTC
    , thread_cap_info = ("ThreadId 99", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 96
      , num_strict_rules = 46
      , num_top_rules = 46
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 731}
    , self = 109
    , parent = Nothing
    , duration = 2.173294898000
    , status = Success
    , start = 2025-09-03 12:09:54.288204533 UTC
    , finish = 2025-09-03 12:09:56.461499431 UTC
    , thread_cap_info = ("ThreadId 154", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 115
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 834}
    , self = 82
    , parent = Nothing
    , duration = 2.478760093000
    , status = Success
    , start = 2025-09-03 12:09:49.968205383 UTC
    , finish = 2025-09-03 12:09:52.446965476 UTC
    , thread_cap_info = ("ThreadId 128", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 80
      , num_strict_rules = 30
      , num_top_rules = 30
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 627}
    , self = 153
    , parent = Nothing
    , duration = 2.586393155000
    , status = Success
    , start = 2025-09-03 12:10:03.371456908 UTC
    , finish = 2025-09-03 12:10:05.957850063 UTC
    , thread_cap_info = ("ThreadId 209", 0, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 88
      , num_strict_rules = 38
      , num_top_rules = 38
      , num_weak_rules = 50
      , alphabet_size = 10
      , total_length = 679}
    , self = 134
    , parent = Nothing
    , duration = 2.812409003000
    , status = Success
    , start = 2025-09-03 12:09:58.508212118 UTC
    , finish = 2025-09-03 12:10:01.320621121 UTC
    , thread_cap_info = ("ThreadId 183", 0, False)}
Fail : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 49
  max duration 0.744100395000
  min duration 0.000002607000
  total durat. 1.723550417000
**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 88 , num_strict_rules
F            = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size = 10 ,
F            total_length = 668} , self = 52 , parent = Nothing , duration = 1.139961752000
F            , status = Fail , start = 2025-09-03 12:09:43.911395003 UTC , finish =
F            2025-09-03 12:09:45.051356755 UTC , thread_cap_info = ("ThreadId 63", 0,
F            False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 88 , num_strict_rules
| F          = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size = 10 ,
| F          total_length = 668} , self = 51 , parent = Nothing , duration = 0.913898349000
| F          , status = Fail , start = 2025-09-03 12:09:43.911400169 UTC , finish =
| F          2025-09-03 12:09:44.825298518 UTC , thread_cap_info = ("ThreadId 64", 0,
| F          False)}
| F          
| | F        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | F        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | F        = Size { num_rules = 8652 , num_strict_rules = 6852 , num_top_rules = 6852
| | F        , num_weak_rules = 1800 , alphabet_size = 60 , total_length = 76536} ,
| | F        self = 49 , parent = Nothing , duration = 0.744100395000 , status = Fail
| | F        , start = 2025-09-03 12:09:43.940415768 UTC , finish = 2025-09-03 12:09:44.684516163
| | F        UTC , thread_cap_info = ("ThreadId 77", 3, False)}
| | F        
| | | F      Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | F      epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | F      = Size { num_rules = 8460 , num_strict_rules = 6660 , num_top_rules = 6660
| | | F      , num_weak_rules = 1800 , alphabet_size = 60 , total_length = 76368} ,
| | | F      self = 50 , parent = Nothing , duration = 0.735901814000 , status = Fail
| | | F      , start = 2025-09-03 12:09:43.948619745 UTC , finish = 2025-09-03 12:09:44.684521559
| | | F      UTC , thread_cap_info = ("ThreadId 78", 3, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 117 , num_strict_rules
| | | | F    = 67 , num_top_rules = 67 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | | F    total_length = 852} , self = 54 , parent = Nothing , duration = 1.809882222000
| | | | F    , status = Fail , start = 2025-09-03 12:09:44.008736686 UTC , finish =
| | | | F    2025-09-03 12:09:45.818618908 UTC , thread_cap_info = ("ThreadId 85", 0,
| | | | F    False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 117 , num_strict_rules
| | | | | F  = 67 , num_top_rules = 67 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | | | F  total_length = 852} , self = 53 , parent = Nothing , duration = 1.707139713000
| | | | | F  , status = Fail , start = 2025-09-03 12:09:44.038871418 UTC , finish =
| | | | | F  2025-09-03 12:09:45.746011131 UTC , thread_cap_info = ("ThreadId 86", 0,
| | | | | F  False)}
| | | | | F  
| | F | | |  
| |   F | |  
| F     | |  
| S     | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S     | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S     | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S     | |  = 88 , num_strict_rules = 38 , num_top_rules = 38 , num_weak_rules = 50
| S     | |  , alphabet_size = 10 , total_length = 668} , self = 55 , parent = Nothing
| S     | |  , duration = 1.518120947000 , status = Success , start = 2025-09-03 12:09:44.908389312
| S     | |  UTC , finish = 2025-09-03 12:09:46.426510259 UTC , thread_cap_info = ("ThreadId
| S     | |  95", 0, False)}
| S     | |  
F |     | |  
E |     | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E |     | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 88
E |     | |  , num_strict_rules = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size
E |     | |  = 10 , total_length = 668} , self = 57 , parent = Nothing , duration =
E |     | |  1.439974095000 , status = Except "AsyncCancelled" , start = 2025-09-03
E |     | |  12:09:45.148219748 UTC , finish = 2025-09-03 12:09:46.588193843 UTC , thread_cap_info
E |     | |  = ("ThreadId 96", 0, False)}
E |     | |  
| |     | F  
| |     F    
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 117 , num_strict_rules = 67 , num_top_rules = 67 , num_weak_rules = 50
| | S        , alphabet_size = 10 , total_length = 852} , self = 62 , parent = Nothing
| | S        , duration = 2.071976104000 , status = Success , start = 2025-09-03 12:09:45.828207181
| | S        UTC , finish = 2025-09-03 12:09:47.900183285 UTC , thread_cap_info = ("ThreadId
| | S        99", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 117
| | | E      , num_strict_rules = 67 , num_top_rules = 67 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 852} , self = 65 , parent = Nothing , duration =
| | | E      2.069068298000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:09:45.909612539 UTC , finish = 2025-09-03 12:09:47.978680837 UTC , thread_cap_info
| | | E      = ("ThreadId 100", 0, False)}
| | | E      
| S | |      
E   | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 68 , num_strict_rules
F   | |      = 18 , num_top_rules = 18 , num_weak_rules = 50 , alphabet_size = 9 , total_length
F   | |      = 552} , self = 63 , parent = Nothing , duration = 1.074647516000 , status
F   | |      = Fail , start = 2025-09-03 12:09:46.828214256 UTC , finish = 2025-09-03
F   | |      12:09:47.902861772 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 68 , num_strict_rules
| F | |      = 18 , num_top_rules = 18 , num_weak_rules = 50 , alphabet_size = 9 , total_length
| F | |      = 552} , self = 69 , parent = Nothing , duration = 1.189167727000 , status
| F | |      = Fail , start = 2025-09-03 12:09:46.91650536 UTC , finish = 2025-09-03
| F | |      12:09:48.105673087 UTC , thread_cap_info = ("ThreadId 107", 0, False)}
| F | |      
| | S |      
F |   |      
S |   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   |      = 68 , num_strict_rules = 18 , num_top_rules = 18 , num_weak_rules = 50
S |   |      , alphabet_size = 9 , total_length = 552} , self = 71 , parent = Nothing
S |   |      , duration = 1.616717574000 , status = Success , start = 2025-09-03 12:09:47.948663325
S |   |      UTC , finish = 2025-09-03 12:09:49.565380899 UTC , thread_cap_info = ("ThreadId
S |   |      112", 0, False)}
S |   |      
| |   E      
| F          
| E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 68
| E          , num_strict_rules = 18 , num_top_rules = 18 , num_weak_rules = 50 , alphabet_size
| E          = 9 , total_length = 552} , self = 73 , parent = Nothing , duration = 1.560016038000
| E          , status = Except "AsyncCancelled" , start = 2025-09-03 12:09:48.128206844
| E          UTC , finish = 2025-09-03 12:09:49.688222882 UTC , thread_cap_info = ("ThreadId
| E          116", 0, False)}
| E          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 115 , num_strict_rules
| | F        = 65 , num_top_rules = 65 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 834} , self = 78 , parent = Nothing , duration = 1.779091350000
| | F        , status = Fail , start = 2025-09-03 12:09:48.148591339 UTC , finish =
| | F        2025-09-03 12:09:49.927682689 UTC , thread_cap_info = ("ThreadId 117",
| | F        0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 115 , num_strict_rules
| | | F      = 65 , num_top_rules = 65 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 834} , self = 79 , parent = Nothing , duration = 1.798949354000
| | | F      , status = Fail , start = 2025-09-03 12:09:48.155565333 UTC , finish =
| | | F      2025-09-03 12:09:49.954514687 UTC , thread_cap_info = ("ThreadId 118",
| | | F      0, False)}
| | | F      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
F   | |      = 13 , num_top_rules = 13 , num_weak_rules = 50 , alphabet_size = 9 , total_length
F   | |      = 525} , self = 80 , parent = Nothing , duration = 1.182641904000 , status
F   | |      = Fail , start = 2025-09-03 12:09:49.80928246 UTC , finish = 2025-09-03
F   | |      12:09:50.991924364 UTC , thread_cap_info = ("ThreadId 126", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 63 , num_strict_rules
| F | |      = 13 , num_top_rules = 13 , num_weak_rules = 50 , alphabet_size = 9 , total_length
| F | |      = 525} , self = 81 , parent = Nothing , duration = 1.262949455000 , status
| F | |      = Fail , start = 2025-09-03 12:09:49.828956981 UTC , finish = 2025-09-03
| F | |      12:09:51.091906436 UTC , thread_cap_info = ("ThreadId 127", 0, False)}
| F | |      
| | F |      
| |   F      
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 115 , num_strict_rules = 65 , num_top_rules = 65 , num_weak_rules = 50
| | S        , alphabet_size = 10 , total_length = 834} , self = 82 , parent = Nothing
| | S        , duration = 2.478760093000 , status = Success , start = 2025-09-03 12:09:49.968205383
| | S        UTC , finish = 2025-09-03 12:09:52.446965476 UTC , thread_cap_info = ("ThreadId
| | S        128", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 115
| | | E      , num_strict_rules = 65 , num_top_rules = 65 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 834} , self = 86 , parent = Nothing , duration =
| | | E      2.481803005000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:09:50.048204453 UTC , finish = 2025-09-03 12:09:52.530007458 UTC , thread_cap_info
| | | E      = ("ThreadId 129", 0, False)}
| | | E      
F | | |      
S | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |      = 63 , num_strict_rules = 13 , num_top_rules = 13 , num_weak_rules = 50
S | | |      , alphabet_size = 9 , total_length = 525} , self = 84 , parent = Nothing
S | | |      , duration = 1.453739790000 , status = Success , start = 2025-09-03 12:09:51.048207795
S | | |      UTC , finish = 2025-09-03 12:09:52.501947585 UTC , thread_cap_info = ("ThreadId
S | | |      132", 0, False)}
S | | |      
| F | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 63
| E | |      , num_strict_rules = 13 , num_top_rules = 13 , num_weak_rules = 50 , alphabet_size
| E | |      = 9 , total_length = 525} , self = 87 , parent = Nothing , duration = 1.362763468000
| E | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:09:51.18820933
| E | |      UTC , finish = 2025-09-03 12:09:52.550972798 UTC , thread_cap_info = ("ThreadId
| E | |      133", 0, False)}
| E | |      
| | S |      
S |   |      
  |   E      
  E          
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
F            = 4 , num_top_rules = 4 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F            = 462} , self = 96 , parent = Nothing , duration = 1.071667260000 , status
F            = Fail , start = 2025-09-03 12:09:52.561417977 UTC , finish = 2025-09-03
F            12:09:53.633085237 UTC , thread_cap_info = ("ThreadId 143", 0, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F          = 4 , num_top_rules = 4 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F          = 462} , self = 97 , parent = Nothing , duration = 1.103224121000 , status
| F          = Fail , start = 2025-09-03 12:09:52.568192911 UTC , finish = 2025-09-03
| F          12:09:53.671417032 UTC , thread_cap_info = ("ThreadId 145", 0, False)}
| F          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 96 , num_strict_rules
| | F        = 46 , num_top_rules = 46 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 731} , self = 99 , parent = Nothing , duration = 1.625052337000
| | F        , status = Fail , start = 2025-09-03 12:09:52.630205132 UTC , finish =
| | F        2025-09-03 12:09:54.255257469 UTC , thread_cap_info = ("ThreadId 146",
| | F        0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 96 , num_strict_rules
| | | F      = 46 , num_top_rules = 46 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 731} , self = 98 , parent = Nothing , duration = 1.544575658000
| | | F      , status = Fail , start = 2025-09-03 12:09:52.688426169 UTC , finish =
| | | F      2025-09-03 12:09:54.233001827 UTC , thread_cap_info = ("ThreadId 147",
| | | F      0, False)}
| | | F      
F | | |      
  F | |      
S   | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |      = 54 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 50 ,
S   | |      alphabet_size = 7 , total_length = 462} , self = 100 , parent = Nothing
S   | |      , duration = 1.196610794000 , status = Success , start = 2025-09-03 12:09:53.688206363
S   | |      UTC , finish = 2025-09-03 12:09:54.884817157 UTC , thread_cap_info = ("ThreadId
S   | |      150", 0, False)}
S   | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 54
| E | |      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 462} , self = 102 , parent = Nothing , duration =
| E | |      1.279982655000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E | |      12:09:53.768213636 UTC , finish = 2025-09-03 12:09:55.048196291 UTC , thread_cap_info
| E | |      = ("ThreadId 151", 0, False)}
| E | |      
| | | F      
| | F        
| | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S        = 96 , num_strict_rules = 46 , num_top_rules = 46 , num_weak_rules = 50
| | S        , alphabet_size = 10 , total_length = 731} , self = 109 , parent = Nothing
| | S        , duration = 2.173294898000 , status = Success , start = 2025-09-03 12:09:54.288204533
| | S        UTC , finish = 2025-09-03 12:09:56.461499431 UTC , thread_cap_info = ("ThreadId
| | S        154", 0, False)}
| | S        
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 96
| | | E      , num_strict_rules = 46 , num_top_rules = 46 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 731} , self = 111 , parent = Nothing , duration =
| | | E      2.303066548000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:09:54.308343589 UTC , finish = 2025-09-03 12:09:56.611410137 UTC , thread_cap_info
| | | E      = ("ThreadId 155", 0, False)}
| | | E      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 53 , num_strict_rules
F   | |      = 3 , num_top_rules = 3 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 453} , self = 107 , parent = Nothing , duration = 0.784470221000 , status
F   | |      = Fail , start = 2025-09-03 12:09:55.309326002 UTC , finish = 2025-09-03
F   | |      12:09:56.093796223 UTC , thread_cap_info = ("ThreadId 161", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 53 , num_strict_rules
| F | |      = 3 , num_top_rules = 3 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 453} , self = 108 , parent = Nothing , duration = 0.963829216000 , status
| F | |      = Fail , start = 2025-09-03 12:09:55.368201547 UTC , finish = 2025-09-03
| F | |      12:09:56.332030763 UTC , thread_cap_info = ("ThreadId 162", 0, False)}
| F | |      
F | | |      
S | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |      = 53 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 50 ,
S | | |      alphabet_size = 7 , total_length = 453} , self = 116 , parent = Nothing
S | | |      , duration = 1.782159996000 , status = Success , start = 2025-09-03 12:09:56.17065089
S | | |      UTC , finish = 2025-09-03 12:09:57.952810886 UTC , thread_cap_info = ("ThreadId
S | | |      166", 0, False)}
S | | |      
| F | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 53
| E | |      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 453} , self = 118 , parent = Nothing , duration =
| E | |      1.718277286000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E | |      12:09:56.411066807 UTC , finish = 2025-09-03 12:09:58.129344093 UTC , thread_cap_info
| E | |      = ("ThreadId 167", 0, False)}
| E | |      
| | S |      
| |   E      
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 88 , num_strict_rules
| | F        = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 679} , self = 123 , parent = Nothing , duration = 1.564151692000
| | F        , status = Fail , start = 2025-09-03 12:09:56.84872414 UTC , finish = 2025-09-03
| | F        12:09:58.412875832 UTC , thread_cap_info = ("ThreadId 172", 0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 88 , num_strict_rules
| | | F      = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 679} , self = 124 , parent = Nothing , duration = 1.726137528000
| | | F      , status = Fail , start = 2025-09-03 12:09:56.869937351 UTC , finish =
| | | F      2025-09-03 12:09:58.596074879 UTC , thread_cap_info = ("ThreadId 173",
| | | F      0, False)}
| | | F      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
F   | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 449} , self = 125 , parent = Nothing , duration = 0.858827143000 , status
F   | |      = Fail , start = 2025-09-03 12:09:58.230507215 UTC , finish = 2025-09-03
F   | |      12:09:59.089334358 UTC , thread_cap_info = ("ThreadId 181", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| F | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 449} , self = 126 , parent = Nothing , duration = 0.962898692000 , status
| F | |      = Fail , start = 2025-09-03 12:09:58.251690882 UTC , finish = 2025-09-03
| F | |      12:09:59.214589574 UTC , thread_cap_info = ("ThreadId 182", 0, False)}
| F | |      
| | F |      
| | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |      = 88 , num_strict_rules = 38 , num_top_rules = 38 , num_weak_rules = 50
| | S |      , alphabet_size = 10 , total_length = 679} , self = 134 , parent = Nothing
| | S |      , duration = 2.812409003000 , status = Success , start = 2025-09-03 12:09:58.508212118
| | S |      UTC , finish = 2025-09-03 12:10:01.320621121 UTC , thread_cap_info = ("ThreadId
| | S |      183", 0, False)}
| | S |      
| | | F      
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 88
| | | E      , num_strict_rules = 38 , num_top_rules = 38 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 679} , self = 136 , parent = Nothing , duration =
| | | E      2.777659046000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:09:58.691971385 UTC , finish = 2025-09-03 12:10:01.469630431 UTC , thread_cap_info
| | | E      = ("ThreadId 184", 0, False)}
| | | E      
F | | |      
S | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |      = 51 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 ,
S | | |      alphabet_size = 7 , total_length = 449} , self = 127 , parent = Nothing
S | | |      , duration = 1.778649140000 , status = Success , start = 2025-09-03 12:09:59.188203095
S | | |      UTC , finish = 2025-09-03 12:10:00.966852235 UTC , thread_cap_info = ("ThreadId
S | | |      187", 0, False)}
S | | |      
| F | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 51
| E | |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 449} , self = 129 , parent = Nothing , duration =
| E | |      1.804470206000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E | |      12:09:59.308812126 UTC , finish = 2025-09-03 12:10:01.113282332 UTC , thread_cap_info
| E | |      = ("ThreadId 188", 0, False)}
| E | |      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
F   | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 445} , self = 142 , parent = Nothing , duration = 0.923611343000 , status
F   | |      = Fail , start = 2025-09-03 12:10:01.269552308 UTC , finish = 2025-09-03
F   | |      12:10:02.193163651 UTC , thread_cap_info = ("ThreadId 195", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 51 , num_strict_rules
| F | |      = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 445} , self = 141 , parent = Nothing , duration = 0.872139312000 , status
| F | |      = Fail , start = 2025-09-03 12:10:01.288204843 UTC , finish = 2025-09-03
| F | |      12:10:02.160344155 UTC , thread_cap_info = ("ThreadId 196", 0, False)}
| F | |      
| | S |      
| |   E      
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
| | F        = 30 , num_top_rules = 30 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 627} , self = 143 , parent = Nothing , duration = 1.587445488000
| | F        , status = Fail , start = 2025-09-03 12:10:01.691951744 UTC , finish =
| | F        2025-09-03 12:10:03.279397232 UTC , thread_cap_info = ("ThreadId 201",
| | F        0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
| | | F      = 30 , num_top_rules = 30 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 627} , self = 144 , parent = Nothing , duration = 1.797704951000
| | | F      , status = Fail , start = 2025-09-03 12:10:01.696697264 UTC , finish =
| | | F      2025-09-03 12:10:03.494402215 UTC , thread_cap_info = ("ThreadId 202",
| | | F      0, False)}
| | | F      
| F | |      
F   | |      
S   | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | |      = 51 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 ,
S   | |      alphabet_size = 7 , total_length = 445} , self = 145 , parent = Nothing
S   | |      , duration = 2.031665498000 , status = Success , start = 2025-09-03 12:10:02.208212778
S   | |      UTC , finish = 2025-09-03 12:10:04.239878276 UTC , thread_cap_info = ("ThreadId
S   | |      205", 0, False)}
S   | |      
| E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 51
| E | |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 50 , alphabet_size
| E | |      = 7 , total_length = 445} , self = 147 , parent = Nothing , duration =
| E | |      2.118475146000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E | |      12:10:02.291826753 UTC , finish = 2025-09-03 12:10:04.410301899 UTC , thread_cap_info
| E | |      = ("ThreadId 206", 0, False)}
| E | |      
| | F |      
| | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |      = 80 , num_strict_rules = 30 , num_top_rules = 30 , num_weak_rules = 50
| | S |      , alphabet_size = 10 , total_length = 627} , self = 153 , parent = Nothing
| | S |      , duration = 2.586393155000 , status = Success , start = 2025-09-03 12:10:03.371456908
| | S |      UTC , finish = 2025-09-03 12:10:05.957850063 UTC , thread_cap_info = ("ThreadId
| | S |      209", 0, False)}
| | S |      
| | | F      
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 80
| | | E      , num_strict_rules = 30 , num_top_rules = 30 , num_weak_rules = 50 , alphabet_size
| | | E      = 10 , total_length = 627} , self = 156 , parent = Nothing , duration =
| | | E      2.459348647000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E      12:10:03.588843986 UTC , finish = 2025-09-03 12:10:06.048192633 UTC , thread_cap_info
| | | E      = ("ThreadId 211", 0, False)}
| | | E      
S | | |      
  E | |      
F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
F   | |      = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
F   | |      = 452} , self = 152 , parent = Nothing , duration = 1.277615707000 , status
F   | |      = Fail , start = 2025-09-03 12:10:04.672859202 UTC , finish = 2025-09-03
F   | |      12:10:05.950474909 UTC , thread_cap_info = ("ThreadId 216", 0, False)}
F   | |      
| F | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 52 , num_strict_rules
| F | |      = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size = 7 , total_length
| F | |      = 452} , self = 155 , parent = Nothing , duration = 1.269168854000 , status
| F | |      = Fail , start = 2025-09-03 12:10:04.693388441 UTC , finish = 2025-09-03
| F | |      12:10:05.962557295 UTC , thread_cap_info = ("ThreadId 217", 0, False)}
| F | |      
F | | |      
  | S |      
S |   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |   |      = 52 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 ,
S |   |      alphabet_size = 7 , total_length = 452} , self = 161 , parent = Nothing
S |   |      , duration = 1.446219417000 , status = Success , start = 2025-09-03 12:10:05.958249142
S |   |      UTC , finish = 2025-09-03 12:10:07.404468559 UTC , thread_cap_info = ("ThreadId
S |   |      222", 0, False)}
S |   |      
| F   |      
| E   |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 52
| E   |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 50 , alphabet_size
| E   |      = 7 , total_length = 452} , self = 163 , parent = Nothing , duration =
| E   |      1.507874412000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E   |      12:10:06.009293497 UTC , finish = 2025-09-03 12:10:07.517167909 UTC , thread_cap_info
| E   |      = ("ThreadId 223", 0, False)}
| E   |      
| |   E      
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 71 , num_strict_rules
| | F        = 21 , num_top_rules = 21 , num_weak_rules = 50 , alphabet_size = 10 ,
| | F        total_length = 566} , self = 166 , parent = Nothing , duration = 1.324114214000
| | F        , status = Fail , start = 2025-09-03 12:10:06.288789361 UTC , finish =
| | F        2025-09-03 12:10:07.612903575 UTC , thread_cap_info = ("ThreadId 227",
| | F        0, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 71 , num_strict_rules
| | | F      = 21 , num_top_rules = 21 , num_weak_rules = 50 , alphabet_size = 10 ,
| | | F      total_length = 566} , self = 167 , parent = Nothing , duration = 1.314425220000
| | | F      , status = Fail , start = 2025-09-03 12:10:06.308200202 UTC , finish =
| | | F      2025-09-03 12:10:07.622625422 UTC , thread_cap_info = ("ThreadId 228",
| | | F      0, False)}
| | | F      
S | | |      
  E | |      
    F |      
      F      
