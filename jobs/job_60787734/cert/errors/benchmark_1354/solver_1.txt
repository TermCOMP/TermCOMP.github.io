last 3805 length 17165
CNF 3805 vars 17165 clauses
last 4343 length 21665
CNF 4343 vars 21665 clauses
last 10041 length 48020
last 287 length 1163
CNF 10041 vars 48020 clauses
last 311 length 1244
CNF 287 vars 1163 clauses
CNF 311 vars 1244 clauses
last 553 length 2272
last 521 length 2271
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1547, clauses: 5490
last 1547 length 5490
CNF 521 vars 2271 clauses
CNF 553 vars 2272 clauses
CNF 1547 vars 5490 clauses
last 12800 length 55134
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4248, clauses: 17383
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2351, clauses: 8514
last 13271 length 56567
last 10057 length 46564
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5084, clauses: 20697
last 4248 length 17383
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1547, clauses: 5490, status: Satisfied, time: 0.297644381s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 22526, clauses: 88635
last 2351 length 8514
CNF 12800 vars 55134 clauses
CNF 13271 vars 56567 clauses
last 5084 length 20697
last 22526 length 88635
**************************************************CNF 2351 vars 8514 clauses
CNF 10057 vars 46564 clauses

CNF 5084 vars 20697 clauses
summary
**************************************************
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       weights
SRS with 4 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 5 letters       Usable
  SRS with 2 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
  SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 strict rules and 2 weak rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b] {- Input 0 -}
  [b, c] -> [a] {- Input 1 -}
  [c, b] -> [b, c, c, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [c#, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [c#, b] |-> [b#, c, c, a] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [b] {- DP Nontop (Input 0) -}
      [b, c] ->= [a] {- DP Nontop (Input 1) -}
      [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Input 0) -}
  [b#, c] |-> [a#] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [c#, b] |-> [c#, c, a] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 15A 16A 18A - \
        | 15A 16A 18A - |
        | 15A 16A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [c, b] ->= [b, c, c, a] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [b] {- DP Nontop (Input 0) -}
  [b, c] ->= [a] {- DP Nontop (Input 1) -}
reason
  (a, 2/1)
  (b, 3/1)
  (c, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,3)\Deepee(6/3,6)\Weight(4/3,6)\EDG[(2/3,5)\Usable(2,4)\Weight(0,0)\EDG[],(2/3,4)\Matrix{\Arctic}{3}\EDG(1/3,4)\Usable(1/2,4)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E          = 12} , self = 71 , parent = Nothing , duration = 0.754647471000 , status
E          = Except "AsyncCancelled" , start = 2025-09-03 11:43:41.773865229 UTC ,
E          finish = 2025-09-03 11:43:42.5285127 UTC , thread_cap_info = ("ThreadId
E          48", 1, False)}
E          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 45 , parent = Nothing , duration = 0.114175063000 , status
| F        = Fail , start = 2025-09-03 11:43:41.784414982 UTC , finish = 2025-09-03
| F        11:43:41.898590045 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 44 , parent = Nothing , duration = 0.100551432000 , status
| | F      = Fail , start = 2025-09-03 11:43:41.795439683 UTC , finish = 2025-09-03
| | F      11:43:41.895991115 UTC , thread_cap_info = ("ThreadId 72", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 96 , num_strict_rules
| | | F    = 69 , num_top_rules = 69 , num_weak_rules = 27 , alphabet_size = 18 ,
| | | F    total_length = 534} , self = 59 , parent = Nothing , duration = 0.224326373000
| | | F    , status = Fail , start = 2025-09-03 11:43:41.863553784 UTC , finish =
| | | F    2025-09-03 11:43:42.087880157 UTC , thread_cap_info = ("ThreadId 80", 2,
| | | F    False)}
| | | F    
| | F |    
| F   |    
|     F    
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F        = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size = 6 , total_length
| F        = 36} , self = 63 , parent = Nothing , duration = 0.240623651000 , status
| F        = Fail , start = 2025-09-03 11:43:42.0956634 UTC , finish = 2025-09-03
| F        11:43:42.336287051 UTC , thread_cap_info = ("ThreadId 107", 1, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | F      = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size = 6 , total_length
| | F      = 36} , self = 62 , parent = Nothing , duration = 0.137583455000 , status
| | F      = Fail , start = 2025-09-03 11:43:42.100950677 UTC , finish = 2025-09-03
| | F      11:43:42.238534132 UTC , thread_cap_info = ("ThreadId 109", 1, False)}
| | F      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | S    = 4 , total_length = 21} , self = 64 , parent = Nothing , duration = 0.393574882000
| | | S    , status = Success , start = 2025-09-03 11:43:42.134553123 UTC , finish
| | | S    = 2025-09-03 11:43:42.528128005 UTC , thread_cap_info = ("ThreadId 111",
| | | S    1, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | E  = 4 , total_length = 21} , self = 66 , parent = Nothing , duration = 0.380612378000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:43:42.147627147
| | | | E  UTC , finish = 2025-09-03 11:43:42.528239525 UTC , thread_cap_info = ("ThreadId
| | | | E  112", 1, False)}
| | | | E  
| | F | |  
| F   | |  
|     S |  
|       E  
E          
