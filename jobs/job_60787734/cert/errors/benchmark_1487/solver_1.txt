last 2572 length 10815
last 4329 length 21332
CNF 2572 vars 10815 clauses
last 1347 length 5682
CNF 1347 vars 5682 clauses
last 2823 length 11990
CNF 4329 vars 21332 clauses
last 972 length 4113
CNF 972 vars 4113 clauses
CNF 2823 vars 11990 clauses
last 4582 length 20719
last 1300 length 5786
CNF 4582 vars 20719 clauses
CNF 1300 vars 5786 clauses
last 3495 length 15037
last 3585 length 15920
CNF 3585 vars 15920 clauses
last 1623 length 6863
CNF 1623 vars 6863 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1975, clauses: 7342
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2479, clauses: 9238
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7401, clauses: 31049
last 4329 length 21332

last 4582 length 20719
last 1975 length 7342
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9201, clauses: 38699
last 2479 length 9238
last 7401 length 31049
CNF 1975 vars 7342 clauses
CNF 4582 vars 20719 clauses
CNF 4329 vars 21332 clauses
last 9201 length 38699
summarylast 4516 length 20726

CNF 2479 vars 9238 clauses
CNF 7401 vars 31049 clauses
last 4293 length 19372
CNF 9201 vars 38699 clauses
CNF 4516 vars 20726 clauses
**************************************************CNF 4293 vars 19372 clauses

SRS with 4 rules on 2 letters       split
2 sub-proofs
  1 SRS with 4 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 16 rules on 4 letters       weights
  SRS with 10 rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 6 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       no strict rules

  2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, b, b] -> [b, b, a, b] {- Input 0 -}
  [a, b, a, a] -> [b, a, b, a] {- Input 1 -}
  [b, b, a, a] -> [b, a, a, a] {- Input 2 -}
  [a, b, b, b] -> [a, b, a, a] {- Input 3 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, b, b, b] -> [b, b, a, b] {- Input 0 -}
  [a, b, a, a] -> [b, a, b, a] {- Input 1 -}
  [b, b, a, a] -> [b, a, a, a] {- Input 2 -}
  [a, b, b, b] -> [a, b, a, a] {- Input 3 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, b], [b, b], [b, a]] -> [ [a, b] , [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b], [b, b], [b, b]] -> [ [a, b] , [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, a]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, b]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, a], [a, a], [a, a]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, b], [b, a], [a, a], [a, b]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, b], [b, a], [a, a], [a, a]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, a], [a, a], [a, b]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, a]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, b]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, a]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, b]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, a], [a, b], [b, b], [b, b], [b, b]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, b]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, b], [b, b], [b, b], [b, a]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, b]] -> [ [b, b] , [b, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, a], [a, a], [a, a]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, b], [b, a], [a, a], [a, b]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, a]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, b]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, a]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, b]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, a], [a, a], [a, a]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, b]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, a]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, b]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[a, a], [a, b], [b, b], [b, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[b, a], [a, b], [b, b], [b, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 3)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (4,2)\Split[(4,2)\TileAllAll{2}(16,4)\Weight(10,4)\Matrix{\Natural}{2}(6,4)\Weight(0,0)[],(0,0)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1975, clauses: 7342, status: Unsatisfied, time: 0.174282586s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 32} , self
F              = 52 , parent = Nothing , duration = 0.212029121000 , status = Fail , start
F              = 2025-09-03 12:02:05.296242408 UTC , finish = 2025-09-03 12:02:05.508271529
F              UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F            = 32} , self = 50 , parent = Nothing , duration = 0.193705922000 , status
| F            = Fail , start = 2025-09-03 12:02:05.296308384 UTC , finish = 2025-09-03
| F            12:02:05.490014306 UTC , thread_cap_info = ("ThreadId 33", 2, False)}
| F            
| | S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S          = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | S          = 3 , num_top_rules = 3 , num_weak_rules = 10 , alphabet_size = 5 , total_length
| | S          = 130} , self = 63 , parent = Nothing , duration = 0.276697506000 , status
| | S          = Success , start = 2025-09-03 12:02:05.313787293 UTC , finish = 2025-09-03
| | S          12:02:05.590484799 UTC , thread_cap_info = ("ThreadId 65", 1, False)}
| | S          
| | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | | E        = 3 , num_top_rules = 3 , num_weak_rules = 10 , alphabet_size = 5 , total_length
| | | E        = 130} , self = 65 , parent = Nothing , duration = 0.280075993000 , status
| | | E        = Except "AsyncCancelled" , start = 2025-09-03 12:02:05.314145783 UTC ,
| | | E        finish = 2025-09-03 12:02:05.594221776 UTC , thread_cap_info = ("ThreadId
| | | E        66", 1, False)}
| | | E        
| | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | E      = 10 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | E      = 100} , self = 61 , parent = Nothing , duration = 0.202222104000 , status
| | | | E      = Except "AsyncCancelled" , start = 2025-09-03 12:02:05.35609504 UTC ,
| | | | E      finish = 2025-09-03 12:02:05.558317144 UTC , thread_cap_info = ("ThreadId
| | | | E      75", 2, False)}
| | | | E      
| | | | | S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | S    = 10 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | | S    = 100} , self = 51 , parent = Nothing , duration = 0.125774497000 , status
| | | | | S    = Success , start = 2025-09-03 12:02:05.377342289 UTC , finish = 2025-09-03
| | | | | S    12:02:05.503116786 UTC , thread_cap_info = ("ThreadId 77", 2, False)}
| | | | | S    
| | | | | | S  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S  = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | | | S  = 1 , num_top_rules = 1 , num_weak_rules = 10 , alphabet_size = 5 , total_length
| | | | | | S  = 110} , self = 73 , parent = Nothing , duration = 0.241820029000 , status
| | | | | | S  = Success , start = 2025-09-03 12:02:05.417190348 UTC , finish = 2025-09-03
| | | | | | S  12:02:05.659010377 UTC , thread_cap_info = ("ThreadId 86", 1, False)}
| | | | | | S  
| F | | | | |  
|   | | | S |  
F   | | |   |  
F   | | |   |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F   | | |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | |   |  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F   | | |   |  = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
F   | | |   |  = 48} , self = 72 , parent = Nothing , duration = 0.103404488000 , status
F   | | |   |  = Fail , start = 2025-09-03 12:02:05.55529116 UTC , finish = 2025-09-03
F   | | |   |  12:02:05.658695648 UTC , thread_cap_info = ("ThreadId 107", 0, False)}
F   | | |   |  
|   | | E   |  
|   S |     |  
|     E     |  
F           |  
            S  
