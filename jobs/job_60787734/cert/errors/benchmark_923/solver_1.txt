last 2120 length 9074
CNF 2120 vars 9074 clauses
last 2047 length 9306
last 1552 length 6376
CNF 2047 vars 9306 clauses
last 1846 length 8004
CNF 1552 vars 6376 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 24111
CNF 1846 vars 8004 clauses
last 6674 length 24111
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6724, clauses: 23929
last 6724 length 23929
CNF 6674 vars 24111 clauses
CNF 6724 vars 23929 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 24111, status: Satisfied, time: 0.703099684s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6724, clauses: 23929, status: Unsatisfied, time: 0.541950695s
last 2056 length 8834
CNF 2056 vars 8834 clauses
last 2019 length 9198
CNF 2019 vars 9198 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14968, clauses: 60084
last 14968 length 60084
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23993, clauses: 100047
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6266, clauses: 22626
CNF 14968 vars 60084 clauses
last 23993 length 100047
last 6266 length 22626
CNF 6266 vars 22626 clauses
CNF 23993 vars 100047 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6266, clauses: 22626, status: Satisfied, time: 0.554656306s
last 2012 length 8660
last 1961 length 8966
CNF 1961 vars 8966 clauses
CNF 2012 vars 8660 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5962, clauses: 21493
last 5962 length 21493
CNF 5962 vars 21493 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5962, clauses: 21493, status: Satisfied, time: 0.27842356s
**************************************************
summary
**************************************************
SRS with 10 rules on 8 letters       context
SRS with 24 rules on 8 letters       mirror
SRS with 24 rules on 8 letters       DP
SRS with 19 strict rules and 24 weak rules on 12 letters       weights
SRS with 8 strict rules and 24 weak rules on 11 letters       EDG
2 sub-proofs
  1 SRS with 5 strict rules and 24 weak rules on 10 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 3 strict rules and 24 weak rules on 9 letters       EDG
  SRS with 3 strict rules and 24 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 24 weak rules on 9 letters       EDG
  SRS with 2 strict rules and 24 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 24 weak rules on 9 letters       EDG
  SRS with 1 strict rules and 24 weak rules on 9 letters       Usable
  SRS with 1 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 24 weak rules on 9 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [p, 0] -> [0, s, s, p] {- Input 0 -}
  [p, s] -> [] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [g, s] {- Input 3 -}
  [g] -> [i, s, half] {- Input 4 -}
  [i] -> [f, p] {- Input 5 -}
  [half, 0] -> [0, s, s, half] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [0] -> [] {- Input 8 -}
  [rd, 0] -> [0, 0, 0, 0, 0, 0, rd] {- Input 9 -}
reason
  context
   property Termination
has value Just True
for SRS
  [p, 0] -> [0, s, s, p] {- Input 0 -}
  [s, p, s] -> [s] {- Input 1 -}
  [i, p, s] -> [i] {- Input 1 -}
  [p, p, s] -> [p] {- Input 1 -}
  [g, p, s] -> [g] {- Input 1 -}
  [f, p, s] -> [f] {- Input 1 -}
  [0, p, s] -> [0] {- Input 1 -}
  [half, p, s] -> [half] {- Input 1 -}
  [rd, p, s] -> [rd] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [g, s] {- Input 3 -}
  [g] -> [i, s, half] {- Input 4 -}
  [i] -> [f, p] {- Input 5 -}
  [half, 0] -> [0, s, s, half] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [s, 0] -> [s] {- Input 8 -}
  [i, 0] -> [i] {- Input 8 -}
  [p, 0] -> [p] {- Input 8 -}
  [g, 0] -> [g] {- Input 8 -}
  [f, 0] -> [f] {- Input 8 -}
  [0, 0] -> [0] {- Input 8 -}
  [half, 0] -> [half] {- Input 8 -}
  [rd, 0] -> [rd] {- Input 8 -}
  [rd, 0] -> [0, 0, 0, 0, 0, 0, rd] {- Input 9 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, p] -> [p, s, s, 0] {- Mirror (Input 0) -}
  [s, p, s] -> [s] {- Mirror (Input 1) -}
  [s, p, i] -> [i] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 1) -}
  [s, p, g] -> [g] {- Mirror (Input 1) -}
  [s, p, f] -> [f] {- Mirror (Input 1) -}
  [s, p, 0] -> [0] {- Mirror (Input 1) -}
  [s, p, half] -> [half] {- Mirror (Input 1) -}
  [s, p, rd] -> [rd] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 2) -}
  [s, f] -> [s, g] {- Mirror (Input 3) -}
  [g] -> [half, s, i] {- Mirror (Input 4) -}
  [i] -> [p, f] {- Mirror (Input 5) -}
  [0, half] -> [half, s, s, 0] {- Mirror (Input 6) -}
  [s, s, half] -> [s, s, p, p, half, s] {- Mirror (Input 7) -}
  [0, s] -> [s] {- Mirror (Input 8) -}
  [0, i] -> [i] {- Mirror (Input 8) -}
  [0, p] -> [p] {- Mirror (Input 8) -}
  [0, g] -> [g] {- Mirror (Input 8) -}
  [0, f] -> [f] {- Mirror (Input 8) -}
  [0, 0] -> [0] {- Mirror (Input 8) -}
  [0, half] -> [half] {- Mirror (Input 8) -}
  [0, rd] -> [rd] {- Mirror (Input 8) -}
  [0, rd] -> [rd, 0, 0, 0, 0, 0, 0] {- Mirror (Input 9) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, p, p, half, s] {- DP (Top 1) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [g#] |-> [s#, i] {- DP (Top 1) (Mirror (Input 4)) -}
  [g#] |-> [i#] {- DP (Top 2) (Mirror (Input 4)) -}
  [0#, p] |-> [s#, s, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, p] |-> [s#, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, half] |-> [s#, s, 0] {- DP (Top 1) (Mirror (Input 6)) -}
  [0#, half] |-> [s#, 0] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, half] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
  [0#, rd] |-> [0#] {- DP (Top 6) (Mirror (Input 9)) -}
  [0#, rd] |-> [0#, 0] {- DP (Top 5) (Mirror (Input 9)) -}
  [0#, rd] |-> [0#, 0, 0] {- DP (Top 4) (Mirror (Input 9)) -}
  [0#, rd] |-> [0#, 0, 0, 0] {- DP (Top 3) (Mirror (Input 9)) -}
  [0#, rd] |-> [0#, 0, 0, 0, 0] {- DP (Top 2) (Mirror (Input 9)) -}
  [0#, rd] |-> [0#, 0, 0, 0, 0, 0] {- DP (Top 1) (Mirror (Input 9)) -}
reason
  (s, 0/1)
  (i, 0/1)
  (p, 0/1)
  (g, 0/1)
  (f, 0/1)
  (0, 0/1)
  (half, 0/1)
  (rd, 2/1)
  (s#, 1/1)
  (i#, 0/1)
  (g#, 1/1)
  (0#, 2/1)
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, p, p, half, s] {- DP (Top 1) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [g#] |-> [s#, i] {- DP (Top 1) (Mirror (Input 4)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, half] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [g#] |-> [s#, i] {- DP (Top 1) (Mirror (Input 4)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( s
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( i
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( p
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( g
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( f
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( 0
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( half
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( rd
  , Wk  / 15A 15A 15A - \
        | 15A 15A 15A - |
        | 12A 12A 12A - |
        \ -   -   -   - / )
  ( s#
  , Wk  / 7A 9A 10A - \
        | 7A 9A 10A - |
        | 7A 9A 10A - |
        \ -  -  -   - / )
  ( g#
  , Wk  / 11A 11A 14A - \
        | 11A 11A 14A - |
        | 11A 11A 14A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( s
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( i
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( p
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( g
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( f
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( half
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( rd
  , Wk  / 12A 12A 12A - \
        | 9A  12A 12A - |
        | 9A  12A 12A - |
        \ -   -   -   - / )
  ( s#
  , Wk  / 11A 13A 14A - \
        | 11A 13A 14A - |
        | 11A 13A 14A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( s
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( i
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 9A  9A  12A - |
        \ -   -   -   - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( g
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
  ( f
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( half
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( rd
  , Wk  / 15A 15A 15A - \
        | 12A 12A 12A - |
        | 12A 12A 12A - |
        \ -   -   -   - / )
  ( s#
  , Wk  / 14A 16A 17A - \
        | 14A 16A 17A - |
        | 14A 16A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
      [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
      [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
      [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
      [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
      [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
      [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
      [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
      [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
      [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
      [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
      [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
      [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
      [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
      [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
      [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
reason
  (s, 1/1)
  (half, 1/1)
  (s#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, half] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
  [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
  [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
  [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
  [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
  [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
  [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
  [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
  [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
      [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, i] ->= [i] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
      [s, f] ->= [s, g] {- DP Nontop (Mirror (Input 3)) -}
      [g] ->= [half, s, i] {- DP Nontop (Mirror (Input 4)) -}
      [i] ->= [p, f] {- DP Nontop (Mirror (Input 5)) -}
      [0, half] ->= [half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
      [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
      [0, s] ->= [s] {- DP Nontop (Mirror (Input 8)) -}
      [0, i] ->= [i] {- DP Nontop (Mirror (Input 8)) -}
      [0, p] ->= [p] {- DP Nontop (Mirror (Input 8)) -}
      [0, g] ->= [g] {- DP Nontop (Mirror (Input 8)) -}
      [0, f] ->= [f] {- DP Nontop (Mirror (Input 8)) -}
      [0, 0] ->= [0] {- DP Nontop (Mirror (Input 8)) -}
      [0, half] ->= [half] {- DP Nontop (Mirror (Input 8)) -}
      [0, rd] ->= [rd] {- DP Nontop (Mirror (Input 8)) -}
      [0, rd] ->= [rd, 0, 0, 0, 0, 0, 0] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, half] |-> [0#] {- DP (Top 3) (Mirror (Input 6)) -}
reason
  (p, 1/1)
  (half, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (10,8)\Context\Mirror(24,8)\Deepee(19/24,12)\Weight(8/24,11)\EDG[(5/24,10)\Matrix{\Arctic}{3}\EDG(3/24,9)\Matrix{\Arctic}{3}\EDG(2/24,9)\Matrix{\Arctic}{3}\EDG(1/24,9)\Usable(1,3)\Weight(0,0)\EDG[],(2/24,9)\Usable(2,3)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.723226030000
  min duration 0.054012047000
  total durat. 1.452093824000
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.047126651000
  min duration 3.019741214000
  total durat. 6.066867865000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 169
      , num_strict_rules = 10
      , num_top_rules = 10
      , num_weak_rules = 159
      , alphabet_size = 38
      , total_length = 1165}
    , self = 76
    , parent = Nothing
    , duration = 3.019741214000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:32:23.659493395 UTC
    , finish = 2025-09-03 13:32:26.679234609 UTC
    , thread_cap_info = ("ThreadId 106", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 95
      , alphabet_size = 43
      , total_length = 690}
    , self = 74
    , parent = Nothing
    , duration = 3.047126651000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:32:23.378981263 UTC
    , finish = 2025-09-03 13:32:26.426107914 UTC
    , thread_cap_info = ("ThreadId 100", 0, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.246731891000
  min duration 3.246731891000
  total durat. 3.246731891000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 245
      , num_strict_rules = 245
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 60
      , total_length = 1618}
    , self = 72
    , parent = Nothing
    , duration = 3.246731891000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:32:22.993529956 UTC
    , finish = 2025-09-03 13:32:26.240261847 UTC
    , thread_cap_info = ("ThreadId 89", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.085071685000
  min duration 0.159757540000
  total durat. 2.511399986000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 24
      , alphabet_size = 11
      , total_length = 112}
    , self = 60
    , parent = Nothing
    , duration = 1.085071685000
    , status = Fail
    , start = 2025-09-03 13:32:23.079533202 UTC
    , finish = 2025-09-03 13:32:24.164604887 UTC
    , thread_cap_info = ("ThreadId 95", 3, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.026445676000
  min duration 3.005951567000
  total durat. 6.032397243000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 169
      , num_strict_rules = 10
      , num_top_rules = 10
      , num_weak_rules = 159
      , alphabet_size = 38
      , total_length = 1165}
    , self = 77
    , parent = Nothing
    , duration = 3.005951567000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:32:23.67895083 UTC
    , finish = 2025-09-03 13:32:26.684902397 UTC
    , thread_cap_info = ("ThreadId 107", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 103
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 95
      , alphabet_size = 43
      , total_length = 690}
    , self = 75
    , parent = Nothing
    , duration = 3.026445676000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:32:23.399703783 UTC
    , finish = 2025-09-03 13:32:26.426149459 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.349071160000
  min duration 3.349071160000
  total durat. 3.349071160000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 245
      , num_strict_rules = 245
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 60
      , total_length = 1618}
    , self = 73
    , parent = Nothing
    , duration = 3.349071160000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:32:22.998925483 UTC
    , finish = 2025-09-03 13:32:26.347996643 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 1.357392336000
  min duration 0.802910087000
  total durat. 3.380262916000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 29
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 24
      , alphabet_size = 10
      , total_length = 124}
    , self = 64
    , parent = Nothing
    , duration = 1.219960493000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:32:23.478954787 UTC
    , finish = 2025-09-03 13:32:24.69891528 UTC
    , thread_cap_info = ("ThreadId 103", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 24
      , alphabet_size = 9
      , total_length = 118}
    , self = 80
    , parent = Nothing
    , duration = 1.357392336000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:32:26.10154967 UTC
    , finish = 2025-09-03 13:32:27.458942006 UTC
    , thread_cap_info = ("ThreadId 124", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 1.466640944000
  min duration 0.709479307000
  total durat. 3.505860763000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 24
      , alphabet_size = 9
      , total_length = 118}
    , self = 78
    , parent = Nothing
    , duration = 1.329740512000
    , status = Success
    , start = 2025-09-03 13:32:25.819718938 UTC
    , finish = 2025-09-03 13:32:27.14945945 UTC
    , thread_cap_info = ("ThreadId 122", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 29
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 24
      , alphabet_size = 10
      , total_length = 124}
    , self = 62
    , parent = Nothing
    , duration = 1.466640944000
    , status = Success
    , start = 2025-09-03 13:32:22.988364441 UTC
    , finish = 2025-09-03 13:32:24.455005385 UTC
    , thread_cap_info = ("ThreadId 85", 3, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.458683232000
  min duration 1.458683232000
  total durat. 1.458683232000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 10
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 8
      , total_length = 48}
    , self = 61
    , parent = Nothing
    , duration = 1.458683232000
    , status = Fail
    , start = 2025-09-03 13:32:22.827109766 UTC
    , finish = 2025-09-03 13:32:24.285792998 UTC
    , thread_cap_info = ("ThreadId 33", 2, False)}
**************************************************
F                      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                      = True}" , input_size = Size { num_rules = 10 , num_strict_rules = 10 ,
F                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
F                      = 48} , self = 49 , parent = Nothing , duration = 0.417334259000 , status
F                      = Fail , start = 2025-09-03 13:32:22.827109634 UTC , finish = 2025-09-03
F                      13:32:23.244443893 UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                      
| F                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                    = True})" , input_size = Size { num_rules = 10 , num_strict_rules = 10
| F                    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
| F                    = 48} , self = 61 , parent = Nothing , duration = 1.458683232000 , status
| F                    = Fail , start = 2025-09-03 13:32:22.827109766 UTC , finish = 2025-09-03
| F                    13:32:24.285792998 UTC , thread_cap_info = ("ThreadId 33", 2, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 29 , num_strict_rules
| | F                  = 5 , num_top_rules = 5 , num_weak_rules = 24 , alphabet_size = 10 , total_length
| | F                  = 124} , self = 55 , parent = Nothing , duration = 0.502209415000 , status
| | F                  = Fail , start = 2025-09-03 13:32:22.938756901 UTC , finish = 2025-09-03
| | F                  13:32:23.440966316 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | F                  
| | | S                Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | S                epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | S                = Size { num_rules = 731 , num_strict_rules = 486 , num_top_rules = 486
| | | S                , num_weak_rules = 245 , alphabet_size = 112 , total_length = 4860} , self
| | | S                = 48 , parent = Nothing , duration = 0.207491390000 , status = Success
| | | S                , start = 2025-09-03 13:32:22.953976656 UTC , finish = 2025-09-03 13:32:23.161468046
| | | S                UTC , thread_cap_info = ("ThreadId 81", 0, False)}
| | | S                
| | | | S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S              = 29 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 24 ,
| | | | S              alphabet_size = 10 , total_length = 124} , self = 62 , parent = Nothing
| | | | S              , duration = 1.466640944000 , status = Success , start = 2025-09-03 13:32:22.988364441
| | | | S              UTC , finish = 2025-09-03 13:32:24.455005385 UTC , thread_cap_info = ("ThreadId
| | | | S              85", 3, False)}
| | | | S              
| | | | | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 245 , num_strict_rules
| | | | | E            = 245 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 60 , total_length
| | | | | E            = 1618} , self = 72 , parent = Nothing , duration = 3.246731891000 , status
| | | | | E            = Except "AsyncCancelled" , start = 2025-09-03 13:32:22.993529956 UTC ,
| | | | | E            finish = 2025-09-03 13:32:26.240261847 UTC , thread_cap_info = ("ThreadId
| | | | | E            89", 3, False)}
| | | | | E            
| | | | | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 245 , num_strict_rules
| | | | | | E          = 245 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 60 , total_length
| | | | | | E          = 1618} , self = 73 , parent = Nothing , duration = 3.349071160000 , status
| | | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 13:32:22.998925483 UTC ,
| | | | | | E          finish = 2025-09-03 13:32:26.347996643 UTC , thread_cap_info = ("ThreadId
| | | | | | E          91", 3, False)}
| | | | | | E          
| | | | | | | S        Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | | S        verbose = False}" , input_size = Size { num_rules = 405 , num_strict_rules
| | | | | | | S        = 160 , num_top_rules = 160 , num_weak_rules = 245 , alphabet_size = 76
| | | | | | | S        , total_length = 2701} , self = 50 , parent = Nothing , duration = 0.328816254000
| | | | | | | S        , status = Success , start = 2025-09-03 13:32:23.018928606 UTC , finish
| | | | | | | S        = 2025-09-03 13:32:23.34774486 UTC , thread_cap_info = ("ThreadId 73",
| | | | | | | S        0, False)}
| | | | | | | S        
| | | | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 11 , total_length
| | | | | | | | F      = 112} , self = 59 , parent = Nothing , duration = 0.723226030000 , status
| | | | | | | | F      = Fail , start = 2025-09-03 13:32:23.018947629 UTC , finish = 2025-09-03
| | | | | | | | F      13:32:23.742173659 UTC , thread_cap_info = ("ThreadId 93", 3, False)}
| | | | | | | | F      
| | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | | | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 11 , total_length
| | | | | | | | | F    = 112} , self = 60 , parent = Nothing , duration = 1.085071685000 , status
| | | | | | | | | F    = Fail , start = 2025-09-03 13:32:23.079533202 UTC , finish = 2025-09-03
| | | | | | | | | F    13:32:24.164604887 UTC , thread_cap_info = ("ThreadId 95", 3, False)}
| | | | | | | | | F    
| | | S | | | | | |    
| | | S | | | | | |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | S | | | | | |    verbose = False}" , input_size = Size { num_rules = 500 , num_strict_rules
| | | S | | | | | |    = 255 , num_top_rules = 255 , num_weak_rules = 245 , alphabet_size = 110
| | | S | | | | | |    , total_length = 3340} , self = 56 , parent = Nothing , duration = 0.390446765000
| | | S | | | | | |    , status = Success , start = 2025-09-03 13:32:23.179036026 UTC , finish
| | | S | | | | | |    = 2025-09-03 13:32:23.569482791 UTC , thread_cap_info = ("ThreadId 70",
| | | S | | | | | |    0, False)}
| | | S | | | | | |    
F | | | | | | | | |    
  | | | | | | S | |    
E | | | | | |   | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E | | | | | |   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E | | | | | |   | |    = False\n , verbose = False}" , input_size = Size { num_rules = 103 , num_strict_rules
E | | | | | |   | |    = 8 , num_top_rules = 8 , num_weak_rules = 95 , alphabet_size = 43 , total_length
E | | | | | |   | |    = 690} , self = 74 , parent = Nothing , duration = 3.047126651000 , status
E | | | | | |   | |    = Except "<<timeout>>" , start = 2025-09-03 13:32:23.378981263 UTC , finish
E | | | | | |   | |    = 2025-09-03 13:32:26.426107914 UTC , thread_cap_info = ("ThreadId 100",
E | | | | | |   | |    0, False)}
E | | | | | |   | |    
| | | | | | | E | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E | |    = False\n , verbose = False}" , input_size = Size { num_rules = 103 , num_strict_rules
| | | | | | | E | |    = 8 , num_top_rules = 8 , num_weak_rules = 95 , alphabet_size = 43 , total_length
| | | | | | | E | |    = 690} , self = 75 , parent = Nothing , duration = 3.026445676000 , status
| | | | | | | E | |    = Except "<<timeout>>" , start = 2025-09-03 13:32:23.399703783 UTC , finish
| | | | | | | E | |    = 2025-09-03 13:32:26.426149459 UTC , thread_cap_info = ("ThreadId 101",
| | | | | | | E | |    0, False)}
| | | | | | | E | |    
| | F | | | | | | |    
| | E | | | | | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | | | | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | | | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | | | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | | | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | | | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 29
| | E | | | | | | |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 24 , alphabet_size
| | E | | | | | | |    = 10 , total_length = 124} , self = 64 , parent = Nothing , duration =
| | E | | | | | | |    1.219960493000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | E | | | | | | |    13:32:23.478954787 UTC , finish = 2025-09-03 13:32:24.69891528 UTC , thread_cap_info
| | E | | | | | | |    = ("ThreadId 103", 3, False)}
| | E | | | | | | |    
| | | S | | | | | |    
| | | E | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 169 , num_strict_rules
| | | E | | | | | |    = 10 , num_top_rules = 10 , num_weak_rules = 159 , alphabet_size = 38 ,
| | | E | | | | | |    total_length = 1165} , self = 76 , parent = Nothing , duration = 3.019741214000
| | | E | | | | | |    , status = Except "<<timeout>>" , start = 2025-09-03 13:32:23.659493395
| | | E | | | | | |    UTC , finish = 2025-09-03 13:32:26.679234609 UTC , thread_cap_info = ("ThreadId
| | | E | | | | | |    106", 0, False)}
| | | E | | | | | |    
| | | | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 169 , num_strict_rules
| | | | | | | | | | E  = 10 , num_top_rules = 10 , num_weak_rules = 159 , alphabet_size = 38 ,
| | | | | | | | | | E  total_length = 1165} , self = 77 , parent = Nothing , duration = 3.005951567000
| | | | | | | | | | E  , status = Except "<<timeout>>" , start = 2025-09-03 13:32:23.67895083
| | | | | | | | | | E  UTC , finish = 2025-09-03 13:32:26.684902397 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | E  107", 0, False)}
| | | | | | | | | | E  
| | | | | | | | F | |  
| | | | | | | | F | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | F | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | F | |  = 27 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 24 ,
| | | | | | | | F | |  alphabet_size = 11 , total_length = 112} , self = 66 , parent = Nothing
| | | | | | | | F | |  , duration = 0.998390395000 , status = Fail , start = 2025-09-03 13:32:23.838944118
| | | | | | | | F | |  UTC , finish = 2025-09-03 13:32:24.837334513 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F | |  108", 3, False)}
| | | | | | | | F | |  
| | | | | | | | | F |  
| F | | | | | | |   |  
|   | | S | | | |   |  
|   E |   | | | |   |  
|     |   | | | F   |  
| F   |   | | |     |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   |   | | |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   |   | | |     |  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F   |   | | |     |  = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 9 , total_length
| F   |   | | |     |  = 118} , self = 70 , parent = Nothing , duration = 0.497776063000 , status
| F   |   | | |     |  = Fail , start = 2025-09-03 13:32:25.159816187 UTC , finish = 2025-09-03
| F   |   | | |     |  13:32:25.65759225 UTC , thread_cap_info = ("ThreadId 118", 3, False)}
| F   |   | | |     |  
| | F |   | | |     |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F |   | | |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |   | | |     |  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F |   | | |     |  = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size = 9 , total_length
| | F |   | | |     |  = 118} , self = 71 , parent = Nothing , duration = 0.764361346000 , status
| | F |   | | |     |  = Fail , start = 2025-09-03 13:32:25.178969722 UTC , finish = 2025-09-03
| | F |   | | |     |  13:32:25.943331068 UTC , thread_cap_info = ("ThreadId 119", 3, False)}
| | F |   | | |     |  
| F | |   | | |     |  
| S | |   | | |     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | |   | | |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | |   | | |     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | |   | | |     |  = 27 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 24 ,
| S | |   | | |     |  alphabet_size = 9 , total_length = 118} , self = 78 , parent = Nothing
| S | |   | | |     |  , duration = 1.329740512000 , status = Success , start = 2025-09-03 13:32:25.819718938
| S | |   | | |     |  UTC , finish = 2025-09-03 13:32:27.14945945 UTC , thread_cap_info = ("ThreadId
| S | |   | | |     |  122", 3, False)}
| S | |   | | |     |  
| | F |   | | |     |  
| | E |   | | |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E |   | | |     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |   | | |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |   | | |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |   | | |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |   | | |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 27
| | E |   | | |     |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 24 , alphabet_size
| | E |   | | |     |  = 9 , total_length = 118} , self = 80 , parent = Nothing , duration = 1.357392336000
| | E |   | | |     |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:26.10154967
| | E |   | | |     |  UTC , finish = 2025-09-03 13:32:27.458942006 UTC , thread_cap_info = ("ThreadId
| | E |   | | |     |  124", 3, False)}
| | E |   | | |     |  
| | | |   E | |     |  
| | | |     E |     |  
E | | |       |     |  
  | | |       E     |  
  | | E             |  
  | |               E  
  S |                  
    E                  
F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                      = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
F                      = 2 , num_top_rules = 2 , num_weak_rules = 24 , alphabet_size = 9 , total_length
F                      = 114} , self = 85 , parent = Nothing , duration = 0.177079684000 , status
F                      = Fail , start = 2025-09-03 13:32:27.466921172 UTC , finish = 2025-09-03
F                      13:32:27.644000856 UTC , thread_cap_info = ("ThreadId 142", 3, False)}
F                      
| F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 26 , num_strict_rules
| F                    = 2 , num_top_rules = 2 , num_weak_rules = 24 , alphabet_size = 9 , total_length
| F                    = 114} , self = 86 , parent = Nothing , duration = 0.159757540000 , status
| F                    = Fail , start = 2025-09-03 13:32:27.484285498 UTC , finish = 2025-09-03
| F                    13:32:27.644043038 UTC , thread_cap_info = ("ThreadId 143", 3, False)}
| F                    
F |                    
  F                    
S                      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S                      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S                      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S                      = 26 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 24 ,
S                      alphabet_size = 9 , total_length = 114} , self = 87 , parent = Nothing
S                      , duration = 0.709479307000 , status = Success , start = 2025-09-03 13:32:27.644058735
S                      UTC , finish = 2025-09-03 13:32:28.353538042 UTC , thread_cap_info = ("ThreadId
S                      146", 3, False)}
S                      
| E                    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E                    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E                    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E                    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E                    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E                    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 26
| E                    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 24 , alphabet_size
| E                    = 9 , total_length = 114} , self = 89 , parent = Nothing , duration = 0.802910087000
| E                    , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:27.644064598
| E                    UTC , finish = 2025-09-03 13:32:28.446974685 UTC , thread_cap_info = ("ThreadId
| E                    147", 3, False)}
| E                    
S |                    
  E                    
