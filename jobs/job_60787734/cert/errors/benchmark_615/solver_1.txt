last 3950 length 26861
CNF 3950 vars 26861 clauses
last 3804 length 23075
last 5100 length 25951
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2688, clauses: 10640
CNF 3804 vars 23075 clauses
CNF 5100 vars 25951 clauses
last 2688 length 10640
last 8238 length 42585
CNF 2688 vars 10640 clauses
CNF 8238 vars 42585 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2688, clauses: 10640, status: Satisfied, time: 0.149613231s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3378, clauses: 14213
last 3378 length 14213
CNF 3378 vars 14213 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9796, clauses: 41185
last 9796 length 41185
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3378, clauses: 14213, status: Unsatisfied, time: 0.178368396s
CNF 9796 vars 41185 clauses
last 4890 length 25088
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9796, clauses: 41185, status: Satisfied, time: 0.28619032s
last 3830 length 26414
CNF 4890 vars 25088 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6184, clauses: 26832
CNF 3830 vars 26414 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2477, clauses: 9693
last 2477 length 9693
CNF 2477 vars 9693 clauses
**************************************************
summary
**************************************************
SRS with 5 rules on 3 letters       DP
SRS with 6 strict rules and 5 weak rules on 4 letters       EDG
SRS with 6 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 4 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [DP (Top 7) (Input 4), DP (Top 4) (Input 3)] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 4) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [DP (Top 7) (Input 4), DP (Top 4) (Input 3)] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 4) -}
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
reason
  ( 1
  , Wk  / 1A 0A 2A  \
        | -  0A -1A |
        \ -  -  0A  / )
  ( 2
  , Wk  / -2A 0A  0A  \
        | -1A -2A -1A |
        \ -   -   0A  / )
  ( 0
  , Wk  / - 1A 0A \
        | - 1A -  |
        \ - -  0A / )
  ( 0#
  , Wk  / - 0A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
reason
  EDG

**************************************************
skeleton: (5,3)\Deepee\EDG(6/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.476919027000
  min duration 0.335928184000
  total durat. 1.246601363000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.365213937000
  min duration 0.316156072000
  total durat. 1.023842710000
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 5 , num_strict_rules = 5 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 100} , self
F          = 49 , parent = Nothing , duration = 0.426454422000 , status = Fail , start
F          = 2025-09-03 12:25:22.080355438 UTC , finish = 2025-09-03 12:25:22.50680986
F          UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F        = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| F        = 120} , self = 52 , parent = Nothing , duration = 0.476919027000 , status
| F        = Fail , start = 2025-09-03 12:25:22.08188534 UTC , finish = 2025-09-03
| F        12:25:22.558804367 UTC , thread_cap_info = ("ThreadId 59", 1, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F      = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | F      = 120} , self = 43 , parent = Nothing , duration = 0.342472701000 , status
| | F      = Fail , start = 2025-09-03 12:25:22.094327671 UTC , finish = 2025-09-03
| | F      12:25:22.436800372 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | F    = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F    = 187} , self = 56 , parent = Nothing , duration = 0.433754152000 , status
| | | F    = Fail , start = 2025-09-03 12:25:22.164622561 UTC , finish = 2025-09-03
| | | F    12:25:22.598376713 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| | | F    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | | F  = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F  = 187} , self = 50 , parent = Nothing , duration = 0.316156072000 , status
| | | | F  = Fail , start = 2025-09-03 12:25:22.218403065 UTC , finish = 2025-09-03
| | | | F  12:25:22.534559137 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| | | | F  
| | F | |  
| | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | S | |  = 4 , total_length = 120} , self = 60 , parent = Nothing , duration = 0.205610143000
| | S | |  , status = Success , start = 2025-09-03 12:25:22.462069033 UTC , finish
| | S | |  = 2025-09-03 12:25:22.667679176 UTC , thread_cap_info = ("ThreadId 90",
| | S | |  1, False)}
| | S | |  
F | | | |  
  | | | F  
F | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |    = 11 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 ,
F | | |    alphabet_size = 4 , total_length = 187} , self = 68 , parent = Nothing
F | | |    , duration = 0.315147164000 , status = Fail , start = 2025-09-03 12:25:22.543129966
F | | |    UTC , finish = 2025-09-03 12:25:22.85827713 UTC , thread_cap_info = ("ThreadId
F | | |    100", 1, False)}
F | | |    
| F | |    
| E | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E | |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| E | |    = 4 , total_length = 120} , self = 63 , parent = Nothing , duration = 0.162135822000
| E | |    , status = Except "AsyncCancelled" , start = 2025-09-03 12:25:22.574337263
| E | |    UTC , finish = 2025-09-03 12:25:22.736473085 UTC , thread_cap_info = ("ThreadId
| E | |    102", 1, False)}
| E | |    
| | | F    
| | S      
| | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | S      , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
| | S      = 4 , total_length = 187} , self = 69 , parent = Nothing , duration = 0.459549981000
| | S      , status = Success , start = 2025-09-03 12:25:22.667705835 UTC , finish
| | S      = 2025-09-03 12:25:23.127255816 UTC , thread_cap_info = ("ThreadId 108",
| | S      1, False)}
| | S      
| E |      
| F |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| F |      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| F |      = 113} , self = 71 , parent = Nothing , duration = 0.335928184000 , status
| F |      = Fail , start = 2025-09-03 12:25:22.838421581 UTC , finish = 2025-09-03
| F |      12:25:23.174349765 UTC , thread_cap_info = ("ThreadId 117", 1, False)}
| F |      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F    = 113} , self = 74 , parent = Nothing , duration = 0.365213937000 , status
| | | F    = Fail , start = 2025-09-03 12:25:22.840302606 UTC , finish = 2025-09-03
| | | F    12:25:23.205516543 UTC , thread_cap_info = ("ThreadId 118", 1, False)}
| | | F    
F | | |    
E | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
E | | |    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
E | | |    = 4 , total_length = 187} , self = 72 , parent = Nothing , duration = 0.198970776000
E | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 12:25:22.975395063
E | | |    UTC , finish = 2025-09-03 12:25:23.174365839 UTC , thread_cap_info = ("ThreadId
E | | |    120", 1, False)}
E | | |    
| | S |    
| F   |    
E     |    
      F    
