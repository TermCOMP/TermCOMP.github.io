last 1154 length 4881
CNF 1154 vars 4881 clauses
last 919 length 3951
CNF 919 vars 3951 clauses
last 1301 length 5569
CNF 1301 vars 5569 clauses
last 1064 length 4516
CNF 1064 vars 4516 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2083, clauses: 7696
last 2083 length 7696
CNF 2083 vars 7696 clauses
last 1121 length 4647
last 5446 length 24185
last 1512 length 6565
CNF 1121 vars 4647 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 6347 length 29427
last 4263 length 18426
CNF 1512 vars 6565 clauses
CNF 5446 vars 24185 clauses
last 5282 length 23653
last 7234 length 32977
last 7046 length 32553
last 1030 length 4365
last 1330 length 5597
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
CNF 6347 vars 29427 clauses
CNF 4263 vars 18426 clauses
CNF 5282 vars 23653 clauses
CNF 1030 vars 4365 clauses
CNF 1330 vars 5597 clauses
last 5446 length 24185
CNF 7046 vars 32553 clauses
last 7234 length 32977
**************************************************
summary
**************************************************
SRS with 4 rules on 2 letters       DP
SRS with 12 strict rules and 4 weak rules on 4 letters       weights
SRS with 3 strict rules and 4 weak rules on 4 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 4 weak rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 4 weak rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, b] -> [a, b, b, a] {- Input 0 -}
  [b, b, b, b] -> [b, a, b, b] {- Input 1 -}
  [a, b, b, a] -> [b, a, a, a] {- Input 2 -}
  [b, a, b, b] -> [b, b, a, b] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a, b] ->= [a, b, b, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, b, b] {- DP Nontop (Input 1) -}
  [a, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 2) -}
  [b, a, b, b] ->= [b, b, a, b] {- DP Nontop (Input 3) -}
  [a#, a, a, b] |-> [a#] {- DP (Top 3) (Input 0) -}
  [a#, a, a, b] |-> [a#, b, b, a] {- DP (Top 0) (Input 0) -}
  [a#, a, a, b] |-> [b#, a] {- DP (Top 2) (Input 0) -}
  [a#, a, a, b] |-> [b#, b, a] {- DP (Top 1) (Input 0) -}
  [a#, b, b, a] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a#, b, b, a] |-> [a#, a, a] {- DP (Top 1) (Input 2) -}
  [a#, b, b, a] |-> [b#, a, a, a] {- DP (Top 0) (Input 2) -}
  [b#, a, b, b] |-> [a#, b] {- DP (Top 2) (Input 3) -}
  [b#, a, b, b] |-> [b#, a, b] {- DP (Top 1) (Input 3) -}
  [b#, a, b, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, b] |-> [a#, b, b] {- DP (Top 1) (Input 1) -}
  [b#, b, b, b] |-> [b#, a, b, b] {- DP (Top 0) (Input 1) -}
reason
  (a, 2/1)
  (b, 2/1)
  (a#, 2/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a, b] ->= [a, b, b, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, b, b] {- DP Nontop (Input 1) -}
  [a, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 2) -}
  [b, a, b, b] ->= [b, b, a, b] {- DP Nontop (Input 3) -}
  [a#, a, a, b] |-> [a#, b, b, a] {- DP (Top 0) (Input 0) -}
  [b#, a, b, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, b] |-> [b#, a, b, b] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, b] |-> [a#, b, b, a] {- DP (Top 0) (Input 0) -}
  [a, a, a, b] ->= [a, b, b, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, b, b] {- DP Nontop (Input 1) -}
  [a, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 2) -}
  [b, a, b, b] ->= [b, b, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( b
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( a#
  , Ek 2  / 2 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, a, b, b] |-> [b#, b, a, b] {- DP (Top 0) (Input 3) -}
  [b#, b, b, b] |-> [b#, a, b, b] {- DP (Top 0) (Input 1) -}
  [a, a, a, b] ->= [a, b, b, a] {- DP Nontop (Input 0) -}
  [b, b, b, b] ->= [b, a, b, b] {- DP Nontop (Input 1) -}
  [a, b, b, a] ->= [b, a, a, a] {- DP Nontop (Input 2) -}
  [b, a, b, b] ->= [b, b, a, b] {- DP Nontop (Input 3) -}
reason
  ( a
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( b
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( b#
  , Ek 2  / 1 0 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (4,2)\Deepee(12/4,4)\Weight(3/4,4)\EDG[(1/4,3)\Matrix{\Natural}{2}(0,0)\EDG[],(2/4,3)\Matrix{\Natural}{2}(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 5446 vars 24185 clauses
CNF 7234 vars 32977 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 32} , self
F          = 53 , parent = Nothing , duration = 0.274359579000 , status = Fail , start
F          = 2025-09-03 12:11:54.382108427 UTC , finish = 2025-09-03 12:11:54.656468006
F          UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F          
| E        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E        = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| E        = 2 , num_top_rules = 2 , num_weak_rules = 16 , alphabet_size = 5 , total_length
| E        = 180} , self = 75 , parent = Nothing , duration = 0.527877830000 , status
| E        = Except "AsyncCancelled" , start = 2025-09-03 12:11:54.397257115 UTC ,
| E        finish = 2025-09-03 12:11:54.925134945 UTC , thread_cap_info = ("ThreadId
| E        63", 3, False)}
| E        
| | S      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S      = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | S      = 2 , num_top_rules = 2 , num_weak_rules = 16 , alphabet_size = 5 , total_length
| | S      = 180} , self = 73 , parent = Nothing , duration = 0.524281148000 , status
| | S      = Success , start = 2025-09-03 12:11:54.399248022 UTC , finish = 2025-09-03
| | S      12:11:54.92352917 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
| | S      
F | |      
F | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |      = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
F | |      = 3 , total_length = 40} , self = 65 , parent = Nothing , duration = 0.113846228000
F | |      , status = Fail , start = 2025-09-03 12:11:54.666698939 UTC , finish =
F | |      2025-09-03 12:11:54.780545167 UTC , thread_cap_info = ("ThreadId 104",
F | |      2, False)}
F | |      
| | | S    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | S    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | S    = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
| | | S    = 48} , self = 71 , parent = Nothing , duration = 0.210423052000 , status
| | | S    = Success , start = 2025-09-03 12:11:54.691773595 UTC , finish = 2025-09-03
| | | S    12:11:54.902196647 UTC , thread_cap_info = ("ThreadId 108", 2, False)}
| | | S    
| | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 3 , total_length
| | | | F  = 48} , self = 70 , parent = Nothing , duration = 0.152305395000 , status
| | | | F  = Fail , start = 2025-09-03 12:11:54.698459254 UTC , finish = 2025-09-03
| | | | F  12:11:54.850764649 UTC , thread_cap_info = ("ThreadId 109", 2, False)}
| | | | F  
F | | | |  
  | | | F  
  | | S    
  | S      
  E        
