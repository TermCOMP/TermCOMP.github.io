last 450 length 1841
CNF 450 vars 1841 clauses
last 499 length 2051
CNF 499 vars 2051 clauses
last 391 length 1642
last 601 length 2734
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2360, clauses: 8409
CNF 391 vars 1642 clauses
CNF 601 vars 2734 clauses
last 2360 length 8409
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6503, clauses: 26795
last 6503 length 26795
CNF 2360 vars 8409 clauses
CNF 6503 vars 26795 clauses
last 3302 length 14991
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2360, clauses: 8409, status: Unsatisfied, time: 0.121302427s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2044, clauses: 7201
CNF 3302 vars 14991 clauses
[Info] pool sizes (success) 13925 seen 4956 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 3780 length 19108
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5581, clauses: 22901
last 2044 length 7201
last 5117 length 21596
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4110, clauses: 16119
**************************************************last 5581 length 22901

CNF 2044 vars 7201 clauses
last 4110 length 16119
CNF 5117 vars 21596 clauses
summaryCNF 5581 vars 22901 clauses

CNF 4110 vars 16119 clauses
last 7538 length 33750
**************************************************
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2044, clauses: 7201, status: Unsatisfied, time: 0.164043162s
last 8643 length 40388
CNF 7538 vars 33750 clauses
last 11491 length 49214
SRS with 3CNF 8643 vars 40388 clauses
 rules on 3 letters       looping derivation
from
  [c, c, b, c, b, c, b, c]
to
  [b, c, b, b, c, b, b, c, b, c, c, b, c, b, c, b, c]
via 27 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c] {- Input 1 -}
  [c, c] -> [b, c, b, a, a] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [c, c, b, c, b, c, b, c], via = [(Step   { rule = 2, position = 0}, [b, c, b, a, a, b, c, b, c, b, c]), (Step   { rule = 1, position = 4}, [b, c, b, a, c, c, b, c, b, c]), (Step   { rule = 2, position = 4}, [b, c, b, a, b, c, b, a, a, b, c, b, c]), (Step   { rule = 1, position = 3}, [b, c, b, c, c, b, a, a, b, c, b, c]), (Step   { rule = 2, position = 3}, [b, c, b, b, c, b, a, a, b, a, a, b, c, b, c]), (Step   { rule = 1, position = 7}, [b, c, b, b, c, b, a, c, a, a, b, c, b, c]), (Step   { rule = 1, position = 9}, [b, c, b, b, c, b, a, c, a, c, c, b, c]), (Step   { rule = 2, position = 9}, [b, c, b, b, c, b, a, c, a, b, c, b, a, a, b, c]), (Step   { rule = 1, position = 8}, [b, c, b, b, c, b, a, c, c, c, b, a, a, b, c]), (Step   { rule = 2, position = 7}, [b, c, b, b, c, b, a, b, c, b, a, a, c, b, a, a, b, c]), (Step   { rule = 0, position = 10}, [b, c, b, b, c, b, a, b, c, b, a, c, b, a, a, b, c]), (Step   { rule = 0, position = 10}, [b, c, b, b, c, b, a, b, c, b, c, b, a, a, b, c]), (Step   { rule = 1, position = 6}, [b, c, b, b, c, b, c, c, b, c, b, a, a, b, c]), (Step   { rule = 2, position = 6}, [b, c, b, b, c, b, b, c, b, a, a, b, c, b, a, a, b, c]), (Step   { rule = 1, position = 10}, [b, c, b, b, c, b, b, c, b, a, c, c, b, a, a, b, c]), (Step   { rule = 2, position = 10}, [b, c, b, b, c, b, b, c, b, a, b, c, b, a, a, b, a, a, b, c]), (Step   { rule = 1, position = 14}, [b, c, b, b, c, b, b, c, b, a, b, c, b, a, c, a, a, b, c]), (Step   { rule = 0, position = 13}, [b, c, b, b, c, b, b, c, b, a, b, c, b, c, a, a, b, c]), (Step   { rule = 1, position = 9}, [b, c, b, b, c, b, b, c, b, c, c, b, c, a, a, b, c]), (Step   { rule = 1, position = 14}, [b, c, b, b, c, b, b, c, b, c, c, b, c, a, c, c]), (Step   { rule = 2, position = 14}, [b, c, b, b, c, b, b, c, b, c, c, b, c, a, b, c, b, a, a]), (Step   { rule = 0, position = 17}, [b, c, b, b, c, b, b, c, b, c, c, b, c, a, b, c, b, a]), (Step   { rule = 0, position = 17}, [b, c, b, b, c, b, b, c, b, c, c, b, c, a, b, c, b]), (Step   { rule = 1, position = 13}, [b, c, b, b, c, b, b, c, b, c, c, b, c, c, c, b]), (Step   { rule = 2, position = 13}, [b, c, b, b, c, b, b, c, b, c, c, b, c, b, c, b, a, a, b]), (Step   { rule = 1, position = 17}, [b, c, b, b, c, b, b, c, b, c, c, b, c, b, c, b, a, c]), (Step   { rule = 0, position = 16}, [b, c, b, b, c, b, b, c, b, c, c, b, c, b, c, b, c])], to = [b, c, b, b, c, b, b, c, b, c, c, b, c, b, c, b, c]}

**************************************************
skeleton: (3,3)\Loop{27}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15624, clauses: 59453
last 15624 length 59453


**************************************************
F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F      = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
F      = 5 , total_length = 34} , self = 57 , parent = Nothing , duration = 0.264953953000
F      , status = Fail , start = 2025-09-03 10:54:38.659574817 UTC , finish =
F      2025-09-03 10:54:38.92452877 UTC , thread_cap_info = ("ThreadId 69", 3,
F      False)}
F      
| S    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| S    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| S    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| S    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| S    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| S    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| S    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| S    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| S    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| S    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| S    = 11} , self = 61 , parent = Nothing , duration = 0.346201439000 , status
| S    = Success , start = 2025-09-03 10:54:38.667148889 UTC , finish = 2025-09-03
| S    10:54:39.013350328 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
| S    
| | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F  = 153} , self = 62 , parent = Nothing , duration = 0.278662709000 , status
| | F  = Fail , start = 2025-09-03 10:54:38.734894302 UTC , finish = 2025-09-03
| | F  10:54:39.013557011 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | F  
F | |  
  S |  
    F  
