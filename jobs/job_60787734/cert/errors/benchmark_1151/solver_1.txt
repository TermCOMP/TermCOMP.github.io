last 472 length 1825
last 429 length 1681
CNF 429 vars 1681 clauses
last 595 length 2347
CNF 472 vars 1825 clauses
last 524 length 2102
CNF 595 vars 2347 clauses
CNF 524 vars 2102 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2228, clauses: 7938
last 2228 length 7938
last 3725 length 16958
CNF 3725 vars 16958 clauses
last 3255 length 13750
CNF 3255 vars 13750 clauses
CNF 2228 vars 7938 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9849
last 2741 length 9849
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2228, clauses: 7938, status: Unsatisfied, time: 0.096883902s
CNF 2741 vars 9849 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29391
last 7092 length 29391
CNF 7092 vars 29391 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7801, clauses: 32287
last 7801 length 32287
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9849, status: Unsatisfied, time: 0.116369896s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4503, clauses: 17794
last 4503 length 17794
CNF 7801 vars 32287 clauses
CNF 4503 vars 17794 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29391, status: Unsatisfied, time: 0.246793806s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4996, clauses: 19751
last 4996 length 19751
CNF 4996 vars 19751 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7801, clauses: 32287, status: Satisfied, time: 0.195268894s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3636, clauses: 13715
last 3636 length 13715
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4503, clauses: 17794, status: Unsatisfied, time: 0.209227001s
CNF 3636 vars 13715 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3636, clauses: 13715, status: Unsatisfied, time: 0.093862588s
last 8313 length 36609
CNF 8313 vars 36609 clauses
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6793, clauses: 25416
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12634, clauses: 51533

last 10697 length 43632
last 6793 length 25416
last 12634 length 51533
summarylast 7845 length 34420

CNF 6793 vars 25416 clauses
last 10076 length 41103
CNF 10697 vars 43632 clauses
CNF 7845 vars 34420 clauses
CNF 12634 vars 51533 clauses
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 4 strict rules and 8 weak rules on 5 letters       EDG
SRS with 4 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 8 weak rules on 5 letters       weights
SRS with 1 strict rules and 8 weak rules on 4 letters       EDG
SRS with 1 strict rules and 8 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, b, a] {- Input 1 -}
  [b] -> [c, a, c] {- Input 2 -}
  [c, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a] -> [a, b, b] {- Mirror (Input 1) -}
  [b] -> [c, a, c] {- Mirror (Input 2) -}
  [c, c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, b, b] {- Mirror (Input 1) -}
  [b] -> [c, a, c] {- Mirror (Input 2) -}
  [a, c, c] -> [a] {- Mirror (Input 3) -}
  [b, c, c] -> [b] {- Mirror (Input 3) -}
  [c, c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b] -> [b, b, a] {- Input 1 -}
  [b] -> [c, a, c] {- Input 2 -}
  [c, c, a] -> [a] {- Input 3 -}
  [c, c, b] -> [b] {- Input 3 -}
  [c, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a#, b] |-> [b#, a] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [b#] |-> [c#] {- DP (Top 2) (Input 2) -}
  [b#] |-> [c#, a, c] {- DP (Top 0) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a#, b] |-> [b#, a] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}CNF 10076 vars 41103 clauses

  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a#, b] |-> [b#, a] {- DP (Top 1) (Input 1) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [a#, b] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A -2A -2A \
        | -  0A  -   |
        \ -  -   0A  / )
  ( b
  , Wk  / 0A -2A 0A \
        | 2A 0A  2A |
        \ -  -   0A / )
  ( c
  , Wk  / -1A -1A 0A  \
        | 1A  -1A -1A |
        \ -   -   0A  / )
  ( a#
  , Wk  / - 0A 0A \
        | - -  -  |
        \ - -  0A / )
  ( b#
  , Wk  / 1A -1A 0A \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Input 0) -}
      [a, b] ->= [b] {- DP Nontop (Input 0) -}
      [a, c] ->= [c] {- DP Nontop (Input 0) -}
      [a, b] ->= [b, b, a] {- DP Nontop (Input 1) -}
      [b] ->= [c, a, c] {- DP Nontop (Input 2) -}
      [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
      [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
      [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 2) (Input 1) -}
reason
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(4/8,5)\Matrix{\ArcticBZ}{3}(2/8,5)\Weight\EDG(1/8,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F          = 180} , self = 58 , parent = Nothing , duration = 0.104544855000 , status
F          = Fail , start = 2025-09-03 11:09:16.938925359 UTC , finish = 2025-09-03
F          11:09:17.043470214 UTC , thread_cap_info = ("ThreadId 77", 0, False)}
F          
| F        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| F        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| F        = 4 , total_length = 37} , self = 62 , parent = Nothing , duration = 0.403849963000
| F        , status = Fail , start = 2025-09-03 11:09:16.958739933 UTC , finish =
| F        2025-09-03 11:09:17.362589896 UTC , thread_cap_info = ("ThreadId 99", 2,
| F        False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | F      alphabet_size = 4 , total_length = 37} , self = 60 , parent = Nothing ,
| | F      duration = 0.116385828000 , status = Fail , start = 2025-09-03 11:09:16.97858135
| | F      UTC , finish = 2025-09-03 11:09:17.094967178 UTC , thread_cap_info = ("ThreadId
| | F      97", 2, False)}
| | F      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | F    alphabet_size = 5 , total_length = 45} , self = 61 , parent = Nothing ,
| | | F    duration = 0.203708123000 , status = Fail , start = 2025-09-03 11:09:17.006768348
| | | F    UTC , finish = 2025-09-03 11:09:17.210476471 UTC , thread_cap_info = ("ThreadId
| | | F    103", 2, False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | | | S  = 5 , total_length = 45} , self = 63 , parent = Nothing , duration = 0.379655629000
| | | | S  , status = Success , start = 2025-09-03 11:09:17.01864095 UTC , finish
| | | | S  = 2025-09-03 11:09:17.398296579 UTC , thread_cap_info = ("ThreadId 104",
| | | | S  2, False)}
| | | | S  
F | | | |  
  | F | |  
F |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
F |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
F |   | |  = 4 , total_length = 37} , self = 65 , parent = Nothing , duration = 0.303417706000
F |   | |  , status = Fail , start = 2025-09-03 11:09:17.141306726 UTC , finish =
F |   | |  2025-09-03 11:09:17.444724432 UTC , thread_cap_info = ("ThreadId 116",
F |   | |  2, False)}
F |   | |  
| |   F |  
| | E   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | E   |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size
| | E   |  = 5 , total_length = 45} , self = 66 , parent = Nothing , duration = 0.221278265000
| | E   |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:09:17.234132469
| | E   |  UTC , finish = 2025-09-03 11:09:17.455410734 UTC , thread_cap_info = ("ThreadId
| | E   |  118", 2, False)}
| | E   |  
| F |   |  
| F |   |  Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| F |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |   |  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| F |   |  alphabet_size = 4 , total_length = 37} , self = 71 , parent = Nothing ,
| F |   |  duration = 0.159755995000 , status = Fail , start = 2025-09-03 11:09:17.377142199
| F |   |  UTC , finish = 2025-09-03 11:09:17.536898194 UTC , thread_cap_info = ("ThreadId
| F |   |  121", 2, False)}
| F |   |  
| | |   S  
F | |      
  | E      
  F        
