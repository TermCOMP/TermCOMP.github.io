last 751 length 3104
last 718 length 2959
CNF 751 vars 3104 clauses
last 596 length 2445
CNF 718 vars 2959 clauses
last 589 length 2403
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2298, clauses: 8375
last 2298 length 8375
CNF 596 vars 2445 clauses
CNF 589 vars 2403 clauses
CNF 2298 vars 8375 clauses
last 4018 length 18113
last 4201 length 20632
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7304, clauses: 30377
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1982, clauses: 7131
CNF 4018 vars 18113 clauses
last 7304 length 30377
CNF 4201 vars 20632 clauses
last 1982 length 7131
CNF 1982 vars 7131 clauses
CNF 7304 vars 30377 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2298, clauses: 8375, status: Unsatisfied, time: 0.186069611s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1982, clauses: 7131, status: Unsatisfied, time: 0.057907026s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26473
last 6382 length 26473
CNF 6382 vars 26473 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4550, clauses: 18450
last 4550 length 18450
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3965, clauses: 16032
last 3965 length 16032
CNF 4550 vars 18450 clauses
CNF 3965 vars 16032 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7304, clauses: 30377, status: Satisfied, time: 0.212241651s
last 6435 length 26060
CNF 6435 vars 26060 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3965, clauses: 16032, status: Unsatisfied, time: 0.227787994s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 3 strict rules and 5 weak rules on 4 letters       EDG
SRS with 3 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [c, c, a] -> [a, c, a, c, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a] -> [] {- Mirror (Input 1) -}
  [a, c, c] -> [c, c, a, c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [a, b, a] -> [a] {- Mirror (Input 1) -}
  [b, b, a] -> [b] {- Mirror (Input 1) -}
  [c, b, a] -> [c] {- Mirror (Input 1) -}
  [a, c, c] -> [c, c, a, c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, b, a] -> [a] {- Input 1 -}
  [a, b, b] -> [b] {- Input 1 -}
  [a, b, c] -> [c] {- Input 1 -}
  [c, c, a] -> [a, c, a, c, c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
  [c#, c, a] |-> [a#, c, a, c, c] {- DP (Top 0) (Input 2) -}
  [c#, c, a] |-> [a#, c, c] {- DP (Top 2) (Input 2) -}
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
  [c#, c, a] |-> [c#, a, c, c] {- DP (Top 1) (Input 2) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 3) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
  [c#, c, a] |-> [c#, a, c, c] {- DP (Top 1) (Input 2) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 3) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
  [c#, c, a] |-> [c#, a, c, c] {- DP (Top 1) (Input 2) -}
  [c#, c, a] |-> [c#, c] {- DP (Top 3) (Input 2) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -1A 0A 0A \
        | 0A  1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / -1A 0A 0A \
        | 0A  -  1A |
        \ -   -  0A / )
  ( c
  , Wk  / -1A 0A  0A \
        | 0A  -1A -  |
        \ -   -   0A / )
  ( c#
  , Wk  / 1A 0A 1A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a] ->= [b] {- DP Nontop (Input 0) -}
      [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
      [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
      [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
      [c, c, a] ->= [a, c, a, c, c] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [c#, c, a] |-> [c#] {- DP (Top 4) (Input 2) -}
reason
  (a, 1/1)
  (c, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(3/5,4)\Matrix{\ArcticBZ}{3}\EDG(1/5,4)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))last 9593 length 40635
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E                = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
E                = 72 , parent = Nothing , duration = 0.655948283000 , status = Except "AsyncCancelled"
E                , start = 2025-09-03 11:22:52.481884653 UTC , finish = 2025-09-03 11:22:53.137832936
E                UTC , thread_cap_info = ("ThreadId 23", 2, False)}
E                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 162} , self = 60 , parent = Nothing , duration = 0.248582703000 , status
| F              = Fail , start = 2025-09-03 11:22:52.487104564 UTC , finish = 2025-09-03
| F              11:22:52.735687267 UTC , thread_cap_info = ("ThreadId 80", 1, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 162} , self = 59 , parent = Nothing , duration = 0.245451558000 , status
| | F            = Fail , start = 2025-09-03 11:22:52.487110844 UTC , finish = 2025-09-03
| | F            11:22:52.732562402 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F          = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F          = 32} , self = 58 , parent = Nothing , duration = 0.120371758000 , status
| | | F          = Fail , start = 2025-09-03 11:22:52.511041829 UTC , finish = 2025-09-03
| | | F          11:22:52.631413587 UTC , thread_cap_info = ("ThreadId 91", 3, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 62 , num_strict_rules
| | | | F        = 35 , num_top_rules = 35 , num_weak_rules = 27 , alphabet_size = 14 ,
| | | | F        total_length = 353} , self = 71 , parent = Nothing , duration = 0.606556463000
| | | | F        , status = Fail , start = 2025-09-03 11:22:52.516861409 UTC , finish =
| | | | F        2025-09-03 11:22:53.123417872 UTC , thread_cap_info = ("ThreadId 96", 0,
| | | | F        False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | | F      = 32} , self = 57 , parent = Nothing , duration = 0.112633566000 , status
| | | | | F      = Fail , start = 2025-09-03 11:22:52.516862286 UTC , finish = 2025-09-03
| | | | | F      11:22:52.629495852 UTC , thread_cap_info = ("ThreadId 92", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F    = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | F    = 4 , total_length = 38} , self = 61 , parent = Nothing , duration = 0.221118486000
| | | | | | F    , status = Fail , start = 2025-09-03 11:22:52.526006086 UTC , finish =
| | | | | | F    2025-09-03 11:22:52.747124572 UTC , thread_cap_info = ("ThreadId 97", 3,
| | | | | | F    False)}
| | | | | | F    
| | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | S  = 4 , total_length = 38} , self = 63 , parent = Nothing , duration = 0.345446230000
| | | | | | | S  , status = Success , start = 2025-09-03 11:22:52.554631854 UTC , finish
| | | | | | | S  = 2025-09-03 11:22:52.900078084 UTC , thread_cap_info = ("ThreadId 102",
| | | | | | | S  3, False)}
| | | | | | | S  
| | | | | F | |  
| | | | | F | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F | |  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | F | |  = 4 , total_length = 32} , self = 62 , parent = Nothing , duration = 0.118774872000
| | | | | F | |  , status = Fail , start = 2025-09-03 11:22:52.629520466 UTC , finish =
| | | | | F | |  2025-09-03 11:22:52.748295338 UTC , thread_cap_info = ("ThreadId 109",
| | | | | F | |  3, False)}
| | | | | F | |  
| | | F | | | |  
| | F   | | | |  
| F     | | | |  
|       | | F |  
|       | F   |  
| F     |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| F     |     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| F     |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| F     |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F     |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F     |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| F     |     |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| F     |     |  = 4 , total_length = 32} , self = 70 , parent = Nothing , duration = 0.347193255000
| F     |     |  , status = Fail , start = 2025-09-03 11:22:52.752312173 UTC , finish =
| F     |     |  2025-09-03 11:22:53.099505428 UTC , thread_cap_info = ("ThreadId 118",
| F     |     |  1, False)}
| F     |     |  
| | E   |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E   |     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E   |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E   |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E   |     |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | E   |     |  = 4 , total_length = 38} , self = 65 , parent = Nothing , duration = 0.208359768000
| | E   |     |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:22:52.752653729
| | E   |     |  UTC , finish = 2025-09-03 11:22:52.961013497 UTC , thread_cap_info = ("ThreadId
| | E   |     |  117", 3, False)}
| | E   |     |  
| | |   |     S  
| | E   |        
| F     |        
|       F        
E                
