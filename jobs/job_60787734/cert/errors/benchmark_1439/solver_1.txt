last 1086 length 4365
CNF 1086 vars 4365 clauses
last 1484 length 6533
last 620 length 2477
CNF 1484 vars 6533 clauses
last 776 length 3227
CNF 620 vars 2477 clauses
last 2550 length 10630
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2220, clauses: 8510
last 3930 length 17060
CNF 776 vars 3227 clauses
CNF 2550 vars 10630 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1609, clauses: 6010
last 2220 length 8510
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6898, clauses: 28843
CNF 3930 vars 17060 clauses
last 2790 length 11636
last 4466 length 19294
last 4054 length 16923
last 5824 length 25413
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5311, clauses: 22205
last 1609 length 6010
last 6898 length 28843
CNF 2220 vars 8510 clauses
CNF 2790 vars 11636 clauses
CNF 4466 vars 19294 clauses
CNF 5824 vars 25413 clauses
CNF 4054 vars 16923 clauses
last 5311 length 22205
CNF 1609 vars 6010 clauses
CNF 6898 vars 28843 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2220, clauses: 8510, status: Satisfied, time: 0.369233006s
CNF 5311 vars 22205 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1609, clauses: 6010, status: Unsatisfied, time: 0.302693975s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4419, clauses: 16757
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5891, clauses: 24060
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5311, clauses: 22205, status: Satisfied, time: 0.462555729s
last 4419 length 16757
last 5891 length 24060
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17525, clauses: 73987
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3233, clauses: 13597

last 17525 length 73987
last 3233 length 13597
CNF 4419 vars 16757 clauses
summary
CNF 5891 vars 24060 clauses
CNF 3233 vars 13597 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20424, clauses: 86175
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5891, clauses: 24060, status: Satisfied, time: 0.045207025s

CNF 17525 vars 73987 clauses
last 20424 length 86175
SRS with 3 rules on 2 letters       DP
SRS with 9 strict rules and 3 weak rules on 4 letters       weights
SRS with 3 strict rules and 3 weak rules on 4 letters       EDG
SRS with 3 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 4 letters       weights
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, a] -> [b, a, b, b] {- Input 0 -}
  [b, b, a, a] -> [a, a, b, b] {- Input 1 -}
  [b, a, b, b] -> [a, a, b, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, b, b] {- DP Nontop (Input 0) -}
  [b, b, a, a] ->= [a, a, b, b] {- DP Nontop (Input 1) -}
  [b, a, b, b] ->= [a, a, b, b] {- DP Nontop (Input 2) -}
  [a#, a, a, a] |-> [a#, b, b] {- DP (Top 1) (Input 0) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [a#, a, a, a] |-> [b#, a, b, b] {- DP (Top 0) (Input 0) -}
  [a#, a, a, a] |-> [b#, b] {- DP (Top 2) (Input 0) -}
  [b#, a, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 2) -}
  [b#, b, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Input 1) -}
  [b#, b, a, a] |-> [a#, b, b] {- DP (Top 1) (Input 1) -}
  [b#, b, a, a] |-> [b#] {- DP (Top 3) (Input 1) -}
  [b#, b, a, a] |-> [b#, b] {- DP (Top 2) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, b, b] {- DP Nontop (Input 0) -}
  [b, b, a, a] ->= [a, a, b, b] {- DP Nontop (Input 1) -}
  [b, a, b, b] ->= [a, a, b, b] {- DP Nontop (Input 2) -}
  [a#, a, a, a] |-> [b#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 2) -}
  [b#, b, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, a, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 2) -}
  [b#, b, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Input 1) -}
  [a, a, a, a] ->= [b, a, b, b] {- DP Nontop (Input 0) -}
  [b, b, a, a] ->= [a, a, b, b] {- DP Nontop (Input 1) -}
  [b, a, b, b] ->= [a, a, b, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 4A 4A 5A - \
        | 4A 4A 5A - |
        | 4A 4A 5A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Input 2) -}
  [a, a, a, a] ->= [b, a, b, b] {- DP Nontop (Input 0) -}
  [b, b, a, a] ->= [a, a, b, b] {- DP Nontop (Input 1) -}
  [b, a, b, b] ->= [a, a, b, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, b, b] {- DP Nontop (Input 0) -}
  [b, b, a, a] ->= [a, a, b, b] {- DP Nontop (Input 1) -}
  [b, a, b, b] ->= [a, a, b, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee(9/3,4)\Weight\EDG(3/3,4)\Matrix{\Arctic}{3}(1/3,4)\Weight(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.454077745000
  min duration 0.118111490000
  total durat. 1.499034831000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.418644558000
  min duration 0.057051924000
  total durat. 1.283948036000
**************************************************
F                        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                        = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F                        = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F                        = 45 , parent = Nothing , duration = 0.241652049000 , status = Fail , start
F                        = 2025-09-03 11:53:47.532972658 UTC , finish = 2025-09-03 11:53:47.774624707
F                        UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                        
| F                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                      , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                      = 24} , self = 59 , parent = Nothing , duration = 0.337534569000 , status
| F                      = Fail , start = 2025-09-03 11:53:47.539373903 UTC , finish = 2025-09-03
| F                      11:53:47.876908472 UTC , thread_cap_info = ("ThreadId 48", 0, False)}
| F                      
| | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F                    = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F                    = 120} , self = 62 , parent = Nothing , duration = 0.454077745000 , status
| | F                    = Fail , start = 2025-09-03 11:53:47.540170312 UTC , finish = 2025-09-03
| | F                    11:53:47.994248057 UTC , thread_cap_info = ("ThreadId 69", 1, False)}
| | F                    
| | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F                  = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F                  = 120} , self = 61 , parent = Nothing , duration = 0.418644558000 , status
| | | F                  = Fail , start = 2025-09-03 11:53:47.540175467 UTC , finish = 2025-09-03
| | | F                  11:53:47.958820025 UTC , thread_cap_info = ("ThreadId 71", 1, False)}
| | | F                  
| | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F                = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | F                = 48} , self = 42 , parent = Nothing , duration = 0.118111490000 , status
| | | | F                = Fail , start = 2025-09-03 11:53:47.55652736 UTC , finish = 2025-09-03
| | | | F                11:53:47.67463885 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
| | | | F                
| | | | | E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | E              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | E              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | E              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | E              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | E              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | E              = 24} , self = 74 , parent = Nothing , duration = 0.949672768000 , status
| | | | | E              = Except "AsyncCancelled" , start = 2025-09-03 11:53:47.596714377 UTC ,
| | | | | E              finish = 2025-09-03 11:53:48.546387145 UTC , thread_cap_info = ("ThreadId
| | | | | E              76", 0, False)}
| | | | | E              
| | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | F            = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | F            = 32} , self = 44 , parent = Nothing , duration = 0.109581741000 , status
| | | | | | F            = Fail , start = 2025-09-03 11:53:47.597171206 UTC , finish = 2025-09-03
| | | | | | F            11:53:47.706752947 UTC , thread_cap_info = ("ThreadId 81", 3, False)}
| | | | | | F            
| | | | | | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S          = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | S          = 4 , total_length = 48} , self = 67 , parent = Nothing , duration = 0.703343311000
| | | | | | | S          , status = Success , start = 2025-09-03 11:53:47.615958764 UTC , finish
| | | | | | | S          = 2025-09-03 11:53:48.319302075 UTC , thread_cap_info = ("ThreadId 83",
| | | | | | | S          3, False)}
| | | | | | | S          
| | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | | F        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | | F        = 32} , self = 60 , parent = Nothing , duration = 0.262824446000 , status
| | | | | | | | F        = Fail , start = 2025-09-03 11:53:47.616005637 UTC , finish = 2025-09-03
| | | | | | | | F        11:53:47.878830083 UTC , thread_cap_info = ("ThreadId 80", 3, False)}
| | | | | | | | F        
| | | | F | | | |        
| | | | E | | | |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E | | | |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E | | | |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E | | | |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E | | | |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E | | | |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | E | | | |        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | E | | | |        = 4 , total_length = 48} , self = 69 , parent = Nothing , duration = 0.737346399000
| | | | E | | | |        , status = Except "AsyncCancelled" , start = 2025-09-03 11:53:47.674677029
| | | | E | | | |        UTC , finish = 2025-09-03 11:53:48.412023428 UTC , thread_cap_info = ("ThreadId
| | | | E | | | |        88", 3, False)}
| | | | E | | | |        
| | | | | | F | |        
| | | | | | F | |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F | |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F | |        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | | | | F | |        = 3 , total_length = 32} , self = 72 , parent = Nothing , duration = 0.769249658000
| | | | | | F | |        , status = Fail , start = 2025-09-03 11:53:47.706790608 UTC , finish =
| | | | | | F | |        2025-09-03 11:53:48.476040266 UTC , thread_cap_info = ("ThreadId 90", 3,
| | | | | | F | |        False)}
| | | | | | F | |        
F | | | | | | | |        
F | | | | | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
F | | | | | | | |        = 1 , num_top_rules = 1 , num_weak_rules = 12 , alphabet_size = 5 , total_length
F | | | | | | | |        = 130} , self = 65 , parent = Nothing , duration = 0.343766824000 , status
F | | | | | | | |        = Fail , start = 2025-09-03 11:53:47.79080486 UTC , finish = 2025-09-03
F | | | | | | | |        11:53:48.134571684 UTC , thread_cap_info = ("ThreadId 104", 0, False)}
F | | | | | | | |        
| | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | | | | | | | | F      = 1 , num_top_rules = 1 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | | | | | | | F      = 130} , self = 63 , parent = Nothing , duration = 0.331435820000 , status
| | | | | | | | | F      = Fail , start = 2025-09-03 11:53:47.790807129 UTC , finish = 2025-09-03
| | | | | | | | | F      11:53:48.122242949 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | | | | | | | F      
| | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | F    = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | | | | | | F    = 180} , self = 64 , parent = Nothing , duration = 0.320254326000 , status
| | | | | | | | | | F    = Fail , start = 2025-09-03 11:53:47.809446098 UTC , finish = 2025-09-03
| | | | | | | | | | F    11:53:48.129700424 UTC , thread_cap_info = ("ThreadId 108", 2, False)}
| | | | | | | | | | F    
| | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | | | | F  = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | | | | | | | F  = 180} , self = 66 , parent = Nothing , duration = 0.367233993000 , status
| | | | | | | | | | | F  = Fail , start = 2025-09-03 11:53:47.81711394 UTC , finish = 2025-09-03
| | | | | | | | | | | F  11:53:48.184347933 UTC , thread_cap_info = ("ThreadId 109", 2, False)}
| | | | | | | | | | | F  
| F | | | | | | | | | |  
|   | | | | | | F | | |  
| E | | | | | |   | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | | | | |   | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | | | | |   | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | | | | |   | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | | | | |   | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | | | | |   | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | | | | |   | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | | | | |   | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | | | | |   | | |  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E | | | | | |   | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E | | | | | |   | | |  = 24} , self = 73 , parent = Nothing , duration = 0.645652670000 , status
| E | | | | | |   | | |  = Except "AsyncCancelled" , start = 2025-09-03 11:53:47.890370031 UTC ,
| E | | | | | |   | | |  finish = 2025-09-03 11:53:48.536022701 UTC , thread_cap_info = ("ThreadId
| E | | | | | |   | | |  112", 0, False)}
| E | | | | | |   | | |  
| | | F | | | |   | | |  
| | F   | | | |   | | |  
| |     | | | |   F | |  
| |     | | | |     F |  
F |     | | | |       |  
  |     | | | |       F  
  |     | | | S          
  |     E | |            
  |       | F            
  E       |              
          E              
CNF 20424 vars 86175 clauses
