last 401 length 1559
CNF 401 vars 1559 clauses
last 391 length 1540
last 431 length 1705
CNF 391 vars 1540 clauses
CNF 431 vars 1705 clauses
last 1258 length 5095
CNF 1258 vars 5095 clauses
last 418 length 1672
CNF 418 vars 1672 clauses
last 1238 length 4883
CNF 1238 vars 4883 clauses
last 530 length 2195
CNF 530 vars 2195 clauses
last 791 length 3519
CNF 791 vars 3519 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1868, clauses: 6648
last 1868 length 6648
CNF 1868 vars 6648 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       split
2 sub-proofs
  1 SRS with 1 strict rules and 2 weak rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 9 strict rules and 18 weak rules on 9 letters       weights
  SRS with 6 strict rules and 7 weak rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 7 weak rules on 8 letters       weights
  SRS with 0 strict rules and 4 weak rules on 8 letters       no strict rules

  2 SRS with 2 rules on 3 letters       split
  2 sub-proofs
    1 SRS with 2 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
    SRS with 18 rules on 9 letters       weights
    SRS with 4 rules on 8 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
    SRS with 1 rules on 5 letters       weights
    SRS with 0 rules on 0 letters       no strict rules

    2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] -> [c, c] {- Input 1 -}
  [b, c] -> [a, b, a, b] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, b] -> [] {- Input 0 -}
  [a, c] ->= [c, c] {- Input 1 -}
  [b, c] ->= [a, b, a, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, a], [a, c], [c, a]] ->= [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, c], [c, a]] ->= [ [b, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, c], [c, b]] ->= [ [b, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c], [c, c]] ->= [ [b, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, a], [a, c], [c, a]] ->= [ [c, c] , [c, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, a], [a, c], [c, b]] ->= [ [c, c] , [c, c] , [c, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, a], [a, c], [c, c]] ->= [ [c, c] , [c, c] , [c, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, b]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, a]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, b]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, c]] ->= [ [b, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, a]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, b]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, c]] ->= [ [c, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 2/1)
  ([b, a], 0/1)
  ([b, b], 2/1)
  ([b, c], 2/1)
  ([c, a], 2/1)
  ([c, b], 3/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[a, a], [a, c], [c, a]] ->= [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, c], [c, a]] ->= [ [b, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, c], [c, b]] ->= [ [b, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c], [c, c]] ->= [ [b, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [b, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( [b, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, b]
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a]] ->= [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, a], [a, c], [c, a]] ->= [ [b, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, c], [c, b]] ->= [ [b, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, a], [a, c], [c, c]] ->= [ [b, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 1/1)
  ([b, a], 0/1)
  ([b, c], 0/1)
  ([c, a], 0/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a]] ->= [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, b]] ->= [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, c]] ->= [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 2 (Input 2)) -}
reason
  no strict rules

property Termination
has value Just True
for SRS
  [a, c] -> [c, c] {- Input 1 -}
  [b, c] -> [a, b, a, b] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, c] -> [c, c] {- Input 1 -}
  [b, c] -> [a, b, a, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[c, a], [a, c], [c, a]] -> [ [c, c] , [c, c] , [c, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[c, a], [a, c], [c, c]] -> [ [c, c] , [c, c] , [c, c] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, a], [a, c], [c, b]] -> [ [c, c] , [c, c] , [c, b] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[b, a], [a, c], [c, a]] -> [ [b, c] , [c, c] , [c, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[b, a], [a, c], [c, c]] -> [ [b, c] , [c, c] , [c, c] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[b, a], [a, c], [c, b]] -> [ [b, c] , [c, c] , [c, b] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, a]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, c], [c, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[c, b], [b, c], [c, a]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[c, b], [b, c], [c, c]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[c, b], [b, c], [c, b]] -> [ [c, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[b, b], [b, c], [c, a]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] ] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[b, b], [b, c], [c, c]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[b, b], [b, c], [c, b]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, b] ] {- Semlab 2 (Concon 2 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([a, c], 2/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
  ([b, c], 1/1)
  ([c, a], 1/1)
  ([c, b], 2/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, c], [c, a]] -> [ [a, c] , [c, c] , [c, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, a], [a, c], [c, b]] -> [ [a, c] , [c, c] , [c, b] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[a, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, c], [c, c]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, c] ] {- Semlab 0 (Concon 1 (Input 2)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, c], 0/1)
  ([c, c], 1/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3,3)\Split[(1/2,3)\TileAllAll{2}(9/18,9)\Weight(6/7,9)\Matrix{\Natural}{2}(0/7,8)\Weight(0/4,8)[],(2,3)\Split[(2,3)\TileAllAll{2}(18,9)\Weight(4,8)\Matrix{\Natural}{2}(1,5)\Weight(0,0)[],(0,0)[]]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1868, clauses: 6684
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1868, clauses: 6648, status: Satisfied, time: 0.06938829s
cleaner last 1868 length 6684
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5798, clauses: 23957
(Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5798, clauses: 23967
Or_Elselast 5798 length 23957
 last 5798 length 23967
done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 1868 vars 6684 clauses
CNF 5798 vars 23967 clauses
CNF 5798 vars 23957 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1868, clauses: 6684, status: Satisfied, time: 0.013489222s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5798, clauses: 23967, status: Satisfied, time: 0.015900374s


**************************************************
   
