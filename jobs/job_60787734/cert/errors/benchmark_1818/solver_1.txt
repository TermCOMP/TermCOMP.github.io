last 548 length 2529
CNF 548 vars 2529 clauses
last 725 length 3359
CNF 725 vars 3359 clauses
last 1070 length 4861
last 1525 length 7524
last 1094 length 5147
last 1282 length 6242
CNF 1070 vars 4861 clauses
CNF 1525 vars 7524 clauses
last 1298 length 6097
CNF 1282 vars 6242 clauses
CNF 1094 vars 5147 clauses
last 1140 length 5280
last 857 length 3839
CNF 1298 vars 6097 clauses
last 1190 length 5527
CNF 1140 vars 5280 clauses
CNF 857 vars 3839 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1610, clauses: 5991
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1727, clauses: 6294
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1288, clauses: 4873
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4349, clauses: 18129
CNF 1190 vars 5527 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1393, clauses: 5149
last 1610 length 5991
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5294, clauses: 21997
last 1727 length 6294
last 1288 length 4873
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5880, clauses: 24511
last 4349 length 18129
last 1393 length 5149
last 5294 length 21997
CNF 1727 vars 6294 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4933, clauses: 20597
last 5880 length 24511
CNF 1288 vars 4873 clauses
CNF 1610 vars 5991 clauses
CNF 4349 vars 18129 clauses
CNF 5294 vars 21997 clauses
last 4933 length 20597
CNF 5880 vars 24511 clauses
CNF 1393 vars 5149 clauses
CNF 4933 vars 20597 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1288, clauses: 4873, status: Unsatisfied, time: 0.166612501s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1610, clauses: 5991, status: Satisfied, time: 0.281721433s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5880, clauses: 24511, status: Satisfied, time: 0.181971056s
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 rules on 4 letters       weights
SRS with 1 rules on 3 letters       DP
SRS with 3 strict rules and 1 weak rules on 4 letters       weights
SRS with 1 strict rules and 1 weak rules on 4 letters       EDG
SRS with 1 strict rules and 1 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, a, b, a, b] -> [a, b, a, b, a, b, a] {- Input 0 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, b]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b]#, [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, a] , [ a , a ] ] {- DP (Top 5) (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b]#, [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP (Top 3) (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b]#, [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 0))) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([b, a], 1/1)
  ([a, b]#, 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b]#, [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 0))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [[a, b]#, [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
reason
  ( [a, a]
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( [a, b]
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( [b, a]
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( [a, b]#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [[a, b], [b, a], [a, a], [a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, b] , [b, a] , [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
reason
  EDG

**************************************************
skeleton: (1,2)\TileAllAll{2}(4,4)\Weight(1,3)\Deepee(3/1,4)\Weight\EDG(1/1,4)\Matrix{\Arctic}{3}(0/1,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 13} , self
F              = 63 , parent = Nothing , duration = 0.146230930000 , status = Fail , start
F              = 2025-09-03 13:43:36.993329236 UTC , finish = 2025-09-03 13:43:37.139560166
F              UTC , thread_cap_info = ("ThreadId 23", 1, False)}
F              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| F            = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| F            = 29} , self = 62 , parent = Nothing , duration = 0.105505788000 , status
| F            = Fail , start = 2025-09-03 13:43:37.012548615 UTC , finish = 2025-09-03
| F            13:43:37.118054403 UTC , thread_cap_info = ("ThreadId 91", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | F          = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | F          = 29} , self = 64 , parent = Nothing , duration = 0.151607844000 , status
| | F          = Fail , start = 2025-09-03 13:43:37.024919387 UTC , finish = 2025-09-03
| | F          13:43:37.176527231 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | F        = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F        = 25} , self = 65 , parent = Nothing , duration = 0.130223930000 , status
| | | F        = Fail , start = 2025-09-03 13:43:37.049040898 UTC , finish = 2025-09-03
| | | F        13:43:37.179264828 UTC , thread_cap_info = ("ThreadId 108", 2, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | F      = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F      = 25} , self = 66 , parent = Nothing , duration = 0.193577243000 , status
| | | | F      = Fail , start = 2025-09-03 13:43:37.049055004 UTC , finish = 2025-09-03
| | | | F      13:43:37.242632247 UTC , thread_cap_info = ("ThreadId 109", 2, False)}
| | | | F      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 2 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| | | | | S    = 4 , total_length = 29} , self = 68 , parent = Nothing , duration = 0.396088506000
| | | | | S    , status = Success , start = 2025-09-03 13:43:37.078863103 UTC , finish
| | | | | S    = 2025-09-03 13:43:37.474951609 UTC , thread_cap_info = ("ThreadId 112",
| | | | | S    0, False)}
| | | | | S    
| | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F  = 2 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| | | | | | F  = 3 , total_length = 25} , self = 67 , parent = Nothing , duration = 0.345463798000
| | | | | | F  , status = Fail , start = 2025-09-03 13:43:37.092715741 UTC , finish =
| | | | | | F  2025-09-03 13:43:37.438179539 UTC , thread_cap_info = ("ThreadId 114",
| | | | | | F  2, False)}
| | | | | | F  
| F | | | | |  
| E | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 2
| E | | | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| E | | | | |  = 4 , total_length = 29} , self = 70 , parent = Nothing , duration = 0.343738042000
| E | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:43:37.13217529
| E | | | | |  UTC , finish = 2025-09-03 13:43:37.475913332 UTC , thread_cap_info = ("ThreadId
| E | | | | |  118", 2, False)}
| E | | | | |  
F | | | | | |  
  | F | | | |  
  |   F | | |  
S |     | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S |     | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S |     | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S |     | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S |     | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S |     | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 2
S |     | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
S |     | | |  = 4 , total_length = 29} , self = 73 , parent = Nothing , duration = 0.297647205000
S |     | | |  , status = Success , start = 2025-09-03 13:43:37.192934835 UTC , finish
S |     | | |  = 2025-09-03 13:43:37.49058204 UTC , thread_cap_info = ("ThreadId 121",
S |     | | |  2, False)}
S |     | | |  
| |     F | |  
| |       | F  
| |       S    
| E            
S              
