last 1214 length 5104
CNF 1214 vars 5104 clauses
last 1343 length 5676
CNF 1343 vars 5676 clauses
last 1194 length 5023
CNF 1194 vars 5023 clauses
last 3522 length 16230
CNF 3522 vars 16230 clauses
last 1144 length 4835
CNF 1144 vars 4835 clauses
last 3982 length 17239
CNF 3982 vars 17239 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2751, clauses: 10346
last 2751 length 10346
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2742, clauses: 10319
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9239, clauses: 38810
CNF 2751 vars 10346 clauses
last 2742 length 10319
last 5764 length 25324
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9241, clauses: 38836
last 5459 length 24232
last 9239 length 38810
last 6244 length 27552
last 5843 length 26528
CNF 2742 vars 10319 clauses
CNF 5764 vars 25324 clauses
last 9241 length 38836
CNF 6244 vars 27552 clauses
CNF 9239 vars 38810 clauses
CNF 5459 vars 24232 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2751, clauses: 10346, status: Unsatisfied, time: 0.321084292s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2742, clauses: 10319, status: Satisfied, time: 0.229194327s
CNF 5843 vars 26528 clauses
CNF 9241 vars 38836 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6770, clauses: 26694
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5616, clauses: 23653
last 6770 length 26694
last 5616 length 23653
last 943 length 3978
CNF 6770 vars 26694 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6986, clauses: 27027
CNF 5616 vars 23653 clauses
last 832 length 3492
CNF 943 vars 3978 clauses
last 6986 length 27027
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6770, clauses: 26694, status: Satisfied, time: 0.166430621s
CNF 832 vars 3492 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6667
last 1810 length 6667
CNF 1810 vars 6667 clauses
CNF 6986 vars 27027 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1810, clauses: 6667, status: Satisfied, time: 0.060405214s
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 10 strict rules and 3 weak rules on 4 letters       weights
SRS with 3 strict rules and 3 weak rules on 4 letters       EDG
SRS with 3 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 4 letters       weights
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, b] -> [a, a, b, a] {- Input 0 -}
  [a, a, a, a] -> [b, a, b, b] {- Input 1 -}
  [b, b, b, a] -> [b, b, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b, a, b] -> [a, b, a, a] {- Mirror (Input 0) -}
  [a, a, a, a] -> [b, b, a, b] {- Mirror (Input 1) -}
  [a, b, b, b] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, b, b] |-> [a#, b, b] {- DP (Top 1) (Mirror (Input 2)) -}
  [b#, b, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, b] |-> [b#, a, a] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, b, a, b] |-> [a#, b, a, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 6A 7A - \
        | 4A 6A 7A - |
        | 4A 6A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, b, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b, b] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 5A 7A 7A - \
        | 5A 7A 7A - |
        | 5A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, b, a, b] ->= [a, b, a, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, a, a] ->= [b, b, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b, b] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(10/3,4)\Weight\EDG(3/3,4)\Matrix{\Arctic}{3}(2/3,4)\Weight\EDG(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.628007463000
  min duration 0.070028390000
  total durat. 1.850277582000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.579545570000
  min duration 0.081326042000
  total durat. 1.659336666000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 0.900456642000
  min duration 0.108127959000
  total durat. 1.768263180000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.881467468000
  min duration 0.404645170000
  total durat. 1.946499933000
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F                  = 46 , parent = Nothing , duration = 0.152626264000 , status = Fail , start
F                  = 2025-09-03 12:05:22.175468247 UTC , finish = 2025-09-03 12:05:22.328094511
F                  UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                = 24} , self = 61 , parent = Nothing , duration = 0.423272057000 , status
| F                = Fail , start = 2025-09-03 12:05:22.175480725 UTC , finish = 2025-09-03
| F                12:05:22.598752782 UTC , thread_cap_info = ("ThreadId 35", 2, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | F              = 24} , self = 74 , parent = Nothing , duration = 0.950288517000 , status
| | F              = Fail , start = 2025-09-03 12:05:22.175489505 UTC , finish = 2025-09-03
| | F              12:05:23.125778022 UTC , thread_cap_info = ("ThreadId 51", 2, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | F            = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F            = 120} , self = 59 , parent = Nothing , duration = 0.268526502000 , status
| | | F            = Fail , start = 2025-09-03 12:05:22.177208122 UTC , finish = 2025-09-03
| | | F            12:05:22.445734624 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F          = 120} , self = 50 , parent = Nothing , duration = 0.153457189000 , status
| | | | F          = Fail , start = 2025-09-03 12:05:22.177211817 UTC , finish = 2025-09-03
| | | | F          12:05:22.330669006 UTC , thread_cap_info = ("ThreadId 78", 3, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | F        = 48} , self = 42 , parent = Nothing , duration = 0.103800564000 , status
| | | | | F        = Fail , start = 2025-09-03 12:05:22.183967974 UTC , finish = 2025-09-03
| | | | | F        12:05:22.287768538 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | | | | F      = 48} , self = 58 , parent = Nothing , duration = 0.171174099000 , status
| | | | | | F      = Fail , start = 2025-09-03 12:05:22.234306643 UTC , finish = 2025-09-03
| | | | | | F      12:05:22.405480742 UTC , thread_cap_info = ("ThreadId 85", 1, False)}
| | | | | | F      
| | | | | F |      
| | | | | S |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S |      = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | S |      = 4 , total_length = 48} , self = 66 , parent = Nothing , duration = 0.660387295000
| | | | | S |      , status = Success , start = 2025-09-03 12:05:22.287811846 UTC , finish
| | | | | S |      = 2025-09-03 12:05:22.948199141 UTC , thread_cap_info = ("ThreadId 94",
| | | | | S |      1, False)}
| | | | | S |      
| | | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | E    = 4 , total_length = 48} , self = 68 , parent = Nothing , duration = 0.759678579000
| | | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:22.303944229
| | | | | | | E    UTC , finish = 2025-09-03 12:05:23.063622808 UTC , thread_cap_info = ("ThreadId
| | | | | | | E    95", 1, False)}
| | | | | | | E    
F | | | | | | |    
  | | | F | | |    
F | | |   | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |   | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |   | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
F | | |   | | |    = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
F | | |   | | |    = 180} , self = 62 , parent = Nothing , duration = 0.426348198000 , status
F | | |   | | |    = Fail , start = 2025-09-03 12:05:22.356213013 UTC , finish = 2025-09-03
F | | |   | | |    12:05:22.782561211 UTC , thread_cap_info = ("ThreadId 105", 3, False)}
F | | |   | | |    
| | | | F | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F | | |    = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | F | | |    = 4 , total_length = 48} , self = 65 , parent = Nothing , duration = 0.484072737000
| | | | F | | |    , status = Fail , start = 2025-09-03 12:05:22.363938935 UTC , finish =
| | | | F | | |    2025-09-03 12:05:22.848011672 UTC , thread_cap_info = ("ThreadId 100",
| | | | F | | |    1, False)}
| | | | F | | |    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | | | F  = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | | | | F  = 180} , self = 64 , parent = Nothing , duration = 0.445960472000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 12:05:22.393871384 UTC , finish = 2025-09-03
| | | | | | | | F  12:05:22.839831856 UTC , thread_cap_info = ("ThreadId 106", 3, False)}
| | | | | | | | F  
| | | | | | F | |  
| | | F | |   | |  
| | | F | |   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | |   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | F | |   | |  = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | F | |   | |  = 180} , self = 63 , parent = Nothing , duration = 0.286192930000 , status
| | | F | |   | |  = Fail , start = 2025-09-03 12:05:22.515476254 UTC , finish = 2025-09-03
| | | F | |   | |  12:05:22.801669184 UTC , thread_cap_info = ("ThreadId 109", 3, False)}
| | | F | |   | |  
| | | | | | F | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F | |  = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | F | |  = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | | F | |  = 180} , self = 73 , parent = Nothing , duration = 0.579545570000 , status
| | | | | | F | |  = Fail , start = 2025-09-03 12:05:22.524245566 UTC , finish = 2025-09-03
| | | | | | F | |  12:05:23.103791136 UTC , thread_cap_info = ("ThreadId 110", 3, False)}
| | | | | | F | |  
| F | | | | | | |  
F   | | | | | | |  
S   | | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | | | | | |  = 18 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 12 ,
S   | | | | | | |  alphabet_size = 6 , total_length = 180} , self = 76 , parent = Nothing
S   | | | | | | |  , duration = 0.881467468000 , status = Success , start = 2025-09-03 12:05:22.78261727
S   | | | | | | |  UTC , finish = 2025-09-03 12:05:23.664084738 UTC , thread_cap_info = ("ThreadId
S   | | | | | | |  122", 3, False)}
S   | | | | | | |  
|   | F | | | | |  
|   |   | | | | F  
| E |   | | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   | | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 18
| E |   | | | |    , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size
| E |   | | | |    = 6 , total_length = 180} , self = 79 , parent = Nothing , duration = 0.900456642000
| E |   | | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:22.84477856
| E |   | | | |    UTC , finish = 2025-09-03 12:05:23.745235202 UTC , thread_cap_info = ("ThreadId
| E |   | | | |    124", 3, False)}
| E |   | | | |    
| | |   F | | |    
| | |     S | |    
| | |       | E    
| | | F     |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F     |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F     |      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F     |      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | F     |      = 32} , self = 78 , parent = Nothing , duration = 0.628007463000 , status
| | | F     |      = Fail , start = 2025-09-03 12:05:23.063968496 UTC , finish = 2025-09-03
| | | F     |      12:05:23.691975959 UTC , thread_cap_info = ("ThreadId 130", 1, False)}
| | | F     |      
| | | | F   |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F   |      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F   |      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | F   |      = 32} , self = 75 , parent = Nothing , duration = 0.295246829000 , status
| | | | F   |      = Fail , start = 2025-09-03 12:05:23.063972911 UTC , finish = 2025-09-03
| | | | F   |      12:05:23.35921974 UTC , thread_cap_info = ("ThreadId 131", 1, False)}
| | | | F   |      
| | | | |   F      
| | F | |          
| |   | F          
| | S |            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |            = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | S |            = 3 , total_length = 32} , self = 80 , parent = Nothing , duration = 0.404645170000
| | S |            , status = Success , start = 2025-09-03 12:05:23.363949163 UTC , finish
| | S |            = 2025-09-03 12:05:23.768594333 UTC , thread_cap_info = ("ThreadId 138",
| | S |            1, False)}
| | S |            
S | | |            
  | | F            
E | |              Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |              = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E | |              , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
E | |              = 3 , total_length = 32} , self = 83 , parent = Nothing , duration = 0.108127959000
E | |              , status = Except "AsyncCancelled" , start = 2025-09-03 12:05:23.703981434
E | |              UTC , finish = 2025-09-03 12:05:23.812109393 UTC , thread_cap_info = ("ThreadId
E | |              141", 1, False)}
E | |              
| E |              
|   S              
E                  
