last 3894 length 19598
last 3541 length 15759
CNF 3541 vars 15759 clauses
CNF 3894 vars 19598 clauses
last 6529 length 29621
CNF 6529 vars 29621 clauses
last 7857 length 33859
last 721 length 2942
CNF 7857 vars 33859 clauses
last 671 length 2638
last 899 length 3935
last 630 length 2482
CNF 721 vars 2942 clauses
last 16140 length 82203
CNF 671 vars 2638 clauses
CNF 899 vars 3935 clauses
CNF 630 vars 2482 clauses
last 14024 length 90039
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2762, clauses: 9960
CNF 16140 vars 82203 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15531, clauses: 59243
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9795
last 2762 length 9960
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9226, clauses: 38479
last 15531 length 59243
CNF 14024 vars 90039 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9516, clauses: 39671
last 2741 length 9795
last 9226 length 38479
CNF 2762 vars 9960 clauses
last 9516 length 39671
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 45386, clauses: 190119
CNF 15531 vars 59243 clauses
CNF 2741 vars 9795 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20208, clauses: 79262
CNF 9226 vars 38479 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2762, clauses: 9960, status: Unsatisfied, time: 0.722250004s
CNF 9516 vars 39671 clauses
last 45386 length 190119
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9795, status: Unsatisfied, time: 0.720077377s
last 20208 length 79262
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9226, clauses: 38479, status: Satisfied, time: 0.587434136s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9516, clauses: 39671, status: Satisfied, time: 0.630471324s
last 651 length 2674
CNF 45386 vars 190119 clauses
last 869 length 3813
CNF 20208 vars 79262 clauses
CNF 651 vars 2674 clauses
**************************************************CNF 869 vars 3813 clauses

summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 10 rules on 3 letters       mirror
SRS with 10 rules on 3 letters       DP
SRS with 5 strict rules and 10 weak rules on 6 letters       weights
SRS with 2 strict rules and 10 weak rules on 4 letters       EDG
SRS with 2 strict rules and 10 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 10 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [a, c] -> [c, c, a, a, b] {- Input 2 -}
  [b, b] -> [] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [a] {- Input 1 -}
  [b, a, b] -> [b] {- Input 1 -}
  [c, a, b] -> [c] {- Input 1 -}
  [a, c] -> [c, c, a, a, b] {- Input 2 -}
  [a, b, b] -> [a] {- Input 3 -}
  [b, b, b] -> [b] {- Input 3 -}
  [c, b, b] -> [c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a] {- Mirror (Input 1) -}
  [b, a, b] -> [b] {- Mirror (Input 1) -}
  [b, a, c] -> [c] {- Mirror (Input 1) -}
  [c, a] -> [b, a, a, c, c] {- Mirror (Input 2) -}
  [b, b, a] -> [a] {- Mirror (Input 3) -}
  [b, b, b] -> [b] {- Mirror (Input 3) -}
  [b, b, c] -> [c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a] |-> [a#, a, c, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, c, c] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, a] |-> [b#, a, a, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, a] |-> [c#, c] {- DP (Top 3) (Mirror (Input 2)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A  1A 1A  \
        | -1A 0A -1A |
        \ -   -  0A  / )
  ( b
  , Wk  / -   1A 0A \
        | -1A -  1A |
        \ -   -  0A / )
  ( c
  , Wk  / 0A -   -   \
        | 0A -1A -1A |
        \ -  -   0A  / )
  ( c#
  , Wk  / 1A -2A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, c] ->= [c] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, a, a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(10,3)\Deepee(5/10,6)\Weight\EDG(2/10,4)\Matrix{\ArcticBZ}{3}(0/10,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.968691539000
  min duration 0.122699349000
  total durat. 2.273278357000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.312914497000
  min duration 0.127012071000
  total durat. 2.578597703000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 98
      , num_strict_rules = 62
      , num_top_rules = 62
      , num_weak_rules = 36
      , alphabet_size = 17
      , total_length = 530}
    , self = 66
    , parent = Nothing
    , duration = 1.312914497000
    , status = Fail
    , start = 2025-09-03 11:02:40.311256302 UTC
    , finish = 2025-09-03 11:02:41.624170799 UTC
    , thread_cap_info = ("ThreadId 87", 0, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.540738935000
  min duration 1.504517868000
  total durat. 3.045256803000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 10
      , alphabet_size = 4
      , total_length = 49}
    , self = 69
    , parent = Nothing
    , duration = 1.504517868000
    , status = Success
    , start = 2025-09-03 11:02:40.985405729 UTC
    , finish = 2025-09-03 11:02:42.489923597 UTC
    , thread_cap_info = ("ThreadId 116", 2, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 10
      , alphabet_size = 4
      , total_length = 47}
    , self = 76
    , parent = Nothing
    , duration = 1.540738935000
    , status = Success
    , start = 2025-09-03 11:02:41.057443542 UTC
    , finish = 2025-09-03 11:02:42.598182477 UTC
    , thread_cap_info = ("ThreadId 118", 2, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.382575549000
  min duration 1.237332601000
  total durat. 2.619908150000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 10
      , alphabet_size = 4
      , total_length = 49}
    , self = 67
    , parent = Nothing
    , duration = 1.237332601000
    , status = Fail
    , start = 2025-09-03 11:02:40.841481429 UTC
    , finish = 2025-09-03 11:02:42.07881403 UTC
    , thread_cap_info = ("ThreadId 114", 2, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 12
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 10
      , alphabet_size = 4
      , total_length = 47}
    , self = 68
    , parent = Nothing
    , duration = 1.382575549000
    , status = Fail
    , start = 2025-09-03 11:02:40.998240261 UTC
    , finish = 2025-09-03 11:02:42.38081581 UTC
    , thread_cap_info = ("ThreadId 117", 2, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.160123407000
  min duration 1.160123407000
  total durat. 1.160123407000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 65
    , parent = Nothing
    , duration = 1.160123407000
    , status = Fail
    , start = 2025-09-03 11:02:40.182639803 UTC
    , finish = 2025-09-03 11:02:41.34276321 UTC
    , thread_cap_info = ("ThreadId 52", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.315769361000
  min duration 1.315769361000
  total durat. 1.315769361000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 82
    , parent = Nothing
    , duration = 1.315769361000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:02:41.342780573 UTC
    , finish = 2025-09-03 11:02:42.658549934 UTC
    , thread_cap_info = ("ThreadId 121", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 2.057755322000
  min duration 2.057755322000
  total durat. 2.057755322000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 81
    , parent = Nothing
    , duration = 2.057755322000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:02:40.57919007 UTC
    , finish = 2025-09-03 11:02:42.636945392 UTC
    , thread_cap_info = ("ThreadId 108", 2, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F                  = 50 , parent = Nothing , duration = 0.264775773000 , status = Fail , start
F                  = 2025-09-03 11:02:40.18256628 UTC , finish = 2025-09-03 11:02:40.447342053
F                  UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 12} , self = 58 , parent = Nothing , duration = 0.396552393000 , status
| F                = Fail , start = 2025-09-03 11:02:40.182579934 UTC , finish = 2025-09-03
| F                11:02:40.579132327 UTC , thread_cap_info = ("ThreadId 47", 2, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F              = 12} , self = 65 , parent = Nothing , duration = 1.160123407000 , status
| | F              = Fail , start = 2025-09-03 11:02:40.182639803 UTC , finish = 2025-09-03
| | F              11:02:41.34276321 UTC , thread_cap_info = ("ThreadId 52", 3, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 180} , self = 41 , parent = Nothing , duration = 0.122699349000 , status
| | | F            = Fail , start = 2025-09-03 11:02:40.184192468 UTC , finish = 2025-09-03
| | | F            11:02:40.306891817 UTC , thread_cap_info = ("ThreadId 69", 1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F          = 180} , self = 42 , parent = Nothing , duration = 0.127012071000 , status
| | | | F          = Fail , start = 2025-09-03 11:02:40.184194951 UTC , finish = 2025-09-03
| | | | F          11:02:40.311207022 UTC , thread_cap_info = ("ThreadId 71", 1, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 71 , num_strict_rules
| | | | | F        = 35 , num_top_rules = 35 , num_weak_rules = 36 , alphabet_size = 14 ,
| | | | | F        total_length = 362} , self = 59 , parent = Nothing , duration = 0.446678699000
| | | | | F        , status = Fail , start = 2025-09-03 11:02:40.213018551 UTC , finish =
| | | | | F        2025-09-03 11:02:40.65969725 UTC , thread_cap_info = ("ThreadId 79", 0,
| | | | | F        False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 71 , num_strict_rules
| | | | | | F      = 35 , num_top_rules = 35 , num_weak_rules = 36 , alphabet_size = 14 ,
| | | | | | F      total_length = 362} , self = 49 , parent = Nothing , duration = 0.221253778000
| | | | | | F      , status = Fail , start = 2025-09-03 11:02:40.216494598 UTC , finish =
| | | | | | F      2025-09-03 11:02:40.437748376 UTC , thread_cap_info = ("ThreadId 80", 0,
| | | | | | F      False)}
| | | | | | F      
| | | F | | |      
| | |   F | |      
| | | F   | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 98 , num_strict_rules
| | | F   | |      = 62 , num_top_rules = 62 , num_weak_rules = 36 , alphabet_size = 17 ,
| | | F   | |      total_length = 530} , self = 66 , parent = Nothing , duration = 1.312914497000
| | | F   | |      , status = Fail , start = 2025-09-03 11:02:40.311256302 UTC , finish =
| | | F   | |      2025-09-03 11:02:41.624170799 UTC , thread_cap_info = ("ThreadId 87", 0,
| | | F   | |      False)}
| | | F   | |      
| | | | F | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F | |      = False\n , verbose = False}" , input_size = Size { num_rules = 98 , num_strict_rules
| | | | F | |      = 62 , num_top_rules = 62 , num_weak_rules = 36 , alphabet_size = 17 ,
| | | | F | |      total_length = 530} , self = 64 , parent = Nothing , duration = 0.968691539000
| | | | F | |      , status = Fail , start = 2025-09-03 11:02:40.311259454 UTC , finish =
| | | | F | |      2025-09-03 11:02:41.279950993 UTC , thread_cap_info = ("ThreadId 86", 1,
| | | | F | |      False)}
| | | | F | |      
| | | | | | F      
F | | | | |        
F | | | | |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | |        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F | | | | |        = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
F | | | | |        = 49} , self = 60 , parent = Nothing , duration = 0.304814115000 , status
F | | | | |        = Fail , start = 2025-09-03 11:02:40.536639859 UTC , finish = 2025-09-03
F | | | | |        11:02:40.841453974 UTC , thread_cap_info = ("ThreadId 102", 2, False)}
F | | | | |        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | | | | | F      = 49} , self = 61 , parent = Nothing , duration = 0.440398387000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:02:40.544978565 UTC , finish = 2025-09-03
| | | | | | F      11:02:40.985376952 UTC , thread_cap_info = ("ThreadId 103", 2, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | | | | | | F    = 47} , self = 62 , parent = Nothing , duration = 0.430394655000 , status
| | | | | | | F    = Fail , start = 2025-09-03 11:02:40.55719605 UTC , finish = 2025-09-03
| | | | | | | F    11:02:40.987590705 UTC , thread_cap_info = ("ThreadId 106", 2, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size = 4 , total_length
| | | | | | | | F  = 47} , self = 63 , parent = Nothing , duration = 0.477018970000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 11:02:40.563087552 UTC , finish = 2025-09-03
| | | | | | | | F  11:02:41.040106522 UTC , thread_cap_info = ("ThreadId 107", 2, False)}
| | | | | | | | F  
| F | | | | | | |  
| E | | | | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E | | | | | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E | | | | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E | | | | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E | | | | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E | | | | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E | | | | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E | | | | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E | | | | | | |  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| E | | | | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E | | | | | | |  = 12} , self = 81 , parent = Nothing , duration = 2.057755322000 , status
| E | | | | | | |  = Except "AsyncCancelled" , start = 2025-09-03 11:02:40.57919007 UTC ,
| E | | | | | | |  finish = 2025-09-03 11:02:42.636945392 UTC , thread_cap_info = ("ThreadId
| E | | | | | | |  108", 2, False)}
| E | | | | | | |  
| | | | | F | | |  
F | | | |   | | |  
F | | | |   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | | |   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | | |   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | | |   | | |  = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
F | | | |   | | |  alphabet_size = 4 , total_length = 49} , self = 67 , parent = Nothing ,
F | | | |   | | |  duration = 1.237332601000 , status = Fail , start = 2025-09-03 11:02:40.841481429
F | | | |   | | |  UTC , finish = 2025-09-03 11:02:42.07881403 UTC , thread_cap_info = ("ThreadId
F | | | |   | | |  114", 2, False)}
F | | | |   | | |  
| | | | |   F | |  
| | | | | S   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | S   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | S   | |  = 4 , total_length = 49} , self = 69 , parent = Nothing , duration = 1.504517868000
| | | | | S   | |  , status = Success , start = 2025-09-03 11:02:40.985405729 UTC , finish
| | | | | S   | |  = 2025-09-03 11:02:42.489923597 UTC , thread_cap_info = ("ThreadId 116",
| | | | | S   | |  2, False)}
| | | | | S   | |  
| | | | | |   F |  
| | | | | | F   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F   |  = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | | | | | F   |  alphabet_size = 4 , total_length = 47} , self = 68 , parent = Nothing ,
| | | | | | F   |  duration = 1.382575549000 , status = Fail , start = 2025-09-03 11:02:40.998240261
| | | | | | F   |  UTC , finish = 2025-09-03 11:02:42.38081581 UTC , thread_cap_info = ("ThreadId
| | | | | | F   |  117", 2, False)}
| | | | | | F   |  
| | | | | | |   F  
| | | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | | | S    = 4 , total_length = 47} , self = 76 , parent = Nothing , duration = 1.540738935000
| | | | | | | S    , status = Success , start = 2025-09-03 11:02:41.057443542 UTC , finish
| | | | | | | S    = 2025-09-03 11:02:42.598182477 UTC , thread_cap_info = ("ThreadId 118",
| | | | | | | S    2, False)}
| | | | | | | S    
| | | | F | | |    
| | F |   | | |    
| | E |   | | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E |   | | |    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | E |   | | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E |   | | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E |   | | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E |   | | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E |   | | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E |   | | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E |   | | |    = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | E |   | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E |   | | |    = 12} , self = 82 , parent = Nothing , duration = 1.315769361000 , status
| | E |   | | |    = Except "AsyncCancelled" , start = 2025-09-03 11:02:41.342780573 UTC ,
| | E |   | | |    finish = 2025-09-03 11:02:42.658549934 UTC , thread_cap_info = ("ThreadId
| | E |   | | |    121", 3, False)}
| | E |   | | |    
| | | F   | | |    
F | |     | | |    
E | |     | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | |     | | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | |     | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | |     | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |     | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |     | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
E | |     | | |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
E | |     | | |    = 4 , total_length = 49} , self = 71 , parent = Nothing , duration = 0.424700710000
E | |     | | |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:42.11898951
E | |     | | |    UTC , finish = 2025-09-03 11:02:42.54369022 UTC , thread_cap_info = ("ThreadId
E | |     | | |    128", 2, False)}
E | |     | | |    
| | |     | F |    
| | | E   |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E   |   |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E   |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E   |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | E   |   |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | E   |   |    = 4 , total_length = 47} , self = 78 , parent = Nothing , duration = 0.238923041000
| | | E   |   |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:02:42.397846861
| | | E   |   |    UTC , finish = 2025-09-03 11:02:42.636769902 UTC , thread_cap_info = ("ThreadId
| | | E   |   |    130", 2, False)}
| | | E   |   |    
| | | |   S   |    
E | | |       |    
  | | |       S    
  | | E            
  E |              
    E              
