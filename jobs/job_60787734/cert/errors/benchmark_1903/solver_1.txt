last 1097 length 4866
CNF 1097 vars 4866 clauses
last 1460 length 7560
last 1339 length 6208
CNF 1460 vars 7560 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2761, clauses: 9967
last 2761 length 9967
CNF 1339 vars 6208 clauses
CNF 2761 vars 9967 clauses
last 1734 length 10922
CNF 1734 vars 10922 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2960, clauses: 10554
last 2960 length 10554
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9360, clauses: 38885
last 9360 length 38885
CNF 9360 vars 38885 clauses
CNF 2960 vars 10554 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9700, clauses: 40291
last 9700 length 40291
CNF 9700 vars 40291 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9700, clauses: 40291, status: Satisfied, time: 0.093636094s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 1436 length 7468
CNF 1436 vars 7468 clauses
last 1703 length 10803
CNF 1703 vars 10803 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2761, clauses: 9817
last 2761 length 9817
CNF 2761 vars 9817 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9362, clauses: 38881
last 9362 length 38881
CNF 9362 vars 38881 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9362, clauses: 38881, status: Satisfied, time: 0.504995048s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 19056 length 118026
**************************************************
summary
**************************************************
SRS with 4 rules on 4 letters       DP
SRS with 11 strict rules and 4 weak rules on 7 letters       weights
SRS with 3 strict rules and 4 weak rules on 6 letters       EDG
SRS with 3 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 4 weak rules on 6 letters       EDG
SRS with 2 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 6 letters       weights
SRS with 0 strict rules and 4 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, l] -> [l, a] {- Input 0 -}
  [a, c] -> [c, a] {- Input 1 -}
  [c, a, r] -> [r, a] {- Input 2 -}
  [l, r, a, a] -> [a, a, l, c, c, c, r] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
  [a#, l] |-> [a#] {- DP (Top 1) (Input 0) -}
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [a#, c] |-> [a#] {- DP (Top 1) (Input 1) -}
  [a#, c] |-> [c#, a] {- DP (Top 0) (Input 1) -}
  [l#, r, a, a] |-> [a#, a, l, c, c, c, r] {- DP (Top 0) (Input 3) -}
  [l#, r, a, a] |-> [a#, l, c, c, c, r] {- DP (Top 1) (Input 3) -}
  [l#, r, a, a] |-> [l#, c, c, c, r] {- DP (Top 2) (Input 3) -}
  [l#, r, a, a] |-> [c#, r] {- DP (Top 5) (Input 3) -}
  [l#, r, a, a] |-> [c#, c, r] {- DP (Top 4) (Input 3) -}
  [l#, r, a, a] |-> [c#, c, c, r] {- DP (Top 3) (Input 3) -}
  [c#, a, r] |-> [a#] {- DP (Top 1) (Input 2) -}
reason
  (a, 1/1)
  (l, 1/1)
  (r, 2/1)
  (c, 0/1)
  (a#, 2/1)
  (l#, 2/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [a#, c] |-> [a#] {- DP (Top 1) (Input 1) -}
  [l#, r, a, a] |-> [a#, a, l, c, c, c, r] {- DP (Top 0) (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [l#, r, a, a] |-> [a#, a, l, c, c, c, r] {- DP (Top 0) (Input 3) -}
  [a#, c] |-> [a#] {- DP (Top 1) (Input 1) -}
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A 0A  1A \
        | -  -1A -  |
        \ -  -   0A / )
  ( l
  , Wk  / - 0A 1A \
        | - -  -  |
        \ - -  0A / )
  ( r
  , Wk  / 1A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / 1A 2A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( a#
  , Wk  / 0A -3A -2A \
        | -  -   -   |
        \ -  -   0A  / )
  ( l#
  , Wk  / - -2A 1A \
        | - -   -  |
        \ - -   0A / )
   property Termination
has value Just True
for SRS
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [l#, r, a, a] |-> [a#, a, l, c, c, c, r] {- DP (Top 0) (Input 3) -}
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [l#, r, a, a] |-> [a#, a, l, c, c, c, r] {- DP (Top 0) (Input 3) -}
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / - 2A 0A \
        | - 1A -  |
        \ - -  0A / )
  ( l
  , Wk  / - 1A 0A \
        | - 0A -  |
        \ - -  0A / )
  ( r
  , Wk  / - - 0A \
        | - - 1A |
        \ - - 0A / )
  ( c
  , Wk  / - -   0A \
        | - -1A -  |
        \ - -   0A / )
  ( a#
  , Wk  / 0A - -  \
        | -  - -  |
        \ -  - 0A / )
  ( l#
  , Wk  / -2A 0A 0A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [a#, l] |-> [l#, a] {- DP (Top 0) (Input 0) -}
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
reason
  (a, 0/1)
  (l, 1/1)
  (r, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (l#, 0/1)
   property Termination
has value Just True
for SRS
  [a, l] ->= [l, a] {- DP Nontop (Input 0) -}
  [a, c] ->= [c, a] {- DP Nontop (Input 1) -}
  [c, a, r] ->= [r, a] {- DP Nontop (Input 2) -}
  [l, r, a, a] ->= [a, a, l, c, c, c, r] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,4)\Deepee(11/4,7)\Weight\EDG(3/4,6)\Matrix{\ArcticBZ}{3}\EDG(2/4,6)\Matrix{\ArcticBZ}{3}(1/4,6)\Weight(0/4,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 19056 vars 118026 clauses

Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.915013384000
  min duration 1.915013384000
  total durat. 1.915013384000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 64
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 16
      , total_length = 512}
    , self = 75
    , parent = Nothing
    , duration = 1.915013384000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:34:53.397757891 UTC
    , finish = 2025-09-03 13:34:55.312771275 UTC
    , thread_cap_info = ("ThreadId 69", 0, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.807806101000
  min duration 0.378893454000
  total durat. 1.186699555000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.964581085000
  min duration 0.470075488000
  total durat. 1.434656573000
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.534513361000
  min duration 1.534513361000
  total durat. 1.534513361000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 24}
    , self = 68
    , parent = Nothing
    , duration = 1.534513361000
    , status = Fail
    , start = 2025-09-03 13:34:53.384075794 UTC
    , finish = 2025-09-03 13:34:54.918589155 UTC
    , thread_cap_info = ("ThreadId 52", 1, False)}
**************************************************
F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F          , closure = Forward\n , start_strict_only = True\n , max_closure_length
F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F          = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F          = 24} , self = 68 , parent = Nothing , duration = 1.534513361000 , status
F          = Fail , start = 2025-09-03 13:34:53.384075794 UTC , finish = 2025-09-03
F          13:34:54.918589155 UTC , thread_cap_info = ("ThreadId 52", 1, False)}
F          
| E        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E        = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| E        = 64 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 16 , total_length
| E        = 512} , self = 75 , parent = Nothing , duration = 1.915013384000 , status
| E        = Except "AsyncCancelled" , start = 2025-09-03 13:34:53.397757891 UTC ,
| E        finish = 2025-09-03 13:34:55.312771275 UTC , thread_cap_info = ("ThreadId
| E        69", 0, False)}
| E        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F      = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | F      = 42} , self = 54 , parent = Nothing , duration = 0.170723801000 , status
| | F      = Fail , start = 2025-09-03 13:34:53.483899681 UTC , finish = 2025-09-03
| | F      13:34:53.654623482 UTC , thread_cap_info = ("ThreadId 86", 1, False)}
| | F      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | | F    = 6 , total_length = 42} , self = 61 , parent = Nothing , duration = 0.470075488000
| | | F    , status = Fail , start = 2025-09-03 13:34:53.591479121 UTC , finish =
| | | F    2025-09-03 13:34:54.061554609 UTC , thread_cap_info = ("ThreadId 99", 1,
| | | F    False)}
| | | F    
| | | | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | S  verbose = False}" , input_size = Size { num_rules = 96 , num_strict_rules
| | | | S  = 32 , num_top_rules = 32 , num_weak_rules = 64 , alphabet_size = 24 ,
| | | | S  total_length = 832} , self = 56 , parent = Nothing , duration = 0.168436448000
| | | | S  , status = Success , start = 2025-09-03 13:34:53.654290194 UTC , finish
| | | | S  = 2025-09-03 13:34:53.822726642 UTC , thread_cap_info = ("ThreadId 95",
| | | | S  2, False)}
| | | | S  
| | F | |  
| | S | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | S | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | S | |  = 6 , total_length = 42} , self = 58 , parent = Nothing , duration = 0.378893454000
| | S | |  , status = Success , start = 2025-09-03 13:34:53.673731186 UTC , finish
| | S | |  = 2025-09-03 13:34:54.05262464 UTC , thread_cap_info = ("ThreadId 103",
| | S | |  1, False)}
| | S | |  
| | | | S  
| | S |    
| |   F    
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F      = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | F      = 39} , self = 66 , parent = Nothing , duration = 0.194177349000 , status
| | F      = Fail , start = 2025-09-03 13:34:54.061890603 UTC , finish = 2025-09-03
| | F      13:34:54.256067952 UTC , thread_cap_info = ("ThreadId 117", 1, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | F    = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | F    = 39} , self = 67 , parent = Nothing , duration = 0.202897106000 , status
| | | F    = Fail , start = 2025-09-03 13:34:54.071819802 UTC , finish = 2025-09-03
| | | F    13:34:54.274716908 UTC , thread_cap_info = ("ThreadId 118", 1, False)}
| | | F    
| | F |    
| | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |    = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | F |    = 6 , total_length = 39} , self = 71 , parent = Nothing , duration = 0.964581085000
| | F |    , status = Fail , start = 2025-09-03 13:34:54.256630734 UTC , finish =
| | F |    2025-09-03 13:34:55.221211819 UTC , thread_cap_info = ("ThreadId 121",
| | F |    1, False)}
| | F |    
| | | F    
| | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | S    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | S    = 6 , total_length = 39} , self = 69 , parent = Nothing , duration = 0.807806101000
| | | S    , status = Success , start = 2025-09-03 13:34:54.298654726 UTC , finish
| | | S    = 2025-09-03 13:34:55.106460827 UTC , thread_cap_info = ("ThreadId 122",
| | | S    1, False)}
| | | S    
F | | |    
E | | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E | | |    , closure = Forward\n , start_strict_only = True\n , max_closure_length
E | | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E | | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E | | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E | | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E | | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E | | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E | | |    = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
E | | |    = 24} , self = 74 , parent = Nothing , duration = 0.207910555000 , status
E | | |    = Except "AsyncCancelled" , start = 2025-09-03 13:34:55.071479908 UTC ,
E | | |    finish = 2025-09-03 13:34:55.279390463 UTC , thread_cap_info = ("ThreadId
E | | |    125", 3, False)}
E | | |    
| | | S    
| | F      
E |        
  E        
