last 3498 length 16074
CNF 3498 vars 16074 clauses
last 1768 length 8180
CNF 1768 vars 8180 clauses
last 2136 length 9874
last 5539 length 30111
last 5054 length 28704
CNF 5054 vars 28704 clauses
CNF 2136 vars 9874 clauses
CNF 5539 vars 30111 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3070, clauses: 13057
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1756, clauses: 7090
last 3070 length 13057
last 1756 length 7090
CNF 1756 vars 7090 clauses
CNF 3070 vars 13057 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1756, clauses: 7090, status: Unsatisfied, time: 0.046834671s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3070, clauses: 13057, status: Unsatisfied, time: 0.067527192s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5572, clauses: 23362
last 5572 length 23362
CNF 5572 vars 23362 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3363, clauses: 14532
last 3363 length 14532
CNF 3363 vars 14532 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3363, clauses: 14532, status: Unsatisfied, time: 0.148743284s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7896, clauses: 33194
last 7896 length 33194
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2928, clauses: 12418
last 2928 length 12418
CNF 2928 vars 12418 clauses
CNF 7896 vars 33194 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5572, clauses: 23362, status: Unsatisfied, time: 0.343564751s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7896, clauses: 33194, status: Satisfied, time: 0.110723049s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2928, clauses: 12418, status: Satisfied, time: 0.092415447s
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       DP
SRS with 12 strict rules and 1 weak rules on 3 letters       EDG
SRS with 2 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a, a, a, a, a, a, a, a] -> [ a , a , a , a , a , a , a , a , a , a , b , a , a , b ] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, a, a, a, a, a, a, a, a] ->= [ a , a , a , a , a , a , a , a , a , a , b , a , a , b ] {- DP Nontop (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , a , a , a , a , a , b , a , a , b ] {- DP (Top 0) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , a , a , a , a , b , a , a , b ] {- DP (Top 1) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , a , a , a , b , a , a , b ] {- DP (Top 2) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , a , a , b , a , a , b ] {- DP (Top 3) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , a , b , a , a , b ] {- DP (Top 4) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , a , b , a , a , b ] {- DP (Top 5) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , a , b , a , a , b ] {- DP (Top 6) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , a , b , a , a , b ] {- DP (Top 7) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [a#, a, b] {- DP (Top 11) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , b , a , a , b ] {- DP (Top 8) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [a#, b] {- DP (Top 12) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , b , a , a , b ] {- DP (Top 9) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [ a# , a , b , a , a , b ] {- DP (Top 8) (Input 0) -}
  [a#, a, b, a, a, a, a, a, a, a, a] |-> [a#, a, b] {- DP (Top 11) (Input 0) -}
  [a, a, b, a, a, a, a, a, a, a, a] ->= [ a , a , a , a , a , a , a , a , a , a , b , a , a , b ] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 0A  0A  0A 4A - \
        | 0A  0A  0A 0A - |
        | -4A 0A  0A 0A - |
        | -4A -4A 0A 0A - |
        \ -   -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  0A  - \
        | 0A  0A  0A  0A  - |
        | -4A -4A -4A -4A - |
        | -4A -4A -4A -4A - |
        \ -   -   -   -   - / )
  ( a#
  , Wk  / 1A 1A 1A 1A - \
        | 1A 1A 1A 1A - |
        | 1A 1A 1A 1A - |
        | 1A 1A 1A 1A - |
        \ -  -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a, b, a, a, a, a, a, a, a, a] ->= [ a , a , a , a , a , a , a , a , a , a , b , a , a , b ] {- DP Nontop (Input 0) -}
reason
  EDG

**************************************************
skeleton: (1,2)\Deepee(12/1,3)\EDG(2/1,3)\Matrix{\Arctic}{4}(0/1,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F            = 108} , self = 49 , parent = Nothing , duration = 0.417904424000 , status
F            = Fail , start = 2025-09-03 12:20:26.013025866 UTC , finish = 2025-09-03
F            12:20:26.43093029 UTC , thread_cap_info = ("ThreadId 63", 3, False)}
F            
| E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E          = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| E          = 8 , num_top_rules = 8 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| E          = 165} , self = 70 , parent = Nothing , duration = 0.973811112000 , status
| E          = Except "AsyncCancelled" , start = 2025-09-03 12:20:26.0171212 UTC , finish
| E          = 2025-09-03 12:20:26.990932312 UTC , thread_cap_info = ("ThreadId 73",
| E          1, False)}
| E          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F        = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F        = 108} , self = 48 , parent = Nothing , duration = 0.380491279000 , status
| | F        = Fail , start = 2025-09-03 12:20:26.032100341 UTC , finish = 2025-09-03
| | F        12:20:26.41259162 UTC , thread_cap_info = ("ThreadId 65", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | F      = 8 , num_top_rules = 8 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F      = 165} , self = 43 , parent = Nothing , duration = 0.234677816000 , status
| | | F      = Fail , start = 2025-09-03 12:20:26.032121247 UTC , finish = 2025-09-03
| | | F      12:20:26.266799063 UTC , thread_cap_info = ("ThreadId 74", 1, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F    = 56} , self = 50 , parent = Nothing , duration = 0.302163907000 , status
| | | | F    = Fail , start = 2025-09-03 12:20:26.129923882 UTC , finish = 2025-09-03
| | | | F    12:20:26.432087789 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F  = 56} , self = 44 , parent = Nothing , duration = 0.164116677000 , status
| | | | | F  = Fail , start = 2025-09-03 12:20:26.129927084 UTC , finish = 2025-09-03
| | | | | F  12:20:26.294043761 UTC , thread_cap_info = ("ThreadId 83", 1, False)}
| | | | | F  
| | | F | |  
| | |   | F  
| | | F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F |    = 9 , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 1 , alphabet_size
| | | F |    = 3 , total_length = 165} , self = 56 , parent = Nothing , duration = 0.183280430000
| | | F |    , status = Fail , start = 2025-09-03 12:20:26.310938872 UTC , finish =
| | | F |    2025-09-03 12:20:26.494219302 UTC , thread_cap_info = ("ThreadId 90", 1,
| | | F |    False)}
| | | F |    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | | | | F  = 3 , total_length = 56} , self = 54 , parent = Nothing , duration = 0.129844929000
| | | | | F  , status = Fail , start = 2025-09-03 12:20:26.342188983 UTC , finish =
| | | | | F  2025-09-03 12:20:26.472033912 UTC , thread_cap_info = ("ThreadId 92", 1,
| | | | | F  False)}
| | | | | F  
| | F | | |  
F |   | | |  
  |   | F |  
F |   |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
F |   |   |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
F |   |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
F |   |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F |   |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F |   |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
F |   |   |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
F |   |   |  = 3 , total_length = 56} , self = 64 , parent = Nothing , duration = 0.440650235000
F |   |   |  , status = Fail , start = 2025-09-03 12:20:26.445968423 UTC , finish =
F |   |   |  2025-09-03 12:20:26.886618658 UTC , thread_cap_info = ("ThreadId 106",
F |   |   |  1, False)}
F |   |   |  
| |   |   F  
| | F |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | F |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | F |      = 3 , total_length = 56} , self = 63 , parent = Nothing , duration = 0.238462725000
| | F |      , status = Fail , start = 2025-09-03 12:20:26.492601052 UTC , finish =
| | F |      2025-09-03 12:20:26.731063777 UTC , thread_cap_info = ("ThreadId 107",
| | F |      1, False)}
| | F |      
| | | F      
| | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | S      , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 1 , alphabet_size
| | | S      = 3 , total_length = 165} , self = 65 , parent = Nothing , duration = 0.395966884000
| | | S      , status = Success , start = 2025-09-03 12:20:26.542897918 UTC , finish
| | | S      = 2025-09-03 12:20:26.938864802 UTC , thread_cap_info = ("ThreadId 109",
| | | S      1, False)}
| | | S      
| | F |      
| | S |      Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| | S |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |      = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | S |      = 3 , total_length = 56} , self = 66 , parent = Nothing , duration = 0.186525639000
| | S |      , status = Success , start = 2025-09-03 12:20:26.753675002 UTC , finish
| | S |      = 2025-09-03 12:20:26.940200641 UTC , thread_cap_info = ("ThreadId 117",
| | S |      1, False)}
| | S |      
F | | |      
E | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | |      , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
E | | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
E | | |      = 3 , total_length = 56} , self = 69 , parent = Nothing , duration = 0.104281339000
E | | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:20:26.886642855
E | | |      UTC , finish = 2025-09-03 12:20:26.990924194 UTC , thread_cap_info = ("ThreadId
E | | |      122", 1, False)}
E | | |      
| | | S      
| | S        
E |          
  E          
