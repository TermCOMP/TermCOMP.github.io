last 434 length 1694
last 474 length 1831
CNF 474 vars 1831 clauses
CNF 434 vars 1694 clauses
last 570 length 2272
CNF 570 vars 2272 clauses
last 545 length 2223
last 4200 length 21568
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2179, clauses: 7759
last 2179 length 7759
CNF 545 vars 2223 clauses
CNF 4200 vars 21568 clauses
CNF 2179 vars 7759 clauses
last 4547 length 20070
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6167, clauses: 25397
last 6167 length 25397
CNF 4547 vars 20070 clauses
CNF 6167 vars 25397 clauses
[Info] pool sizes (success) 11957 seen 4971 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2179, clauses: 7759, status: Unsatisfied, time: 0.118749324s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2285, clauses: 8259
last 2285 length 8259
CNF 2285 vars 8259 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       looping derivation
from
  [a, a, b, c, c, b, b, c]
to
  [b, c, b, b, c, a, a, b, c, c, b, b, c]
via 28 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, c, a, a] {- Input 1 -}
  [c, c, c] -> [a, b] {- Input 2 -}
reason
  Nontermination
    Derive   { from = [a, a, b, c, c, b, b, c], via = [(Step   { rule = 1, position = 1}, [a, b, c, a, a, c, c, b, b, c]), (Step   { rule = 0, position = 3}, [a, b, c, a, c, c, b, b, c]), (Step   { rule = 0, position = 3}, [a, b, c, c, c, b, b, c]), (Step   { rule = 2, position = 2}, [a, b, a, b, b, b, c]), (Step   { rule = 1, position = 2}, [a, b, b, c, a, a, b, b, c]), (Step   { rule = 1, position = 5}, [a, b, b, c, a, b, c, a, a, b, c]), (Step   { rule = 1, position = 4}, [a, b, b, c, b, c, a, a, c, a, a, b, c]), (Step   { rule = 0, position = 6}, [a, b, b, c, b, c, a, c, a, a, b, c]), (Step   { rule = 0, position = 6}, [a, b, b, c, b, c, c, a, a, b, c]), (Step   { rule = 1, position = 8}, [a, b, b, c, b, c, c, a, b, c, a, a, c]), (Step   { rule = 0, position = 10}, [a, b, b, c, b, c, c, a, b, c, a, c]), (Step   { rule = 0, position = 10}, [a, b, b, c, b, c, c, a, b, c, c]), (Step   { rule = 1, position = 7}, [a, b, b, c, b, c, c, b, c, a, a, c, c]), (Step   { rule = 0, position = 9}, [a, b, b, c, b, c, c, b, c, a, c, c]), (Step   { rule = 0, position = 9}, [a, b, b, c, b, c, c, b, c, c, c]), (Step   { rule = 2, position = 8}, [a, b, b, c, b, c, c, b, a, b]), (Step   { rule = 1, position = 8}, [a, b, b, c, b, c, c, b, b, c, a, a]), (Step   { rule = 0, position = 10}, [a, b, b, c, b, c, c, b, b, c, a]), (Step   { rule = 0, position = 10}, [a, b, b, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 0}, [b, c, a, a, b, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 3}, [b, c, a, b, c, a, a, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 5}, [b, c, a, b, c, a, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 5}, [b, c, a, b, c, c, b, c, c, b, b, c]), (Step   { rule = 1, position = 2}, [b, c, b, c, a, a, c, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 4}, [b, c, b, c, a, c, c, b, c, c, b, b, c]), (Step   { rule = 0, position = 4}, [b, c, b, c, c, c, b, c, c, b, b, c]), (Step   { rule = 2, position = 3}, [b, c, b, a, b, b, c, c, b, b, c]), (Step   { rule = 1, position = 3}, [b, c, b, b, c, a, a, b, c, c, b, b, c])], to = [b, c, b, b, c, a, a, b, c, c, b, b, c]}

**************************************************
skeleton: (3,3)\Loop{28}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5919, clauses: 24349
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2285, clauses: 8259, status: Unsatisfied, time: 0.109600412s
last 5919 length 24349
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3871, clauses: 15227
last 3871 length 15227
CNF 3871 vars 15227 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
CNF 5919 vars 24349 clauses
last 6604 length 26471
F           last 8811 length 40265
 CNF 6604 vars 26471 clauses
, string_implementation = ByteString Plain\n , tracing = False\n , cpf
CNF 8811 vars 40265 clauses
last 11574 length 48028
F            = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F            = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F            = 55 , parent = Nothing , duration = 0.110737667000 , status = Fail , start
F            = 2025-09-03 11:15:31.002007139 UTC , finish = 2025-09-03 11:15:31.112744806
F            UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 162} , self = 60 , parent = Nothing , duration = 0.193668729000 , status
| F          = Fail , start = 2025-09-03 11:15:31.007222509 UTC , finish = 2025-09-03
| F          11:15:31.200891238 UTC , thread_cap_info = ("ThreadId 78", 2, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 162} , self = 59 , parent = Nothing , duration = 0.179810505000 , status
| | F        = Fail , start = 2025-09-03 11:15:31.007241578 UTC , finish = 2025-09-03
| | F        11:15:31.187052083 UTC , thread_cap_info = ("ThreadId 81", 2, False)}
| | F        
| | | S      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | S      , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | S      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | S      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | S      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | S      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | S      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | S      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | S      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | S      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | S      = 12} , self = 61 , parent = Nothing , duration = 0.220526009000 , status
| | | S      = Success , start = 2025-09-03 11:15:31.014391291 UTC , finish = 2025-09-03
| | | S      11:15:31.2349173 UTC , thread_cap_info = ("ThreadId 42", 3, False)}
| | | S      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F    = 37} , self = 58 , parent = Nothing , duration = 0.126377895000 , status
| | | | F    = Fail , start = 2025-09-03 11:15:31.032879612 UTC , finish = 2025-09-03
| | | | F    11:15:31.159257507 UTC , thread_cap_info = ("ThreadId 95", 0, False)}
| | | | F    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | F  = 5 , total_length = 32} , self = 62 , parent = Nothing , duration = 0.206431649000
| | | | | F  , status = Fail , start = 2025-09-03 11:15:31.034397306 UTC , finish =
| | | | | F  2025-09-03 11:15:31.240828955 UTC , thread_cap_info = ("ThreadId 98", 0,
| | | | | F  False)}
| | | | | F  
F | | | | |  
  | | | F |  
  | F |   |  
  F   |   |  
      S   |  
          F  
