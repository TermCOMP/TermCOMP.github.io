last 810 length 3462
CNF 810 vars 3462 clauses
last 1034 length 4406
last 1012 length 4219
CNF 1034 vars 4406 clauses
last 753 length 3236
CNF 1012 vars 4219 clauses
last 3720 length 16702
CNF 753 vars 3236 clauses
last 3832 length 17468
CNF 3720 vars 16702 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7357
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7339
last 4597 length 21102
last 4284 length 19348
last 4209 length 18045
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7941, clauses: 33397
last 2017 length 7357
last 4820 length 21447
**************************************************last 2017 length 7339

last 7941 length 33397
CNF 2017 vars 7339 clauses
CNF 4209 vars 18045 clauses
CNF 4597 vars 21102 clauses
CNF 2017 vars 7357 clauses
CNF 4820 vars 21447 clauses
CNF 4284 vars 19348 clauses
summaryMatrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7941, clauses: 33417

CNF 7941 vars 33397 clauses
last 7941 length 33417
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7339, status: Satisfied, time: 0.064121232s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2017, clauses: 7357, status: Satisfied, time: 0.069327137s
**************************************************
SRS with 3 rules on 2 letters       split
2 sub-proofs
  1 SRS with 3 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 12 rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 4 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       no strict rules

  2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b] -> [a, b, b, b] {- Input 0 -}
  [b, b, a, b] -> [b, b, a, a] {- Input 1 -}
  [a, a, a, b] -> [b, a, a, a] {- Input 2 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, b, a, b] -> [a, b, b, b] {- Input 0 -}
  [b, b, a, b] -> [b, b, a, a] {- Input 1 -}
  [a, a, a, b] -> [b, a, a, a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, a], [a, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, a], [a, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, a], [a, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, b], [b, b], [b, a], [a, b], [b, a]] -> [ [a, b] , [b, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, b], [b, b]] -> [ [a, b] , [b, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, b], [b, b], [b, a], [a, b], [b, a]] -> [ [b, b] , [b, b] , [b, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, a], [a, b], [b, b]] -> [ [b, b] , [b, b] , [b, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, a], [a, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, a], [a, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ( [a, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, a], [a, b], [b, b]] -> [ [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, a], [a, b], [b, a]] -> [ [b, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, a], [a, b], [b, b]] -> [ [b, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (3,2)\Split[(3,2)\TileAllAll{2}(12,4)\Matrix{\Natural}{2}(4,4)\Weight(0,0)[],(0,0)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 7941 vars 33417 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7941, clauses: 33397, status: Satisfied, time: 0.101692523s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F            = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F            = 57 , parent = Nothing , duration = 0.341396656000 , status = Fail , start
F            = 2025-09-03 12:05:26.715532781 UTC , finish = 2025-09-03 12:05:27.056929437
F            UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F            
| S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| S          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| S          = 120} , self = 61 , parent = Nothing , duration = 0.676662237000 , status
| S          = Success , start = 2025-09-03 12:05:26.776727775 UTC , finish = 2025-09-03
| S          12:05:27.453390012 UTC , thread_cap_info = ("ThreadId 85", 3, False)}
| S          
| | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F        = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | F        = 32} , self = 54 , parent = Nothing , duration = 0.166446138000 , status
| | F        = Fail , start = 2025-09-03 12:05:26.836088495 UTC , finish = 2025-09-03
| | F        12:05:27.002534633 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F      = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | F      = 32} , self = 56 , parent = Nothing , duration = 0.181115165000 , status
| | | F      = Fail , start = 2025-09-03 12:05:26.856150756 UTC , finish = 2025-09-03
| | | F      12:05:27.037265921 UTC , thread_cap_info = ("ThreadId 95", 2, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F    = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | F    = 32} , self = 60 , parent = Nothing , duration = 0.260449485000 , status
| | | | F    = Fail , start = 2025-09-03 12:05:26.920332799 UTC , finish = 2025-09-03
| | | | F    12:05:27.180782284 UTC , thread_cap_info = ("ThreadId 99", 2, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F  = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | F  = 32} , self = 58 , parent = Nothing , duration = 0.122443947000 , status
| | | | | F  = Fail , start = 2025-09-03 12:05:26.938118246 UTC , finish = 2025-09-03
| | | | | F  12:05:27.060562193 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | | | | F  
| | F | | |  
| |   F | |  
F |     | |  
  |     | F  
  |     F    
  S          
