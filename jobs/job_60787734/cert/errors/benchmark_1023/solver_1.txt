last 2809 length 13264
CNF 2809 vars 13264 clauses
last 2585 length 11882
last 4164 length 23040
CNF 2585 vars 11882 clauses
CNF 4164 vars 23040 clauses
last 6336 length 34090
last 4008 length 22065
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2069, clauses: 8346
last 2069 length 8346
CNF 6336 vars 34090 clauses
CNF 2069 vars 8346 clauses
CNF 4008 vars 22065 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2069, clauses: 8346, status: Satisfied, time: 0.094477692s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6786, clauses: 28530
last 6786 length 28530
CNF 6786 vars 28530 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2495, clauses: 9522
last 2495 length 9522
CNF 2495 vars 9522 clauses
last 4474 length 22419
last 2323 length 11271
last 2381 length 11269
CNF 4474 vars 22419 clauses
CNF 2381 vars 11269 clauses
CNF 2323 vars 11271 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2495, clauses: 9522, status: Satisfied, time: 0.191063092s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1840, clauses: 7261
last 1840 length 7261
CNF 1840 vars 7261 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1840, clauses: 7261, status: Unsatisfied, time: 0.094453464s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6446, clauses: 27088
last 6446 length 27088
CNF 6446 vars 27088 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 2 letters       DP
SRS with 9 strict rules and 1 weak rules on 3 letters       EDG
SRS with 3 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, b, a, b, b, a, b, b, b, b] -> [ b , b , b , b , b , a , b , b , a , b , b , a , b ] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b, a, b, b, a, b, b, b, b] ->= [ b , b , b , b , b , a , b , b , a , b , b , a , b ] {- DP Nontop (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [b#, a, b] {- DP (Top 10) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , a , b , b , a , b ] {- DP (Top 7) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , a , b , b , a , b , b , a , b ] {- DP (Top 4) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [b#, b, a, b] {- DP (Top 9) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , a , b , b , a , b ] {- DP (Top 6) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , a , b , b , a , b , b , a , b ] {- DP (Top 3) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , b , a , b , b , a , b , b , a , b ] {- DP (Top 2) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , b , b , a , b , b , a , b , b , a , b ] {- DP (Top 1) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , b , b , b , a , b , b , a , b , b , a , b ] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , a , b , b , a , b , b , a , b ] {- DP (Top 3) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [b#, b, a, b] {- DP (Top 9) (Input 0) -}
  [b#, b, a, b, b, a, b, b, b, b] |-> [ b# , b , a , b , b , a , b ] {- DP (Top 6) (Input 0) -}
  [b, b, a, b, b, a, b, b, b, b] ->= [ b , b , b , b , b , a , b , b , a , b , b , a , b ] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b#
  , Wk  / 6A 7A 9A - \
        | 6A 7A 9A - |
        | 6A 7A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, b, a, b, b, a, b, b, b, b] ->= [ b , b , b , b , b , a , b , b , a , b , b , a , b ] {- DP Nontop (Input 0) -}
reason
  EDG

**************************************************
skeleton: (1,2)\Deepee(9/1,3)\EDG(3/1,3)\Matrix{\Arctic}{3}(0/1,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.654701729000
  min duration 0.168327872000
  total durat. 1.766470639000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.461607300000
  min duration 0.179299121000
  total durat. 1.424853439000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.111093794000
  min duration 1.111093794000
  total durat. 1.111093794000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 1
      , num_strict_rules = 1
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 2
      , total_length = 23}
    , self = 78
    , parent = Nothing
    , duration = 1.111093794000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:51:52.812658757 UTC
    , finish = 2025-09-03 10:51:53.923752551 UTC
    , thread_cap_info = ("ThreadId 61", 2, False)}
**************************************************
F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                = True}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules
F                = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 23} , self
F                = 57 , parent = Nothing , duration = 0.452375757000 , status = Fail , start
F                = 2025-09-03 10:51:52.808072219 UTC , finish = 2025-09-03 10:51:53.260447976
F                UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F                
| E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| E              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| E              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| E              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| E              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| E              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E              = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| E              = 23} , self = 78 , parent = Nothing , duration = 1.111093794000 , status
| E              = Except "AsyncCancelled" , start = 2025-09-03 10:51:52.812658757 UTC ,
| E              finish = 2025-09-03 10:51:53.923752551 UTC , thread_cap_info = ("ThreadId
| E              61", 2, False)}
| E              
| | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F            = 100} , self = 61 , parent = Nothing , duration = 0.572846501000 , status
| | F            = Fail , start = 2025-09-03 10:51:52.813041466 UTC , finish = 2025-09-03
| | F            10:51:53.385887967 UTC , thread_cap_info = ("ThreadId 78", 2, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F          = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F          = 100} , self = 58 , parent = Nothing , duration = 0.461607300000 , status
| | | F          = Fail , start = 2025-09-03 10:51:52.825843232 UTC , finish = 2025-09-03
| | | F          10:51:53.287450532 UTC , thread_cap_info = ("ThreadId 80", 2, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | F        = 65} , self = 55 , parent = Nothing , duration = 0.370594537000 , status
| | | | F        = Fail , start = 2025-09-03 10:51:52.826009021 UTC , finish = 2025-09-03
| | | | F        10:51:53.196603558 UTC , thread_cap_info = ("ThreadId 84", 1, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | F      = 65} , self = 56 , parent = Nothing , duration = 0.401374974000 , status
| | | | | F      = Fail , start = 2025-09-03 10:51:52.843324593 UTC , finish = 2025-09-03
| | | | | F      10:51:53.244699567 UTC , thread_cap_info = ("ThreadId 85", 1, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | F    = 74} , self = 69 , parent = Nothing , duration = 0.654701729000 , status
| | | | | | F    = Fail , start = 2025-09-03 10:51:53.002895268 UTC , finish = 2025-09-03
| | | | | | F    10:51:53.657596997 UTC , thread_cap_info = ("ThreadId 97", 1, False)}
| | | | | | F    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | | F  = 74} , self = 60 , parent = Nothing , duration = 0.382572044000 , status
| | | | | | | F  = Fail , start = 2025-09-03 10:51:53.003313567 UTC , finish = 2025-09-03
| | | | | | | F  10:51:53.385885611 UTC , thread_cap_info = ("ThreadId 98", 1, False)}
| | | | | | | F  
| | | | F | | |  
| | | |   F | |  
F | | |     | |  
E | | |     | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | | |     | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
E | | |     | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
E | | |     | |  = 3 , total_length = 65} , self = 64 , parent = Nothing , duration = 0.271275357000
E | | |     | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:51:53.26360368
E | | |     | |  UTC , finish = 2025-09-03 10:51:53.534879037 UTC , thread_cap_info = ("ThreadId
E | | |     | |  106", 1, False)}
E | | |     | |  
| | | | S   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S   | |  = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | | | S   | |  = 3 , total_length = 65} , self = 62 , parent = Nothing , duration = 0.123515801000
| | | | S   | |  , status = Success , start = 2025-09-03 10:51:53.283608338 UTC , finish
| | | | S   | |  = 2025-09-03 10:51:53.407124139 UTC , thread_cap_info = ("ThreadId 105",
| | | | S   | |  0, False)}
| | | | S   | |  
| | | F |   | |  
| | |   |   | F  
| | F   |   |    
| |     S   |    
| | S       |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S       |    = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | S       |    = 3 , total_length = 74} , self = 71 , parent = Nothing , duration = 0.306884136000
| | S       |    , status = Success , start = 2025-09-03 10:51:53.423457465 UTC , finish
| | S       |    = 2025-09-03 10:51:53.730341601 UTC , thread_cap_info = ("ThreadId 113",
| | S       |    1, False)}
| | S       |    
E | |       |    
F | |       |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | |       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | |       |    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
F | |       |    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F | |       |    = 52} , self = 70 , parent = Nothing , duration = 0.179299121000 , status
F | |       |    = Fail , start = 2025-09-03 10:51:53.547655719 UTC , finish = 2025-09-03
F | |       |    10:51:53.72695484 UTC , thread_cap_info = ("ThreadId 121", 1, False)}
F | |       |    
| | | F     |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F     |    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F     |    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | F     |    = 52} , self = 72 , parent = Nothing , duration = 0.168327872000 , status
| | | F     |    = Fail , start = 2025-09-03 10:51:53.563327212 UTC , finish = 2025-09-03
| | | F     |    10:51:53.731655084 UTC , thread_cap_info = ("ThreadId 120", 1, False)}
| | | F     |    
| | | |     F    
| | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | E        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | | | E        = 3 , total_length = 74} , self = 74 , parent = Nothing , duration = 0.186168910000
| | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 10:51:53.65762177
| | | | E        UTC , finish = 2025-09-03 10:51:53.84379068 UTC , thread_cap_info = ("ThreadId
| | | | E        125", 1, False)}
| | | | E        
F | | | |        
  | S | |        
  |   F |        
F |     |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F |     |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F |     |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F |     |        = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
F |     |        = 3 , total_length = 52} , self = 77 , parent = Nothing , duration = 0.164455593000
F |     |        , status = Fail , start = 2025-09-03 10:51:53.743329107 UTC , finish =
F |     |        2025-09-03 10:51:53.9077847 UTC , thread_cap_info = ("ThreadId 127", 1,
F |     |        False)}
F |     |        
| |     E        
F |              
  E              
