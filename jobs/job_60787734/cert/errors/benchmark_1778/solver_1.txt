last 453 length 1830
last 362 length 1439
last 494 length 1974
last 315 length 1270
CNF 494 vars 1974 clauses
CNF 315 vars 1270 clauses
CNF 362 vars 1439 clauses
CNF 453 vars 1830 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1393, clauses: 4978
last 1393 length 4978
CNF 1393 vars 4978 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6456
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1393, clauses: 4978, status: Satisfied, time: 0.045225473s
last 2801 length 11857
last 2843 length 11781
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4139, clauses: 17105
last 1811 length 6456
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6290, clauses: 26093
last 4519 length 19019
last 4614 length 20368
last 4223 length 17737
last 6290 length 26093
CNF 2801 vars 11857 clauses
**************************************************CNF 1811 vars 6456 clauses
CNF 2843 vars 11781 clauses
CNF 4519 vars 19019 clauses
CNF 4614 vars 20368 clauses

summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       DP
SRS with 4 strict rules and 4 weak rules on 5 letters       EDG
SRS with 2 strict rules and 4 weak rules on 4 letters       Usable
SRS with 2 strict rules and 2 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [g, c] -> [g, f, c] {- Input 0 -}
  [g, f, c] -> [g, f, f, c] {- Input 1 -}
  [g, g] -> [g, f, g] {- Input 2 -}
  [f, f, g] -> [g, f] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [c, g] -> [c, f, g] {- Mirror (Input 0) -}
  [c, f, g] -> [c, f, f, g] {- Mirror (Input 1) -}
  [g, g] -> [g, f, g] {- Mirror (Input 2) -}
  [g, f, f] -> [f, g] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, g] ->= [c, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [c, f, g] ->= [c, f, f, g] {- DP Nontop (Mirror (Input 1)) -}
  [g, g] ->= [g, f, g] {- DP Nontop (Mirror (Input 2)) -}
  [g, f, f] ->= [f, g] {- DP Nontop (Mirror (Input 3)) -}
  [g#, g] |-> [g#, f, g] {- DP (Top 0) (Mirror (Input 2)) -}
  [g#, f, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [c#, g] |-> [c#, f, g] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, f, g] |-> [c#, f, f, g] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [g#, g] |-> [g#, f, g] {- DP (Top 0) (Mirror (Input 2)) -}
  [g#, f, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [c, g] ->= [c, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [c, f, g] ->= [c, f, f, g] {- DP Nontop (Mirror (Input 1)) -}
  [g, g] ->= [g, f, g] {- DP Nontop (Mirror (Input 2)) -}
  [g, f, f] ->= [f, g] {- DP Nontop (Mirror (Input 3)) -}
reason
  remove un-usable
    SRS
      [c, g] ->= [c, f, g] {- DP Nontop (Mirror (Input 0)) -}
      [c, f, g] ->= [c, f, f, g] {- DP Nontop (Mirror (Input 1)) -}
   property Termination
has value Just True
for SRS
  [g#, g] |-> [g#, f, g] {- DP (Top 0) (Mirror (Input 2)) -}
  [g#, f, f] |-> [g#] {- DP (Top 1) (Mirror (Input 3)) -}
  [g, g] ->= [g, f, g] {- DP Nontop (Mirror (Input 2)) -}
  [g, f, f] ->= [f, g] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( g
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( f
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( g#
  , Wk  / 11A 11A 14A - \
        | 11A 11A 14A - |
        | 11A 11A 14A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [g#, g] |-> [g#, f, g] {- DP (Top 0) (Mirror (Input 2)) -}
  [g, g] ->= [g, f, g] {- DP Nontop (Mirror (Input 2)) -}
  [g, f, f] ->= [f, g] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Deepee(4/4,5)\EDG(2/4,4)\Usable(2/2,3)\Matrix{\Arctic}{3}(1/2,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 6290 vars 26093 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6456, status: Unsatisfied, time: 0.166088598s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S    = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
S    = 3 , total_length = 19} , self = 69 , parent = Nothing , duration = 0.219803300000
S    , status = Success , start = 2025-09-03 13:29:43.855105245 UTC , finish
S    = 2025-09-03 13:29:44.074908545 UTC , thread_cap_info = ("ThreadId 96",
S    1, False)}
S    
| E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| E  = 3 , total_length = 19} , self = 71 , parent = Nothing , duration = 0.206055353000
| E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:29:43.868964578
| E  UTC , finish = 2025-09-03 13:29:44.075019931 UTC , thread_cap_info = ("ThreadId
| E  97", 1, False)}
| E  
S |  
  E  
