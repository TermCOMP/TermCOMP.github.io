last 506 length 1979
last 571 length 2277
CNF 506 vars 1979 clauses
last 526 length 2074
CNF 571 vars 2277 clauses
CNF 526 vars 2074 clauses
last 387 length 1543
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2261, clauses: 8154
last 2261 length 8154
last 4099 length 20996
CNF 387 vars 1543 clauses
CNF 2261 vars 8154 clauses
CNF 4099 vars 20996 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1784, clauses: 6483
last 3629 length 16718
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6211, clauses: 25565
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4919, clauses: 20226
last 1784 length 6483
last 6211 length 25565
last 4919 length 20226
CNF 1784 vars 6483 clauses
CNF 6211 vars 25565 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2261, clauses: 8154, status: Unsatisfied, time: 0.229578481s
CNF 3629 vars 16718 clauses
CNF 4919 vars 20226 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6211, clauses: 25565, status: Satisfied, time: 0.080613787s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1784, clauses: 6483, status: Unsatisfied, time: 0.109210449s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4919, clauses: 20226, status: Satisfied, time: 0.121317146s
last 478 length 1885
last 501 length 2008
CNF 478 vars 1885 clauses
CNF 501 vars 2008 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b, c] -> [b, c, c, a] {- Input 1 -}
  [c] -> [b, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b, c] -> [b, c, c, a] {- Input 1 -}
  [c] -> [b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [c, b, a] -> [a, c, c, b] {- Mirror (Input 1) -}
  [c] -> [a, b] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [a, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c#] |-> [a#, b] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, a] |-> [a#, c, c, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, c, b] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [a, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
  [c#, b, a] |-> [c#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, b, a] |-> [c#, c, b] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, a] |-> [c#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  last 9069 length 43151
[c#, b, a] |-> [c#, c, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [a, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  1A 0A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / -   1A 1A \
        | -2A -  -  |
        \ -   -  0A / )
  ( c
  , Wk  / 0A 1A 1A \
        | 0A 0A 1A |
        \ -  -  0A / )
  ( c#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [c, b, a] ->= [a, c, c, b] {- DP Nontop (Mirror (Input 1)) -}
  [c] ->= [a, b] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\Weight\EDG(2/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                = 153} , self = 61 , parent = Nothing , duration = 0.309862494000 , status
F                = Fail , start = 2025-09-03 10:54:48.088774076 UTC , finish = 2025-09-03
F                10:54:48.39863657 UTC , thread_cap_info = ("ThreadId 78", 0, False)}
F                
| F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 153} , self = 59 , parent = Nothing , duration = 0.229223999000 , status
| F              = Fail , start = 2025-09-03 10:54:48.088780261 UTC , finish = 2025-09-03
| F              10:54:48.31800426 UTC , thread_cap_info = ("ThreadId 80", 0, False)}
| F              
| | E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | E            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | E            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | E            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | E            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | E            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E            = 11} , self = 77 , parent = Nothing , duration = 0.419314091000 , status
| | E            = Except "AsyncCancelled" , start = 2025-09-03 10:54:48.097099005 UTC ,
| | E            finish = 2025-09-03 10:54:48.516413096 UTC , thread_cap_info = ("ThreadId
| | E            39", 1, False)}
| | E            
| | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F          = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F          = 30} , self = 58 , parent = Nothing , duration = 0.133895644000 , status
| | | F          = Fail , start = 2025-09-03 10:54:48.118101879 UTC , finish = 2025-09-03
| | | F          10:54:48.251997523 UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| | | F          
| | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F        = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | F        = 5 , total_length = 36} , self = 60 , parent = Nothing , duration = 0.256662594000
| | | | F        , status = Fail , start = 2025-09-03 10:54:48.121706313 UTC , finish =
| | | | F        2025-09-03 10:54:48.378368907 UTC , thread_cap_info = ("ThreadId 100",
| | | | F        2, False)}
| | | | F        
| | | | | E      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | E      , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | E      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | E      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | E      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | E      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | E      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | E      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | E      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | E      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | E      = 11} , self = 78 , parent = Nothing , duration = 0.378067245000 , status
| | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 10:54:48.13839134 UTC ,
| | | | | E      finish = 2025-09-03 10:54:48.516458585 UTC , thread_cap_info = ("ThreadId
| | | | | E      98", 1, False)}
| | | | | E      
| | | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | F    = 4 , total_length = 30} , self = 64 , parent = Nothing , duration = 0.276795587000
| | | | | | F    , status = Fail , start = 2025-09-03 10:54:48.14697214 UTC , finish = 2025-09-03
| | | | | | F    10:54:48.423767727 UTC , thread_cap_info = ("ThreadId 102", 2, False)}
| | | | | | F    
| | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | | S  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | | S  = 5 , total_length = 36} , self = 62 , parent = Nothing , duration = 0.222462314000
| | | | | | | S  , status = Success , start = 2025-09-03 10:54:48.176657157 UTC , finish
| | | | | | | S  = 2025-09-03 10:54:48.399119471 UTC , thread_cap_info = ("ThreadId 105",
| | | | | | | S  2, False)}
| | | | | | | S  
| | | F | | | |  
| | | S | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | S | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | S | | | |  = 4 , total_length = 30} , self = 66 , parent = Nothing , duration = 0.190298408000
| | | S | | | |  , status = Success , start = 2025-09-03 10:54:48.252023997 UTC , finish
| | | S | | | |  = 2025-09-03 10:54:48.442322405 UTC , thread_cap_info = ("ThreadId 110",
| | | S | | | |  2, False)}
| | | S | | | |  
| F | | | | | |  
|   | | F | | |  
F   | |   | | |  
    | |   | | S  
    | |   | F    
    | S   |      
    E     |      
          E      
CNF 9069 vars 43151 clauses
