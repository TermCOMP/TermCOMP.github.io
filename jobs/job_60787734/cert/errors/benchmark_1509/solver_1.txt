last 597 length 2441
last 1051 length 4628
last 908 length 3848
CNF 908 vars 3848 clauses
CNF 1051 vars 4628 clauses
last 1122 length 4916
CNF 597 vars 2441 clauses
last 865 length 3665
last 286 length 1271
last 673 length 2813
CNF 1122 vars 4916 clauses
last 476 length 2017
CNF 865 vars 3665 clauses
CNF 673 vars 2813 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1651, clauses: 5995
**************************************************last 1170 length 4958
last 1433 length 6285

last 1651 length 5995
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7515
CNF 1170 vars 4958 clauses
summary
CNF 1433 vars 6285 clauses
CNF 1651 vars 5995 clauses
last 2039 length 7515
**************************************************
SRS with 3 rules on 2 letters       weights
SRS with 2 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 8 rules on 4 letters       weights
SRS with 3 rules on 4 letters       mirror
SRS with 3 rules on 4 letters       DP
SRS with 7 strict rules and 3 weak rules on 6 letters       weights
SRS with 0 strict rules and 3 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, b] -> [a, b, a, b] {- Input 0 -}
  [b, b, a, a] -> [a, b, a, b] {- Input 1 -}
  [b, a, a, b] -> [b, a, b, a] {- Input 2 -}
reason
  (a, 0/1)
  (b, 1/1)
   property Termination
has value Just True
for SRS
  [b, b, a, a] -> [a, b, a, b] {- Input 1 -}
  [b, a, a, b] -> [b, a, b, a] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[b, b], [b, b], [b, a], [a, a], [a, b]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[b, b], [b, b], [b, a], [a, a], [a, a]] -> [ [b, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[a, b], [b, b], [b, a], [a, a], [a, a]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , a ] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, b]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, b]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  ([a, a], 1/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[a, b], [b, b], [b, a], [a, a], [a, b]] -> [ [a, a] , [a, b] , [b, a] , [a, b] , [ b , b ] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b], [b, a], [a, a], [a, b], [b, a]] -> [ [b, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, b], [b, a], [a, a], [a, b], [b, a]] -> [ [a, b] , [b, a] , [a, b] , [b, a] , [ a , a ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [[a, b], [a, a], [b, a], [b, b], [a, b]] -> [ [b, b] , [a, b] , [b, a] , [a, b] , [ a , a ] ] {- Mirror (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, b], [a, a], [b, a], [b, b]] -> [ [a, a] , [b, a] , [a, b] , [b, a] , [ b , b ] ] {- Mirror (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, a], [a, b], [a, a], [b, a], [a, b]] -> [ [a, a] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- Mirror (Semlab 1 (Concon 1 (Input 2))) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[a, b], [a, a], [b, a], [b, b], [a, b]] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[b, a], [a, b], [a, a], [b, a], [b, b]] ->= [ [a, a] , [b, a] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[b, a], [a, b], [a, a], [b, a], [a, b]] ->= [ [a, a] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[a, b]#, [a, a], [b, a], [b, b], [a, b]] |-> [ [a, b]# , [ a , a ] ] {- DP (Top 3) (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[a, b]#, [a, a], [b, a], [b, b], [a, b]] |-> [ [a, b]# , [b, a] , [a, b] , [ a , a ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[a, b]#, [a, a], [b, a], [b, b], [a, b]] |-> [ [b, a]# , [a, b] , [ a , a ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[b, a]#, [a, b], [a, a], [b, a], [a, b]] |-> [ [a, b]# , [b, a] , [ a , b ] ] {- DP (Top 2) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[b, a]#, [a, b], [a, a], [b, a], [a, b]] |-> [ [b, a]# , [a, b] , [b, a] , [ a , b ] ] {- DP (Top 1) (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
  [[b, a]#, [a, b], [a, a], [b, a], [b, b]] |-> [ [a, b]# , [b, a] , [ b , b ] ] {- DP (Top 2) (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[b, a]#, [a, b], [a, a], [b, a], [b, b]] |-> [ [b, a]# , [a, b] , [b, a] , [ b , b ] ] {- DP (Top 1) (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([b, a], 1/1)
  ([b, b], 1/1)
  ([a, b]#, 0/1)
  ([b, a]#, 0/1)
   property Termination
has value Just True
for SRS
  [[a, b], [a, a], [b, a], [b, b], [a, b]] ->= [ [b, b] , [a, b] , [b, a] , [a, b] , [ a , a ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 0 (Input 1)))) -}
  [[b, a], [a, b], [a, a], [b, a], [b, b]] ->= [ [a, a] , [b, a] , [a, b] , [b, a] , [ b , b ] ] {- DP Nontop (Mirror (Semlab 0 (Concon 1 (Input 2)))) -}
  [[b, a], [a, b], [a, a], [b, a], [a, b]] ->= [ [a, a] , [b, a] , [a, b] , [b, a] , [ a , b ] ] {- DP Nontop (Mirror (Semlab 1 (Concon 1 (Input 2)))) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Weight(2,2)\TileAllAll{2}(8,4)\Weight\Mirror(3,4)\Deepee(7/3,6)\Weight(0/3,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 2039 vars 7515 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7515, status: Satisfied, time: 0.012945663s


**************************************************
   
