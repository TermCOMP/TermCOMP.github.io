last 650 length 2599
last 650 length 2599
CNF 650 vars 2599 clauses
CNF 650 vars 2599 clauses
last 576 length 2321
CNF 576 vars 2321 clauses
last 576 length 2321
CNF 576 vars 2321 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2550, clauses: 9038
last 2550 length 9038
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2550, clauses: 9038
CNF 2550 vars 9038 clauses
last 2550 length 9038
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9399, clauses: 39063
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2550, clauses: 9038, status: Unsatisfied, time: 0.236944656s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9399, clauses: 39063
last 9399 length 39063
last 9399 length 39063
CNF 2550 vars 9038 clauses
CNF 9399 vars 39063 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5730, clauses: 22734
CNF 9399 vars 39063 clauses
last 5730 length 22734
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9399, clauses: 39063, status: Satisfied, time: 0.171809154s
CNF 5730 vars 22734 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2550, clauses: 9038, status: Unsatisfied, time: 0.349204802s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9399, clauses: 39063, status: Satisfied, time: 0.192476758s
**************************************************
summary
**************************************************
SRS with 7 rules on 4 letters       DP
SRS with 14 strict rules and 7 weak rules on 7 letters       weights
SRS with 1 strict rules and 7 weak rules on 5 letters       EDG
SRS with 1 strict rules and 7 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, a] -> [a, b, c] {- Input 0 -}
  [c, a] -> [a, c] {- Input 1 -}
  [c, b] -> [b, a] {- Input 2 -}
  [a, a, b] -> [d, b, a] {- Input 3 -}
  [a, d] -> [d, a] {- Input 4 -}
  [b, d] -> [a, b] {- Input 5 -}
  [a, a] -> [a, b, a] {- Input 6 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, b, c] {- DP Nontop (Input 0) -}
  [c, a] ->= [a, c] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, a] {- DP Nontop (Input 2) -}
  [a, a, b] ->= [d, b, a] {- DP Nontop (Input 3) -}
  [a, d] ->= [d, a] {- DP Nontop (Input 4) -}
  [b, d] ->= [a, b] {- DP Nontop (Input 5) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Input 6) -}
  [a#, d] |-> [a#] {- DP (Top 1) (Input 4) -}
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Input 6) -}
  [a#, a] |-> [b#, a] {- DP (Top 1) (Input 6) -}
  [a#, a, b] |-> [a#] {- DP (Top 2) (Input 3) -}
  [a#, a, b] |-> [b#, a] {- DP (Top 1) (Input 3) -}
  [b#, d] |-> [a#, b] {- DP (Top 0) (Input 5) -}
  [b#, d] |-> [b#] {- DP (Top 1) (Input 5) -}
  [b#, a, a] |-> [a#, b, c] {- DP (Top 0) (Input 0) -}
  [b#, a, a] |-> [b#, c] {- DP (Top 1) (Input 0) -}
  [b#, a, a] |-> [c#] {- DP (Top 2) (Input 0) -}
  [c#, a] |-> [a#, c] {- DP (Top 0) (Input 1) -}
  [c#, a] |-> [c#] {- DP (Top 1) (Input 1) -}
  [c#, b] |-> [a#] {- DP (Top 1) (Input 2) -}
  [c#, b] |-> [b#, a] {- DP (Top 0) (Input 2) -}
reason
  (d, 2/1)
  (a, 2/1)
  (b, 0/1)
  (c, 2/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 3/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, b, c] {- DP Nontop (Input 0) -}
  [c, a] ->= [a, c] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, a] {- DP Nontop (Input 2) -}
  [a, a, b] ->= [d, b, a] {- DP Nontop (Input 3) -}
  [a, d] ->= [d, a] {- DP Nontop (Input 4) -}
  [b, d] ->= [a, b] {- DP Nontop (Input 5) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Input 6) -}
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Input 6) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [a#, b, a] {- DP (Top 0) (Input 6) -}
  [b, a, a] ->= [a, b, c] {- DP Nontop (Input 0) -}
  [c, a] ->= [a, c] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, a] {- DP Nontop (Input 2) -}
  [a, a, b] ->= [d, b, a] {- DP Nontop (Input 3) -}
  [a, d] ->= [d, a] {- DP Nontop (Input 4) -}
  [b, d] ->= [a, b] {- DP Nontop (Input 5) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Input 6) -}
reason
  ( d
  , Wk  / 0A -  -  \
        | 1A 1A -  |
        \ -  -  0A / )
  ( a
  , Wk  / 0A -  -  \
        | 0A 1A -  |
        \ -  -  0A / )
  ( b
  , Wk  / 0A  -   -  \
        | -2A -1A -  |
        \ -   -   0A / )
  ( c
  , Wk  / 0A -  -  \
        | 0A 1A -  |
        \ -  -  0A / )
  ( a#
  , Wk  / 0A 1A -  \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, b, c] {- DP Nontop (Input 0) -}
  [c, a] ->= [a, c] {- DP Nontop (Input 1) -}
  [c, b] ->= [b, a] {- DP Nontop (Input 2) -}
  [a, a, b] ->= [d, b, a] {- DP Nontop (Input 3) -}
  [a, d] ->= [d, a] {- DP Nontop (Input 4) -}
  [b, d] ->= [a, b] {- DP Nontop (Input 5) -}
  [a, a] ->= [a, b, a] {- DP Nontop (Input 6) -}
reason
  EDG

**************************************************
skeleton: (7,4)\Deepee(14/7,7)\Weight\EDG(1/7,5)\Matrix{\ArcticBZ}{3}(0/7,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length = 33} , self
F                  = 45 , parent = Nothing , duration = 0.109015541000 , status = Fail , start
F                  = 2025-09-03 13:36:12.8913737 UTC , finish = 2025-09-03 13:36:13.000389241
F                  UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 7 , num_strict_rules = 7 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| E                = 33} , self = 70 , parent = Nothing , duration = 0.564624766000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 13:36:12.891391686 UTC ,
| E                finish = 2025-09-03 13:36:13.456016452 UTC , thread_cap_info = ("ThreadId
| E                48", 0, False)}
| E                
| | E              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E              = False\n , verbose = False}" , input_size = Size { num_rules = 82 , num_strict_rules
| | E              = 82 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 14 , total_length
| | E              = 556} , self = 68 , parent = Nothing , duration = 0.513371200000 , status
| | E              = Except "AsyncCancelled" , start = 2025-09-03 13:36:12.908140352 UTC ,
| | E              finish = 2025-09-03 13:36:13.421511552 UTC , thread_cap_info = ("ThreadId
| | E              78", 3, False)}
| | E              
| | | E            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 82 , num_strict_rules
| | | E            = 82 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 14 , total_length
| | | E            = 556} , self = 69 , parent = Nothing , duration = 0.513372409000 , status
| | | E            = Except "AsyncCancelled" , start = 2025-09-03 13:36:12.908154595 UTC ,
| | | E            finish = 2025-09-03 13:36:13.421527004 UTC , thread_cap_info = ("ThreadId
| | | E            80", 3, False)}
| | | E            
| | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F          = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | F          = 5 , total_length = 38} , self = 65 , parent = Nothing , duration = 0.477987032000
| | | | F          , status = Fail , start = 2025-09-03 13:36:12.931798282 UTC , finish =
| | | | F          2025-09-03 13:36:13.409785314 UTC , thread_cap_info = ("ThreadId 86", 2,
| | | | F          False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | | F        = 5 , total_length = 38} , self = 58 , parent = Nothing , duration = 0.285328226000
| | | | | F        , status = Fail , start = 2025-09-03 13:36:12.938783401 UTC , finish =
| | | | | F        2025-09-03 13:36:13.224111627 UTC , thread_cap_info = ("ThreadId 85", 2,
| | | | | F        False)}
| | | | | F        
| | | | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | S      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | | | S      = 5 , total_length = 38} , self = 66 , parent = Nothing , duration = 0.426752712000
| | | | | | S      , status = Success , start = 2025-09-03 13:36:12.992179111 UTC , finish
| | | | | | S      = 2025-09-03 13:36:13.418931823 UTC , thread_cap_info = ("ThreadId 94",
| | | | | | S      2, False)}
| | | | | | S      
| | | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | S    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| | | | | | | S    = 5 , total_length = 38} , self = 60 , parent = Nothing , duration = 0.401728543000
| | | | | | | S    , status = Success , start = 2025-09-03 13:36:12.994872634 UTC , finish
| | | | | | | S    = 2025-09-03 13:36:13.396601177 UTC , thread_cap_info = ("ThreadId 93",
| | | | | | | S    2, False)}
| | | | | | | S    
F | | | | | | |    
S | | | | | | |    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
S | | | | | | |    verbose = False}" , input_size = Size { num_rules = 98 , num_strict_rules
S | | | | | | |    = 16 , num_top_rules = 16 , num_weak_rules = 82 , alphabet_size = 18 ,
S | | | | | | |    total_length = 668} , self = 53 , parent = Nothing , duration = 0.107057007000
S | | | | | | |    , status = Success , start = 2025-09-03 13:36:13.052840819 UTC , finish
S | | | | | | |    = 2025-09-03 13:36:13.159897826 UTC , thread_cap_info = ("ThreadId 96",
S | | | | | | |    1, False)}
S | | | | | | |    
| | | | | | | | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | | | S  verbose = False}" , input_size = Size { num_rules = 98 , num_strict_rules
| | | | | | | | S  = 16 , num_top_rules = 16 , num_weak_rules = 82 , alphabet_size = 18 ,
| | | | | | | | S  total_length = 668} , self = 55 , parent = Nothing , duration = 0.106928658000
| | | | | | | | S  , status = Success , start = 2025-09-03 13:36:13.073459805 UTC , finish
| | | | | | | | S  = 2025-09-03 13:36:13.180388463 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | | | S  1, False)}
| | | | | | | | S  
S | | | | | | | |  
  | | | | | | | S  
  | | | | F | |    
E | | | |   | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E | | | |   | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | | |   | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E | | | |   | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | | |   | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | | |   | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
E | | | |   | |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
E | | | |   | |    = 5 , total_length = 38} , self = 62 , parent = Nothing , duration = 0.185370203000
E | | | |   | |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:36:13.224154995
E | | | |   | |    UTC , finish = 2025-09-03 13:36:13.409525198 UTC , thread_cap_info = ("ThreadId
E | | | |   | |    107", 2, False)}
E | | | |   | |    
| | | | |   | S    
E | | | |   |      
  | | | F   |      
  | | |     S      
  | E |            
  |   E            
  E                
