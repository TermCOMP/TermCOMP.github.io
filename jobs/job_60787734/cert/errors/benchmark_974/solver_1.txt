last 1027 length 4329
last 2902 length 16598
CNF 1027 vars 4329 clauses
CNF 2902 vars 16598 clauses
last 1095 length 5098
CNF 1095 vars 5098 clauses
last 5221 length 27226
last 2573 length 12829
CNF 5221 vars 27226 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3129, clauses: 11363
last 3129 length 11363
CNF 2573 vars 12829 clauses
CNF 3129 vars 11363 clauses
last 6514 length 38629
CNF 6514 vars 38629 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4438, clauses: 17191
last 4438 length 17191
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3129, clauses: 11363, status: Satisfied, time: 0.127927991s
CNF 4438 vars 17191 clauses
**************************************************
summary
**************************************************
SRS with 5 rules on 3 letters       split
2 sub-proofs
  1 SRS with 5 rules on 3 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
  SRS with 45 rules on 9 letters       weights
  SRS with 33 rules on 9 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 13 rules on 9 letters       weights
  SRS with 0 rules on 0 letters       no strict rules

  2 SRS with 0 rules on 0 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, c] -> [c, c, c, b, b, b, a, a, a] {- Input 0 -}
  [c, b] -> [a, a, a] {- Input 1 -}
  [a] -> [] {- Input 2 -}
  [b] -> [] {- Input 3 -}
  [c] -> [] {- Input 4 -}
reason
  split
   property Termination
has value Just True
for SRS
  [a, b, c] -> [c, c, c, b, b, b, a, a, a] {- Input 0 -}
  [c, b] -> [a, a, a] {- Input 1 -}
  [a] -> [] {- Input 2 -}
  [b] -> [] {- Input 3 -}
  [c] -> [] {- Input 4 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, c], [c, a]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, b]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, b]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, c]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, b]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, c]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, a]] -> [ [a, a] , [a, a] , [a, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[a, c], [c, b], [b, c]] -> [ [a, a] , [a, a] , [a, a] , [a, c] ] {- Semlab 0 (Concon 2 (Input 1)) -}
  [[b, c], [c, b], [b, a]] -> [ [b, a] , [a, a] , [a, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, c]] -> [ [b, a] , [a, a] , [a, a] , [a, c] ] {- Semlab 1 (Concon 2 (Input 1)) -}
  [[c, c], [c, b], [b, a]] -> [ [c, a] , [a, a] , [a, a] , [a, a] ] {- Semlab 2 (Concon 0 (Input 1)) -}
  [[c, c], [c, b], [b, b]] -> [ [c, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[c, c], [c, b], [b, c]] -> [ [c, a] , [a, a] , [a, a] , [a, c] ] {- Semlab 2 (Concon 2 (Input 1)) -}
  [[a, a], [a, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 2)) -}
  [[b, a], [a, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 3)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[a, b], [b, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 3)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, b], [b, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 3)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[c, b], [b, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 3)) -}
  [[a, c], [c, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[a, c], [c, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[a, c], [c, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, c], [c, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, c], [c, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 4)) -}
  [[b, c], [c, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[c, c], [c, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[c, c], [c, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[c, c], [c, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 4)) -}
reason
  ([a, a], 0/1)
  ([a, b], 1/1)
  ([a, c], 0/1)
  ([b, a], 1/1)
  ([b, b], 0/1)
  ([b, c], 1/1)
  ([c, a], 0/1)
  ([c, b], 1/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  [[a, a], [a, b], [b, c], [c, a]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, b]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[a, a], [a, b], [b, c], [c, c]] -> [ [a, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 0 (Concon 2 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, a]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, b]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[b, a], [a, b], [b, c], [c, c]] -> [ [b, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 1 (Concon 2 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, a]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , a ] ] {- Semlab 2 (Concon 0 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, b]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , b ] ] {- Semlab 2 (Concon 1 (Input 0)) -}
  [[c, a], [a, b], [b, c], [c, c]] -> [ [c, c] , [c, c] , [c, c] , [c, b] , [b, b] , [b, b] , [b, a] , [a, a] , [a, a] , [ a , c ] ] {- Semlab 2 (Concon 2 (Input 0)) -}
  [[a, c], [c, b], [b, b]] -> [ [a, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, c], [c, b], [b, b]] -> [ [b, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[c, c], [c, b], [b, b]] -> [ [c, a] , [a, a] , [a, a] , [a, b] ] {- Semlab 2 (Concon 1 (Input 1)) -}
  [[a, a], [a, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 3)) -}
  [[a, c], [c, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 4)) -}
  [[a, c], [c, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 4)) -}
  [[a, c], [c, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 4)) -}
  [[b, c], [c, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 4)) -}
  [[b, c], [c, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 4)) -}
  [[c, c], [c, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 4)) -}
  [[c, c], [c, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 4)) -}
  [[c, c], [c, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 4)) -}
reason
  ( [a, a]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [a, b]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [a, c]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, a]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [b, b]
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( [b, c]
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( [c, a]
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( [c, b]
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( [c, c]
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, a], [a, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[a, a], [a, c]] -> [[a, c]] {- Semlab 0 (Concon 2 (Input 2)) -}
  [[b, a], [a, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, a], [a, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 2)) -}
  [[c, a], [a, a]] -> [[c, a]] {- Semlab 2 (Concon 0 (Input 2)) -}
  [[c, a], [a, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 2)) -}
  [[c, a], [a, c]] -> [[c, c]] {- Semlab 2 (Concon 2 (Input 2)) -}
  [[a, b], [b, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 3)) -}
  [[b, b], [b, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 3)) -}
  [[b, b], [b, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 3)) -}
  [[b, b], [b, c]] -> [[b, c]] {- Semlab 1 (Concon 2 (Input 3)) -}
  [[c, b], [b, b]] -> [[c, b]] {- Semlab 2 (Concon 1 (Input 3)) -}
reason
  ([a, a], 1/1)
  ([a, b], 1/1)
  ([a, c], 1/1)
  ([b, a], 1/1)
  ([b, b], 1/1)
  ([b, c], 0/1)
  ([c, a], 1/1)
  ([c, b], 0/1)
  ([c, c], 0/1)
   property Termination
has value Just True
for SRS
  
reason
  no strict rules

property Termination
has value Just True
for SRS
  
reason
  no strict rules

**************************************************
skeleton: (5,3)\Split[(5,3)\TileAllAll{2}(45,9)\Weight(33,9)\Matrix{\Natural}{2}(13,9)\Weight(0,0)[],(0,0)[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4438, clauses: 17191, status: Satisfied, time: 0.088714482s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
F            = 9 , num_top_rules = 9 , num_weak_rules = 11 , alphabet_size = 5 , total_length
F            = 104} , self = 62 , parent = Nothing , duration = 0.349623081000 , status
F            = Fail , start = 2025-09-03 13:40:33.829008227 UTC , finish = 2025-09-03
F            13:40:34.178631308 UTC , thread_cap_info = ("ThreadId 61", 1, False)}
F            
| S          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| S          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S          = False\n , verbose = False}" , input_size = Size { num_rules = 33 , num_strict_rules
| S          = 33 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| S          = 210} , self = 57 , parent = Nothing , duration = 0.340820175000 , status
| S          = Success , start = 2025-09-03 13:40:33.830969302 UTC , finish = 2025-09-03
| S          13:40:34.171789477 UTC , thread_cap_info = ("ThreadId 70", 3, False)}
| S          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 33 , num_strict_rules
| | F        = 33 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 210} , self = 56 , parent = Nothing , duration = 0.264844760000 , status
| | F        = Fail , start = 2025-09-03 13:40:33.830991759 UTC , finish = 2025-09-03
| | F        13:40:34.095836519 UTC , thread_cap_info = ("ThreadId 73", 3, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | F      = 9 , num_top_rules = 9 , num_weak_rules = 11 , alphabet_size = 5 , total_length
| | | F      = 104} , self = 46 , parent = Nothing , duration = 0.139461337000 , status
| | | F      = Fail , start = 2025-09-03 13:40:33.834074672 UTC , finish = 2025-09-03
| | | F      13:40:33.973536009 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 11 , alphabet_size = 4 , total_length
| | | | F    = 59} , self = 47 , parent = Nothing , duration = 0.101026650000 , status
| | | | F    = Fail , start = 2025-09-03 13:40:33.872518221 UTC , finish = 2025-09-03
| | | | F    13:40:33.973544871 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 11 , alphabet_size = 4 , total_length
| | | | | F  = 59} , self = 52 , parent = Nothing , duration = 0.126936281000 , status
| | | | | F  = Fail , start = 2025-09-03 13:40:33.892079469 UTC , finish = 2025-09-03
| | | | | F  13:40:34.01901575 UTC , thread_cap_info = ("ThreadId 78", 1, False)}
| | | | | F  
| | | F | |  
| | |   F |  
| | | S   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S   |  = 14 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 11 ,
| | | S   |  alphabet_size = 4 , total_length = 59} , self = 63 , parent = Nothing ,
| | | S   |  duration = 0.198171765000 , status = Success , start = 2025-09-03 13:40:33.993290843
| | | S   |  UTC , finish = 2025-09-03 13:40:34.191462608 UTC , thread_cap_info = ("ThreadId
| | | S   |  96", 1, False)}
| | | S   |  
| | | |   F  
| | F |      
| S   |      
F     |      
      S      
