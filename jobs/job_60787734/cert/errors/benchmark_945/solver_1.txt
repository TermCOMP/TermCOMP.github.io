last 1833 length 7966
last 1572 length 6603
CNF 1833 vars 7966 clauses
last 1582 length 6643
last 1869 length 8034
CNF 1572 vars 6603 clauses
CNF 1869 vars 8034 clauses
CNF 1582 vars 6643 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790
last 3705 length 13790
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790
last 3705 length 13790
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12060, clauses: 50517
CNF 3705 vars 13790 clauses
CNF 3705 vars 13790 clauses
last 12931 length 58924
last 12060 length 50517
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12060, clauses: 50517
last 15058 length 74234
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790, status: Satisfied, time: 0.242496805s
CNF 12060 vars 50517 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3705, clauses: 13790, status: Satisfied, time: 0.425910871s
CNF 12931 vars 58924 clauses
last 12060 length 50517
CNF 15058 vars 74234 clauses
last 17431 length 80032
CNF 17431 vars 80032 clauses
**************************************************last 17377 length 79840

last 22214 length 109968
summary
**************************************************
SRS with 4 rules on 3 letters       DP
SRS with 15 strict rules and 4 weak rules on 6 letters       weights
SRS with 4 strict rules and 4 weak rules on 6 letters       EDG
SRS with 4 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 4 weak rules on 6 letters       weights
SRS with 0 strict rules and 4 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, b, a, a] -> [a, a, b, c] {- Input 0 -}
  [b, a, a, a] -> [a, a, a, b] {- Input 1 -}
  [a, b, c] -> [c, b, a] {- Input 2 -}
  [c, c, b, b] -> [b, b, c, c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, b, a, a] ->= [a, a, b, c] {- DP Nontop (Input 0) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c, b, a] {- DP Nontop (Input 2) -}
  [c, c, b, b] ->= [b, b, c, c] {- DP Nontop (Input 3) -}
  [a#, b, c] |-> [a#] {- DP (Top 2) (Input 2) -}
  [a#, b, c] |-> [b#, a] {- DP (Top 1) (Input 2) -}
  [a#, b, c] |-> [c#, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [b#, a, a, a] |-> [a#, a, b] {- DP (Top 1) (Input 1) -}
  [b#, a, a, a] |-> [a#, b] {- DP (Top 2) (Input 1) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 3) (Input 1) -}
  [c#, b, a, a] |-> [a#, a, b, c] {- DP (Top 0) (Input 0) -}
  [c#, b, a, a] |-> [a#, b, c] {- DP (Top 1) (Input 0) -}
  [c#, b, a, a] |-> [b#, c] {- DP (Top 2) (Input 0) -}
  [c#, b, a, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, c, b, b] |-> [b#, b, c, c] {- DP (Top 0) (Input 3) -}
  [c#, c, b, b] |-> [b#, c, c] {- DP (Top 1) (Input 3) -}
  [c#, c, b, b] |-> [c#] {- DP (Top 3) (Input 3) -}
  [c#, c, b, b] |-> [c#, c] {- DP (Top 2) (Input 3) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [c, b, a, a] ->= [a, a, b, c] {- DP Nontop (Input 0) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c, b, a] {- DP Nontop (Input 2) -}
  [c, c, b, b] ->= [b, b, c, c] {- DP Nontop (Input 3) -}
  [a#, b, c] |-> [c#, b, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [c#, b, a, a] |-> [a#, a, b, c] {- DP (Top 0) (Input 0) -}
  [c#, c, b, b] |-> [b#, b, c, c] {- DP (Top 0) (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, c] |-> [c#, b, a] {- DP (Top 0) (Input 2) -}
  [c#, b, a, a] |-> [a#, a, b, c] {- DP (Top 0) (Input 0) -}
  [c#, c, b, b] |-> [b#, b, c, c] {- DP (Top 0) (Input 3) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [c, b, a, a] ->= [a, a, b, c] {- DP Nontop (Input 0) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c, b, a] {- DP Nontop (Input 2) -}
  [c, c, b, b] ->= [b, b, c, c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 10A 12A 12A - \
        | 10A 12A 12A - |
        | 10A 12A 12A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 13A 13A - \
        | 10A 13A 13A - |
        | 10A 13A 13A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 10A 10A 13A - \
        | 10A 10A 13A - |
        | 10A 10A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [c#, b, a, a] |-> [a#, a, b, c] {- DP (Top 0) (Input 0) -}
  [c#, c, b, b] |-> [b#, b, c, c] {- DP (Top 0) (Input 3) -}
  [b#, a, a, a] |-> [a#, a, a, b] {- DP (Top 0) (Input 1) -}
  [c, b, a, a] ->= [a, a, b, c] {- DP Nontop (Input 0) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c, b, a] {- DP Nontop (Input 2) -}
  [c, c, b, b] ->= [b, b, c, c] {- DP Nontop (Input 3) -}
reason
  (a, 1/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [c, b, a, a] ->= [a, a, b, c] {- DP Nontop (Input 0) -}
  [b, a, a, a] ->= [a, a, a, b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c, b, a] {- DP Nontop (Input 2) -}
  [c, c, b, b] ->= [b, b, c, c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: (4,3)\Deepee(15/4,6)\Weight\EDG(4/4,6)\Matrix{\Arctic}{3}(3/4,6)\Weight(0/4,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 1.398456789000
  min duration 0.184654860000
  total durat. 1.776570652000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 36
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 342}
    , self = 70
    , parent = Nothing
    , duration = 1.398456789000
    , status = Fail
    , start = 2025-09-03 13:35:46.348458761 UTC
    , finish = 2025-09-03 13:35:47.74691555 UTC
    , thread_cap_info = ("ThreadId 64", 1, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 1.460023751000
  min duration 0.160907535000
  total durat. 1.784654240000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 36
      , num_strict_rules = 36
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 9
      , total_length = 342}
    , self = 71
    , parent = Nothing
    , duration = 1.460023751000
    , status = Fail
    , start = 2025-09-03 13:35:46.362161197 UTC
    , finish = 2025-09-03 13:35:47.822184948 UTC
    , thread_cap_info = ("ThreadId 66", 1, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.161429784000
  min duration 0.981552738000
  total durat. 2.142982522000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 60}
    , self = 68
    , parent = Nothing
    , duration = 1.161429784000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:35:46.565329402 UTC
    , finish = 2025-09-03 13:35:47.726759186 UTC
    , thread_cap_info = ("ThreadId 90", 0, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.087798163000
  min duration 0.900845564000
  total durat. 1.988643727000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 60}
    , self = 63
    , parent = Nothing
    , duration = 1.087798163000
    , status = Success
    , start = 2025-09-03 13:35:46.536479633 UTC
    , finish = 2025-09-03 13:35:47.624277796 UTC
    , thread_cap_info = ("ThreadId 88", 0, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 30} , self
F                  = 45 , parent = Nothing , duration = 0.310471029000 , status = Fail , start
F                  = 2025-09-03 13:35:46.33485656 UTC , finish = 2025-09-03 13:35:46.645327589
F                  UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 30} , self = 46 , parent = Nothing , duration = 0.346589444000 , status
| F                = Fail , start = 2025-09-03 13:35:46.334953031 UTC , finish = 2025-09-03
| F                13:35:46.681542475 UTC , thread_cap_info = ("ThreadId 36", 3, False)}
| F                
| | F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F              , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
| | F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F              = 30} , self = 56 , parent = Nothing , duration = 0.481070305000 , status
| | F              = Fail , start = 2025-09-03 13:35:46.334962119 UTC , finish = 2025-09-03
| | F              13:35:46.816032424 UTC , thread_cap_info = ("ThreadId 37", 3, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 342} , self = 70 , parent = Nothing , duration = 1.398456789000 , status
| | | F            = Fail , start = 2025-09-03 13:35:46.348458761 UTC , finish = 2025-09-03
| | | F            13:35:47.74691555 UTC , thread_cap_info = ("ThreadId 64", 1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F          = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | F          = 60} , self = 42 , parent = Nothing , duration = 0.193459003000 , status
| | | | F          = Fail , start = 2025-09-03 13:35:46.357272874 UTC , finish = 2025-09-03
| | | | F          13:35:46.550731877 UTC , thread_cap_info = ("ThreadId 75", 0, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F        = 342} , self = 71 , parent = Nothing , duration = 1.460023751000 , status
| | | | | F        = Fail , start = 2025-09-03 13:35:46.362161197 UTC , finish = 2025-09-03
| | | | | F        13:35:47.822184948 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | F      = 60} , self = 41 , parent = Nothing , duration = 0.163722954000 , status
| | | | | | F      = Fail , start = 2025-09-03 13:35:46.362175757 UTC , finish = 2025-09-03
| | | | | | F      13:35:46.525898711 UTC , thread_cap_info = ("ThreadId 76", 0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | F    = 60} , self = 44 , parent = Nothing , duration = 0.184654860000 , status
| | | | | | | F    = Fail , start = 2025-09-03 13:35:46.40301934 UTC , finish = 2025-09-03
| | | | | | | F    13:35:46.5876742 UTC , thread_cap_info = ("ThreadId 79", 0, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | | F  = 60} , self = 43 , parent = Nothing , duration = 0.160907535000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 13:35:46.42198072 UTC , finish = 2025-09-03
| | | | | | | | F  13:35:46.582888255 UTC , thread_cap_info = ("ThreadId 80", 0, False)}
| | | | | | | | F  
| | | | | | F | |  
| | | | | | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S | |  = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | | | S | |  = 6 , total_length = 60} , self = 63 , parent = Nothing , duration = 1.087798163000
| | | | | | S | |  , status = Success , start = 2025-09-03 13:35:46.536479633 UTC , finish
| | | | | | S | |  = 2025-09-03 13:35:47.624277796 UTC , thread_cap_info = ("ThreadId 88",
| | | | | | S | |  0, False)}
| | | | | | S | |  
| | | | F | | | |  
| | | | E | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | E | | | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| | | | E | | | |  = 6 , total_length = 60} , self = 68 , parent = Nothing , duration = 1.161429784000
| | | | E | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:35:46.565329402
| | | | E | | | |  UTC , finish = 2025-09-03 13:35:47.726759186 UTC , thread_cap_info = ("ThreadId
| | | | E | | | |  90", 0, False)}
| | | | E | | | |  
| | | | | | | | F  
| | | | | | | F    
F | | | | | |      
S | | | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | | |      = 8 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
S | | | | | |      = 6 , total_length = 60} , self = 61 , parent = Nothing , duration = 0.900845564000
S | | | | | |      , status = Success , start = 2025-09-03 13:35:46.661977733 UTC , finish
S | | | | | |      = 2025-09-03 13:35:47.562823297 UTC , thread_cap_info = ("ThreadId 92",
S | | | | | |      0, False)}
S | | | | | |      
| F | | | | |      
| E | | | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E | | | | |      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 4 , alphabet_size
| E | | | | |      = 6 , total_length = 60} , self = 65 , parent = Nothing , duration = 0.981552738000
| E | | | | |      , status = Except "AsyncCancelled" , start = 2025-09-03 13:35:46.683080837
| E | | | | |      UTC , finish = 2025-09-03 13:35:47.664633575 UTC , thread_cap_info = ("ThreadId
| E | | | | |      93", 0, False)}
| E | | | | |      
| | F | | | |      
S |   | | | |      
  |   | | | S      
  E   | | |        
      | E |        
      F   |        
          F        
