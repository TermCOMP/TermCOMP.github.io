last 492 length 1970
last 425 length 1639
CNF 492 vars 1970 clauses
last 522 length 2121
CNF 425 vars 1639 clauses
last 568 length 2335
CNF 522 vars 2121 clauses
CNF 568 vars 2335 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2452, clauses: 8719
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2347, clauses: 8293
last 2452 length 8719
last 2347 length 8293
last 4370 length 22012
last 3788 length 17135
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7339, clauses: 30369
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7629, clauses: 31613
CNF 2347 vars 8293 clauses
last 5823 length 22945
CNF 2452 vars 8719 clauses
CNF 4370 vars 22012 clauses
CNF 3788 vars 17135 clauses
last 8709 length 35506
last 7339 length 30369
last 7629 length 31613
last 7450 length 33744
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2347, clauses: 8293, status: Unsatisfied, time: 0.336902404s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2452, clauses: 8719, status: Unsatisfied, time: 0.336975179s
last 8212 length 34911
CNF 5823 vars 22945 clauses
CNF 8709 vars 35506 clauses
CNF 7339 vars 30369 clauses
CNF 7450 vars 33744 clauses
CNF 7629 vars 31613 clauses
CNF 8212 vars 34911 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4559, clauses: 18019
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4723, clauses: 18743
last 4559 length 18019
last 4723 length 18743
CNF 4559 vars 18019 clauses
CNF 4723 vars 18743 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7339, clauses: 30369, status: Satisfied, time: 0.452949218s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [c, a] -> [] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [a, c] -> [] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [a, a, c] -> [a] {- Mirror (Input 1) -}
  [b, a, c] -> [b] {- Mirror (Input 1) -}
  [c, a, c] -> [c] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [c, a, a] -> [a] {- Input 1 -}
  [c, a, b] -> [b] {- Input 1 -}
  [c, a, c] -> [c] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, b, b, c] {- DP (Top 0) (Input 0) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -  0A 1A \
        | 0A 1A 1A |
        \ -  -  0A / )
  ( b
  , Wk  / 1A 0A 1A \
        | 0A 0A 1A |
        \ -  -  0A / )
  ( c
  , Wk  / -  0A  0A \
        | 0A -1A 0A |
        \ -  -   0A / )
  ( a#
  , Wk  / 1A 1A 1A \
        | -  -  -  |
        \ -  -  0A / )
  ( c#
  , Wk  / 0A 1A -  \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
  [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
  [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
      [c, a, a] ->= [a] {- DP Nontop (Input 1) -}
      [c, a, b] ->= [b] {- DP Nontop (Input 1) -}
      [c, a, c] ->= [c] {- DP Nontop (Input 1) -}
      [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
reason
  (b, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\EDG(3/5,5)\Matrix{\ArcticBZ}{3}(2/5,5)\Weight\EDG(1/5,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.608127338000
  min duration 0.024493715000
  total durat. 1.662971432000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.561597054000
  min duration 0.065158083000
  total durat. 1.619639861000
**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                  = 162} , self = 61 , parent = Nothing , duration = 0.444555410000 , status
F                  = Fail , start = 2025-09-03 11:38:53.947329018 UTC , finish = 2025-09-03
F                  11:38:54.391884428 UTC , thread_cap_info = ("ThreadId 83", 1, False)}
F                  
| F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 162} , self = 59 , parent = Nothing , duration = 0.434384522000 , status
| F                = Fail , start = 2025-09-03 11:38:53.947337408 UTC , finish = 2025-09-03
| F                11:38:54.38172193 UTC , thread_cap_info = ("ThreadId 85", 1, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | F              = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | F              total_length = 394} , self = 63 , parent = Nothing , duration = 0.462397833000
| | F              , status = Fail , start = 2025-09-03 11:38:53.964005149 UTC , finish =
| | F              2025-09-03 11:38:54.426402982 UTC , thread_cap_info = ("ThreadId 96", 0,
| | F              False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | | F            = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | F            total_length = 394} , self = 64 , parent = Nothing , duration = 0.560776254000
| | | F            , status = Fail , start = 2025-09-03 11:38:53.971785431 UTC , finish =
| | | F            2025-09-03 11:38:54.532561685 UTC , thread_cap_info = ("ThreadId 95", 0,
| | | F            False)}
| | | F            
| | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F          = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | F          = 5 , total_length = 32} , self = 60 , parent = Nothing , duration = 0.408030475000
| | | | F          , status = Fail , start = 2025-09-03 11:38:53.974498777 UTC , finish =
| | | | F          2025-09-03 11:38:54.382529252 UTC , thread_cap_info = ("ThreadId 101",
| | | | F          3, False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | F        = 5 , total_length = 34} , self = 62 , parent = Nothing , duration = 0.435675226000
| | | | | F        , status = Fail , start = 2025-09-03 11:38:53.974514801 UTC , finish =
| | | | | F        2025-09-03 11:38:54.410190027 UTC , thread_cap_info = ("ThreadId 103",
| | | | | F        3, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | | | | | F      = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | F      total_length = 370} , self = 66 , parent = Nothing , duration = 0.608127338000
| | | | | | F      , status = Fail , start = 2025-09-03 11:38:54.010500432 UTC , finish =
| | | | | | F      2025-09-03 11:38:54.61862777 UTC , thread_cap_info = ("ThreadId 98", 0,
| | | | | | F      False)}
| | | | | | F      
| | | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | S    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | S    = 5 , total_length = 32} , self = 67 , parent = Nothing , duration = 0.682538312000
| | | | | | | S    , status = Success , start = 2025-09-03 11:38:54.02250612 UTC , finish
| | | | | | | S    = 2025-09-03 11:38:54.705044432 UTC , thread_cap_info = ("ThreadId 105",
| | | | | | | S    3, False)}
| | | | | | | S    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | | | | | | | F  = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | F  total_length = 370} , self = 65 , parent = Nothing , duration = 0.561597054000
| | | | | | | | F  , status = Fail , start = 2025-09-03 11:38:54.031059954 UTC , finish =
| | | | | | | | F  2025-09-03 11:38:54.592657008 UTC , thread_cap_info = ("ThreadId 99", 0,
| | | | | | | | F  False)}
| | | | | | | | F  
| F | | | | | | |  
|   | | F | | | |  
| E | |   | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E | |   | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E | |   | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E | |   | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |   | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |   | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E | |   | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| E | |   | | | |  = 5 , total_length = 32} , self = 69 , parent = Nothing , duration = 0.315478858000
| E | |   | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:38:54.389823336
| E | |   | | | |  UTC , finish = 2025-09-03 11:38:54.705302194 UTC , thread_cap_info = ("ThreadId
| E | |   | | | |  118", 3, False)}
| E | |   | | | |  
F | | |   | | | |  
  | | |   F | | |  
  | F |     | | |  
  |   F     | | |  
  |         | | F  
  |         F |    
  |           S    
  E                
