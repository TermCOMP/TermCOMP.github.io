last 1449 length 6494
last 1449 length 6494
CNF 1449 vars 6494 clauses
last 2331 length 11450
CNF 1449 vars 6494 clauses
CNF 2331 vars 11450 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2825, clauses: 10299
last 2825 length 10299
last 2331 length 11450
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2825, clauses: 10299
CNF 2825 vars 10299 clauses
CNF 2331 vars 11450 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10303, clauses: 43138
last 2825 length 10299
last 10303 length 43138
CNF 2825 vars 10299 clauses
CNF 10303 vars 43138 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2825, clauses: 10299, status: Unsatisfied, time: 0.20146116s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10303, clauses: 43138, status: Satisfied, time: 0.188732325s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2825, clauses: 10299, status: Unsatisfied, time: 0.338941459s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10303, clauses: 43138
last 10303 length 43138
CNF 10303 vars 43138 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6377, clauses: 26065
last 6377 length 26065
CNF 6377 vars 26065 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10303, clauses: 43138, status: Satisfied, time: 0.168981167s
**************************************************
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6377, clauses: 26065, status: Satisfied, time: 0.053863738s
summary
**************************************************
SRS with 9 rules on 4 letters       weights
SRS with 5 rules on 3 letters       context
SRS with 9 rules on 3 letters       mirror
SRS with 9 rules on 3 letters       DP
SRS with 9 strict rules and 9 weak rules on 6 letters       weights
SRS with 3 strict rules and 9 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 9 weak rules on 5 letters       Usable
  SRS with 2 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 9 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 9 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [C] -> [c] {- Input 0 -}
  [c, c] -> [] {- Input 1 -}
  [b, b] -> [B] {- Input 2 -}
  [B, B] -> [b] {- Input 3 -}
  [c, B, c, b, c] -> [B, c, b, c, B, c, b] {- Input 4 -}
  [b, B] -> [] {- Input 5 -}
  [B, b] -> [] {- Input 6 -}
  [c, C] -> [] {- Input 7 -}
  [C, c] -> [] {- Input 8 -}
reason
  (C, 2/1)
  (B, 0/1)
  (b, 0/1)
  (c, 1/1)
   property Termination
has value Just True
for SRS
  [b, b] -> [B] {- Input 2 -}
  [B, B] -> [b] {- Input 3 -}
  [c, B, c, b, c] -> [B, c, b, c, B, c, b] {- Input 4 -}
  [b, B] -> [] {- Input 5 -}
  [B, b] -> [] {- Input 6 -}
reason
  context
   property Termination
has value Just True
for SRS
  [b, b] -> [B] {- Input 2 -}
  [B, B] -> [b] {- Input 3 -}
  [c, B, c, b, c] -> [B, c, b, c, B, c, b] {- Input 4 -}
  [B, b, B] -> [B] {- Input 5 -}
  [b, b, B] -> [b] {- Input 5 -}
  [c, b, B] -> [c] {- Input 5 -}
  [B, B, b] -> [B] {- Input 6 -}
  [b, B, b] -> [b] {- Input 6 -}
  [c, B, b] -> [c] {- Input 6 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, b] -> [B] {- Mirror (Input 2) -}
  [B, B] -> [b] {- Mirror (Input 3) -}
  [c, b, c, B, c] -> [b, c, B, c, b, c, B] {- Mirror (Input 4) -}
  [B, b, B] -> [B] {- Mirror (Input 5) -}
  [B, b, b] -> [b] {- Mirror (Input 5) -}
  [B, b, c] -> [c] {- Mirror (Input 5) -}
  [b, B, B] -> [B] {- Mirror (Input 6) -}
  [b, B, b] -> [b] {- Mirror (Input 6) -}
  [b, B, c] -> [c] {- Mirror (Input 6) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
  [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
  [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
  [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
  [B#, B] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b] |-> [B#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, c, B, c] |-> [B#] {- DP (Top 6) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [B#, c, b, c, B] {- DP (Top 2) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [b#, c, B] {- DP (Top 4) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [b#, c, B, c, b, c, B] {- DP (Top 0) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [c#, B] {- DP (Top 5) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [c#, B, c, b, c, B] {- DP (Top 1) (Mirror (Input 4)) -}
  [c#, b, c, B, c] |-> [c#, b, c, B] {- DP (Top 3) (Mirror (Input 4)) -}
reason
  (B, 0/1)
  (b, 0/1)
  (c, 1/1)
  (B#, 0/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
  [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
  [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
  [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
  [B#, B] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b] |-> [B#] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b, c, B, c] |-> [c#, B, c, b, c, B] {- DP (Top 1) (Mirror (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [B#, B] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b] |-> [B#] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
  [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
  [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
  [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
reason
  remove un-usable
    SRS
      [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
      [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
      [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
      [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
      [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
      [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
      [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
      [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
      [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [B#, B] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [b#, b] |-> [B#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (B, 1/1)
  (b, 1/1)
  (B#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b, c, B, c] |-> [c#, B, c, b, c, B] {- DP (Top 1) (Mirror (Input 4)) -}
  [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
  [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
  [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
  [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( B
  , Wk  / -  1A 0A \
        | 0A 0A -  |
        \ -  -  0A / )
  ( b
  , Wk  / 1A  1A 0A \
        | -1A -  -  |
        \ -   -  0A / )
  ( c
  , Wk  / 0A - 0A \
        | -  - 0A |
        \ -  - 0A / )
  ( c#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [b, b] ->= [B] {- DP Nontop (Mirror (Input 2)) -}
  [B, B] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [c, b, c, B, c] ->= [b, c, B, c, b, c, B] {- DP Nontop (Mirror (Input 4)) -}
  [B, b, B] ->= [B] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, b] ->= [b] {- DP Nontop (Mirror (Input 5)) -}
  [B, b, c] ->= [c] {- DP Nontop (Mirror (Input 5)) -}
  [b, B, B] ->= [B] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, b] ->= [b] {- DP Nontop (Mirror (Input 6)) -}
  [b, B, c] ->= [c] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG

**************************************************
skeleton: (9,4)\Weight(5,3)\Context\Mirror(9,3)\Deepee(9/9,6)\Weight(3/9,6)\EDG[(2/9,5)\Usable(2,4)\Weight(0,0)\EDG[],(1/9,4)\Matrix{\ArcticBZ}{3}(0/9,3)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F        = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 4 , total_length
F        = 53} , self = 56 , parent = Nothing , duration = 0.100824410000 , status
F        = Fail , start = 2025-09-03 13:17:23.766451797 UTC , finish = 2025-09-03
F        13:17:23.867276207 UTC , thread_cap_info = ("ThreadId 62", 2, False)}
F        
| F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F      = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 4 , total_length
| F      = 53} , self = 58 , parent = Nothing , duration = 0.131933043000 , status
| F      = Fail , start = 2025-09-03 13:17:23.767793384 UTC , finish = 2025-09-03
| F      13:17:23.899726427 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F    = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size = 4 , total_length
| | F    = 53} , self = 63 , parent = Nothing , duration = 0.232287886000 , status
| | F    = Fail , start = 2025-09-03 13:17:23.867229221 UTC , finish = 2025-09-03
| | F    13:17:24.099517107 UTC , thread_cap_info = ("ThreadId 92", 2, False)}
| | F    
F | |    
F | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | |    = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
F | |    alphabet_size = 4 , total_length = 53} , self = 65 , parent = Nothing ,
F | |    duration = 0.430721426000 , status = Fail , start = 2025-09-03 13:17:23.896748363
F | |    UTC , finish = 2025-09-03 13:17:24.327469789 UTC , thread_cap_info = ("ThreadId
F | |    101", 2, False)}
F | |    
| F |    
| F |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F |    = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
| F |    alphabet_size = 4 , total_length = 53} , self = 68 , parent = Nothing ,
| F |    duration = 0.489812632000 , status = Fail , start = 2025-09-03 13:17:23.908136301
| F |    UTC , finish = 2025-09-03 13:17:24.397948933 UTC , thread_cap_info = ("ThreadId
| F |    102", 2, False)}
| F |    
| | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | S  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| | | S  = 4 , total_length = 53} , self = 66 , parent = Nothing , duration = 0.436072416000
| | | S  , status = Success , start = 2025-09-03 13:17:23.952938609 UTC , finish
| | | S  = 2025-09-03 13:17:24.389011025 UTC , thread_cap_info = ("ThreadId 106",
| | | S  2, False)}
| | | S  
| | F |  
F |   |  
  |   S  
  F      
