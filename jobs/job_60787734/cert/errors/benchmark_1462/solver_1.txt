last 1157 length 4951
CNF 1157 vars 4951 clauses
last 990 length 4088
last 2751 length 11570
last 1056 length 4394
CNF 990 vars 4088 clauses
last 1302 length 5533
CNF 2751 vars 11570 clauses
last 3493 length 14968
CNF 1056 vars 4394 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2649, clauses: 9956
last 5166 length 22734
CNF 1302 vars 5533 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2344, clauses: 8746
last 4896 length 21020
CNF 3493 vars 14968 clauses
last 5598 length 24415
last 2649 length 9956
CNF 5166 vars 22734 clauses
last 2344 length 8746
CNF 4896 vars 21020 clauses
last 4612 length 20120
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8283, clauses: 34803
CNF 2649 vars 9956 clauses
CNF 5598 vars 24415 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8948, clauses: 37549
CNF 2344 vars 8746 clauses
last 8283 length 34803
CNF 4612 vars 20120 clauses
last 8948 length 37549
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2649, clauses: 9956, status: Satisfied, time: 0.185478877s
CNF 8283 vars 34803 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2344, clauses: 8746, status: Satisfied, time: 0.255481957s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7004, clauses: 27150
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6299, clauses: 24258
last 7004 length 27150
last 6299 length 24258
last 803 length 3367
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 26267, clauses: 111024
CNF 7004 vars 27150 clauses
CNF 6299 vars 24258 clauses
last 802 length 3474
CNF 803 vars 3367 clauses
last 26267 length 111024
CNF 802 vars 3474 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7004, clauses: 27150, status: Satisfied, time: 0.256255534s
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 10 strict rules and 3 weak rules on 4 letters       weights
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, b] -> [b, b, b, b] {- Input 0 -}
  [a, a, b, b] -> [a, a, a, b] {- Input 1 -}
  [b, a, b, a] -> [a, b, a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b, a] -> [b, b, b, b] {- Mirror (Input 0) -}
  [b, b, a, a] -> [b, a, a, a] {- Mirror (Input 1) -}
  [a, b, a, b] -> [b, a, b, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [a#, b, a] {- DP (Top 1) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [b#, a] {- DP (Top 2) (Mirror (Input 2)) -}
  [a#, b, a, b] |-> [b#, a, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (b, 2/1)
  (a#, 2/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, b, a, a] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 3A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 8A 10A 10A - \
        | 8A 10A 10A - |
        | 8A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, b, a] |-> [b#, b, b, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b, a] ->= [b, b, b, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, b, a, a] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, a, b] ->= [b, a, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,2)\Deepee(10/3,4)\Weight\EDG(2/3,3)\Matrix{\Arctic}{3}(1/3,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.374834220000
  min duration 0.119962704000
  total durat. 1.242498978000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.458471932000
  min duration 0.019060600000
  total durat. 1.315330983000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.581256145000
  min duration 0.454591746000
  total durat. 1.035847891000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.541203733000
  min duration 0.536083356000
  total durat. 1.077287089000
**************************************************
F                          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                          = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F                          = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F                          = 60 , parent = Nothing , duration = 0.330060689000 , status = Fail , start
F                          = 2025-09-03 11:56:13.507497929 UTC , finish = 2025-09-03 11:56:13.837558618
F                          UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                          
| F                        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F                        = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                        = 120} , self = 59 , parent = Nothing , duration = 0.250106222000 , status
| F                        = Fail , start = 2025-09-03 11:56:13.514001874 UTC , finish = 2025-09-03
| F                        11:56:13.764108096 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
| F                        
| | F                      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F                      = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F                      = 120} , self = 56 , parent = Nothing , duration = 0.194539026000 , status
| | F                      = Fail , start = 2025-09-03 11:56:13.514010833 UTC , finish = 2025-09-03
| | F                      11:56:13.708549859 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | F                      
| | | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | F                    = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | F                    = 48} , self = 58 , parent = Nothing , duration = 0.228111990000 , status
| | | F                    = Fail , start = 2025-09-03 11:56:13.514610959 UTC , finish = 2025-09-03
| | | F                    11:56:13.742722949 UTC , thread_cap_info = ("ThreadId 85", 3, False)}
| | | F                    
| | | | F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | F                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | F                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | F                  = 24} , self = 61 , parent = Nothing , duration = 0.348008447000 , status
| | | | F                  = Fail , start = 2025-09-03 11:56:13.517378756 UTC , finish = 2025-09-03
| | | | F                  11:56:13.865387203 UTC , thread_cap_info = ("ThreadId 51", 2, False)}
| | | | F                  
| | | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | F                = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | F                = 180} , self = 64 , parent = Nothing , duration = 0.374834220000 , status
| | | | | F                = Fail , start = 2025-09-03 11:56:13.522939507 UTC , finish = 2025-09-03
| | | | | F                11:56:13.897773727 UTC , thread_cap_info = ("ThreadId 91", 0, False)}
| | | | | F                
| | | | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| | | | | | F              = 6 , num_top_rules = 6 , num_weak_rules = 12 , alphabet_size = 6 , total_length
| | | | | | F              = 180} , self = 62 , parent = Nothing , duration = 0.341416261000 , status
| | | | | | F              = Fail , start = 2025-09-03 11:56:13.536390829 UTC , finish = 2025-09-03
| | | | | | F              11:56:13.87780709 UTC , thread_cap_info = ("ThreadId 92", 0, False)}
| | | | | | F              
| | | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | F            = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | F            = 40} , self = 55 , parent = Nothing , duration = 0.119962704000 , status
| | | | | | | F            = Fail , start = 2025-09-03 11:56:13.536482883 UTC , finish = 2025-09-03
| | | | | | | F            11:56:13.656445587 UTC , thread_cap_info = ("ThreadId 95", 3, False)}
| | | | | | | F            
| | | | | | | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | E          , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | | | | | | E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | | | | | | E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | | | | | | E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | | | | | | E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | | | | | | E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | | | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | E          = 24} , self = 79 , parent = Nothing , duration = 0.877862500000 , status
| | | | | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 11:56:13.558593856 UTC ,
| | | | | | | | E          finish = 2025-09-03 11:56:14.436456356 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E          96", 2, False)}
| | | | | | | | E          
| | | | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | | | F        = 40} , self = 57 , parent = Nothing , duration = 0.160386443000 , status
| | | | | | | | | F        = Fail , start = 2025-09-03 11:56:13.558614851 UTC , finish = 2025-09-03
| | | | | | | | | F        11:56:13.719001294 UTC , thread_cap_info = ("ThreadId 97", 3, False)}
| | | | | | | | | F        
| | | | | | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | | | S      = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | | | | S      = 4 , total_length = 48} , self = 66 , parent = Nothing , duration = 0.536083356000
| | | | | | | | | | S      , status = Success , start = 2025-09-03 11:56:13.570986125 UTC , finish
| | | | | | | | | | S      = 2025-09-03 11:56:14.107069481 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | | | | | S      3, False)}
| | | | | | | | | | S      
| | | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | | | | | | | | | F    = 160} , self = 63 , parent = Nothing , duration = 0.269483842000 , status
| | | | | | | | | | | F    = Fail , start = 2025-09-03 11:56:13.612295958 UTC , finish = 2025-09-03
| | | | | | | | | | | F    11:56:13.8817798 UTC , thread_cap_info = ("ThreadId 104", 0, False)}
| | | | | | | | | | | F    
| | | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | | | | | | | | | F  = 4 , num_top_rules = 4 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| | | | | | | | | | | | F  = 160} , self = 65 , parent = Nothing , duration = 0.458471932000 , status
| | | | | | | | | | | | F  = Fail , start = 2025-09-03 11:56:13.614158969 UTC , finish = 2025-09-03
| | | | | | | | | | | | F  11:56:14.072630901 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | | | | | | | | | | F  
| | | | | | | F | | | | |  
| | | | | | | S | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S | | | | |  = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | | | S | | | | |  = 3 , total_length = 40} , self = 69 , parent = Nothing , duration = 0.541203733000
| | | | | | | S | | | | |  , status = Success , start = 2025-09-03 11:56:13.656521279 UTC , finish
| | | | | | | S | | | | |  = 2025-09-03 11:56:14.197725012 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | | S | | | | |  3, False)}
| | | | | | | S | | | | |  
| | F | | | | | | | | | |  
| |   | | | | | | F | | |  
| | E | | | | | |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | | | | |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | | | | |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | | | | |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | | | | |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | | | | |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | E | | | | | |   | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | E | | | | | |   | | |  = 3 , total_length = 40} , self = 75 , parent = Nothing , duration = 0.581256145000
| | E | | | | | |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:56:13.719035054
| | E | | | | | |   | | |  UTC , finish = 2025-09-03 11:56:14.300291199 UTC , thread_cap_info = ("ThreadId
| | E | | | | | |   | | |  109", 3, False)}
| | E | | | | | |   | | |  
| | | F | | | | |   | | |  
| | | E | | | | |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | | | |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | | | |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | | | |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | | | |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | | | |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | E | | | | |   | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | E | | | | |   | | |  = 4 , total_length = 48} , self = 68 , parent = Nothing , duration = 0.454591746000
| | | E | | | | |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:56:13.74275341
| | | E | | | | |   | | |  UTC , finish = 2025-09-03 11:56:14.197345156 UTC , thread_cap_info = ("ThreadId
| | | E | | | | |   | | |  112", 3, False)}
| | | E | | | | |   | | |  
| F | | | | | | |   | | |  
F   | | | | | | |   | | |  
    | | F | | | |   | | |  
E   | |   | | | |   | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E   | |   | | | |   | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E   | |   | | | |   | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E   | |   | | | |   | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E   | |   | | | |   | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E   | |   | | | |   | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E   | |   | | | |   | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E   | |   | | | |   | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E   | |   | | | |   | | |  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E   | |   | | | |   | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E   | |   | | | |   | | |  = 24} , self = 78 , parent = Nothing , duration = 0.558713152000 , status
E   | |   | | | |   | | |  = Except "AsyncCancelled" , start = 2025-09-03 11:56:13.877715323 UTC ,
E   | |   | | | |   | | |  finish = 2025-09-03 11:56:14.436428475 UTC , thread_cap_info = ("ThreadId
E   | |   | | | |   | | |  119", 2, False)}
E   | |   | | | |   | | |  
|   | |   | F | |   | | |  
|   | |   |   | |   | F |  
|   | |   F   | |   |   |  
|   | |       | |   |   F  
|   | |       | |   S      
|   | E       | |          
|   |         S |          
|   E           |          
| F             |          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F             |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F             |          = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F             |          = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| F             |          = 32} , self = 80 , parent = Nothing , duration = 0.141456721000 , status
| F             |          = Fail , start = 2025-09-03 11:56:14.308932934 UTC , finish = 2025-09-03
| F             |          11:56:14.450389655 UTC , thread_cap_info = ("ThreadId 132", 3, False)}
| F             |          
E |             |          
  |             E          
  F                        
