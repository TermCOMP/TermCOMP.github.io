last 743 length 2976
CNF 743 vars 2976 clauses
last 807 length 3270
last 592 length 2384
CNF 807 vars 3270 clauses
CNF 592 vars 2384 clauses
last 3177 length 14059
last 638 length 2597
CNF 3177 vars 14059 clauses
CNF 638 vars 2597 clauses
last 3006 length 12888
CNF 3006 vars 12888 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2818, clauses: 10321
last 2818 length 10321
CNF 2818 vars 10321 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2923, clauses: 10753
last 2923 length 10753
CNF 2923 vars 10753 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7478, clauses: 30958
last 7478 length 30958
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2818, clauses: 10321, status: Unsatisfied, time: 0.105286012s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2923, clauses: 10753, status: Unsatisfied, time: 0.052264236s
last 11010 length 45433
last 7352 length 31133
CNF 11010 vars 45433 clauses
CNF 7352 vars 31133 clauses
CNF 7478 vars 30958 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7478, clauses: 30958, status: Satisfied, time: 0.18062777s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4787, clauses: 19218
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4957, clauses: 19968
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7770, clauses: 32208
last 551 length 2221
last 692 length 2781
last 4957 length 19968
last 7770 length 32208
CNF 692 vars 2781 clauses
CNF 4957 vars 19968 clauses
CNF 7770 vars 32208 clauses
CNF 551 vars 2221 clauses
last 7910 length 33330
CNF 7910 vars 33330 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9500
last 2607 length 9500
CNF 2607 vars 9500 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9500, status: Unsatisfied, time: 0.044047401s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7770, clauses: 32208, status: Satisfied, time: 0.120109743s
last 11641 length 48122
CNF 11641 vars 48122 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4542, clauses: 18238
last 4542 length 18238
CNF 4542 vars 18238 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29542
last 7140 length 29542
CNF 7140 vars 29542 clauses
last 597 length 2434
CNF 597 vars 2434 clauses
last 756 length 3075
CNF 756 vars 3075 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2712, clauses: 9932
last 2712 length 9932
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4542, clauses: 18238, status: Unsatisfied, time: 0.102293733s
CNF 2712 vars 9932 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18838, clauses: 75712
last 18838 length 75712
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2712, clauses: 9932, status: Unsatisfied, time: 0.175129852s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29542, status: Satisfied, time: 0.304664267s
CNF 18838 vars 75712 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7432, clauses: 30792
last 7432 length 30792
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4247, clauses: 16670
last 4247 length 16670
CNF 4247 vars 16670 clauses
CNF 7432 vars 30792 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4712, clauses: 18988
last 4712 length 18988
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
CNF 4712 vars 18988 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 7 strict rules and 5 weak rules on 6 letters       weights
SRS with 6 strict rules and 5 weak rules on 5 letters       EDG
SRS with 6 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [] {- Input 0 -}
  [b, b] -> [c, c, c, c] {- Input 1 -}
  [c, c] -> [a, c, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [] {- Mirror (Input 0) -}
  [b, b] -> [c, c, c, c] {- Mirror (Input 1) -}
  [c, c] -> [b, c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, a] -> [a] {- Mirror (Input 0) -}
  [b, a, a] -> [b] {- Mirror (Input 0) -}
  [c, a, a] -> [c] {- Mirror (Input 0) -}
  [b, b] -> [c, c, c, c] {- Mirror (Input 1) -}
  [c, c] -> [b, c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a] -> [a] {- Input 0 -}
  [a, a, b] -> [b] {- Input 0 -}
  [a, a, c] -> [c] {- Input 0 -}
  [b, b] -> [c, c, c, c] {- Input 1 -}
  [c, c] -> [a, c, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
  [b#, b] |-> [c#] {- DP (Top 3) (Input 1) -}
  [b#, b] |-> [c#, c] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [c#, c, c] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [c#, c, c, c] {- DP (Top 0) (Input 1) -}
  [c#, c] |-> [a#, c, b] {- DP (Top 0) (Input 2) -}
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [c#, c] |-> [c#, b] {- DP (Top 1) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
  [b#, b] |-> [c#] {- DP (Top 3) (Input 1) -}
  [b#, b] |-> [c#, c] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [c#, c, c] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [c#, c, c, c] {- DP (Top 0) (Input 1) -}
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [c#, c] |-> [c#, b] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b] |-> [c#] {- DP (Top 3) (Input 1) -}
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [b#, b] |-> [c#, c] {- DP (Top 2) (Input 1) -}
  [c#, c] |-> [c#, b] {- DP (Top 1) (Input 2) -}
  [b#, b] |-> [c#, c, c] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [c#, c, c, c] {- DP (Top 0) (Input 1) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -   2A 0A \
        | -2A -  0A |
        \ -   -  0A / )
  ( b
  , Wk  / -  0A 0A \
        | 0A 1A 1A |
        \ -  -  0A / )
  ( c
  , Wk  / 0A  1A 1A  \
        | -1A -  -1A |
        \ -   -  0A  / )
  ( b#
  , Wk  / - 1A 2A \
        | - -  -  |
        \ - -  0A / )
  ( c#
  , Wk  / 1A - -  \
        | -  - -  |
        \ -  - 0A / )
   property Termination
has value Just True
for SRS
  [b#, b] |-> [c#] {- DP (Top 3) (Input 1) -}
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [b#, b] |-> [c#, c] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [c#, c, c] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [c#, c, c, c] {- DP (Top 0) (Input 1) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, b] |-> [c#] {- DP (Top 3) (Input 1) -}
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [b#, b] |-> [c#, c] {- DP (Top 2) (Input 1) -}
  [b#, b] |-> [c#, c, c] {- DP (Top 1) (Input 1) -}
  [b#, b] |-> [c#, c, c, c] {- DP (Top 0) (Input 1) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -   2A 0A \
        | -2A -  -  |
        \ -   -  0A / )
  ( b
  , Wk  / -1A 0A 0A \
        | 0A  1A 1A |
        \ -   -  0A / )
  ( c
  , Wk  / 0A  1A 1A \
        | -1A -  -  |
        \ -   -  0A / )
  ( b#
  , Wk  / -2A 0A 0A \
        | -   -  -  |
        \ -   -  0A / )
  ( c#
  , Wk  / -1A -1A 0A \
        | -   -   -  |
        \ -   -   0A / )
   property Termination
has value Just True
for SRS
  [c#, c] |-> [b#] {- DP (Top 2) (Input 2) -}
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, c] ->= [c] {- DP Nontop (Input 0) -}
  [b, b] ->= [c, c, c, c] {- DP Nontop (Input 1) -}
  [c, c] ->= [a, c, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(7/5,6)\Weight\EDG(6/5,5)\Matrix{\ArcticBZ}{3}\EDG(5/5,5)\Matrix{\ArcticBZ}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 7
  max duration 0.584267517000
  min duration 0.015124222000
  total durat. 1.036370319000
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 0.547174269000
  min duration 0.333988372000
  total durat. 1.330940613000
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Backward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.036261194000
  min duration 1.036261194000
  total durat. 1.036261194000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Backward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 13}
    , self = 91
    , parent = Nothing
    , duration = 1.036261194000
    , status = Fail
    , start = 2025-09-03 10:49:40.041067464 UTC
    , finish = 2025-09-03 10:49:41.077328658 UTC
    , thread_cap_info = ("ThreadId 43", 3, False)}
**************************************************
F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 13} , self = 63 , parent = Nothing , duration = 0.105494216000 , status
F                  = Fail , start = 2025-09-03 10:49:40.037176245 UTC , finish = 2025-09-03
F                  10:49:40.142670461 UTC , thread_cap_info = ("ThreadId 41", 3, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F                = 13} , self = 91 , parent = Nothing , duration = 1.036261194000 , status
| F                = Fail , start = 2025-09-03 10:49:40.041067464 UTC , finish = 2025-09-03
| F                10:49:41.077328658 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
| F                
| | F              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F              = 11 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 ,
| | F              alphabet_size = 5 , total_length = 48} , self = 64 , parent = Nothing ,
| | F              duration = 0.188251086000 , status = Fail , start = 2025-09-03 10:49:40.06608605
| | F              UTC , finish = 2025-09-03 10:49:40.254337136 UTC , thread_cap_info = ("ThreadId
| | F              94", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 83 , num_strict_rules
| | | F            = 61 , num_top_rules = 61 , num_weak_rules = 22 , alphabet_size = 16 ,
| | | F            total_length = 482} , self = 66 , parent = Nothing , duration = 0.244719559000
| | | F            , status = Fail , start = 2025-09-03 10:49:40.068166874 UTC , finish =
| | | F            2025-09-03 10:49:40.312886433 UTC , thread_cap_info = ("ThreadId 101",
| | | F            1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 83 , num_strict_rules
| | | | F          = 61 , num_top_rules = 61 , num_weak_rules = 22 , alphabet_size = 16 ,
| | | | F          total_length = 482} , self = 67 , parent = Nothing , duration = 0.322602384000
| | | | F          , status = Fail , start = 2025-09-03 10:49:40.078367447 UTC , finish =
| | | | F          2025-09-03 10:49:40.400969831 UTC , thread_cap_info = ("ThreadId 102",
| | | | F          1, False)}
| | | | F          
| | | | | S        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | | | S        , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
| | | | | S        = 5 , total_length = 48} , self = 68 , parent = Nothing , duration = 0.333988372000
| | | | | S        , status = Success , start = 2025-09-03 10:49:40.102056706 UTC , finish
| | | | | S        = 2025-09-03 10:49:40.436045078 UTC , thread_cap_info = ("ThreadId 105",
| | | | | S        0, False)}
| | | | | S        
| | | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F      = 11 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 ,
| | | | | | F      alphabet_size = 5 , total_length = 50} , self = 65 , parent = Nothing ,
| | | | | | F      duration = 0.136132785000 , status = Fail , start = 2025-09-03 10:49:40.118223293
| | | | | | F      UTC , finish = 2025-09-03 10:49:40.254356078 UTC , thread_cap_info = ("ThreadId
| | | | | | F      106", 0, False)}
| | | | | | F      
F | | | | | |      
S | | | | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | | | | | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | | | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | | | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
S | | | | | |      , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
S | | | | | |      = 5 , total_length = 50} , self = 78 , parent = Nothing , duration = 0.449777972000
S | | | | | |      , status = Success , start = 2025-09-03 10:49:40.152407541 UTC , finish
S | | | | | |      = 2025-09-03 10:49:40.602185513 UTC , thread_cap_info = ("ThreadId 113",
S | | | | | |      0, False)}
S | | | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 87 , num_strict_rules
| | | | | | | F    = 66 , num_top_rules = 66 , num_weak_rules = 21 , alphabet_size = 15 ,
| | | | | | | F    total_length = 513} , self = 81 , parent = Nothing , duration = 0.584267517000
| | | | | | | F    , status = Fail , start = 2025-09-03 10:49:40.158222675 UTC , finish =
| | | | | | | F    2025-09-03 10:49:40.742490192 UTC , thread_cap_info = ("ThreadId 111",
| | | | | | | F    2, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 87 , num_strict_rules
| | | | | | | | F  = 66 , num_top_rules = 66 , num_weak_rules = 21 , alphabet_size = 15 ,
| | | | | | | | F  total_length = 513} , self = 79 , parent = Nothing , duration = 0.438404766000
| | | | | | | | F  , status = Fail , start = 2025-09-03 10:49:40.178221444 UTC , finish =
| | | | | | | | F  2025-09-03 10:49:40.61662621 UTC , thread_cap_info = ("ThreadId 112", 2,
| | | | | | | | F  False)}
| | | | | | | | F  
| | F | | | | | |  
| |   | | | F | |  
| | E | | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E | | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | E | | |   | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
| | E | | |   | |  = 5 , total_length = 48} , self = 70 , parent = Nothing , duration = 0.169441057000
| | E | | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:49:40.299801925
| | E | | |   | |  UTC , finish = 2025-09-03 10:49:40.469242982 UTC , thread_cap_info = ("ThreadId
| | E | | |   | |  119", 0, False)}
| | E | | |   | |  
| | | F | |   | |  
| | | E | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | | E | |   | |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 5 , alphabet_size
| | | E | |   | |  = 5 , total_length = 50} , self = 82 , parent = Nothing , duration = 0.478601654000
| | | E | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:49:40.318994359
| | | E | |   | |  UTC , finish = 2025-09-03 10:49:40.797596013 UTC , thread_cap_info = ("ThreadId
| | | E | |   | |  120", 0, False)}
| | | E | |   | |  
| | | | F |   | |  
| | | |   S   | |  
| | E |       | |  
| | S |       | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S |       | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S |       | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S |       | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S |       | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S |       | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | S |       | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | S |       | |  = 5 , total_length = 44} , self = 92 , parent = Nothing , duration = 0.547174269000
| | S |       | |  , status = Success , start = 2025-09-03 10:49:40.555593995 UTC , finish
| | S |       | |  = 2025-09-03 10:49:41.102768264 UTC , thread_cap_info = ("ThreadId 136",
| | S |       | |  0, False)}
| | S |       | |  
S | | |       | |  
  | | |       | F  
F | | |       |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
F | | |       |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
F | | |       |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
F | | |       |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
F | | |       |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
F | | |       |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
F | | |       |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
F | | |       |    = 5 , total_length = 44} , self = 89 , parent = Nothing , duration = 0.318937579000
F | | |       |    , status = Fail , start = 2025-09-03 10:49:40.619280544 UTC , finish =
F | | |       |    2025-09-03 10:49:40.938218123 UTC , thread_cap_info = ("ThreadId 139",
F | | |       |    0, False)}
F | | |       |    
| | | |       F    
| | | E            
| | | F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F            = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | F            alphabet_size = 5 , total_length = 46} , self = 90 , parent = Nothing ,
| | | F            duration = 0.221563355000 , status = Fail , start = 2025-09-03 10:49:40.842691376
| | | F            UTC , finish = 2025-09-03 10:49:41.064254731 UTC , thread_cap_info = ("ThreadId
| | | F            151", 0, False)}
| | | F            
F | | |            
F | | |            Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
F | | |            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |            = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
F | | |            alphabet_size = 5 , total_length = 44} , self = 94 , parent = Nothing ,
F | | |            duration = 0.230411677000 , status = Fail , start = 2025-09-03 10:49:41.014848664
F | | |            UTC , finish = 2025-09-03 10:49:41.245260341 UTC , thread_cap_info = ("ThreadId
F | | |            155", 0, False)}
F | | |            
| | | F            
| F |              
|   S              
F                  
