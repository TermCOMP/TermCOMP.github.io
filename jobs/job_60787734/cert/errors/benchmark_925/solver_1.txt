last 658 length 2562
CNF 658 vars 2562 clauses
last 625 length 2459
CNF 625 vars 2459 clauses
last 705 length 3070
CNF 705 vars 3070 clauses
last 592 length 2469
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3322, clauses: 11851
last 3322 length 11851
CNF 592 vars 2469 clauses
CNF 3322 vars 11851 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9636
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8587, clauses: 35112
last 2741 length 9636
last 8587 length 35112
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3322, clauses: 11851, status: Satisfied, time: 0.114777534s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8633, clauses: 35591
CNF 2741 vars 9636 clauses
last 8633 length 35591
last 517 length 2008
last 509 length 2001
CNF 8633 vars 35591 clauses
CNF 517 vars 2008 clauses
CNF 509 vars 2001 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2741, clauses: 9636, status: Unsatisfied, time: 0.182707913s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2598, clauses: 9143
last 2598 length 9143
CNF 2598 vars 9143 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2598, clauses: 9143, status: Satisfied, time: 0.067212313s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5268, clauses: 21009
last 5268 length 21009
last 512 length 2031
CNF 512 vars 2031 clauses
CNF 5268 vars 21009 clauses
last 526 length 2093
CNF 526 vars 2093 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2504, clauses: 8793
last 2504 length 8793
CNF 2504 vars 8793 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8633, clauses: 35591, status: Unsatisfied, time: 0.460776558s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7491, clauses: 30631
last 7491 length 30631
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2504, clauses: 8793, status: Satisfied, time: 0.10797873s
CNF 7491 vars 30631 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4492, clauses: 16706
last 4492 length 16706
CNF 4492 vars 16706 clauses
**************************************************
summary
**************************************************
SRS with 8 rules on 7 letters       mirror
SRS with 8 rules on 7 letters       DP
SRS with 14 strict rules and 8 weak rules on 11 letters       weights
SRS with 9 strict rules and 8 weak rules on 10 letters       EDG
2 sub-proofs
  1 SRS with 6 strict rules and 8 weak rules on 9 letters       Usable
  SRS with 6 strict rules and 6 weak rules on 8 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 5 strict rules and 6 weak rules on 8 letters       weights
  SRS with 3 strict rules and 6 weak rules on 7 letters       EDG
  SRS with 3 strict rules and 6 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 6 weak rules on 7 letters       EDG
  SRS with 2 strict rules and 6 weak rules on 7 letters       Usable
  SRS with 2 rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 2 strict rules and 8 weak rules on 8 letters       Usable
  SRS with 2 strict rules and 6 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 6 weak rules on 7 letters       EDG
  SRS with 1 strict rules and 6 weak rules on 7 letters       Usable
  SRS with 1 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [p, 0] -> [s, s, 0, s, s, p] {- Input 0 -}
  [p, s, 0] -> [0] {- Input 1 -}
  [p, s, s] -> [s, p, s] {- Input 2 -}
  [f, s] -> [g, q, i] {- Input 3 -}
  [g] -> [f, p, p] {- Input 4 -}
  [q, i] -> [q, s] {- Input 5 -}
  [q, s] -> [s, s] {- Input 6 -}
  [i] -> [s] {- Input 7 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, p] -> [p, s, s, 0, s, s] {- Mirror (Input 0) -}
  [0, s, p] -> [0] {- Mirror (Input 1) -}
  [s, s, p] -> [s, p, s] {- Mirror (Input 2) -}
  [s, f] -> [i, q, g] {- Mirror (Input 3) -}
  [g] -> [p, p, f] {- Mirror (Input 4) -}
  [i, q] -> [s, q] {- Mirror (Input 5) -}
  [s, q] -> [s, s] {- Mirror (Input 6) -}
  [i] -> [s] {- Mirror (Input 7) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, s, p] |-> [s#, p, s] {- DP (Top 0) (Mirror (Input 2)) -}
  [s#, f] |-> [i#, q, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [g#] {- DP (Top 2) (Mirror (Input 3)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [i#] |-> [s#] {- DP (Top 0) (Mirror (Input 7)) -}
  [i#, q] |-> [s#, q] {- DP (Top 0) (Mirror (Input 5)) -}
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, p] |-> [s#] {- DP (Top 5) (Mirror (Input 0)) -}
  [0#, p] |-> [s#, s] {- DP (Top 4) (Mirror (Input 0)) -}
  [0#, p] |-> [s#, s, 0, s, s] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, p] |-> [s#, 0, s, s] {- DP (Top 2) (Mirror (Input 0)) -}
  [0#, p] |-> [0#, s, s] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (s, 0/1)
  (i, 0/1)
  (p, 0/1)
  (g, 1/1)
  (f, 1/1)
  (0, 0/1)
  (q, 0/1)
  (s#, 1/1)
  (i#, 1/1)
  (g#, 0/1)
  (0#, 2/1)
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, s, p] |-> [s#, p, s] {- DP (Top 0) (Mirror (Input 2)) -}
  [s#, f] |-> [i#, q, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [i#] |-> [s#] {- DP (Top 0) (Mirror (Input 7)) -}
  [i#, q] |-> [s#, q] {- DP (Top 0) (Mirror (Input 5)) -}
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, p] |-> [0#, s, s] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, f] |-> [i#, q, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [i#] |-> [s#] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [i#, q] |-> [s#, q] {- DP (Top 0) (Mirror (Input 5)) -}
  [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  remove un-usable
    SRS
      [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
      [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, f] |-> [i#, q, g] {- DP (Top 0) (Mirror (Input 3)) -}
  [i#] |-> [s#] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [i#, q] |-> [s#, q] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  ( s
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( i
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( g
  , Wk  / 15A 15A 15A - \
        | 12A 12A 12A - |
        | 12A 12A 12A - |
        \ -   -   -   - / )
  ( f
  , Wk  / 15A 15A 15A - \
        | 15A 15A 15A - |
        | 15A 15A 15A - |
        \ -   -   -   - / )
  ( q
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( s#
  , Wk  / 7A 7A 9A - \
        | 7A 7A 9A - |
        | 7A 7A 9A - |
        \ -  -  -  - / )
  ( i#
  , Wk  / 8A 8A 9A - \
        | 8A 8A 9A - |
        | 8A 8A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [i#] |-> [s#] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [i#, q] |-> [s#, q] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  (s, 0/1)
  (i, 0/1)
  (p, 0/1)
  (g, 0/1)
  (f, 0/1)
  (q, 0/1)
  (s#, 0/1)
  (i#, 1/1)
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s#, q] |-> [s#, s] {- DP (Top 0) (Mirror (Input 6)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  ( s
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( i
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( p
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( g
  , Wk  / 6A 9A 9A - \
        | 6A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( f
  , Wk  / 6A 9A 9A - \
        | 3A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( q
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( s#
  , Wk  / 2A 5A 5A - \
        | 2A 5A 5A - |
        | 2A 5A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  remove un-usable
    SRS
      [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
      [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
      [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
      [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
      [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
      [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
   property Termination
has value Just True
for SRS
  [s#, s, p] |-> [s#] {- DP (Top 2) (Mirror (Input 2)) -}
  [s#, q] |-> [s#] {- DP (Top 1) (Mirror (Input 6)) -}
reason
  (s, 1/1)
  (p, 1/1)
  (q, 1/1)
  (s#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, p] |-> [0#, s, s] {- DP (Top 3) (Mirror (Input 0)) -}
  [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
  [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  remove un-usable
    SRS
      [0, p] ->= [p, s, s, 0, s, s] {- DP Nontop (Mirror (Input 0)) -}
      [0, s, p] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
   property Termination
has value Just True
for SRS
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, p] |-> [0#, s, s] {- DP (Top 3) (Mirror (Input 0)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  ( s
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( i
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( p
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( g
  , Wk  / 9A 9A 9A - \
        | 9A 9A 9A - |
        | 9A 9A 9A - |
        \ -  -  -  - / )
  ( f
  , Wk  / 9A 9A 9A - \
        | 6A 6A 6A - |
        | 6A 6A 6A - |
        \ -  -  -  - / )
  ( q
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0#
  , Wk  / 10A 12A 12A - \
        | 10A 12A 12A - |
        | 10A 12A 12A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
  [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
  [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
  [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
  [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
  [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
reason
  remove un-usable
    SRS
      [s, s, p] ->= [s, p, s] {- DP Nontop (Mirror (Input 2)) -}
      [s, f] ->= [i, q, g] {- DP Nontop (Mirror (Input 3)) -}
      [g] ->= [p, p, f] {- DP Nontop (Mirror (Input 4)) -}
      [i, q] ->= [s, q] {- DP Nontop (Mirror (Input 5)) -}
      [s, q] ->= [s, s] {- DP Nontop (Mirror (Input 6)) -}
      [i] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
   property Termination
has value Just True
for SRS
  [0#, s, p] |-> [0#] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  (s, 1/1)
  (p, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(8,7)\Deepee(14/8,11)\Weight(9/8,10)\EDG[(6/8,9)\Usable(6/6,8)\Matrix{\Arctic}{3}(5/6,8)\Weight\EDG(3/6,7)\Matrix{\Arctic}{3}\EDG(2/6,7)\Usable(2,4)\Weight(0,0)\EDG[],(2/8,8)\Usable(2/6,7)\Matrix{\Arctic}{3}\EDG(1/6,7)\Usable(1,3)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F              = True})" , input_size = Size { num_rules = 8 , num_strict_rules = 8 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
F              = 37} , self = 70 , parent = Nothing , duration = 0.405321324000 , status
F              = Fail , start = 2025-09-03 13:38:44.403221367 UTC , finish = 2025-09-03
F              13:38:44.808542691 UTC , thread_cap_info = ("ThreadId 41", 3, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 8 , num_strict_rules = 8 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| F            = 37} , self = 58 , parent = Nothing , duration = 0.196514005000 , status
| F            = Fail , start = 2025-09-03 13:38:44.416002363 UTC , finish = 2025-09-03
| F            13:38:44.612516368 UTC , thread_cap_info = ("ThreadId 46", 3, False)}
| F            
| | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S          = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | S          alphabet_size = 8 , total_length = 47} , self = 59 , parent = Nothing ,
| | S          duration = 0.210076282000 , status = Success , start = 2025-09-03 13:38:44.429093511
| | S          UTC , finish = 2025-09-03 13:38:44.639169793 UTC , thread_cap_info = ("ThreadId
| | S          73", 0, False)}
| | S          
| | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | E        , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size
| | | E        = 8 , total_length = 47} , self = 61 , parent = Nothing , duration = 0.214355300000
| | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 13:38:44.434600643
| | | E        UTC , finish = 2025-09-03 13:38:44.648955943 UTC , thread_cap_info = ("ThreadId
| | | E        74", 0, False)}
| | | E        
| | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F      = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| | | | F      = 7 , total_length = 37} , self = 68 , parent = Nothing , duration = 0.275441739000
| | | | F      , status = Fail , start = 2025-09-03 13:38:44.489019381 UTC , finish =
| | | | F      2025-09-03 13:38:44.76446112 UTC , thread_cap_info = ("ThreadId 100", 0,
| | | | F      False)}
| | | | F      
| | | | | S    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | S    verbose = False}" , input_size = Size { num_rules = 374 , num_strict_rules
| | | | | S    = 188 , num_top_rules = 188 , num_weak_rules = 186 , alphabet_size = 62
| | | | | S    , total_length = 2438} , self = 69 , parent = Nothing , duration = 0.277228946000
| | | | | S    , status = Success , start = 2025-09-03 13:38:44.494704017 UTC , finish
| | | | | S    = 2025-09-03 13:38:44.771932963 UTC , thread_cap_info = ("ThreadId 85",
| | | | | S    1, False)}
| | | | | S    
| | | | | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | F  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | F  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| | | | | | F  = 7 , total_length = 37} , self = 86 , parent = Nothing , duration = 0.549474285000
| | | | | | F  , status = Fail , start = 2025-09-03 13:38:44.554629795 UTC , finish =
| | | | | | F  2025-09-03 13:38:45.10410408 UTC , thread_cap_info = ("ThreadId 102", 0,
| | | | | | F  False)}
| | | | | | F  
| F | | | | |  
|   S | | | |  
|     E | | |  
| S     | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S     | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S     | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S     | | |  = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| S     | | |  = 7 , total_length = 36} , self = 71 , parent = Nothing , duration = 0.148267767000
| S     | | |  , status = Success , start = 2025-09-03 13:38:44.692798048 UTC , finish
| S     | | |  = 2025-09-03 13:38:44.841065815 UTC , thread_cap_info = ("ThreadId 119",
| S     | | |  0, False)}
| S     | | |  
| | E   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E   | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | E   | | |  = 7 , total_length = 36} , self = 76 , parent = Nothing , duration = 0.238178577000
| | E   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:38:44.695885413
| | E   | | |  UTC , finish = 2025-09-03 13:38:44.93406399 UTC , thread_cap_info = ("ThreadId
| | E   | | |  120", 0, False)}
| | E   | | |  
| | |   F | |  
| | |     S |  
F | |       |  
  S |       |  
    E       |  
S           |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S           |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S           |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S           |  = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
S           |  = 7 , total_length = 34} , self = 87 , parent = Nothing , duration = 0.187265719000
S           |  , status = Success , start = 2025-09-03 13:38:44.967677958 UTC , finish
S           |  = 2025-09-03 13:38:45.154943677 UTC , thread_cap_info = ("ThreadId 137",
S           |  0, False)}
S           |  
| E         |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E         |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E         |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E         |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E         |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E         |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E         |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| E         |  = 7 , total_length = 34} , self = 89 , parent = Nothing , duration = 0.229995594000
| E         |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:38:45.006703076
| E         |  UTC , finish = 2025-09-03 13:38:45.23669867 UTC , thread_cap_info = ("ThreadId
| E         |  141", 0, False)}
| E         |  
| |         F  
S |            
  E            
