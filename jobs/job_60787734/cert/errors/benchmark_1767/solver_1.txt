last 752 length 3117
last 631 length 2684
CNF 752 vars 3117 clauses
CNF 631 vars 2684 clauses
last 793 length 3230
CNF 793 vars 3230 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2691, clauses: 9905
last 2691 length 9905
last 652 length 2855
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2166, clauses: 7856
CNF 2691 vars 9905 clauses
CNF 652 vars 2855 clauses
last 4722 length 25673
last 2166 length 7856
last 3887 length 18599
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7636, clauses: 31668
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2691, clauses: 9905, status: Satisfied, time: 0.096404984s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6922, clauses: 28751
last 7123 length 31582
CNF 4722 vars 25673 clauses
CNF 2166 vars 7856 clauses
CNF 3887 vars 18599 clauses
last 9586 length 41492
last 6922 length 28751
CNF 7123 vars 31582 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2166, clauses: 7856, status: Satisfied, time: 0.290471476s
last 4634 length 22327
**************************************************last 5723 length 31103

CNF 6922 vars 28751 clauses
CNF 9586 vars 41492 clauses
CNF 4634 vars 22327 clauses
summary
**************************************************
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 5 letters       EDG
SRS with 5 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 5 letters       weights
SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b] {- Input 0 -}
  [b] -> [c, c] {- Input 1 -}
  [a, a] -> [a, c, b, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, c, b, a] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 2) -}
  [b#, c, a] |-> [a#, b] {- DP (Top 2) (Input 0) -}
  [b#, c, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b#, c, a] |-> [b#, a, b] {- DP (Top 1) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 2) -}
  [b#, c, a] |-> [a#, b] {- DP (Top 2) (Input 0) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b#, c, a] |-> [b#, a, b] {- DP (Top 1) (Input 0) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a] {- DP (Top 2) (Input 2) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [b] ->= [c, c] {- DP Nontop (Input 1) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [b, c, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
      [b] ->= [c, c] {- DP Nontop (Input 1) -}
      [a, a] ->= [a, c, b, a] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Input 0) -}
reason
  (a, 1/1)
  (c, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,3)\Deepee(6/3,5)\EDG(5/3,5)\Matrix{\Arctic}{3}(2/3,5)\Weight\EDG(1/3,4)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 5723 vars 31103 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
F        = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F        = 123} , self = 68 , parent = Nothing , duration = 0.416132518000 , status
F        = Fail , start = 2025-09-03 13:03:31.721165251 UTC , finish = 2025-09-03
F        13:03:32.137297769 UTC , thread_cap_info = ("ThreadId 74", 2, False)}
F        
| F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F      = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| F      = 32} , self = 57 , parent = Nothing , duration = 0.158482513000 , status
| F      = Fail , start = 2025-09-03 13:03:31.744892776 UTC , finish = 2025-09-03
| F      13:03:31.903375289 UTC , thread_cap_info = ("ThreadId 80", 0, False)}
| F      
| | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S    = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | S    = 5 , total_length = 42} , self = 61 , parent = Nothing , duration = 0.353170666000
| | S    , status = Success , start = 2025-09-03 13:03:31.766908936 UTC , finish
| | S    = 2025-09-03 13:03:32.120079602 UTC , thread_cap_info = ("ThreadId 84",
| | S    0, False)}
| | S    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | E  = 5 , total_length = 42} , self = 63 , parent = Nothing , duration = 0.295920531000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:03:31.824265971
| | | E  UTC , finish = 2025-09-03 13:03:32.120186502 UTC , thread_cap_info = ("ThreadId
| | | E  91", 0, False)}
| | | E  
| F | |  
|   S |  
|     E  
F        
