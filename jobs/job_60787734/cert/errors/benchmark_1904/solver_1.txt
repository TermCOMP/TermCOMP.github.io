last 5508 length 27279
CNF 5508 vars 27279 clauses
last 1482 length 6778
last 1100 length 5094
CNF 1100 vars 5094 clauses
last 1282 length 6301
last 5577 length 31647
CNF 1282 vars 6301 clauses
CNF 5577 vars 31647 clauses
CNF 1482 vars 6778 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1543, clauses: 5680
last 1543 length 5680
CNF 1543 vars 5680 clauses
last 1808 length 8576
CNF 1808 vars 8576 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 8061
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1543, clauses: 5680, status: Unsatisfied, time: 0.111512328s
last 2168 length 8061
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5559, clauses: 23219
last 5559 length 23219
CNF 5559 vars 23219 clauses
CNF 2168 vars 8061 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2168, clauses: 8061, status: Satisfied, time: 0.115048296s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3336, clauses: 13766
last 3336 length 13766
CNF 3336 vars 13766 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5559, clauses: 23219, status: Unsatisfied, time: 0.18686643s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7106, clauses: 29743
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2545, clauses: 9832
last 2545 length 9832
CNF 2545 vars 9832 clauses
last 8020 length 40484
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3336, clauses: 13766, status: Unsatisfied, time: 0.314697523s
CNF 8020 vars 40484 clauses
last 7559 length 42003
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2545, clauses: 9832, status: Unsatisfied, time: 0.206483828s
last 8574 length 47490
CNF 8574 vars 47490 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 2 letters       weights
SRS with 2 rules on 2 letters       DP
SRS with 8 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
CNF 7559 vars 42003 clauses
last 6551 length 33600
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5313, clauses: 20267
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9607, clauses: 41387

last 9607 length 41387
last 5313 length 20267
propertyCNF 6551 vars 33600 clauses
 Termination
has value Just True
for SRS
  [a, a, a, b, b] -> [b, b, b] {- Input 0 -}
  [b, a, a, a, b] -> [a, a, a, b, a, a, a] {- Input 1 -}
  [a, a, a] -> [a, a] {- Input 2 -}
  [b, b] -> [a, b, a] {- Input 3 -}
reason
  (a, 1/3)
  (b, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a, b, b] -> [b, b, b] {- Input 0 -}
  [b, a, a, a, b] -> [a, a, a, b, a, a, a] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a, b, b] ->= [b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, a, b] ->= [a, a, a, b, a, a, a] {- DP Nontop (Input 1) -}
  [a#, a, a, b, b] |-> [b#, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a, b] |-> [a#] {- DP (Top 6) (Input 1) -}
  [b#, a, a, a, b] |-> [a#, a] {- DP (Top 5) (Input 1) -}
  [b#, a, a, a, b] |-> [a#, a, a] {- DP (Top 4) (Input 1) -}
  [b#, a, a, a, b] |-> [a#, a, a, b, a, a, a] {- DP (Top 0) (Input 1) -}
  [b#, a, a, a, b] |-> [a#, a, b, a, a, a] {- DP (Top 1) (Input 1) -}
  [b#, a, a, a, b] |-> [a#, b, a, a, a] {- DP (Top 2) (Input 1) -}
  [b#, a, a, a, b] |-> [b#, a, a, a] {- DP (Top 3) (Input 1) -}
reason
  (a, 1/3)
  (b, 1/1)
  (a#, 0/1)
  (b#, 2/3)
   property Termination
has value Just True
for SRS
  [a, a, a, b, b] ->= [b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, a, b] ->= [a, a, a, b, a, a, a] {- DP Nontop (Input 1) -}
  [a#, a, a, b, b] |-> [b#, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a, b] |-> [a#, a, a, b, a, a, a] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, b, b] |-> [b#, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, a, a, b] |-> [a#, a, a, b, a, a, a] {- DP (Top 0) (Input 1) -}
  [a, a, a, b, b] ->= [b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, a, b] ->= [a, a, a, b, a, a, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 9A 11A 12A - \
        | 9A 11A 12A - |
        | 9A 11A 12A - |
        \ -  -   -   - / )
  ( b#
  , Wk  / 10A 11A 13A - \
        | 10A 11A 13A - |
        | 10A 11A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a, a, b, b] ->= [b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, a, b] ->= [a, a, a, b, a, a, a] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (4,2)\Weight(2,2)\Deepee(8/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 9607 vars 41387 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.772779822000
  min duration 0.034866259000
  total durat. 1.166398312000
**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F          = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F          = 96} , self = 54 , parent = Nothing , duration = 0.173475558000 , status
F          = Fail , start = 2025-09-03 13:36:08.60899781 UTC , finish = 2025-09-03
F          13:36:08.782473368 UTC , thread_cap_info = ("ThreadId 60", 2, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F        = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F        = 96} , self = 59 , parent = Nothing , duration = 0.269219192000 , status
| F        = Fail , start = 2025-09-03 13:36:08.612102615 UTC , finish = 2025-09-03
| F        13:36:08.881321807 UTC , thread_cap_info = ("ThreadId 70", 2, False)}
| F        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | F      = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | F      = 40} , self = 60 , parent = Nothing , duration = 0.185276673000 , status
| | F      = Fail , start = 2025-09-03 13:36:08.71222303 UTC , finish = 2025-09-03
| | F      13:36:08.897499703 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F    = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | F    = 40} , self = 62 , parent = Nothing , duration = 0.176121604000 , status
| | | F    = Fail , start = 2025-09-03 13:36:08.738086919 UTC , finish = 2025-09-03
| | | F    13:36:08.914208523 UTC , thread_cap_info = ("ThreadId 93", 1, False)}
| | | F    
F | | |    
F | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F | | |    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
F | | |    = 144} , self = 71 , parent = Nothing , duration = 0.772779822000 , status
F | | |    = Fail , start = 2025-09-03 13:36:08.784310042 UTC , finish = 2025-09-03
F | | |    13:36:09.557089864 UTC , thread_cap_info = ("ThreadId 98", 1, False)}
F | | |    
| | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | F  = 3 , total_length = 28} , self = 63 , parent = Nothing , duration = 0.149989181000
| | | | F  , status = Fail , start = 2025-09-03 13:36:08.845354018 UTC , finish =
| | | | F  2025-09-03 13:36:08.995343199 UTC , thread_cap_info = ("ThreadId 103",
| | | | F  2, False)}
| | | | F  
| F | | |  
| F | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| F | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| F | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| F | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| F | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| F | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| F | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F | | |  = 3 , total_length = 28} , self = 66 , parent = Nothing , duration = 0.339848121000
| F | | |  , status = Fail , start = 2025-09-03 13:36:08.892025036 UTC , finish =
| F | | |  2025-09-03 13:36:09.231873157 UTC , thread_cap_info = ("ThreadId 108",
| F | | |  2, False)}
| F | | |  
| | F | |  
| | S | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | S | |  = 4 , total_length = 40} , self = 64 , parent = Nothing , duration = 0.255604454000
| | S | |  , status = Success , start = 2025-09-03 13:36:08.900365864 UTC , finish
| | S | |  = 2025-09-03 13:36:09.155970318 UTC , thread_cap_info = ("ThreadId 111",
| | S | |  1, False)}
| | S | |  
| | | F |  
| | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | E |  = 4 , total_length = 40} , self = 67 , parent = Nothing , duration = 0.300542914000
| | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:36:08.99172866
| | | E |  UTC , finish = 2025-09-03 13:36:09.292271574 UTC , thread_cap_info = ("ThreadId
| | | E |  114", 1, False)}
| | | E |  
| | | | F  
| | | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | F  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | F  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | F  = 3 , total_length = 28} , self = 69 , parent = Nothing , duration = 0.432329707000
| | | | F  , status = Fail , start = 2025-09-03 13:36:09.04498235 UTC , finish = 2025-09-03
| | | | F  13:36:09.477312057 UTC , thread_cap_info = ("ThreadId 117", 2, False)}
| | | | F  
| | S | |  
| F   | |  
| F   | |  Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| F   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F   | |  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F   | |  = 3 , total_length = 28} , self = 72 , parent = Nothing , duration = 0.320429683000
| F   | |  , status = Fail , start = 2025-09-03 13:36:09.272888236 UTC , finish =
| F   | |  2025-09-03 13:36:09.593317919 UTC , thread_cap_info = ("ThreadId 121",
| F   | |  2, False)}
| F   | |  
| |   E |  
| |     F  
F |        
  F        
