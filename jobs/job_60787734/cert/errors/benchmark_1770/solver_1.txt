last 760 length 3165
CNF 760 vars 3165 clauses
last 1023 length 4243
last 810 length 3310
CNF 810 vars 3310 clauses
CNF 1023 vars 4243 clauses
last 882 length 3838
CNF 882 vars 3838 clauses
last 4751 length 25287
last 3449 length 16049
last 4211 length 19895
CNF 3449 vars 16049 clauses
CNF 4751 vars 25287 clauses
last 3699 length 19645
CNF 3699 vars 19645 clauses
CNF 4211 vars 19895 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2703, clauses: 9968
last 2703 length 9968
CNF 2703 vars 9968 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7638, clauses: 31694
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3137, clauses: 11784
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2703, clauses: 9968, status: Satisfied, time: 0.149306324s
last 7638 length 31694
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8313, clauses: 34537
last 3137 length 11784
last 8313 length 34537
CNF 3137 vars 11784 clauses
CNF 8313 vars 34537 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 7 strict rules and 3 weak rules on 5 letters       EDG
SRS with 5 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 3 weak rules on 5 letters       weights
SRS with 1 strict rules and 3 weak rules on 4 letters       EDG
SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, c, b] -> [b, a, b, a] {- Input 0 -}
  [b] -> [c, a, c] {- Input 1 -}
  [a, a] -> [a, b, c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, c, a] -> [a, b, a, b] {- Mirror (Input 0) -}
  [b] -> [c, a, c] {- Mirror (Input 1) -}
  [a, a] -> [a, c, b, a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [a#, c, b, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#] |-> [a#, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, c, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, c, a] |-> [a#, b, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, c, a] |-> [b#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [a#, b, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, c, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b#, c, a] |-> [b#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 1A 3A - \
        | 1A 1A 3A - |
        | 1A 1A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 2)) -}
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
  [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, c, a] ->= [a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
      [b] ->= [c, a, c] {- DP Nontop (Mirror (Input 1)) -}
      [a, a] ->= [a, c, b, a] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [b#, c, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (c, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(7/3,5)\EDG(5/3,5)\Matrix{\Arctic}{3}(2/3,5)\Weight\EDG(1/3,4)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3137, clauses: 11784, status: Satisfied, time: 0.057474103s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8313, clauses: 34537, status: Satisfied, time: 0.057651252s


**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F            = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 17} , self
F            = 51 , parent = Nothing , duration = 0.110964645000 , status = Fail , start
F            = 2025-09-03 13:05:15.804005338 UTC , finish = 2025-09-03 13:05:15.914969983
F            UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| F          = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size = 10 , total_length
| F          = 150} , self = 64 , parent = Nothing , duration = 0.392581735000 , status
| F          = Fail , start = 2025-09-03 13:05:15.842631747 UTC , finish = 2025-09-03
| F          13:05:16.235213482 UTC , thread_cap_info = ("ThreadId 76", 1, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | F        = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size = 10 , total_length
| | F        = 150} , self = 63 , parent = Nothing , duration = 0.340158330000 , status
| | F        = Fail , start = 2025-09-03 13:05:15.851737464 UTC , finish = 2025-09-03
| | F        13:05:16.191895794 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | F      = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F      = 126} , self = 61 , parent = Nothing , duration = 0.240545180000 , status
| | | F      = Fail , start = 2025-09-03 13:05:15.892088337 UTC , finish = 2025-09-03
| | | F      13:05:16.132633517 UTC , thread_cap_info = ("ThreadId 88", 0, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | | | F    = 16 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | F    = 126} , self = 62 , parent = Nothing , duration = 0.263729271000 , status
| | | | F    = Fail , start = 2025-09-03 13:05:15.91175711 UTC , finish = 2025-09-03
| | | | F    13:05:16.175486381 UTC , thread_cap_info = ("ThreadId 90", 0, False)}
| | | | F    
F | | | |    
S | | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | |    = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
S | | | |    = 5 , total_length = 43} , self = 65 , parent = Nothing , duration = 0.444342518000
S | | | |    , status = Success , start = 2025-09-03 13:05:15.950468329 UTC , finish
S | | | |    = 2025-09-03 13:05:16.394810847 UTC , thread_cap_info = ("ThreadId 105",
S | | | |    3, False)}
S | | | |    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | E  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | | E  = 5 , total_length = 43} , self = 67 , parent = Nothing , duration = 0.428151401000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:05:15.971776861
| | | | | E  UTC , finish = 2025-09-03 13:05:16.399928262 UTC , thread_cap_info = ("ThreadId
| | | | | E  106", 3, False)}
| | | | | E  
| | | F | |  
| | |   F |  
| | F     |  
| F       |  
S         |  
          E  
