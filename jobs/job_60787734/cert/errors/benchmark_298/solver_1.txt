last 770 length 3328
CNF 770 vars 3328 clauses
last 799 length 3394
last 662 length 2813
CNF 662 vars 2813 clauses
CNF 799 vars 3394 clauses
last 2518 length 11087
last 981 length 4279
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1540, clauses: 5608
CNF 2518 vars 11087 clauses
CNF 981 vars 4279 clauses
last 2872 length 12928
last 1540 length 5608
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5559, clauses: 23239
last 4063 length 18726
last 4848 length 23583
last 3156 length 13905
last 2156 length 7902
last 5559 length 23239
CNF 2872 vars 12928 clauses
CNF 1540 vars 5608 clauses
CNF 4063 vars 18726 clauses
last 3733 length 16928
CNF 4848 vars 23583 clauses
CNF 2156 vars 7902 clauses
CNF 3156 vars 13905 clauses
CNF 5559 vars 23239 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7396, clauses: 30961
CNF 3733 vars 16928 clauses
last 7396 length 30961
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1540, clauses: 5608, status: Unsatisfied, time: 0.305108021s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2156, clauses: 7902, status: Satisfied, time: 0.166340186s
CNF 7396 vars 30961 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3334, clauses: 13864
last 3334 length 13864
CNF 3334 vars 13864 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4680, clauses: 17495
last 4680 length 17495
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5394, clauses: 20489
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5559, clauses: 23239, status: Unsatisfied, time: 0.472131088s
**************************************************CNF 4680 vars 17495 clauses
last 5394 length 20489

CNF 5394 vars 20489 clauses
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 0, 0, 0] -> [1, 0, 1, 1] {- Input 0 -}
  [0, 1, 0, 1] -> [0, 0, 1, 0] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] -> [1, 1, 0, 1] {- Mirror (Input 0) -}
  [1, 0, 1, 0] -> [0, 1, 0, 0] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 1, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [1#, 0, 0] {- DP (Top 1) (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 0] {- DP (Top 2) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, 0, 0, 0] |-> [1#, 1, 0, 1] {- DP (Top 0) (Mirror (Input 0)) -}
  [0#, 0, 0, 0] |-> [1#, 0, 1] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, 0, 0, 0] |-> [0#, 1] {- DP (Top 2) (Mirror (Input 0)) -}
reason
  (1, 1/1)
  (0, 1/1)
  (1#, 0/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 1, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#, 1, 0, 1] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [0#, 0, 0, 0] |-> [1#, 1, 0, 1] {- DP (Top 0) (Mirror (Input 0)) -}
  [0, 0, 0, 0] ->= [1, 1, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( 1
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 0
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( 1#
  , Wk  / 7A 7A 9A - \
        | 7A 7A 9A - |
        | 7A 7A 9A - |
        \ -  -  -  - / )
  ( 0#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Mirror (Input 1)) -}
  [0, 0, 0, 0] ->= [1, 1, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  (1, 0/1)
  (0, 0/1)
  (1#, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [1, 1, 0, 1] {- DP Nontop (Mirror (Input 0)) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(7/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F                  = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F                  = 80} , self = 59 , parent = Nothing , duration = 0.177925305000 , status
F                  = Fail , start = 2025-09-03 11:23:49.437226924 UTC , finish = 2025-09-03
F                  11:23:49.615152229 UTC , thread_cap_info = ("ThreadId 61", 1, False)}
F                  
| F                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F                = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| F                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F                = 16} , self = 60 , parent = Nothing , duration = 0.192983489000 , status
| F                = Fail , start = 2025-09-03 11:23:49.437747901 UTC , finish = 2025-09-03
| F                11:23:49.63073139 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F              = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F              = 80} , self = 62 , parent = Nothing , duration = 0.308076426000 , status
| | F              = Fail , start = 2025-09-03 11:23:49.468461787 UTC , finish = 2025-09-03
| | F              11:23:49.776538213 UTC , thread_cap_info = ("ThreadId 71", 1, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F            = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | F            = 32} , self = 61 , parent = Nothing , duration = 0.168627263000 , status
| | | F            = Fail , start = 2025-09-03 11:23:49.483448735 UTC , finish = 2025-09-03
| | | F            11:23:49.652075998 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| | | F            
| | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F          = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | F          = 3 , total_length = 24} , self = 67 , parent = Nothing , duration = 0.449841533000
| | | | F          , status = Fail , start = 2025-09-03 11:23:49.491736779 UTC , finish =
| | | | F          2025-09-03 11:23:49.941578312 UTC , thread_cap_info = ("ThreadId 79", 3,
| | | | F          False)}
| | | | F          
| | | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S        = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | S        = 4 , total_length = 32} , self = 68 , parent = Nothing , duration = 0.442078152000
| | | | | S        , status = Success , start = 2025-09-03 11:23:49.548498737 UTC , finish
| | | | | S        = 2025-09-03 11:23:49.990576889 UTC , thread_cap_info = ("ThreadId 86",
| | | | | S        1, False)}
| | | | | S        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | F      = 120} , self = 63 , parent = Nothing , duration = 0.265640896000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:23:49.554002177 UTC , finish = 2025-09-03
| | | | | | F      11:23:49.819643073 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | F    = 120} , self = 65 , parent = Nothing , duration = 0.260330279000 , status
| | | | | | | F    = Fail , start = 2025-09-03 11:23:49.568828378 UTC , finish = 2025-09-03
| | | | | | | F    11:23:49.829158657 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
| | | | | | | F    
F | | | | | | |    
F | | | | | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
F | | | | | | |    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
F | | | | | | |    = 100} , self = 66 , parent = Nothing , duration = 0.227289298000 , status
F | | | | | | |    = Fail , start = 2025-09-03 11:23:49.622204952 UTC , finish = 2025-09-03
F | | | | | | |    11:23:49.84949425 UTC , thread_cap_info = ("ThreadId 109", 0, False)}
F | | | | | | |    
| | | | | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | | | | | F  = 100} , self = 64 , parent = Nothing , duration = 0.200140517000 , status
| | | | | | | | F  = Fail , start = 2025-09-03 11:23:49.628468937 UTC , finish = 2025-09-03
| | | | | | | | F  11:23:49.828609454 UTC , thread_cap_info = ("ThreadId 108", 1, False)}
| | | | | | | | F  
| F | | | | | | |  
|   | F | | | | |  
| E |   | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E |   | | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| E |   | | | | |  = 4 , total_length = 32} , self = 70 , parent = Nothing , duration = 0.424497377000
| E |   | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:23:49.66913099
| E |   | | | | |  UTC , finish = 2025-09-03 11:23:50.093628367 UTC , thread_cap_info = ("ThreadId
| E |   | | | | |  111", 3, False)}
| E |   | | | | |  
| | F   | | | | |  
| |     | | F | |  
| |     | |   | F  
| |     | |   F    
F |     | |        
  |     F |        
  |       S        
  E                
