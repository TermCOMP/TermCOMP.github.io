last 4470 length 23551
last 4114 length 18859
CNF 4114 vars 18859 clauses
CNF 4470 vars 23551 clauses
last 8901 length 42389
CNF 8901 vars 42389 clauses
last 802 length 3273
last 10856 length 47402
CNF 802 vars 3273 clauses
last 720 length 3048
last 457 length 1813
CNF 720 vars 3048 clauses
CNF 10856 vars 47402 clauses
CNF 457 vars 1813 clauses
last 13113 length 55044
last 9380 length 39275
CNF 13113 vars 55044 clauses
CNF 9380 vars 39275 clauses
last 398 length 1560
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9134
CNF 398 vars 1560 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1772, clauses: 6348
last 2484 length 9134
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15320, clauses: 60327
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6547, clauses: 27005
last 1772 length 6348
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5210, clauses: 21461
CNF 2484 vars 9134 clauses
last 15320 length 60327
last 6547 length 27005
last 5210 length 21461
CNF 1772 vars 6348 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2484, clauses: 9134, status: Satisfied, time: 0.601376924s
CNF 15320 vars 60327 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18063, clauses: 74063
CNF 5210 vars 21461 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1772, clauses: 6348, status: Satisfied, time: 0.661997182s
last 18063 length 74063
last 609 length 2471
last 600 length 2449
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15320, clauses: 60327, status: Satisfied, time: 0.942490102s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 45091, clauses: 188896
**************************************************CNF 18063 vars 74063 clauses

CNF 609 vars 2471 clauses
CNF 600 vars 2449 clauses
last 45091 length 188896
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [b] -> [c, c, a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, a, b] -> [b, b, a, a] {- Input 1 -}
  [b] -> [c, c, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b] -> [a, c, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#] |-> [a#, c, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, a, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 7A 9A 10A - \
        | 7A 9A 10A - |
        | 7A 9A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, a, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [b] ->= [a, c, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.490175429000
  min duration 0.033574500000
  total durat. 1.180976032000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.402700932000
  min duration 0.081779734000
  total durat. 1.271764306000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 1.121989668000
  min duration 1.101448928000
  total durat. 2.223438596000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 5
      , alphabet_size = 4
      , total_length = 29}
    , self = 73
    , parent = Nothing
    , duration = 1.101448928000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:59:50.329413423 UTC
    , finish = 2025-09-03 10:59:51.430862351 UTC
    , thread_cap_info = ("ThreadId 120", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 5
      , alphabet_size = 5
      , total_length = 44}
    , self = 66
    , parent = Nothing
    , duration = 1.121989668000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:59:50.069592258 UTC
    , finish = 2025-09-03 10:59:51.191581926 UTC
    , thread_cap_info = ("ThreadId 116", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.241928419000
  min duration 1.041796585000
  total durat. 2.283725004000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 5
      , alphabet_size = 5
      , total_length = 44}
    , self = 64
    , parent = Nothing
    , duration = 1.041796585000
    , status = Success
    , start = 2025-09-03 10:59:50.028770761 UTC
    , finish = 2025-09-03 10:59:51.070567346 UTC
    , thread_cap_info = ("ThreadId 111", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 7
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 5
      , alphabet_size = 4
      , total_length = 29}
    , self = 71
    , parent = Nothing
    , duration = 1.241928419000
    , status = Success
    , start = 2025-09-03 10:59:50.108977328 UTC
    , finish = 2025-09-03 10:59:51.350905747 UTC
    , thread_cap_info = ("ThreadId 117", 3, False)}
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = True}"
  total number 1
  max duration 2.114150693000
  min duration 2.114150693000
  total durat. 2.114150693000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = True}"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 76
    , parent = Nothing
    , duration = 2.114150693000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 10:59:49.514914404 UTC
    , finish = 2025-09-03 10:59:51.629065097 UTC
    , thread_cap_info = ("ThreadId 22", 3, False)}
**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
E              = 76 , parent = Nothing , duration = 2.114150693000 , status = Except "AsyncCancelled"
E              , start = 2025-09-03 10:59:49.514914404 UTC , finish = 2025-09-03 10:59:51.629065097
E              UTC , thread_cap_info = ("ThreadId 22", 3, False)}
E              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 42 , parent = Nothing , duration = 0.138717264000 , status
| F            = Fail , start = 2025-09-03 10:59:49.518774194 UTC , finish = 2025-09-03
| F            10:59:49.657491458 UTC , thread_cap_info = ("ThreadId 68", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 162} , self = 41 , parent = Nothing , duration = 0.128021940000 , status
| | F          = Fail , start = 2025-09-03 10:59:49.529431796 UTC , finish = 2025-09-03
| | F          10:59:49.657453736 UTC , thread_cap_info = ("ThreadId 66", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | F        = 37 , num_top_rules = 37 , num_weak_rules = 27 , alphabet_size = 14 ,
| | | F        total_length = 375} , self = 59 , parent = Nothing , duration = 0.490175429000
| | | F        , status = Fail , start = 2025-09-03 10:59:49.541600851 UTC , finish =
| | | F        2025-09-03 10:59:50.03177628 UTC , thread_cap_info = ("ThreadId 76", 0,
| | | F        False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | F      = 37 , num_top_rules = 37 , num_weak_rules = 27 , alphabet_size = 14 ,
| | | | F      total_length = 375} , self = 52 , parent = Nothing , duration = 0.284087702000
| | | | F      , status = Fail , start = 2025-09-03 10:59:49.548766935 UTC , finish =
| | | | F      2025-09-03 10:59:49.832854637 UTC , thread_cap_info = ("ThreadId 77", 0,
| | | | F      False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 82 , num_strict_rules
| | | | | F    = 55 , num_top_rules = 55 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | F    total_length = 498} , self = 61 , parent = Nothing , duration = 0.420163418000
| | | | | F    , status = Fail , start = 2025-09-03 10:59:49.650134303 UTC , finish =
| | | | | F    2025-09-03 10:59:50.070297721 UTC , thread_cap_info = ("ThreadId 86", 0,
| | | | | F    False)}
| | | | | F    
| | F | | |    
| F   | | |    
| F   | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F   | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 82 , num_strict_rules
| F   | | |    = 55 , num_top_rules = 55 , num_weak_rules = 27 , alphabet_size = 15 ,
| F   | | |    total_length = 498} , self = 62 , parent = Nothing , duration = 0.402700932000
| F   | | |    , status = Fail , start = 2025-09-03 10:59:49.668867064 UTC , finish =
| F   | | |    2025-09-03 10:59:50.071567996 UTC , thread_cap_info = ("ThreadId 87", 1,
| F   | | |    False)}
| F   | | |    
| |   | F |    
| | F |   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |   |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F |   |    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | F |   |    = 29} , self = 60 , parent = Nothing , duration = 0.109040745000 , status
| | F |   |    = Fail , start = 2025-09-03 10:59:49.940380079 UTC , finish = 2025-09-03
| | F |   |    10:59:50.049420824 UTC , thread_cap_info = ("ThreadId 107", 3, False)}
| | F |   |    
| | | | F |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F |    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F |    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F |    = 29} , self = 63 , parent = Nothing , duration = 0.364478674000 , status
| | | | F |    = Fail , start = 2025-09-03 10:59:49.944317749 UTC , finish = 2025-09-03
| | | | F |    10:59:50.308796423 UTC , thread_cap_info = ("ThreadId 108", 3, False)}
| | | | F |    
| | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | | S  alphabet_size = 5 , total_length = 44} , self = 64 , parent = Nothing ,
| | | | | | S  duration = 1.041796585000 , status = Success , start = 2025-09-03 10:59:50.028770761
| | | | | | S  UTC , finish = 2025-09-03 10:59:51.070567346 UTC , thread_cap_info = ("ThreadId
| | | | | | S  111", 3, False)}
| | | | | | S  
| | | F | | |  
| | F   | | |  
| | E   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E   | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | E   | | |  = 5 , total_length = 44} , self = 66 , parent = Nothing , duration = 1.121989668000
| | E   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:50.069592258
| | E   | | |  UTC , finish = 2025-09-03 10:59:51.191581926 UTC , thread_cap_info = ("ThreadId
| | E   | | |  116", 3, False)}
| | E   | | |  
| | |   | F |  
| F |   |   |  
| S |   |   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |   |   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |   |   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |   |   |  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S |   |   |  = 4 , total_length = 29} , self = 71 , parent = Nothing , duration = 1.241928419000
| S |   |   |  , status = Success , start = 2025-09-03 10:59:50.108977328 UTC , finish
| S |   |   |  = 2025-09-03 10:59:51.350905747 UTC , thread_cap_info = ("ThreadId 117",
| S |   |   |  3, False)}
| S |   |   |  
| | |   F   |  
| | | E     |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E     |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E     |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E     |  = 4 , total_length = 29} , self = 73 , parent = Nothing , duration = 1.101448928000
| | | E     |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:59:50.329413423
| | | E     |  UTC , finish = 2025-09-03 10:59:51.430862351 UTC , thread_cap_info = ("ThreadId
| | | E     |  120", 3, False)}
| | | E     |  
| | | |     S  
| | E |        
| S   |        
|     E        
E              
