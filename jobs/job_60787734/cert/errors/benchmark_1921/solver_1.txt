last 551 length 2284
last 500 length 2003
CNF 500 vars 2003 clauses
CNF 551 vars 2284 clauses
last 364 length 1537
last 530 length 2484
CNF 364 vars 1537 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2647, clauses: 9412
CNF 530 vars 2484 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1605, clauses: 5669
last 2647 length 9412
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6926, clauses: 28282
last 1605 length 5669
CNF 2647 vars 9412 clauses
last 6926 length 28282
CNF 6926 vars 28282 clauses
CNF 1605 vars 5669 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2647, clauses: 9412, status: Satisfied, time: 0.120161151s
last 5991 length 23994
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6926, clauses: 28282, status: Satisfied, time: 0.086888658s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4599, clauses: 18719
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1605, clauses: 5669, status: Satisfied, time: 0.097907416s
last 9231 length 42778
last 12908 length 61918
last 7246 length 29407
last 445 length 1786
last 9894 length 45404
last 409 length 1594
CNF 5991 vars 23994 clauses
**************************************************CNF 9231 vars 42778 clauses
CNF 7246 vars 29407 clauses

CNF 445 vars 1786 clauses
CNF 409 vars 1594 clauses
CNF 9894 vars 45404 clauses
last 13228 length 63332
summary
**************************************************
SRS with 5 rules on 5 letters       mirror
SRS with 5 rules on 5 letters       DP
SRS with 10 strict rules and 5 weak rules on 9 letters       weights
SRS with 2 strict rules and 5 weak rules on 7 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 5 weak rules on 6 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 5 weak rules on 6 letters       Usable
  SRS with 1 strict rules and 4 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 4 weak rules on 4 letters       weights
  SRS with 0 strict rules and 3 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b] -> [d] {- Input 0 -}
  [b, a] -> [a, b] {- Input 1 -}
  [d, c] -> [f, a, b, b, c] {- Input 2 -}
  [d, f] -> [f, a, b] {- Input 3 -}
  [a, f] -> [a] {- Input 4 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a] -> [d] {- Mirror (Input 0) -}
  [a, b] -> [b, a] {- Mirror (Input 1) -}
  [c, d] -> [c, b, b, a, f] {- Mirror (Input 2) -}
  [f, d] -> [b, a, f] {- Mirror (Input 3) -}
  [f, a] -> [a] {- Mirror (Input 4) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, b] |-> [b#, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [f#, d] |-> [a#, f] {- DP (Top 1) (Mirror (Input 3)) -}
  [f#, d] |-> [f#] {- DP (Top 2) (Mirror (Input 3)) -}
  [f#, d] |-> [b#, a, f] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, d] |-> [a#, f] {- DP (Top 3) (Mirror (Input 2)) -}
  [c#, d] |-> [f#] {- DP (Top 4) (Mirror (Input 2)) -}
  [c#, d] |-> [b#, a, f] {- DP (Top 2) (Mirror (Input 2)) -}
  [c#, d] |-> [b#, b, a, f] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, d] |-> [c#, b, b, a, f] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (d, 1/1)
  (a, 1/1)
  (f, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (f#, 2/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, d] |-> [c#, b, b, a, f] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
reason
  remove un-usable
    SRS
      [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
      [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
      [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
      [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
      [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, d] |-> [c#, b, b, a, f] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
reason
  remove un-usable
    SRS
      [c, d] ->= [c, b, b, a, f] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [c#, d] |-> [c#, b, b, a, f] {- DP (Top 0) (Mirror (Input 2)) -}
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( d
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( f
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 10A 11A 11A - \
        | 10A 11A 11A - |
        | 10A 11A 11A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
  [f, a] ->= [a] {- DP Nontop (Mirror (Input 4)) -}
reason
  (d, 0/1)
  (a, 0/1)
  (f, 1/1)
  (b, 0/1)
   property Termination
has value Just True
for SRS
  [b, a] ->= [d] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 1)) -}
  [f, d] ->= [b, a, f] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(5,5)\Deepee(10/5,9)\Weight(2/5,7)\EDG[(1/5,6)\Usable(1,2)\Weight(0,0)\EDG[],(1/5,6)\Usable(1/4,5)\Matrix{\Arctic}{3}(0/4,4)\Weight(0/3,4)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
F        = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 5 , total_length
F        = 22} , self = 56 , parent = Nothing , duration = 0.110350905000 , status
F        = Fail , start = 2025-09-03 13:35:27.954209079 UTC , finish = 2025-09-03
F        13:35:28.064559984 UTC , thread_cap_info = ("ThreadId 91", 0, False)}
F        
| S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S      = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| S      = 7 , total_length = 38} , self = 61 , parent = Nothing , duration = 0.468680130000
| S      , status = Success , start = 2025-09-03 13:35:27.95757571 UTC , finish
| S      = 2025-09-03 13:35:28.42625584 UTC , thread_cap_info = ("ThreadId 92",
| S      0, False)}
| S      
| | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | E    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | E    = 7 , total_length = 38} , self = 63 , parent = Nothing , duration = 0.489717064000
| | E    , status = Except "AsyncCancelled" , start = 2025-09-03 13:35:27.983543057
| | E    UTC , finish = 2025-09-03 13:35:28.473260121 UTC , thread_cap_info = ("ThreadId
| | E    95", 0, False)}
| | E    
| | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S  = 5 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
| | | S  = 5 , total_length = 22} , self = 68 , parent = Nothing , duration = 0.497534398000
| | | S  , status = Success , start = 2025-09-03 13:35:27.986459005 UTC , finish
| | | S  = 2025-09-03 13:35:28.483993403 UTC , thread_cap_info = ("ThreadId 96",
| | | S  0, False)}
| | | S  
F | | |  
E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
E | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size
E | | |  = 5 , total_length = 22} , self = 70 , parent = Nothing , duration = 0.379631185000
E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:35:28.104624202
E | | |  UTC , finish = 2025-09-03 13:35:28.484255387 UTC , thread_cap_info = ("ThreadId
E | | |  106", 0, False)}
E | | |  
| S | |  
|   E |  
|     S  
E        
