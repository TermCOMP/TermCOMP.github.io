last 4197 length 21330
CNF 4197 vars 21330 clauses
last 3785 length 17096
CNF 3785 vars 17096 clauses
last 7573 length 31311
CNF 7573 vars 31311 clauses
last 488 length 1878
CNF 488 vars 1878 clauses
last 398 length 1549
CNF 398 vars 1549 clauses
last 561 length 2194
last 5926 length 23720
CNF 561 vars 2194 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8212
last 455 length 1787
CNF 5926 vars 23720 clauses
last 9237 length 42132
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6291, clauses: 25859
last 12787 length 54199
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9030
last 2314 length 8212
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18325, clauses: 69544
CNF 455 vars 1787 clauses
last 6291 length 25859
CNF 9237 vars 42132 clauses
[Info] pool sizes (success) 45882 seen 24004 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 12787 vars 54199 clauses
last 2513 length 9030
last 18325 length 69544
CNF 2314 vars 8212 clauses
CNF 6291 vars 25859 clauses
**************************************************
CNF 2513 vars 9030 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6629, clauses: 27285
CNF 18325 vars 69544 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2314, clauses: 8212, status: Unsatisfied, time: 0.220099861s
last 6629 length 27285
summaryMatrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2513, clauses: 9030, status: Unsatisfied, time: 0.326397931s

**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [a, a, b, b, c, a, a, b]
to
  [b, b, a, a, b, b, c, a, a, b]
via 21 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b, a, b, c] {- Input 1 -}
  [c] -> [] {- Input 2 -}
  [c, b] -> [a, c] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [a, a, b, b, c, a, a, b], via = [(Step   { rule = 1, position = 5}, [a, a, b, b, c, b, a, b, c, b]), (Step   { rule = 2, position = 8}, [a, a, b, b, c, b, a, b, b]), (Step   { rule = 3, position = 4}, [a, a, b, b, a, c, a, b, b]), (Step   { rule = 2, position = 5}, [a, a, b, b, a, a, b, b]), (Step   { rule = 1, position = 4}, [a, a, b, b, b, a, b, c, b, b]), (Step   { rule = 0, position = 5}, [a, a, b, b, b, b, c, b, b]), (Step   { rule = 3, position = 6}, [a, a, b, b, b, b, a, c, b]), (Step   { rule = 3, position = 7}, [a, a, b, b, b, b, a, a, c]), (Step   { rule = 2, position = 8}, [a, a, b, b, b, b, a, a]), (Step   { rule = 1, position = 0}, [b, a, b, c, b, b, b, b, a, a]), (Step   { rule = 0, position = 1}, [b, b, c, b, b, b, b, a, a]), (Step   { rule = 3, position = 2}, [b, b, a, c, b, b, b, a, a]), (Step   { rule = 3, position = 3}, [b, b, a, a, c, b, b, a, a]), (Step   { rule = 1, position = 7}, [b, b, a, a, c, b, b, b, a, b, c]), (Step   { rule = 2, position = 10}, [b, b, a, a, c, b, b, b, a, b]), (Step CNF 6629 vars 27285 clauses
  { rule = 3, position = 4}, [b, b, a, a, a, c, b, b, a, b]), (Step   { rule = 3, position = 5}, [b, b, a, a, a, a, c, b, a, b]), (Step   { rule = 1, position = 4}, [b, b, a, a, b, a, b, c, c, b, a, b]), (Step   { rule = 0, position = 5}, [b, b, a, a, b, b, c, c, b, a, b]), (Step   { rule = 3, position = 7}, [b, b, a, a, b, b, c, a, c, a, b]), (Step   { rule = 2, position = 8}, [b, b, a, a, b, b, c, a, a, b])], to = [b, b, a, a, b, b, c, a, a, b]}

**************************************************
skeleton: (4,3)\Loop{21}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S        , closure = Backward\n , start_strict_only = True\n , max_closure_length
S        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S        = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S        = 12} , self = 63 , parent = Nothing , duration = 0.575403828000 , status
S        = Success , start = 2025-09-03 11:54:19.686411999 UTC , finish = 2025-09-03
S        11:54:20.261815827 UTC , thread_cap_info = ("ThreadId 37", 1, False)}
S        
| F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 83 , num_strict_rules
| F      = 47 , num_top_rules = 47 , num_weak_rules = 36 , alphabet_size = 15 ,
| F      total_length = 396} , self = 56 , parent = Nothing , duration = 0.168217035000
| F      , status = Fail , start = 2025-09-03 11:54:19.70948513 UTC , finish = 2025-09-03
| F      11:54:19.877702165 UTC , thread_cap_info = ("ThreadId 76", 3, False)}
| F      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F    = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F    = 180} , self = 52 , parent = Nothing , duration = 0.133246757000 , status
| | F    = Fail , start = 2025-09-03 11:54:19.7200837 UTC , finish = 2025-09-03
| | F    11:54:19.853330457 UTC , thread_cap_info = ("ThreadId 70", 2, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 83 , num_strict_rules
| | | F  = 47 , num_top_rules = 47 , num_weak_rules = 36 , alphabet_size = 15 ,
| | | F  total_length = 396} , self = 61 , parent = Nothing , duration = 0.490723055000
| | | F  , status = Fail , start = 2025-09-03 11:54:19.720090239 UTC , finish =
| | | F  2025-09-03 11:54:20.210813294 UTC , thread_cap_info = ("ThreadId 77", 3,
| | | F  False)}
| | | F  
| | F |  
| F   |  
| F   |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F   |  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| F   |  = 43} , self = 60 , parent = Nothing , duration = 0.191705360000 , status
| F   |  = Fail , start = 2025-09-03 11:54:19.911153233 UTC , finish = 2025-09-03
| F   |  11:54:20.102858593 UTC , thread_cap_info = ("ThreadId 107", 1, False)}
| F   |  
| | F |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F |  = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F |  = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | F |  = 43} , self = 62 , parent = Nothing , duration = 0.340302466000 , status
| | F |  = Fail , start = 2025-09-03 11:54:19.919145593 UTC , finish = 2025-09-03
| | F |  11:54:20.259448059 UTC , thread_cap_info = ("ThreadId 108", 1, False)}
| | F |  
| F | |  
|   | F  
|   F    
S        
