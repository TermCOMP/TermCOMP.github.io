last 1894 length 8314
last 909 length 3784
CNF 1894 vars 8314 clauses
last 2686 length 12118
last 1030 length 4239
CNF 909 vars 3784 clauses
last 828 length 3585
last 1146 length 4833
CNF 1146 vars 4833 clauses
CNF 828 vars 3585 clauses
CNF 2686 vars 12118 clauses
CNF 1030 vars 4239 clauses
last 3188 length 14489
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2455, clauses: 9121
last 2455 length 9121
CNF 3188 vars 14489 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2008, clauses: 7321
last 2868 length 12755
CNF 2455 vars 9121 clauses
last 4266 length 20153
last 3270 length 15724
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7939, clauses: 33391
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8871, clauses: 37363
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3927, clauses: 15029
last 2008 length 7321
CNF 2868 vars 12755 clauses
CNF 4266 vars 20153 clauses
last 7939 length 33391
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2455, clauses: 9121, status: Satisfied, time: 0.243869561s
last 8871 length 37363
CNF 3270 vars 15724 clauses
last 3927 length 15029
CNF 2008 vars 7321 clauses
CNF 7939 vars 33391 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3653, clauses: 13521
**************************************************CNF 3927 vars 15029 clauses

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2008, clauses: 7321, status: Unsatisfied, time: 0.121857754s
last 3653 length 13521
summary
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 4 strict rules and 3 weak rules on 3 letters       weights
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, a] -> [a, b, a, b] {- Input 0 -}
  [a, b, a, a] -> [a, a, a, a] {- Input 1 -}
  [a, a, a, b] -> [b, b, b, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [a, a, a, a] {- DP Nontop (Input 1) -}
  [a, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 2) -}
  [a#, a, b, a] |-> [a#, b] {- DP (Top 2) (Input 0) -}
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a#, b, a, a] |-> [a#, a, a] {- DP (Top 1) (Input 1) -}
  [a#, b, a, a] |-> [a#, a, a, a] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [a, a, a, a] {- DP Nontop (Input 1) -}
  [a, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 2) -}
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a#, b, a, a] |-> [a#, a, a, a] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a#, b, a, a] |-> [a#, a, a, a] {- DP (Top 0) (Input 1) -}
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [a, a, a, a] {- DP Nontop (Input 1) -}
  [a, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 9A 10A 10A - \
        | 9A 10A 10A - |
        | 9A 10A 10A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a, b, a] |-> [a#, b, a, b] {- DP (Top 0) (Input 0) -}
  [a, a, b, a] ->= [a, b, a, b] {- DP Nontop (Input 0) -}
  [a, b, a, a] ->= [a, a, a, a] {- DP Nontop (Input 1) -}
  [a, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee(4/3,3)\Weight\EDG(2/3,3)\Matrix{\Arctic}{3}(1/3,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 3653 vars 13521 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.398652676000
  min duration 0.074381762000
  total durat. 1.106643107000
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F              = 69 , parent = Nothing , duration = 0.260333553000 , status = Fail , start
F              = 2025-09-03 12:02:36.571039719 UTC , finish = 2025-09-03 12:02:36.831373272
F              UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F            = 24} , self = 62 , parent = Nothing , duration = 0.175128517000 , status
| F            = Fail , start = 2025-09-03 12:02:36.57104215 UTC , finish = 2025-09-03
| F            12:02:36.746170667 UTC , thread_cap_info = ("ThreadId 43", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F          = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | F          = 60} , self = 60 , parent = Nothing , duration = 0.128874821000 , status
| | F          = Fail , start = 2025-09-03 12:02:36.577928085 UTC , finish = 2025-09-03
| | F          12:02:36.706802906 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | F        = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F        = 60} , self = 68 , parent = Nothing , duration = 0.228953351000 , status
| | | F        = Fail , start = 2025-09-03 12:02:36.577929286 UTC , finish = 2025-09-03
| | | F        12:02:36.806882637 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | F      = 40} , self = 63 , parent = Nothing , duration = 0.102904848000 , status
| | | | F      = Fail , start = 2025-09-03 12:02:36.646251254 UTC , finish = 2025-09-03
| | | | F      12:02:36.749156102 UTC , thread_cap_info = ("ThreadId 95", 2, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | F    = 40} , self = 67 , parent = Nothing , duration = 0.124428436000 , status
| | | | | F    = Fail , start = 2025-09-03 12:02:36.671000432 UTC , finish = 2025-09-03
| | | | | F    12:02:36.795428868 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | F  = 90} , self = 70 , parent = Nothing , duration = 0.290966820000 , status
| | | | | | F  = Fail , start = 2025-09-03 12:02:36.688657292 UTC , finish = 2025-09-03
| | | | | | F  12:02:36.979624112 UTC , thread_cap_info = ("ThreadId 112", 0, False)}
| | | | | | F  
| | F | | | |  
| | F | | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | F | | | |  = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | F | | | |  = 90} , self = 72 , parent = Nothing , duration = 0.398652676000 , status
| | F | | | |  = Fail , start = 2025-09-03 12:02:36.706815812 UTC , finish = 2025-09-03
| | F | | | |  12:02:37.105468488 UTC , thread_cap_info = ("ThreadId 114", 0, False)}
| | F | | | |  
| F | | | | |  
|   | | F | |  
| S | |   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | |   | |  = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| S | |   | |  = 3 , total_length = 40} , self = 73 , parent = Nothing , duration = 0.375995293000
| S | |   | |  , status = Success , start = 2025-09-03 12:02:36.755959119 UTC , finish
| S | |   | |  = 2025-09-03 12:02:37.131954412 UTC , thread_cap_info = ("ThreadId 120",
| S | |   | |  2, False)}
| S | |   | |  
| | | | E | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | E | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E | |  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | E | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | E | |  = 24} , self = 79 , parent = Nothing , duration = 0.399990530000 , status
| | | | E | |  = Except "AsyncCancelled" , start = 2025-09-03 12:02:36.764851195 UTC ,
| | | | E | |  finish = 2025-09-03 12:02:37.164841725 UTC , thread_cap_info = ("ThreadId
| | | | E | |  121", 3, False)}
| | | | E | |  
| | | | | F |  
| | | | | F |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | F |  = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | F |  = 80} , self = 71 , parent = Nothing , duration = 0.290161285000 , status
| | | | | F |  = Fail , start = 2025-09-03 12:02:36.804858697 UTC , finish = 2025-09-03
| | | | | F |  12:02:37.095019982 UTC , thread_cap_info = ("ThreadId 125", 0, False)}
| | | | | F |  
| | | F | | |  
F | |   | | |  
E | |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
E | |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
E | |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
E | |   | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
E | |   | | |  = 3 , total_length = 40} , self = 75 , parent = Nothing , duration = 0.287345206000
E | |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 12:02:36.844855242
E | |   | | |  UTC , finish = 2025-09-03 12:02:37.132200448 UTC , thread_cap_info = ("ThreadId
E | |   | | |  129", 2, False)}
E | |   | | |  
| | | F | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F | | |  = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | F | | |  = 80} , self = 78 , parent = Nothing , duration = 0.280226882000 , status
| | | F | | |  = Fail , start = 2025-09-03 12:02:36.860302118 UTC , finish = 2025-09-03
| | | F | | |  12:02:37.140529 UTC , thread_cap_info = ("ThreadId 127", 0, False)}
| | | F | | |  
| | | | | | F  
| | | | | F    
| | F | |      
| S   | |      
E     | |      
      F |      
        E      
