last 5995 length 53202
CNF 5995 vars 53202 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5597, clauses: 20214
last 5597 length 20214
CNF 5597 vars 20214 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5597, clauses: 20214, status: Unsatisfied, time: 0.117695972s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23251, clauses: 97925
last 23251 length 97925
CNF 23251 vars 97925 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23251, clauses: 97925, status: Unsatisfied, time: 0.348368776s
last 21431 length 236318
CNF 21431 vars 236318 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14080, clauses: 59282
last 14080 length 59282
CNF 14080 vars 59282 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8153, clauses: 32697
last 8153 length 32697
CNF 8153 vars 32697 clauses
last 30807 length 328702
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8153, clauses: 32697, status: Satisfied, time: 0.399546594s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9369, clauses: 35156
last 9369 length 35156
CNF 30807 vars 328702 clauses
CNF 9369 vars 35156 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14080, clauses: 59282, status: Unsatisfied, time: 0.790401673s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9369, clauses: 35156, status: Unsatisfied, time: 0.312498929s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17598, clauses: 65648
last 17598 length 65648
CNF 17598 vars 65648 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 41869, clauses: 185753
last 41869 length 185753
CNF 41869 vars 185753 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17598, clauses: 65648, status: Unsatisfied, time: 2.130545425s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7285, clauses: 28378
last 7285 length 28378
CNF 7285 vars 28378 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7285, clauses: 28378, status: Unsatisfied, time: 0.346983179s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 26757, clauses: 112803
last 26757 length 112803
CNF 26757 vars 112803 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 26757, clauses: 112803, status: Satisfied, time: 0.381378795s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16433, clauses: 69509
last 16433 length 69509
last 10379 length 107720
CNF 10379 vars 107720 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6418, clauses: 24037
last 6418 length 24037
CNF 6418 vars 24037 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6418, clauses: 24037, status: Unsatisfied, time: 0.328800191s
Matrix {monotone = Weak, domain = Arctic, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 52541, clauses: 247723
last 52541 length 247723
CNF 52541 vars 247723 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24864, clauses: 104764
last 24864 length 104764
CNF 24864 vars 104764 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15186, clauses: 64133
last 15186 length 64133
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24864, clauses: 104764, status: Satisfied, time: 0.781001151s
CNF 15186 vars 64133 clauses
last 9577 length 113330
CNF 9577 vars 113330 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5984, clauses: 22083
last 5984 length 22083
CNF 5984 vars 22083 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5984, clauses: 22083, status: Unsatisfied, time: 0.422938138s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14526, clauses: 61283
last 14526 length 61283
CNF 14526 vars 61283 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23896, clauses: 100658
last 23896 length 100658
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14526, clauses: 61283, status: Satisfied, time: 0.576589839s
CNF 23896 vars 100658 clauses
last 6589 length 51626
CNF 6589 vars 51626 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5768, clauses: 20919
last 5768 length 20919
CNF 5768 vars 20919 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5768, clauses: 20919, status: Unsatisfied, time: 0.311046807s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 2, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 5, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 46765, clauses: 244557
last 46765 length 244557
CNF 46765 vars 244557 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23847, clauses: 100469
last 23847 length 100469
CNF 23847 vars 100469 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23847, clauses: 100469, status: Satisfied, time: 0.493008886s
last 5013 length 37919
CNF 5013 vars 37919 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5952, clauses: 21323
last 5952 length 21323
CNF 5952 vars 21323 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5952, clauses: 21323, status: Unsatisfied, time: 0.341637829s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23357, clauses: 98287
last 23357 length 98287
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 6, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 25123, clauses: 96699
last 25123 length 96699
CNF 23357 vars 98287 clauses
CNF 25123 vars 96699 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23357, clauses: 98287, status: Satisfied, time: 0.538674115s
**************************************************
summary
**************************************************
SRS with 9 rules on 6 letters       weights
SRS with 8 rules on 6 letters       context
SRS with 13 rules on 6 letters       mirror
SRS with 13 rules on 6 letters       DP
SRS with 41 strict rules and 13 weak rules on 8 letters       weights
SRS with 28 strict rules and 13 weak rules on 8 letters       EDG
2 sub-proofs
  1 SRS with 11 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 7 strict rules and 13 weak rules on 7 letters       EDG
  SRS with 7 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 4 strict rules and 13 weak rules on 7 letters       EDG
  SRS with 4 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 13 weak rules on 7 letters       EDG
  SRS with 2 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 13 weak rules on 7 letters       EDG
  SRS with 1 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 13 weak rules on 6 letters       EDG

  2 SRS with 3 strict rules and 13 weak rules on 7 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 2 strict rules and 13 weak rules on 7 letters       EDG
  SRS with 2 strict rules and 13 weak rules on 7 letters       Usable
  SRS with 2 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [tower, 0] -> [s, 0, p, s, p, s] {- Input 0 -}
  [tower, s] -> [p, s, p, s, twoto, p, s, p, s, tower, p, s, p, s] {- Input 1 -}
  [twoto, 0] -> [s, 0] {- Input 2 -}
  [twoto, s] -> [ p , p , s , p , p , p , s , s , p , s , s , p , s , s , p , s , twice , p , s , p , s , p , p , p , s , s , s , twoto , p , s , p , s ] {- Input 3 -}
  [twice, 0] -> [0] {- Input 4 -}
  [twice, s] -> [p, p, p, s, s, s, s, s, twice, p, p, p, s, s, s] {- Input 5 -}
  [p, p, s] -> [p] {- Input 6 -}
  [p, s] -> [] {- Input 7 -}
  [p, 0] -> [0, s, s, s, s, s, s, s, s] {- Input 8 -}
reason
  (s, 0/1)
  (p, 0/1)
  (tower, 1/1)
  (0, 0/1)
  (twice, 0/1)
  (twoto, 0/1)
   property Termination
has value Just True
for SRS
  [tower, s] -> [p, s, p, s, twoto, p, s, p, s, tower, p, s, p, s] {- Input 1 -}
  [twoto, 0] -> [s, 0] {- Input 2 -}
  [twoto, s] -> [ p , p , s , p , p , p , s , s , p , s , s , p , s , s , p , s , twice , p , s , p , s , p , p , p , s , s , s , twoto , p , s , p , s ] {- Input 3 -}
  [twice, 0] -> [0] {- Input 4 -}
  [twice, s] -> [p, p, p, s, s, s, s, s, twice, p, p, p, s, s, s] {- Input 5 -}
  [p, p, s] -> [p] {- Input 6 -}
  [p, s] -> [] {- Input 7 -}
  [p, 0] -> [0, s, s, s, s, s, s, s, s] {- Input 8 -}
reason
  context
   property Termination
has value Just True
for SRS
  [tower, s] -> [p, s, p, s, twoto, p, s, p, s, tower, p, s, p, s] {- Input 1 -}
  [twoto, 0] -> [s, 0] {- Input 2 -}
  [twoto, s] -> [ p , p , s , p , p , p , s , s , p , s , s , p , s , s , p , s , twice , p , s , p , s , p , p , p , s , s , s , twoto , p , s , p , s ] {- Input 3 -}
  [twice, 0] -> [0] {- Input 4 -}
  [twice, s] -> [p, p, p, s, s, s, s, s, twice, p, p, p, s, s, s] {- Input 5 -}
  [p, p, s] -> [p] {- Input 6 -}
  [s, p, s] -> [s] {- Input 7 -}
  [p, p, s] -> [p] {- Input 7 -}
  [tower, p, s] -> [tower] {- Input 7 -}
  [0, p, s] -> [0] {- Input 7 -}
  [twice, p, s] -> [twice] {- Input 7 -}
  [twoto, p, s] -> [twoto] {- Input 7 -}
  [p, 0] -> [0, s, s, s, s, s, s, s, s] {- Input 8 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [s, tower] -> [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- Mirror (Input 1) -}
  [0, twoto] -> [0, s] {- Mirror (Input 2) -}
  [s, twoto] -> [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- Mirror (Input 3) -}
  [0, twice] -> [0] {- Mirror (Input 4) -}
  [s, twice] -> [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- Mirror (Input 5) -}
  [s, p, p] -> [p] {- Mirror (Input 6) -}
  [s, p, s] -> [s] {- Mirror (Input 7) -}
  [s, p, p] -> [p] {- Mirror (Input 7) -}
  [s, p, tower] -> [tower] {- Mirror (Input 7) -}
  [s, p, 0] -> [0] {- Mirror (Input 7) -}
  [s, p, twice] -> [twice] {- Mirror (Input 7) -}
  [s, p, twoto] -> [twoto] {- Mirror (Input 7) -}
  [0, p] -> [s, s, s, s, s, s, s, s, 0] {- Mirror (Input 8) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
  [s#, tower] |-> [s#, p] {- DP (Top 12) (Mirror (Input 1)) -}
  [s#, tower] |-> [s#, p, s, p] {- DP (Top 10) (Mirror (Input 1)) -}
  [s#, tower] |-> [ s# , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, tower] |-> [ s# , p , s , p , twoto , s , p , s , p ] {- DP (Top 5) (Mirror (Input 1)) -}
  [s#, tower] |-> [ s# , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP (Top 2) (Mirror (Input 1)) -}
  [s#, tower] |-> [s#, p, twoto, s, p, s, p] {- DP (Top 7) (Mirror (Input 1)) -}
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, p, p, p] {- DP (Top 10) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 1) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, p, p, p] {- DP (Top 11) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 2) (Mirror (Input 5)) -}
  [s#, twoto] |-> [ s# , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 18) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 21) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 6) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, s, p, p, p, s, p, p] {- DP (Top 24) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 16) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 19) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , p , p , s , p , p ] {- DP (Top 22) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 11) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, p, p] {- DP (Top 29) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 7) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, p, p, p, s, p, p] {- DP (Top 25) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 13) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 2) (Mirror (Input 3)) -}
  [0#, p] |-> [s#, s, s, s, s, s, s, s, 0] {- DP (Top 0) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, s, s, s, s, s, 0] {- DP (Top 1) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, s, s, s, s, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, s, s, s, 0] {- DP (Top 3) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, s, s, 0] {- DP (Top 4) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, s, 0] {- DP (Top 5) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, s, 0] {- DP (Top 6) (Mirror (Input 8)) -}
  [0#, p] |-> [s#, 0] {- DP (Top 7) (Mirror (Input 8)) -}
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
  [0#, twoto] |-> [s#] {- DP (Top 1) (Mirror (Input 2)) -}
  [0#, twoto] |-> [0#, s] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (s, 0/1)
  (p, 0/1)
  (tower, 1/1)
  (0, 0/1)
  (twice, 0/1)
  (twoto, 0/1)
  (s#, 0/1)
  (0#, 1/1)
   property Termination
has value Just True
for SRS
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
  [s#, tower] |-> [ s# , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, tower] |-> [ s# , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP (Top 2) (Mirror (Input 1)) -}
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, p, p, p] {- DP (Top 10) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 1) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, p, p, p] {- DP (Top 11) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 2) (Mirror (Input 5)) -}
  [s#, twoto] |-> [ s# , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 18) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 21) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 6) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, s, p, p, p, s, p, p] {- DP (Top 24) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 16) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 19) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , s , p , p , p , s , p , p ] {- DP (Top 22) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 11) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, p, p] {- DP (Top 29) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 7) (Mirror (Input 3)) -}
  [s#, twoto] |-> [s#, p, p, p, s, p, p] {- DP (Top 25) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 13) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 2) (Mirror (Input 3)) -}
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
  [0#, twoto] |-> [0#, s] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, twoto] |-> [s#, s, p, p, p, s, p, p] {- DP (Top 24) (Mirror (Input 3)) -}
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, p, p, p] {- DP (Top 10) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 1) (Mirror (Input 5)) -}
  [s#, twoto] |-> [ s# , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 18) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 21) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 6) (Mirror (Input 3)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( tower
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( twice
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( twoto
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( s#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, twoto] |-> [ s# , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 18) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 21) (Mirror (Input 3)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, twoto] |-> [ s# , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 5) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 18) (Mirror (Input 3)) -}
  [s#, twoto] |-> [ s# , s , p , s , s , p , p , p , s , p , p ] {- DP (Top 21) (Mirror (Input 3)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / -1A 0A 0A \
        | -1A 0A 0A |
        \ -   -  0A / )
  ( p
  , Wk  / 0A 0A 0A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( tower
  , Wk  / - - 0A \
        | - - 2A |
        \ - - 0A / )
  ( 0
  , Wk  / 2A -  -2A \
        | -  1A -   |
        \ -  -  0A  / )
  ( twice
  , Wk  / 0A 0A -  \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( twoto
  , Wk  / 0A 0A 0A \
        | 1A 1A 1A |
        \ -  -  0A / )
  ( s#
  , Wk  / - 1A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, s, p, p, p] {- DP (Top 7) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [s#, s, s, p, p, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / -   1A  0A  \
        | -1A -1A -1A |
        \ -   -   0A  / )
  ( p
  , Wk  / -   1A 0A \
        | -1A -  -  |
        \ -   -  0A / )
  ( tower
  , Wk  / -   - 2A \
        | -1A - 1A |
        \ -   - 0A / )
  ( 0
  , Wk  / - - 1A \
        | - - 0A |
        \ - - 0A / )
  ( twice
  , Wk  / 1A 1A 1A \
        | 0A 0A 0A |
        \ -  -  0A / )
  ( twoto
  , Wk  / - - 2A \
        | - - 1A |
        \ - - 0A / )
  ( s#
  , Wk  / - 2A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [s#, s, s, s, p, p, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / 1 0 0 \
        | 0 7 0 |
        \ 0 0 1 / )
  ( p
  , Wk  / 1 0 0 \
        | 0 4 0 |
        \ 0 0 1 / )
  ( tower
  , Wk  / 0 0 0 \
        | 3 0 0 |
        \ 0 0 1 / )
  ( 0
  , Wk  / 0 0 0 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( twice
  , Wk  / 4 0 1 \
        | 0 0 0 |
        \ 0 0 1 / )
  ( twoto
  , Wk  / 0 0 0 \
        | 0 3 0 |
        \ 0 0 1 / )
  ( s#
  , Wk  / 1 0 4 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, twice] |-> [ s# , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / 0A 1A 0A \
        | -  1A -  |
        \ -  -  0A / )
  ( p
  , Wk  / 0A  -   -1A \
        | -2A -1A -   |
        \ -   -   0A  / )
  ( tower
  , Wk  / - - 0A \
        | - - 1A |
        \ - - 0A / )
  ( 0
  , Wk  / - - 1A \
        | - - -  |
        \ - - 0A / )
  ( twice
  , Wk  / - - 0A \
        | - - 1A |
        \ - - 0A / )
  ( twoto
  , Wk  / - - 0A \
        | - - 1A |
        \ - - 0A / )
  ( s#
  , Wk  / 0A 0A -  \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
  [0#, twoto] |-> [0#, s] {- DP (Top 0) (Mirror (Input 2)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / 0A 0A -   \
        | -  -  -2A |
        \ -  -  0A  / )
  ( p
  , Wk  / 0A 0A -   \
        | -  -  -2A |
        \ -  -  0A  / )
  ( tower
  , Wk  / - 2A 2A  \
        | - -  -2A |
        \ - -  0A  / )
  ( 0
  , Wk  / - - 2A  \
        | - - -2A |
        \ - - 0A  / )
  ( twice
  , Wk  / 0A 0A -2A \
        | -  -  -2A |
        \ -  -  0A  / )
  ( twoto
  , Wk  / 2A 2A 2A  \
        | -  -  -2A |
        \ -  -  0A  / )
  ( 0#
  , Wk  / 0A -1A -  \
        | -  -   -  |
        \ -  -   0A / )
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
  [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
  [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
  [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
  [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
  [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
  [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
  [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  remove un-usable
    SRS
      [s, tower] ->= [ s , p , s , p , tower , s , p , s , p , twoto , s , p , s , p ] {- DP Nontop (Mirror (Input 1)) -}
      [0, twoto] ->= [0, s] {- DP Nontop (Mirror (Input 2)) -}
      [s, twoto] ->= [ s , p , s , p , twoto , s , s , s , p , p , p , s , p , s , p , twice , s , p , s , s , p , s , s , p , s , s , p , p , p , s , p , p ] {- DP Nontop (Mirror (Input 3)) -}
      [0, twice] ->= [0] {- DP Nontop (Mirror (Input 4)) -}
      [s, twice] ->= [ s , s , s , p , p , p , twice , s , s , s , s , s , p , p , p ] {- DP Nontop (Mirror (Input 5)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 6)) -}
      [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 7)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 7)) -}
      [s, p, tower] ->= [tower] {- DP Nontop (Mirror (Input 7)) -}
      [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 7)) -}
      [s, p, twice] ->= [twice] {- DP Nontop (Mirror (Input 7)) -}
      [s, p, twoto] ->= [twoto] {- DP Nontop (Mirror (Input 7)) -}
      [0, p] ->= [s, s, s, s, s, s, s, s, 0] {- DP Nontop (Mirror (Input 8)) -}
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, twice] |-> [0#] {- DP (Top 0) (Mirror (Input 4)) -}
reason
  (p, 1/1)
  (twice, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (9,6)\Weight(8,6)\Context\Mirror(13,6)\Deepee(41/13,8)\Weight(28/13,8)\EDG[(11/13,7)\Matrix{\Arctic}{3}\EDG(7/13,7)\Matrix{\ArcticBZ}{3}\EDG(4/13,7)\Matrix{\ArcticBZ}{3}\EDG(2/13,7)\Matrix{\Natural}{3}\EDG(1/13,7)\Matrix{\ArcticBZ}{3}(0/13,6)\EDG[],(3/13,7)\Matrix{\ArcticBZ}{3}\EDG(2/13,7)\Usable(2,3)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "EDG { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
  total number 13
  max duration 11.356439410000
  min duration 0.000003229000
  total durat. 20.713794806000
  Info
    { what = "EDG   { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
    , input_size = Size
      { num_rules = 1063
      , num_strict_rules = 828
      , num_top_rules = 828
      , num_weak_rules = 235
      , alphabet_size = 59
      , total_length = 17444}
    , self = 68
    , parent = Nothing
    , duration = 3.908664542000
    , status = Success
    , start = 2025-09-03 13:38:50.514160009 UTC
    , finish = 2025-09-03 13:38:54.422824551 UTC
    , thread_cap_info = ("ThreadId 92", 2, False)}
  Info
    { what = "EDG   { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
    , input_size = Size
      { num_rules = 585
      , num_strict_rules = 383
      , num_top_rules = 383
      , num_weak_rules = 202
      , alphabet_size = 36
      , total_length = 9796}
    , self = 107
    , parent = Nothing
    , duration = 5.446005722000
    , status = Success
    , start = 2025-09-03 13:39:02.894045461 UTC
    , finish = 2025-09-03 13:39:08.340051183 UTC
    , thread_cap_info = ("ThreadId 94", 3, False)}
  Info
    { what = "EDG   { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
    , input_size = Size
      { num_rules = 942
      , num_strict_rules = 707
      , num_top_rules = 707
      , num_weak_rules = 235
      , alphabet_size = 47
      , total_length = 15616}
    , self = 92
    , parent = Nothing
    , duration = 11.356439410000
    , status = Success
    , start = 2025-09-03 13:38:51.31477537 UTC
    , finish = 2025-09-03 13:39:02.67121478 UTC
    , thread_cap_info = ("ThreadId 94", 2, False)}
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 2.283164052000
  min duration 0.359222812000
  total durat. 8.417367020000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 16
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 123}
    , self = 117
    , parent = Nothing
    , duration = 1.410549419000
    , status = Fail
    , start = 2025-09-03 13:39:09.414490749 UTC
    , finish = 2025-09-03 13:39:10.825040168 UTC
    , thread_cap_info = ("ThreadId 186", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 157}
    , self = 82
    , parent = Nothing
    , duration = 1.503503644000
    , status = Fail
    , start = 2025-09-03 13:38:57.55749192 UTC
    , finish = 2025-09-03 13:38:59.060995564 UTC
    , thread_cap_info = ("ThreadId 138", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 15
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 139}
    , self = 94
    , parent = Nothing
    , duration = 2.220804304000
    , status = Fail
    , start = 2025-09-03 13:39:02.077854137 UTC
    , finish = 2025-09-03 13:39:04.298658441 UTC
    , thread_cap_info = ("ThreadId 153", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 24
      , num_strict_rules = 11
      , num_top_rules = 11
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 276}
    , self = 56
    , parent = Nothing
    , duration = 2.283164052000
    , status = Fail
    , start = 2025-09-03 13:38:49.556006767 UTC
    , finish = 2025-09-03 13:38:51.839170819 UTC
    , thread_cap_info = ("ThreadId 62", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.023339364000
  min duration 3.004858807000
  total durat. 6.028198171000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 20
      , num_strict_rules = 7
      , num_top_rules = 7
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 215}
    , self = 71
    , parent = Nothing
    , duration = 3.004858807000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:53.01574391 UTC
    , finish = 2025-09-03 13:38:56.020602717 UTC
    , thread_cap_info = ("ThreadId 119", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 585
      , num_strict_rules = 383
      , num_top_rules = 383
      , num_weak_rules = 202
      , alphabet_size = 36
      , total_length = 9796}
    , self = 118
    , parent = Nothing
    , duration = 3.023339364000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:39:08.417496401 UTC
    , finish = 2025-09-03 13:39:11.440835765 UTC
    , thread_cap_info = ("ThreadId 179", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.079789377000
  min duration 3.079789377000
  total durat. 3.079789377000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 235
      , num_strict_rules = 235
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 35
      , total_length = 3328}
    , self = 58
    , parent = Nothing
    , duration = 3.079789377000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:38:49.614763245 UTC
    , finish = 2025-09-03 13:38:52.694552622 UTC
    , thread_cap_info = ("ThreadId 75", 3, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 3.066263675000
  min duration 3.007866809000
  total durat. 18.192164118000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 20
      , num_strict_rules = 7
      , num_top_rules = 7
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 215}
    , self = 72
    , parent = Nothing
    , duration = 3.007866809000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:53.012747432 UTC
    , finish = 2025-09-03 13:38:56.020614241 UTC
    , thread_cap_info = ("ThreadId 120", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 15
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 139}
    , self = 97
    , parent = Nothing
    , duration = 3.012026406000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:39:02.065831247 UTC
    , finish = 2025-09-03 13:39:05.077857653 UTC
    , thread_cap_info = ("ThreadId 154", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 585
      , num_strict_rules = 383
      , num_top_rules = 383
      , num_weak_rules = 202
      , alphabet_size = 36
      , total_length = 9796}
    , self = 119
    , parent = Nothing
    , duration = 3.028910523000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:39:08.411940079 UTC
    , finish = 2025-09-03 13:39:11.440850602 UTC
    , thread_cap_info = ("ThreadId 180", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 157}
    , self = 84
    , parent = Nothing
    , duration = 3.036973758000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:57.544959255 UTC
    , finish = 2025-09-03 13:39:00.581933013 UTC
    , thread_cap_info = ("ThreadId 139", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 57
    , parent = Nothing
    , duration = 3.040122947000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:49.552350987 UTC
    , finish = 2025-09-03 13:38:52.592473934 UTC
    , thread_cap_info = ("ThreadId 59", 0, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 16
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 123}
    , self = 122
    , parent = Nothing
    , duration = 3.066263675000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:39:09.414493015 UTC
    , finish = 2025-09-03 13:39:12.48075669 UTC
    , thread_cap_info = ("ThreadId 187", 1, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.115171311000
  min duration 2.999784493000
  total durat. 6.114955804000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 130}
    , self = 112
    , parent = Nothing
    , duration = 2.999784493000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:39:06.414406923 UTC
    , finish = 2025-09-03 13:39:09.414191416 UTC
    , thread_cap_info = ("ThreadId 171", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 235
      , num_strict_rules = 235
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 35
      , total_length = 3328}
    , self = 59
    , parent = Nothing
    , duration = 3.115171311000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:38:49.601308548 UTC
    , finish = 2025-09-03 13:38:52.716479859 UTC
    , thread_cap_info = ("ThreadId 77", 3, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 4
  max duration 2.297424713000
  min duration 1.521015812000
  total durat. 7.133247361000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 20
      , num_strict_rules = 7
      , num_top_rules = 7
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 215}
    , self = 75
    , parent = Nothing
    , duration = 1.521015812000
    , status = Success
    , start = 2025-09-03 13:38:56.023566659 UTC
    , finish = 2025-09-03 13:38:57.544582471 UTC
    , thread_cap_info = ("ThreadId 129", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 16
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 123}
    , self = 123
    , parent = Nothing
    , duration = 1.566612320000
    , status = Success
    , start = 2025-09-03 13:39:11.494177126 UTC
    , finish = 2025-09-03 13:39:13.060789446 UTC
    , thread_cap_info = ("ThreadId 197", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 130}
    , self = 110
    , parent = Nothing
    , duration = 1.748194516000
    , status = Success
    , start = 2025-09-03 13:39:07.634209393 UTC
    , finish = 2025-09-03 13:39:09.382403909 UTC
    , thread_cap_info = ("ThreadId 175", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 157}
    , self = 85
    , parent = Nothing
    , duration = 2.297424713000
    , status = Success
    , start = 2025-09-03 13:38:59.714454081 UTC
    , finish = 2025-09-03 13:39:02.011878794 UTC
    , thread_cap_info = ("ThreadId 143", 1, False)}
Fail : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.086585748000
  min duration 1.086585748000
  total durat. 1.086585748000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 55
    , parent = Nothing
    , duration = 1.086585748000
    , status = Fail
    , start = 2025-09-03 13:38:50.194179204 UTC
    , finish = 2025-09-03 13:38:51.280764952 UTC
    , thread_cap_info = ("ThreadId 99", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.358991973000
  min duration 1.358991973000
  total durat. 1.358991973000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 15
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 139}
    , self = 100
    , parent = Nothing
    , duration = 1.358991973000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:39:05.055179212 UTC
    , finish = 2025-09-03 13:39:06.414171185 UTC
    , thread_cap_info = ("ThreadId 161", 1, False)}
Except "<<timeout>>" : "Matrix\n { monotone = Weak\n , domain = Arctic\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 5\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 15.086557418000
  min duration 15.086557418000
  total durat. 15.086557418000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Arctic\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 5\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 120
    , parent = Nothing
    , duration = 15.086557418000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:56.376948217 UTC
    , finish = 2025-09-03 13:39:11.463505635 UTC
    , thread_cap_info = ("ThreadId 131", 0, False)}
Success : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.228703580000
  min duration 1.228703580000
  total durat. 1.228703580000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 15
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 139}
    , self = 98
    , parent = Nothing
    , duration = 1.228703580000
    , status = Success
    , start = 2025-09-03 13:39:05.114207456 UTC
    , finish = 2025-09-03 13:39:06.342911036 UTC
    , thread_cap_info = ("ThreadId 163", 1, False)}
Fail : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.627604750000
  min duration 1.627604750000
  total durat. 1.627604750000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 62
    , parent = Nothing
    , duration = 1.627604750000
    , status = Fail
    , start = 2025-09-03 13:38:51.294194088 UTC
    , finish = 2025-09-03 13:38:52.921798838 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 1.464105056000
  min duration 0.625691814000
  total durat. 2.913894868000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 157}
    , self = 87
    , parent = Nothing
    , duration = 1.464105056000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:39:00.601438352 UTC
    , finish = 2025-09-03 13:39:02.065543408 UTC
    , thread_cap_info = ("ThreadId 146", 1, False)}
Except "<<timeout>>" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 12.054465424000
  min duration 12.054465424000
  total durat. 12.054465424000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 95
    , parent = Nothing
    , duration = 12.054465424000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:38:52.934533057 UTC
    , finish = 2025-09-03 13:39:04.988998481 UTC
    , thread_cap_info = ("ThreadId 115", 0, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.713803400000
  min duration 0.245181200000
  total durat. 3.422433919000
Fail : "QPI\n { dim = 5\n , bits = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.125288464000
  min duration 3.125288464000
  total durat. 3.125288464000
  Info
    { what = "QPI\n  { dim = 5\n  , bits = 4\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 13
      , alphabet_size = 7
      , total_length = 120}
    , self = 73
    , parent = Nothing
    , duration = 3.125288464000
    , status = Fail
    , start = 2025-09-03 13:38:53.195021669 UTC
    , finish = 2025-09-03 13:38:56.320310133 UTC
    , thread_cap_info = ("ThreadId 121", 0, False)}
Success : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 10
  max duration 1.118000311000
  min duration 0.000024816000
  total durat. 1.825750128000
  Info
    { what = "Weight\n  { modus = Pre (Or_Else Count (GLPK   { goal = Optimize, epsilon_digits = 6}))\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 1456
      , num_strict_rules = 1221
      , num_top_rules = 1221
      , num_weak_rules = 235
      , alphabet_size = 47
      , total_length = 22258}
    , self = 54
    , parent = Nothing
    , duration = 1.118000311000
    , status = Success
    , start = 2025-09-03 13:38:50.154161607 UTC
    , finish = 2025-09-03 13:38:51.272161918 UTC
    , thread_cap_info = ("ThreadId 98", 2, False)}
**************************************************
E              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E              = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
E              = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size = 7 , total_length
E              = 120} , self = 57 , parent = Nothing , duration = 3.040122947000 , status
E              = Except "<<timeout>>" , start = 2025-09-03 13:38:49.552350987 UTC , finish
E              = 2025-09-03 13:38:52.592473934 UTC , thread_cap_info = ("ThreadId 59",
E              0, False)}
E              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 24 , num_strict_rules
| F            = 11 , num_top_rules = 11 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| F            = 276} , self = 56 , parent = Nothing , duration = 2.283164052000 , status
| F            = Fail , start = 2025-09-03 13:38:49.556006767 UTC , finish = 2025-09-03
| F            13:38:51.839170819 UTC , thread_cap_info = ("ThreadId 62", 1, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | F          = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | F          = 120} , self = 46 , parent = Nothing , duration = 0.359222812000 , status
| | F          = Fail , start = 2025-09-03 13:38:49.556009241 UTC , finish = 2025-09-03
| | F          13:38:49.915232053 UTC , thread_cap_info = ("ThreadId 58", 0, False)}
| | F          
| | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 235 , num_strict_rules
| | | E        = 235 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 35 , total_length
| | | E        = 3328} , self = 59 , parent = Nothing , duration = 3.115171311000 , status
| | | E        = Except "AsyncCancelled" , start = 2025-09-03 13:38:49.601308548 UTC ,
| | | E        finish = 2025-09-03 13:38:52.716479859 UTC , thread_cap_info = ("ThreadId
| | | E        77", 3, False)}
| | | E        
| | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 235 , num_strict_rules
| | | | E      = 235 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 35 , total_length
| | | | E      = 3328} , self = 58 , parent = Nothing , duration = 3.079789377000 , status
| | | | E      = Except "AsyncCancelled" , start = 2025-09-03 13:38:49.614763245 UTC ,
| | | | E      finish = 2025-09-03 13:38:52.694552622 UTC , thread_cap_info = ("ThreadId
| | | | E      75", 3, False)}
| | | | E      
| | F | |      
| | F | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F | |      = 14 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 ,
| | F | |      alphabet_size = 7 , total_length = 120} , self = 52 , parent = Nothing
| | F | |      , duration = 0.245181200000 , status = Fail , start = 2025-09-03 13:38:49.934562411
| | F | |      UTC , finish = 2025-09-03 13:38:50.179743611 UTC , thread_cap_info = ("ThreadId
| | F | |      90", 0, False)}
| | F | |      
| | | | | S    Info { what = "Context { when = When_Empty, close = Empty, side = R, tracing
| | | | | S    = False}" , input_size = Size { num_rules = 235 , num_strict_rules = 235
| | | | | S    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 35 , total_length
| | | | | S    = 3328} , self = 50 , parent = Nothing , duration = 0.101291072000 , status
| | | | | S    = Success , start = 2025-09-03 13:38:50.015177127 UTC , finish = 2025-09-03
| | | | | S    13:38:50.116468199 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| | | | | S    
| | | | | | S  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | | S  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | | S  = Size { num_rules = 1467 , num_strict_rules = 1232 , num_top_rules = 1232
| | | | | | S  , num_weak_rules = 235 , alphabet_size = 59 , total_length = 23544} , self
| | | | | | S  = 53 , parent = Nothing , duration = 0.418070905000 , status = Success
| | | | | | S  , start = 2025-09-03 13:38:50.054148457 UTC , finish = 2025-09-03 13:38:50.472219362
| | | | | | S  UTC , thread_cap_info = ("ThreadId 96", 2, False)}
| | | | | | S  
| | | | | S |  
| | | | | S |  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | S |  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | S |  = Size { num_rules = 1456 , num_strict_rules = 1221 , num_top_rules = 1221
| | | | | S |  , num_weak_rules = 235 , alphabet_size = 47 , total_length = 22258} , self
| | | | | S |  = 54 , parent = Nothing , duration = 1.118000311000 , status = Success
| | | | | S |  , start = 2025-09-03 13:38:50.154161607 UTC , finish = 2025-09-03 13:38:51.272161918
| | | | | S |  UTC , thread_cap_info = ("ThreadId 98", 2, False)}
| | | | | S |  
| | F | | | |  
| | F | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | F | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | F | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | F | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| | F | | | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size
| | F | | | |  = 7 , total_length = 120} , self = 55 , parent = Nothing , duration = 1.086585748000
| | F | | | |  , status = Fail , start = 2025-09-03 13:38:50.194179204 UTC , finish =
| | F | | | |  2025-09-03 13:38:51.280764952 UTC , thread_cap_info = ("ThreadId 99", 0,
| | F | | | |  False)}
| | F | | | |  
| | | | | | S  
| | | | | | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | S  verbose = False}" , input_size = Size { num_rules = 1063 , num_strict_rules
| | | | | | S  = 828 , num_top_rules = 828 , num_weak_rules = 235 , alphabet_size = 59
| | | | | | S  , total_length = 17444} , self = 68 , parent = Nothing , duration = 3.908664542000
| | | | | | S  , status = Success , start = 2025-09-03 13:38:50.514160009 UTC , finish
| | | | | | S  = 2025-09-03 13:38:54.422824551 UTC , thread_cap_info = ("ThreadId 92",
| | | | | | S  2, False)}
| | | | | | S  
| | | | | S |  
| | F | |   |  
| | F | |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F | |   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F | |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F | |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F | |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F | |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| | F | |   |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size
| | F | |   |  = 7 , total_length = 120} , self = 62 , parent = Nothing , duration = 1.627604750000
| | F | |   |  , status = Fail , start = 2025-09-03 13:38:51.294194088 UTC , finish =
| | F | |   |  2025-09-03 13:38:52.921798838 UTC , thread_cap_info = ("ThreadId 101",
| | F | |   |  0, False)}
| | F | |   |  
| | | | | S |  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | S |  verbose = False}" , input_size = Size { num_rules = 942 , num_strict_rules
| | | | | S |  = 707 , num_top_rules = 707 , num_weak_rules = 235 , alphabet_size = 47
| | | | | S |  , total_length = 15616} , self = 92 , parent = Nothing , duration = 11.356439410000
| | | | | S |  , status = Success , start = 2025-09-03 13:38:51.31477537 UTC , finish
| | | | | S |  = 2025-09-03 13:39:02.67121478 UTC , thread_cap_info = ("ThreadId 94",
| | | | | S |  2, False)}
| | | | | S |  
| F | | | | |  
| S | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | | | |  = 24 , num_strict_rules = 11 , num_top_rules = 11 , num_weak_rules = 13
| S | | | | |  , alphabet_size = 7 , total_length = 276} , self = 60 , parent = Nothing
| S | | | | |  , duration = 0.910298760000 , status = Success , start = 2025-09-03 13:38:51.854821651
| S | | | | |  UTC , finish = 2025-09-03 13:38:52.765120411 UTC , thread_cap_info = ("ThreadId
| S | | | | |  103", 1, False)}
| S | | | | |  
E | | | | | |  
F | | | | | |  Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
F | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | | | | |  = 14 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 ,
F | | | | | |  alphabet_size = 7 , total_length = 120} , self = 67 , parent = Nothing
F | | | | | |  , duration = 0.540802135000 , status = Fail , start = 2025-09-03 13:38:52.599785885
F | | | | | |  UTC , finish = 2025-09-03 13:38:53.14058802 UTC , thread_cap_info = ("ThreadId
F | | | | | |  109", 0, False)}
F | | | | | |  
| | | | E | |  
| | | E   | |  
| S |     | |  
|   F     | |  
| E       | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E       | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E       | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E       | |  , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E       | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E       | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| E       | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size
| E       | |  = 7 , total_length = 120} , self = 95 , parent = Nothing , duration = 12.054465424000
| E       | |  , status = Except "<<timeout>>" , start = 2025-09-03 13:38:52.934533057
| E       | |  UTC , finish = 2025-09-03 13:39:04.988998481 UTC , thread_cap_info = ("ThreadId
| E       | |  115", 0, False)}
| E       | |  
| | E     | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E     | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E     | |  = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | E     | |  = 7 , num_top_rules = 7 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | E     | |  = 215} , self = 72 , parent = Nothing , duration = 3.007866809000 , status
| | E     | |  = Except "<<timeout>>" , start = 2025-09-03 13:38:53.012747432 UTC , finish
| | E     | |  = 2025-09-03 13:38:56.020614241 UTC , thread_cap_info = ("ThreadId 120",
| | E     | |  1, False)}
| | E     | |  
| | | E   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 20 , num_strict_rules
| | | E   | |  = 7 , num_top_rules = 7 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | | E   | |  = 215} , self = 71 , parent = Nothing , duration = 3.004858807000 , status
| | | E   | |  = Except "<<timeout>>" , start = 2025-09-03 13:38:53.01574391 UTC , finish
| | | E   | |  = 2025-09-03 13:38:56.020602717 UTC , thread_cap_info = ("ThreadId 119",
| | | E   | |  1, False)}
| | | E   | |  
F | | |   | |  
F | | |   | |  Info { what = "QPI\n { dim = 5\n , bits = 4\n , solver = Stats (Kissatapi
F | | |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |   | |  = 14 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 ,
F | | |   | |  alphabet_size = 7 , total_length = 120} , self = 73 , parent = Nothing
F | | |   | |  , duration = 3.125288464000 , status = Fail , start = 2025-09-03 13:38:53.195021669
F | | |   | |  UTC , finish = 2025-09-03 13:38:56.320310133 UTC , thread_cap_info = ("ThreadId
F | | |   | |  121", 0, False)}
F | | |   | |  
| | | |   | S  
| | | | F |    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | F |    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | F |    = Size { num_rules = 732 , num_strict_rules = 497 , num_top_rules = 497
| | | | F |    , num_weak_rules = 235 , alphabet_size = 51 , total_length = 11670} , self
| | | | F |    = 69 , parent = Nothing , duration = 0.186954959000 , status = Fail , start
| | | | F |    = 2025-09-03 13:38:54.422842433 UTC , finish = 2025-09-03 13:38:54.609797392
| | | | F |    UTC , thread_cap_info = ("ThreadId 123", 3, False)}
| | | | F |    
| | | | F |    
| | | E   |    
| | E     |    
| | S     |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S     |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S     |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S     |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S     |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S     |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 20
| | S     |    , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 13 , alphabet_size
| | S     |    = 7 , total_length = 215} , self = 75 , parent = Nothing , duration = 1.521015812000
| | S     |    , status = Success , start = 2025-09-03 13:38:56.023566659 UTC , finish
| | S     |    = 2025-09-03 13:38:57.544582471 UTC , thread_cap_info = ("ThreadId 129",
| | S     |    1, False)}
| | S     |    
| | | F   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F   |    = 20 , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 13 ,
| | | F   |    alphabet_size = 7 , total_length = 215} , self = 74 , parent = Nothing
| | | F   |    , duration = 0.664583925000 , status = Fail , start = 2025-09-03 13:38:56.034285955
| | | F   |    UTC , finish = 2025-09-03 13:38:56.69886988 UTC , thread_cap_info = ("ThreadId
| | | F   |    128", 1, False)}
| | | F   |    
F | | |   |    
E | | |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = Arctic\n , method
E | | |   |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E | | |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
E | | |   |    , dim = 5\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E | | |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E | | |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
E | | |   |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size
E | | |   |    = 7 , total_length = 120} , self = 120 , parent = Nothing , duration =
E | | |   |    15.086557418000 , status = Except "<<timeout>>" , start = 2025-09-03 13:38:56.376948217
E | | |   |    UTC , finish = 2025-09-03 13:39:11.463505635 UTC , thread_cap_info = ("ThreadId
E | | |   |    131", 0, False)}
E | | |   |    
| | | F   |    
| | | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E   |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 20
| | | E   |    , num_strict_rules = 7 , num_top_rules = 7 , num_weak_rules = 13 , alphabet_size
| | | E   |    = 7 , total_length = 215} , self = 77 , parent = Nothing , duration = 0.824097998000
| | | E   |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:38:56.720612859
| | | E   |    UTC , finish = 2025-09-03 13:38:57.544710857 UTC , thread_cap_info = ("ThreadId
| | | E   |    132", 1, False)}
| | | E   |    
| | S |   |    
| |   E   |    
| | E     |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E     |    = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | E     |    = 4 , num_top_rules = 4 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | E     |    = 157} , self = 84 , parent = Nothing , duration = 3.036973758000 , status
| | E     |    = Except "<<timeout>>" , start = 2025-09-03 13:38:57.544959255 UTC , finish
| | E     |    = 2025-09-03 13:39:00.581933013 UTC , thread_cap_info = ("ThreadId 139",
| | E     |    1, False)}
| | E     |    
| | | F   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   |    = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | F   |    = 4 , num_top_rules = 4 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | | F   |    = 157} , self = 82 , parent = Nothing , duration = 1.503503644000 , status
| | | F   |    = Fail , start = 2025-09-03 13:38:57.55749192 UTC , finish = 2025-09-03
| | | F   |    13:38:59.060995564 UTC , thread_cap_info = ("ThreadId 138", 1, False)}
| | | F   |    
| | | F   |    
| | | F   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F   |    = 17 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 13 ,
| | | F   |    alphabet_size = 7 , total_length = 157} , self = 83 , parent = Nothing
| | | F   |    , duration = 0.631976876000 , status = Fail , start = 2025-09-03 13:38:59.074895115
| | | F   |    UTC , finish = 2025-09-03 13:38:59.706871991 UTC , thread_cap_info = ("ThreadId
| | | F   |    141", 1, False)}
| | | F   |    
| | | F   |    
| | | S   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | | S   |    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 13 , alphabet_size
| | | S   |    = 7 , total_length = 157} , self = 85 , parent = Nothing , duration = 2.297424713000
| | | S   |    , status = Success , start = 2025-09-03 13:38:59.714454081 UTC , finish
| | | S   |    = 2025-09-03 13:39:02.011878794 UTC , thread_cap_info = ("ThreadId 143",
| | | S   |    1, False)}
| | | S   |    
| | E |   |    
| | E |   |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E |   |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E |   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E |   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 17
| | E |   |    , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 13 , alphabet_size
| | E |   |    = 7 , total_length = 157} , self = 87 , parent = Nothing , duration = 1.464105056000
| | E |   |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:39:00.601438352
| | E |   |    UTC , finish = 2025-09-03 13:39:02.065543408 UTC , thread_cap_info = ("ThreadId
| | E |   |    146", 1, False)}
| | E |   |    
| | | S   |    
| | E     |    
| | E     |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E     |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E     |    = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | E     |    = 2 , num_top_rules = 2 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | E     |    = 139} , self = 97 , parent = Nothing , duration = 3.012026406000 , status
| | E     |    = Except "<<timeout>>" , start = 2025-09-03 13:39:02.065831247 UTC , finish
| | E     |    = 2025-09-03 13:39:05.077857653 UTC , thread_cap_info = ("ThreadId 154",
| | E     |    1, False)}
| | E     |    
| | | F   |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F   |    = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | F   |    = 2 , num_top_rules = 2 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | | F   |    = 139} , self = 94 , parent = Nothing , duration = 2.220804304000 , status
| | | F   |    = Fail , start = 2025-09-03 13:39:02.077854137 UTC , finish = 2025-09-03
| | | F   |    13:39:04.298658441 UTC , thread_cap_info = ("ThreadId 153", 1, False)}
| | | F   |    
| | | |   S    
| | | | S      Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | S      epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | S      = Size { num_rules = 596 , num_strict_rules = 383 , num_top_rules = 383
| | | | S      , num_weak_rules = 213 , alphabet_size = 37 , total_length = 9856} , self
| | | | S      = 93 , parent = Nothing , duration = 0.222788170000 , status = Success
| | | | S      , start = 2025-09-03 13:39:02.67124554 UTC , finish = 2025-09-03 13:39:02.89403371
| | | | S      UTC , thread_cap_info = ("ThreadId 155", 3, False)}
| | | | S      
| | | | S      
| | | | S      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | S      verbose = False}" , input_size = Size { num_rules = 585 , num_strict_rules
| | | | S      = 383 , num_top_rules = 383 , num_weak_rules = 202 , alphabet_size = 36
| | | | S      , total_length = 9796} , self = 107 , parent = Nothing , duration = 5.446005722000
| | | | S      , status = Success , start = 2025-09-03 13:39:02.894045461 UTC , finish
| | | | S      = 2025-09-03 13:39:08.340051183 UTC , thread_cap_info = ("ThreadId 94",
| | | | S      3, False)}
| | | | S      
| | | F |      
| | | F |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F |      = 15 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 13 ,
| | | F |      alphabet_size = 7 , total_length = 139} , self = 96 , parent = Nothing
| | | F |      , duration = 0.713803400000 , status = Fail , start = 2025-09-03 13:39:04.336124817
| | | F |      UTC , finish = 2025-09-03 13:39:05.049928217 UTC , thread_cap_info = ("ThreadId
| | | F |      157", 1, False)}
| | | F |      
| E | | |      
|   | F |      
| E |   |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
| E |   |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 13 , alphabet_size
| E |   |      = 7 , total_length = 139} , self = 100 , parent = Nothing , duration =
| E |   |      1.358991973000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E |   |      13:39:05.055179212 UTC , finish = 2025-09-03 13:39:06.414171185 UTC , thread_cap_info
| E |   |      = ("ThreadId 161", 1, False)}
| E |   |      
| | E   |      
| | S   |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | S   |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | S   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | S   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
| | S   |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 13 , alphabet_size
| | S   |      = 7 , total_length = 139} , self = 98 , parent = Nothing , duration = 1.228703580000
| | S   |      , status = Success , start = 2025-09-03 13:39:05.114207456 UTC , finish
| | S   |      = 2025-09-03 13:39:06.342911036 UTC , thread_cap_info = ("ThreadId 163",
| | S   |      1, False)}
| | S   |      
| | S   |      
| E     |      
| E     |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| E     |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E     |      = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| E     |      = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| E     |      = 130} , self = 112 , parent = Nothing , duration = 2.999784493000 , status
| E     |      = Except "AsyncCancelled" , start = 2025-09-03 13:39:06.414406923 UTC ,
| E     |      finish = 2025-09-03 13:39:09.414191416 UTC , thread_cap_info = ("ThreadId
| E     |      171", 1, False)}
| E     |      
| | F   |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F   |      = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | F   |      = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | F   |      = 130} , self = 105 , parent = Nothing , duration = 0.640122789000 , status
| | F   |      = Fail , start = 2025-09-03 13:39:06.436748737 UTC , finish = 2025-09-03
| | F   |      13:39:07.076871526 UTC , thread_cap_info = ("ThreadId 170", 1, False)}
| | F   |      
| | F   |      
| | F   |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F   |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F   |      = 14 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 ,
| | F   |      alphabet_size = 7 , total_length = 130} , self = 106 , parent = Nothing
| | F   |      , duration = 0.519417849000 , status = Fail , start = 2025-09-03 13:39:07.097354418
| | F   |      UTC , finish = 2025-09-03 13:39:07.616772267 UTC , thread_cap_info = ("ThreadId
| | F   |      173", 1, False)}
| | F   |      
| | F   |      
| | S   |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S   |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S   |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S   |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S   |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S   |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 14
| | S   |      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 13 , alphabet_size
| | S   |      = 7 , total_length = 130} , self = 110 , parent = Nothing , duration =
| | S   |      1.748194516000 , status = Success , start = 2025-09-03 13:39:07.634209393
| | S   |      UTC , finish = 2025-09-03 13:39:09.382403909 UTC , thread_cap_info = ("ThreadId
| | S   |      175", 1, False)}
| | S   |      
| | |   S      
| | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 585 , num_strict_rules
| | | E        = 383 , num_top_rules = 383 , num_weak_rules = 202 , alphabet_size = 36
| | | E        , total_length = 9796} , self = 119 , parent = Nothing , duration = 3.028910523000
| | | E        , status = Except "<<timeout>>" , start = 2025-09-03 13:39:08.411940079
| | | E        UTC , finish = 2025-09-03 13:39:11.440850602 UTC , thread_cap_info = ("ThreadId
| | | E        180", 3, False)}
| | | E        
| | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 585 , num_strict_rules
| | | | E      = 383 , num_top_rules = 383 , num_weak_rules = 202 , alphabet_size = 36
| | | | E      , total_length = 9796} , self = 118 , parent = Nothing , duration = 3.023339364000
| | | | E      , status = Except "<<timeout>>" , start = 2025-09-03 13:39:08.417496401
| | | | E      UTC , finish = 2025-09-03 13:39:11.440835765 UTC , thread_cap_info = ("ThreadId
| | | | E      179", 3, False)}
| | | | E      
| | S | |      
| E   | |      
| F   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| F   | |      = 3 , num_top_rules = 3 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| F   | |      = 123} , self = 117 , parent = Nothing , duration = 1.410549419000 , status
| F   | |      = Fail , start = 2025-09-03 13:39:09.414490749 UTC , finish = 2025-09-03
| F   | |      13:39:10.825040168 UTC , thread_cap_info = ("ThreadId 186", 1, False)}
| F   | |      
| | E | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | |      = False\n , verbose = False}" , input_size = Size { num_rules = 16 , num_strict_rules
| | E | |      = 3 , num_top_rules = 3 , num_weak_rules = 13 , alphabet_size = 7 , total_length
| | E | |      = 123} , self = 122 , parent = Nothing , duration = 3.066263675000 , status
| | E | |      = Except "<<timeout>>" , start = 2025-09-03 13:39:09.414493015 UTC , finish
| | E | |      = 2025-09-03 13:39:12.48075669 UTC , thread_cap_info = ("ThreadId 187",
| | E | |      1, False)}
| | E | |      
| F | | |      
| F | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | | |      = 16 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 13 ,
| F | | |      alphabet_size = 7 , total_length = 123} , self = 121 , parent = Nothing
| F | | |      , duration = 0.647470669000 , status = Fail , start = 2025-09-03 13:39:10.840720294
| F | | |      UTC , finish = 2025-09-03 13:39:11.488190963 UTC , thread_cap_info = ("ThreadId
| F | | |      189", 1, False)}
| F | | |      
| | | | E      
| | | E        
E | |          
  F |          
S   |          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S   |          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S   |          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S   |          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S   |          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S   |          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 16
S   |          , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 13 , alphabet_size
S   |          = 7 , total_length = 123} , self = 123 , parent = Nothing , duration =
S   |          1.566612320000 , status = Success , start = 2025-09-03 13:39:11.494177126
S   |          UTC , finish = 2025-09-03 13:39:13.060789446 UTC , thread_cap_info = ("ThreadId
S   |          197", 1, False)}
S   |          
|   E          
| E            Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E            = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 16
| E            , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 13 , alphabet_size
| E            = 7 , total_length = 123} , self = 125 , parent = Nothing , duration =
| E            0.625691814000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E            13:39:12.487119552 UTC , finish = 2025-09-03 13:39:13.112811366 UTC , thread_cap_info
| E            = ("ThreadId 199", 1, False)}
| E            
S |            
  E            
