last 1650 length 7406
CNF 1650 vars 7406 clauses
last 1640 length 7556
last 2015 length 8360
CNF 1640 vars 7556 clauses
CNF 2015 vars 8360 clauses
last 2041 length 8681
CNF 2041 vars 8681 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7852, clauses: 28282
last 7852 length 28282
CNF 7852 vars 28282 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11434, clauses: 40807
last 11434 length 40807
CNF 11434 vars 40807 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24164, clauses: 99647
last 24164 length 99647
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11434, clauses: 40807, status: Satisfied, time: 0.292672782s
CNF 24164 vars 99647 clauses
last 1869 length 8035
CNF 1869 vars 8035 clauses
last 1761 length 7410
CNF 1761 vars 7410 clauses
[Info] pool sizes (success) 28698 seen 13463 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
**************************************************
summary
**************************************************
SRS with 20 rules on 13 letters       looping derivation
from
  [BA, BAAA, A, b, a, a, a, b, a]
to
  [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a]
via 20 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [B, a] -> [BA] {- Input 0 -}
  [B, b] -> [B, B] {- Input 1 -}
  [BA, a] -> [BAA] {- Input 2 -}
  [BA, b] -> [BA, B] {- Input 3 -}
  [BAA, a] -> [BAAA] {- Input 4 -}
  [BAA, b] -> [BAA, B] {- Input 5 -}
  [BAAA, a] -> [BAAA, A] {- Input 6 -}
  [BAAA, b] -> [BAAAB] {- Input 7 -}
  [BAAAB, a] -> [BAAABA] {- Input 8 -}
  [BAAAB, b] -> [BAAAB, B] {- Input 9 -}
  [BAAABA, a] -> [BAAABAA] {- Input 10 -}
  [BAAABA, b] -> [BAAABA, B] {- Input 11 -}
  [BAAABAA, a] -> [BAAABAAA] {- Input 12 -}
  [BAAABAA, b] -> [BAAABAA, B] {- Input 13 -}
  [BAAABAAA] -> [a, b, a] {- Input 14 -}
  [A, a] -> [A, A] {- Input 15 -}
  [A, b] -> [AB] {- Input 16 -}
  [AB, a] -> [ABA] {- Input 17 -}
  [AB, b] -> [AB, B] {- Input 18 -}
  [ABA] -> [b, a, a, a, b, a, a, a] {- Input 19 -}
reason
  Nontermination
    Derive   { from = [BA, BAAA, A, b, a, a, a, b, a], via = [(Step   { rule = 16, position = 2}, [BA, BAAA, AB, a, a, a, b, a]), (Step   { rule = 17, position = 2}, [BA, BAAA, ABA, a, a, b, a]), (Step   { rule = 19, position = 2}, [BA, BAAA, b, a, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 7, position = 1}, [BA, BAAAB, a, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 8, position = 1}, [BA, BAAABA, a, a, b, a, a, a, a, a, b, a]), (Step   { rule = 10, position = 1}, [BA, BAAABAA, a, b, a, a, a, a, a, b, a]), (Step   { rule = 12, position = 1}, [BA, BAAABAAA, b, a, a, a, a, a, b, a]), (Step   { rule = 14, position = 1}, [BA, a, b, a, b, a, a, a, a, a, b, a]), (Step   { rule = 2, position = 0}, [BAA, b, a, b, a, a, a, a, a, b, a]), (Step   { rule = 5, position = 0}, [BAA, B, a, b, a, a, a, a, a, b, a]), (Step   { rule = 0, position = 1}, [BAA, BA, b, a, a, a, a, a, b, a]), (Step   { rule = 3, position = 1}, [BAA, BA, B, a, a, a, a, a, b, a]), (Step   { rule = 0, position = 2}, [BAA, BA, BA, a, a, a, a, b, a]), (Step   { rule = 2, position = 2}, [BAA, BA, BAA, a, a, a, b, a]), (Step   { rule = 4, position = 2}, [BAA, BA, BAAA, a, a, b, a]), (Step   { rule = 6, position = 2}, [BAA, BA, BAAA, A, a, b, a]), (Step   { rule = 15, position = 3}, [BAA, BA, BAAA, A, A, b, a]), (Step   { rule = 16, position = 4}, [BAA, BA, BAAA, A, AB, a]), (Step   { rule = 17, position = 4}, [BAA, BA, BAAA, A, ABA]), (Step   { rule = 19, position = 4}, [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a])], to = [BAA, BA, BAAA, A, b, a, a, a, b, a, a, a]}

**************************************************
skeleton: (20,13)\Loop{20}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10127, clauses: 35979
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************last 10127 length 35979
CNF 10127 vars 35979 clauses


**************************************************
S        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S        , closure = Forward\n , start_strict_only = True\n , max_closure_length
S        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S        = True})" , input_size = Size { num_rules = 20 , num_strict_rules = 20
S        , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 13 , total_length
S        = 76} , self = 52 , parent = Nothing , duration = 0.918066465000 , status
S        = Success , start = 2025-09-03 11:03:33.407835188 UTC , finish = 2025-09-03
S        11:03:34.325901653 UTC , thread_cap_info = ("ThreadId 35", 3, False)}
S        
| S      Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S      epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S      = Size { num_rules = 3380 , num_strict_rules = 3380 , num_top_rules = 0
| S      , num_weak_rules = 0 , alphabet_size = 169 , total_length = 19604} , self
| S      = 50 , parent = Nothing , duration = 0.845080147000 , status = Success
| S      , start = 2025-09-03 11:03:33.456212748 UTC , finish = 2025-09-03 11:03:34.301292895
| S      UTC , thread_cap_info = ("ThreadId 64", 0, False)}
| S      
| | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S    = 45 , num_strict_rules = 25 , num_top_rules = 25 , num_weak_rules = 20
| | S    , alphabet_size = 22 , total_length = 160} , self = 41 , parent = Nothing
| | S    , duration = 0.508018239000 , status = Success , start = 2025-09-03 11:03:33.491403253
| | S    UTC , finish = 2025-09-03 11:03:33.999421492 UTC , thread_cap_info = ("ThreadId
| | S    72", 2, False)}
| | S    
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 45
| | | E  , num_strict_rules = 25 , num_top_rules = 25 , num_weak_rules = 20 , alphabet_size
| | | E  = 22 , total_length = 160} , self = 43 , parent = Nothing , duration =
| | | E  0.483221997000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | E  11:03:33.549129061 UTC , finish = 2025-09-03 11:03:34.032351058 UTC , thread_cap_info
| | | E  = ("ThreadId 75", 2, False)}
| | | E  
| | S |  
| |   E  
| S      
S        
