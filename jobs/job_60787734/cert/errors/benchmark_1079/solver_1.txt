last 864 length 3647
CNF 864 vars 3647 clauses
last 732 length 3076
last 688 length 2816
CNF 732 vars 3076 clauses
last 1986 length 9092
last 2034 length 10250
last 996 length 4085
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1585, clauses: 5884
CNF 688 vars 2816 clauses
last 4370 length 19348
last 4354 length 18524
CNF 1986 vars 9092 clauses
CNF 2034 vars 10250 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5061, clauses: 21061
last 6786 length 31479
last 1585 length 5884
CNF 996 vars 4085 clauses
last 8044 length 36881
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1919, clauses: 7116
CNF 4370 vars 19348 clauses
CNF 4354 vars 18524 clauses
last 5061 length 21061
CNF 1585 vars 5884 clauses
CNF 6786 vars 31479 clauses
CNF 8044 vars 36881 clauses
last 1919 length 7116
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5990, clauses: 25006
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5377, clauses: 21145
CNF 5061 vars 21061 clauses
last 5990 length 25006
CNF 1919 vars 7116 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1585, clauses: 5884, status: Satisfied, time: 0.326502245s
last 5377 length 21145
CNF 5990 vars 25006 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1919, clauses: 7116, status: Satisfied, time: 0.182252459s
CNF 5377 vars 21145 clauses
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       context
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [a, a, b] -> [a] {- Input 1 -}
  [b, a, b] -> [b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a, a] -> [a, a, a, b, a, b] {- Mirror (Input 0) -}
  [b, a, a] -> [a] {- Mirror (Input 1) -}
  [b, a, b] -> [b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 9A 11A 11A - \
        | 9A 11A 11A - |
        | 9A 11A 11A - |
        \ -  -   -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [b, a, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Context\Mirror(3,2)\Deepee\EDG(2/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.657038443000
  min duration 0.047775618000
  total durat. 2.225744762000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.556836219000
  min duration 0.214539652000
  total durat. 2.088598547000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.654968420000
  min duration 0.363616771000
  total durat. 1.018585191000
**************************************************
E                        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                        = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
E                        = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 12} , self
E                        = 73 , parent = Nothing , duration = 0.835269280000 , status = Except "AsyncCancelled"
E                        , start = 2025-09-03 10:55:50.376833127 UTC , finish = 2025-09-03 10:55:51.212102407
E                        UTC , thread_cap_info = ("ThreadId 23", 2, False)}
E                        
| F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F                      = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                      = 64} , self = 59 , parent = Nothing , duration = 0.502649577000 , status
| F                      = Fail , start = 2025-09-03 10:55:50.384413196 UTC , finish = 2025-09-03
| F                      10:55:50.887062773 UTC , thread_cap_info = ("ThreadId 85", 1, False)}
| F                      
| | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F                    = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F                    = 64} , self = 61 , parent = Nothing , duration = 0.522109932000 , status
| | F                    = Fail , start = 2025-09-03 10:55:50.384668342 UTC , finish = 2025-09-03
| | F                    10:55:50.906778274 UTC , thread_cap_info = ("ThreadId 87", 1, False)}
| | F                    
| | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | F                  = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | F                  = 30} , self = 57 , parent = Nothing , duration = 0.214539652000 , status
| | | F                  = Fail , start = 2025-09-03 10:55:50.391144163 UTC , finish = 2025-09-03
| | | F                  10:55:50.605683815 UTC , thread_cap_info = ("ThreadId 82", 3, False)}
| | | F                  
| | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | | | F                = 11 , num_top_rules = 11 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | F                = 144} , self = 64 , parent = Nothing , duration = 0.657038443000 , status
| | | | F                = Fail , start = 2025-09-03 10:55:50.403713749 UTC , finish = 2025-09-03
| | | | F                10:55:51.060752192 UTC , thread_cap_info = ("ThreadId 93", 0, False)}
| | | | F                
| | | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | | | | F              = 11 , num_top_rules = 11 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | F              = 144} , self = 62 , parent = Nothing , duration = 0.556836219000 , status
| | | | | F              = Fail , start = 2025-09-03 10:55:50.406286191 UTC , finish = 2025-09-03
| | | | | F              10:55:50.96312241 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | | | | F              
| | | | | | E            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | E            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | E            = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | E            , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | E            max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | E            [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | E            string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | E            , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | E            = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | | | E            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | E            = 12} , self = 75 , parent = Nothing , duration = 0.790928231000 , status
| | | | | | E            = Except "AsyncCancelled" , start = 2025-09-03 10:55:50.42466163 UTC ,
| | | | | | E            finish = 2025-09-03 10:55:51.215589861 UTC , thread_cap_info = ("ThreadId
| | | | | | E            96", 2, False)}
| | | | | | E            
| | | | | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | F          = 36} , self = 60 , parent = Nothing , duration = 0.456779426000 , status
| | | | | | | F          = Fail , start = 2025-09-03 10:55:50.432092695 UTC , finish = 2025-09-03
| | | | | | | F          10:55:50.888872121 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | | | | | | F          
| | | | | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | | | | | F        = 36} , self = 58 , parent = Nothing , duration = 0.313196441000 , status
| | | | | | | | F        = Fail , start = 2025-09-03 10:55:50.445089156 UTC , finish = 2025-09-03
| | | | | | | | F        10:55:50.758285597 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | | | | | F        
| | | | | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | | S      = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | | | | | S      = 3 , total_length = 30} , self = 66 , parent = Nothing , duration = 0.654968420000
| | | | | | | | | S      , status = Success , start = 2025-09-03 10:55:50.451512484 UTC , finish
| | | | | | | | | S      = 2025-09-03 10:55:51.106480904 UTC , thread_cap_info = ("ThreadId 102",
| | | | | | | | | S      3, False)}
| | | | | | | | | S      
| | | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | | | | | F    = 15 , num_top_rules = 15 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | | | | F    = 176} , self = 65 , parent = Nothing , duration = 0.561501698000 , status
| | | | | | | | | | F    = Fail , start = 2025-09-03 10:55:50.505137112 UTC , finish = 2025-09-03
| | | | | | | | | | F    10:55:51.06663881 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | | | | | | | | F    
| | | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | | | | | | F  = 15 , num_top_rules = 15 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | | | | | F  = 176} , self = 63 , parent = Nothing , duration = 0.481916303000 , status
| | | | | | | | | | | F  = Fail , start = 2025-09-03 10:55:50.524295533 UTC , finish = 2025-09-03
| | | | | | | | | | | F  10:55:51.006211836 UTC , thread_cap_info = ("ThreadId 106", 0, False)}
| | | | | | | | | | | F  
| | | F | | | | | | | |  
| | | E | | | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E | | | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | E | | | | | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | E | | | | | | | |  = 3 , total_length = 30} , self = 69 , parent = Nothing , duration = 0.497321939000
| | | E | | | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:55:50.625422133
| | | E | | | | | | | |  UTC , finish = 2025-09-03 10:55:51.122744072 UTC , thread_cap_info = ("ThreadId
| | | E | | | | | | | |  107", 3, False)}
| | | E | | | | | | | |  
| | | | | | | | F | | |  
| | | | | | | | S | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | S | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | S | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | S | | |  = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | | S | | |  = 3 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.363616771000
| | | | | | | | S | | |  , status = Success , start = 2025-09-03 10:55:50.758315879 UTC , finish
| | | | | | | | S | | |  = 2025-09-03 10:55:51.12193265 UTC , thread_cap_info = ("ThreadId 111",
| | | | | | | | S | | |  3, False)}
| | | | | | | | S | | |  
| F | | | | | | | | | |  
|   | | | | | F | | | |  
| E | | | | |   | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | | |   | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | |   | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | |   | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | |   | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | |   | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| E | | | | |   | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| E | | | | |   | | | |  = 3 , total_length = 36} , self = 74 , parent = Nothing , duration = 0.323333688000
| E | | | | |   | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:55:50.888908714
| E | | | | |   | | | |  UTC , finish = 2025-09-03 10:55:51.212242402 UTC , thread_cap_info = ("ThreadId
| E | | | | |   | | | |  117", 3, False)}
| E | | | | |   | | | |  
| | F | | | |   | | | |  
| |   | | F |   | | | |  
| |   | |   |   | | | F  
| |   | F   |   | | |    
| |   |     |   | | F    
| |   |     |   | S      
| |   |     |   S        
| |   E     |            
E |         |            
  E         |            
            E            
