last 1837 length 7885
CNF 1837 vars 7885 clauses
last 1636 length 6918
CNF 1636 vars 6918 clauses
last 2152 length 9147
CNF 2152 vars 9147 clauses
last 2511 length 10952
last 2850 length 12237
CNF 2850 vars 12237 clauses
CNF 2511 vars 10952 clauses
last 2515 length 10554
CNF 2515 vars 10554 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4125, clauses: 15239
last 4125 length 15239
last 387 length 1559
last 355 length 1431
CNF 355 vars 1431 clauses
CNF 387 vars 1559 clauses
last 474 length 1927
last 576 length 2307
CNF 474 vars 1927 clauses
CNF 576 vars 2307 clauses
CNF 4125 vars 15239 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1318, clauses: 4711
last 1318 length 4711
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4389, clauses: 18217
last 4389 length 18217
CNF 4389 vars 18217 clauses
CNF 1318 vars 4711 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510
last 1811 length 6510
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1318, clauses: 4711, status: Unsatisfied, time: 0.098121286s
CNF 1811 vars 6510 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1811, clauses: 6510, status: Satisfied, time: 0.024261556s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2648, clauses: 10740
last 2648 length 10740
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4965, clauses: 18707
last 4965 length 18707
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 4 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b] -> [a, b, a] {- Input 0 -}
  [b, b, a] -> [b, b, b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, b] -> [a, b, a] {- Mirror (Input 0) -}
  [a, b, b] -> [b, b, b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [b#, a] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 12A 14A 14A - \
        | 12A 14A 14A - |
        | 12A 14A 14A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 12A 15A 15A - \
        | 12A 15A 15A - |
        | 12A 15A 15A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, b] ->= [b, b, b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(4/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 4965 vars 18707 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F        , closure = Forward\n , start_strict_only = True\n , max_closure_length
F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F        = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
F        = 12} , self = 62 , parent = Nothing , duration = 0.151245542000 , status
F        = Fail , start = 2025-09-03 13:33:54.190147526 UTC , finish = 2025-09-03
F        13:33:54.341393068 UTC , thread_cap_info = ("ThreadId 43", 2, False)}
F        
| F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| F      = 96} , self = 53 , parent = Nothing , duration = 0.129582110000 , status
| F      = Fail , start = 2025-09-03 13:33:54.200669285 UTC , finish = 2025-09-03
| F      13:33:54.330251395 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | F    = 96} , self = 52 , parent = Nothing , duration = 0.124633105000 , status
| | F    = Fail , start = 2025-09-03 13:33:54.200672624 UTC , finish = 2025-09-03
| | F    13:33:54.325305729 UTC , thread_cap_info = ("ThreadId 80", 1, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F  = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | F  = 80} , self = 63 , parent = Nothing , duration = 0.120412226000 , status
| | | F  = Fail , start = 2025-09-03 13:33:54.230173454 UTC , finish = 2025-09-03
| | | F  13:33:54.35058568 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| | | F  
| | F |  
| F   |  
F     |  
F     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F     |  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
F     |  = 3 , total_length = 18} , self = 66 , parent = Nothing , duration = 0.134848016000
F     |  , status = Fail , start = 2025-09-03 13:33:54.341405396 UTC , finish =
F     |  2025-09-03 13:33:54.476253412 UTC , thread_cap_info = ("ThreadId 115",
F     |  2, False)}
F     |  
|     F  
| S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S      = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| S      = 4 , total_length = 24} , self = 67 , parent = Nothing , duration = 0.118138276000
| S      , status = Success , start = 2025-09-03 13:33:54.379950335 UTC , finish
| S      = 2025-09-03 13:33:54.498088611 UTC , thread_cap_info = ("ThreadId 120",
| S      2, False)}
| S      
| | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | E    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | E    = 4 , total_length = 24} , self = 69 , parent = Nothing , duration = 0.140672427000
| | E    , status = Except "AsyncCancelled" , start = 2025-09-03 13:33:54.39075815
| | E    UTC , finish = 2025-09-03 13:33:54.531430577 UTC , thread_cap_info = ("ThreadId
| | E    121", 2, False)}
| | E    
F | |    
  S |    
    E    
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4389, clauses: 18217, status: Unsatisfied, time: 0.148673561s
CNF 2648 vars 10740 clauses
