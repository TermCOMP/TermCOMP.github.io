last 470 length 1822
last 484 length 1938
CNF 470 vars 1822 clauses
last 398 length 1547
CNF 484 vars 1938 clauses
last 560 length 2303
CNF 398 vars 1547 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2149, clauses: 7621
last 2149 length 7621
CNF 560 vars 2303 clauses
last 4324 length 21874
CNF 4324 vars 21874 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2359, clauses: 8407
last 2359 length 8407
CNF 2149 vars 7621 clauses
last 3810 length 17241
CNF 2359 vars 8407 clauses
CNF 3810 vars 17241 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2149, clauses: 7621, status: Unsatisfied, time: 0.138234222s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6171, clauses: 25413
last 6171 length 25413
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2359, clauses: 8407, status: Unsatisfied, time: 0.09080829s
last 5384 length 21496
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3879, clauses: 15271
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7045, clauses: 29145
last 8243 length 35133
CNF 6171 vars 25413 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4383, clauses: 17423
CNF 5384 vars 21496 clauses
last 3879 length 15271
last 8087 length 33815
last 7517 length 34104
last 7045 length 29145
CNF 8243 vars 35133 clauses
last 4383 length 17423
CNF 8087 vars 33815 clauses
CNF 7517 vars 34104 clauses
CNF 7045 vars 29145 clauses
CNF 3879 vars 15271 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6171, clauses: 25413, status: Satisfied, time: 0.190716855s
CNF 4383 vars 17423 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7045, clauses: 29145, status: Satisfied, time: 0.212156503s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16017, clauses: 61523
last 16017 length 61523
CNF 16017 vars 61523 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [a, b] -> [] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [b, a] -> [] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [c, b, b, a] {- Mirror (Input 0) -}
  [a, b, a] -> [a] {- Mirror (Input 1) -}
  [b, b, a] -> [b] {- Mirror (Input 1) -}
  [c, b, a] -> [c] {- Mirror (Input 1) -}
  [b, c] -> [c, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a, b, b, c] {- Input 0 -}
  [a, b, a] -> [a] {- Input 1 -}
  [a, b, b] -> [b] {- Input 1 -}
  [a, b, c] -> [c] {- Input 1 -}
  [c, b] -> [a, c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, b, b, c] {- DP (Top 0) (Input 0) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b] |-> [a#, c] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [c#, b] |-> [c#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / -1A 1A 0A \
        | -1A 1A 1A |
        \ -   -  0A / )
  ( b
  , Wk  / 1A 1A 2A \
        | -  -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / -1A - 0A  \
        | -1A - -1A |
        \ -   - 0A  / )
  ( a#
  , Wk  / 1A 1A 1A \
        | -  -  -  |
        \ -  -  0A / )
  ( c#
  , Wk  / 0A -3A -2A \
        | -  -   -   |
        \ -  -   0A  / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#] {- DP (Top 3) (Input 0) -}
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a, b, b, c] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [a] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b] {- DP Nontop (Input 1) -}
  [a, b, c] ->= [c] {- DP Nontop (Input 1) -}
  [c, b] ->= [a, c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\EDG(3/5,5)\Matrix{\ArcticBZ}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.476315253000
  min duration 0.023613345000
  total durat. 1.120538582000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.435253624000
  min duration 0.045880593000
  total durat. 1.074344223000
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.599040752000
  min duration 0.577902749000
  total durat. 1.176943501000
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.657423858000
  min duration 0.604051961000
  total durat. 1.261475819000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.011771414000
  min duration 1.011771414000
  total durat. 1.011771414000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 3
      , num_strict_rules = 3
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 79
    , parent = Nothing
    , duration = 1.011771414000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:36:16.310668617 UTC
    , finish = 2025-09-03 11:36:17.322440031 UTC
    , thread_cap_info = ("ThreadId 52", 0, False)}
**************************************************
E                        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                        , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                        = 12} , self = 79 , parent = Nothing , duration = 1.011771414000 , status
E                        = Except "AsyncCancelled" , start = 2025-09-03 11:36:16.310668617 UTC ,
E                        finish = 2025-09-03 11:36:17.322440031 UTC , thread_cap_info = ("ThreadId
E                        52", 0, False)}
E                        
| F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                      = 162} , self = 60 , parent = Nothing , duration = 0.177974854000 , status
| F                      = Fail , start = 2025-09-03 11:36:16.31662427 UTC , finish = 2025-09-03
| F                      11:36:16.494599124 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
| F                      
| | F                    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F                    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F                    = 162} , self = 59 , parent = Nothing , duration = 0.145262431000 , status
| | F                    = Fail , start = 2025-09-03 11:36:16.316631374 UTC , finish = 2025-09-03
| | F                    11:36:16.461893805 UTC , thread_cap_info = ("ThreadId 86", 3, False)}
| | F                    
| | | F                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | F                  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | F                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | | F                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | | F                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | | F                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | | F                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | | F                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | F                  = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | F                  = 12} , self = 63 , parent = Nothing , duration = 0.387935453000 , status
| | | F                  = Fail , start = 2025-09-03 11:36:16.323259005 UTC , finish = 2025-09-03
| | | F                  11:36:16.711194458 UTC , thread_cap_info = ("ThreadId 53", 0, False)}
| | | F                  
| | | | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | F                = 37 , num_top_rules = 37 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | F                total_length = 361} , self = 66 , parent = Nothing , duration = 0.476315253000
| | | | F                , status = Fail , start = 2025-09-03 11:36:16.329043842 UTC , finish =
| | | | F                2025-09-03 11:36:16.805359095 UTC , thread_cap_info = ("ThreadId 98", 2,
| | | | F                False)}
| | | | F                
| | | | | F              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F              = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | F              = 5 , total_length = 32} , self = 61 , parent = Nothing , duration = 0.162178350000
| | | | | F              , status = Fail , start = 2025-09-03 11:36:16.33986401 UTC , finish = 2025-09-03
| | | | | F              11:36:16.50204236 UTC , thread_cap_info = ("ThreadId 101", 1, False)}
| | | | | F              
| | | | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | F            = 37 , num_top_rules = 37 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | F            total_length = 361} , self = 64 , parent = Nothing , duration = 0.379334102000
| | | | | | F            , status = Fail , start = 2025-09-03 11:36:16.341830961 UTC , finish =
| | | | | | F            2025-09-03 11:36:16.721165063 UTC , thread_cap_info = ("ThreadId 99", 2,
| | | | | | F            False)}
| | | | | | F            
| | | | | | | S          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | S          , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | S          = 5 , total_length = 32} , self = 68 , parent = Nothing , duration = 0.577902749000
| | | | | | | S          , status = Success , start = 2025-09-03 11:36:16.365400677 UTC , finish
| | | | | | | S          = 2025-09-03 11:36:16.943303426 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | | S          1, False)}
| | | | | | | S          
| | | | | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | | | | | | | F        = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | F        total_length = 370} , self = 65 , parent = Nothing , duration = 0.400777798000
| | | | | | | | F        , status = Fail , start = 2025-09-03 11:36:16.382647776 UTC , finish =
| | | | | | | | F        2025-09-03 11:36:16.783425574 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | | | F        2, False)}
| | | | | | | | F        
| | | | | | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | | F      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | | | F      = 5 , total_length = 34} , self = 62 , parent = Nothing , duration = 0.219449192000
| | | | | | | | | F      , status = Fail , start = 2025-09-03 11:36:16.402750459 UTC , finish =
| | | | | | | | | F      2025-09-03 11:36:16.622199651 UTC , thread_cap_info = ("ThreadId 108",
| | | | | | | | | F      1, False)}
| | | | | | | | | F      
| | | | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 70 , num_strict_rules
| | | | | | | | | | F    = 43 , num_top_rules = 43 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | | | F    total_length = 370} , self = 67 , parent = Nothing , duration = 0.435253624000
| | | | | | | | | | F    , status = Fail , start = 2025-09-03 11:36:16.402752141 UTC , finish =
| | | | | | | | | | F    2025-09-03 11:36:16.838005765 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | | | | F    2, False)}
| | | | | | | | | | F    
| | | | | | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | | | | | S  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | | | | | | S  = 5 , total_length = 34} , self = 70 , parent = Nothing , duration = 0.599040752000
| | | | | | | | | | | S  , status = Success , start = 2025-09-03 11:36:16.427096952 UTC , finish
| | | | | | | | | | | S  = 2025-09-03 11:36:17.026137704 UTC , thread_cap_info = ("ThreadId 110",
| | | | | | | | | | | S  1, False)}
| | | | | | | | | | | S  
| | F | | | | | | | | |  
| F   | | | | | | | | |  
|     | | F | | | | | |  
| E   | |   | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E   | |   | | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E   | |   | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E   | |   | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   | |   | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   | |   | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| E   | |   | | | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| E   | |   | | | | | |  = 5 , total_length = 32} , self = 72 , parent = Nothing , duration = 0.657423858000
| E   | |   | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:36:16.541840288
| E   | |   | | | | | |  UTC , finish = 2025-09-03 11:36:17.199264146 UTC , thread_cap_info = ("ThreadId
| E   | |   | | | | | |  115", 1, False)}
| E   | |   | | | | | |  
| |   | |   | | | F | |  
| | E | |   | | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E | |   | | |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E | |   | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E | |   | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | |   | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | |   | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | E | |   | | |   | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | E | |   | | |   | |  = 5 , total_length = 34} , self = 73 , parent = Nothing , duration = 0.604051961000
| | E | |   | | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:36:16.622222172
| | E | |   | | |   | |  UTC , finish = 2025-09-03 11:36:17.226274133 UTC , thread_cap_info = ("ThreadId
| | E | |   | | |   | |  116", 1, False)}
| | E | |   | | |   | |  
| | | F |   | | |   | |  
| | |   |   F | |   | |  
| | |   |     | F   | |  
| | |   F     |     | |  
| | |         |     F |  
| | |         S       |  
| | |                 S  
| E |                    
|   E                    
E                        
