last 496 length 1981
last 551 length 2214
last 461 length 1860
CNF 551 vars 2214 clauses
last 547 length 2257
CNF 496 vars 1981 clauses
CNF 461 vars 1860 clauses
CNF 547 vars 2257 clauses
last 3757 length 18987
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2612, clauses: 9357
last 3604 length 16027
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2320, clauses: 8227
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6291, clauses: 25873
CNF 3757 vars 18987 clauses
last 2612 length 9357
CNF 3604 vars 16027 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7215, clauses: 29779
last 5255 length 22040
last 2320 length 8227
last 6291 length 25873
CNF 2612 vars 9357 clauses
last 8091 length 35861
last 7215 length 29779
CNF 5255 vars 22040 clauses
last 8804 length 40921
last 12060 length 51383
CNF 2320 vars 8227 clauses
CNF 6291 vars 25873 clauses
CNF 8091 vars 35861 clauses
CNF 7215 vars 29779 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2612, clauses: 9357, status: Unsatisfied, time: 0.498361081s
[Info] pool sizes (success) 51506 seen 19611 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 8804 vars 40921 clauses
CNF 12060 vars 51383 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2320, clauses: 8227, status: Unsatisfied, time: 0.422501485s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16561, clauses: 63178
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4648, clauses: 18183

last 16561 length 63178
last 4648 length 18183
summaryCNF 16561 vars 63178 clauses

CNF 4648 vars 18183 clauses
**************************************************
SRS with 4 rules on 3 letters       looping derivation
from
  [c, c, a, a, b, a]
to
  [b, b, b, a, b, c, c, a, a, b, a]
via 23 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b, a, b, c, c] {- Input 1 -}
  [c] -> [] {- Input 2 -}
  [c, b] -> [a] {- Input 3 -}
reason
  Nontermination
    Derive   { from = [c, c, a, a, b, a], via = [(Step   { rule = 1, position = 2}, [c, c, b, a, b, c, c, b, a]), (Step   { rule = 3, position = 6}, [c, c, b, a, b, c, a, a]), (Step   { rule = 1, position = 6}, [c, c, b, a, b, c, b, a, b, c, c]), (Step   { rule = 2, position = 9}, [c, c, b, a, b, c, b, a, b, c]), (Step   { rule = 2, position = 9}, [c, c, b, a, b, c, b, a, b]), (Step   { rule = 3, position = 5}, [c, c, b, a, b, a, a, b]), (Step   { rule = 1, position = 5}, [c, c, b, a, b, b, a, b, c, c, b]), (Step   { rule = 3, position = 9}, [c, c, b, a, b, b, a, b, c, a]), (Step   { rule = 2, position = 8}, [c, c, b, a, b, b, a, b, a]), (Step   { rule = 3, position = 1}, [c, a, a, b, b, a, b, a]), (Step   { rule = 1, position = 1}, [c, b, a, b, c, c, b, b, a, b, a]), (Step   { rule = 3, position = 5}, [c, b, a, b, c, a, b, a, b, a]), (Step   { rule = 2, position = 4}, [c, b, a, b, a, b, a, b, a]), (Step   { rule = 3, position = 0}, [a, a, b, a, b, a, b, a]), (Step   { rule = 1, position = 0}, [b, a, b, c, c, b, a, b, a, b, a]), (Step   { rule = 3, position = 4}, [b, a, b, c, a, a, b, a, b, a]), (Step   { rule = 0, position = 1}, [b, b, c, a, a, b, a, b, a]), (Step   { rule = 1, position = 3}, [b, b, c, b, a, b, c, c, b, a, b, a]), (Step   { rule = 3, position = 7}, [b, b, c, b, a, b, c, a, a, b, a]), (Step   { rule = 3, position = 2}, [b, b, a, a, b, c, a, a, b, a]), (Step   { rule = 1, position = 2}, [b, b, b, a, b, c, c, b, c, a, a, b, a]), (Step   { rule = 3, position = 6}, [b, b, b, a, b, c, a, c, a, a, b, a]), (Step   { rule = 0, position = 6}, [b, b, b, a, b, c, c, a, a, b, a])], to = [b, b, b, a, b, c, c, a, a, b, a]}

**************************************************
skeleton: (4,3)\Loop{23}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.674246115000
  min duration 0.043171083000
  total durat. 1.227144540000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.470662901000
  min duration 0.104260394000
  total durat. 1.124944934000
**************************************************
S            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S            , closure = Backward\n , start_strict_only = True\n , max_closure_length
S            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S            = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
S            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S            = 12} , self = 64 , parent = Nothing , duration = 0.904437525000 , status
S            = Success , start = 2025-09-03 11:46:46.452100177 UTC , finish = 2025-09-03
S            11:46:47.356537702 UTC , thread_cap_info = ("ThreadId 34", 0, False)}
S            
| F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 180} , self = 60 , parent = Nothing , duration = 0.430274217000 , status
| F          = Fail , start = 2025-09-03 11:46:46.462311159 UTC , finish = 2025-09-03
| F          11:46:46.892585376 UTC , thread_cap_info = ("ThreadId 56", 1, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F        = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F        = 180} , self = 59 , parent = Nothing , duration = 0.405449602000 , status
| | F        = Fail , start = 2025-09-03 11:46:46.475882447 UTC , finish = 2025-09-03
| | F        11:46:46.881332049 UTC , thread_cap_info = ("ThreadId 58", 1, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | | F      = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | F      = 38} , self = 49 , parent = Nothing , duration = 0.104260394000 , status
| | | F      = Fail , start = 2025-09-03 11:46:46.491720185 UTC , finish = 2025-09-03
| | | F      11:46:46.595980579 UTC , thread_cap_info = ("ThreadId 82", 3, False)}
| | | F      
| | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 5 , total_length
| | | | F    = 43} , self = 55 , parent = Nothing , duration = 0.144572037000 , status
| | | | F    = Fail , start = 2025-09-03 11:46:46.514287792 UTC , finish = 2025-09-03
| | | | F    11:46:46.658859829 UTC , thread_cap_info = ("ThreadId 83", 3, False)}
| | | | F    
| | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F  = 12 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 8 ,
| | | | | F  alphabet_size = 5 , total_length = 43} , self = 63 , parent = Nothing ,
| | | | | F  duration = 0.794841687000 , status = Fail , start = 2025-09-03 11:46:46.535987856
| | | | | F  UTC , finish = 2025-09-03 11:46:47.330829543 UTC , thread_cap_info = ("ThreadId
| | | | | F  89", 3, False)}
| | | | | F  
| | | F | |  
| | | F | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F | |  = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
| | | F | |  = 44 , num_top_rules = 44 , num_weak_rules = 36 , alphabet_size = 15 ,
| | | F | |  total_length = 381} , self = 62 , parent = Nothing , duration = 0.674246115000
| | | F | |  , status = Fail , start = 2025-09-03 11:46:46.656547578 UTC , finish =
| | | F | |  2025-09-03 11:46:47.330793693 UTC , thread_cap_info = ("ThreadId 103",
| | | F | |  0, False)}
| | | F | |  
| | | | F |  
| | | | F |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F |  = False\n , verbose = False}" , input_size = Size { num_rules = 80 , num_strict_rules
| | | | F |  = 44 , num_top_rules = 44 , num_weak_rules = 36 , alphabet_size = 15 ,
| | | | F |  total_length = 381} , self = 61 , parent = Nothing , duration = 0.470662901000
| | | | F |  , status = Fail , start = 2025-09-03 11:46:46.674714763 UTC , finish =
| | | | F |  2025-09-03 11:46:47.145377664 UTC , thread_cap_info = ("ThreadId 104",
| | | | F |  1, False)}
| | | | F |  
| | F | | |  
| F   | | |  
|     | F |  
|     F   |  
|         F  
S            
