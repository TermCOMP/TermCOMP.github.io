last 873 length 3670
CNF 873 vars 3670 clauses
last 786 length 3305
CNF 786 vars 3305 clauses
last 577 length 2471
last 745 length 3369
last 5323 length 25769
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1842, clauses: 6773
CNF 577 vars 2471 clauses
last 5233 length 25643
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5424, clauses: 22423
[Info] pool sizes (success) 36547 seen 19048 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
CNF 745 vars 3369 clauses
last 9355 length 40947
CNF 5323 vars 25769 clauses
last 1842 length 6773
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6309
**************************************************last 5424 length 22423
last 16904 length 78932

Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5379, clauses: 22260
CNF 1842 vars 6773 clauses
last 1736 length 6309
CNF 5424 vars 22423 clauses
CNF 9355 vars 40947 clauses
CNF 16904 vars 78932 clauses
last 5379 length 22260
summaryCNF 1736 vars 6309 clauses

CNF 5379 vars 22260 clauses
**************************************************last 21191 length 117581

SRS with 2 Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1842, clauses: 6773, status: Unsatisfied, time: 0.418156773s
rules on 3 letters       looping derivation
from
  [a, b, a, b, a, b, a, b, b, c]
to
  [b, c, c, b, c, c, b, b, c, c, b, c, c, a, b, a, b, a, b, a, b, b, c, b, b, b]
via 24 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [b] {- Input 0 -}
  [a, b, b, c] -> [b, c, c, a, a, a] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [a, b, a, b, a, b, a, b, b, c], via = [(Step   { rule = 1, position = 6}, [a, b, a, b, a, b, b, c, c, a, a, a]), (Step   { rule = 0, position = 11}, [a, b, a, b, a, b, b, c, c, a, a, b]), (Step   { rule = 0, position = 10}, [a, b, a, b, a, b, b, c, c, a, b, b]), (Step   { rule = 0, position = 9}, [a, b, a, b, a, b, b, c, c, b, b, b]), (Step   { rule = 1, position = 4}, [a, b, a, b, b, c, c, a, a, a, c, b, b, b]), (Step   { rule = 0, position = 9}, [a, b, a, b, b, c, c, a, a, b, c, b, b, b]), (Step   { rule = 0, position = 8}, [a, b, a, b, b, c, c, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 2}, [a, b, b, c, c, a, a, a, c, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 7}, [a, b, b, c, c, a, a, b, c, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 6}, [a, b, b, c, c, a, b, b, c, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 5}, [a, b, b, c, c, b, c, c, a, a, a, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 10}, [a, b, b, c, c, b, c, c, a, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 8}, [a, b, b, c, c, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 0}, [b, c, c, a, a, a, c, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 5}, [b, c, c, a, a, b, c, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 4}, [b, c, c, a, b, b, c, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 3}, [b, c, c, b, c, c, a, a, a, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 8}, [b, c, c, b, c, c, a, a, b, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 6}, [b, c, c, b, c, c, b, a, b, b, c, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 7}, [b, c, c, b, c, c, b, b, c, c, a, a, a, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 12}, [b, c, c, b, c, c, b, b, c, c, a, a, b, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 11}, [b, c, c, b, c, c, b, b, c, c, a, b, b, c, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 1, position = 10}, [b, c, c, b, c, c, b, b, c, c, b, c, c, a, a, a, b, a, b, a, b, b, c, b, b, b]), (Step   { rule = 0, position = 14}, [b, c, c, b, c, c, b, b, c, c, b, c, c, a, b, a, b, a, b, a, b, b, c, b, b, b])], to = [b, c, c, b, c, c, b, b, c, c, b, c, c, a, b, a, b, a, b, a, b, b, c, b, b, b]}

**************************************************
skeleton: (2,3)\Loop{24}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6309, status: Unsatisfied, time: 0.173027898s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S    , closure = Backward\n , start_strict_only = True\n , max_closure_length
S    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
S    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
S    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
S    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
S    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
S    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S    = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
S    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
S    = 12} , self = 60 , parent = Nothing , duration = 0.553900564000 , status
S    = Success , start = 2025-09-03 11:28:04.454697502 UTC , finish = 2025-09-03
S    11:28:05.008598066 UTC , thread_cap_info = ("ThreadId 77", 1, False)}
S    
| F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F  = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F  = 25} , self = 59 , parent = Nothing , duration = 0.502434849000 , status
| F  = Fail , start = 2025-09-03 11:28:04.506148364 UTC , finish = 2025-09-03
| F  11:28:05.008583213 UTC , thread_cap_info = ("ThreadId 85", 1, False)}
| F  
| F  
S    
