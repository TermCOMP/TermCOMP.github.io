last 882 length 3968
last 1005 length 4775
CNF 882 vars 3968 clauses
last 904 length 4153
last 1175 length 5430
CNF 1005 vars 4775 clauses
CNF 904 vars 4153 clauses
CNF 1175 vars 5430 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1618, clauses: 5827
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1387, clauses: 5125
last 3024 length 15449
last 1618 length 5827
last 3235 length 15582
last 3266 length 17603
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5812, clauses: 24328
last 1387 length 5125
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4931, clauses: 20571
last 3765 length 18965
last 4087 length 21431
last 4458 length 26821
CNF 3024 vars 15449 clauses
CNF 3235 vars 15582 clauses
CNF 3266 vars 17603 clauses
last 5812 length 24328
CNF 1618 vars 5827 clauses
last 4931 length 20571
CNF 1387 vars 5125 clauses
CNF 3765 vars 18965 clauses
CNF 4087 vars 21431 clauses
CNF 4458 vars 26821 clauses
CNF 5812 vars 24328 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3018, clauses: 11240
CNF 4931 vars 20571 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1387, clauses: 5125, status: Satisfied, time: 0.276276565s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1618, clauses: 5827, status: Unsatisfied, time: 0.382470335s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3048, clauses: 11090
last 3018 length 11240
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5812, clauses: 24328, status: Satisfied, time: 0.34788536s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12211, clauses: 51325
**************************************************last 3048 length 11090
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12217, clauses: 51323

last 12211 length 51325
last 12217 length 51323
summary
**************************************************
SRS with 1 rules on 2 letters       DP
SRS with 5 strict rules and 1 weak rules on 3 letters       weights
SRS with 1 strict rules and 1 weak rules on 3 letters       EDG
SRS with 1 strict rules and 1 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, b, b, b] -> [a, b, b, b, b, b, a] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, b, b, b, b] ->= [a, b, b, b, b, b, a] {- DP Nontop (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, a] {- DP (Top 5) (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, b, a] {- DP (Top 4) (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, b, b, a] {- DP (Top 3) (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, b, b, b, a] {- DP (Top 2) (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, b, b, b, b, a] {- DP (Top 1) (Input 0) -}
reason
  (a, 0/1)
  (b, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, b, b, b, b] ->= [a, b, b, b, b, b, a] {- DP Nontop (Input 0) -}
  [b#, a, b, b, b, b] |-> [b#, b, b, b, b, a] {- DP (Top 1) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, b, b, b, b] |-> [b#, b, b, b, b, a] {- DP (Top 1) (Input 0) -}
  [b, a, b, b, b, b] ->= [a, b, b, b, b, b, a] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 1A 2A 2A - \
        | 1A 2A 2A - |
        | 1A 2A 2A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b, a, b, b, b, b] ->= [a, b, b, b, b, b, a] {- DP Nontop (Input 0) -}
reason
  EDG

**************************************************
skeleton: (1,2)\Deepee(5/1,3)\Weight\EDG(1/1,3)\Matrix{\Arctic}{3}(0/1,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
CNF 3048 vars 11090 clauses
CNF 3018 vars 11240 clauses
  CNF 12217 vars 51323 clauses
in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 12211 vars 51325 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.481693034000
  min duration 0.058735154000
  total durat. 1.581416769000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.532187714000
  min duration 0.109088209000
  total durat. 1.725239384000
**************************************************
F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                  = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
F                  = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
F                  = 25} , self = 54 , parent = Nothing , duration = 0.112609751000 , status
F                  = Fail , start = 2025-09-03 13:19:23.705802439 UTC , finish = 2025-09-03
F                  13:19:23.81841219 UTC , thread_cap_info = ("ThreadId 58", 0, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F                = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                = 60} , self = 61 , parent = Nothing , duration = 0.468114979000 , status
| F                = Fail , start = 2025-09-03 13:19:23.722636592 UTC , finish = 2025-09-03
| F                13:19:24.190751571 UTC , thread_cap_info = ("ThreadId 70", 1, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | F              = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | F              = 25} , self = 56 , parent = Nothing , duration = 0.109088209000 , status
| | F              = Fail , start = 2025-09-03 13:19:23.736469981 UTC , finish = 2025-09-03
| | F              13:19:23.84555819 UTC , thread_cap_info = ("ThreadId 75", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | F            = 4 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F            = 60} , self = 63 , parent = Nothing , duration = 0.474421756000 , status
| | | F            = Fail , start = 2025-09-03 13:19:23.740444576 UTC , finish = 2025-09-03
| | | F            13:19:24.214866332 UTC , thread_cap_info = ("ThreadId 72", 1, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | F          = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 5 , total_length
| | | | F          = 74} , self = 62 , parent = Nothing , duration = 0.460263851000 , status
| | | | F          = Fail , start = 2025-09-03 13:19:23.741317554 UTC , finish = 2025-09-03
| | | | F          13:19:24.201581405 UTC , thread_cap_info = ("ThreadId 93", 2, False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | F        = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 5 , total_length
| | | | | F        = 74} , self = 64 , parent = Nothing , duration = 0.532187714000 , status
| | | | | F        = Fail , start = 2025-09-03 13:19:23.759142391 UTC , finish = 2025-09-03
| | | | | F        13:19:24.291330105 UTC , thread_cap_info = ("ThreadId 94", 2, False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 2 , num_strict_rules
| | | | | | F      = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size = 3 , total_length
| | | | | | F      = 25} , self = 58 , parent = Nothing , duration = 0.125581630000 , status
| | | | | | F      = Fail , start = 2025-09-03 13:19:23.75914944 UTC , finish = 2025-09-03
| | | | | | F      13:19:23.88473107 UTC , thread_cap_info = ("ThreadId 89", 0, False)}
| | | | | | F      
F | | | | | |      
F | | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
F | | | | | |      = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 5 , total_length
F | | | | | |      = 74} , self = 65 , parent = Nothing , duration = 0.481693034000 , status
F | | | | | |      = Fail , start = 2025-09-03 13:19:23.819142286 UTC , finish = 2025-09-03
F | | | | | |      13:19:24.30083532 UTC , thread_cap_info = ("ThreadId 97", 2, False)}
F | | | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 5 , num_strict_rules
| | | | | | | F    = 1 , num_top_rules = 1 , num_weak_rules = 4 , alphabet_size = 5 , total_length
| | | | | | | F    = 74} , self = 66 , parent = Nothing , duration = 0.483960075000 , status
| | | | | | | F    = Fail , start = 2025-09-03 13:19:23.841321937 UTC , finish = 2025-09-03
| | | | | | | F    13:19:24.325282012 UTC , thread_cap_info = ("ThreadId 98", 2, False)}
| | | | | | | F    
| | | | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | S  = 2 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| | | | | | | | S  = 3 , total_length = 25} , self = 67 , parent = Nothing , duration = 0.680607070000
| | | | | | | | S  , status = Success , start = 2025-09-03 13:19:23.845540052 UTC , finish
| | | | | | | | S  = 2025-09-03 13:19:24.526147122 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | | S  0, False)}
| | | | | | | | S  
| | F | | | | | |  
| |   | | | F | |  
| | E | | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | | |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 2
| | E | | |   | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 1 , alphabet_size
| | E | | |   | |  = 3 , total_length = 25} , self = 69 , parent = Nothing , duration = 0.665637443000
| | E | | |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:19:23.901835255
| | E | | |   | |  UTC , finish = 2025-09-03 13:19:24.567472698 UTC , thread_cap_info = ("ThreadId
| | E | | |   | |  106", 0, False)}
| | E | | |   | |  
| F | | | |   | |  
|   | | F |   | |  
|   | F   |   | |  
|   |     F   | |  
F   |         | |  
    |         F |  
    |           S  
    E              
