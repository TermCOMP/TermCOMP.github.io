last 1174 length 5353
last 1562 length 7800
CNF 1174 vars 5353 clauses
CNF 1562 vars 7800 clauses
last 1144 length 5355
last 1512 length 7744
CNF 1144 vars 5355 clauses
CNF 1512 vars 7744 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1785, clauses: 6734
last 1785 length 6734
CNF 1785 vars 6734 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1703, clauses: 6369
last 1703 length 6369
CNF 1703 vars 6369 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1785, clauses: 6734, status: Satisfied, time: 0.094864599s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5382, clauses: 22311
last 3786 length 32347
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5339, clauses: 22154
last 964 length 4490
last 1442 length 7353
last 5339 length 22154
CNF 3786 vars 32347 clauses
CNF 964 vars 4490 clauses
last 8136 length 75213
CNF 1442 vars 7353 clauses
CNF 5339 vars 22154 clauses
CNF 8136 vars 75213 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1703, clauses: 6369, status: Unsatisfied, time: 0.343320213s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1574, clauses: 5787
last 1574 length 5787
last 6642 length 36693
CNF 1574 vars 5787 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5339, clauses: 22154, status: Satisfied, time: 0.22293078s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3198, clauses: 13403
last 3198 length 13403
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1574, clauses: 5787, status: Satisfied, time: 0.08957747s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5044, clauses: 20885
last 5044 length 20885
CNF 5044 vars 20885 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5044, clauses: 20885, status: Satisfied, time: 0.022809406s
CNF 6642 vars 36693 clauses
**************************************************
summary
**************************************************
SRS with 1 rules on 3 letters       DP
SRS with 2 strict rules and 1 weak rules on 4 letters       EDG
SRS with 2 strict rules and 1 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 1 weak rules on 4 letters       EDG
SRS with 1 strict rules and 1 weak rules on 4 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, a, b, a] -> [a, b, a, a, c, a, b, c, a, b] {- Input 0 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, a, b, a] ->= [a, b, a, a, c, a, b, c, a, b] {- DP Nontop (Input 0) -}
  [c#, a, b, a] |-> [c#, a, b] {- DP (Top 7) (Input 0) -}
  [c#, a, b, a] |-> [c#, a, b, c, a, b] {- DP (Top 4) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, b, a] |-> [c#, a, b] {- DP (Top 7) (Input 0) -}
  [c#, a, b, a] |-> [c#, a, b, c, a, b] {- DP (Top 4) (Input 0) -}
  [c, a, b, a] ->= [a, b, a, a, c, a, b, c, a, b] {- DP Nontop (Input 0) -}
reason
  ( a
  , Wk  / 1A -1A 1A \
        | -  0A  -  |
        \ -  -   0A / )
  ( b
  , Wk  / -  -1A 0A \
        | 0A -   -  |
        \ -  -   0A / )
  ( c
  , Wk  / - 0A 0A \
        | - 1A -  |
        \ - -  0A / )
  ( c#
  , Wk  / -1A 0A 0A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [c#, a, b, a] |-> [c#, a, b] {- DP (Top 7) (Input 0) -}
  [c, a, b, a] ->= [a, b, a, a, c, a, b, c, a, b] {- DP Nontop (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a, b, a] |-> [c#, a, b] {- DP (Top 7) (Input 0) -}
  [c, a, b, a] ->= [a, b, a, a, c, a, b, c, a, b] {- DP Nontop (Input 0) -}
reason
  remove un-usable
    SRS
      [c, a, b, a] ->= [a, b, a, a, c, a, b, c, a, b] {- DP Nontop (Input 0) -}
   property Termination
has value Just True
for SRS
  [c#, a, b, a] |-> [c#, a, b] {- DP (Top 7) (Input 0) -}
reason
  (a, 1/1)
  (b, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (1,3)\Deepee\EDG(2/1,4)\Matrix{\ArcticBZ}{3}\EDG(1/1,4)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F                = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
F                = 96} , self = 72 , parent = Nothing , duration = 0.618120064000 , status
F                = Fail , start = 2025-09-03 13:14:11.222729846 UTC , finish = 2025-09-03
F                13:14:11.84084991 UTC , thread_cap_info = ("ThreadId 39", 2, False)}
F                
| F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F              = True}" , input_size = Size { num_rules = 1 , num_strict_rules = 1 , num_top_rules
| F              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 14} , self
| F              = 57 , parent = Nothing , duration = 0.129661634000 , status = Fail , start
| F              = 2025-09-03 13:14:11.237904408 UTC , finish = 2025-09-03 13:14:11.367566042
| F              UTC , thread_cap_info = ("ThreadId 62", 3, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | F            = 6 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | F            = 96} , self = 70 , parent = Nothing , duration = 0.483033425000 , status
| | F            = Fail , start = 2025-09-03 13:14:11.243328655 UTC , finish = 2025-09-03
| | F            13:14:11.72636208 UTC , thread_cap_info = ("ThreadId 41", 2, False)}
| | F            
| | | E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | E          = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | E          , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | E          max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | E          [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | E          string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | E          , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | E          = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | E          = 14} , self = 84 , parent = Nothing , duration = 0.700000196000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-03 13:14:11.247805338 UTC ,
| | | E          finish = 2025-09-03 13:14:11.947805534 UTC , thread_cap_info = ("ThreadId
| | | E          76", 3, False)}
| | | E          
| | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | E        = True})" , input_size = Size { num_rules = 1 , num_strict_rules = 1 ,
| | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | E        = 14} , self = 85 , parent = Nothing , duration = 0.680064473000 , status
| | | | E        = Except "AsyncCancelled" , start = 2025-09-03 13:14:11.267793479 UTC ,
| | | | E        finish = 2025-09-03 13:14:11.947857952 UTC , thread_cap_info = ("ThreadId
| | | | E        77", 3, False)}
| | | | E        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | F      = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | | | | F      = 31} , self = 60 , parent = Nothing , duration = 0.110091593000 , status
| | | | | F      = Fail , start = 2025-09-03 13:14:11.284728299 UTC , finish = 2025-09-03
| | | | | F      13:14:11.394819892 UTC , thread_cap_info = ("ThreadId 100", 0, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | | | | | F    = 31} , self = 59 , parent = Nothing , duration = 0.101358978000 , status
| | | | | | F    = Fail , start = 2025-09-03 13:14:11.28779232 UTC , finish = 2025-09-03
| | | | | | F    13:14:11.389151298 UTC , thread_cap_info = ("ThreadId 99", 0, False)}
| | | | | | F    
| | | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S  = 4 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| | | | | | | S  = 4 , total_length = 34} , self = 61 , parent = Nothing , duration = 0.293799332000
| | | | | | | S  , status = Success , start = 2025-09-03 13:14:11.309693068 UTC , finish
| | | | | | | S  = 2025-09-03 13:14:11.6034924 UTC , thread_cap_info = ("ThreadId 101",
| | | | | | | S  0, False)}
| | | | | | | S  
| F | | | | | |  
| E | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E | | | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 1 , alphabet_size
| E | | | | | |  = 4 , total_length = 34} , self = 63 , parent = Nothing , duration = 0.235762806000
| E | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:14:11.367816867
| E | | | | | |  UTC , finish = 2025-09-03 13:14:11.603579673 UTC , thread_cap_info = ("ThreadId
| E | | | | | |  104", 0, False)}
| E | | | | | |  
| | | | | | F |  
| | | | | F   |  
| | | | | F   |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F   |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F   |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F   |  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | | | | F   |  = 4 , total_length = 31} , self = 71 , parent = Nothing , duration = 0.411537106000
| | | | | F   |  , status = Fail , start = 2025-09-03 13:14:11.39823954 UTC , finish = 2025-09-03
| | | | | F   |  13:14:11.809776646 UTC , thread_cap_info = ("ThreadId 110", 0, False)}
| | | | | F   |  
| | | | | | S |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | S |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | | | S |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | | | | | S |  = 4 , total_length = 31} , self = 73 , parent = Nothing , duration = 0.470612831000
| | | | | | S |  , status = Success , start = 2025-09-03 13:14:11.423776493 UTC , finish
| | | | | | S |  = 2025-09-03 13:14:11.894389324 UTC , thread_cap_info = ("ThreadId 111",
| | | | | | S |  0, False)}
| | | | | | S |  
| | | | | | | S  
| E | | | | |    
| F | | | | |    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| F | | | | |    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| F | | | | |    = 27} , self = 68 , parent = Nothing , duration = 0.104392975000 , status
| F | | | | |    = Fail , start = 2025-09-03 13:14:11.603705582 UTC , finish = 2025-09-03
| F | | | | |    13:14:11.708098557 UTC , thread_cap_info = ("ThreadId 118", 0, False)}
| F | | | | |    
| F | | | | |    
| S | | | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | | | |    = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| S | | | | |    = 4 , total_length = 27} , self = 80 , parent = Nothing , duration = 0.198987218000
| S | | | | |    , status = Success , start = 2025-09-03 13:14:11.723843852 UTC , finish
| S | | | | |    = 2025-09-03 13:14:11.92283107 UTC , thread_cap_info = ("ThreadId 124",
| S | | | | |    0, False)}
| S | | | | |    
| | F | | | |    
| | S | | | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S | | | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S | | | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S | | | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | | | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | | | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | S | | | |    , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | S | | | |    = 4 , total_length = 27} , self = 82 , parent = Nothing , duration = 0.218957960000
| | S | | | |    , status = Success , start = 2025-09-03 13:14:11.728488492 UTC , finish
| | S | | | |    = 2025-09-03 13:14:11.947446452 UTC , thread_cap_info = ("ThreadId 125",
| | S | | | |    0, False)}
| | S | | | |    
| | | | | F |    
F | | | |   |    
  | | | |   S    
  S | | |        
    S | |        
      E |        
        E        
