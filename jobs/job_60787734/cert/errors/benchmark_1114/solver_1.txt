last 962 length 4350
CNF 962 vars 4350 clauses
last 831 length 3462
last 1176 length 5412
CNF 831 vars 3462 clauses
last 905 length 3810
CNF 905 vars 3810 clauses
CNF 1176 vars 5412 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8748
last 2399 length 8748
CNF 2399 vars 8748 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2610, clauses: 9560
last 2610 length 9560
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7926, clauses: 33021
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8748, status: Satisfied, time: 0.121422387s
CNF 2610 vars 9560 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8556, clauses: 35675
last 7926 length 33021
last 5169 length 28305
last 8556 length 35675
CNF 5169 vars 28305 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2610, clauses: 9560, status: Satisfied, time: 0.142387613s
last 6131 length 41606
CNF 6131 vars 41606 clauses
CNF 8556 vars 35675 clauses
last 672 length 2817
CNF 672 vars 2817 clauses
last 907 length 4137
CNF 907 vars 4137 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2291, clauses: 8226
last 2291 length 8226
CNF 2291 vars 8226 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2291, clauses: 8226, status: Unsatisfied, time: 0.16166518s
last 670 length 2805
CNF 670 vars 2805 clauses
last 839 length 3635
last 21087 length 98912
CNF 839 vars 3635 clauses
CNF 21087 vars 98912 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8172, clauses: 34065
last 8172 length 34065
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2282, clauses: 8193
last 2282 length 8193
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5046, clauses: 20378
last 5046 length 20378
CNF 8172 vars 34065 clauses
CNF 2282 vars 8193 clauses
CNF 5046 vars 20378 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2282, clauses: 8193, status: Satisfied, time: 0.174039805s
last 12246 length 63046
last 13947 length 77116
CNF 12246 vars 63046 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 5 strict rules and 7 weak rules on 5 letters       weights
SRS with 3 strict rules and 7 weak rules on 4 letters       EDG
SRS with 3 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, a, b, b, a, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, a, c] {- Mirror (Input 1) -}
  [c, b] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, b, a, c] {- Mirror (Input 1) -}
  [a, c, b] -> [a] {- Mirror (Input 2) -}
  [b, c, b] -> [b] {- Mirror (Input 2) -}
  [c, c, b] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, a, b] -> [c, a, b, b, a, a] {- Input 1 -}
  [b, c, a] -> [a] {- Input 2 -}
  [b, c, b] -> [b] {- Input 2 -}
  [b, c, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [b#, b, a, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a#, a, b] |-> [a#, b, b, a, a] {- DP (Top 1) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( c
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 1A 3A 3A - \
        | 1A 3A 3A - |
        | 1A 3A 3A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 4) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 15A 18A 18A - \
        | 15A 18A 18A - |
        | 15A 18A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, a, b, b, a, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(7,3)\Deepee(5/7,5)\Weight\EDG(3/7,4)\Matrix{\Arctic}{3}\EDG(2/7,4)\Matrix{\Arctic}{3}(0/7,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 13947 vars 77116 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.595766354000
  min duration 0.041859754000
  total durat. 1.147011839000
**************************************************
F              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F              = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F              = 43 , parent = Nothing , duration = 0.103974655000 , status = Fail , start
F              = 2025-09-03 11:01:37.153596033 UTC , finish = 2025-09-03 11:01:37.257570688
F              UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F              
| F            Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F            , closure = Forward\n , start_strict_only = True\n , max_closure_length
| F            = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F            Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F            8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F            = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F            ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F            1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F            = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F            num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| F            = 12} , self = 49 , parent = Nothing , duration = 0.262346793000 , status
| F            = Fail , start = 2025-09-03 11:01:37.153602467 UTC , finish = 2025-09-03
| F            11:01:37.41594926 UTC , thread_cap_info = ("ThreadId 43", 1, False)}
| F            
| | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S          = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | S          = 4 , total_length = 43} , self = 54 , parent = Nothing , duration = 0.232481986000
| | S          , status = Success , start = 2025-09-03 11:01:37.239418193 UTC , finish
| | S          = 2025-09-03 11:01:37.471900179 UTC , thread_cap_info = ("ThreadId 87",
| | S          3, False)}
| | S          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F        = 162} , self = 70 , parent = Nothing , duration = 0.273136130000 , status
| | | F        = Fail , start = 2025-09-03 11:01:37.245467826 UTC , finish = 2025-09-03
| | | F        11:01:37.518603956 UTC , thread_cap_info = ("ThreadId 83", 0, False)}
| | | F        
| | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | E      = 4 , total_length = 43} , self = 57 , parent = Nothing , duration = 0.229554483000
| | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:37.245480048
| | | | E      UTC , finish = 2025-09-03 11:01:37.475034531 UTC , thread_cap_info = ("ThreadId
| | | | E      88", 3, False)}
| | | | E      
F | | | |      
S | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | |      = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
S | | | |      alphabet_size = 4 , total_length = 47} , self = 63 , parent = Nothing ,
S | | | |      duration = 0.228020579000 , status = Success , start = 2025-09-03 11:01:37.258967072
S | | | |      UTC , finish = 2025-09-03 11:01:37.486987651 UTC , thread_cap_info = ("ThreadId
S | | | |      89", 3, False)}
S | | | |      
| | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | | F    = 162} , self = 69 , parent = Nothing , duration = 0.250917543000 , status
| | | | | F    = Fail , start = 2025-09-03 11:01:37.26669439 UTC , finish = 2025-09-03
| | | | | F    11:01:37.517611933 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| | | | | F    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | | | | | E  = 4 , total_length = 47} , self = 72 , parent = Nothing , duration = 0.312086430000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:37.28292483
| | | | | | E  UTC , finish = 2025-09-03 11:01:37.59501126 UTC , thread_cap_info = ("ThreadId
| | | | | | E  90", 3, False)}
| | | | | | E  
| F | | | | |  
|   S | | | |  
|     | E | |  
S     |   | |  
F     |   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F     |   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F     |   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 88 , num_strict_rules
F     |   | |  = 61 , num_top_rules = 61 , num_weak_rules = 27 , alphabet_size = 16 ,
F     |   | |  total_length = 578} , self = 81 , parent = Nothing , duration = 0.595766354000
F     |   | |  , status = Fail , start = 2025-09-03 11:01:37.489558647 UTC , finish =
F     |   | |  2025-09-03 11:01:38.085325001 UTC , thread_cap_info = ("ThreadId 116",
F     |   | |  0, False)}
F     |   | |  
|     |   F |  
|     F     |  
|           E  
| F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F            = 8 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 7 , alphabet_size
| F            = 4 , total_length = 37} , self = 77 , parent = Nothing , duration = 0.207073554000
| F            , status = Fail , start = 2025-09-03 11:01:37.625640648 UTC , finish =
| F            2025-09-03 11:01:37.832714202 UTC , thread_cap_info = ("ThreadId 126",
| F            3, False)}
| F            
| F            
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F            = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F            = 39} , self = 79 , parent = Nothing , duration = 0.100623653000 , status
| F            = Fail , start = 2025-09-03 11:01:37.866749785 UTC , finish = 2025-09-03
| F            11:01:37.967373438 UTC , thread_cap_info = ("ThreadId 132", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | F          = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | F          = 39} , self = 80 , parent = Nothing , duration = 0.173384551000 , status
| | F          = Fail , start = 2025-09-03 11:01:37.875971351 UTC , finish = 2025-09-03
| | F          11:01:38.049355902 UTC , thread_cap_info = ("ThreadId 133", 3, False)}
| | F          
| F |          
|   F          
F              
S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S              = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
S              = 4 , total_length = 39} , self = 82 , parent = Nothing , duration = 0.253379296000
S              , status = Success , start = 2025-09-03 11:01:38.085492379 UTC , finish
S              = 2025-09-03 11:01:38.338871675 UTC , thread_cap_info = ("ThreadId 138",
S              3, False)}
S              
| E            Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E            = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E            , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| E            = 4 , total_length = 39} , self = 84 , parent = Nothing , duration = 0.325320645000
| E            , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:38.122057792
| E            UTC , finish = 2025-09-03 11:01:38.447378437 UTC , thread_cap_info = ("ThreadId
| E            140", 3, False)}
| E            
S |            
  E            
