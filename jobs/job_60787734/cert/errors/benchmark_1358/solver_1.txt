last 790 length 3182
last 1675 length 7270
last 456 length 1835
CNF 790 vars 3182 clauses
CNF 456 vars 1835 clauses
last 430 length 1703
CNF 1675 vars 7270 clauses
last 694 length 2975
CNF 694 vars 2975 clauses
CNF 430 vars 1703 clauses
last 2409 length 10335
CNF 2409 vars 10335 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1865, clauses: 6654
last 1865 length 6654
CNF 1865 vars 6654 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1865, clauses: 6654, status: Satisfied, time: 0.125744594s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2589, clauses: 9560
last 2589 length 9560
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5792, clauses: 23923
last 5792 length 23923
CNF 2589 vars 9560 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7134, clauses: 29482
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2589, clauses: 9560, status: Satisfied, time: 0.068054225s
last 7134 length 29482
CNF 7134 vars 29482 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7134, clauses: 29482, status: Satisfied, time: 0.024881419s
last 3544 length 14736
last 6477 length 26870
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a] -> [b, c, b] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [a] -> [b, c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [a] -> [b, c, b] {- Mirror (Input 1) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a] -> [b, c, b] {- Input 1 -}
  [a, b, b] -> [b, b, a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c, b] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c, b] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 7A 7A 8A - \
        | 7A 7A 8A - |
        | 7A 7A 8A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a] ->= [b, c, b] {- DP Nontop (Input 1) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 6477 vars 26870 clauses


**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F          = 70 , parent = Nothing , duration = 0.361910712000 , status = Fail , start
F          = 2025-09-03 11:47:07.505833367 UTC , finish = 2025-09-03 11:47:07.867744079
F          UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F          
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| S        = 4 , total_length = 29} , self = 61 , parent = Nothing , duration = 0.153281938000
| S        , status = Success , start = 2025-09-03 11:47:07.553180865 UTC , finish
| S        = 2025-09-03 11:47:07.706462803 UTC , thread_cap_info = ("ThreadId 100",
| S        0, False)}
| S        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | S      alphabet_size = 5 , total_length = 44} , self = 66 , parent = Nothing ,
| | S      duration = 0.242536385000 , status = Success , start = 2025-09-03 11:47:07.553445597
| | S      UTC , finish = 2025-09-03 11:47:07.795981982 UTC , thread_cap_info = ("ThreadId
| | S      101", 0, False)}
| | S      
| | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | S    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | S    = 5 , total_length = 44} , self = 68 , parent = Nothing , duration = 0.244895464000
| | | S    , status = Success , start = 2025-09-03 11:47:07.576147204 UTC , finish
| | | S    = 2025-09-03 11:47:07.821042668 UTC , thread_cap_info = ("ThreadId 105",
| | | S    0, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | E  = 4 , total_length = 29} , self = 63 , parent = Nothing , duration = 0.205797694000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:47:07.589473904
| | | | E  UTC , finish = 2025-09-03 11:47:07.795271598 UTC , thread_cap_info = ("ThreadId
| | | | E  106", 0, False)}
| | | | E  
| S | | |  
|   | | E  
|   S |    
|     S    
F          
