last 3493 length 14763
CNF 3493 vars 14763 clauses
last 3355 length 18212
last 3283 length 13096
last 3515 length 21316
CNF 3355 vars 18212 clauses
CNF 3283 vars 13096 clauses
CNF 3515 vars 21316 clauses
[Info] pool sizes (success) 36145 seen 17581 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18586, clauses: 66571
last 18586 length 66571
**************************************************
summary
**************************************************
SRS with 32 rules on 19 letters       looping derivation
from
  [B, ABBA, b, b, a, b, b, a]
to
  [BB, B, ABBA, b, b, a, b, b, a, a, b, b, a]
via 18 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [B, a] -> [B, A] {- Input 0 -}
  [B, b] -> [BB] {- Input 1 -}
  [BB, a] -> [BBA] {- Input 2 -}
  [BB, b] -> [BB, B] {- Input 3 -}
  [BBA, a] -> [BBA, A] {- Input 4 -}
  [BBA, b] -> [BBAB] {- Input 5 -}
  [BBAB, a] -> [BBAB, A] {- Input 6 -}
  [BBAB, b] -> [BBABB] {- Input 7 -}
  [BBABB, a] -> [BBABBA] {- Input 8 -}
  [BBABB, b] -> [BBABB, B] {- Input 9 -}
  [BBABBA, a] -> [BBABBAA] {- Input 10 -}
  [BBABBA, b] -> [BBABBA, B] {- Input 11 -}
  [BBABBAA, a] -> [BBABBAA, A] {- Input 12 -}
  [BBABBAA, b] -> [BBABBAAB] {- Input 13 -}
  [BBABBAAB, a] -> [BBABBAAB, A] {- Input 14 -}
  [BBABBAAB, b] -> [BBABBAABB] {- Input 15 -}
  [BBABBAABB, a] -> [BBABBAABBA] {- Input 16 -}
  [BBABBAABB, b] -> [BBABBAABB, B] {- Input 17 -}
  [BBABBAABBA] -> [a, b, b, a, b, b, a] {- Input 18 -}
  [A, a] -> [A, A] {- Input 19 -}
  [A, b] -> [AB] {- Input 20 -}
  [AB, a] -> [AB, A] {- Input 21 -}
  [AB, b] -> [ABB] {- Input 22 -}
  [ABB, a] -> [ABBA] {- Input 23 -}
  [ABB, b] -> [ABB, B] {- Input 24 -}
  [ABBA, a] -> [ABBA, A] {- Input 25 -}
  [ABBA, b] -> [ABBAB] {- Input 26 -}
  [ABBAB, a] -> [ABBAB, A] {- Input 27 -}
  [ABBAB, b] -> [ABBABB] {- Input 28 -}
  [ABBABB, a] -> [ABBABBA] {- Input 29 -}
  [ABBABB, b] -> [ABBABB, B] {- Input 30 -}
  [ABBABBA] -> [b, b, a, b, b, a, a, b, b, a] {- Input 31 -}
reason
  Nontermination
    Derive   { from = [B, ABBA, b, b, a, b, b, a], via = [(Step   { rule = 26, position = 1}, [B, ABBAB, b, a, b, b, a]), (Step   { rule = 28, position = 1}, [B, ABBABB, a, b, b, a]), (Step   { rule = 29, position = 1}, [B, ABBABBA, b, b, a]), (Step   { rule = 31, position = 1}, [B, b, b, a, b, b, a, a, b, b, a, b, b, a]), (Step   { rule = 1, position = 0}, [BB, b, a, b, b, a, a, b, b, a, b, b, a]), (Step   { rule = 3, position = 0}, [BB, B, a, b, b, a, a, b, b, a, b, b, a]), (Step   { rule = 0, position = 1}, [BB, B, A, b, b, a, a, b, b, a, b, b, a]), (Step   { rule = 20, position = 2}, [BB, B, AB, b, a, a, b, b, a, b, b, a]), (Step   { rule = 22, position = 2}, [BB, B, ABB, a, a, b, b, a, b, b, a]), (Step   { rule = 23, position = 2}, [BB, B, ABBA, a, b, b, a, b, b, a]), (Step   { rule = 25, position = 2}, [BB, B, ABBA, A, b, b, a, b, b, a]), (Step   { rule = 20, position = 3}, [BB, B, ABBA, AB, b, a, b, b, a]), (Step   { rule = 22, position = 3}, [BB, B, ABBA, ABB, a, b, b, a]), (Step   { rule = 23, position = 3}, [BB, B, ABBA, ABBA, b, b, a]), (Step   { rule = 26, position = 3}, [BB, B, ABBA, ABBAB, b, a]), (Step   { rule = 28, position = 3}, [BB, B, ABBA, ABBABB, a]), (Step   { rule = 29, position = 3}, [BB, B, ABBA, ABBABBA]), (Step   { rule = 31, position = 3}, [BB, B, ABBA, b, b, a, b, b, a, a, b, b, a])], to = [BB, B, ABBA, b, b, a, b, b, a, a, b, b, a]}

**************************************************
skeleton: (32,19)\Loop{18}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
S              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
S              , closure = Forward\n , start_strict_only = True\n , max_closure_length
S              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
S              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
S              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
S              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
S              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
S              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
S              = True})" , input_size = Size { num_rules = 32 , num_strict_rules = 32
S              , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 19 , total_length
S              = 124} , self = 40 , parent = Nothing , duration = 0.466058316000 , status
S              = Success , start = 2025-09-03 11:21:46.539274512 UTC , finish = 2025-09-03
S              11:21:47.005332828 UTC , thread_cap_info = ("ThreadId 37", 3, False)}
S              
| S            Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| S            , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| S            , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| S            = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| S            , cpf = True}" , input_size = Size { num_rules = 32 , num_strict_rules
| S            = 32 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 19 , total_length
| S            = 124} , self = 36 , parent = Nothing , duration = 0.172570884000 , status
| S            = Success , start = 2025-09-03 11:21:46.539313939 UTC , finish = 2025-09-03
| S            11:21:46.711884823 UTC , thread_cap_info = ("ThreadId 28", 2, False)}
| S            
| | S          Info { what = "Tiling\n { method = All\n , width = 2\n , state_type = Best\n
| | S          , map_type = Enum\n , unlabel = Never\n , print_completion_steps = False\n
| | S          , print_tiles = False\n , max_num_tiles = Just 10000\n , max_num_rules
| | S          = Just 100000\n , verbose = False\n , tracing = False\n , draw = False\n
| | S          , cpf = True}" , input_size = Size { num_rules = 32 , num_strict_rules
| | S          = 32 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 19 , total_length
| | S          = 124} , self = 35 , parent = Nothing , duration = 0.170646490000 , status
| | S          = Success , start = 2025-09-03 11:21:46.539316849 UTC , finish = 2025-09-03
| | S          11:21:46.709963339 UTC , thread_cap_info = ("ThreadId 40", 1, False)}
| | S          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 41 , num_strict_rules
| | | F        = 9 , num_top_rules = 9 , num_weak_rules = 32 , alphabet_size = 22 , total_length
| | | F        = 175} , self = 38 , parent = Nothing , duration = 0.396909879000 , status
| | | F        = Fail , start = 2025-09-03 11:21:46.576220039 UTC , finish = 2025-09-03
| | | F        11:21:46.973129918 UTC , thread_cap_info = ("ThreadId 69", 0, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 41 , num_strict_rules
| | | | F      = 9 , num_top_rules = 9 , num_weak_rules = 32 , alphabet_size = 22 , total_length
| | | | F      = 175} , self = 41 , parent = Nothing , duration = 0.449437397000 , status
| | | | F      = Fail , start = 2025-09-03 11:21:46.576230224 UTC , finish = 2025-09-03
| | | | F      11:21:47.025667621 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| | | | F      
| | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | | F    = 43 , num_top_rules = 43 , num_weak_rules = 32 , alphabet_size = 34 ,
| | | | | F    total_length = 268} , self = 39 , parent = Nothing , duration = 0.418108050000
| | | | | F    , status = Fail , start = 2025-09-03 11:21:46.586808717 UTC , finish =
| | | | | F    2025-09-03 11:21:47.004916767 UTC , thread_cap_info = ("ThreadId 71", 0,
| | | | | F    False)}
| | | | | F    
| | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | | | F  = 43 , num_top_rules = 43 , num_weak_rules = 32 , alphabet_size = 34 ,
| | | | | | F  total_length = 268} , self = 37 , parent = Nothing , duration = 0.157307432000
| | | | | | F  , status = Fail , start = 2025-09-03 11:21:46.605301524 UTC , finish =
| | | | | | F  2025-09-03 11:21:46.762608956 UTC , thread_cap_info = ("ThreadId 72", 0,
| | | | | | F  False)}
| | | | | | F  
| | S | | | |  
| S   | | | |  
|     | | | F  
|     F | |    
|       | F    
S       |      
        F      
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10563, clauses: 37646
last 10563 length 37646
CNF 18586 vars 66571 clauses
