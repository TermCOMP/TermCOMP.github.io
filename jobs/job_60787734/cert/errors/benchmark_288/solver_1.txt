last 596 length 2500
CNF 596 vars 2500 clauses
last 641 length 2733
CNF 641 vars 2733 clauses
last 645 length 2788
last 859 length 3756
CNF 645 vars 2788 clauses
last 2322 length 10163
CNF 2322 vars 10163 clauses
CNF 859 vars 3756 clauses
last 2326 length 10277
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1549, clauses: 5635
last 1549 length 5635
CNF 2326 vars 10277 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1528, clauses: 5584
CNF 1549 vars 5635 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5561, clauses: 23265
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5557, clauses: 23233
last 1528 length 5584
last 5561 length 23265
last 5557 length 23233
CNF 1528 vars 5584 clauses
CNF 5557 vars 23233 clauses
CNF 5561 vars 23265 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1528, clauses: 5584, status: Unsatisfied, time: 0.070176363s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1549, clauses: 5635, status: Satisfied, time: 0.146694443s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3328, clauses: 13846
last 3328 length 13846
CNF 3328 vars 13846 clauses
last 2764 length 11854
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       weights
SRS with 1 strict rules and 2 weak rules on 3 letters       EDG
SRS with 1 strict rules and 2 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 0, 0, 0] -> [0, 1, 0, 1] {- Input 0 -}
  [1, 0, 1, 0] -> [0, 1, 0, 0] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [0, 1, 0, 1] {- DP Nontop (Input 0) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Input 1) -}
  [1#, 0, 1, 0] |-> [1#, 0, 0] {- DP (Top 1) (Input 1) -}
  [1#, 0, 1, 0] |-> [0#, 1, 0, 0] {- DP (Top 0) (Input 1) -}
  [1#, 0, 1, 0] |-> [0#, 0] {- DP (Top 2) (Input 1) -}
  [0#, 0, 0, 0] |-> [1#] {- DP (Top 3) (Input 0) -}
  [0#, 0, 0, 0] |-> [1#, 0, 1] {- DP (Top 1) (Input 0) -}
  [0#, 0, 0, 0] |-> [0#, 1] {- DP (Top 2) (Input 0) -}
  [0#, 0, 0, 0] |-> [0#, 1, 0, 1] {- DP (Top 0) (Input 0) -}
reason
  (1, 2/1)
  (0, 2/1)
  (1#, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [0, 1, 0, 1] {- DP Nontop (Input 0) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Input 1) -}
  [0#, 0, 0, 0] |-> [0#, 1, 0, 1] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 0, 0, 0] |-> [0#, 1, 0, 1] {- DP (Top 0) (Input 0) -}
  [0, 0, 0, 0] ->= [0, 1, 0, 1] {- DP Nontop (Input 0) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Input 1) -}
reason
  ( 1
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 0
  , Wk  / 3A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 0#
  , Wk  / 4A 4A 4A - \
        | 4A 4A 4A - |
        | 4A 4A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [0, 0, 0, 0] ->= [0, 1, 0, 1] {- DP Nontop (Input 0) -}
  [1, 0, 1, 0] ->= [0, 1, 0, 0] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Deepee(7/2,4)\Weight\EDG(1/2,3)\Matrix{\Arctic}{3}(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 2764 vars 11854 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F            , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F            = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F            , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F            = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F            = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 16} , self
F            = 46 , parent = Nothing , duration = 0.115452891000 , status = Fail , start
F            = 2025-09-03 11:22:16.984279644 UTC , finish = 2025-09-03 11:22:17.099732535
F            UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F          = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F          = 80} , self = 44 , parent = Nothing , duration = 0.108719279000 , status
| F          = Fail , start = 2025-09-03 11:22:16.985515157 UTC , finish = 2025-09-03
| F          11:22:17.094234436 UTC , thread_cap_info = ("ThreadId 67", 2, False)}
| F          
| | F        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | F        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | F        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| | F        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| | F        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| | F        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| | F        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| | F        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | F        = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | F        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | F        = 16} , self = 47 , parent = Nothing , duration = 0.115729342000 , status
| | F        = Fail , start = 2025-09-03 11:22:16.990907743 UTC , finish = 2025-09-03
| | F        11:22:17.106637085 UTC , thread_cap_info = ("ThreadId 75", 1, False)}
| | F        
| | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F      = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F      = 80} , self = 52 , parent = Nothing , duration = 0.162778655000 , status
| | | F      = Fail , start = 2025-09-03 11:22:17.002085426 UTC , finish = 2025-09-03
| | | F      11:22:17.164864081 UTC , thread_cap_info = ("ThreadId 65", 2, False)}
| | | F      
| | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S    = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | S    = 3 , total_length = 24} , self = 63 , parent = Nothing , duration = 0.195798726000
| | | | S    , status = Success , start = 2025-09-03 11:22:17.055039098 UTC , finish
| | | | S    = 2025-09-03 11:22:17.250837824 UTC , thread_cap_info = ("ThreadId 86",
| | | | S    0, False)}
| | | | S    
| | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | | | E  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | | | E  = 3 , total_length = 24} , self = 66 , parent = Nothing , duration = 0.224314173000
| | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:22:17.062821614
| | | | | E  UTC , finish = 2025-09-03 11:22:17.287135787 UTC , thread_cap_info = ("ThreadId
| | | | | E  88", 0, False)}
| | | | | E  
| F | | | |  
| F | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F | | | |  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| F | | | |  = 3 , total_length = 24} , self = 62 , parent = Nothing , duration = 0.147965041000
| F | | | |  , status = Fail , start = 2025-09-03 11:22:17.096939746 UTC , finish =
| F | | | |  2025-09-03 11:22:17.244904787 UTC , thread_cap_info = ("ThreadId 91", 0,
| F | | | |  False)}
| F | | | |  
F | | | | |  
  | F | | |  
  |   F | |  
  F     | |  
        S |  
          E  
last 2803 length 12374
