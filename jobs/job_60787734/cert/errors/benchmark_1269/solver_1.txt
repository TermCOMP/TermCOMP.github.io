last 719 length 3236
CNF 719 vars 3236 clauses
last 487 length 2126
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1973, clauses: 7029
last 1973 length 7029
CNF 487 vars 2126 clauses
last 421 length 1674
last 477 length 1970
CNF 421 vars 1674 clauses
CNF 477 vars 1970 clauses
CNF 1973 vars 7029 clauses
last 3584 length 17666
CNF 3584 vars 17666 clauses
last 2668 length 12417
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1982, clauses: 6999
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1973, clauses: 7029, status: Unsatisfied, time: 0.082365021s
CNF 2668 vars 12417 clauses
last 1982 length 6999
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26463
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6384, clauses: 26459
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3967, clauses: 15996
last 6382 length 26463
last 6384 length 26459
last 3967 length 15996
CNF 1982 vars 6999 clauses
CNF 6382 vars 26463 clauses
CNF 3967 vars 15996 clauses
CNF 6384 vars 26459 clauses
last 6675 length 30739
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26463, status: Satisfied, time: 0.071241449s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1982, clauses: 6999, status: Unsatisfied, time: 0.228872046s
last 8874 length 38065
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6384, clauses: 26459, status: Satisfied, time: 0.16046906s
CNF 6675 vars 30739 clauses
CNF 8874 vars 38065 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 7 strict rules and 5 weak rules on 6 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, b, c, b, a, a] {- Input 1 -}
  [b, b] -> [] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, c] -> [c, b, c, b, a, a] {- Input 1 -}
  [a, b, b] -> [a] {- Input 2 -}
  [b, b, b] -> [b] {- Input 2 -}
  [c, b, b] -> [c] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [a, a, b, c, b, c] {- Mirror (Input 1) -}
  [b, b, a] -> [a] {- Mirror (Input 2) -}
  [b, b, b] -> [b] {- Mirror (Input 2) -}
  [b, b, c] -> [c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [a#] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [c#, a] |-> [a#, a, b, c, b, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [a#, b, c, b, c] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, c] {- DP (Top 4) (Mirror (Input 1)) -}
  [c#, a] |-> [b#, c, b, c] {- DP (Top 2) (Mirror (Input 1)) -}
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, b, c] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 2/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, b, c] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 5) (Mirror (Input 1)) -}
  [c#, a] |-> [c#, b, c] {- DP (Top 3) (Mirror (Input 1)) -}
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / -  0A 0A \
        | 0A 1A 1A |
        \ -  -  0A / )
  ( b
  , Wk  / -  0A 0A \
        | 0A -  -  |
        \ -  -  0A / )
  ( c
  , Wk  / -1A 0A 0A \
        | 0A  1A 1A |
        \ -   -  0A / )
  ( c#
  , Wk  / - 0A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, a, b, c, b, c] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Context\Mirror(5,3)\Deepee(7/5,6)\Weight\EDG(2/5,4)\Matrix{\ArcticBZ}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.575978540000
  min duration 0.540412368000
  total durat. 1.116390908000
**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F          = 162} , self = 59 , parent = Nothing , duration = 0.143758904000 , status
F          = Fail , start = 2025-09-03 11:24:47.639133713 UTC , finish = 2025-09-03
F          11:24:47.782892617 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 63 , parent = Nothing , duration = 0.302608089000 , status
| F        = Fail , start = 2025-09-03 11:24:47.657651914 UTC , finish = 2025-09-03
| F        11:24:47.960260003 UTC , thread_cap_info = ("ThreadId 72", 0, False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | F      = 4 , total_length = 30} , self = 62 , parent = Nothing , duration = 0.206367743000
| | F      , status = Fail , start = 2025-09-03 11:24:47.70141081 UTC , finish = 2025-09-03
| | F      11:24:47.907778553 UTC , thread_cap_info = ("ThreadId 94", 3, False)}
| | F      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | F    = 4 , total_length = 29} , self = 66 , parent = Nothing , duration = 0.579713898000
| | | F    , status = Fail , start = 2025-09-03 11:24:47.741088647 UTC , finish =
| | | F    2025-09-03 11:24:48.320802545 UTC , thread_cap_info = ("ThreadId 103",
| | | F    3, False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | S  = 4 , total_length = 30} , self = 64 , parent = Nothing , duration = 0.540412368000
| | | | S  , status = Success , start = 2025-09-03 11:24:47.758416481 UTC , finish
| | | | S  = 2025-09-03 11:24:48.298828849 UTC , thread_cap_info = ("ThreadId 104",
| | | | S  3, False)}
| | | | S  
F | | | |  
S | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
S | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
S | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
S | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
S | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
S | | | |  = 4 , total_length = 29} , self = 68 , parent = Nothing , duration = 0.575978540000
S | | | |  , status = Success , start = 2025-09-03 11:24:47.828788954 UTC , finish
S | | | |  = 2025-09-03 11:24:48.404767494 UTC , thread_cap_info = ("ThreadId 113",
S | | | |  3, False)}
S | | | |  
| | F | |  
| | E | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | E | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | E | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | E | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | E | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | E | |  = 4 , total_length = 30} , self = 67 , parent = Nothing , duration = 0.490609652000
| | E | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:24:47.907806723
| | E | |  UTC , finish = 2025-09-03 11:24:48.398416375 UTC , thread_cap_info = ("ThreadId
| | E | |  114", 3, False)}
| | E | |  
| F | | |  
|   | | S  
|   | F    
|   E      
S          
