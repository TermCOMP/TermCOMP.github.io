last 697 length 3127
CNF 697 vars 3127 clauses
last 1839 length 8107
last 1655 length 7737
CNF 1655 vars 7737 clauses
CNF 1839 vars 8107 clauses
last 1489 length 7436
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1820, clauses: 6510
last 1820 length 6510
CNF 1489 vars 7436 clauses
CNF 1820 vars 6510 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3112, clauses: 12109
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8815, clauses: 36795
last 3112 length 12109
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1820, clauses: 6510, status: Unsatisfied, time: 0.227144558s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6790, clauses: 28303
last 8815 length 36795
last 6790 length 28303
CNF 8815 vars 36795 clauses
CNF 3112 vars 12109 clauses
CNF 6790 vars 28303 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4028, clauses: 16604
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8815, clauses: 36795, status: Satisfied, time: 0.127226603s
last 8098 length 53019
last 4028 length 16604
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6790, clauses: 28303, status: Satisfied, time: 0.149302355s
last 9206 length 81738
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 9113 length 67030
last 13208 length 69699
last 13179 length 61379
last 1473 length 6947
last 1667 length 7357
**************************************************
CNF 1473 vars 6947 clauses
CNF 1667 vars 7357 clauses
summary
**************************************************
SRS with 2 rules on 3 letters       DP
SRS with 4 strict rules and 2 weak rules on 4 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 2 weak rules on 4 letters       Usable
  SRS with 1 rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 2 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, b, a, a] -> [c, b, a, b, a] {- Input 0 -}
  [a, c, b] -> [a, a, b, c, b, a] {- Input 1 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, a, a] ->= [c, b, a, b, a] {- DP Nontop (Input 0) -}
  [a, c, b] ->= [a, a, b, c, b, a] {- DP Nontop (Input 1) -}
  [a#, b, a, a] |-> [a#, b, a] {- DP (Top 2) (Input 0) -}
  [a#, c, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, c, b] |-> [a#, a, b, c, b, a] {- DP (Top 0) (Input 1) -}
  [a#, c, b] |-> [a#, b, c, b, a] {- DP (Top 1) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, c, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a, b, a, a] ->= [c, b, a, b, a] {- DP Nontop (Input 0) -}
  [a, c, b] ->= [a, a, b, c, b, a] {- DP Nontop (Input 1) -}
reason
  remove un-usable
    SRS
      [a, b, a, a] ->= [c, b, a, b, a] {- DP Nontop (Input 0) -}
      [a, c, b] ->= [a, a, b, c, b, a] {- DP Nontop (Input 1) -}
   property Termination
has value Just True
for SRS
  [a#, c, b] |-> [a#] {- DP (Top 5) (Input 1) -}
reason
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [a#, b, a, a] |-> [a#, b, a] {- DP (Top 2) (Input 0) -}
  [a, b, a, a] ->= [c, b, a, b, a] {- DP Nontop (Input 0) -}
  [a, c, b] ->= [a, a, b, c, b, a] {- DP Nontop (Input 1) -}
reason
  ( a
  , Wk  / 0A -  -1A \
        | -  1A 0A  |
        \ -  -  0A  / )
  ( b
  , Wk  / 0A -   0A  \
        | -  -2A -2A |
        \ -  -   0A  / )
  ( c
  , Wk  / - -  0A \
        | - 1A 0A |
        \ - -  0A / )
  ( a#
  , Wk  / - 2A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [a, b, a, a] ->= [c, b, a, b, a] {- DP Nontop (Input 0) -}
  [a, c, b] ->= [a, a, b, c, b, a] {- DP Nontop (Input 1) -}
reason
  EDG

**************************************************
skeleton: (2,3)\Deepee(4/2,4)\EDG[(1/2,4)\Usable(1,3)\Weight(0,0)\EDG[],(1/2,4)\Matrix{\ArcticBZ}{3}(0/2,3)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 13179 vars 61379 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 9113 vars 67030 clauses

CNF 13208 vars 69699 clauses
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.689510781000
  min duration 0.481015313000
  total durat. 1.170526094000
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.823049958000
  min duration 0.288767404000
  total durat. 1.111817362000
**************************************************
F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F        = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size = 5 , total_length
F        = 62} , self = 57 , parent = Nothing , duration = 0.120725846000 , status
F        = Fail , start = 2025-09-03 13:28:29.952322198 UTC , finish = 2025-09-03
F        13:28:30.073048044 UTC , thread_cap_info = ("ThreadId 75", 0, False)}
F        
| F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| F      = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F      = 25} , self = 61 , parent = Nothing , duration = 0.283033021000 , status
| F      = Fail , start = 2025-09-03 13:28:29.964782693 UTC , finish = 2025-09-03
| F      13:28:30.247815714 UTC , thread_cap_info = ("ThreadId 77", 0, False)}
| F      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F    = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size = 5 , total_length
| | F    = 62} , self = 58 , parent = Nothing , duration = 0.127716851000 , status
| | F    = Fail , start = 2025-09-03 13:28:29.964786409 UTC , finish = 2025-09-03
| | F    13:28:30.09250326 UTC , thread_cap_info = ("ThreadId 74", 0, False)}
| | F    
| | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F  = 3 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | F  = 4 , total_length = 25} , self = 63 , parent = Nothing , duration = 0.288767404000
| | | F  , status = Fail , start = 2025-09-03 13:28:30.047390179 UTC , finish =
| | | F  2025-09-03 13:28:30.336157583 UTC , thread_cap_info = ("ThreadId 101",
| | | F  0, False)}
| | | F  
F | | |  
F | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |  = 8 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
F | | |  = 5 , total_length = 62} , self = 66 , parent = Nothing , duration = 0.823049958000
F | | |  , status = Fail , start = 2025-09-03 13:28:30.073128566 UTC , finish =
F | | |  2025-09-03 13:28:30.896178524 UTC , thread_cap_info = ("ThreadId 102",
F | | |  0, False)}
F | | |  
| | F |  
| | S |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | S |  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 2 , alphabet_size
| | S |  = 5 , total_length = 62} , self = 64 , parent = Nothing , duration = 0.481015313000
| | S |  , status = Success , start = 2025-09-03 13:28:30.113420512 UTC , finish
| | S |  = 2025-09-03 13:28:30.594435825 UTC , thread_cap_info = ("ThreadId 107",
| | S |  0, False)}
| | S |  
| F | |  
| S | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| S | |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| S | |  = 4 , total_length = 25} , self = 71 , parent = Nothing , duration = 0.689510781000
| S | |  , status = Success , start = 2025-09-03 13:28:30.247839661 UTC , finish
| S | |  = 2025-09-03 13:28:30.937350442 UTC , thread_cap_info = ("ThreadId 111",
| S | |  0, False)}
| S | |  
| | | F  
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | | E  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 2 , alphabet_size
| | | E  = 4 , total_length = 25} , self = 73 , parent = Nothing , duration = 0.607563824000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:28:30.336195266
| | | E  UTC , finish = 2025-09-03 13:28:30.94375909 UTC , thread_cap_info = ("ThreadId
| | | E  113", 0, False)}
| | | E  
| | S |  
F |   |  
  S   |  
      E  
