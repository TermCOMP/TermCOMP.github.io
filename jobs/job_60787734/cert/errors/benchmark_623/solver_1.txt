last 10210 length 57060
CNF 10210 vars 57060 clauses
last 7531 length 58837
CNF 7531 vars 58837 clauses
last 8841 length 64850
CNF 8841 vars 64850 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3312, clauses: 13436
last 3312 length 13436
CNF 3312 vars 13436 clauses
last 17072 length 95155
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3312, clauses: 13436, status: Satisfied, time: 0.354933786s
CNF 17072 vars 95155 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4644, clauses: 20363
last 4644 length 20363
CNF 4644 vars 20363 clauses
**************************************************
summary
**************************************************
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 12 strict rules and 8 weak rules on 4 letters       EDG
SRS with 3 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 8 weak rules on 4 letters       EDG
SRS with 1 strict rules and 8 weak rules on 4 letters       Usable
SRS with 1 rules on 4 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 4 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 5 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 6 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 7 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [1, 2, 1, 0] -> [2, 1, 0, 2, 1, 0, 1, 1, 2, 1] {- Mirror (Input 0) -}
  [1, 2, 1, 0] -> [2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1] {- Mirror (Input 1) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 2) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 3) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 4) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 5) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 6) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 7) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 7)) -}
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 30) (Mirror (Input 7)) , DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 27) (Mirror (Input 7)) , DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 2, 1] {- Many [ DP (Top 28) (Mirror (Input 7)) , DP (Top 25) (Mirror (Input 6)) , DP (Top 22) (Mirror (Input 5)) , DP (Top 19) (Mirror (Input 4)) , DP (Top 16) (Mirror (Input 3)) , DP (Top 13) (Mirror (Input 2)) , DP (Top 10) (Mirror (Input 1)) , DP (Top 7) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 0, 1, 1, 2, 1] {- Many [ DP (Top 25) (Mirror (Input 7)) , DP (Top 22) (Mirror (Input 6)) , DP (Top 19) (Mirror (Input 5)) , DP (Top 16) (Mirror (Input 4)) , DP (Top 13) (Mirror (Input 3)) , DP (Top 10) (Mirror (Input 2)) , DP (Top 7) (Mirror (Input 1)) , DP (Top 4) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 22) (Mirror (Input 7)) , DP (Top 19) (Mirror (Input 6)) , DP (Top 16) (Mirror (Input 5)) , DP (Top 13) (Mirror (Input 4)) , DP (Top 10) (Mirror (Input 3)) , DP (Top 7) (Mirror (Input 2)) , DP (Top 4) (Mirror (Input 1)) , DP (Top 1) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 19) (Mirror (Input 7)) , DP (Top 16) (Mirror (Input 6)) , DP (Top 13) (Mirror (Input 5)) , DP (Top 10) (Mirror (Input 4)) , DP (Top 7) (Mirror (Input 3)) , DP (Top 4) (Mirror (Input 2)) , DP (Top 1) (Mirror (Input 1)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 16) (Mirror (Input 7)) , DP (Top 13) (Mirror (Input 6)) , DP (Top 10) (Mirror (Input 5)) , DP (Top 7) (Mirror (Input 4)) , DP (Top 4) (Mirror (Input 3)) , DP (Top 1) (Mirror (Input 2)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 13) (Mirror (Input 7)) , DP (Top 10) (Mirror (Input 6)) , DP (Top 7) (Mirror (Input 5)) , DP (Top 4) (Mirror (Input 4)) , DP (Top 1) (Mirror (Input 3)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 10) (Mirror (Input 7)) , DP (Top 7) (Mirror (Input 6)) , DP (Top 4) (Mirror (Input 5)) , DP (Top 1) (Mirror (Input 4)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 7) (Mirror (Input 7)) , DP (Top 4) (Mirror (Input 6)) , DP (Top 1) (Mirror (Input 5)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 4) (Mirror (Input 7)) , DP (Top 1) (Mirror (Input 6)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 7)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 30) (Mirror (Input 7)) , DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 27) (Mirror (Input 7)) , DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 2, 1] {- Many [ DP (Top 28) (Mirror (Input 7)) , DP (Top 25) (Mirror (Input 6)) , DP (Top 22) (Mirror (Input 5)) , DP (Top 19) (Mirror (Input 4)) , DP (Top 16) (Mirror (Input 3)) , DP (Top 13) (Mirror (Input 2)) , DP (Top 10) (Mirror (Input 1)) , DP (Top 7) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 7)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 1#
  , Wk  / 11A 13A 13A - \
        | 11A 13A 13A - |
        | 11A 13A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 30) (Mirror (Input 7)) , DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 7)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 30) (Mirror (Input 7)) , DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 7)) -}
reason
  remove un-usable
    SRS
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 7)) -}
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 30) (Mirror (Input 7)) , DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
reason
  (1, 1/1)
  (2, 1/1)
  (0, 1/1)
  (1#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(8,3)\Deepee(12/8,4)\EDG(3/8,4)\Matrix{\Arctic}{3}\EDG(1/8,4)\Usable(1,4)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.283233656000
  min duration 0.698917181000
  total durat. 1.982150837000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 17
      , num_strict_rules = 9
      , num_top_rules = 9
      , num_weak_rules = 8
      , alphabet_size = 4
      , total_length = 367}
    , self = 66
    , parent = Nothing
    , duration = 1.283233656000
    , status = Fail
    , start = 2025-09-03 12:26:13.449590958 UTC
    , finish = 2025-09-03 12:26:14.732824614 UTC
    , thread_cap_info = ("ThreadId 81", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.894470283000
  min duration 0.868487584000
  total durat. 1.762957867000
Except "AsyncCancelled" : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = True}"
  total number 1
  max duration 1.517462890000
  min duration 1.517462890000
  total durat. 1.517462890000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = True}"
    , input_size = Size
      { num_rules = 8
      , num_strict_rules = 8
      , num_top_rules = 0
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4644, clauses: 20363, status: Unsatisfied, time: 0.229660391s
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 196}
    , self = 67
    , parent = Nothing
    , duration = 1.517462890000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:26:13.311832704 UTC
    , finish = 2025-09-03 12:26:14.829295594 UTC
    , thread_cap_info = ("ThreadId 22", 3, False)}
**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = True}" , input_size = Size { num_rules = 8 , num_strict_rules = 8 , num_top_rules
E              = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 196} , self
E              = 67 , parent = Nothing , duration = 1.517462890000 , status = Except "AsyncCancelled"
E              , start = 2025-09-03 12:26:13.311832704 UTC , finish = 2025-09-03 12:26:14.829295594
E              UTC , thread_cap_info = ("ThreadId 22", 3, False)}
E              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| F            = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| F            = 216} , self = 55 , parent = Nothing , duration = 0.698917181000 , status
| F            = Fail , start = 2025-09-03 12:26:13.314328584 UTC , finish = 2025-09-03
| F            12:26:14.013245765 UTC , thread_cap_info = ("ThreadId 57", 0, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
| | F          = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | F          = 216} , self = 57 , parent = Nothing , duration = 0.868487584000 , status
| | F          = Fail , start = 2025-09-03 12:26:13.34929989 UTC , finish = 2025-09-03
| | F          12:26:14.217787474 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | F        = 9 , num_top_rules = 9 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | F        = 367} , self = 66 , parent = Nothing , duration = 1.283233656000 , status
| | | F        = Fail , start = 2025-09-03 12:26:13.449590958 UTC , finish = 2025-09-03
| | | F        12:26:14.732824614 UTC , thread_cap_info = ("ThreadId 81", 0, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 17 , num_strict_rules
| | | | F      = 9 , num_top_rules = 9 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | F      = 367} , self = 58 , parent = Nothing , duration = 0.894470283000 , status
| | | | F      = Fail , start = 2025-09-03 12:26:13.477622936 UTC , finish = 2025-09-03
| | | | F      12:26:14.372093219 UTC , thread_cap_info = ("ThreadId 82", 0, False)}
| | | | F      
| | | | | S    Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | S    verbose = False}" , input_size = Size { num_rules = 146 , num_strict_rules
| | | | | S    = 98 , num_top_rules = 98 , num_weak_rules = 48 , alphabet_size = 9 , total_length
| | | | | S    = 3300} , self = 52 , parent = Nothing , duration = 0.427132203000 , status
| | | | | S    = Success , start = 2025-09-03 12:26:13.489289658 UTC , finish = 2025-09-03
| | | | | S    12:26:13.916421861 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
| | | | | S    
| | | | | | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | S  verbose = False}" , input_size = Size { num_rules = 123 , num_strict_rules
| | | | | | S  = 75 , num_top_rules = 75 , num_weak_rules = 48 , alphabet_size = 10 ,
| | | | | | S  total_length = 2742} , self = 48 , parent = Nothing , duration = 0.123107005000
| | | | | | S  , status = Success , start = 2025-09-03 12:26:13.515601628 UTC , finish
| | | | | | S  = 2025-09-03 12:26:13.638708633 UTC , thread_cap_info = ("ThreadId 86",
| | | | | | S  3, False)}
| | | | | | S  
| | | | | | S  
| | | | | S    
| F | | |      
| S | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | | |      = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
| S | | |      alphabet_size = 4 , total_length = 216} , self = 59 , parent = Nothing
| S | | |      , duration = 0.545287890000 , status = Success , start = 2025-09-03 12:26:14.099657105
| S | | |      UTC , finish = 2025-09-03 12:26:14.644944995 UTC , thread_cap_info = ("ThreadId
| S | | |      105", 0, False)}
| S | | |      
| | F | |      
| | E | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| | E | |      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| | E | |      = 4 , total_length = 216} , self = 61 , parent = Nothing , duration = 0.491324001000
| | E | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:26:14.234409269
| | E | |      UTC , finish = 2025-09-03 12:26:14.72573327 UTC , thread_cap_info = ("ThreadId
| | E | |      108", 0, False)}
| | E | |      
| | | | F      
| S | |        
|   E |        
|     F        
E              
