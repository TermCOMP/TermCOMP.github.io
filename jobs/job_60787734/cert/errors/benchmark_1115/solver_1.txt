last 432 length 1691
last 359 length 1414
CNF 432 vars 1691 clauses
last 593 length 2402
CNF 359 vars 1414 clauses
last 524 length 2137
CNF 593 vars 2402 clauses
CNF 524 vars 2137 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1745, clauses: 6150
last 1745 length 6150
CNF 1745 vars 6150 clauses
last 4843 length 22960
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2155, clauses: 7705
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1745, clauses: 6150, status: Unsatisfied, time: 0.148517756s
CNF 4843 vars 22960 clauses
last 4012 length 17694
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5744, clauses: 23729
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5871, clauses: 24161
last 2155 length 7705
last 6381 length 27085
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3534, clauses: 13924
last 6884 length 32571
last 5744 length 23729
last 5871 length 24161
last 5447 length 24388
last 6689 length 28014
CNF 4012 vars 17694 clauses
CNF 2155 vars 7705 clauses
last 3534 length 13924
CNF 6381 vars 27085 clauses
CNF 5871 vars 24161 clauses
CNF 5744 vars 23729 clauses
CNF 6884 vars 32571 clauses
CNF 5447 vars 24388 clauses
CNF 6689 vars 28014 clauses
CNF 3534 vars 13924 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2155, clauses: 7705, status: Satisfied, time: 0.349154953s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10751, clauses: 39708
last 10751 length 39708
**************************************************
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5744, clauses: 23729, status: Unsatisfied, time: 0.984695494s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3534, clauses: 13924, status: Unsatisfied, time: 0.984518989s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13031, clauses: 49866
CNF 10751 vars 39708 clauses
summarylast 13031 length 49866

**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 5 weak rules on 5 letters       weights
SRS with 1 strict rules and 5 weak rules on 4 letters       EDG
SRS with 1 strict rules and 5 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [c, b, a, a] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a, a] -> [a, a, b, c] {- Mirror (Input 1) -}
  [c, b] -> [b, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, a, b] -> [c, b, a, a] {- Input 1 -}
  [b, c] -> [a, b] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  (a, 0/1)
  (b, 1/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [b#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [b#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [a#, b] {- DP (Top 0) (Input 2) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [b#, a, a] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 1/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Input 0) -}
      [a, b] ->= [b] {- DP Nontop (Input 0) -}
      [a, c] ->= [c] {- DP Nontop (Input 0) -}
      [a, a, b] ->= [c, b, a, a] {- DP Nontop (Input 1) -}
      [b, c] ->= [a, b] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [b#, c] |-> [b#] {- DP (Top 1) (Input 2) -}
reason
  (c, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(3/5,5)\Matrix{\Arctic}{3}(2/5,5)\Weight\EDG(1/5,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.804801265000
  min duration 0.034844547000
  total durat. 2.156753499000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.657983304000
  min duration 0.067818862000
  total durat. 1.865414163000
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F                  = 38 , parent = Nothing , duration = 0.101623246000 , status = Fail , start
F                  = 2025-09-03 11:01:29.672049341 UTC , finish = 2025-09-03 11:01:29.773672587
F                  UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 162} , self = 61 , parent = Nothing , duration = 0.804801265000 , status
| F                = Fail , start = 2025-09-03 11:01:29.689882512 UTC , finish = 2025-09-03
| F                11:01:30.494683777 UTC , thread_cap_info = ("ThreadId 63", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 162} , self = 60 , parent = Nothing , duration = 0.617378324000 , status
| | F              = Fail , start = 2025-09-03 11:01:29.694324351 UTC , finish = 2025-09-03
| | F              11:01:30.311702675 UTC , thread_cap_info = ("ThreadId 65", 0, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F            = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F            = 33} , self = 48 , parent = Nothing , duration = 0.102643067000 , status
| | | F            = Fail , start = 2025-09-03 11:01:29.72401625 UTC , finish = 2025-09-03
| | | F            11:01:29.826659317 UTC , thread_cap_info = ("ThreadId 74", 2, False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | F          = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F          = 33} , self = 47 , parent = Nothing , duration = 0.102560907000 , status
| | | | F          = Fail , start = 2025-09-03 11:01:29.724026995 UTC , finish = 2025-09-03
| | | | F          11:01:29.826587902 UTC , thread_cap_info = ("ThreadId 75", 2, False)}
| | | | F          
| | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F        = 6 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 5 , alphabet_size
| | | | | F        = 4 , total_length = 25} , self = 59 , parent = Nothing , duration = 0.496274267000
| | | | | F        , status = Fail , start = 2025-09-03 11:01:29.765692052 UTC , finish =
| | | | | F        2025-09-03 11:01:30.261966319 UTC , thread_cap_info = ("ThreadId 81", 2,
| | | | | F        False)}
| | | | | F        
F | | | | |        
  | | | F |        
  | | F   |        
S | |     |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | |     |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | |     |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | |     |        = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
S | |     |        = 5 , total_length = 33} , self = 65 , parent = Nothing , duration = 0.741890232000
S | |     |        , status = Success , start = 2025-09-03 11:01:29.830819 UTC , finish =
S | |     |        2025-09-03 11:01:30.572709232 UTC , thread_cap_info = ("ThreadId 98", 2,
S | |     |        False)}
S | |     |        
| | | E   |        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E   |        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E   |        , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | E   |        = 5 , total_length = 33} , self = 68 , parent = Nothing , duration = 0.907963322000
| | | E   |        , status = Except "AsyncCancelled" , start = 2025-09-03 11:01:29.852099446
| | | E   |        UTC , finish = 2025-09-03 11:01:30.760062768 UTC , thread_cap_info = ("ThreadId
| | | E   |        99", 2, False)}
| | | E   |        
| | | | F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F |        = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | F |        = 9 , num_top_rules = 9 , num_weak_rules = 27 , alphabet_size = 12 , total_length
| | | | F |        = 216} , self = 63 , parent = Nothing , duration = 0.630293396000 , status
| | | | F |        = Fail , start = 2025-09-03 11:01:29.900608121 UTC , finish = 2025-09-03
| | | | F |        11:01:30.530901517 UTC , thread_cap_info = ("ThreadId 102", 1, False)}
| | | | F |        
| | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | | | | F      = 9 , num_top_rules = 9 , num_weak_rules = 27 , alphabet_size = 12 , total_length
| | | | | | F      = 216} , self = 64 , parent = Nothing , duration = 0.657983304000 , status
| | | | | | F      = Fail , start = 2025-09-03 11:01:29.910811433 UTC , finish = 2025-09-03
| | | | | | F      11:01:30.568794737 UTC , thread_cap_info = ("ThreadId 103", 1, False)}
| | | | | | F      
| | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 47 , num_strict_rules
| | | | | | | F    = 20 , num_top_rules = 20 , num_weak_rules = 27 , alphabet_size = 13 ,
| | | | | | | F    total_length = 282} , self = 67 , parent = Nothing , duration = 0.584171224000
| | | | | | | F    , status = Fail , start = 2025-09-03 11:01:30.07083119 UTC , finish = 2025-09-03
| | | | | | | F    11:01:30.655002414 UTC , thread_cap_info = ("ThreadId 109", 1, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 47 , num_strict_rules
| | | | | | | | F  = 20 , num_top_rules = 20 , num_weak_rules = 27 , alphabet_size = 13 ,
| | | | | | | | F  total_length = 282} , self = 62 , parent = Nothing , duration = 0.419672766000
| | | | | | | | F  , status = Fail , start = 2025-09-03 11:01:30.091877457 UTC , finish =
| | | | | | | | F  2025-09-03 11:01:30.511550223 UTC , thread_cap_info = ("ThreadId 110",
| | | | | | | | F  1, False)}
| | | | | | | | F  
| | | | | F | | |  
| | F | |   | | |  
| F   | |   | | |  
|     | |   | | F  
|     | F   | |    
|     |     F |    
S     |       |    
      |       F    
      E            
