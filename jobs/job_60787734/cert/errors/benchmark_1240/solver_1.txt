last 609 length 2479
last 623 length 2550
CNF 609 vars 2479 clauses
CNF 623 vars 2550 clauses
last 786 length 3237
CNF 786 vars 3237 clauses
last 823 length 3409
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2087, clauses: 7527
last 4176 length 20388
last 3173 length 14604
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2600, clauses: 9471
last 2087 length 7527
CNF 823 vars 3409 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6674, clauses: 27713
last 7027 length 27894
CNF 4176 vars 20388 clauses
CNF 3173 vars 14604 clauses
last 10014 length 44539
last 2600 length 9471
last 6674 length 27713
CNF 2087 vars 7527 clauses
last 11784 length 49597
last 15703 length 70013
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7677, clauses: 31863
CNF 7027 vars 27894 clauses
CNF 10014 vars 44539 clauses
CNF 2600 vars 9471 clauses
CNF 6674 vars 27713 clauses
last 7677 length 31863
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2087, clauses: 7527, status: Satisfied, time: 0.411797038s
CNF 11784 vars 49597 clauses
CNF 15703 vars 70013 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2600, clauses: 9471, status: Satisfied, time: 0.23965076s
CNF 7677 vars 31863 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15158, clauses: 60570
last 15158 length 60570
CNF 15158 vars 60570 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 4 strict rules and 5 weak rules on 5 letters       weights
SRS with 3 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a, b] -> [a, b, a, a, c] {- Input 1 -}
  [c, b] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a, a] -> [c, a, a, b, a] {- Mirror (Input 1) -}
  [b, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Mirror (Input 0) -}
  [b, a, a] -> [c, a, a, b, a] {- Mirror (Input 1) -}
  [a, b, c] -> [a] {- Mirror (Input 2) -}
  [b, b, c] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a, b] -> [a, b, a, a, c] {- Input 1 -}
  [c, b, a] -> [a] {- Input 2 -}
  [c, b, b] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, b, a, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
  [a#, a, b] |-> [c#] {- DP (Top 4) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, b, a, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#, a, c] {- DP (Top 2) (Input 1) -}
  [a#, a, b] |-> [a#, c] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 8A 8A 8A - \
        | 8A 8A 8A - |
        | 8A 8A 8A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a, b] ->= [a, b, a, a, c] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(4/5,5)\Weight(3/5,4)\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.784003783000
  min duration 0.018054162000
  total durat. 2.136043508000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.543341407000
  min duration 0.019986945000
  total durat. 1.956365680000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.725236432000
  min duration 0.678827606000
  total durat. 1.404064038000
**************************************************
F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
F                    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F                    = 162} , self = 60 , parent = Nothing , duration = 0.506903319000 , status
F                    = Fail , start = 2025-09-03 11:21:52.854803995 UTC , finish = 2025-09-03
F                    11:21:53.361707314 UTC , thread_cap_info = ("ThreadId 81", 0, False)}
F                    
| F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                  = 162} , self = 59 , parent = Nothing , duration = 0.506847837000 , status
| F                  = Fail , start = 2025-09-03 11:21:52.854807722 UTC , finish = 2025-09-03
| F                  11:21:53.361655559 UTC , thread_cap_info = ("ThreadId 83", 0, False)}
| F                  
| | F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                = False\n , verbose = False}" , input_size = Size { num_rules = 67 , num_strict_rules
| | F                = 40 , num_top_rules = 40 , num_weak_rules = 27 , alphabet_size = 14 ,
| | F                total_length = 406} , self = 67 , parent = Nothing , duration = 0.766611833000
| | F                , status = Fail , start = 2025-09-03 11:21:52.878208247 UTC , finish =
| | F                2025-09-03 11:21:53.64482008 UTC , thread_cap_info = ("ThreadId 97", 3,
| | F                False)}
| | F                
| | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 67 , num_strict_rules
| | | F              = 40 , num_top_rules = 40 , num_weak_rules = 27 , alphabet_size = 14 ,
| | | F              total_length = 406} , self = 61 , parent = Nothing , duration = 0.529420821000
| | | F              , status = Fail , start = 2025-09-03 11:21:52.880956872 UTC , finish =
| | | F              2025-09-03 11:21:53.410377693 UTC , thread_cap_info = ("ThreadId 98", 3,
| | | F              False)}
| | | F              
| | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| | | | F            = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | | F            = 42} , self = 58 , parent = Nothing , duration = 0.356768670000 , status
| | | | F            = Fail , start = 2025-09-03 11:21:52.889883564 UTC , finish = 2025-09-03
| | | | F            11:21:53.246652234 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | | | F            
| | | | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S          = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | S          = 4 , total_length = 33} , self = 63 , parent = Nothing , duration = 0.678827606000
| | | | | S          , status = Success , start = 2025-09-03 11:21:52.902506477 UTC , finish
| | | | | S          = 2025-09-03 11:21:53.581334083 UTC , thread_cap_info = ("ThreadId 102",
| | | | | S          2, False)}
| | | | | S          
| | | | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | E        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | | E        = 4 , total_length = 33} , self = 65 , parent = Nothing , duration = 0.702998155000
| | | | | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 11:21:52.919536554
| | | | | | E        UTC , finish = 2025-09-03 11:21:53.622534709 UTC , thread_cap_info = ("ThreadId
| | | | | | E        105", 2, False)}
| | | | | | E        
| | | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | | | | | | F      = 54 , num_top_rules = 54 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | F      total_length = 498} , self = 71 , parent = Nothing , duration = 0.784003783000
| | | | | | | F      , status = Fail , start = 2025-09-03 11:21:52.921097138 UTC , finish =
| | | | | | | F      2025-09-03 11:21:53.705100921 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | | F      3, False)}
| | | | | | | F      
| | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 81 , num_strict_rules
| | | | | | | | F    = 54 , num_top_rules = 54 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | F    total_length = 498} , self = 62 , parent = Nothing , duration = 0.543341407000
| | | | | | | | F    , status = Fail , start = 2025-09-03 11:21:52.94081694 UTC , finish = 2025-09-03
| | | | | | | | F    11:21:53.484158347 UTC , thread_cap_info = ("ThreadId 104", 3, False)}
| | | | | | | | F    
| | | | | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | | S  = 9 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 5 , alphabet_size
| | | | | | | | | S  = 5 , total_length = 42} , self = 69 , parent = Nothing , duration = 0.725236432000
| | | | | | | | | S  , status = Success , start = 2025-09-03 11:21:52.957285852 UTC , finish
| | | | | | | | | S  = 2025-09-03 11:21:53.682522284 UTC , thread_cap_info = ("ThreadId 106",
| | | | | | | | | S  2, False)}
| | | | | | | | | S  
| | | | F | | | | |  
| F | |   | | | | |  
F   | |   | | | | |  
    | F   | | | | |  
    |     | | | F |  
    |     S | |   |  
    |       E |   |  
    F         |   |  
              |   S  
              F      
