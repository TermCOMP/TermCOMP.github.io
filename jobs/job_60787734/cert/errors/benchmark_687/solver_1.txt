Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9011, clauses: 41820
last 9011 length 41820
CNF 9011 vars 41820 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5361, clauses: 22940
last 5361 length 22940
CNF 5361 vars 22940 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5361, clauses: 22940, status: Satisfied, time: 0.215277774s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9011, clauses: 41820, status: Unsatisfied, time: 0.41082806s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24506, clauses: 103991
last 24506 length 103991
CNF 24506 vars 103991 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 24506, clauses: 103991, status: Satisfied, time: 0.786426178s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16078, clauses: 71346
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 27242, clauses: 119079
last 27242 length 119079
CNF 27242 vars 119079 clauses
**************************************************
summary
**************************************************
SRS with 19 rules on 3 letters       DP
SRS with 20 strict rules and 19 weak rules on 4 letters       EDG
SRS with 20 strict rules and 19 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 19 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 4 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 5 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 6 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 7 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 8 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 9 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 10 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 11 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 12 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 13 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 14 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 15 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 16 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 17 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 18 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 61) (Input 18) , DP (Top 58) (Input 17) , DP (Top 55) (Input 16) , DP (Top 52) (Input 15) , DP (Top 49) (Input 14) , DP (Top 46) (Input 13) , DP (Top 43) (Input 12) , DP (Top 40) (Input 11) , DP (Top 37) (Input 10) , DP (Top 34) (Input 9) , DP (Top 31) (Input 8) , DP (Top 28) (Input 7) , DP (Top 25) (Input 6) , DP (Top 22) (Input 5) , DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 58) (Input 18) , DP (Top 55) (Input 17) , DP (Top 52) (Input 16) , DP (Top 49) (Input 15) , DP (Top 46) (Input 14) , DP (Top 43) (Input 13) , DP (Top 40) (Input 12) , DP (Top 37) (Input 11) , DP (Top 34) (Input 10) , DP (Top 31) (Input 9) , DP (Top 28) (Input 8) , DP (Top 25) (Input 7) , DP (Top 22) (Input 6) , DP (Top 19) (Input 5) , DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 55) (Input 18) , DP (Top 52) (Input 17) , DP (Top 49) (Input 16) , DP (Top 46) (Input 15) , DP (Top 43) (Input 14) , DP (Top 40) (Input 13) , DP (Top 37) (Input 12) , DP (Top 34) (Input 11) , DP (Top 31) (Input 10) , DP (Top 28) (Input 9) , DP (Top 25) (Input 8) , DP (Top 22) (Input 7) , DP (Top 19) (Input 6) , DP (Top 16) (Input 5) , DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 52) (Input 18) , DP (Top 49) (Input 17) , DP (Top 46) (Input 16) , DP (Top 43) (Input 15) , DP (Top 40) (Input 14) , DP (Top 37) (Input 13) , DP (Top 34) (Input 12) , DP (Top 31) (Input 11) , DP (Top 28) (Input 10) , DP (Top 25) (Input 9) , DP (Top 22) (Input 8) , DP (Top 19) (Input 7) , DP (Top 16) (Input 6) , DP (Top 13) (Input 5) , DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 49) (Input 18) , DP (Top 46) (Input 17) , DP (Top 43) (Input 16) , DP (Top 40) (Input 15) , DP (Top 37) (Input 14) , DP (Top 34) (Input 13) , DP (Top 31) (Input 12) , DP (Top 28) (Input 11) , DP (Top 25) (Input 10) , DP (Top 22) (Input 9) , DP (Top 19) (Input 8) , DP (Top 16) (Input 7) , DP (Top 13) (Input 6) , DP (Top 10) (Input 5) , DP (Top 7) (Input 4) , DP (Top 4) (Input 3) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 46) (Input 18) , DP (Top 43) (Input 17) , DP (Top 40) (Input 16) , DP (Top 37) (Input 15) , DP (Top 34) (Input 14) , DP (Top 31) (Input 13) , DP (Top 28) (Input 12) , DP (Top 25) (Input 11) , DP (Top 22) (Input 10) , DP (Top 19) (Input 9) , DP (Top 16) (Input 8) , DP (Top 13) (Input 7) , DP (Top 10) (Input 6) , DP (Top 7) (Input 5) , DP (Top 4) (Input 4) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 43) (Input 18) , DP (Top 40) (Input 17) , DP (Top 37) (Input 16) , DP (Top 34) (Input 15) , DP (Top 31) (Input 14) , DP (Top 28) (Input 13) , DP (Top 25) (Input 12) , DP (Top 22) (Input 11) , DP (Top 19) (Input 10) , DP (Top 16) (Input 9) , DP (Top 13) (Input 8) , DP (Top 10) (Input 7) , DP (Top 7) (Input 6) , DP (Top 4) (Input 5) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 40) (Input 18) , DP (Top 37) (Input 17) , DP (Top 34) (Input 16) , DP (Top 31) (Input 15) , DP (Top 28) (Input 14) , DP (Top 25) (Input 13) , DP (Top 22) (Input 12) , DP (Top 19) (Input 11) , DP (Top 16) (Input 10) , DP (Top 13) (Input 9) , DP (Top 10) (Input 8) , DP (Top 7) (Input 7) , DP (Top 4) (Input 6) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 37) (Input 18) , DP (Top 34) (Input 17) , DP (Top 31) (Input 16) , DP (Top 28) (Input 15) , DP (Top 25) (Input 14) , DP (Top 22) (Input 13) , DP (Top 19) (Input 12) , DP (Top 16) (Input 11) , DP (Top 13) (Input 10) , DP (Top 10) (Input 9) , DP (Top 7) (Input 8) , DP (Top 4) (Input 7) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 34) (Input 18) , DP (Top 31) (Input 17) , DP (Top 28) (Input 16) , DP (Top 25) (Input 15) , DP (Top 22) (Input 14) , DP (Top 19) (Input 13) , DP (Top 16) (Input 12) , DP (Top 13) (Input 11) , DP (Top 10) (Input 10) , DP (Top 7) (Input 9) , DP (Top 4) (Input 8) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 31) (Input 18) , DP (Top 28) (Input 17) , DP (Top 25) (Input 16) , DP (Top 22) (Input 15) , DP (Top 19) (Input 14) , DP (Top 16) (Input 13) , DP (Top 13) (Input 12) , DP (Top 10) (Input 11) , DP (Top 7) (Input 10) , DP (Top 4) (Input 9) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 28) (Input 18) , DP (Top 25) (Input 17) , DP (Top 22) (Input 16) , DP (Top 19) (Input 15) , DP (Top 16) (Input 14) , DP (Top 13) (Input 13) , DP (Top 10) (Input 12) , DP (Top 7) (Input 11) , DP (Top 4) (Input 10) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 25) (Input 18) , DP (Top 22) (Input 17) , DP (Top 19) (Input 16) , DP (Top 16) (Input 15) , DP (Top 13) (Input 14) , DP (Top 10) (Input 13) , DP (Top 7) (Input 12) , DP (Top 4) (Input 11) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 22) (Input 18) , DP (Top 19) (Input 17) , DP (Top 16) (Input 16) , DP (Top 13) (Input 15) , DP (Top 10) (Input 14) , DP (Top 7) (Input 13) , DP (Top 4) (Input 12) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 19) (Input 18) , DP (Top 16) (Input 17) , DP (Top 13) (Input 16) , DP (Top 10) (Input 15) , DP (Top 7) (Input 14) , DP (Top 4) (Input 13) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 16) (Input 18) , DP (Top 13) (Input 17) , DP (Top 10) (Input 16) , DP (Top 7) (Input 15) , DP (Top 4) (Input 14) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 13) (Input 18) , DP (Top 10) (Input 17) , DP (Top 7) (Input 16) , DP (Top 4) (Input 15) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 18) , DP (Top 7) (Input 17) , DP (Top 4) (Input 16) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 7) (Input 18) , DP (Top 4) (Input 17) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 18) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 61) (Input 18) , DP (Top 58) (Input 17) , DP (Top 55) (Input 16) , DP (Top 52) (Input 15) , DP (Top 49) (Input 14) , DP (Top 46) (Input 13) , DP (Top 43) (Input 12) , DP (Top 40) (Input 11) , DP (Top 37) (Input 10) , DP (Top 34) (Input 9) , DP (Top 31) (Input 8) , DP (Top 28) (Input 7) , DP (Top 25) (Input 6) , DP (Top 22) (Input 5) , DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 58) (Input 18) , DP (Top 55) (Input 17) , DP (Top 52) (Input 16) , DP (Top 49) (Input 15) , DP (Top 46) (Input 14) , DP (Top 43) (Input 13) , DP (Top 40) (Input 12) , DP (Top 37) (Input 11) , DP (Top 34) (Input 10) , DP (Top 31) (Input 9) , DP (Top 28) (Input 8) , DP (Top 25) (Input 7) , DP (Top 22) (Input 6) , DP (Top 19) (Input 5) , DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 55) (Input 18) , DP (Top 52) (Input 17) , DP (Top 49) (Input 16) , DP (Top 46) (Input 15) , DP (Top 43) (Input 14) , DP (Top 40) (Input 13) , DP (Top 37) (Input 12) , DP (Top 34) (Input 11) , DP (Top 31) (Input 10) , DP (Top 28) (Input 9) , DP (Top 25) (Input 8) , DP (Top 22) (Input 7) , DP (Top 19) (Input 6) , DP (Top 16) (Input 5) , DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 52) (Input 18) , DP (Top 49) (Input 17) , DP (Top 46) (Input 16) , DP (Top 43) (Input 15) , DP (Top 40) (Input 14) , DP (Top 37) (Input 13) , DP (Top 34) (Input 12) , DP (Top 31) (Input 11) , DP (Top 28) (Input 10) , DP (Top 25) (Input 9) , DP (Top 22) (Input 8) , DP (Top 19) (Input 7) , DP (Top 16) (Input 6) , DP (Top 13) (Input 5) , DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 49) (Input 18) , DP (Top 46) (Input 17) , DP (Top 43) (Input 16) , DP (Top 40) (Input 15) , DP (Top 37) (Input 14) , DP (Top 34) (Input 13) , DP (Top 31) (Input 12) , DP (Top 28) (Input 11) , DP (Top 25) (Input 10) , DP (Top 22) (Input 9) , DP (Top 19) (Input 8) , DP (Top 16) (Input 7) , DP (Top 13) (Input 6) , DP (Top 10) (Input 5) , DP (Top 7) (Input 4) , DP (Top 4) (Input 3) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 46) (Input 18) , DP (Top 43) (Input 17) , DP (Top 40) (Input 16) , DP (Top 37) (Input 15) , DP (Top 34) (Input 14) , DP (Top 31) (Input 13) , DP (Top 28) (Input 12) , DP (Top 25) (Input 11) , DP (Top 22) (Input 10) , DP (Top 19) (Input 9) , DP (Top 16) (Input 8) , DP (Top 13) (Input 7) , DP (Top 10) (Input 6) , DP (Top 7) (Input 5) , DP (Top 4) (Input 4) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 43) (Input 18) , DP (Top 40) (Input 17) , DP (Top 37) (Input 16) , DP (Top 34) (Input 15) , DP (Top 31) (Input 14) , DP (Top 28) (Input 13) , DP (Top 25) (Input 12) , DP (Top 22) (Input 11) , DP (Top 19) (Input 10) , DP (Top 16) (Input 9) , DP (Top 13) (Input 8) , DP (Top 10) (Input 7) , DP (Top 7) (Input 6) , DP (Top 4) (Input 5) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 40) (Input 18) , DP (Top 37) (Input 17) , DP (Top 34) (Input 16) , DP (Top 31) (Input 15) , DP (Top 28) (Input 14) , DP (Top 25) (Input 13) , DP (Top 22) (Input 12) , DP (Top 19) (Input 11) , DP (Top 16) (Input 10) , DP (Top 13) (Input 9) , DP (Top 10) (Input 8) , DP (Top 7) (Input 7) , DP (Top 4) (Input 6) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 37) (Input 18) , DP (Top 34) (Input 17) , DP (Top 31) (Input 16) , DP (Top 28) (Input 15) , DP (Top 25) (Input 14) , DP (Top 22) (Input 13) , DP (Top 19) (Input 12) , DP (Top 16) (Input 11) , DP (Top 13) (Input 10) , DP (Top 10) (Input 9) , DP (Top 7) (Input 8) , DP (Top 4) (Input 7) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 34) (Input 18) , DP (Top 31) (Input 17) , DP (Top 28) (Input 16) , DP (Top 25) (Input 15) , DP (Top 22) (Input 14) , DP (Top 19) (Input 13) , DP (Top 16) (Input 12) , DP (Top 13) (Input 11) , DP (Top 10) (Input 10) , DP (Top 7) (Input 9) , DP (Top 4) (Input 8) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 31) (Input 18) , DP (Top 28) (Input 17) , DP (Top 25) (Input 16) , DP (Top 22) (Input 15) , DP (Top 19) (Input 14) , DP (Top 16) (Input 13) , DP (Top 13) (Input 12) , DP (Top 10) (Input 11) , DP (Top 7) (Input 10) , DP (Top 4) (Input 9) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 28) (Input 18) , DP (Top 25) (Input 17) , DP (Top 22) (Input 16) , DP (Top 19) (Input 15) , DP (Top 16) (Input 14) , DP (Top 13) (Input 13) , DP (Top 10) (Input 12) , DP (Top 7) (Input 11) , DP (Top 4) (Input 10) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 25) (Input 18) , DP (Top 22) (Input 17) , DP (Top 19) (Input 16) , DP (Top 16) (Input 15) , DP (Top 13) (Input 14) , DP (Top 10) (Input 13) , DP (Top 7) (Input 12) , DP (Top 4) (Input 11) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 22) (Input 18) , DP (Top 19) (Input 17) , DP (Top 16) (Input 16) , DP (Top 13) (Input 15) , DP (Top 10) (Input 14) , DP (Top 7) (Input 13) , DP (Top 4) (Input 12) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 19) (Input 18) , DP (Top 16) (Input 17) , DP (Top 13) (Input 16) , DP (Top 10) (Input 15) , DP (Top 7) (Input 14) , DP (Top 4) (Input 13) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 16) (Input 18) , DP (Top 13) (Input 17) , DP (Top 10) (Input 16) , DP (Top 7) (Input 15) , DP (Top 4) (Input 14) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 13) (Input 18) , DP (Top 10) (Input 17) , DP (Top 7) (Input 16) , DP (Top 4) (Input 15) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 18) , DP (Top 7) (Input 17) , DP (Top 4) (Input 16) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 7) (Input 18) , DP (Top 4) (Input 17) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 18) -}
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
reason
  ( 1
  , Wk  / 1A 1A 2A \
        | -  1A -  |
        \ -  -  0A / )
  ( 2
  , Wk  / -2A -2A 1A \
        | -2A -   -  |
        \ -   -   0A / )
  ( 0
  , Wk  / - 1A 1A \
        | - 1A 1A |
        \ - -  0A / )
  ( 0#
  , Wk  / -1A 1A 1A \
        | -   -  -  |
        \ -   -  0A / )
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
reason
  EDG

**************************************************
skeleton: (19,3)\Deepee\EDG(20/19,4)\Matrix{\ArcticBZ}{3}(0/19,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.039075282000
  min duration 3.001916622000
  total durat. 9.065114091000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 131
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 114
      , alphabet_size = 10
      , total_length = 5044}
    , self = 57
    , parent = Nothing
    , duration = 3.001916622000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.655785669 UTC
    , finish = 2025-09-03 12:39:59.657702291 UTC
    , thread_cap_info = ("ThreadId 94", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 22
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 799}
    , self = 59
    , parent = Nothing
    , duration = 3.024122187000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.89554838 UTC
    , finish = 2025-09-03 12:39:59.919670567 UTC
    , thread_cap_info = ("ThreadId 98", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 39
      , num_strict_rules = 20
      , num_top_rules = 20
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 1489}
    , self = 55
    , parent = Nothing
    , duration = 3.039075282000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.598377031 UTC
    , finish = 2025-09-03 12:39:59.637452313 UTC
    , thread_cap_info = ("ThreadId 90", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.169288400000
  min duration 3.169288400000
  total durat. 3.169288400000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 114
      , num_strict_rules = 114
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 4902}
    , self = 53
    , parent = Nothing
    , duration = 3.169288400000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:39:56.088511277 UTC
    , finish = 2025-09-03 12:39:59.257799677 UTC
    , thread_cap_info = ("ThreadId 71", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.061451094000
  min duration 3.021919610000
  total durat. 9.123370035000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 39
      , num_strict_rules = 20
      , num_top_rules = 20
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 1489}
    , self = 56
    , parent = Nothing
    , duration = 3.021919610000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.61554671 UTC
    , finish = 2025-09-03 12:39:59.63746632 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 22
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 799}
    , self = 60
    , parent = Nothing
    , duration = 3.039999331000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.915548799 UTC
    , finish = 2025-09-03 12:39:59.95554813 UTC
    , thread_cap_info = ("ThreadId 99", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 131
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 114
      , alphabet_size = 10
      , total_length = 5044}
    , self = 58
    , parent = Nothing
    , duration = 3.061451094000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:39:56.675546733 UTC
    , finish = 2025-09-03 12:39:59.736997827 UTC
    , thread_cap_info = ("ThreadId 95", 2, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.175905193000
  min duration 3.175905193000
  total durat. 3.175905193000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 114
      , num_strict_rules = 114
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 4902}
    , self = 54
    , parent = Nothing
    , duration = 3.175905193000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:39:56.099652447 UTC
    , finish = 2025-09-03 12:39:59.27555764 UTC
    , thread_cap_info = ("ThreadId 73", 1, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 2.360152450000
  min duration 2.360152450000
  total durat. 2.360152450000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 39
      , num_strict_rules = 20
      , num_top_rules = 20
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 1489}
    , self = 70
    , parent = Nothing
    , duration = 2.360152450000
    , status = Success
    , start = 2025-09-03 12:39:59.675768792 UTC
    , finish = 2025-09-03 12:40:02.035921242 UTC
    , thread_cap_info = ("ThreadId 107", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.193916679000
  min duration 1.193916679000
  total durat. 1.193916679000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 39
      , num_strict_rules = 20
      , num_top_rules = 20
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 1489}
    , self = 72
    , parent = Nothing
    , duration = 1.193916679000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:00.955570823 UTC
    , finish = 2025-09-03 12:40:02.149487502 UTC
    , thread_cap_info = ("ThreadId 118", 3, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.278104680000
  min duration 1.278104680000
  total durat. 1.278104680000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 39
      , num_strict_rules = 20
      , num_top_rules = 20
      , num_weak_rules = 19
      , alphabet_size = 4
      , total_length = 1489}
    , self = 64
    , parent = Nothing
    , duration = 1.278104680000
    , status = Fail
    , start = 2025-09-03 12:39:59.657704447 UTC
    , finish = 2025-09-03 12:40:00.935809127 UTC
    , thread_cap_info = ("ThreadId 106", 3, False)}
Fail : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = True}"
  total number 1
  max duration 4.870639723000
  min duration 4.870639723000
  total durat. 4.870639723000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = True}"
    , input_size = Size
      { num_rules = 19
      , num_strict_rules = 19
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 779}
    , self = 62
    , parent = Nothing
    , duration = 4.870639723000
    , status = Fail
    , start = 2025-09-03 12:39:56.060299029 UTC
    , finish = 2025-09-03 12:40:00.930938752 UTC
    , thread_cap_info = ("ThreadId 23", 3, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 19 , num_strict_rules = 19 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 779} , self = 62 , parent = Nothing , duration = 4.870639723000 , status
F                  = Fail , start = 2025-09-03 12:39:56.060299029 UTC , finish = 2025-09-03
F                  12:40:00.930938752 UTC , thread_cap_info = ("ThreadId 23", 3, False)}
F                  
| E                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E                = False\n , verbose = False}" , input_size = Size { num_rules = 114 , num_strict_rules
| E                = 114 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| E                = 4902} , self = 53 , parent = Nothing , duration = 3.169288400000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 12:39:56.088511277 UTC ,
| E                finish = 2025-09-03 12:39:59.257799677 UTC , thread_cap_info = ("ThreadId
| E                71", 1, False)}
| E                
| | E              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E              = False\n , verbose = False}" , input_size = Size { num_rules = 114 , num_strict_rules
| | E              = 114 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | E              = 4902} , self = 54 , parent = Nothing , duration = 3.175905193000 , status
| | E              = Except "AsyncCancelled" , start = 2025-09-03 12:39:56.099652447 UTC ,
| | E              finish = 2025-09-03 12:39:59.27555764 UTC , thread_cap_info = ("ThreadId
| | E              73", 1, False)}
| | E              
| | | S            Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | S            verbose = False}" , input_size = Size { num_rules = 255 , num_strict_rules
| | | S            = 141 , num_top_rules = 141 , num_weak_rules = 114 , alphabet_size = 10
| | | S            , total_length = 9936} , self = 47 , parent = Nothing , duration = 0.449401448000
| | | S            , status = Success , start = 2025-09-03 12:39:56.175539623 UTC , finish
| | | S            = 2025-09-03 12:39:56.624941071 UTC , thread_cap_info = ("ThreadId 61",
| | | S            2, False)}
| | | S            
| | | | S          Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | S          verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| | | | S          = 23 , num_top_rules = 23 , num_weak_rules = 19 , alphabet_size = 4 , total_length
| | | | S          = 1569} , self = 50 , parent = Nothing , duration = 0.161788480000 , status
| | | | S          = Success , start = 2025-09-03 12:39:56.476153596 UTC , finish = 2025-09-03
| | | | S          12:39:56.637942076 UTC , thread_cap_info = ("ThreadId 84", 3, False)}
| | | | S          
| | | | | E        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | | E        = 20 , num_top_rules = 20 , num_weak_rules = 19 , alphabet_size = 4 , total_length
| | | | | E        = 1489} , self = 55 , parent = Nothing , duration = 3.039075282000 , status
| | | | | E        = Except "<<timeout>>" , start = 2025-09-03 12:39:56.598377031 UTC , finish
| | | | | E        = 2025-09-03 12:39:59.637452313 UTC , thread_cap_info = ("ThreadId 90",
| | | | | E        3, False)}
| | | | | E        
| | | | | | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 39 , num_strict_rules
| | | | | | E      = 20 , num_top_rules = 20 , num_weak_rules = 19 , alphabet_size = 4 , total_length
| | | | | | E      = 1489} , self = 56 , parent = Nothing , duration = 3.021919610000 , status
| | | | | | E      = Except "<<timeout>>" , start = 2025-09-03 12:39:56.61554671 UTC , finish
| | | | | | E      = 2025-09-03 12:39:59.63746632 UTC , thread_cap_info = ("ThreadId 91",
| | | | | | E      3, False)}
| | | | | | E      
| | | S | | |      
| | |   S | |      
| | | E   | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E   | |      = False\n , verbose = False}" , input_size = Size { num_rules = 131 , num_strict_rules
| | | E   | |      = 17 , num_top_rules = 17 , num_weak_rules = 114 , alphabet_size = 10 ,
| | | E   | |      total_length = 5044} , self = 57 , parent = Nothing , duration = 3.001916622000
| | | E   | |      , status = Except "<<timeout>>" , start = 2025-09-03 12:39:56.655785669
| | | E   | |      UTC , finish = 2025-09-03 12:39:59.657702291 UTC , thread_cap_info = ("ThreadId
| | | E   | |      94", 2, False)}
| | | E   | |      
| | | | E | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E | |      = False\n , verbose = False}" , input_size = Size { num_rules = 131 , num_strict_rules
| | | | E | |      = 17 , num_top_rules = 17 , num_weak_rules = 114 , alphabet_size = 10 ,
| | | | E | |      total_length = 5044} , self = 58 , parent = Nothing , duration = 3.061451094000
| | | | E | |      , status = Except "<<timeout>>" , start = 2025-09-03 12:39:56.675546733
| | | | E | |      UTC , finish = 2025-09-03 12:39:59.736997827 UTC , thread_cap_info = ("ThreadId
| | | | E | |      95", 2, False)}
| | | | E | |      
| | | | | | | E    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 22 , num_strict_rules
| | | | | | | E    = 3 , num_top_rules = 3 , num_weak_rules = 19 , alphabet_size = 4 , total_length
| | | | | | | E    = 799} , self = 59 , parent = Nothing , duration = 3.024122187000 , status
| | | | | | | E    = Except "<<timeout>>" , start = 2025-09-03 12:39:56.89554838 UTC , finish
| | | | | | | E    = 2025-09-03 12:39:59.919670567 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | | E    3, False)}
| | | | | | | E    
| | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 22 , num_strict_rules
| | | | | | | | E  = 3 , num_top_rules = 3 , num_weak_rules = 19 , alphabet_size = 4 , total_length
| | | | | | | | E  = 799} , self = 60 , parent = Nothing , duration = 3.039999331000 , status
| | | | | | | | E  = Except "<<timeout>>" , start = 2025-09-03 12:39:56.915548799 UTC , finish
| | | | | | | | E  = 2025-09-03 12:39:59.95554813 UTC , thread_cap_info = ("ThreadId 99",
| | | | | | | | E  3, False)}
| | | | | | | | E  
| E | | | | | | |  
|   E | | | | | |  
|     | | E | | |  
|     | |   E | |  
|     E |     | |  
| F     |     | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F     |     | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F     |     | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F     |     | |  = 39 , num_strict_rules = 20 , num_top_rules = 20 , num_weak_rules = 19
| F     |     | |  , alphabet_size = 4 , total_length = 1489} , self = 64 , parent = Nothing
| F     |     | |  , duration = 1.278104680000 , status = Fail , start = 2025-09-03 12:39:59.657704447
| F     |     | |  UTC , finish = 2025-09-03 12:40:00.935809127 UTC , thread_cap_info = ("ThreadId
| F     |     | |  106", 3, False)}
| F     |     | |  
| | S   |     | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S   |     | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S   |     | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S   |     | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S   |     | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S   |     | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 39
| | S   |     | |  , num_strict_rules = 20 , num_top_rules = 20 , num_weak_rules = 19 , alphabet_size
| | S   |     | |  = 4 , total_length = 1489} , self = 70 , parent = Nothing , duration =
| | S   |     | |  2.360152450000 , status = Success , start = 2025-09-03 12:39:59.675768792
| | S   |     | |  UTC , finish = 2025-09-03 12:40:02.035921242 UTC , thread_cap_info = ("ThreadId
| | S   |     | |  107", 3, False)}
| | S   |     | |  
| | |   E     | |  
| | |         E |  
| | |           E  
| | | S            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S            = 22 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 19 ,
| | | S            alphabet_size = 4 , total_length = 799} , self = 61 , parent = Nothing
| | | S            , duration = 0.664759211000 , status = Success , start = 2025-09-03 12:40:00.256647597
| | | S            UTC , finish = 2025-09-03 12:40:00.921406808 UTC , thread_cap_info = ("ThreadId
| | | S            113", 3, False)}
| | | S            
| | | | E          Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E          = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 22
| | | | E          , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 19 , alphabet_size
| | | | E          = 4 , total_length = 799} , self = 65 , parent = Nothing , duration = 0.678641884000
| | | | E          , status = Except "AsyncCancelled" , start = 2025-09-03 12:40:00.276907295
| | | | E          UTC , finish = 2025-09-03 12:40:00.955549179 UTC , thread_cap_info = ("ThreadId
| | | | E          114", 3, False)}
| | | | E          
| | | S |          
F | |   |          
  F |   |          
    |   E          
E   |              Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E   |              = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E   |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E   |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E   |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E   |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 39
E   |              , num_strict_rules = 20 , num_top_rules = 20 , num_weak_rules = 19 , alphabet_size
E   |              = 4 , total_length = 1489} , self = 72 , parent = Nothing , duration =
E   |              1.193916679000 , status = Except "AsyncCancelled" , start = 2025-09-03
E   |              12:40:00.955570823 UTC , finish = 2025-09-03 12:40:02.149487502 UTC , thread_cap_info
E   |              = ("ThreadId 118", 3, False)}
E   |              
|   S              
E                  
