last 938 length 4605
last 798 length 3631
CNF 938 vars 4605 clauses
CNF 798 vars 3631 clauses
last 686 length 2959
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2410, clauses: 8632
last 673 length 2765
CNF 686 vars 2959 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7603, clauses: 31406
last 2410 length 8632
CNF 673 vars 2765 clauses
last 7603 length 31406
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2422, clauses: 8665
last 14480 length 72171
CNF 2410 vars 8632 clauses
last 16846 length 101007
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7607, clauses: 31418
CNF 7603 vars 31406 clauses
last 2422 length 8665
last 16492 length 83581
CNF 14480 vars 72171 clauses
last 16600 length 84109
last 7607 length 31418
last 19638 length 120363
CNF 2422 vars 8665 clauses
last 21241 length 124806
CNF 16492 vars 83581 clauses
CNF 16600 vars 84109 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7603, clauses: 31406, status: Satisfied, time: 1.105225095s
CNF 7607 vars 31418 clauses
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 12064 length 62358
CNF 21241 vars 124806 clauses
last 14692 length 92196
CNF 14692 vars 92196 clauses
**************************************************
summary
**************************************************
SRS with 4 rules on 4 letters       mirror
SRS with 4 rules on 4 letters       DP
SRS with 11 strict rules and 4 weak rules on 8 letters       weights
SRS with 2 strict rules and 4 weak rules on 6 letters       EDG
SRS with 2 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 6 letters       weights
SRS with 0 strict rules and 4 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, l] -> [l, a] {- Input 0 -}
  [a, c] -> [c, a] {- Input 1 -}
  [c, a, r] -> [r, a] {- Input 2 -}
  [l, r, a] -> [a, l, c, c, r] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [l, a] -> [a, l] {- Mirror (Input 0) -}
  [c, a] -> [a, c] {- Mirror (Input 1) -}
  [r, a, c] -> [a, r] {- Mirror (Input 2) -}
  [a, r, l] -> [r, c, c, l, a] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [l, a] ->= [a, l] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [r, a, c] ->= [a, r] {- DP Nontop (Mirror (Input 2)) -}
  [a, r, l] ->= [r, c, c, l, a] {- DP Nontop (Mirror (Input 3)) -}
  [a#, r, l] |-> [a#] {- DP (Top 4) (Mirror (Input 3)) -}
  [a#, r, l] |-> [l#, a] {- DP (Top 3) (Mirror (Input 3)) -}
  [a#, r, l] |-> [r#, c, c, l, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [a#, r, l] |-> [c#, l, a] {- DP (Top 2) (Mirror (Input 3)) -}
  [a#, r, l] |-> [c#, c, l, a] {- DP (Top 1) (Mirror (Input 3)) -}
  [l#, a] |-> [a#, l] {- DP (Top 0) (Mirror (Input 0)) -}
  [l#, a] |-> [l#] {- DP (Top 1) (Mirror (Input 0)) -}
  [r#, a, c] |-> [a#, r] {- DP (Top 0) (Mirror (Input 2)) -}
  [r#, a, c] |-> [r#] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 2/1)
  (l, 2/1)
  (r, 2/1)
  (c, 0/1)
  (a#, 2/1)
  (l#, 3/1)
  (r#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [l, a] ->= [a, l] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [r, a, c] ->= [a, r] {- DP Nontop (Mirror (Input 2)) -}
  [a, r, l] ->= [r, c, c, l, a] {- DP Nontop (Mirror (Input 3)) -}
  [a#, r, l] |-> [r#, c, c, l, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [r#, a, c] |-> [a#, r] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, r, l] |-> [r#, c, c, l, a] {- DP (Top 0) (Mirror (Input 3)) -}
  [r#, a, c] |-> [a#, r] {- DP (Top 0) (Mirror (Input 2)) -}
  [l, a] ->= [a, l] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [r, a, c] ->= [a, r] {- DP Nontop (Mirror (Input 2)) -}
  [a, r, l] ->= [r, c, c, l, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / - -  1A \
        | - 0A -  |
        \ - -  0A / )
  ( l
  , Wk  / 0A -3A 0A \
        | -  -   2A |
        \ -  -   0A / )
  ( r
  , Wk  / - 1A 1A \
        | - -  -  |
        \ - -  0A / )
  ( c
  , Wk  / -2A -   1A \
        | -   -1A -  |
        \ -   -   0A / )
  ( a#
  , Wk  / -2A - 0A \
        | -   - -  |
        \ -   - 0A / )
  ( r#
  , Wk  / - 0A 0A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [r#, a, c] |-> [a#, r] {- DP (Top 0) (Mirror (Input 2)) -}
  [l, a] ->= [a, l] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [r, a, c] ->= [a, r] {- DP Nontop (Mirror (Input 2)) -}
  [a, r, l] ->= [r, c, c, l, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 1/1)
  (l, 0/1)
  (r, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (r#, 1/1)
   property Termination
has value Just True
for SRS
  [l, a] ->= [a, l] {- DP Nontop (Mirror (Input 0)) -}
  [c, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [r, a, c] ->= [a, r] {- DP Nontop (Mirror (Input 2)) -}
  [a, r, l] ->= [r, c, c, l, a] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,4)\Deepee(11/4,8)\Weight\EDG(2/4,6)\Matrix{\ArcticBZ}{3}(1/4,6)\Weight(0/4,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 12064 vars 62358 clauses

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2422, clauses: 8665, status: Unsatisfied, time: 1.467807507s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7607, clauses: 31418, status: Satisfied, time: 1.243937055s
Success : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.687443324000
  min duration 2.687443324000
  total durat. 2.687443324000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 64
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 16
      , total_length = 464}
    , self = 62
    , parent = Nothing
    , duration = 2.687443324000
    , status = Success
    , start = 2025-09-03 13:36:39.869323347 UTC
    , finish = 2025-09-03 13:36:42.556766671 UTC
    , thread_cap_info = ("ThreadId 86", 1, False)}
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.510113030000
  min duration 0.176686194000
  total durat. 1.686799224000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 33}
    , self = 61
    , parent = Nothing
    , duration = 1.510113030000
    , status = Fail
    , start = 2025-09-03 13:36:40.121024689 UTC
    , finish = 2025-09-03 13:36:41.631137719 UTC
    , thread_cap_info = ("ThreadId 99", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.139058074000
  min duration 3.075746927000
  total durat. 6.214805001000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 69
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 64
      , alphabet_size = 18
      , total_length = 510}
    , self = 68
    , parent = Nothing
    , duration = 3.075746927000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:36:39.956361984 UTC
    , finish = 2025-09-03 13:36:43.032108911 UTC
    , thread_cap_info = ("ThreadId 96", 0, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 69
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 64
      , alphabet_size = 18
      , total_length = 511}
    , self = 75
    , parent = Nothing
    , duration = 3.139058074000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:36:40.257118648 UTC
    , finish = 2025-09-03 13:36:43.396176722 UTC
    , thread_cap_info = ("ThreadId 104", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 1.266488551000
  min duration 0.132949770000
  total durat. 1.399438321000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 33}
    , self = 59
    , parent = Nothing
    , duration = 1.266488551000
    , status = Fail
    , start = 2025-09-03 13:36:40.208696471 UTC
    , finish = 2025-09-03 13:36:41.475185022 UTC
    , thread_cap_info = ("ThreadId 102", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.237026628000
  min duration 3.237026628000
  total durat. 3.237026628000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 69
      , num_strict_rules = 5
      , num_top_rules = 5
      , num_weak_rules = 64
      , alphabet_size = 18
      , total_length = 510}
    , self = 71
    , parent = Nothing
    , duration = 3.237026628000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:36:39.972014591 UTC
    , finish = 2025-09-03 13:36:43.209041219 UTC
    , thread_cap_info = ("ThreadId 97", 0, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.733428899000
  min duration 2.733428899000
  total durat. 2.733428899000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 64
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 16
      , total_length = 464}
    , self = 67
    , parent = Nothing
    , duration = 2.733428899000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:36:39.869355285 UTC
    , finish = 2025-09-03 13:36:42.602784184 UTC
    , thread_cap_info = ("ThreadId 88", 1, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 3.132003179000
  min duration 3.132003179000
  total durat. 3.132003179000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 34}
    , self = 69
    , parent = Nothing
    , duration = 3.132003179000
    , status = Success
    , start = 2025-09-03 13:36:40.036355781 UTC
    , finish = 2025-09-03 13:36:43.16835896 UTC
    , thread_cap_info = ("ThreadId 98", 1, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.291693751000
  min duration 3.291693751000
  total durat. 3.291693751000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 4
      , alphabet_size = 6
      , total_length = 34}
    , self = 72
    , parent = Nothing
    , duration = 3.291693751000
    , status = Fail
    , start = 2025-09-03 13:36:39.986261751 UTC
    , finish = 2025-09-03 13:36:43.277955502 UTC
    , thread_cap_info = ("ThreadId 92", 1, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.892596084000
  min duration 1.892596084000
  total durat. 1.892596084000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 21}
    , self = 60
    , parent = Nothing
    , duration = 1.892596084000
    , status = Fail
    , start = 2025-09-03 13:36:39.625826267 UTC
    , finish = 2025-09-03 13:36:41.518422351 UTC
    , thread_cap_info = ("ThreadId 35", 1, False)}
**************************************************
F                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                    , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                    = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F                    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F                    = 21} , self = 60 , parent = Nothing , duration = 1.892596084000 , status
F                    = Fail , start = 2025-09-03 13:36:39.625826267 UTC , finish = 2025-09-03
F                    13:36:41.518422351 UTC , thread_cap_info = ("ThreadId 35", 1, False)}
F                    
| S                  Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S                  epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S                  = Size { num_rules = 304 , num_strict_rules = 240 , num_top_rules = 240
| S                  , num_weak_rules = 64 , alphabet_size = 32 , total_length = 1952} , self
| S                  = 47 , parent = Nothing , duration = 0.258586879000 , status = Success
| S                  , start = 2025-09-03 13:36:39.652105393 UTC , finish = 2025-09-03 13:36:39.910692272
| S                  UTC , thread_cap_info = ("ThreadId 51", 0, False)}
| S                  
| | S                Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S                epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S                = Size { num_rules = 256 , num_strict_rules = 192 , num_top_rules = 192
| | S                , num_weak_rules = 64 , alphabet_size = 28 , total_length = 1672} , self
| | S                = 46 , parent = Nothing , duration = 0.254509061000 , status = Success
| | S                , start = 2025-09-03 13:36:39.652119218 UTC , finish = 2025-09-03 13:36:39.906628279
| | S                UTC , thread_cap_info = ("ThreadId 52", 0, False)}
| | S                
| | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | F              = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | F              = 34} , self = 52 , parent = Nothing , duration = 0.176686194000 , status
| | | F              = Fail , start = 2025-09-03 13:36:39.76659901 UTC , finish = 2025-09-03
| | | F              13:36:39.943285204 UTC , thread_cap_info = ("ThreadId 79", 1, False)}
| | | F              
| | | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F            = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | F            = 34} , self = 45 , parent = Nothing , duration = 0.132949770000 , status
| | | | F            = Fail , start = 2025-09-03 13:36:39.766606543 UTC , finish = 2025-09-03
| | | | F            13:36:39.899556313 UTC , thread_cap_info = ("ThreadId 80", 1, False)}
| | | | F            
| | | | | F          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | | | F          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | | | F          = Size { num_rules = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules
| | | | | F          = 4 , alphabet_size = 6 , total_length = 33} , self = 51 , parent = Nothing
| | | | | F          , duration = 0.147806223000 , status = Fail , start = 2025-09-03 13:36:39.790210022
| | | | | F          UTC , finish = 2025-09-03 13:36:39.938016245 UTC , thread_cap_info = ("ThreadId
| | | | | F          81", 1, False)}
| | | | | F          
| | | | | | S        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | S        = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | S        = 64 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 16 , total_length
| | | | | | S        = 464} , self = 62 , parent = Nothing , duration = 2.687443324000 , status
| | | | | | S        = Success , start = 2025-09-03 13:36:39.869323347 UTC , finish = 2025-09-03
| | | | | | S        13:36:42.556766671 UTC , thread_cap_info = ("ThreadId 86", 1, False)}
| | | | | | S        
| | | | | | | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | | | | | E      = 64 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 16 , total_length
| | | | | | | E      = 464} , self = 67 , parent = Nothing , duration = 2.733428899000 , status
| | | | | | | E      = Except "AsyncCancelled" , start = 2025-09-03 13:36:39.869355285 UTC ,
| | | | | | | E      finish = 2025-09-03 13:36:42.602784184 UTC , thread_cap_info = ("ThreadId
| | | | | | | E      88", 1, False)}
| | | | | | | E      
| | | | F | | |      
| | S |   | | |      
| S   |   | | |      
| S   |   | | |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| S   |   | | |      verbose = False}" , input_size = Size { num_rules = 96 , num_strict_rules
| S   |   | | |      = 32 , num_top_rules = 32 , num_weak_rules = 64 , alphabet_size = 24 ,
| S   |   | | |      total_length = 736} , self = 55 , parent = Nothing , duration = 0.192965951000
| S   |   | | |      , status = Success , start = 2025-09-03 13:36:39.92517479 UTC , finish
| S   |   | | |      = 2025-09-03 13:36:40.118140741 UTC , thread_cap_info = ("ThreadId 49",
| S   |   | | |      0, False)}
| S   |   | | |      
| |   |   F | |      
| |   F     | |      
| | E       | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E       | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E       | |      = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | E       | |      = 5 , num_top_rules = 5 , num_weak_rules = 64 , alphabet_size = 18 , total_length
| | E       | |      = 510} , self = 68 , parent = Nothing , duration = 3.075746927000 , status
| | E       | |      = Except "<<timeout>>" , start = 2025-09-03 13:36:39.956361984 UTC , finish
| | E       | |      = 2025-09-03 13:36:43.032108911 UTC , thread_cap_info = ("ThreadId 96",
| | E       | |      0, False)}
| | E       | |      
| | | E     | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E     | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E     | |      = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | | E     | |      = 5 , num_top_rules = 5 , num_weak_rules = 64 , alphabet_size = 18 , total_length
| | | E     | |      = 510} , self = 71 , parent = Nothing , duration = 3.237026628000 , status
| | | E     | |      = Except "<<timeout>>" , start = 2025-09-03 13:36:39.972014591 UTC , finish
| | | E     | |      = 2025-09-03 13:36:43.209041219 UTC , thread_cap_info = ("ThreadId 97",
| | | E     | |      0, False)}
| | | E     | |      
| | | | F   | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F   | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F   | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F   | |      = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | F   | |      = 6 , total_length = 34} , self = 72 , parent = Nothing , duration = 3.291693751000
| | | | F   | |      , status = Fail , start = 2025-09-03 13:36:39.986261751 UTC , finish =
| | | | F   | |      2025-09-03 13:36:43.277955502 UTC , thread_cap_info = ("ThreadId 92", 1,
| | | | F   | |      False)}
| | | | F   | |      
| | | | | S | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | S | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | | S | |      = 6 , total_length = 34} , self = 69 , parent = Nothing , duration = 3.132003179000
| | | | | S | |      , status = Success , start = 2025-09-03 13:36:40.036355781 UTC , finish
| | | | | S | |      = 2025-09-03 13:36:43.16835896 UTC , thread_cap_info = ("ThreadId 98",
| | | | | S | |      1, False)}
| | | | | S | |      
| S | | | | | |      
| F | | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| F | | | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| F | | | | | |      = 33} , self = 61 , parent = Nothing , duration = 1.510113030000 , status
| F | | | | | |      = Fail , start = 2025-09-03 13:36:40.121024689 UTC , finish = 2025-09-03
| F | | | | | |      13:36:41.631137719 UTC , thread_cap_info = ("ThreadId 99", 1, False)}
| F | | | | | |      
| | | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | | | | | F    = 33} , self = 59 , parent = Nothing , duration = 1.266488551000 , status
| | | | | | | | F    = Fail , start = 2025-09-03 13:36:40.208696471 UTC , finish = 2025-09-03
| | | | | | | | F    13:36:41.475185022 UTC , thread_cap_info = ("ThreadId 102", 1, False)}
| | | | | | | | F    
| | | | | | | | | E  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | | | | | | | | E  = 5 , num_top_rules = 5 , num_weak_rules = 64 , alphabet_size = 18 , total_length
| | | | | | | | | E  = 511} , self = 75 , parent = Nothing , duration = 3.139058074000 , status
| | | | | | | | | E  = Except "<<timeout>>" , start = 2025-09-03 13:36:40.257118648 UTC , finish
| | | | | | | | | E  = 2025-09-03 13:36:43.396176722 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | | | E  0, False)}
| | | | | | | | | E  
| | | | | | | | F |  
F | | | | | | |   |  
  F | | | | | |   |  
    | | | | S |   |  
    | | | |   E   |  
    E | | |       |  
      | | S       |  
      E |         |  
        F         |  
                  E  
