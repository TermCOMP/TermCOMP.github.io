Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5619, clauses: 24035
last 5619 length 24035
CNF 5619 vars 24035 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5619, clauses: 24035, status: Satisfied, time: 0.41675398s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28364, clauses: 126870
last 28364 length 126870
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9726, clauses: 45473
last 9726 length 45473
CNF 28364 vars 126870 clauses
CNF 9726 vars 45473 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9726, clauses: 45473, status: Unsatisfied, time: 0.503622378s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 28364, clauses: 126870, status: Satisfied, time: 0.98975037s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 27231, clauses: 115660
last 27231 length 115660
CNF 27231 vars 115660 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17761, clauses: 78957
last 17761 length 78957
CNF 17761 vars 78957 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 17761, clauses: 78957, status: Satisfied, time: 0.372343269s
**************************************************
summary
**************************************************
SRS with 20 rules on 3 letters       DP
SRS with 21 strict rules and 20 weak rules on 4 letters       EDG
SRS with 21 strict rules and 20 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 20 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 4 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 5 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 6 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 7 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 8 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 9 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 10 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 11 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 12 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 13 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 14 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 15 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 16 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 17 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 18 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 19 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 19) -}
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 64) (Input 19) , DP (Top 61) (Input 18) , DP (Top 58) (Input 17) , DP (Top 55) (Input 16) , DP (Top 52) (Input 15) , DP (Top 49) (Input 14) , DP (Top 46) (Input 13) , DP (Top 43) (Input 12) , DP (Top 40) (Input 11) , DP (Top 37) (Input 10) , DP (Top 34) (Input 9) , DP (Top 31) (Input 8) , DP (Top 28) (Input 7) , DP (Top 25) (Input 6) , DP (Top 22) (Input 5) , DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 61) (Input 19) , DP (Top 58) (Input 18) , DP (Top 55) (Input 17) , DP (Top 52) (Input 16) , DP (Top 49) (Input 15) , DP (Top 46) (Input 14) , DP (Top 43) (Input 13) , DP (Top 40) (Input 12) , DP (Top 37) (Input 11) , DP (Top 34) (Input 10) , DP (Top 31) (Input 9) , DP (Top 28) (Input 8) , DP (Top 25) (Input 7) , DP (Top 22) (Input 6) , DP (Top 19) (Input 5) , DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 58) (Input 19) , DP (Top 55) (Input 18) , DP (Top 52) (Input 17) , DP (Top 49) (Input 16) , DP (Top 46) (Input 15) , DP (Top 43) (Input 14) , DP (Top 40) (Input 13) , DP (Top 37) (Input 12) , DP (Top 34) (Input 11) , DP (Top 31) (Input 10) , DP (Top 28) (Input 9) , DP (Top 25) (Input 8) , DP (Top 22) (Input 7) , DP (Top 19) (Input 6) , DP (Top 16) (Input 5) , DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 55) (Input 19) , DP (Top 52) (Input 18) , DP (Top 49) (Input 17) , DP (Top 46) (Input 16) , DP (Top 43) (Input 15) , DP (Top 40) (Input 14) , DP (Top 37) (Input 13) , DP (Top 34) (Input 12) , DP (Top 31) (Input 11) , DP (Top 28) (Input 10) , DP (Top 25) (Input 9) , DP (Top 22) (Input 8) , DP (Top 19) (Input 7) , DP (Top 16) (Input 6) , DP (Top 13) (Input 5) , DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 52) (Input 19) , DP (Top 49) (Input 18) , DP (Top 46) (Input 17) , DP (Top 43) (Input 16) , DP (Top 40) (Input 15) , DP (Top 37) (Input 14) , DP (Top 34) (Input 13) , DP (Top 31) (Input 12) , DP (Top 28) (Input 11) , DP (Top 25) (Input 10) , DP (Top 22) (Input 9) , DP (Top 19) (Input 8) , DP (Top 16) (Input 7) , DP (Top 13) (Input 6) , DP (Top 10) (Input 5) , DP (Top 7) (Input 4) , DP (Top 4) (Input 3) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 49) (Input 19) , DP (Top 46) (Input 18) , DP (Top 43) (Input 17) , DP (Top 40) (Input 16) , DP (Top 37) (Input 15) , DP (Top 34) (Input 14) , DP (Top 31) (Input 13) , DP (Top 28) (Input 12) , DP (Top 25) (Input 11) , DP (Top 22) (Input 10) , DP (Top 19) (Input 9) , DP (Top 16) (Input 8) , DP (Top 13) (Input 7) , DP (Top 10) (Input 6) , DP (Top 7) (Input 5) , DP (Top 4) (Input 4) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 46) (Input 19) , DP (Top 43) (Input 18) , DP (Top 40) (Input 17) , DP (Top 37) (Input 16) , DP (Top 34) (Input 15) , DP (Top 31) (Input 14) , DP (Top 28) (Input 13) , DP (Top 25) (Input 12) , DP (Top 22) (Input 11) , DP (Top 19) (Input 10) , DP (Top 16) (Input 9) , DP (Top 13) (Input 8) , DP (Top 10) (Input 7) , DP (Top 7) (Input 6) , DP (Top 4) (Input 5) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 43) (Input 19) , DP (Top 40) (Input 18) , DP (Top 37) (Input 17) , DP (Top 34) (Input 16) , DP (Top 31) (Input 15) , DP (Top 28) (Input 14) , DP (Top 25) (Input 13) , DP (Top 22) (Input 12) , DP (Top 19) (Input 11) , DP (Top 16) (Input 10) , DP (Top 13) (Input 9) , DP (Top 10) (Input 8) , DP (Top 7) (Input 7) , DP (Top 4) (Input 6) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 40) (Input 19) , DP (Top 37) (Input 18) , DP (Top 34) (Input 17) , DP (Top 31) (Input 16) , DP (Top 28) (Input 15) , DP (Top 25) (Input 14) , DP (Top 22) (Input 13) , DP (Top 19) (Input 12) , DP (Top 16) (Input 11) , DP (Top 13) (Input 10) , DP (Top 10) (Input 9) , DP (Top 7) (Input 8) , DP (Top 4) (Input 7) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 37) (Input 19) , DP (Top 34) (Input 18) , DP (Top 31) (Input 17) , DP (Top 28) (Input 16) , DP (Top 25) (Input 15) , DP (Top 22) (Input 14) , DP (Top 19) (Input 13) , DP (Top 16) (Input 12) , DP (Top 13) (Input 11) , DP (Top 10) (Input 10) , DP (Top 7) (Input 9) , DP (Top 4) (Input 8) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 34) (Input 19) , DP (Top 31) (Input 18) , DP (Top 28) (Input 17) , DP (Top 25) (Input 16) , DP (Top 22) (Input 15) , DP (Top 19) (Input 14) , DP (Top 16) (Input 13) , DP (Top 13) (Input 12) , DP (Top 10) (Input 11) , DP (Top 7) (Input 10) , DP (Top 4) (Input 9) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 31) (Input 19) , DP (Top 28) (Input 18) , DP (Top 25) (Input 17) , DP (Top 22) (Input 16) , DP (Top 19) (Input 15) , DP (Top 16) (Input 14) , DP (Top 13) (Input 13) , DP (Top 10) (Input 12) , DP (Top 7) (Input 11) , DP (Top 4) (Input 10) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 28) (Input 19) , DP (Top 25) (Input 18) , DP (Top 22) (Input 17) , DP (Top 19) (Input 16) , DP (Top 16) (Input 15) , DP (Top 13) (Input 14) , DP (Top 10) (Input 13) , DP (Top 7) (Input 12) , DP (Top 4) (Input 11) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 25) (Input 19) , DP (Top 22) (Input 18) , DP (Top 19) (Input 17) , DP (Top 16) (Input 16) , DP (Top 13) (Input 15) , DP (Top 10) (Input 14) , DP (Top 7) (Input 13) , DP (Top 4) (Input 12) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 22) (Input 19) , DP (Top 19) (Input 18) , DP (Top 16) (Input 17) , DP (Top 13) (Input 16) , DP (Top 10) (Input 15) , DP (Top 7) (Input 14) , DP (Top 4) (Input 13) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 19) (Input 19) , DP (Top 16) (Input 18) , DP (Top 13) (Input 17) , DP (Top 10) (Input 16) , DP (Top 7) (Input 15) , DP (Top 4) (Input 14) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 16) (Input 19) , DP (Top 13) (Input 18) , DP (Top 10) (Input 17) , DP (Top 7) (Input 16) , DP (Top 4) (Input 15) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 13) (Input 19) , DP (Top 10) (Input 18) , DP (Top 7) (Input 17) , DP (Top 4) (Input 16) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 19) , DP (Top 7) (Input 18) , DP (Top 4) (Input 17) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 7) (Input 19) , DP (Top 4) (Input 18) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 19) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [0#, 1, 2, 1] |-> [0#, 1, 2] {- Many [ DP (Top 64) (Input 19) , DP (Top 61) (Input 18) , DP (Top 58) (Input 17) , DP (Top 55) (Input 16) , DP (Top 52) (Input 15) , DP (Top 49) (Input 14) , DP (Top 46) (Input 13) , DP (Top 43) (Input 12) , DP (Top 40) (Input 11) , DP (Top 37) (Input 10) , DP (Top 34) (Input 9) , DP (Top 31) (Input 8) , DP (Top 28) (Input 7) , DP (Top 25) (Input 6) , DP (Top 22) (Input 5) , DP (Top 19) (Input 4) , DP (Top 16) (Input 3) , DP (Top 13) (Input 2) , DP (Top 10) (Input 1) , DP (Top 7) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2] {- Many [ DP (Top 61) (Input 19) , DP (Top 58) (Input 18) , DP (Top 55) (Input 17) , DP (Top 52) (Input 16) , DP (Top 49) (Input 15) , DP (Top 46) (Input 14) , DP (Top 43) (Input 13) , DP (Top 40) (Input 12) , DP (Top 37) (Input 11) , DP (Top 34) (Input 10) , DP (Top 31) (Input 9) , DP (Top 28) (Input 8) , DP (Top 25) (Input 7) , DP (Top 22) (Input 6) , DP (Top 19) (Input 5) , DP (Top 16) (Input 4) , DP (Top 13) (Input 3) , DP (Top 10) (Input 2) , DP (Top 7) (Input 1) , DP (Top 4) (Input 0) ] -}
  [0#, 1, 2, 1] |-> [0#, 1, 2, 0, 1, 2, 0, 1, 2] {- Many [ DP (Top 58) (Input 19) , DP (Top 55) (Input 18) , DP (Top 52) (Input 17) , DP (Top 49) (Input 16) , DP (Top 46) (Input 15) , DP (Top 43) (Input 14) , DP (Top 40) (Input 13) , DP (Top 37) (Input 12) , DP (Top 34) (Input 11) , DP (Top 31) (Input 10) , DP (Top 28) (Input 9) , DP (Top 25) (Input 8) , DP (Top 22) (Input 7) , DP (Top 19) (Input 6) , DP (Top 16) (Input 5) , DP (Top 13) (Input 4) , DP (Top 10) (Input 3) , DP (Top 7) (Input 2) , DP (Top 4) (Input 1) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 55) (Input 19) , DP (Top 52) (Input 18) , DP (Top 49) (Input 17) , DP (Top 46) (Input 16) , DP (Top 43) (Input 15) , DP (Top 40) (Input 14) , DP (Top 37) (Input 13) , DP (Top 34) (Input 12) , DP (Top 31) (Input 11) , DP (Top 28) (Input 10) , DP (Top 25) (Input 9) , DP (Top 22) (Input 8) , DP (Top 19) (Input 7) , DP (Top 16) (Input 6) , DP (Top 13) (Input 5) , DP (Top 10) (Input 4) , DP (Top 7) (Input 3) , DP (Top 4) (Input 2) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 52) (Input 19) , DP (Top 49) (Input 18) , DP (Top 46) (Input 17) , DP (Top 43) (Input 16) , DP (Top 40) (Input 15) , DP (Top 37) (Input 14) , DP (Top 34) (Input 13) , DP (Top 31) (Input 12) , DP (Top 28) (Input 11) , DP (Top 25) (Input 10) , DP (Top 22) (Input 9) , DP (Top 19) (Input 8) , DP (Top 16) (Input 7) , DP (Top 13) (Input 6) , DP (Top 10) (Input 5) , DP (Top 7) (Input 4) , DP (Top 4) (Input 3) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 49) (Input 19) , DP (Top 46) (Input 18) , DP (Top 43) (Input 17) , DP (Top 40) (Input 16) , DP (Top 37) (Input 15) , DP (Top 34) (Input 14) , DP (Top 31) (Input 13) , DP (Top 28) (Input 12) , DP (Top 25) (Input 11) , DP (Top 22) (Input 10) , DP (Top 19) (Input 9) , DP (Top 16) (Input 8) , DP (Top 13) (Input 7) , DP (Top 10) (Input 6) , DP (Top 7) (Input 5) , DP (Top 4) (Input 4) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 46) (Input 19) , DP (Top 43) (Input 18) , DP (Top 40) (Input 17) , DP (Top 37) (Input 16) , DP (Top 34) (Input 15) , DP (Top 31) (Input 14) , DP (Top 28) (Input 13) , DP (Top 25) (Input 12) , DP (Top 22) (Input 11) , DP (Top 19) (Input 10) , DP (Top 16) (Input 9) , DP (Top 13) (Input 8) , DP (Top 10) (Input 7) , DP (Top 7) (Input 6) , DP (Top 4) (Input 5) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 43) (Input 19) , DP (Top 40) (Input 18) , DP (Top 37) (Input 17) , DP (Top 34) (Input 16) , DP (Top 31) (Input 15) , DP (Top 28) (Input 14) , DP (Top 25) (Input 13) , DP (Top 22) (Input 12) , DP (Top 19) (Input 11) , DP (Top 16) (Input 10) , DP (Top 13) (Input 9) , DP (Top 10) (Input 8) , DP (Top 7) (Input 7) , DP (Top 4) (Input 6) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 40) (Input 19) , DP (Top 37) (Input 18) , DP (Top 34) (Input 17) , DP (Top 31) (Input 16) , DP (Top 28) (Input 15) , DP (Top 25) (Input 14) , DP (Top 22) (Input 13) , DP (Top 19) (Input 12) , DP (Top 16) (Input 11) , DP (Top 13) (Input 10) , DP (Top 10) (Input 9) , DP (Top 7) (Input 8) , DP (Top 4) (Input 7) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 37) (Input 19) , DP (Top 34) (Input 18) , DP (Top 31) (Input 17) , DP (Top 28) (Input 16) , DP (Top 25) (Input 15) , DP (Top 22) (Input 14) , DP (Top 19) (Input 13) , DP (Top 16) (Input 12) , DP (Top 13) (Input 11) , DP (Top 10) (Input 10) , DP (Top 7) (Input 9) , DP (Top 4) (Input 8) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 34) (Input 19) , DP (Top 31) (Input 18) , DP (Top 28) (Input 17) , DP (Top 25) (Input 16) , DP (Top 22) (Input 15) , DP (Top 19) (Input 14) , DP (Top 16) (Input 13) , DP (Top 13) (Input 12) , DP (Top 10) (Input 11) , DP (Top 7) (Input 10) , DP (Top 4) (Input 9) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 31) (Input 19) , DP (Top 28) (Input 18) , DP (Top 25) (Input 17) , DP (Top 22) (Input 16) , DP (Top 19) (Input 15) , DP (Top 16) (Input 14) , DP (Top 13) (Input 13) , DP (Top 10) (Input 12) , DP (Top 7) (Input 11) , DP (Top 4) (Input 10) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 28) (Input 19) , DP (Top 25) (Input 18) , DP (Top 22) (Input 17) , DP (Top 19) (Input 16) , DP (Top 16) (Input 15) , DP (Top 13) (Input 14) , DP (Top 10) (Input 13) , DP (Top 7) (Input 12) , DP (Top 4) (Input 11) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 25) (Input 19) , DP (Top 22) (Input 18) , DP (Top 19) (Input 17) , DP (Top 16) (Input 16) , DP (Top 13) (Input 15) , DP (Top 10) (Input 14) , DP (Top 7) (Input 13) , DP (Top 4) (Input 12) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 22) (Input 19) , DP (Top 19) (Input 18) , DP (Top 16) (Input 17) , DP (Top 13) (Input 16) , DP (Top 10) (Input 15) , DP (Top 7) (Input 14) , DP (Top 4) (Input 13) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 19) (Input 19) , DP (Top 16) (Input 18) , DP (Top 13) (Input 17) , DP (Top 10) (Input 16) , DP (Top 7) (Input 15) , DP (Top 4) (Input 14) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 16) (Input 19) , DP (Top 13) (Input 18) , DP (Top 10) (Input 17) , DP (Top 7) (Input 16) , DP (Top 4) (Input 15) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 13) (Input 19) , DP (Top 10) (Input 18) , DP (Top 7) (Input 17) , DP (Top 4) (Input 16) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 10) (Input 19) , DP (Top 7) (Input 18) , DP (Top 4) (Input 17) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Many [ DP (Top 7) (Input 19) , DP (Top 4) (Input 18) ] -}
  [0#, 1, 2, 1] |-> [ 0# , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP (Top 4) (Input 19) -}
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 19) -}
reason
  ( 1
  , Wk  / 1 0 1 \
        | 7 1 0 |
        \ 0 0 1 / )
  ( 2
  , Wk  / 0 0 0 \
        | 1 0 0 |
        \ 0 0 1 / )
  ( 0
  , Wk  / 0 1 0 \
        | 0 4 0 |
        \ 0 0 1 / )
  ( 0#
  , Wk  / 1 1 2 \
        | 0 0 0 |
        \ 0 0 1 / )
   property Termination
has value Just True
for SRS
  [0, 1, 2, 1] ->= [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- DP Nontop (Input 0) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 1) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 2) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 3) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 4) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 5) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 6) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 7) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 8) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 9) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 10) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 11) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 12) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 13) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 14) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 15) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 16) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 17) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 18) -}
  [0, 1, 2, 1] ->= [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- DP Nontop (Input 19) -}
reason
  EDG

**************************************************
skeleton: (20,3)\Deepee\EDG(21/20,4)\Matrix{\Natural}{3}(0/20,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.124041207000
  min duration 3.061531340000
  total durat. 9.267627561000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 870}
    , self = 58
    , parent = Nothing
    , duration = 3.061531340000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:02.893340017 UTC
    , finish = 2025-09-03 12:40:05.954871357 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 137
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 120
      , alphabet_size = 10
      , total_length = 5482}
    , self = 60
    , parent = Nothing
    , duration = 3.082055014000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:03.233339094 UTC
    , finish = 2025-09-03 12:40:06.315394108 UTC
    , thread_cap_info = ("ThreadId 98", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 1627}
    , self = 56
    , parent = Nothing
    , duration = 3.124041207000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:02.773597405 UTC
    , finish = 2025-09-03 12:40:05.897638612 UTC
    , thread_cap_info = ("ThreadId 88", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.178021511000
  min duration 3.178021511000
  total durat. 3.178021511000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 120
      , num_strict_rules = 120
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 5340}
    , self = 54
    , parent = Nothing
    , duration = 3.178021511000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:02.636702844 UTC
    , finish = 2025-09-03 12:40:05.814724355 UTC
    , thread_cap_info = ("ThreadId 72", 0, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.120002760000
  min duration 3.080820399000
  total durat. 9.305133136000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 137
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 120
      , alphabet_size = 10
      , total_length = 5482}
    , self = 61
    , parent = Nothing
    , duration = 3.080820399000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:03.274509479 UTC
    , finish = 2025-09-03 12:40:06.355329878 UTC
    , thread_cap_info = ("ThreadId 99", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 1627}
    , self = 57
    , parent = Nothing
    , duration = 3.104309977000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:02.793343346 UTC
    , finish = 2025-09-03 12:40:05.897653323 UTC
    , thread_cap_info = ("ThreadId 89", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 870}
    , self = 59
    , parent = Nothing
    , duration = 3.120002760000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 12:40:02.97334176 UTC
    , finish = 2025-09-03 12:40:06.09334452 UTC
    , thread_cap_info = ("ThreadId 93", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.200018275000
  min duration 3.200018275000
  total durat. 3.200018275000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 120
      , num_strict_rules = 120
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 5340}
    , self = 55
    , parent = Nothing
    , duration = 3.200018275000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:02.653337519 UTC
    , finish = 2025-09-03 12:40:05.853355794 UTC
    , thread_cap_info = ("ThreadId 74", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 3.846407019000
  min duration 1.382407193000
  total durat. 8.088811250000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 870}
    , self = 64
    , parent = Nothing
    , duration = 1.382407193000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:06.213346729 UTC
    , finish = 2025-09-03 12:40:07.595753922 UTC
    , thread_cap_info = ("ThreadId 110", 3, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 137
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 120
      , alphabet_size = 10
      , total_length = 5482}
    , self = 72
    , parent = Nothing
    , duration = 2.859997038000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:06.373345948 UTC
    , finish = 2025-09-03 12:40:09.233342986 UTC
    , thread_cap_info = ("ThreadId 114", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 1627}
    , self = 79
    , parent = Nothing
    , duration = 3.846407019000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:40:05.995103554 UTC
    , finish = 2025-09-03 12:40:09.841510573 UTC
    , thread_cap_info = ("ThreadId 107", 3, False)}
Success : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.567547613000
  min duration 1.567547613000
  total durat. 1.567547613000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 1627}
    , self = 77
    , parent = Nothing
    , duration = 1.567547613000
    , status = Success
    , start = 2025-09-03 12:40:08.158347765 UTC
    , finish = 2025-09-03 12:40:09.725895378 UTC
    , thread_cap_info = ("ThreadId 124", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 2.740897158000
  min duration 1.197808277000
  total durat. 3.938705435000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 3
      , num_top_rules = 3
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 870}
    , self = 62
    , parent = Nothing
    , duration = 1.197808277000
    , status = Success
    , start = 2025-09-03 12:40:06.13334259 UTC
    , finish = 2025-09-03 12:40:07.331150867 UTC
    , thread_cap_info = ("ThreadId 109", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 137
      , num_strict_rules = 17
      , num_top_rules = 17
      , num_weak_rules = 120
      , alphabet_size = 10
      , total_length = 5482}
    , self = 70
    , parent = Nothing
    , duration = 2.740897158000
    , status = Success
    , start = 2025-09-03 12:40:06.35534145 UTC
    , finish = 2025-09-03 12:40:09.096238608 UTC
    , thread_cap_info = ("ThreadId 113", 1, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.156086368000
  min duration 2.156086368000
  total durat. 2.156086368000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 41
      , num_strict_rules = 21
      , num_top_rules = 21
      , num_weak_rules = 20
      , alphabet_size = 4
      , total_length = 1627}
    , self = 69
    , parent = Nothing
    , duration = 2.156086368000
    , status = Fail
    , start = 2025-09-03 12:40:05.977406774 UTC
    , finish = 2025-09-03 12:40:08.133493142 UTC
    , thread_cap_info = ("ThreadId 106", 3, False)}
Fail : "Transport\n { mode = Standard\n , output_as = Transport_System\n , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n , string_implementation = ByteString Plain\n , tracing = False\n , cpf = True}"
  total number 1
  max duration 1.317695075000
  min duration 1.317695075000
  total durat. 1.317695075000
  Info
    { what = "Transport\n  { mode = Standard\n  , output_as = Transport_System\n  , direction = Forward_Backward\n  , max_derivation_length = Just 2\n  , max_expansion_width = Nothing\n  , max_tiers = Just 33\n  , max_overlap_closures = Nothing\n  , string_implementation = ByteString Plain\n  , tracing = False\n  , cpf = True}"
    , input_size = Size
      { num_rules = 20
      , num_strict_rules = 20
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 850}
    , self = 53
    , parent = Nothing
    , duration = 1.317695075000
    , status = Fail
    , start = 2025-09-03 12:40:02.557466249 UTC
    , finish = 2025-09-03 12:40:03.875161324 UTC
    , thread_cap_info = ("ThreadId 23", 1, False)}
**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 20 , num_strict_rules = 20 ,
F                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F                  = 850} , self = 53 , parent = Nothing , duration = 1.317695075000 , status
F                  = Fail , start = 2025-09-03 12:40:02.557466249 UTC , finish = 2025-09-03
F                  12:40:03.875161324 UTC , thread_cap_info = ("ThreadId 23", 1, False)}
F                  
| E                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| E                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| E                = False\n , verbose = False}" , input_size = Size { num_rules = 120 , num_strict_rules
| E                = 120 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| E                = 5340} , self = 54 , parent = Nothing , duration = 3.178021511000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 12:40:02.636702844 UTC ,
| E                finish = 2025-09-03 12:40:05.814724355 UTC , thread_cap_info = ("ThreadId
| E                72", 0, False)}
| E                
| | E              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E              = False\n , verbose = False}" , input_size = Size { num_rules = 120 , num_strict_rules
| | E              = 120 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | E              = 5340} , self = 55 , parent = Nothing , duration = 3.200018275000 , status
| | E              = Except "AsyncCancelled" , start = 2025-09-03 12:40:02.653337519 UTC ,
| | E              finish = 2025-09-03 12:40:05.853355794 UTC , thread_cap_info = ("ThreadId
| | E              74", 0, False)}
| | E              
| | | S            Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | S            verbose = False}" , input_size = Size { num_rules = 267 , num_strict_rules
| | | S            = 147 , num_top_rules = 147 , num_weak_rules = 120 , alphabet_size = 10
| | | S            , total_length = 10806} , self = 50 , parent = Nothing , duration = 0.512793586000
| | | S            , status = Success , start = 2025-09-03 12:40:02.688003766 UTC , finish
| | | S            = 2025-09-03 12:40:03.200797352 UTC , thread_cap_info = ("ThreadId 58",
| | | S            1, False)}
| | | S            
| | | | E          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 41 , num_strict_rules
| | | | E          = 21 , num_top_rules = 21 , num_weak_rules = 20 , alphabet_size = 4 , total_length
| | | | E          = 1627} , self = 56 , parent = Nothing , duration = 3.124041207000 , status
| | | | E          = Except "<<timeout>>" , start = 2025-09-03 12:40:02.773597405 UTC , finish
| | | | E          = 2025-09-03 12:40:05.897638612 UTC , thread_cap_info = ("ThreadId 88",
| | | | E          3, False)}
| | | | E          
| | | | | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E        = False\n , verbose = False}" , input_size = Size { num_rules = 41 , num_strict_rules
| | | | | E        = 21 , num_top_rules = 21 , num_weak_rules = 20 , alphabet_size = 4 , total_length
| | | | | E        = 1627} , self = 57 , parent = Nothing , duration = 3.104309977000 , status
| | | | | E        = Except "<<timeout>>" , start = 2025-09-03 12:40:02.793343346 UTC , finish
| | | | | E        = 2025-09-03 12:40:05.897653323 UTC , thread_cap_info = ("ThreadId 89",
| | | | | E        3, False)}
| | | | | E        
| | | | | | E      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | E      = 3 , num_top_rules = 3 , num_weak_rules = 20 , alphabet_size = 4 , total_length
| | | | | | E      = 870} , self = 58 , parent = Nothing , duration = 3.061531340000 , status
| | | | | | E      = Except "<<timeout>>" , start = 2025-09-03 12:40:02.893340017 UTC , finish
| | | | | | E      = 2025-09-03 12:40:05.954871357 UTC , thread_cap_info = ("ThreadId 91",
| | | | | | E      3, False)}
| | | | | | E      
| | | | | | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | | | | | E    = 3 , num_top_rules = 3 , num_weak_rules = 20 , alphabet_size = 4 , total_length
| | | | | | | E    = 870} , self = 59 , parent = Nothing , duration = 3.120002760000 , status
| | | | | | | E    = Except "<<timeout>>" , start = 2025-09-03 12:40:02.97334176 UTC , finish
| | | | | | | E    = 2025-09-03 12:40:06.09334452 UTC , thread_cap_info = ("ThreadId 93",
| | | | | | | E    3, False)}
| | | | | | | E    
| | | S | | | |    
| | | E | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 137 , num_strict_rules
| | | E | | | |    = 17 , num_top_rules = 17 , num_weak_rules = 120 , alphabet_size = 10 ,
| | | E | | | |    total_length = 5482} , self = 60 , parent = Nothing , duration = 3.082055014000
| | | E | | | |    , status = Except "<<timeout>>" , start = 2025-09-03 12:40:03.233339094
| | | E | | | |    UTC , finish = 2025-09-03 12:40:06.315394108 UTC , thread_cap_info = ("ThreadId
| | | E | | | |    98", 1, False)}
| | | E | | | |    
| | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 137 , num_strict_rules
| | | | | | | | E  = 17 , num_top_rules = 17 , num_weak_rules = 120 , alphabet_size = 10 ,
| | | | | | | | E  total_length = 5482} , self = 61 , parent = Nothing , duration = 3.080820399000
| | | | | | | | E  , status = Except "<<timeout>>" , start = 2025-09-03 12:40:03.274509479
| | | | | | | | E  UTC , finish = 2025-09-03 12:40:06.355329878 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  99", 1, False)}
| | | | | | | | E  
F | | | | | | | |  
  E | | | | | | |  
    E | | | | | |  
      | E | | | |  
      |   E | | |  
      |     E | |  
F     |       | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F     |       | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F     |       | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F     |       | |  = 41 , num_strict_rules = 21 , num_top_rules = 21 , num_weak_rules = 20
F     |       | |  , alphabet_size = 4 , total_length = 1627} , self = 69 , parent = Nothing
F     |       | |  , duration = 2.156086368000 , status = Fail , start = 2025-09-03 12:40:05.977406774
F     |       | |  UTC , finish = 2025-09-03 12:40:08.133493142 UTC , thread_cap_info = ("ThreadId
F     |       | |  106", 3, False)}
F     |       | |  
| E   |       | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E   |       | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E   |       | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E   |       | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   |       | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   |       | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 41
| E   |       | |  , num_strict_rules = 21 , num_top_rules = 21 , num_weak_rules = 20 , alphabet_size
| E   |       | |  = 4 , total_length = 1627} , self = 79 , parent = Nothing , duration =
| E   |       | |  3.846407019000 , status = Except "AsyncCancelled" , start = 2025-09-03
| E   |       | |  12:40:05.995103554 UTC , finish = 2025-09-03 12:40:09.841510573 UTC , thread_cap_info
| E   |       | |  = ("ThreadId 107", 3, False)}
| E   |       | |  
| |   |       E |  
| | S |         |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |         |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |         |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |         |  = 23 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 20 ,
| | S |         |  alphabet_size = 4 , total_length = 870} , self = 62 , parent = Nothing
| | S |         |  , duration = 1.197808277000 , status = Success , start = 2025-09-03 12:40:06.13334259
| | S |         |  UTC , finish = 2025-09-03 12:40:07.331150867 UTC , thread_cap_info = ("ThreadId
| | S |         |  109", 3, False)}
| | S |         |  
| | | | E       |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E       |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E       |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E       |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E       |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E       |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 23
| | | | E       |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 20 , alphabet_size
| | | | E       |  = 4 , total_length = 870} , self = 64 , parent = Nothing , duration = 1.382407193000
| | | | E       |  , status = Except "AsyncCancelled" , start = 2025-09-03 12:40:06.213346729
| | | | E       |  UTC , finish = 2025-09-03 12:40:07.595753922 UTC , thread_cap_info = ("ThreadId
| | | | E       |  110", 3, False)}
| | | | E       |  
| | | E |       |  
| | |   |       E  
| | | S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S |          = 137 , num_strict_rules = 17 , num_top_rules = 17 , num_weak_rules = 120
| | | S |          , alphabet_size = 10 , total_length = 5482} , self = 70 , parent = Nothing
| | | S |          , duration = 2.740897158000 , status = Success , start = 2025-09-03 12:40:06.35534145
| | | S |          UTC , finish = 2025-09-03 12:40:09.096238608 UTC , thread_cap_info = ("ThreadId
| | | S |          113", 1, False)}
| | | S |          
| | | | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 137
| | | | | E        , num_strict_rules = 17 , num_top_rules = 17 , num_weak_rules = 120 , alphabet_size
| | | | | E        = 10 , total_length = 5482} , self = 72 , parent = Nothing , duration =
| | | | | E        2.859997038000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | | | | E        12:40:06.373345948 UTC , finish = 2025-09-03 12:40:09.233342986 UTC , thread_cap_info
| | | | | E        = ("ThreadId 114", 1, False)}
| | | | | E        
| | S | | |        
| |   | E |        
F |   |   |        
S |   |   |        Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
S |   |   |        = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S |   |   |        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S |   |   |        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S |   |   |        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S |   |   |        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 41
S |   |   |        , num_strict_rules = 21 , num_top_rules = 21 , num_weak_rules = 20 , alphabet_size
S |   |   |        = 4 , total_length = 1627} , self = 77 , parent = Nothing , duration =
S |   |   |        1.567547613000 , status = Success , start = 2025-09-03 12:40:08.158347765
S |   |   |        UTC , finish = 2025-09-03 12:40:09.725895378 UTC , thread_cap_info = ("ThreadId
S |   |   |        124", 3, False)}
S |   |   |        
| |   S   |        
| |       E        
S |                
  E                
last 39718 length 240042
