last 807 length 3397
last 755 length 3111
CNF 807 vars 3397 clauses
CNF 755 vars 3111 clauses
last 1362 length 5888
CNF 1362 vars 5888 clauses
last 1710 length 7512
last 1495 length 6463
CNF 1710 vars 7512 clauses
last 1038 length 5041
CNF 1495 vars 6463 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1705, clauses: 6313
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5651, clauses: 23587
last 1705 length 6313
last 5651 length 23587
CNF 1038 vars 5041 clauses
CNF 1705 vars 6313 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2121, clauses: 8084
CNF 5651 vars 23587 clauses
last 2121 length 8084
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1705, clauses: 6313, status: Satisfied, time: 0.050935659s
CNF 2121 vars 8084 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5651, clauses: 23587, status: Unsatisfied, time: 0.173284784s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6326, clauses: 26406
last 6326 length 26406
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2121, clauses: 8084, status: Satisfied, time: 0.151717336s
last 5836 length 23878
CNF 6326 vars 26406 clauses
last 591 length 2489
CNF 591 vars 2489 clauses
last 770 length 3249
CNF 770 vars 3249 clauses
CNF 5836 vars 23878 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1597, clauses: 5794
last 1597 length 5794
last 998 length 4911
CNF 1597 vars 5794 clauses
last 5022 length 22703
last 1337 length 5835
CNF 998 vars 4911 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5603, clauses: 23407
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1597, clauses: 5794, status: Satisfied, time: 0.251764453s
CNF 1337 vars 5835 clauses
CNF 5022 vars 22703 clauses
last 11187 length 51005
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2015, clauses: 7605
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7690, clauses: 32680
last 12462 length 55605
**************************************************
last 2015 length 7605
last 7690 length 32680
CNF 11187 vars 51005 clauses
CNF 12462 vars 55605 clauses
summaryCNF 2015 vars 7605 clauses
CNF 7690 vars 32680 clauses

**************************************************
SRS with 2 rules on 2 letters       context
SRS with 3 rules on 2 letters       mirror
SRS with 3 rules on 2 letters       DP
SRS with 6 strict rules and 3 weak rules on 4 letters       weights
SRS with 2 strict rules and 3 weak rules on 3 letters       EDG
SRS with 2 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [b, a] -> [] {- Input 1 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a, a, b] -> [b, a, b, a, a, a] {- Input 0 -}
  [a, b, a] -> [a] {- Input 1 -}
  [b, b, a] -> [b] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a, a] -> [a, a, a, b, a, b] {- Mirror (Input 0) -}
  [a, b, a] -> [a] {- Mirror (Input 1) -}
  [a, b, b] -> [b] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a, a] |-> [a#, a, a, b, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [a#, a, b, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [a#, b] {- DP (Top 4) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [a#, b, a, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [b#] {- DP (Top 5) (Mirror (Input 0)) -}
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b#
  , Wk  / 15A 18A 18A - \
        | 15A 18A 18A - |
        | 15A 18A 18A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a, a] |-> [b#, a, b] {- DP (Top 3) (Mirror (Input 0)) -}
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b#
  , Wk  / 8A 8A 11A - \
        | 8A 8A 11A - |
        | 8A 8A 11A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [b, a, a, a] ->= [a, a, a, b, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, b, a] ->= [a] {- DP Nontop (Mirror (Input 1)) -}
  [a, b, b] ->= [b] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: (2,2)\Context\Mirror(3,2)\Deepee(6/3,4)\Weight\EDG(2/3,3)\Matrix{\Arctic}{3}\EDG(1/3,3)\Matrix{\Arctic}{3}(0/3,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 0.422398447000
  min duration 0.025468907000
  total durat. 1.107646020000
**************************************************
E              Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E              , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E              = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E              , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E              = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
E              = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 12} , self
E              = 86 , parent = Nothing , duration = 0.963915040000 , status = Except "AsyncCancelled"
E              , start = 2025-09-03 10:52:46.728312976 UTC , finish = 2025-09-03 10:52:47.692228016
E              UTC , thread_cap_info = ("ThreadId 22", 2, False)}
E              
| F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 30 , num_strict_rules
| F            = 22 , num_top_rules = 22 , num_weak_rules = 8 , alphabet_size = 7 , total_length
| F            = 256} , self = 79 , parent = Nothing , duration = 0.421837547000 , status
| F            = Fail , start = 2025-09-03 10:52:46.752134184 UTC , finish = 2025-09-03
| F            10:52:47.173971731 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F          = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | F          = 64} , self = 59 , parent = Nothing , duration = 0.101508896000 , status
| | F          = Fail , start = 2025-09-03 10:52:46.752137039 UTC , finish = 2025-09-03
| | F          10:52:46.853645935 UTC , thread_cap_info = ("ThreadId 82", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F        = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | F        = 45} , self = 60 , parent = Nothing , duration = 0.128874906000 , status
| | | F        = Fail , start = 2025-09-03 10:52:46.77411161 UTC , finish = 2025-09-03
| | | F        10:52:46.902986516 UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | F      = 45} , self = 61 , parent = Nothing , duration = 0.140856922000 , status
| | | | F      = Fail , start = 2025-09-03 10:52:46.790246549 UTC , finish = 2025-09-03
| | | | F      10:52:46.931103471 UTC , thread_cap_info = ("ThreadId 101", 3, False)}
| | | | F      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | S    = 3 , total_length = 30} , self = 62 , parent = Nothing , duration = 0.255457012000
| | | | | S    , status = Success , start = 2025-09-03 10:52:46.797672933 UTC , finish
| | | | | S    = 2025-09-03 10:52:47.053129945 UTC , thread_cap_info = ("ThreadId 104",
| | | | | S    3, False)}
| | | | | S    
| | | | | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | F  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | | | | | F  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | | | | | F  = 3 , total_length = 30} , self = 64 , parent = Nothing , duration = 0.260288388000
| | | | | | F  , status = Fail , start = 2025-09-03 10:52:46.819578954 UTC , finish =
| | | | | | F  2025-09-03 10:52:47.079867342 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | F  3, False)}
| | | | | | F  
| | F | | | |  
| |   F | | |  
| | S   | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S   | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S   | | |  = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | S   | | |  = 3 , total_length = 45} , self = 65 , parent = Nothing , duration = 0.180125349000
| | S   | | |  , status = Success , start = 2025-09-03 10:52:46.903022249 UTC , finish
| | S   | | |  = 2025-09-03 10:52:47.083147598 UTC , thread_cap_info = ("ThreadId 113",
| | S   | | |  3, False)}
| | S   | | |  
| | |   F | |  
| | | E   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E   | |  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | E   | |  = 3 , total_length = 45} , self = 73 , parent = Nothing , duration = 0.189720113000
| | | E   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 10:52:46.937489152
| | | E   | |  UTC , finish = 2025-09-03 10:52:47.127209265 UTC , thread_cap_info = ("ThreadId
| | | E   | |  116", 3, False)}
| | | E   | |  
| | | |   S |  
| | | |     F  
| | S |        
| | S |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S |        = 4 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | S |        = 3 , total_length = 25} , self = 81 , parent = Nothing , duration = 0.547152483000
| | S |        , status = Success , start = 2025-09-03 10:52:47.125168135 UTC , finish
| | S |        = 2025-09-03 10:52:47.672320618 UTC , thread_cap_info = ("ThreadId 129",
| | S |        3, False)}
| | S |        
| | | E        
| | | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E        , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size
| | | E        = 3 , total_length = 25} , self = 83 , parent = Nothing , duration = 0.531717013000
| | | E        , status = Except "AsyncCancelled" , start = 2025-09-03 10:52:47.140661941
| | | E        UTC , finish = 2025-09-03 10:52:47.672378954 UTC , thread_cap_info = ("ThreadId
| | | E        133", 3, False)}
| | | E        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
| | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | | | F      = 40} , self = 80 , parent = Nothing , duration = 0.422398447000 , status
| | | | F      = Fail , start = 2025-09-03 10:52:47.151475684 UTC , finish = 2025-09-03
| | | | F      10:52:47.573874131 UTC , thread_cap_info = ("ThreadId 136", 3, False)}
| | | | F      
| F | | |      
|   | | F      
|   S |        
|     E        
E              
