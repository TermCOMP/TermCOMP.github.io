last 545 length 2141
last 474 length 1866
CNF 545 vars 2141 clauses
CNF 474 vars 1866 clauses
last 419 length 1661
CNF 419 vars 1661 clauses
last 482 length 1897
CNF 482 vars 1897 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2204, clauses: 7842
last 2204 length 7842
last 4716 length 23499
CNF 4716 vars 23499 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2413, clauses: 8617
last 2413 length 8617
last 4185 length 18834
CNF 4185 vars 18834 clauses
CNF 2204 vars 7842 clauses
CNF 2413 vars 8617 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7088, clauses: 29349
last 7088 length 29349
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2204, clauses: 7842, status: Unsatisfied, time: 0.150328384s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6877, clauses: 28367
last 6877 length 28367
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2413, clauses: 8617, status: Unsatisfied, time: 0.15911452s
CNF 6877 vars 28367 clauses
CNF 7088 vars 29349 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6877, clauses: 28367, status: Satisfied, time: 0.046909414s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4495, clauses: 17602
last 4495 length 17602
CNF 4495 vars 17602 clauses
last 9326 length 42859
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7088, clauses: 29349, status: Unsatisfied, time: 0.406868437s
CNF 9326 vars 42859 clauses
last 9478 length 43109
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4495, clauses: 17602, status: Unsatisfied, time: 0.317503553s
CNF 9478 vars 43109 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3596, clauses: 13507
**************************************************
last 13883 length 59003
last 3596 length 13507
summary
**************************************************
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 5 strict rules and 8 weak rules on 6 letters       weights
SRS with 3 strict rules and 8 weak rules on 5 letters       EDG
SRS with 3 strict rules and 8 weak rules on 5 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 8 weak rules on 5 letters       weights
SRS with 1 strict rules and 8 weak rules on 4 letters       EDG
SRS with 1 strict rules and 8 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, a, c, a] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, c, c] -> [b] {- Input 3 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [c, a] -> [c] {- Input 0 -}
  [a, b] -> [b, a, c, a] {- Input 1 -}
  [a, b] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [c, b] -> [c] {- Input 2 -}
  [c, c, c] -> [b] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [a, c] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, c, a, b] {- Mirror (Input 1) -}
  [b, a] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [b, c] -> [c] {- Mirror (Input 2) -}
  [c, c, c] -> [b] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b#, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a] |-> [a#, c, a, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 1/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
CNF 3596 vars 13507 clauses
CNF 13883 vars 59003 clauses
  last 12624 length 53750
[b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [b#, a] |-> [c#, a, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( a
  , Wk  / 1A  -1A 0A \
        | -1A 0A  -  |
        \ -   -   0A / )
  ( b
  , Wk  / 1A -1A 0A \
        | 1A -   -  |
        \ -  -   0A / )
  ( c
  , Wk  / -1A 0A 0A \
        | 0A  1A 1A |
        \ -   -  0A / )
  ( b#
  , Wk  / 1A - 2A \
        | -  - -  |
        \ -  - 0A / )
  ( c#
  , Wk  / - 0A 1A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [c#, c, c] |-> [b#] {- DP (Top 0) (Mirror (Input 3)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
  [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
  [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
  [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
      [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [a, c] ->= [c] {- DP Nontop (Mirror (Input 0)) -}
      [b, a] ->= [a, c, a, b] {- DP Nontop (Mirror (Input 1)) -}
      [b, a] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
      [b, b] ->= [b] {- DP Nontop (Mirror (Input 2)) -}
      [b, c] ->= [c] {- DP Nontop (Mirror (Input 2)) -}
      [c, c, c] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
   property Termination
has value Just True
for SRS
  [b#, a] |-> [b#] {- DP (Top 3) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (4,3)\Context\Mirror(8,3)\Deepee(5/8,6)\Weight\EDG(3/8,5)\Matrix{\ArcticBZ}{3}(2/8,5)\Weight\EDG(1/8,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F            = 180} , self = 60 , parent = Nothing , duration = 0.198856960000 , status
F            = Fail , start = 2025-09-03 11:06:42.326920742 UTC , finish = 2025-09-03
F            11:06:42.525777702 UTC , thread_cap_info = ("ThreadId 77", 3, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F          = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F          = 180} , self = 59 , parent = Nothing , duration = 0.121402098000 , status
| F          = Fail , start = 2025-09-03 11:06:42.340878344 UTC , finish = 2025-09-03
| F          11:06:42.462280442 UTC , thread_cap_info = ("ThreadId 79", 3, False)}
| F          
| | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F        = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | F        = 65 , num_top_rules = 65 , num_weak_rules = 36 , alphabet_size = 17 ,
| | F        total_length = 525} , self = 71 , parent = Nothing , duration = 0.663092632000
| | F        , status = Fail , start = 2025-09-03 11:06:42.361139288 UTC , finish =
| | F        2025-09-03 11:06:43.02423192 UTC , thread_cap_info = ("ThreadId 96", 2,
| | F        False)}
| | F        
| | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F      = 11 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 ,
| | | F      alphabet_size = 5 , total_length = 40} , self = 62 , parent = Nothing ,
| | | F      duration = 0.259660158000 , status = Fail , start = 2025-09-03 11:06:42.366554164
| | | F      UTC , finish = 2025-09-03 11:06:42.626214322 UTC , thread_cap_info = ("ThreadId
| | | F      99", 1, False)}
| | | F      
| | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F    = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | F    alphabet_size = 4 , total_length = 36} , self = 61 , parent = Nothing ,
| | | | F    duration = 0.214102776000 , status = Fail , start = 2025-09-03 11:06:42.367366306
| | | | F    UTC , finish = 2025-09-03 11:06:42.581469082 UTC , thread_cap_info = ("ThreadId
| | | | F    100", 1, False)}
| | | | F    
| | | | | F  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | F  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | F  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | F  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | F  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | | | | F  = 4 , total_length = 36} , self = 68 , parent = Nothing , duration = 0.546191910000
| | | | | F  , status = Fail , start = 2025-09-03 11:06:42.384474401 UTC , finish =
| | | | | F  2025-09-03 11:06:42.930666311 UTC , thread_cap_info = ("ThreadId 102",
| | | | | F  1, False)}
| | | | | F  
| F | | | |  
| S | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
| S | | | |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
| S | | | |  = 5 , total_length = 40} , self = 63 , parent = Nothing , duration = 0.204133803000
| S | | | |  , status = Success , start = 2025-09-03 11:06:42.462944611 UTC , finish
| S | | | |  = 2025-09-03 11:06:42.667078414 UTC , thread_cap_info = ("ThreadId 108",
| S | | | |  1, False)}
| S | | | |  
F | | | | |  
  | | | F |  
  | | F   |  
  S |     |  
E   |     |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
E   |     |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
E   |     |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
E   |     |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
E   |     |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
E   |     |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 11
E   |     |  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 8 , alphabet_size
E   |     |  = 5 , total_length = 40} , self = 65 , parent = Nothing , duration = 0.159982673000
E   |     |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:06:42.680848477
E   |     |  UTC , finish = 2025-09-03 11:06:42.84083115 UTC , thread_cap_info = ("ThreadId
E   |     |  118", 1, False)}
E   |     |  
E   |     |  
    |     F  
    F        
