last 1889 length 8440
CNF 1889 vars 8440 clauses
last 2353 length 11370
CNF 2353 vars 11370 clauses
last 5789 length 26450
CNF 5789 vars 26450 clauses
last 8487 length 36488
CNF 8487 vars 36488 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10018, clauses: 41038
last 10018 length 41038
last 7716 length 45681
CNF 10018 vars 41038 clauses
CNF 7716 vars 45681 clauses
last 1059 length 5177
CNF 1059 vars 5177 clauses
last 1151 length 5091
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10018, clauses: 41038, status: Satisfied, time: 0.119717064s
last 800 length 3364
CNF 1151 vars 5091 clauses
CNF 800 vars 3364 clauses
last 918 length 3799
last 11130 length 53239
CNF 918 vars 3799 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8987
last 2355 length 8987
CNF 11130 vars 53239 clauses
CNF 2355 vars 8987 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 12 rules on 4 letters       DP
SRS with 30 strict rules and 12 weak rules on 8 letters       EDG
SRS with 30 strict rules and 12 weak rules on 8 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 12 weak rules on 7 letters       weights
SRS with 1 strict rules and 12 weak rules on 5 letters       EDG
SRS with 1 strict rules and 12 weak rules on 5 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a] -> [b] {- Input 1 -}
  [b, a, b] -> [a, a, b, b, b] {- Input 2 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = True}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] -> [[a, a]] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, b]] -> [[a, b]] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, a]] -> [[b, a]] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, b]] -> [[b, b]] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a], [a, a], [a, a]] -> [[a, b], [b, a]] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, a], [a, a], [a, b]] -> [[a, b], [b, b]] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a], [a, a], [a, a]] -> [[b, b], [b, a]] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, a], [a, a], [a, b]] -> [[b, b], [b, b]] {- Semlab 1 (Concon 1 (Input 1)) -}
  [[a, b], [b, a], [a, b], [b, a]] -> [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 0 (Concon 0 (Input 2)) -}
  [[a, b], [b, a], [a, b], [b, b]] -> [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 0 (Concon 1 (Input 2)) -}
  [[b, b], [b, a], [a, b], [b, a]] -> [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- Semlab 1 (Concon 0 (Input 2)) -}
  [[b, b], [b, a], [a, b], [b, b]] -> [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- Semlab 1 (Concon 1 (Input 2)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
  [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
  [[a, a]#, [a, a], [a, a]] |-> [ [a, b]# , [ b , a ] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a]#, [a, a], [a, a]] |-> [ [ b , a ]# ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [a, b]# , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 1))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [ b , b ]# ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 1))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 2))) -}Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2355, clauses: 8987, status: Satisfied, time: 0.095065028s

  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 2) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 4) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [b, b] , [ b , a ] ] {- DP (Top 3) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 2) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 4) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [b, b] , [ b , b ] ] {- DP (Top 3) (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a]#, [a, a], [a, a]] |-> [ [ b , a ]# ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a]#, [a, a], [a, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [ b , b ]# ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, a]#, [a, b]] |-> [[b, b]#] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 0))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 2) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 4) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [b, b] , [ b , a ] ] {- DP (Top 3) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 2) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 4) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [b, b] , [ b , b ] ] {- DP (Top 3) (Semlab 1 (Concon 1 (Input 2))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [[a, a]#, [a, a], [a, a]] |-> [ [a, b]# , [ b , a ] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 0) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, a]#, [a, a], [a, a]] |-> [ [ b , a ]# ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 1))) -}
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a]#, [a, a], [a, a]] |-> [ [ b , a ]# ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a]#, [a, a], [a, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 1) (Semlab 1 (Concon 0 (Input 2))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [a, b]# , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 1))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, a]#, [a, a], [a, b]] |-> [ [ b , b ]# ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 2) (Semlab 1 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 2) (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 4) (Semlab 0 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [ b , b ]# ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [ b , a ] ] {- DP (Top 4) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [b, b] , [ b , a ] ] {- DP (Top 3) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 1) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 2) (Semlab 1 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, a]] |-> [ [b, b]# , [b, b] , [ b , a ] ] {- DP (Top 3) (Semlab 0 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, a]#, [a, a], [a, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 1))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 4) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [b, b] , [ b , b ] ] {- DP (Top 3) (Semlab 1 (Concon 1 (Input 2))) -}
  [[b, a]#, [a, b]] |-> [[b, b]#] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 0) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, a]# , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 1) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [a, b]# , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 2) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [ b , b ] ] {- DP (Top 4) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, b]#, [b, a], [a, b], [b, b]] |-> [ [b, b]# , [b, b] , [ b , b ] ] {- DP (Top 3) (Semlab 0 (Concon 1 (Input 2))) -}
  [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
  [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
reason
  ( [a, a]
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( [a, b]
  , Wk  / 3A 6A 6A - \
        | 3A 3A 6A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( [b, a]
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( [b, b]
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( [a, a]#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( [a, b]#
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( [b, a]#
  , Wk  / 4A 4A 7A - \
        | 4A 4A 7A - |
        | 4A 4A 7A - |
        \ -  -  -  - / )
  ( [b, b]#
  , Wk  / 4A 5A 5A - \
        | 4A 5A 5A - |
        | 4A 5A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [[a, a]#, [a, a], [a, a]] |-> [ [ b , a ]# ] {- DP (Top 1) (Semlab 0 (Concon 0 (Input 1))) -}
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, b]#, [b, a], [a, b], [b, a]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b]#, [b, a], [a, b], [b, b]] |-> [ [b, a]# , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP (Top 0) (Semlab 1 (Concon 1 (Input 2))) -}
  [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
  [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 0/1)
  ([a, a]#, 1/1)
  ([b, a]#, 0/1)
  ([b, b]#, 1/1)
   property Termination
has value Just True
for SRS
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
  [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
  [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
  [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
  [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
  [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
  [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
  [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
  [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
  [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
  [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
  [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
  [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
reason
  remove un-usable
    SRS
      [[a, a], [a, a]] ->= [[a, a]] {- DP Nontop (Semlab 0 (Concon 0 (Input 0))) -}
      [[a, a], [a, b]] ->= [[a, b]] {- DP Nontop (Semlab 0 (Concon 1 (Input 0))) -}
      [[b, a], [a, a]] ->= [[b, a]] {- DP Nontop (Semlab 1 (Concon 0 (Input 0))) -}
      [[b, a], [a, b]] ->= [[b, b]] {- DP Nontop (Semlab 1 (Concon 1 (Input 0))) -}
      [[a, a], [a, a], [a, a]] ->= [ [a, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 1))) -}
      [[a, a], [a, a], [a, b]] ->= [ [a, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 1))) -}
      [[b, a], [a, a], [a, a]] ->= [ [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 1))) -}
      [[b, a], [a, a], [a, b]] ->= [ [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 1))) -}
      [[a, b], [b, a], [a, b], [b, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 0 (Concon 0 (Input 2))) -}
      [[a, b], [b, a], [a, b], [b, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 0 (Concon 1 (Input 2))) -}
      [[b, b], [b, a], [a, b], [b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , a ] ] {- DP Nontop (Semlab 1 (Concon 0 (Input 2))) -}
      [[b, b], [b, a], [a, b], [b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, b] , [b, b] , [ b , b ] ] {- DP Nontop (Semlab 1 (Concon 1 (Input 2))) -}
   property Termination
has value Just True
for SRS
  [[b, a]#, [a, a]] |-> [[b, a]#] {- DP (Top 0) (Semlab 1 (Concon 0 (Input 0))) -}
reason
  ([a, a], 1/1)
  ([b, a]#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,2)\TileAllAll{2}(12,4)\Deepee\EDG(30/12,8)\Matrix{\Arctic}{3}(4/12,7)\Weight\EDG(1/12,5)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 9267
last 2459 length 9267
CNF 2459 vars 9267 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2459, clauses: 9267, status: Satisfied, time: 0.066419786s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10436, clauses: 42579
last 10436 length 42579
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6444, clauses: 26777
last 6444 length 26777
CNF 10436 vars 42579 clauses
CNF 6444 vars 26777 clauses
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
F        = 30 , num_top_rules = 30 , num_weak_rules = 12 , alphabet_size = 8 , total_length
F        = 274} , self = 44 , parent = Nothing , duration = 0.175945658000 , status
F        = Fail , start = 2025-09-03 10:51:57.048056542 UTC , finish = 2025-09-03
F        10:51:57.2240022 UTC , thread_cap_info = ("ThreadId 77", 0, False)}
F        
| F      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| F      , closure = Backward\n , start_strict_only = True\n , max_closure_length
| F      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| F      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| F      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| F      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| F      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| F      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| F      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| F      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| F      = 12} , self = 46 , parent = Nothing , duration = 0.356745881000 , status
| F      = Fail , start = 2025-09-03 10:51:57.054434048 UTC , finish = 2025-09-03
| F      10:51:57.411179929 UTC , thread_cap_info = ("ThreadId 39", 3, False)}
| F      
| | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 46 , num_strict_rules
| | F    = 34 , num_top_rules = 34 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | F    = 294} , self = 62 , parent = Nothing , duration = 0.501811265000 , status
| | F    = Fail , start = 2025-09-03 10:51:57.054434568 UTC , finish = 2025-09-03
| | F    10:51:57.556245833 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| | | F  = 30 , num_top_rules = 30 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | F  = 274} , self = 45 , parent = Nothing , duration = 0.224062284000 , status
| | | F  = Fail , start = 2025-09-03 10:51:57.054444486 UTC , finish = 2025-09-03
| | | F  10:51:57.27850677 UTC , thread_cap_info = ("ThreadId 76", 0, False)}
| | | F  
F | | |  
S | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |  = 42 , num_strict_rules = 30 , num_top_rules = 30 , num_weak_rules = 12
S | | |  , alphabet_size = 8 , total_length = 274} , self = 61 , parent = Nothing
S | | |  , duration = 0.316334247000 , status = Success , start = 2025-09-03 10:51:57.224058126
S | | |  UTC , finish = 2025-09-03 10:51:57.540392373 UTC , thread_cap_info = ("ThreadId
S | | |  91", 0, False)}
S | | |  
| | | F  
| | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 42
| | | E  , num_strict_rules = 30 , num_top_rules = 30 , num_weak_rules = 12 , alphabet_size
| | | E  = 8 , total_length = 274} , self = 67 , parent = Nothing , duration = 0.333527819000
| | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 10:51:57.278546716
| | | E  UTC , finish = 2025-09-03 10:51:57.612074535 UTC , thread_cap_info = ("ThreadId
| | | E  93", 0, False)}
| | | E  
| F | |  
S   | |  
    F |  
      E  
