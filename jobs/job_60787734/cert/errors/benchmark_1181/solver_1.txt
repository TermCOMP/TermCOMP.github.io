last 593 length 2409
CNF 593 vars 2409 clauses
last 616 length 2479
CNF 616 vars 2479 clauses
last 639 length 2600
CNF 639 vars 2600 clauses
last 635 length 2602
CNF 635 vars 2602 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2555, clauses: 9138
last 2555 length 9138
last 3410 length 15325
CNF 3410 vars 15325 clauses
CNF 2555 vars 9138 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2639, clauses: 9456
last 2639 length 9456
last 3932 length 19411
CNF 2639 vars 9456 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2555, clauses: 9138, status: Unsatisfied, time: 0.175632937s
CNF 3932 vars 19411 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8346, clauses: 34709
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2639, clauses: 9456, status: Unsatisfied, time: 0.191347298s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8930, clauses: 37187
last 8346 length 34709
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5319, clauses: 21176
last 8930 length 37187
last 5319 length 21176
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5661, clauses: 22566
CNF 8346 vars 34709 clauses
last 5661 length 22566
CNF 5661 vars 22566 clauses
CNF 8930 vars 37187 clauses
CNF 5319 vars 21176 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8346, clauses: 34709, status: Unsatisfied, time: 0.460850971s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5319, clauses: 21176, status: Unsatisfied, time: 0.358632481s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8930, clauses: 37187, status: Satisfied, time: 0.471669355s
last 10741 length 59130
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5661, clauses: 22566, status: Unsatisfied, time: 0.453286588s
CNF 10741 vars 59130 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4184, clauses: 15783
last 4184 length 15783
CNF 4184 vars 15783 clauses
last 14127 length 66470
CNF 14127 vars 66470 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4184, clauses: 15783, status: Unsatisfied, time: 0.351513579s
**************************************************
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 10 rules on 3 letters       mirror
SRS with 10 rules on 3 letters       DP
SRS with 6 strict rules and 10 weak rules on 6 letters       weights
SRS with 2 strict rules and 10 weak rules on 4 letters       EDG
SRS with 2 strict rules and 10 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 10 weak rules on 4 letters       EDG
SRS with 1 strict rules and 10 weak rules on 4 letters       Usable
SRS with 1 rules on 2 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [b, b, c, a, c, a] {- Input 1 -}
  [b] -> [] {- Input 2 -}
  [c, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a] -> [a, c, a, c, b, b] {- Mirror (Input 1) -}
  [b] -> [] {- Mirror (Input 2) -}
  [c, c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, c, a, c, b, b] {- Mirror (Input 1) -}
  [a, b] -> [a] {- Mirror (Input 2) -}
  [b, b] -> [b] {- Mirror (Input 2) -}
  [c, b] -> [c] {- Mirror (Input 2) -}
  [a, c, c] -> [a] {- Mirror (Input 3) -}
  [b, c, c] -> [b] {- Mirror (Input 3) -}
  [c, c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b] -> [b, b, c, a, c, a] {- Input 1 -}
  [b, a] -> [a] {- Input 2 -}
  [b, b] -> [b] {- Input 2 -}
  [b, c] -> [c] {- Input 2 -}
  [c, c, a] -> [a] {- Input 3 -}
  [c, c, b] -> [b] {- Input 3 -}
  [c, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b] |-> [a#, c, a] {- DP (Top 3) (Input 1) -}
  [a#, b] |-> [b#, b, c, a, c, a] {- DP (Top 0) (Input 1) -}
  [a#, b] |-> [b#, c, a, c, a] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [c#, a] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [c#, a, c, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b] |-> [a#, c, a] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b] |-> [a#, c, a] {- DP (Top 3) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A -2A 0A \
        | 0A 0A  -  |
        \ -  -   0A / )
  ( b
  , Wk  / 0A -  0A \
        | 2A 0A 2A |
        \ -  -  0A / )
  ( c
  , Wk  / -1A -1A 0A \
        | 1A  -1A -  |
        \ -   -   0A / )
  ( a#
  , Wk  / -2A -1A 0A \
        | -   -   -  |
        \ -   -   0A / )
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
  [b, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [a] {- DP Nontop (Input 0) -}
      [a, b] ->= [b] {- DP Nontop (Input 0) -}
      [a, c] ->= [c] {- DP Nontop (Input 0) -}
      [a, b] ->= [b, b, c, a, c, a] {- DP Nontop (Input 1) -}
      [b, a] ->= [a] {- DP Nontop (Input 2) -}
      [b, b] ->= [b] {- DP Nontop (Input 2) -}
      [b, c] ->= [c] {- DP Nontop (Input 2) -}
      [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
      [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
      [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 5) (Input 1) -}
reason
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(10,3)\Deepee(6/10,6)\Weight\EDG(2/10,4)\Matrix{\ArcticBZ}{3}\EDG(1/10,4)\Usable(1,2)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.451952324000
  min duration 0.024390420000
  total durat. 1.743276243000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 36
      , alphabet_size = 16
      , total_length = 557}
    , self = 74
    , parent = Nothing
    , duration = 1.451952324000
    , status = Fail
    , start = 2025-09-03 11:09:10.657985708 UTC
    , finish = 2025-09-03 11:09:12.109938032 UTC
    , thread_cap_info = ("ThreadId 100", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.023325160000
  min duration 0.024002130000
  total durat. 1.537896107000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 65
      , num_top_rules = 65
      , num_weak_rules = 36
      , alphabet_size = 16
      , total_length = 557}
    , self = 68
    , parent = Nothing
    , duration = 1.023325160000
    , status = Fail
    , start = 2025-09-03 11:09:10.6640879 UTC
    , finish = 2025-09-03 11:09:11.68741306 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
Fail : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.568292571000
  min duration 0.509464289000
  total durat. 1.077756860000
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.626792263000
  min duration 1.626792263000
  total durat. 1.626792263000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 75
    , parent = Nothing
    , duration = 1.626792263000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:09:10.497043237 UTC
    , finish = 2025-09-03 11:09:12.1238355 UTC
    , thread_cap_info = ("ThreadId 36", 3, False)}
**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                  = 12} , self = 75 , parent = Nothing , duration = 1.626792263000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-03 11:09:10.497043237 UTC ,
E                  finish = 2025-09-03 11:09:12.1238355 UTC , thread_cap_info = ("ThreadId
E                  36", 3, False)}
E                  
| F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
| F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
| F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
| F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
| F                = True}" , input_size = Size { num_rules = 4 , num_strict_rules = 4 , num_top_rules
| F                = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
| F                = 52 , parent = Nothing , duration = 0.160798245000 , status = Fail , start
| F                = 2025-09-03 11:09:10.497114353 UTC , finish = 2025-09-03 11:09:10.657912598
| F                UTC , thread_cap_info = ("ThreadId 22", 0, False)}
| F                
| | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F              = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 180} , self = 55 , parent = Nothing , duration = 0.226067386000 , status
| | F              = Fail , start = 2025-09-03 11:09:10.504804469 UTC , finish = 2025-09-03
| | F              11:09:10.730871855 UTC , thread_cap_info = ("ThreadId 69", 3, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | | F            = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F            = 180} , self = 61 , parent = Nothing , duration = 0.440855689000 , status
| | | F            = Fail , start = 2025-09-03 11:09:10.526223837 UTC , finish = 2025-09-03
| | | F            11:09:10.967079526 UTC , thread_cap_info = ("ThreadId 71", 3, False)}
| | | F            
| | | | F          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F          = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | | | F          alphabet_size = 4 , total_length = 45} , self = 60 , parent = Nothing ,
| | | | F          duration = 0.387111248000 , status = Fail , start = 2025-09-03 11:09:10.536737234
| | | | F          UTC , finish = 2025-09-03 11:09:10.923848482 UTC , thread_cap_info = ("ThreadId
| | | | F          79", 1, False)}
| | | | F          
| | | | | F        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | F        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | F        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | F        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | F        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | F        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | F        , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | F        = 4 , total_length = 45} , self = 63 , parent = Nothing , duration = 0.841796865000
| | | | | F        , status = Fail , start = 2025-09-03 11:09:10.563104562 UTC , finish =
| | | | | F        2025-09-03 11:09:11.404901427 UTC , thread_cap_info = ("ThreadId 84", 1,
| | | | | F        False)}
| | | | | F        
| | | | | | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F      = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | | | | | F      alphabet_size = 4 , total_length = 46} , self = 62 , parent = Nothing ,
| | | | | | F      duration = 0.368952566000 , status = Fail , start = 2025-09-03 11:09:10.612364507
| | | | | | F      UTC , finish = 2025-09-03 11:09:10.981317073 UTC , thread_cap_info = ("ThreadId
| | | | | | F      89", 1, False)}
| | | | | | F      
| F | | | | |      
| F | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| F | | | | |      = 65 , num_top_rules = 65 , num_weak_rules = 36 , alphabet_size = 16 ,
| F | | | | |      total_length = 557} , self = 74 , parent = Nothing , duration = 1.451952324000
| F | | | | |      , status = Fail , start = 2025-09-03 11:09:10.657985708 UTC , finish =
| F | | | | |      2025-09-03 11:09:12.109938032 UTC , thread_cap_info = ("ThreadId 100",
| F | | | | |      0, False)}
| F | | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | | | | | | F    = 65 , num_top_rules = 65 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | | | | | F    total_length = 557} , self = 68 , parent = Nothing , duration = 1.023325160000
| | | | | | | F    , status = Fail , start = 2025-09-03 11:09:10.6640879 UTC , finish = 2025-09-03
| | | | | | | F    11:09:11.68741306 UTC , thread_cap_info = ("ThreadId 101", 0, False)}
| | | | | | | F    
| | | | | | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | | | | | | S  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | | | | | | S  = 4 , total_length = 46} , self = 65 , parent = Nothing , duration = 0.758808737000
| | | | | | | | S  , status = Success , start = 2025-09-03 11:09:10.698246351 UTC , finish
| | | | | | | | S  = 2025-09-03 11:09:11.457055088 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | | | S  1, False)}
| | | | | | | | S  
| | F | | | | | |  
| |   | F | | | |  
| | F |   | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | F |   | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | F |   | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | F |   | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | F |   | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | F |   | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | F |   | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | F |   | | | |  = 4 , total_length = 45} , self = 64 , parent = Nothing , duration = 0.509464289000
| | F |   | | | |  , status = Fail , start = 2025-09-03 11:09:10.924932127 UTC , finish =
| | F |   | | | |  2025-09-03 11:09:11.434396416 UTC , thread_cap_info = ("ThreadId 113",
| | F |   | | | |  1, False)}
| | F |   | | | |  
| | | F   | | | |  
| | |     | F | |  
| | | F   |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | F   |   | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | F   |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | F   |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F   |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F   |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 12
| | | F   |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 , alphabet_size
| | | F   |   | |  = 4 , total_length = 46} , self = 67 , parent = Nothing , duration = 0.568292571000
| | | F   |   | |  , status = Fail , start = 2025-09-03 11:09:10.98142698 UTC , finish = 2025-09-03
| | | F   |   | |  11:09:11.549719551 UTC , thread_cap_info = ("ThreadId 114", 1, False)}
| | | F   |   | |  
| | | |   F   | |  
| | F |       | |  
| |   |       | S  
| | F |       |    Info { what = "QPI\n { dim = 4\n , bits = 3\n , solver = Stats (Kissatapi
| | F |       |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |       |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |       |    = 12 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 10 ,
| | F |       |    alphabet_size = 4 , total_length = 45} , self = 73 , parent = Nothing ,
| | F |       |    duration = 0.614588194000 , status = Fail , start = 2025-09-03 11:09:11.457098247
| | F |       |    UTC , finish = 2025-09-03 11:09:12.071686441 UTC , thread_cap_info = ("ThreadId
| | F |       |    121", 1, False)}
| | F |       |    
| | | F       |    
| | |         F    
| | F              
| F                
E                  
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 4, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 15010, clauses: 61865
last 15010 length 61865
