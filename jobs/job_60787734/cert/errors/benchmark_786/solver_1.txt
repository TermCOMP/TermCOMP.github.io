last 40637 length 220076
last 45955 length 246693
CNF 40637 vars 220076 clauses
CNF 45955 vars 246693 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 36161, clauses: 150720
last 36161 length 150720
CNF 36161 vars 150720 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 36161, clauses: 150720, status: Satisfied, time: 0.640288624s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 42925, clauses: 182395
last 42925 length 182395
CNF 42925 vars 182395 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 42925, clauses: 182395, status: Satisfied, time: 1.026013987s
last 16343 length 88001
CNF 16343 vars 88001 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21174, clauses: 78908
last 21174 length 78908
last 42455 length 250618
CNF 21174 vars 78908 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 21174, clauses: 78908, status: Satisfied, time: 0.383885219s
CNF 42455 vars 250618 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 35730, clauses: 148637
last 35730 length 148637
last 14169 length 76381
CNF 35730 vars 148637 clauses
CNF 14169 vars 76381 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 35730, clauses: 148637, status: Satisfied, time: 0.75120298s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19922, clauses: 73137
last 19922 length 73137
CNF 19922 vars 73137 clauses
last 42467 length 258698
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 19922, clauses: 73137, status: Satisfied, time: 0.700261344s
CNF 42467 vars 258698 clauses
last 11058 length 59220
CNF 11058 vars 59220 clauses
last 33133 length 175219
last 31058 length 175800
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18660, clauses: 67646
last 18660 length 67646
CNF 18660 vars 67646 clauses
CNF 31058 vars 175800 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18660, clauses: 67646, status: Satisfied, time: 0.524948622s
**************************************************
summary
**************************************************
SRS with 21 rules on 6 letters       mirror
SRS with 21 rules on 6 letters       DP
SRS with 169 strict rules and 21 weak rules on 11 letters       EDG
SRS with 108 strict rules and 21 weak rules on 11 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 11 strict rules and 21 weak rules on 10 letters       weights
SRS with 10 strict rules and 21 weak rules on 9 letters       EDG
SRS with 10 strict rules and 21 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 6 strict rules and 21 weak rules on 9 letters       EDG
SRS with 6 strict rules and 21 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 4 strict rules and 21 weak rules on 9 letters       weights
SRS with 2 strict rules and 21 weak rules on 8 letters       EDG
SRS with 2 strict rules and 21 weak rules on 8 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 21 weak rules on 6 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [5, 5] -> [0, 5, 4, 0, 2, 5, 4, 5, 2, 1] {- Input 0 -}
  [5, 5] -> [3, 4, 1, 1, 1, 1, 4, 4, 0, 4] {- Input 1 -}
  [2, 5, 5] -> [4, 2, 5, 4, 4, 0, 0, 1, 1, 2] {- Input 2 -}
  [5, 2, 4] -> [0, 5, 0, 2, 3, 3, 4, 2, 4, 2] {- Input 3 -}
  [5, 5, 2] -> [0, 1, 3, 2, 3, 0, 3, 2, 5, 3] {- Input 4 -}
  [5, 5, 3] -> [0, 3, 5, 4, 4, 1, 0, 1, 5, 0] {- Input 5 -}
  [5, 5, 5] -> [5, 3, 4, 1, 0, 1, 4, 5, 0, 0] {- Input 6 -}
  [2, 5, 0, 4] -> [4, 4, 3, 2, 4, 4, 5, 1, 0, 0] {- Input 7 -}
  [4, 5, 2, 4] -> [4, 1, 5, 5, 2, 0, 3, 1, 3, 3] {- Input 8 -}
  [4, 5, 5, 5] -> [1, 5, 1, 2, 0, 3, 2, 1, 0, 5] {- Input 9 -}
  [0, 2, 5, 3, 4] -> [3, 2, 4, 3, 1, 5, 1, 1, 3, 4] {- Input 10 -}
  [2, 5, 5, 3, 4] -> [4, 5, 4, 3, 1, 4, 0, 2, 4, 4] {- Input 11 -}
  [5, 5, 5, 1, 4] -> [3, 3, 0, 5, 0, 4, 3, 4, 4, 0] {- Input 12 -}
  [0, 4, 4, 5, 5, 5] -> [0, 4, 4, 4, 3, 3, 4, 1, 3, 1] {- Input 13 -}
  [1, 2, 4, 5, 2, 4] -> [3, 3, 5, 3, 0, 4, 0, 3, 1, 3] {- Input 14 -}
  [4, 1, 5, 5, 0, 4] -> [1, 0, 3, 0, 4, 2, 4, 4, 3, 4] {- Input 15 -}
  [4, 2, 5, 5, 1, 5] -> [2, 3, 4, 2, 1, 1, 3, 4, 2, 5] {- Input 16 -}
  [5, 2, 5, 5, 0, 4] -> [0, 4, 2, 3, 3, 5, 2, 1, 4, 4] {- Input 17 -}
  [5, 5, 2, 4, 5, 0] -> [2, 1, 1, 4, 2, 4, 0, 4, 2, 0] {- Input 18 -}
  [0, 1, 5, 5, 5, 3, 5] -> [5, 3, 2, 5, 1, 0, 1, 2, 0, 5] {- Input 19 -}
  [4, 4, 5, 2, 4, 2, 2] -> [4, 0, 5, 5, 4, 5, 1, 2, 2, 1] {- Input 20 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [5, 5] -> [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- Mirror (Input 0) -}
  [5, 5] -> [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- Mirror (Input 1) -}
  [5, 5, 2] -> [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- Mirror (Input 2) -}
  [4, 2, 5] -> [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- Mirror (Input 3) -}
  [2, 5, 5] -> [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- Mirror (Input 4) -}
  [3, 5, 5] -> [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- Mirror (Input 5) -}
  [5, 5, 5] -> [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- Mirror (Input 6) -}
  [4, 0, 5, 2] -> [0, 0, 1, 5, 4, 4, 2, 3, 4, 4] {- Mirror (Input 7) -}
  [4, 2, 5, 4] -> [3, 3, 1, 3, 0, 2, 5, 5, 1, 4] {- Mirror (Input 8) -}
  [5, 5, 5, 4] -> [5, 0, 1, 2, 3, 0, 2, 1, 5, 1] {- Mirror (Input 9) -}
  [4, 3, 5, 2, 0] -> [4, 3, 1, 1, 5, 1, 3, 4, 2, 3] {- Mirror (Input 10) -}
  [4, 3, 5, 5, 2] -> [4, 4, 2, 0, 4, 1, 3, 4, 5, 4] {- Mirror (Input 11) -}
  [4, 1, 5, 5, 5] -> [0, 4, 4, 3, 4, 0, 5, 0, 3, 3] {- Mirror (Input 12) -}
  [5, 5, 5, 4, 4, 0] -> [1, 3, 1, 4, 3, 3, 4, 4, 4, 0] {- Mirror (Input 13) -}
  [4, 2, 5, 4, 2, 1] -> [3, 1, 3, 0, 4, 0, 3, 5, 3, 3] {- Mirror (Input 14) -}
  [4, 0, 5, 5, 1, 4] -> [4, 3, 4, 4, 2, 4, 0, 3, 0, 1] {- Mirror (Input 15) -}
  [5, 1, 5, 5, 2, 4] -> [5, 2, 4, 3, 1, 1, 2, 4, 3, 2] {- Mirror (Input 16) -}
  [4, 0, 5, 5, 2, 5] -> [4, 4, 1, 2, 5, 3, 3, 2, 4, 0] {- Mirror (Input 17) -}
  [0, 5, 4, 2, 5, 5] -> [0, 2, 4, 0, 4, 2, 4, 1, 1, 2] {- Mirror (Input 18) -}
  [5, 3, 5, 5, 5, 1, 0] -> [5, 0, 2, 1, 0, 1, 5, 2, 3, 5] {- Mirror (Input 19) -}
  [2, 2, 4, 2, 5, 4, 4] -> [1, 2, 2, 1, 5, 4, 5, 5, 0, 4] {- Mirror (Input 20) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
  [4#, 1, 5, 5, 5] |-> [ 4# , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 1) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [4#, 0, 5, 0, 3, 3] {- DP (Top 4) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [ 4# , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 2) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [ 0# , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 0) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [0#, 5, 0, 3, 3] {- DP (Top 5) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [0#, 3, 3] {- DP (Top 7) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [5#, 0, 3, 3] {- DP (Top 6) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [3#] {- DP (Top 9) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [3#, 4, 0, 5, 0, 3, 3] {- DP (Top 3) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [3#, 3] {- DP (Top 8) (Mirror (Input 12)) -}
  [4#, 2, 5] |-> [4#, 2, 4, 3, 3, 2, 0, 5, 0] {- DP (Top 1) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [4#, 3, 3, 2, 0, 5, 0] {- DP (Top 3) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [ 2# , 4 , 2 , 4 , 3 , 3 , 2 , 0 , 5 , 0 ] {- DP (Top 0) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [2#, 4, 3, 3, 2, 0, 5, 0] {- DP (Top 2) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [2#, 0, 5, 0] {- DP (Top 6) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [0#, 5, 0] {- DP (Top 7) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [5#, 0] {- DP (Top 8) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [3#, 2, 0, 5, 0] {- DP (Top 5) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [3#, 3, 2, 0, 5, 0] {- DP (Top 4) (Mirror (Input 3)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [0#, 2, 5, 5, 1, 4] {- DP (Top 4) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 1, 4] {- DP (Top 7) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [ 3# , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP (Top 1) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [3#, 0, 2, 5, 5, 1, 4] {- DP (Top 3) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [ 3# , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP (Top 0) (Mirror (Input 8)) -}
  [4#, 2, 5, 4, 2, 1] |-> [4#, 0, 3, 5, 3, 3] {- DP (Top 4) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [ 0# , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP (Top 3) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [0#, 3, 5, 3, 3] {- DP (Top 5) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [5#, 3, 3] {- DP (Top 7) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#] {- DP (Top 9) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [ 3# , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP (Top 0) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [ 3# , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP (Top 2) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#, 5, 3, 3] {- DP (Top 6) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#, 3] {- DP (Top 8) (Mirror (Input 14)) -}
  [4#, 0, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 4] {- DP (Top 8) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 4, 2, 3, 4, 4] {- DP (Top 4) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 2, 3, 4, 4] {- DP (Top 5) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [2#, 3, 4, 4] {- DP (Top 6) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [ 0# , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP (Top 1) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [ 0# , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP (Top 0) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [5#, 4, 4, 2, 3, 4, 4] {- DP (Top 3) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [3#, 4, 4] {- DP (Top 7) (Mirror (Input 7)) -}
  [4#, 0, 5, 5, 1, 4] |-> [ 4# , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP (Top 2) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [ 4# , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP (Top 3) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [4#, 0, 3, 0, 1] {- DP (Top 5) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [ 4# , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP (Top 0) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [2#, 4, 0, 3, 0, 1] {- DP (Top 4) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [0#, 1] {- DP (Top 8) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [0#, 3, 0, 1] {- DP (Top 6) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [ 3# , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP (Top 1) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 1, 4] |-> [3#, 0, 1] {- DP (Top 7) (Mirror (Input 15)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 4# , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 1) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 4# , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 0) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [4#, 0] {- DP (Top 8) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [2#, 4, 0] {- DP (Top 7) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 2# , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 3) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [5#, 3, 3, 2, 4, 0] {- DP (Top 4) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [3#, 2, 4, 0] {- DP (Top 6) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [3#, 3, 2, 4, 0] {- DP (Top 5) (Mirror (Input 17)) -}
  [4#, 3, 5, 2, 0] |-> [4#, 2, 3] {- DP (Top 7) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [ 4# , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP (Top 0) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [2#, 3] {- DP (Top 8) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [5#, 1, 3, 4, 2, 3] {- DP (Top 4) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [3#] {- DP (Top 9) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [ 3# , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP (Top 1) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [3#, 4, 2, 3] {- DP (Top 6) (Mirror (Input 10)) -}
  [4#, 3, 5, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [4#, 1, 3, 4, 5, 4] {- DP (Top 4) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 4# , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 0) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 4# , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 1) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [4#, 5, 4] {- DP (Top 7) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 2# , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 2) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [0#, 4, 1, 3, 4, 5, 4] {- DP (Top 3) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [5#, 4] {- DP (Top 8) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [3#, 4, 5, 4] {- DP (Top 6) (Mirror (Input 11)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 2# , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 2) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 2# , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 1) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [0#, 4] {- DP (Top 8) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 5# , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 4) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 0, 4] {- DP (Top 7) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [2#, 5, 5] |-> [2#, 3, 1, 0] {- DP (Top 6) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [2#, 3, 0, 3, 2, 3, 1, 0] {- DP (Top 2) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [0#, 3, 2, 3, 1, 0] {- DP (Top 4) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [5#, 2, 3, 0, 3, 2, 3, 1, 0] {- DP (Top 1) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [3#, 1, 0] {- DP (Top 7) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [3#, 2, 3, 1, 0] {- DP (Top 5) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [3#, 0, 3, 2, 3, 1, 0] {- DP (Top 3) (Mirror (Input 4)) -}
  [2#, 5, 5] |-> [ 3# , 5 , 2 , 3 , 0 , 3 , 2 , 3 , 1 , 0 ] {- DP (Top 0) (Mirror (Input 4)) -}
  [0#, 5, 4, 2, 5, 5] |-> [4#, 1, 1, 2] {- DP (Top 6) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [4#, 2, 4, 1, 1, 2] {- DP (Top 4) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [ 4# , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP (Top 2) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [2#] {- DP (Top 9) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [2#, 4, 1, 1, 2] {- DP (Top 5) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [ 2# , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP (Top 1) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [ 0# , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP (Top 3) (Mirror (Input 18)) -}
  [0#, 5, 4, 2, 5, 5] |-> [ 0# , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP (Top 0) (Mirror (Input 18)) -}
  [5#, 1, 5, 5, 2, 4] |-> [ 4# , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP (Top 2) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [4#, 3, 2] {- DP (Top 7) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [2#] {- DP (Top 9) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [ 2# , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP (Top 1) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [2#, 4, 3, 2] {- DP (Top 6) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [ 5# , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP (Top 0) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [ 3# , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP (Top 3) (Mirror (Input 16)) -}
  [5#, 1, 5, 5, 2, 4] |-> [3#, 2] {- DP (Top 8) (Mirror (Input 16)) -}
  [5#, 5] |-> [4#, 1, 1, 1, 1, 4, 3] {- DP (Top 3) (Mirror (Input 1)) -}
  [5#, 5] |-> [4#, 4, 1, 1, 1, 1, 4, 3] {- DP (Top 2) (Mirror (Input 1)) -}
  [5#, 5] |-> [4#, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP (Top 0) (Mirror (Input 1)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [5#, 5] |-> [4#, 5, 0] {- DP (Top 7) (Mirror (Input 0)) -}
  [5#, 5] |-> [4#, 3] {- DP (Top 8) (Mirror (Input 1)) -}
  [5#, 5] |-> [2#, 0, 4, 5, 0] {- DP (Top 5) (Mirror (Input 0)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5#, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 0)) -}
  [5#, 5] |-> [0#, 4, 4, 1, 1, 1, 1, 4, 3] {- DP (Top 1) (Mirror (Input 1)) -}
  [5#, 5] |-> [0#, 4, 5, 0] {- DP (Top 6) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 2, 0, 4, 5, 0] {- DP (Top 4) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 0] {- DP (Top 8) (Mirror (Input 0)) -}
  [5#, 5] |-> [3#] {- DP (Top 9) (Mirror (Input 1)) -}
  [5#, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [4#, 4, 5, 2, 4] {- DP (Top 5) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [4#, 5, 2, 4] {- DP (Top 6) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [ 2# , 1 , 1 , 0 , 0 , 4 , 4 , 5 , 2 , 4 ] {- DP (Top 0) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [2#, 4] {- DP (Top 8) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [0#, 4, 4, 5, 2, 4] {- DP (Top 4) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [0#, 0, 4, 4, 5, 2, 4] {- DP (Top 3) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [5#, 2, 4] {- DP (Top 7) (Mirror (Input 2)) -}
  [5#, 5, 5] |-> [4#, 1, 0, 1, 4, 3, 5] {- DP (Top 3) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [4#, 3, 5] {- DP (Top 7) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [0#, 1, 4, 3, 5] {- DP (Top 5) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [ 0# , 0 , 5 , 4 , 1 , 0 , 1 , 4 , 3 , 5 ] {- DP (Top 0) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [0#, 5, 4, 1, 0, 1, 4, 3, 5] {- DP (Top 1) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [5#, 4, 1, 0, 1, 4, 3, 5] {- DP (Top 2) (Mirror (Input 6)) -}
  [5#, 5, 5] |-> [3#, 5] {- DP (Top 8) (Mirror (Input 6)) -}
  [5#, 5, 5, 4] |-> [2#, 1, 5, 1] {- DP (Top 6) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [2#, 3, 0, 2, 1, 5, 1] {- DP (Top 3) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [ 0# , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP (Top 1) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [0#, 2, 1, 5, 1] {- DP (Top 5) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [5#, 1] {- DP (Top 8) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [ 5# , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP (Top 0) (Mirror (Input 9)) -}
  [5#, 5, 5, 4] |-> [3#, 0, 2, 1, 5, 1] {- DP (Top 4) (Mirror (Input 9)) -}
  [5#, 5, 5, 4, 4, 0] |-> [4#, 4, 4, 0] {- DP (Top 6) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [ 4# , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP (Top 3) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [ 3# , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP (Top 1) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [3#, 4, 4, 4, 0] {- DP (Top 5) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [3#, 3, 4, 4, 4, 0] {- DP (Top 4) (Mirror (Input 13)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [ 2# , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP (Top 2) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [2#, 3, 5] {- DP (Top 7) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [ 0# , 1 , 5 , 2 , 3 , 5 ] {- DP (Top 4) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [ 0# , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP (Top 1) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#] {- DP (Top 9) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#, 2, 3, 5] {- DP (Top 6) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [ 5# , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP (Top 0) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [3#, 5] {- DP (Top 8) (Mirror (Input 19)) -}
  [3#, 5, 5] |-> [4#, 4, 5, 3, 0] {- DP (Top 5) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [4#, 5, 3, 0] {- DP (Top 6) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [0#, 1, 4, 4, 5, 3, 0] {- DP (Top 3) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [ 0# , 5 , 1 , 0 , 1 , 4 , 4 , 5 , 3 , 0 ] {- DP (Top 0) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [5#, 1, 0, 1, 4, 4, 5, 3, 0] {- DP (Top 1) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [5#, 3, 0] {- DP (Top 7) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [3#, 0] {- DP (Top 8) (Mirror (Input 5)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [4#, 1, 5, 5, 5] |-> [ 4# , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 1) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [4#, 0, 5, 0, 3, 3] {- DP (Top 4) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [ 4# , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 2) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [ 0# , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP (Top 0) (Mirror (Input 12)) -}
  [0#, 5, 4, 2, 5, 5] |-> [2#] {- DP (Top 9) (Mirror (Input 18)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [4#, 1, 5, 5, 5] |-> [0#, 5, 0, 3, 3] {- DP (Top 5) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [0#, 3, 3] {- DP (Top 7) (Mirror (Input 12)) -}
  [4#, 1, 5, 5, 5] |-> [5#, 0, 3, 3] {- DP (Top 6) (Mirror (Input 12)) -}
  [5#, 1, 5, 5, 2, 4] |-> [4#, 3, 2] {- DP (Top 7) (Mirror (Input 16)) -}
  [4#, 1, 5, 5, 5] |-> [3#] {- DP (Top 9) (Mirror (Input 12)) -}
  [3#, 5, 5] |-> [4#, 4, 5, 3, 0] {- DP (Top 5) (Mirror (Input 5)) -}
  [4#, 1, 5, 5, 5] |-> [3#, 4, 0, 5, 0, 3, 3] {- DP (Top 3) (Mirror (Input 12)) -}
  [3#, 5, 5] |-> [4#, 5, 3, 0] {- DP (Top 6) (Mirror (Input 5)) -}
  [4#, 1, 5, 5, 5] |-> [3#, 3] {- DP (Top 8) (Mirror (Input 12)) -}
  [3#, 5, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 5)) -}
  [3#, 5, 5] |-> [5#, 3, 0] {- DP (Top 7) (Mirror (Input 5)) -}
  [5#, 1, 5, 5, 2, 4] |-> [2#] {- DP (Top 9) (Mirror (Input 16)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [0#, 4] {- DP (Top 8) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 5# , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 4) (Mirror (Input 20)) -}
  [5#, 1, 5, 5, 2, 4] |-> [2#, 4, 3, 2] {- DP (Top 6) (Mirror (Input 16)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 0, 4] {- DP (Top 7) (Mirror (Input 20)) -}
  [5#, 1, 5, 5, 2, 4] |-> [3#, 2] {- DP (Top 8) (Mirror (Input 16)) -}
  [3#, 5, 5] |-> [3#, 0] {- DP (Top 8) (Mirror (Input 5)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5] |-> [4#, 2, 4, 3, 3, 2, 0, 5, 0] {- DP (Top 1) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [4#, 3, 3, 2, 0, 5, 0] {- DP (Top 3) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [ 2# , 4 , 2 , 4 , 3 , 3 , 2 , 0 , 5 , 0 ] {- DP (Top 0) (Mirror (Input 3)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [5#, 5] |-> [4#, 5, 0] {- DP (Top 7) (Mirror (Input 0)) -}
  [4#, 2, 5] |-> [2#, 4, 3, 3, 2, 0, 5, 0] {- DP (Top 2) (Mirror (Input 3)) -}
  [2#, 5, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 4)) -}
  [4#, 2, 5] |-> [2#, 0, 5, 0] {- DP (Top 6) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [0#, 5, 0] {- DP (Top 7) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [5#, 0] {- DP (Top 8) (Mirror (Input 3)) -}
  [5#, 5] |-> [4#, 3] {- DP (Top 8) (Mirror (Input 1)) -}
  [4#, 2, 5] |-> [3#, 2, 0, 5, 0] {- DP (Top 5) (Mirror (Input 3)) -}
  [4#, 2, 5] |-> [3#, 3, 2, 0, 5, 0] {- DP (Top 4) (Mirror (Input 3)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [0#, 2, 5, 5, 1, 4] {- DP (Top 4) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 1, 4] {- DP (Top 7) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 0, 4, 5, 0] {- DP (Top 5) (Mirror (Input 0)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5#, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 0)) -}
  [5#, 5] |-> [0#, 4, 5, 0] {- DP (Top 6) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 2, 0, 4, 5, 0] {- DP (Top 4) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 0] {- DP (Top 8) (Mirror (Input 0)) -}
  [5#, 5] |-> [3#] {- DP (Top 9) (Mirror (Input 1)) -}
  [5#, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 2)) -}
  [4#, 2, 5, 4] |-> [3#, 0, 2, 5, 5, 1, 4] {- DP (Top 3) (Mirror (Input 8)) -}
  [4#, 2, 5, 4, 2, 1] |-> [4#, 0, 3, 5, 3, 3] {- DP (Top 4) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [ 0# , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP (Top 3) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [0#, 3, 5, 3, 3] {- DP (Top 5) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [5#, 3, 3] {- DP (Top 7) (Mirror (Input 14)) -}
  [5#, 5, 2] |-> [4#, 4, 5, 2, 4] {- DP (Top 5) (Mirror (Input 2)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#] {- DP (Top 9) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [ 3# , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP (Top 2) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#, 5, 3, 3] {- DP (Top 6) (Mirror (Input 14)) -}
  [4#, 2, 5, 4, 2, 1] |-> [3#, 3] {- DP (Top 8) (Mirror (Input 14)) -}
  [4#, 0, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 4] {- DP (Top 8) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 4, 2, 3, 4, 4] {- DP (Top 4) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [4#, 2, 3, 4, 4] {- DP (Top 5) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [2#, 3, 4, 4] {- DP (Top 6) (Mirror (Input 7)) -}
  [4#, 0, 5, 2] |-> [5#, 4, 4, 2, 3, 4, 4] {- DP (Top 3) (Mirror (Input 7)) -}
  [5#, 5, 2] |-> [4#, 5, 2, 4] {- DP (Top 6) (Mirror (Input 2)) -}
  [4#, 0, 5, 2] |-> [3#, 4, 4] {- DP (Top 7) (Mirror (Input 7)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 4# , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 1) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 4# , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 0) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [4#, 0] {- DP (Top 8) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [2#, 4, 0] {- DP (Top 7) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [ 2# , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP (Top 3) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [0#] {- DP (Top 9) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [5#, 3, 3, 2, 4, 0] {- DP (Top 4) (Mirror (Input 17)) -}
  [5#, 5, 2] |-> [2#, 4] {- DP (Top 8) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [0#, 4, 4, 5, 2, 4] {- DP (Top 4) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [0#, 0, 4, 4, 5, 2, 4] {- DP (Top 3) (Mirror (Input 2)) -}
  [5#, 5, 2] |-> [5#, 2, 4] {- DP (Top 7) (Mirror (Input 2)) -}
  [5#, 5, 5] |-> [4#, 3, 5] {- DP (Top 7) (Mirror (Input 6)) -}
  [4#, 0, 5, 5, 2, 5] |-> [3#, 2, 4, 0] {- DP (Top 6) (Mirror (Input 17)) -}
  [4#, 0, 5, 5, 2, 5] |-> [3#, 3, 2, 4, 0] {- DP (Top 5) (Mirror (Input 17)) -}
  [4#, 3, 5, 2, 0] |-> [4#, 2, 3] {- DP (Top 7) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [2#, 3] {- DP (Top 8) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [5#, 1, 3, 4, 2, 3] {- DP (Top 4) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [3#] {- DP (Top 9) (Mirror (Input 10)) -}
  [4#, 3, 5, 2, 0] |-> [3#, 4, 2, 3] {- DP (Top 6) (Mirror (Input 10)) -}
  [4#, 3, 5, 5, 2] |-> [4#] {- DP (Top 9) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [4#, 1, 3, 4, 5, 4] {- DP (Top 4) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 4# , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 0) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 4# , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 1) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [4#, 5, 4] {- DP (Top 7) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [ 2# , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP (Top 2) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [0#, 4, 1, 3, 4, 5, 4] {- DP (Top 3) (Mirror (Input 11)) -}
  [4#, 3, 5, 5, 2] |-> [5#, 4] {- DP (Top 8) (Mirror (Input 11)) -}
  [5#, 5, 5] |-> [3#, 5] {- DP (Top 8) (Mirror (Input 6)) -}
  [5#, 5, 5, 4] |-> [5#, 1] {- DP (Top 8) (Mirror (Input 9)) -}
  [5#, 5, 5, 4, 4, 0] |-> [4#, 4, 4, 0] {- DP (Top 6) (Mirror (Input 13)) -}
  [4#, 3, 5, 5, 2] |-> [3#, 4, 5, 4] {- DP (Top 6) (Mirror (Input 11)) -}
  [5#, 5, 5, 4, 4, 0] |-> [ 4# , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP (Top 3) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [3#, 4, 4, 4, 0] {- DP (Top 5) (Mirror (Input 13)) -}
  [5#, 5, 5, 4, 4, 0] |-> [3#, 3, 4, 4, 4, 0] {- DP (Top 4) (Mirror (Input 13)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [2#, 3, 5] {- DP (Top 7) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#] {- DP (Top 9) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#, 2, 3, 5] {- DP (Top 6) (Mirror (Input 19)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [3#, 5] {- DP (Top 8) (Mirror (Input 19)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4#
  , Wk  / 7A 7A 10A - \
        | 7A 7A 10A - |
        | 7A 7A 10A - |
        \ -  -  -   - / )
  ( 2#
  , Wk  / 4A 7A 7A - \
        | 4A 7A 7A - |
        | 4A 7A 7A - |
        \ -  -  -  - / )
  ( 0#
  , Wk  / 4A 7A 7A - \
        | 4A 7A 7A - |
        | 4A 7A 7A - |
        \ -  -  -  - / )
  ( 5#
  , Wk  / 7A 10A 10A - \
        | 7A 10A 10A - |
        | 7A 10A 10A - |
        \ -  -   -   - / )
  ( 3#
  , Wk  / 4A 7A 7A - \
        | 4A 7A 7A - |
        | 4A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 5# , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 4) (Mirror (Input 20)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [0#, 2, 5, 5, 1, 4] {- DP (Top 4) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 2, 0, 4, 5, 0] {- DP (Top 4) (Mirror (Input 0)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#, 2, 3, 5] {- DP (Top 6) (Mirror (Input 19)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  (1, 0/1)
  (4, 0/1)
  (2, 0/1)
  (0, 0/1)
  (5, 0/1)
  (3, 0/1)
  (4#, 1/1)
  (2#, 1/1)
  (0#, 0/1)
  (5#, 1/1)
   property Termination
has value Just True
for SRS
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 5# , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 4) (Mirror (Input 20)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 2, 0, 4, 5, 0] {- DP (Top 4) (Mirror (Input 0)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#, 2, 3, 5] {- DP (Top 6) (Mirror (Input 19)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [ 5# , 4 , 5 , 5 , 0 , 4 ] {- DP (Top 4) (Mirror (Input 20)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [5#, 5] |-> [5#, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [5#, 5] |-> [5#, 2, 0, 4, 5, 0] {- DP (Top 4) (Mirror (Input 0)) -}
  [5#, 3, 5, 5, 5, 1, 0] |-> [5#, 2, 3, 5] {- DP (Top 6) (Mirror (Input 19)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  ( 1
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 4
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4#
  , Wk  / 16A 16A 16A - \
        | 16A 16A 16A - |
        | 16A 16A 16A - |
        \ -   -   -   - / )
  ( 2#
  , Wk  / 16A 16A 16A - \
        | 16A 16A 16A - |
        | 16A 16A 16A - |
        \ -   -   -   - / )
  ( 5#
  , Wk  / 13A 15A 16A - \
        | 13A 15A 16A - |
        | 13A 15A 16A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [2#, 2, 4, 2, 5, 4, 4] |-> [4#, 5, 5, 0, 4] {- DP (Top 5) (Mirror (Input 20)) -}
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [2#, 2, 4, 2, 5, 4, 4] |-> [5#, 5, 0, 4] {- DP (Top 6) (Mirror (Input 20)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 2
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0
  , Wk  / 0A  0A  0A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 5
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4#
  , Wk  / 1A 1A 1A - \
        | 1A 1A 1A - |
        | 1A 1A 1A - |
        \ -  -  -  - / )
  ( 2#
  , Wk  / 1A 1A 2A - \
        | 1A 1A 2A - |
        | 1A 1A 2A - |
        \ -  -  -  - / )
  ( 5#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [4#, 2, 5, 4] |-> [2#, 5, 5, 1, 4] {- DP (Top 5) (Mirror (Input 8)) -}
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5#, 5] |-> [2#, 5, 4, 5, 2, 0, 4, 5, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  (1, 0/1)
  (4, 0/1)
  (2, 0/1)
  (0, 0/1)
  (5, 0/1)
  (3, 0/1)
  (4#, 1/1)
  (2#, 0/1)
  (5#, 1/1)
   property Termination
has value Just True
for SRS
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [5#, 5] |-> [4#, 5, 2, 0, 4, 5, 0] {- DP (Top 3) (Mirror (Input 0)) -}
  [4#, 2, 5, 4] |-> [5#, 5, 1, 4] {- DP (Top 6) (Mirror (Input 8)) -}
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 2
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 0
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 5
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( 3
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 4#
  , Wk  / 15A 16A 18A - \
        | 15A 16A 18A - |
        | 15A 16A 18A - |
        \ -   -   -   - / )
  ( 5#
  , Wk  / 15A 17A 17A - \
        | 15A 17A 17A - |
        | 15A 17A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [5, 5] ->= [1, 2, 5, 4, 5, 2, 0, 4, 5, 0] {- DP Nontop (Mirror (Input 0)) -}
  [5, 5] ->= [4, 0, 4, 4, 1, 1, 1, 1, 4, 3] {- DP Nontop (Mirror (Input 1)) -}
  [5, 5, 2] ->= [2, 1, 1, 0, 0, 4, 4, 5, 2, 4] {- DP Nontop (Mirror (Input 2)) -}
  [4, 2, 5] ->= [2, 4, 2, 4, 3, 3, 2, 0, 5, 0] {- DP Nontop (Mirror (Input 3)) -}
  [2, 5, 5] ->= [3, 5, 2, 3, 0, 3, 2, 3, 1, 0] {- DP Nontop (Mirror (Input 4)) -}
  [3, 5, 5] ->= [0, 5, 1, 0, 1, 4, 4, 5, 3, 0] {- DP Nontop (Mirror (Input 5)) -}
  [5, 5, 5] ->= [0, 0, 5, 4, 1, 0, 1, 4, 3, 5] {- DP Nontop (Mirror (Input 6)) -}
  [4, 0, 5, 2] ->= [ 0 , 0 , 1 , 5 , 4 , 4 , 2 , 3 , 4 , 4 ] {- DP Nontop (Mirror (Input 7)) -}
  [4, 2, 5, 4] ->= [ 3 , 3 , 1 , 3 , 0 , 2 , 5 , 5 , 1 , 4 ] {- DP Nontop (Mirror (Input 8)) -}
  [5, 5, 5, 4] ->= [ 5 , 0 , 1 , 2 , 3 , 0 , 2 , 1 , 5 , 1 ] {- DP Nontop (Mirror (Input 9)) -}
  [4, 3, 5, 2, 0] ->= [ 4 , 3 , 1 , 1 , 5 , 1 , 3 , 4 , 2 , 3 ] {- DP Nontop (Mirror (Input 10)) -}
  [4, 3, 5, 5, 2] ->= [ 4 , 4 , 2 , 0 , 4 , 1 , 3 , 4 , 5 , 4 ] {- DP Nontop (Mirror (Input 11)) -}
  [4, 1, 5, 5, 5] ->= [ 0 , 4 , 4 , 3 , 4 , 0 , 5 , 0 , 3 , 3 ] {- DP Nontop (Mirror (Input 12)) -}
  [5, 5, 5, 4, 4, 0] ->= [ 1 , 3 , 1 , 4 , 3 , 3 , 4 , 4 , 4 , 0 ] {- DP Nontop (Mirror (Input 13)) -}
  [4, 2, 5, 4, 2, 1] ->= [ 3 , 1 , 3 , 0 , 4 , 0 , 3 , 5 , 3 , 3 ] {- DP Nontop (Mirror (Input 14)) -}
  [4, 0, 5, 5, 1, 4] ->= [ 4 , 3 , 4 , 4 , 2 , 4 , 0 , 3 , 0 , 1 ] {- DP Nontop (Mirror (Input 15)) -}
  [5, 1, 5, 5, 2, 4] ->= [ 5 , 2 , 4 , 3 , 1 , 1 , 2 , 4 , 3 , 2 ] {- DP Nontop (Mirror (Input 16)) -}
  [4, 0, 5, 5, 2, 5] ->= [ 4 , 4 , 1 , 2 , 5 , 3 , 3 , 2 , 4 , 0 ] {- DP Nontop (Mirror (Input 17)) -}
  [0, 5, 4, 2, 5, 5] ->= [ 0 , 2 , 4 , 0 , 4 , 2 , 4 , 1 , 1 , 2 ] {- DP Nontop (Mirror (Input 18)) -}
  [5, 3, 5, 5, 5, 1, 0] ->= [ 5 , 0 , 2 , 1 , 0 , 1 , 5 , 2 , 3 , 5 ] {- DP Nontop (Mirror (Input 19)) -}
  [2, 2, 4, 2, 5, 4, 4] ->= [ 1 , 2 , 2 , 1 , 5 , 4 , 5 , 5 , 0 , 4 ] {- DP Nontop (Mirror (Input 20)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(21,6)\Deepee(169/21,11)\EDG(108/21,11)\Matrix{\Arctic}{3}(11/21,10)\Weight\EDG(10/21,9)\Matrix{\Arctic}{3}\EDG(6/21,9)\Matrix{\Arctic}{3}(4/21,9)\Weight\EDG(2/21,8)\Matrix{\Arctic}{3}(0/21,6)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 32133, clauses: 130835
last 32133 length 130835
CNF 32133 vars 130835 clauses

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 2.949771290000
  min duration 0.810986040000
  total durat. 6.760845393000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 21
      , alphabet_size = 9
      , total_length = 366}
    , self = 78
    , parent = Nothing
    , duration = 1.290691177000
    , status = Fail
    , start = 2025-09-03 13:00:35.747305973 UTC
    , finish = 2025-09-03 13:00:37.03799715 UTC
    , thread_cap_info = ("ThreadId 128", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 10
      , num_top_rules = 10
      , num_weak_rules = 21
      , alphabet_size = 9
      , total_length = 408}
    , self = 69
    , parent = Nothing
    , duration = 1.709396886000
    , status = Fail
    , start = 2025-09-03 13:00:32.427309535 UTC
    , finish = 2025-09-03 13:00:34.136706421 UTC
    , thread_cap_info = ("ThreadId 113", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 80
      , num_top_rules = 80
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1026}
    , self = 51
    , parent = Nothing
    , duration = 2.949771290000
    , status = Fail
    , start = 2025-09-03 13:00:25.187305477 UTC
    , finish = 2025-09-03 13:00:28.137076767 UTC
    , thread_cap_info = ("ThreadId 86", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 3.438800186000
  min duration 3.020777084000
  total durat. 9.824238414000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 99
      , num_strict_rules = 78
      , num_top_rules = 78
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1008}
    , self = 71
    , parent = Nothing
    , duration = 3.020777084000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:31.2290608 UTC
    , finish = 2025-09-03 13:00:34.249837884 UTC
    , thread_cap_info = ("ThreadId 106", 1, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 129
      , num_strict_rules = 108
      , num_top_rules = 108
      , num_weak_rules = 21
      , alphabet_size = 11
      , total_length = 1268}
    , self = 54
    , parent = Nothing
    , duration = 3.364661144000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:25.187305387 UTC
    , finish = 2025-09-03 13:00:28.551966531 UTC
    , thread_cap_info = ("ThreadId 90", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 84
      , num_strict_rules = 63
      , num_top_rules = 63
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 858}
    , self = 94
    , parent = Nothing
    , duration = 3.438800186000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:37.406642203 UTC
    , finish = 2025-09-03 13:00:40.845442389 UTC
    , thread_cap_info = ("ThreadId 137", 1, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 3.033061613000
  min duration 3.004808826000
  total durat. 12.084267810000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 129
      , num_strict_rules = 108
      , num_top_rules = 108
      , num_weak_rules = 21
      , alphabet_size = 11
      , total_length = 1268}
    , self = 52
    , parent = Nothing
    , duration = 3.004808826000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:25.182497565 UTC
    , finish = 2025-09-03 13:00:28.187306391 UTC
    , thread_cap_info = ("ThreadId 91", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 84
      , num_strict_rules = 63
      , num_top_rules = 63
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 858}
    , self = 93
    , parent = Nothing
    , duration = 3.019364472000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:37.407301252 UTC
    , finish = 2025-09-03 13:00:40.426665724 UTC
    , thread_cap_info = ("ThreadId 138", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 80
      , num_top_rules = 80
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1026}
    , self = 53
    , parent = Nothing
    , duration = 3.027032899000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:25.18027059 UTC
    , finish = 2025-09-03 13:00:28.207303489 UTC
    , thread_cap_info = ("ThreadId 87", 1, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 99
      , num_strict_rules = 78
      , num_top_rules = 78
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1008}
    , self = 70
    , parent = Nothing
    , duration = 3.033061613000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:00:31.216759525 UTC
    , finish = 2025-09-03 13:00:34.249821138 UTC
    , thread_cap_info = ("ThreadId 107", 1, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 2.274974477000
  min duration 2.274974477000
  total durat. 2.274974477000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 21
      , alphabet_size = 8
      , total_length = 323}
    , self = 97
    , parent = Nothing
    , duration = 2.274974477000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:00:38.86363883 UTC
    , finish = 2025-09-03 13:00:41.138613307 UTC
    , thread_cap_info = ("ThreadId 147", 3, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 3
  max duration 3.841901304000
  min duration 2.963379936000
  total durat. 9.904300539000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 80
      , num_top_rules = 80
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1026}
    , self = 57
    , parent = Nothing
    , duration = 2.963379936000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:00:28.227613418 UTC
    , finish = 2025-09-03 13:00:31.190993354 UTC
    , thread_cap_info = ("ThreadId 99", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 99
      , num_strict_rules = 78
      , num_top_rules = 78
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1008}
    , self = 81
    , parent = Nothing
    , duration = 3.099019299000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:00:34.292331937 UTC
    , finish = 2025-09-03 13:00:37.391351236 UTC
    , thread_cap_info = ("ThreadId 120", 1, False)}
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 129
      , num_strict_rules = 108
      , num_top_rules = 108
      , num_weak_rules = 21
      , alphabet_size = 11
      , total_length = 1268}
    , self = 64
    , parent = Nothing
    , duration = 3.841901304000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:00:28.569104732 UTC
    , finish = 2025-09-03 13:00:32.411006036 UTC
    , thread_cap_info = ("ThreadId 100", 3, False)}
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 6
  max duration 4.184219945000
  min duration 1.364322629000
  total durat. 14.714998198000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 23
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 21
      , alphabet_size = 8
      , total_length = 323}
    , self = 95
    , parent = Nothing
    , duration = 1.364322629000
    , status = Success
    , start = 2025-09-03 13:00:39.687333555 UTC
    , finish = 2025-09-03 13:00:41.051656184 UTC
    , thread_cap_info = ("ThreadId 149", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 31
      , num_strict_rules = 10
      , num_top_rules = 10
      , num_weak_rules = 21
      , alphabet_size = 9
      , total_length = 408}
    , self = 72
    , parent = Nothing
    , duration = 1.393534354000
    , status = Success
    , start = 2025-09-03 13:00:34.149070917 UTC
    , finish = 2025-09-03 13:00:35.542605271 UTC
    , thread_cap_info = ("ThreadId 116", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 27
      , num_strict_rules = 6
      , num_top_rules = 6
      , num_weak_rules = 21
      , alphabet_size = 9
      , total_length = 366}
    , self = 86
    , parent = Nothing
    , duration = 1.654897594000
    , status = Success
    , start = 2025-09-03 13:00:37.050593732 UTC
    , finish = 2025-09-03 13:00:38.705491326 UTC
    , thread_cap_info = ("ThreadId 132", 3, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 101
      , num_strict_rules = 80
      , num_top_rules = 80
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1026}
    , self = 55
    , parent = Nothing
    , duration = 3.006121561000
    , status = Success
    , start = 2025-09-03 13:00:28.149163583 UTC
    , finish = 2025-09-03 13:00:31.155285144 UTC
    , thread_cap_info = ("ThreadId 94", 1, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 99
      , num_strict_rules = 78
      , num_top_rules = 78
      , num_weak_rules = 21
      , alphabet_size = 10
      , total_length = 1008}
    , self = 79
    , parent = Nothing
    , duration = 3.111902115000
    , status = Success
    , start = 2025-09-03 13:00:34.249863916 UTC
    , finish = 2025-09-03 13:00:37.361766031 UTC
    , thread_cap_info = ("ThreadId 119", 1, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 129
      , num_strict_rules = 108
      , num_top_rules = 108
      , num_weak_rules = 21
      , alphabet_size = 11
      , total_length = 1268}
    , self = 62
    , parent = Nothing
    , duration = 4.184219945000
    , status = Success
    , start = 2025-09-03 13:00:28.191034268 UTC
    , finish = 2025-09-03 13:00:32.375254213 UTC
    , thread_cap_info = ("ThreadId 98", 3, False)}
Fail : "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize, epsilon_digits = 6}))\n , verbose = False\n , tracing = False}"
  total number 27
  max duration 1.076801960000
  min duration 0.000001972000
  total durat. 2.010012546000
  Info
    { what = "Weight\n  { modus = Pre (Or_Else Count (GLPK   { goal = Optimize, epsilon_digits = 6}))\n  , verbose = False\n  , tracing = False}"
    , input_size = Size
      { num_rules = 7494
      , num_strict_rules = 6738
      , num_top_rules = 6738
      , num_weak_rules = 756
      , alphabet_size = 66
      , total_length = 90780}
    , self = 50
    , parent = Nothing
    , duration = 1.076801960000
    , status = Fail
    , start = 2025-09-03 13:00:25.150503483 UTC
    , finish = 2025-09-03 13:00:26.227305443 UTC
    , thread_cap_info = ("ThreadId 78", 2, False)}
**************************************************
F            Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
F            epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
F            = Size { num_rules = 7494 , num_strict_rules = 6738 , num_top_rules = 6738
F            , num_weak_rules = 756 , alphabet_size = 66 , total_length = 90780} , self
F            = 50 , parent = Nothing , duration = 1.076801960000 , status = Fail , start
F            = 2025-09-03 13:00:25.150503483 UTC , finish = 2025-09-03 13:00:26.227305443
F            UTC , thread_cap_info = ("ThreadId 78", 2, False)}
F            
| F          Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| F          epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| F          = Size { num_rules = 7374 , num_strict_rules = 6618 , num_top_rules = 6618
| F          , num_weak_rules = 756 , alphabet_size = 66 , total_length = 89286} , self
| F          = 49 , parent = Nothing , duration = 0.814558598000 , status = Fail , start
| F          = 2025-09-03 13:00:25.150505087 UTC , finish = 2025-09-03 13:00:25.965063685
| F          UTC , thread_cap_info = ("ThreadId 79", 2, False)}
| F          
| | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E        = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | E        = 80 , num_top_rules = 80 , num_weak_rules = 21 , alphabet_size = 10 ,
| | E        total_length = 1026} , self = 53 , parent = Nothing , duration = 3.027032899000
| | E        , status = Except "<<timeout>>" , start = 2025-09-03 13:00:25.18027059
| | E        UTC , finish = 2025-09-03 13:00:28.207303489 UTC , thread_cap_info = ("ThreadId
| | E        87", 1, False)}
| | E        
| | | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 129 , num_strict_rules
| | | E      = 108 , num_top_rules = 108 , num_weak_rules = 21 , alphabet_size = 11
| | | E      , total_length = 1268} , self = 52 , parent = Nothing , duration = 3.004808826000
| | | E      , status = Except "<<timeout>>" , start = 2025-09-03 13:00:25.182497565
| | | E      UTC , finish = 2025-09-03 13:00:28.187306391 UTC , thread_cap_info = ("ThreadId
| | | E      91", 3, False)}
| | | E      
| | | | E    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 129 , num_strict_rules
| | | | E    = 108 , num_top_rules = 108 , num_weak_rules = 21 , alphabet_size = 11
| | | | E    , total_length = 1268} , self = 54 , parent = Nothing , duration = 3.364661144000
| | | | E    , status = Except "<<timeout>>" , start = 2025-09-03 13:00:25.187305387
| | | | E    UTC , finish = 2025-09-03 13:00:28.551966531 UTC , thread_cap_info = ("ThreadId
| | | | E    90", 3, False)}
| | | | E    
| | | | | F  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | | | | F  = 80 , num_top_rules = 80 , num_weak_rules = 21 , alphabet_size = 10 ,
| | | | | F  total_length = 1026} , self = 51 , parent = Nothing , duration = 2.949771290000
| | | | | F  , status = Fail , start = 2025-09-03 13:00:25.187305477 UTC , finish =
| | | | | F  2025-09-03 13:00:28.137076767 UTC , thread_cap_info = ("ThreadId 86", 1,
| | | | | F  False)}
| | | | | F  
| F | | | |  
F   | | | |  
    | | | F  
S   | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | |    = 101 , num_strict_rules = 80 , num_top_rules = 80 , num_weak_rules = 21
S   | | |    , alphabet_size = 10 , total_length = 1026} , self = 55 , parent = Nothing
S   | | |    , duration = 3.006121561000 , status = Success , start = 2025-09-03 13:00:28.149163583
S   | | |    UTC , finish = 2025-09-03 13:00:31.155285144 UTC , thread_cap_info = ("ThreadId
S   | | |    94", 1, False)}
S   | | |    
|   | E |    
| S |   |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |   |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |   |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |   |    = 129 , num_strict_rules = 108 , num_top_rules = 108 , num_weak_rules =
| S |   |    21 , alphabet_size = 11 , total_length = 1268} , self = 62 , parent = Nothing
| S |   |    , duration = 4.184219945000 , status = Success , start = 2025-09-03 13:00:28.191034268
| S |   |    UTC , finish = 2025-09-03 13:00:32.375254213 UTC , thread_cap_info = ("ThreadId
| S |   |    98", 3, False)}
| S |   |    
| | E   |    
| | E   |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E   |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E   |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E   |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E   |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E   |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 101
| | E   |    , num_strict_rules = 80 , num_top_rules = 80 , num_weak_rules = 21 , alphabet_size
| | E   |    = 10 , total_length = 1026} , self = 57 , parent = Nothing , duration =
| | E   |    2.963379936000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | E   |    13:00:28.227613418 UTC , finish = 2025-09-03 13:00:31.190993354 UTC , thread_cap_info
| | E   |    = ("ThreadId 99", 1, False)}
| | E   |    
| | |   E    
| | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 129
| | | E      , num_strict_rules = 108 , num_top_rules = 108 , num_weak_rules = 21 ,
| | | E      alphabet_size = 11 , total_length = 1268} , self = 64 , parent = Nothing
| | | E      , duration = 3.841901304000 , status = Except "AsyncCancelled" , start
| | | E      = 2025-09-03 13:00:28.569104732 UTC , finish = 2025-09-03 13:00:32.411006036
| | | E      UTC , thread_cap_info = ("ThreadId 100", 3, False)}
| | | E      
S | | |      
  | E |      
E |   |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
E |   |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E |   |      = False\n , verbose = False}" , input_size = Size { num_rules = 99 , num_strict_rules
E |   |      = 78 , num_top_rules = 78 , num_weak_rules = 21 , alphabet_size = 10 ,
E |   |      total_length = 1008} , self = 70 , parent = Nothing , duration = 3.033061613000
E |   |      , status = Except "<<timeout>>" , start = 2025-09-03 13:00:31.216759525
E |   |      UTC , finish = 2025-09-03 13:00:34.249821138 UTC , thread_cap_info = ("ThreadId
E |   |      107", 1, False)}
E |   |      
| | E |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E |      = False\n , verbose = False}" , input_size = Size { num_rules = 99 , num_strict_rules
| | E |      = 78 , num_top_rules = 78 , num_weak_rules = 21 , alphabet_size = 10 ,
| | E |      total_length = 1008} , self = 71 , parent = Nothing , duration = 3.020777084000
| | E |      , status = Except "<<timeout>>" , start = 2025-09-03 13:00:31.2290608 UTC
| | E |      , finish = 2025-09-03 13:00:34.249837884 UTC , thread_cap_info = ("ThreadId
| | E |      106", 1, False)}
| | E |      
| S | |      
|   | E      
| F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 31 , num_strict_rules
| F |        = 10 , num_top_rules = 10 , num_weak_rules = 21 , alphabet_size = 9 , total_length
| F |        = 408} , self = 69 , parent = Nothing , duration = 1.709396886000 , status
| F |        = Fail , start = 2025-09-03 13:00:32.427309535 UTC , finish = 2025-09-03
| F |        13:00:34.136706421 UTC , thread_cap_info = ("ThreadId 113", 3, False)}
| F |        
| F |        
| S |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |        = 31 , num_strict_rules = 10 , num_top_rules = 10 , num_weak_rules = 21
| S |        , alphabet_size = 9 , total_length = 408} , self = 72 , parent = Nothing
| S |        , duration = 1.393534354000 , status = Success , start = 2025-09-03 13:00:34.149070917
| S |        UTC , finish = 2025-09-03 13:00:35.542605271 UTC , thread_cap_info = ("ThreadId
| S |        116", 3, False)}
| S |        
E | |        
  | E        
S |          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |          = 99 , num_strict_rules = 78 , num_top_rules = 78 , num_weak_rules = 21
S |          , alphabet_size = 10 , total_length = 1008} , self = 79 , parent = Nothing
S |          , duration = 3.111902115000 , status = Success , start = 2025-09-03 13:00:34.249863916
S |          UTC , finish = 2025-09-03 13:00:37.361766031 UTC , thread_cap_info = ("ThreadId
S |          119", 1, False)}
S |          
| | E        Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E        = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E        = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E        , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E        \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E        , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 99
| | E        , num_strict_rules = 78 , num_top_rules = 78 , num_weak_rules = 21 , alphabet_size
| | E        = 10 , total_length = 1008} , self = 81 , parent = Nothing , duration =
| | E        3.099019299000 , status = Except "AsyncCancelled" , start = 2025-09-03
| | E        13:00:34.292331937 UTC , finish = 2025-09-03 13:00:37.391351236 UTC , thread_cap_info
| | E        = ("ThreadId 120", 1, False)}
| | E        
| S |        
| F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F |        = 6 , num_top_rules = 6 , num_weak_rules = 21 , alphabet_size = 9 , total_length
| F |        = 366} , self = 78 , parent = Nothing , duration = 1.290691177000 , status
| F |        = Fail , start = 2025-09-03 13:00:35.747305973 UTC , finish = 2025-09-03
| F |        13:00:37.03799715 UTC , thread_cap_info = ("ThreadId 128", 3, False)}
| F |        
| F |        
| S |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S |        = 27 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 21 ,
| S |        alphabet_size = 9 , total_length = 366} , self = 86 , parent = Nothing
| S |        , duration = 1.654897594000 , status = Success , start = 2025-09-03 13:00:37.050593732
| S |        UTC , finish = 2025-09-03 13:00:38.705491326 UTC , thread_cap_info = ("ThreadId
| S |        132", 3, False)}
| S |        
S | |        
  | E        
E |          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
E |          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
E |          = False\n , verbose = False}" , input_size = Size { num_rules = 84 , num_strict_rules
E |          = 63 , num_top_rules = 63 , num_weak_rules = 21 , alphabet_size = 10 ,
E |          total_length = 858} , self = 94 , parent = Nothing , duration = 3.438800186000
E |          , status = Except "<<timeout>>" , start = 2025-09-03 13:00:37.406642203
E |          UTC , finish = 2025-09-03 13:00:40.845442389 UTC , thread_cap_info = ("ThreadId
E |          137", 1, False)}
E |          
| | E        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | E        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E        = False\n , verbose = False}" , input_size = Size { num_rules = 84 , num_strict_rules
| | E        = 63 , num_top_rules = 63 , num_weak_rules = 21 , alphabet_size = 10 ,
| | E        total_length = 858} , self = 93 , parent = Nothing , duration = 3.019364472000
| | E        , status = Except "<<timeout>>" , start = 2025-09-03 13:00:37.407301252
| | E        UTC , finish = 2025-09-03 13:00:40.426665724 UTC , thread_cap_info = ("ThreadId
| | E        138", 1, False)}
| | E        
| S |        
| F |        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F |        = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| F |        = 2 , num_top_rules = 2 , num_weak_rules = 21 , alphabet_size = 8 , total_length
| F |        = 323} , self = 92 , parent = Nothing , duration = 0.810986040000 , status
| F |        = Fail , start = 2025-09-03 13:00:38.863635144 UTC , finish = 2025-09-03
| F |        13:00:39.674621184 UTC , thread_cap_info = ("ThreadId 146", 3, False)}
| F |        
| | | E      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E      = False\n , verbose = False}" , input_size = Size { num_rules = 23 , num_strict_rules
| | | E      = 2 , num_top_rules = 2 , num_weak_rules = 21 , alphabet_size = 8 , total_length
| | | E      = 323} , self = 97 , parent = Nothing , duration = 2.274974477000 , status
| | | E      = Except "AsyncCancelled" , start = 2025-09-03 13:00:38.86363883 UTC ,
| | | E      finish = 2025-09-03 13:00:41.138613307 UTC , thread_cap_info = ("ThreadId
| | | E      147", 3, False)}
| | | E      
| F | |      
| S | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | |      = 23 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 21 ,
| S | |      alphabet_size = 8 , total_length = 323} , self = 95 , parent = Nothing
| S | |      , duration = 1.364322629000 , status = Success , start = 2025-09-03 13:00:39.687333555
| S | |      UTC , finish = 2025-09-03 13:00:41.051656184 UTC , thread_cap_info = ("ThreadId
| S | |      149", 3, False)}
| S | |      
| | E |      
E |   |      
  S   |      
      E      
