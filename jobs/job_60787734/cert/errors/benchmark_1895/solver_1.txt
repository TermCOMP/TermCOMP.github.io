last 5633 length 26075
last 987 length 3944
CNF 987 vars 3944 clauses
last 725 length 2906
CNF 725 vars 2906 clauses
last 5342 length 23042
CNF 5633 vars 26075 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2596, clauses: 9733
last 2596 length 9733
CNF 5342 vars 23042 clauses
CNF 2596 vars 9733 clauses
last 594 length 2399
last 448 length 1750
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6805, clauses: 28115
last 6805 length 28115
CNF 594 vars 2399 clauses
CNF 6805 vars 28115 clauses
CNF 448 vars 1750 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1731, clauses: 6320
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6805, clauses: 28115, status: Satisfied, time: 0.046023076s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2596, clauses: 9733, status: Unsatisfied, time: 0.13990226s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 8 strict rules and 3 weak rules on 6 letters       weights
SRS with 7 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 6 strict rules and 3 weak rules on 5 letters       Usable
  SRS with 6 strict rules and 2 weak rules on 4 letters       weights
  SRS with 3 strict rules and 2 weak rules on 4 letters       EDG
  SRS with 3 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 1 strict rules and 1 weak rules on 4 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [b, a] {- Input 0 -}
  [b, a, a] -> [a, a, a, b] {- Input 1 -}
  [a, c] -> [c, b] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [a, b] {- Mirror (Input 0) -}
  [a, a, b] -> [b, a, a, a] {- Mirror (Input 1) -}
  [c, a] -> [b, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, a] |-> [b#, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [c#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 3) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [a#, a, b] |-> [a#, a, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [a#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, a] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( b
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( a#
  , Ek 2  / 1 1 \
          \ 0 1 / )
  ( b#
  , Ek 2  / 1 1 \
          \ 0 2 / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [b#, a, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
reason
  (a, 1/1)
  (b, 3/2)
  (a#, 3/2)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 2)) -}
  [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
  [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [b, a, a] ->= [a, b] {- DP Nontop (Mirror (Input 0)) -}
      [a, a, b] ->= [b, a, a, a] {- DP Nontop (Mirror (Input 1)) -}
      [c, a] ->= [b, c] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [c#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (a, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee(8/3,6)\Weight(7/3,6)\EDG[(6/3,5)\Usable(6/2,4)\Weight\EDG(3/2,4)\Matrix{\Natural}{2}(1/1,4)\Weight(0,0)\EDG[],(1/3,4)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 16} , self
F          = 40 , parent = Nothing , duration = 0.137396496000 , status = Fail , start
F          = 2025-09-03 13:31:59.311310096 UTC , finish = 2025-09-03 13:31:59.448706592
F          UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F          
| E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| E        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E        = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E        = 16} , self = 72 , parent = Nothing , duration = 0.366842927000 , status
| E        = Except "AsyncCancelled" , start = 2025-09-03 13:31:59.311314509 UTC ,
| E        finish = 2025-09-03 13:31:59.678157436 UTC , thread_cap_info = ("ThreadId
| E        52", 3, False)}
| E        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 198} , self = 60 , parent = Nothing , duration = 0.255264341000 , status
| | F      = Fail , start = 2025-09-03 13:31:59.324821117 UTC , finish = 2025-09-03
| | F      13:31:59.580085458 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | F    = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | F    = 198} , self = 53 , parent = Nothing , duration = 0.169318807000 , status
| | | F    = Fail , start = 2025-09-03 13:31:59.324822255 UTC , finish = 2025-09-03
| | | F    13:31:59.494141062 UTC , thread_cap_info = ("ThreadId 62", 0, False)}
| | | F    
F | | |    
F | | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F | | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F | | |    = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
F | | |    = 5 , total_length = 47} , self = 71 , parent = Nothing , duration = 0.161372872000
F | | |    , status = Fail , start = 2025-09-03 13:31:59.467678381 UTC , finish =
F | | |    2025-09-03 13:31:59.629051253 UTC , thread_cap_info = ("ThreadId 94", 1,
F | | |    False)}
F | | |    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | S  , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | | | S  = 5 , total_length = 47} , self = 69 , parent = Nothing , duration = 0.139308551000
| | | | S  , status = Success , start = 2025-09-03 13:31:59.48729588 UTC , finish
| | | | S  = 2025-09-03 13:31:59.626604431 UTC , thread_cap_info = ("ThreadId 97",
| | | | S  1, False)}
| | | | S  
| | | F |  
| | F   |  
| |     S  
F |        
  E        
