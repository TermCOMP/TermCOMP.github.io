last 993 length 3958
CNF 993 vars 3958 clauses
last 1072 length 4196
last 709 length 2804
CNF 1072 vars 4196 clauses
last 706 length 2791
CNF 706 vars 2791 clauses
CNF 709 vars 2804 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4489, clauses: 15946
last 4489 length 15946
CNF 4489 vars 15946 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3240, clauses: 11378
last 3240 length 11378
CNF 3240 vars 11378 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 14342, clauses: 59207
last 14342 length 59207
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11432, clauses: 47163
last 11432 length 47163
CNF 14342 vars 59207 clauses
CNF 11432 vars 47163 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3240, clauses: 11378, status: Unsatisfied, time: 1.33141346s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6942, clauses: 27276
last 6942 length 27276
CNF 6942 vars 27276 clauses
last 41214 length 172303
CNF 41214 vars 172303 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 11432, clauses: 47163, status: Satisfied, time: 5.753062315s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4489, clauses: 15946, status: Unsatisfied, time: 6.388197015s
**************************************************
summary
**************************************************
SRS with 10 rules on 8 letters       mirror
SRS with 10 rules on 8 letters       DP
SRS with 20 strict rules and 10 weak rules on 15 letters       weights
SRS with 7 strict rules and 10 weak rules on 15 letters       EDG
5 sub-proofs
  1 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  3 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 strict rules and 9 weak rules on 8 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 9 weak rules on 7 letters       EDG

  4 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

  5 SRS with 1 strict rules and 10 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [R, 2] -> [2, R] {- Input 0 -}
  [R, 3] -> [3, R] {- Input 1 -}
  [R, 1] -> [L, 3] {- Input 2 -}
  [3, L] -> [L, 3] {- Input 3 -}
  [2, L] -> [L, 2] {- Input 4 -}
  [0, L] -> [2, R] {- Input 5 -}
  [R, b] -> [c, 1, b] {- Input 6 -}
  [3, c] -> [c, 1] {- Input 7 -}
  [2, c, 1] -> [c, 0, R, 1] {- Input 8 -}
  [2, c, 0] -> [c, 0, 0] {- Input 9 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [2, R] -> [R, 2] {- Mirror (Input 0) -}
  [3, R] -> [R, 3] {- Mirror (Input 1) -}
  [1, R] -> [3, L] {- Mirror (Input 2) -}
  [L, 3] -> [3, L] {- Mirror (Input 3) -}
  [L, 2] -> [2, L] {- Mirror (Input 4) -}
  [L, 0] -> [R, 2] {- Mirror (Input 5) -}
  [b, R] -> [b, 1, c] {- Mirror (Input 6) -}
  [c, 3] -> [1, c] {- Mirror (Input 7) -}
  [1, c, 2] -> [1, R, 0, c] {- Mirror (Input 8) -}
  [0, c, 2] -> [0, 0, c] {- Mirror (Input 9) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 2] |-> [L#] {- DP (Top 1) (Mirror (Input 4)) -}
  [L#, 2] |-> [2#, L] {- DP (Top 0) (Mirror (Input 4)) -}
  [L#, 0] |-> [2#] {- DP (Top 1) (Mirror (Input 5)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [L#, 3] |-> [3#, L] {- DP (Top 0) (Mirror (Input 3)) -}
  [1#, R] |-> [L#] {- DP (Top 1) (Mirror (Input 2)) -}
  [1#, R] |-> [3#, L] {- DP (Top 0) (Mirror (Input 2)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [0#, c] {- DP (Top 2) (Mirror (Input 8)) -}
  [1#, c, 2] |-> [c#] {- DP (Top 3) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [1#, c] {- DP (Top 1) (Mirror (Input 6)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [b#, R] |-> [c#] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [0#, c] {- DP (Top 1) (Mirror (Input 9)) -}
  [0#, c, 2] |-> [c#] {- DP (Top 2) (Mirror (Input 9)) -}
  [c#, 3] |-> [1#, c] {- DP (Top 0) (Mirror (Input 7)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (L, 0/1)
  (1, 0/1)
  (R, 0/1)
  (2, 3/1)
  (b, 0/1)
  (0, 3/1)
  (c, 0/1)
  (3, 0/1)
  (L#, 3/1)
  (1#, 4/1)
  (2#, 0/1)
  (b#, 6/1)
  (0#, 3/1)
  (c#, 5/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [1#, c, 2] |-> [1#, R, 0, c] {- DP (Top 0) (Mirror (Input 8)) -}
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, c, 2] |-> [0#, 0, c] {- DP (Top 0) (Mirror (Input 9)) -}
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [L#, 3] |-> [L#] {- DP (Top 1) (Mirror (Input 3)) -}
reason
  (3, 1/1)
  (L#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [2#, R] |-> [2#] {- DP (Top 1) (Mirror (Input 0)) -}
reason
  (R, 1/1)
  (2#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [b#, R] |-> [b#, 1, c] {- DP (Top 0) (Mirror (Input 6)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  ( L
  , Wk  / 0A 1A  -   \
        | -  -1A -1A |
        \ -  -   0A  / )
  ( 1
  , Wk  / -1A 0A  0A \
        | -2A -1A -  |
        \ -   -   0A / )
  ( R
  , Wk  / 0A -  -  \
        | -  0A 0A |
        \ -  -  0A / )
  ( 2
  , Wk  / 1A 2A 2A \
        | -  0A -  |
        \ -  -  0A / )
  ( 0
  , Wk  / 0A -1A 2A \
        | 0A 1A  1A |
        \ -  -   0A / )
  ( c
  , Wk  / 0A  0A  -  \
        | -1A -1A -  |
        \ -   -   0A / )
  ( 3
  , Wk  / -1A -  0A \
        | -   0A -  |
        \ -   -  0A / )
  ( b#
  , Wk  / 0A 1A 0A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [c#, 3] |-> [c#] {- DP (Top 1) (Mirror (Input 7)) -}
reason
  (3, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
  [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
  [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
  [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
  [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
  [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
  [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
  [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
  [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
  [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
  [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
reason
  remove un-usable
    SRS
      [2, R] ->= [R, 2] {- DP Nontop (Mirror (Input 0)) -}
      [3, R] ->= [R, 3] {- DP Nontop (Mirror (Input 1)) -}
      [1, R] ->= [3, L] {- DP Nontop (Mirror (Input 2)) -}
      [L, 3] ->= [3, L] {- DP Nontop (Mirror (Input 3)) -}
      [L, 2] ->= [2, L] {- DP Nontop (Mirror (Input 4)) -}
      [L, 0] ->= [R, 2] {- DP Nontop (Mirror (Input 5)) -}
      [b, R] ->= [b, 1, c] {- DP Nontop (Mirror (Input 6)) -}
      [c, 3] ->= [1, c] {- DP Nontop (Mirror (Input 7)) -}
      [1, c, 2] ->= [1, R, 0, c] {- DP Nontop (Mirror (Input 8)) -}
      [0, c, 2] ->= [0, 0, c] {- DP Nontop (Mirror (Input 9)) -}
   property Termination
has value Just True
for SRS
  [3#, R] |-> [3#] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (R, 1/1)
  (3#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(10,8)\Deepee(20/10,15)\Weight(7/10,15)\EDG[(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1/9,8)\Matrix{\ArcticBZ}{3}(0/9,7)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[],(1/10,9)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8790, clauses: 34635
last 8790 length 34635
CNF 8790 vars 34635 clauses

Success : "EDG { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
  total number 12
  max duration 1.135293998000
  min duration 0.000006072000
  total durat. 1.271539434000
  Info
    { what = "EDG   { usable = True, tcap_inverse = True, tracing = False, verbose = False}"
    , input_size = Size
      { num_rules = 434
      , num_strict_rules = 150
      , num_top_rules = 150
      , num_weak_rules = 284
      , alphabet_size = 84
      , total_length = 3098}
    , self = 63
    , parent = Nothing
    , duration = 1.135293998000
    , status = Success
    , start = 2025-09-03 13:35:32.535332288 UTC
    , finish = 2025-09-03 13:35:33.670626286 UTC
    , thread_cap_info = ("ThreadId 86", 3, False)}
Except "<<timeout>>" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.041986034000
  min duration 3.028705855000
  total durat. 6.070691889000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 316
      , num_strict_rules = 32
      , num_top_rules = 32
      , num_weak_rules = 284
      , alphabet_size = 57
      , total_length = 2186}
    , self = 71
    , parent = Nothing
    , duration = 3.028705855000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:35:32.541499617 UTC
    , finish = 2025-09-03 13:35:35.570205472 UTC
    , thread_cap_info = ("ThreadId 108", 3, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 166
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 162
      , alphabet_size = 37
      , total_length = 1117}
    , self = 74
    , parent = Nothing
    , duration = 3.041986034000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:35:34.211331556 UTC
    , finish = 2025-09-03 13:35:37.25331759 UTC
    , thread_cap_info = ("ThreadId 118", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.318629698000
  min duration 3.318629698000
  total durat. 3.318629698000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 70
    , parent = Nothing
    , duration = 3.318629698000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:35:32.153010163 UTC
    , finish = 2025-09-03 13:35:35.471639861 UTC
    , thread_cap_info = ("ThreadId 97", 0, False)}
Except "<<timeout>>" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 3.026468287000
  min duration 3.005276475000
  total durat. 6.031744762000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 316
      , num_strict_rules = 32
      , num_top_rules = 32
      , num_weak_rules = 284
      , alphabet_size = 57
      , total_length = 2186}
    , self = 72
    , parent = Nothing
    , duration = 3.005276475000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:35:32.56494404 UTC
    , finish = 2025-09-03 13:35:35.570220515 UTC
    , thread_cap_info = ("ThreadId 109", 3, False)}
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 166
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 162
      , alphabet_size = 37
      , total_length = 1117}
    , self = 75
    , parent = Nothing
    , duration = 3.026468287000
    , status = Except "<<timeout>>"
    , start = 2025-09-03 13:35:34.22685875 UTC
    , finish = 2025-09-03 13:35:37.253327037 UTC
    , thread_cap_info = ("ThreadId 119", 3, False)}
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.729421514000
  min duration 3.729421514000
  total durat. 3.729421514000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 284
      , num_strict_rules = 284
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 54
      , total_length = 1968}
    , self = 73
    , parent = Nothing
    , duration = 3.729421514000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:35:32.153012533 UTC
    , finish = 2025-09-03 13:35:35.882434047 UTC
    , thread_cap_info = ("ThreadId 99", 0, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 6.195205093000
  min duration 6.195205093000
  total durat. 6.195205093000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 76
    , parent = Nothing
    , duration = 6.195205093000
    , status = Success
    , start = 2025-09-03 13:35:32.285192732 UTC
    , finish = 2025-09-03 13:35:38.480397825 UTC
    , thread_cap_info = ("ThreadId 104", 2, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = Natural\n , method = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 4.957301682000
  min duration 4.957301682000
  total durat. 4.957301682000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = Natural\n  , method = Direct\n  , shape = Cornered\n  , bits = 3\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Binary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 79
    , parent = Nothing
    , duration = 4.957301682000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:35:33.631012191 UTC
    , finish = 2025-09-03 13:35:38.588313873 UTC
    , thread_cap_info = ("ThreadId 112", 2, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 6.509104860000
  min duration 1.373830394000
  total durat. 7.882935254000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 1
      , num_top_rules = 1
      , num_weak_rules = 9
      , alphabet_size = 8
      , total_length = 46}
    , self = 62
    , parent = Nothing
    , duration = 1.373830394000
    , status = Fail
    , start = 2025-09-03 13:35:32.227508367 UTC
    , finish = 2025-09-03 13:35:33.601338761 UTC
    , thread_cap_info = ("ThreadId 102", 2, False)}
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 4
      , num_top_rules = 4
      , num_weak_rules = 10
      , alphabet_size = 10
      , total_length = 64}
    , self = 81
    , parent = Nothing
    , duration = 6.509104860000
    , status = Fail
    , start = 2025-09-03 13:35:32.101801478 UTC
    , finish = 2025-09-03 13:35:38.610906338 UTC
    , thread_cap_info = ("ThreadId 69", 2, False)}
Fail : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 6.476678706000
  min duration 6.476678706000
  total durat. 6.476678706000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 10
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 8
      , total_length = 46}
    , self = 78
    , parent = Nothing
    , duration = 6.476678706000
    , status = Fail
    , start = 2025-09-03 13:35:32.079976588 UTC
    , finish = 2025-09-03 13:35:38.556655294 UTC
    , thread_cap_info = ("ThreadId 53", 1, False)}
**************************************************
F                    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F                    , closure = Forward\n , start_strict_only = True\n , max_closure_length
F                    = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F                    Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F                    8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F                    = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F                    ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F                    1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F                    = True})" , input_size = Size { num_rules = 10 , num_strict_rules = 10
F                    , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 8 , total_length
F                    = 46} , self = 78 , parent = Nothing , duration = 6.476678706000 , status
F                    = Fail , start = 2025-09-03 13:35:32.079976588 UTC , finish = 2025-09-03
F                    13:35:38.556655294 UTC , thread_cap_info = ("ThreadId 53", 1, False)}
F                    
| F                  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F                  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F                  = 14 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 10 ,
| F                  alphabet_size = 10 , total_length = 64} , self = 81 , parent = Nothing
| F                  , duration = 6.509104860000 , status = Fail , start = 2025-09-03 13:35:32.101801478
| F                  UTC , finish = 2025-09-03 13:35:38.610906338 UTC , thread_cap_info = ("ThreadId
| F                  69", 2, False)}
| F                  
| | S                Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S                epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S                = Size { num_rules = 770 , num_strict_rules = 486 , num_top_rules = 486
| | S                , num_weak_rules = 284 , alphabet_size = 75 , total_length = 4776} , self
| | S                = 57 , parent = Nothing , duration = 0.215046065000 , status = Success
| | S                , start = 2025-09-03 13:35:32.134768038 UTC , finish = 2025-09-03 13:35:32.349814103
| | S                UTC , thread_cap_info = ("ThreadId 88", 3, False)}
| | S                
| | | S              Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | S              epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | S              = Size { num_rules = 1124 , num_strict_rules = 840 , num_top_rules = 840
| | | S              , num_weak_rules = 284 , alphabet_size = 100 , total_length = 6812} , self
| | | S              = 59 , parent = Nothing , duration = 0.379626658000 , status = Success
| | | S              , start = 2025-09-03 13:35:32.148045673 UTC , finish = 2025-09-03 13:35:32.527672331
| | | S              UTC , thread_cap_info = ("ThreadId 93", 3, False)}
| | | S              
| | | | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 284 , num_strict_rules
| | | | E            = 284 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 54 , total_length
| | | | E            = 1968} , self = 70 , parent = Nothing , duration = 3.318629698000 , status
| | | | E            = Except "AsyncCancelled" , start = 2025-09-03 13:35:32.153010163 UTC ,
| | | | E            finish = 2025-09-03 13:35:35.471639861 UTC , thread_cap_info = ("ThreadId
| | | | E            97", 0, False)}
| | | | E            
| | | | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 284 , num_strict_rules
| | | | | E          = 284 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 54 , total_length
| | | | | E          = 1968} , self = 73 , parent = Nothing , duration = 3.729421514000 , status
| | | | | E          = Except "AsyncCancelled" , start = 2025-09-03 13:35:32.153012533 UTC ,
| | | | | E          finish = 2025-09-03 13:35:35.882434047 UTC , thread_cap_info = ("ThreadId
| | | | | E          99", 0, False)}
| | | | | E          
| | | | | | F        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | F        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | F        = 10 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 ,
| | | | | | F        alphabet_size = 8 , total_length = 46} , self = 62 , parent = Nothing ,
| | | | | | F        duration = 1.373830394000 , status = Fail , start = 2025-09-03 13:35:32.227508367
| | | | | | F        UTC , finish = 2025-09-03 13:35:33.601338761 UTC , thread_cap_info = ("ThreadId
| | | | | | F        102", 2, False)}
| | | | | | F        
| | | | | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | | S      , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| | | | | | | S      = 8 , total_length = 46} , self = 76 , parent = Nothing , duration = 6.195205093000
| | | | | | | S      , status = Success , start = 2025-09-03 13:35:32.285192732 UTC , finish
| | | | | | | S      = 2025-09-03 13:35:38.480397825 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | S      2, False)}
| | | | | | | S      
| | S | | | | |      
| | S | | | | |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S | | | | |      verbose = False}" , input_size = Size { num_rules = 356 , num_strict_rules
| | S | | | | |      = 72 , num_top_rules = 72 , num_weak_rules = 284 , alphabet_size = 61 ,
| | S | | | | |      total_length = 2408} , self = 58 , parent = Nothing , duration = 0.132745877000
| | S | | | | |      , status = Success , start = 2025-09-03 13:35:32.363215902 UTC , finish
| | S | | | | |      = 2025-09-03 13:35:32.495961779 UTC , thread_cap_info = ("ThreadId 84",
| | S | | | | |      3, False)}
| | S | | | | |      
| | S | | | | |      
| |   S | | | |      
| | S   | | | |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S   | | | |      verbose = False}" , input_size = Size { num_rules = 434 , num_strict_rules
| | S   | | | |      = 150 , num_top_rules = 150 , num_weak_rules = 284 , alphabet_size = 84
| | S   | | | |      , total_length = 3098} , self = 63 , parent = Nothing , duration = 1.135293998000
| | S   | | | |      , status = Success , start = 2025-09-03 13:35:32.535332288 UTC , finish
| | S   | | | |      = 2025-09-03 13:35:33.670626286 UTC , thread_cap_info = ("ThreadId 86",
| | S   | | | |      3, False)}
| | S   | | | |      
| | | E | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 316 , num_strict_rules
| | | E | | | |      = 32 , num_top_rules = 32 , num_weak_rules = 284 , alphabet_size = 57 ,
| | | E | | | |      total_length = 2186} , self = 71 , parent = Nothing , duration = 3.028705855000
| | | E | | | |      , status = Except "<<timeout>>" , start = 2025-09-03 13:35:32.541499617
| | | E | | | |      UTC , finish = 2025-09-03 13:35:35.570205472 UTC , thread_cap_info = ("ThreadId
| | | E | | | |      108", 3, False)}
| | | E | | | |      
| | | | | | | | E    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | E    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | E    = False\n , verbose = False}" , input_size = Size { num_rules = 316 , num_strict_rules
| | | | | | | | E    = 32 , num_top_rules = 32 , num_weak_rules = 284 , alphabet_size = 57 ,
| | | | | | | | E    total_length = 2186} , self = 72 , parent = Nothing , duration = 3.005276475000
| | | | | | | | E    , status = Except "<<timeout>>" , start = 2025-09-03 13:35:32.56494404
| | | | | | | | E    UTC , finish = 2025-09-03 13:35:35.570220515 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E    109", 3, False)}
| | | | | | | | E    
| | | | | | F | |    
| | | | | | E | |    Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | | | E | |    = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | | | E | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | | | E | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | E | |    , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 9 , alphabet_size
| | | | | | E | |    = 8 , total_length = 46} , self = 79 , parent = Nothing , duration = 4.957301682000
| | | | | | E | |    , status = Except "AsyncCancelled" , start = 2025-09-03 13:35:33.631012191
| | | | | | E | |    UTC , finish = 2025-09-03 13:35:38.588313873 UTC , thread_cap_info = ("ThreadId
| | | | | | E | |    112", 2, False)}
| | | | | | E | |    
| | S | | | | | |    
| | S | | | | | |    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S | | | | | |    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S | | | | | |    = Size { num_rules = 226 , num_strict_rules = 10 , num_top_rules = 10 ,
| | S | | | | | |    num_weak_rules = 216 , alphabet_size = 40 , total_length = 1494} , self
| | S | | | | | |    = 64 , parent = Nothing , duration = 0.132363994000 , status = Success
| | S | | | | | |    , start = 2025-09-03 13:35:33.68329225 UTC , finish = 2025-09-03 13:35:33.815656244
| | S | | | | | |    UTC , thread_cap_info = ("ThreadId 113", 3, False)}
| | S | | | | | |    
| | S | | | | | |    
| | S | | | | | |    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S | | | | | |    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S | | | | | |    = Size { num_rules = 220 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules
| | S | | | | | |    = 216 , alphabet_size = 39 , total_length = 1466} , self = 66 , parent
| | S | | | | | |    = Nothing , duration = 0.133900094000 , status = Success , start = 2025-09-03
| | S | | | | | |    13:35:33.886295312 UTC , finish = 2025-09-03 13:35:34.020195406 UTC , thread_cap_info
| | S | | | | | |    = ("ThreadId 114", 3, False)}
| | S | | | | | |    
| | S | | | | | |    
| | E | | | | | |    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E | | | | | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E | | | | | |    = False\n , verbose = False}" , input_size = Size { num_rules = 166 , num_strict_rules
| | E | | | | | |    = 4 , num_top_rules = 4 , num_weak_rules = 162 , alphabet_size = 37 , total_length
| | E | | | | | |    = 1117} , self = 74 , parent = Nothing , duration = 3.041986034000 , status
| | E | | | | | |    = Except "<<timeout>>" , start = 2025-09-03 13:35:34.211331556 UTC , finish
| | E | | | | | |    = 2025-09-03 13:35:37.25331759 UTC , thread_cap_info = ("ThreadId 118",
| | E | | | | | |    3, False)}
| | E | | | | | |    
| | | | | | | | | E  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | E  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | E  = False\n , verbose = False}" , input_size = Size { num_rules = 166 , num_strict_rules
| | | | | | | | | E  = 4 , num_top_rules = 4 , num_weak_rules = 162 , alphabet_size = 37 , total_length
| | | | | | | | | E  = 1117} , self = 75 , parent = Nothing , duration = 3.026468287000 , status
| | | | | | | | | E  = Except "<<timeout>>" , start = 2025-09-03 13:35:34.22685875 UTC , finish
| | | | | | | | | E  = 2025-09-03 13:35:37.253327037 UTC , thread_cap_info = ("ThreadId 119",
| | | | | | | | | E  3, False)}
| | | | | | | | | E  
| | | | E | | | | |  
| | | E   | | | | |  
| | |     | | | E |  
| | |     E | |   |  
| | E       | |   |  
| |         | |   E  
| |         | S      
F |         |        
  |         E        
  F                  
