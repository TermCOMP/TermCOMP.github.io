last 6295 length 49386
CNF 6295 vars 49386 clauses
last 8518 length 46939
CNF 8518 vars 46939 clauses
last 7674 length 55042
CNF 7674 vars 55042 clauses
last 13306 length 73289
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3135, clauses: 12575
last 3135 length 12575
CNF 13306 vars 73289 clauses
CNF 3135 vars 12575 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4256, clauses: 18399
last 4256 length 18399
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3135, clauses: 12575, status: Satisfied, time: 0.220955926s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10908, clauses: 45981
last 10908 length 45981
CNF 4256 vars 18399 clauses
CNF 10908 vars 45981 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12316, clauses: 51953
last 12316 length 51953
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4256, clauses: 18399, status: Unsatisfied, time: 0.278575594s
CNF 12316 vars 51953 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12316, clauses: 51953, status: Satisfied, time: 0.50507072s
last 8308 length 46076
last 6175 length 48939
CNF 6175 vars 48939 clauses
CNF 8308 vars 46076 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2924, clauses: 11628
last 2924 length 11628
CNF 2924 vars 11628 clauses
last 7748 length 55250
CNF 7748 vars 55250 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2924, clauses: 11628, status: Satisfied, time: 0.244146245s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10570, clauses: 44555
last 10570 length 44555
last 13014 length 72263
CNF 13014 vars 72263 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4141, clauses: 18064
last 4141 length 18064
CNF 4141 vars 18064 clauses
**************************************************
summary
**************************************************
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 11 strict rules and 7 weak rules on 4 letters       EDG
SRS with 3 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 7 weak rules on 4 letters       EDG
SRS with 1 strict rules and 7 weak rules on 4 letters       Usable
SRS with 1 rules on 4 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2] {- Input 0 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 1 -}
  [0, 1, 2, 1] -> [1, 2, 1, 1, 0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2] {- Input 2 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 3 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 4 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 5 -}
  [0, 1, 2, 1] -> [ 1 , 2 , 1 , 1 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 ] {- Input 6 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [1, 2, 1, 0] -> [2, 1, 0, 2, 1, 0, 1, 1, 2, 1] {- Mirror (Input 0) -}
  [1, 2, 1, 0] -> [2, 1, 0, 2, 1, 0, 2, 1, 0, 1, 1, 2, 1] {- Mirror (Input 1) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 2) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 3) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 4) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 5) -}
  [1, 2, 1, 0] -> [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Mirror (Input 6) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 2, 1] {- Many [ DP (Top 25) (Mirror (Input 6)) , DP (Top 22) (Mirror (Input 5)) , DP (Top 19) (Mirror (Input 4)) , DP (Top 16) (Mirror (Input 3)) , DP (Top 13) (Mirror (Input 2)) , DP (Top 10) (Mirror (Input 1)) , DP (Top 7) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 0, 1, 1, 2, 1] {- Many [ DP (Top 22) (Mirror (Input 6)) , DP (Top 19) (Mirror (Input 5)) , DP (Top 16) (Mirror (Input 4)) , DP (Top 13) (Mirror (Input 3)) , DP (Top 10) (Mirror (Input 2)) , DP (Top 7) (Mirror (Input 1)) , DP (Top 4) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 19) (Mirror (Input 6)) , DP (Top 16) (Mirror (Input 5)) , DP (Top 13) (Mirror (Input 4)) , DP (Top 10) (Mirror (Input 3)) , DP (Top 7) (Mirror (Input 2)) , DP (Top 4) (Mirror (Input 1)) , DP (Top 1) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 16) (Mirror (Input 6)) , DP (Top 13) (Mirror (Input 5)) , DP (Top 10) (Mirror (Input 4)) , DP (Top 7) (Mirror (Input 3)) , DP (Top 4) (Mirror (Input 2)) , DP (Top 1) (Mirror (Input 1)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 13) (Mirror (Input 6)) , DP (Top 10) (Mirror (Input 5)) , DP (Top 7) (Mirror (Input 4)) , DP (Top 4) (Mirror (Input 3)) , DP (Top 1) (Mirror (Input 2)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 10) (Mirror (Input 6)) , DP (Top 7) (Mirror (Input 5)) , DP (Top 4) (Mirror (Input 4)) , DP (Top 1) (Mirror (Input 3)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 7) (Mirror (Input 6)) , DP (Top 4) (Mirror (Input 5)) , DP (Top 1) (Mirror (Input 4)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- Many [ DP (Top 4) (Mirror (Input 6)) , DP (Top 1) (Mirror (Input 5)) ] -}
  [1#, 2, 1, 0] |-> [ 1# , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP (Top 1) (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 2, 1] {- Many [ DP (Top 25) (Mirror (Input 6)) , DP (Top 22) (Mirror (Input 5)) , DP (Top 19) (Mirror (Input 4)) , DP (Top 16) (Mirror (Input 3)) , DP (Top 13) (Mirror (Input 2)) , DP (Top 10) (Mirror (Input 1)) , DP (Top 7) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 1#
  , Wk  / 5A 7A 7A - \
        | 5A 7A 7A - |
        | 5A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1#, 2, 1, 0] |-> [1#, 1, 2, 1] {- Many [ DP (Top 24) (Mirror (Input 6)) , DP (Top 21) (Mirror (Input 5)) , DP (Top 18) (Mirror (Input 4)) , DP (Top 15) (Mirror (Input 3)) , DP (Top 12) (Mirror (Input 2)) , DP (Top 9) (Mirror (Input 1)) , DP (Top 6) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  ( 1
  , Wk  / 0A  0A  0A - \
        | -3A 0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( 2
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( 1#
  , Wk  / 7A 8A 10A - \
        | 7A 8A 10A - |
        | 7A 8A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
  [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
reason
  remove un-usable
    SRS
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 0)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 1)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 2)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 3)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 4)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 5)) -}
      [1, 2, 1, 0] ->= [ 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 2 , 1 , 0 , 1 , 1 , 2 , 1 ] {- DP Nontop (Mirror (Input 6)) -}
   property Termination
has value Just True
for SRS
  [1#, 2, 1, 0] |-> [1#] {- Many [ DP (Top 27) (Mirror (Input 6)) , DP (Top 24) (Mirror (Input 5)) , DP (Top 21) (Mirror (Input 4)) , DP (Top 18) (Mirror (Input 3)) , DP (Top 15) (Mirror (Input 2)) , DP (Top 12) (Mirror (Input 1)) , DP (Top 9) (Mirror (Input 0)) ] -}
reason
  (1, 1/1)
  (2, 1/1)
  (0, 1/1)
  (1#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(7,3)\Deepee(11/7,4)\EDG(3/7,4)\Matrix{\Arctic}{3}\EDG(2/7,4)\Matrix{\Arctic}{3}\EDG(1/7,4)\Usable(1,4)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4141, clauses: 18064, status: Unsatisfied, time: 0.147260316s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.146880623000
  min duration 0.795580282000
  total durat. 3.965880961000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 14
      , num_strict_rules = 7
      , num_top_rules = 7
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 294}
    , self = 88
    , parent = Nothing
    , duration = 1.120136952000
    , status = Fail
    , start = 2025-09-03 12:22:35.411784694 UTC
    , finish = 2025-09-03 12:22:36.531921646 UTC
    , thread_cap_info = ("ThreadId 128", 2, False)}
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 15
      , num_strict_rules = 8
      , num_top_rules = 8
      , num_weak_rules = 7
      , alphabet_size = 4
      , total_length = 301}
    , self = 60
    , parent = Nothing
    , duration = 1.146880623000
    , status = Fail
    , start = 2025-09-03 12:22:33.19215952 UTC
    , finish = 2025-09-03 12:22:34.339040143 UTC
    , thread_cap_info = ("ThreadId 76", 2, False)}
Except "AsyncCancelled" : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.105874093000
  min duration 3.105874093000
  total durat. 3.105874093000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 42
      , num_strict_rules = 42
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 1050}
    , self = 81
    , parent = Nothing
    , duration = 3.105874093000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:22:33.148961777 UTC
    , finish = 2025-09-03 12:22:36.25483587 UTC
    , thread_cap_info = ("ThreadId 68", 0, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 0.900021475000
  min duration 0.720109484000
  total durat. 3.259992101000
Except "AsyncCancelled" : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 3.275156916000
  min duration 3.275156916000
  total durat. 3.275156916000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 42
      , num_strict_rules = 42
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 7
      , total_length = 1050}
    , self = 82
    , parent = Nothing
    , duration = 3.275156916000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 12:22:33.148966624 UTC
    , finish = 2025-09-03 12:22:36.42412354 UTC
    , thread_cap_info = ("ThreadId 70", 0, False)}
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.757337255000
  min duration 0.587772789000
  total durat. 1.345110044000
**************************************************
F                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                = True}" , input_size = Size { num_rules = 7 , num_strict_rules = 7 , num_top_rules
F                = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 161} , self
F                = 51 , parent = Nothing , duration = 0.620974056000 , status = Fail , start
F                = 2025-09-03 12:22:33.13819857 UTC , finish = 2025-09-03 12:22:33.759172626
F                UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F              = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F              = 181} , self = 58 , parent = Nothing , duration = 0.795580282000 , status
| F              = Fail , start = 2025-09-03 12:22:33.139769526 UTC , finish = 2025-09-03
| F              12:22:33.935349808 UTC , thread_cap_info = ("ThreadId 58", 2, False)}
| F              
| | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | E            = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| | E            = 42 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | E            = 1050} , self = 81 , parent = Nothing , duration = 3.105874093000 , status
| | E            = Except "AsyncCancelled" , start = 2025-09-03 12:22:33.148961777 UTC ,
| | E            finish = 2025-09-03 12:22:36.25483587 UTC , thread_cap_info = ("ThreadId
| | E            68", 0, False)}
| | E            
| | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 42 , num_strict_rules
| | | E          = 42 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 7 , total_length
| | | E          = 1050} , self = 82 , parent = Nothing , duration = 3.275156916000 , status
| | | E          = Except "AsyncCancelled" , start = 2025-09-03 12:22:33.148966624 UTC ,
| | | E          finish = 2025-09-03 12:22:36.42412354 UTC , thread_cap_info = ("ThreadId
| | | E          70", 0, False)}
| | | E          
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | F        = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | F        = 181} , self = 57 , parent = Nothing , duration = 0.776910841000 , status
| | | | F        = Fail , start = 2025-09-03 12:22:33.152736656 UTC , finish = 2025-09-03
| | | | F        12:22:33.929647497 UTC , thread_cap_info = ("ThreadId 73", 2, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | | | F      = 8 , num_top_rules = 8 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | F      = 301} , self = 60 , parent = Nothing , duration = 1.146880623000 , status
| | | | | F      = Fail , start = 2025-09-03 12:22:33.19215952 UTC , finish = 2025-09-03
| | | | | F      12:22:34.339040143 UTC , thread_cap_info = ("ThreadId 76", 2, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 15 , num_strict_rules
| | | | | | F    = 8 , num_top_rules = 8 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | | F    = 301} , self = 59 , parent = Nothing , duration = 0.862950301000 , status
| | | | | | F    = Fail , start = 2025-09-03 12:22:33.21206288 UTC , finish = 2025-09-03
| | | | | | F    12:22:34.075013181 UTC , thread_cap_info = ("ThreadId 77", 2, False)}
| | | | | | F    
| | | | | | | S  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | | | | | | S  verbose = False}" , input_size = Size { num_rules = 128 , num_strict_rules
| | | | | | | S  = 86 , num_top_rules = 86 , num_weak_rules = 42 , alphabet_size = 9 , total_length
| | | | | | | S  = 2700} , self = 54 , parent = Nothing , duration = 0.313253615000 , status
| | | | | | | S  = Success , start = 2025-09-03 12:22:33.586319985 UTC , finish = 2025-09-03
| | | | | | | S  12:22:33.8995736 UTC , thread_cap_info = ("ThreadId 89", 3, False)}
| | | | | | | S  
F | | | | | | |  
  | | | | | | S  
  | | | F | |    
S | | |   | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | |   | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | |   | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | |   | |    = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
S | | |   | |    alphabet_size = 4 , total_length = 181} , self = 61 , parent = Nothing
S | | |   | |    , duration = 0.524780860000 , status = Success , start = 2025-09-03 12:22:33.932957394
S | | |   | |    UTC , finish = 2025-09-03 12:22:34.457738254 UTC , thread_cap_info = ("ThreadId
S | | |   | |    105", 2, False)}
S | | |   | |    
| F | |   | |    
| E | |   | |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | |   | |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | |   | |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | |   | |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | |   | |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | |   | |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E | |   | |    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| E | |   | |    = 4 , total_length = 181} , self = 63 , parent = Nothing , duration = 0.587772789000
| E | |   | |    , status = Except "AsyncCancelled" , start = 2025-09-03 12:22:34.011832052
| E | |   | |    UTC , finish = 2025-09-03 12:22:34.599604841 UTC , thread_cap_info = ("ThreadId
| E | |   | |    107", 2, False)}
| E | |   | |    
| | | |   | F    
| | | | F |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F |      = 15 , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 7 ,
| | | | F |      alphabet_size = 4 , total_length = 301} , self = 68 , parent = Nothing
| | | | F |      , duration = 0.565888591000 , status = Fail , start = 2025-09-03 12:22:34.131787248
| | | | F |      UTC , finish = 2025-09-03 12:22:34.697675839 UTC , thread_cap_info = ("ThreadId
| | | | F |      109", 2, False)}
| | | | F |      
| | | | | F      
| | | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
| | | | | S      , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 7 , alphabet_size
| | | | | S      = 4 , total_length = 301} , self = 69 , parent = Nothing , duration = 0.832010204000
| | | | | S      , status = Success , start = 2025-09-03 12:22:34.373776168 UTC , finish
| | | | | S      = 2025-09-03 12:22:35.205786372 UTC , thread_cap_info = ("ThreadId 111",
| | | | | S      2, False)}
| | | | | S      
S | | | | |      
  E | | | |      
F   | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F   | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
F   | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
F   | | | |      = 174} , self = 77 , parent = Nothing , duration = 0.903283104000 , status
F   | | | |      = Fail , start = 2025-09-03 12:22:34.688535593 UTC , finish = 2025-09-03
F   | | | |      12:22:35.591818697 UTC , thread_cap_info = ("ThreadId 118", 2, False)}
F   | | | |      
| F | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 9 , num_strict_rules
| F | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| F | | | |      = 174} , self = 76 , parent = Nothing , duration = 0.900021475000 , status
| F | | | |      = Fail , start = 2025-09-03 12:22:34.691778248 UTC , finish = 2025-09-03
| F | | | |      12:22:35.591799723 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| F | | | |      
| | | | F |      
| | | | E |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| | | | E |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | | E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | | E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 15
| | | | E |      , num_strict_rules = 8 , num_top_rules = 8 , num_weak_rules = 7 , alphabet_size
| | | | E |      = 4 , total_length = 301} , self = 71 , parent = Nothing , duration = 0.557256545000
| | | | E |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:22:34.791790517
| | | | E |      UTC , finish = 2025-09-03 12:22:35.349047062 UTC , thread_cap_info = ("ThreadId
| | | | E |      121", 2, False)}
| | | | E |      
| | | | | S      
| | | | E        
| | | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | F        = 7 , num_top_rules = 7 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | F        = 294} , self = 78 , parent = Nothing , duration = 0.720109484000 , status
| | | | F        = Fail , start = 2025-09-03 12:22:35.400176476 UTC , finish = 2025-09-03
| | | | F        12:22:36.12028596 UTC , thread_cap_info = ("ThreadId 129", 2, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| | | | | F      = 7 , num_top_rules = 7 , num_weak_rules = 7 , alphabet_size = 4 , total_length
| | | | | F      = 294} , self = 88 , parent = Nothing , duration = 1.120136952000 , status
| | | | | F      = Fail , start = 2025-09-03 12:22:35.411784694 UTC , finish = 2025-09-03
| | | | | F      12:22:36.531921646 UTC , thread_cap_info = ("ThreadId 128", 2, False)}
| | | | | F      
| F | | | |      
F   | | | |      
S   | | | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S   | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S   | | | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S   | | | |      = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
S   | | | |      = 4 , total_length = 174} , self = 79 , parent = Nothing , duration = 0.466540813000
S   | | | |      , status = Success , start = 2025-09-03 12:22:35.65510071 UTC , finish
S   | | | |      = 2025-09-03 12:22:36.121641523 UTC , thread_cap_info = ("ThreadId 130",
S   | | | |      2, False)}
S   | | | |      
| E | | | |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| E | | | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| E | | | |      = 4 , total_length = 174} , self = 83 , parent = Nothing , duration = 0.757337255000
| E | | | |      , status = Except "AsyncCancelled" , start = 2025-09-03 12:22:35.674361899
| E | | | |      UTC , finish = 2025-09-03 12:22:36.431699154 UTC , thread_cap_info = ("ThreadId
| E | | | |      131", 2, False)}
| E | | | |      
| | | | F |      
S | | |   |      
  | E |   |      
  |   E   |      
  E       |      
          F      
