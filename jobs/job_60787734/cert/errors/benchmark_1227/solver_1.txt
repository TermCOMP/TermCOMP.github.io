last 602 length 2329
last 467 length 1826
CNF 602 vars 2329 clauses
CNF 467 vars 1826 clauses
last 650 length 2583
CNF 650 vars 2583 clauses
last 800 length 3189
last 3941 length 17857
CNF 3941 vars 17857 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2094, clauses: 7679
last 2094 length 7679
CNF 800 vars 3189 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2598, clauses: 9581
last 4412 length 22139
CNF 2094 vars 7679 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6134, clauses: 25347
last 2598 length 9581
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6843, clauses: 28269
last 6134 length 25347
CNF 4412 vars 22139 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2094, clauses: 7679, status: Satisfied, time: 0.168775512s
last 6843 length 28269
CNF 2598 vars 9581 clauses
CNF 6134 vars 25347 clauses
CNF 6843 vars 28269 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2598, clauses: 9581, status: Satisfied, time: 0.106436755s
last 532 length 2064
last 439 length 1732
CNF 439 vars 1732 clauses
CNF 532 vars 2064 clauses
last 549 length 2213
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1988, clauses: 7200
CNF 549 vars 2213 clauses
last 556 length 2213
last 1988 length 7200
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6088, clauses: 25171
last 6088 length 25171
CNF 556 vars 2213 clauses
CNF 1988 vars 7200 clauses
CNF 6088 vars 25171 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2269, clauses: 8143
last 2269 length 8143
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1988, clauses: 7200, status: Unsatisfied, time: 0.152377789s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6088, clauses: 25171, status: Satisfied, time: 0.071317176s
CNF 2269 vars 8143 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2269, clauses: 8143, status: Satisfied, time: 0.071967921s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3790, clauses: 15008
last 11400 length 52533
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       EDG
SRS with 5 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 3 strict rules and 5 weak rules on 5 letters       EDG
SRS with 3 strict rules and 5 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 5 weak rules on 5 letters       weights
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b, b] -> [b, b, b, c] {- Input 1 -}
  [b, c] -> [a, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, b, a] -> [c, b, b, b] {- Mirror (Input 1) -}
  [c, b] -> [a, a] {- Mirror (Input 2) -}
CNF 11400 vars 52533 clauses
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, b, a] -> [c, b, b, b] {- Mirror (Input 1) -}
  [c, b] -> [a, a] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b, b] -> [b, b, b, c] {- Input 1 -}
  [b, c] -> [a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [b#, b, b, c] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [b#, b, c] {- DP (Top 1) (Input 1) -}
  [a#, b, b] |-> [b#, c] {- DP (Top 2) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 1) (Input 2) -}
  [b#, c] |-> [a#, a] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b, c] {- DP (Top 0) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 1) (Input 2) -}
  [a#, b, b] |-> [b#, b, c] {- DP (Top 1) (Input 1) -}
  [b#, c] |-> [a#, a] {- DP (Top 0) (Input 2) -}
  [a#, b, b] |-> [b#, c] {- DP (Top 2) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A 0A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A 0A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 1A 2A 2A - \
        | 1A 2A 2A - |
        | 1A 2A 2A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 2A 2A 4A - \
        | 2A 2A 4A - |
        | 2A 2A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b, c] {- DP (Top 0) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 1) (Input 2) -}
  [b#, c] |-> [a#, a] {- DP (Top 0) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b, c] {- DP (Top 0) (Input 1) -}
  [b#, c] |-> [a#] {- DP (Top 1) (Input 2) -}
  [b#, c] |-> [a#, a] {- DP (Top 0) (Input 2) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 1A 1A 4A - \
        | 1A 1A 4A - |
        | 1A 1A 4A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 2A 2A 4A - \
        | 2A 2A 4A - |
        | 2A 2A 4A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [b#, b, b, c] {- DP (Top 0) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, b, c] {- DP Nontop (Input 1) -}
  [b, c] ->= [a, a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee\EDG(5/5,5)\Matrix{\Arctic}{3}\EDG(3/5,5)\Matrix{\Arctic}{3}(1/5,5)\Weight(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
E              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E              = 12} , self = 91 , parent = Nothing , duration = 0.708720534000 , status
E              = Except "AsyncCancelled" , start = 2025-09-03 11:19:59.516889801 UTC ,
E              finish = 2025-09-03 11:20:00.225610335 UTC , thread_cap_info = ("ThreadId
E              37", 2, False)}
E              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F            = 162} , self = 57 , parent = Nothing , duration = 0.177127902000 , status
| F            = Fail , start = 2025-09-03 11:19:59.525590751 UTC , finish = 2025-09-03
| F            11:19:59.702718653 UTC , thread_cap_info = ("ThreadId 64", 2, False)}
| F            
| | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F          = 162} , self = 60 , parent = Nothing , duration = 0.297234750000 , status
| | F          = Fail , start = 2025-09-03 11:19:59.545601887 UTC , finish = 2025-09-03
| | F          11:19:59.842836637 UTC , thread_cap_info = ("ThreadId 66", 2, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F        = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F        = 45} , self = 58 , parent = Nothing , duration = 0.147925173000 , status
| | | F        = Fail , start = 2025-09-03 11:19:59.563035743 UTC , finish = 2025-09-03
| | | F        11:19:59.710960916 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| | | F        
| | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | S      = 4 , total_length = 35} , self = 61 , parent = Nothing , duration = 0.268292504000
| | | | S      , status = Success , start = 2025-09-03 11:19:59.576997334 UTC , finish
| | | | S      = 2025-09-03 11:19:59.845289838 UTC , thread_cap_info = ("ThreadId 96",
| | | | S      1, False)}
| | | | S      
| | | | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S    = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | S    alphabet_size = 5 , total_length = 45} , self = 63 , parent = Nothing ,
| | | | | S    duration = 0.279617702000 , status = Success , start = 2025-09-03 11:19:59.594795862
| | | | | S    UTC , finish = 2025-09-03 11:19:59.874413564 UTC , thread_cap_info = ("ThreadId
| | | | | S    99", 1, False)}
| | | | | S    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | | | | E  = 4 , total_length = 35} , self = 65 , parent = Nothing , duration = 0.250941047000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:19:59.625617853
| | | | | | E  UTC , finish = 2025-09-03 11:19:59.8765589 UTC , thread_cap_info = ("ThreadId
| | | | | | E  100", 1, False)}
| | | | | | E  
| F | | | | |  
|   | F | | |  
| E |   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E |   | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| E |   | | |  = 5 , total_length = 45} , self = 70 , parent = Nothing , duration = 0.179986916000
| E |   | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:19:59.710988323
| E |   | | |  UTC , finish = 2025-09-03 11:19:59.890975239 UTC , thread_cap_info = ("ThreadId
| E |   | | |  109", 1, False)}
| E |   | | |  
| | F   | | |  
| |     S | |  
| |       S |  
| |         E  
| E            
| F            Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| F            , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| F            = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| F            = 4 , total_length = 31} , self = 79 , parent = Nothing , duration = 0.204582424000
| F            , status = Fail , start = 2025-09-03 11:19:59.893862058 UTC , finish =
| F            2025-09-03 11:20:00.098444482 UTC , thread_cap_info = ("ThreadId 128",
| F            1, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | F          = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | F          = 34} , self = 77 , parent = Nothing , duration = 0.128025297000 , status
| | F          = Fail , start = 2025-09-03 11:19:59.906496628 UTC , finish = 2025-09-03
| | F          11:20:00.034521925 UTC , thread_cap_info = ("ThreadId 130", 1, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F        = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F        = 34} , self = 78 , parent = Nothing , duration = 0.133821552000 , status
| | | F        = Fail , start = 2025-09-03 11:19:59.911806427 UTC , finish = 2025-09-03
| | | F        11:20:00.045627979 UTC , thread_cap_info = ("ThreadId 131", 1, False)}
| | | F        
| | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | S      = 4 , total_length = 31} , self = 80 , parent = Nothing , duration = 0.172956842000
| | | | S      , status = Success , start = 2025-09-03 11:19:59.926377854 UTC , finish
| | | | S      = 2025-09-03 11:20:00.099334696 UTC , thread_cap_info = ("ThreadId 133",
| | | | S      1, False)}
| | | | S      
| | F | |      
| | S | |      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S | |      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S | |      = 8 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | S | |      = 5 , total_length = 34} , self = 82 , parent = Nothing , duration = 0.133417420000
| | S | |      , status = Success , start = 2025-09-03 11:20:00.040590525 UTC , finish
| | S | |      = 2025-09-03 11:20:00.174007945 UTC , thread_cap_info = ("ThreadId 137",
| | S | |      1, False)}
| | S | |      
| | | F |      
| | | E |      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | E |      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 5 , alphabet_size
| | | E |      = 5 , total_length = 34} , self = 86 , parent = Nothing , duration = 0.141759536000
| | | E |      , status = Except "AsyncCancelled" , start = 2025-09-03 11:20:00.064040921
| | | E |      UTC , finish = 2025-09-03 11:20:00.205800457 UTC , thread_cap_info = ("ThreadId
| | | E |      138", 1, False)}
| | | E |      
| F | | |      
|   | | S      
|   S |        
|     E        
E              
