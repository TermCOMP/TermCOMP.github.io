last 884 length 3588
CNF 884 vars 3588 clauses
last 3919 length 17738
last 812 length 3373
CNF 3919 vars 17738 clauses
last 513 length 2013
last 4306 length 21698
CNF 812 vars 3373 clauses
CNF 4306 vars 21698 clauses
last 480 length 1868
CNF 480 vars 1868 clauses
CNF 513 vars 2013 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2577, clauses: 9482
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1976, clauses: 7080
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7131, clauses: 29493
last 2577 length 9482
last 1976 length 7080
last 7131 length 29493
CNF 2577 vars 9482 clauses
CNF 7131 vars 29493 clauses
CNF 1976 vars 7080 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6382, clauses: 26449
last 6382 length 26449
CNF 6382 vars 26449 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2577, clauses: 9482, status: Satisfied, time: 0.110595541s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1976, clauses: 7080, status: Satisfied, time: 0.122200777s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7131, clauses: 29493, status: Satisfied, time: 0.122297758s
last 672 length 2860
CNF 672 vars 2860 clauses
last 816 length 3266
CNF 816 vars 3266 clauses
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 5 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [b, a] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [a, b] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [a, a, b] -> [a] {- Mirror (Input 2) -}
  [b, a, b] -> [b] {- Mirror (Input 2) -}
  [c, a, b] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [b, a, a] -> [a] {- Input 2 -}
  [b, a, b] -> [b] {- Input 2 -}
  [b, a, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [b, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, a, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#] |-> [b#, c] {- DP (Top 0) (Input 0) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a#, b, b] |-> [b#, a, a] {- DP (Top 1) (Input 1) -}
  [a#, b, b] |-> [b#, b, a, a] {- DP (Top 0) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [b, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, a, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [b, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 6A 7A 9A - \
        | 6A 7A 9A - |
        | 6A 7A 9A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [b, a, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, a, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, a, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(5/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2399, clauses: 8847
last 2399 length 8847
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 2399 vars 8847 clauses


**************************************************
E          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E          = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E          = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
E          = 73 , parent = Nothing , duration = 0.415702136000 , status = Except "AsyncCancelled"
E          , start = 2025-09-03 11:30:31.244546303 UTC , finish = 2025-09-03 11:30:31.660248439
E          UTC , thread_cap_info = ("ThreadId 22", 3, False)}
E          
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F        = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 162} , self = 45 , parent = Nothing , duration = 0.134160295000 , status
| F        = Fail , start = 2025-09-03 11:30:31.251046904 UTC , finish = 2025-09-03
| F        11:30:31.385207199 UTC , thread_cap_info = ("ThreadId 68", 0, False)}
| F        
| | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F      = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F      = 162} , self = 46 , parent = Nothing , duration = 0.132739425000 , status
| | F      = Fail , start = 2025-09-03 11:30:31.261346495 UTC , finish = 2025-09-03
| | F      11:30:31.39408592 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F    = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | F    = 31} , self = 57 , parent = Nothing , duration = 0.126020599000 , status
| | | F    = Fail , start = 2025-09-03 11:30:31.36614535 UTC , finish = 2025-09-03
| | | F    11:30:31.492165949 UTC , thread_cap_info = ("ThreadId 86", 3, False)}
| | | F    
| F | |    
| S | |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S | |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S | |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S | |    = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| S | |    alphabet_size = 5 , total_length = 46} , self = 59 , parent = Nothing ,
| S | |    duration = 0.232597806000 , status = Success , start = 2025-09-03 11:30:31.388437827
| S | |    UTC , finish = 2025-09-03 11:30:31.621035633 UTC , thread_cap_info = ("ThreadId
| S | |    97", 3, False)}
| S | |    
| | F |    
| | E |    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E |    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E |    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E |    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E |    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E |    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | E |    , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | E |    = 5 , total_length = 46} , self = 62 , parent = Nothing , duration = 0.216900472000
| | E |    , status = Except "AsyncCancelled" , start = 2025-09-03 11:30:31.408204094
| | E |    UTC , finish = 2025-09-03 11:30:31.625104566 UTC , thread_cap_info = ("ThreadId
| | E |    102", 3, False)}
| | E |    
| | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S  = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | S  = 4 , total_length = 31} , self = 61 , parent = Nothing , duration = 0.164814418000
| | | | S  , status = Success , start = 2025-09-03 11:30:31.460283341 UTC , finish
| | | | S  = 2025-09-03 11:30:31.625097759 UTC , thread_cap_info = ("ThreadId 106",
| | | | S  3, False)}
| | | | S  
| | | F |  
| | | E |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | E |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | E |  = 4 , total_length = 31} , self = 68 , parent = Nothing , duration = 0.133268183000
| | | E |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:30:31.493334357
| | | E |  UTC , finish = 2025-09-03 11:30:31.62660254 UTC , thread_cap_info = ("ThreadId
| | | E |  110", 3, False)}
| | | E |  
| S | | |  
|   | | S  
|   E |    
|     E    
E          
