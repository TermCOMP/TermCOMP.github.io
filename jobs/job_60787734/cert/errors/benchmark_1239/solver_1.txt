last 440 length 1803
CNF 440 vars 1803 clauses
last 494 length 2047
last 405 length 1658
last 330 length 1297
CNF 405 vars 1658 clauses
CNF 494 vars 2047 clauses
CNF 330 vars 1297 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6457
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7272
last 1837 length 6457
last 4088 length 18346
last 4680 length 23575
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5249, clauses: 21515
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4913, clauses: 20101
last 7724 length 35125
last 2048 length 7272
CNF 1837 vars 6457 clauses
CNF 4088 vars 18346 clauses
last 5899 length 23816
last 5249 length 21515
CNF 4680 vars 23575 clauses
last 4913 length 20101
last 10768 length 45903
CNF 7724 vars 35125 clauses
last 8721 length 36042
CNF 2048 vars 7272 clauses
CNF 5899 vars 23816 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6457, status: Satisfied, time: 0.320327064s
CNF 5249 vars 21515 clauses
CNF 4913 vars 20101 clauses
CNF 10768 vars 45903 clauses
CNF 8721 vars 36042 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2048, clauses: 7272, status: Satisfied, time: 0.22469696s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5249, clauses: 21515, status: Satisfied, time: 0.163279151s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       DP
SRS with 4 strict rules and 3 weak rules on 5 letters       EDG
SRS with 3 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 5 letters       weights
SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b] {- Input 0 -}
  [a, a] -> [a, b, a, c] {- Input 1 -}
  [c, b, b] -> [a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
  [a#, a] |-> [a#, b, a, c] {- DP (Top 0) (Input 1) -}
  [a#, a] |-> [a#, c] {- DP (Top 2) (Input 1) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [c#, b, b] |-> [a#] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [c#, b, b] |-> [a#] {- DP (Top 0) (Input 2) -}
  [a#, a] |-> [a#, c] {- DP (Top 2) (Input 1) -}
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A 0A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( a#
  , Wk  / 12A 12A 15A - \
        | 12A 12A 15A - |
        | 12A 12A 15A - |
        \ -   -   -   - / )
  ( c#
  , Wk  / 15A 17A 17A - \
        | 15A 17A 17A - |
        | 15A 17A 17A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [c#] {- DP (Top 3) (Input 1) -}
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b] {- DP Nontop (Input 0) -}
  [a, a] ->= [a, b, a, c] {- DP Nontop (Input 1) -}
  [c, b, b] ->= [a] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: (3,3)\Deepee(4/3,5)\EDG(3/3,5)\Matrix{\Arctic}{3}(1/3,5)\Weight(0/3,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.603366976000
  min duration 0.036199269000
  total durat. 1.662620743000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.420022663000
  min duration 0.008211478000
  total durat. 1.266505504000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.576569274000
  min duration 0.489279157000
  total durat. 1.065848431000
**************************************************
F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                    = False\n , verbose = False}" , input_size = Size { num_rules = 6 , num_strict_rules
F                    = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size = 5 , total_length
F                    = 23} , self = 58 , parent = Nothing , duration = 0.102973503000 , status
F                    = Fail , start = 2025-09-03 11:17:13.985043442 UTC , finish = 2025-09-03
F                    11:17:14.088016945 UTC , thread_cap_info = ("ThreadId 82", 2, False)}
F                    
| F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                  = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F                  = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                  = 162} , self = 59 , parent = Nothing , duration = 0.397900894000 , status
| F                  = Fail , start = 2025-09-03 11:17:13.985059528 UTC , finish = 2025-09-03
| F                  11:17:14.382960422 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| F                  
| | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F                = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F                = 162} , self = 60 , parent = Nothing , duration = 0.420022663000 , status
| | F                = Fail , start = 2025-09-03 11:17:13.985060649 UTC , finish = 2025-09-03
| | F                11:17:14.405083312 UTC , thread_cap_info = ("ThreadId 87", 0, False)}
| | F                
| | | S              Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S              [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S              , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S              = 6 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | S              = 5 , total_length = 23} , self = 62 , parent = Nothing , duration = 0.489279157000
| | | S              , status = Success , start = 2025-09-03 11:17:13.998540515 UTC , finish
| | | S              = 2025-09-03 11:17:14.487819672 UTC , thread_cap_info = ("ThreadId 94",
| | | S              2, False)}
| | | S              
| | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | F            = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | F            total_length = 417} , self = 69 , parent = Nothing , duration = 0.603366976000
| | | | F            , status = Fail , start = 2025-09-03 11:17:14.004167385 UTC , finish =
| | | | F            2025-09-03 11:17:14.607534361 UTC , thread_cap_info = ("ThreadId 99", 3,
| | | | F            False)}
| | | | F            
| | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 75 , num_strict_rules
| | | | | F          = 48 , num_top_rules = 48 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | F          total_length = 417} , self = 61 , parent = Nothing , duration = 0.418554514000
| | | | | F          , status = Fail , start = 2025-09-03 11:17:14.006051704 UTC , finish =
| | | | | F          2025-09-03 11:17:14.424606218 UTC , thread_cap_info = ("ThreadId 100",
| | | | | F          3, False)}
| | | | | F          
| | | | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S        = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | | S        = 5 , total_length = 27} , self = 68 , parent = Nothing , duration = 0.576569274000
| | | | | | S        , status = Success , start = 2025-09-03 11:17:14.030864474 UTC , finish
| | | | | | S        = 2025-09-03 11:17:14.607433748 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | S        2, False)}
| | | | | | S        
| | | | | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | | S      , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | | | | S      = 5 , total_length = 27} , self = 70 , parent = Nothing , duration = 0.560109643000
| | | | | | | S      , status = Success , start = 2025-09-03 11:17:14.047516645 UTC , finish
| | | | | | | S      = 2025-09-03 11:17:14.607626288 UTC , thread_cap_info = ("ThreadId 104",
| | | | | | | S      2, False)}
| | | | | | | S      
F | | | | | | |      
F | | | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F | | | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F | | | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
F | | | | | | |      = 42 , num_top_rules = 42 , num_weak_rules = 27 , alphabet_size = 15 ,
F | | | | | | |      total_length = 369} , self = 73 , parent = Nothing , duration = 0.522180101000
F | | | | | | |      , status = Fail , start = 2025-09-03 11:17:14.106794394 UTC , finish =
F | | | | | | |      2025-09-03 11:17:14.628974495 UTC , thread_cap_info = ("ThreadId 106",
F | | | | | | |      3, False)}
F | | | | | | |      
| | | | | | | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | | | | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 3 , alphabet_size
| | | | | | | | E    = 5 , total_length = 23} , self = 65 , parent = Nothing , duration = 0.421268876000
| | | | | | | | E    , status = Except "AsyncCancelled" , start = 2025-09-03 11:17:14.106814095
| | | | | | | | E    UTC , finish = 2025-09-03 11:17:14.528082971 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E    108", 2, False)}
| | | | | | | | E    
| | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 69 , num_strict_rules
| | | | | | | | | F  = 42 , num_top_rules = 42 , num_weak_rules = 27 , alphabet_size = 15 ,
| | | | | | | | | F  total_length = 369} , self = 64 , parent = Nothing , duration = 0.383532947000
| | | | | | | | | F  , status = Fail , start = 2025-09-03 11:17:14.138760964 UTC , finish =
| | | | | | | | | F  2025-09-03 11:17:14.522293911 UTC , thread_cap_info = ("ThreadId 107",
| | | | | | | | | F  0, False)}
| | | | | | | | | F  
| F | | | | | | | |  
|   F | | | | | | |  
|     | | F | | | |  
|     S |   | | | |  
|       |   | | | F  
|       |   | | E    
|       |   S |      
|       F     |      
|             S      
F                    
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 16880, clauses: 66438
last 16880 length 66438
