last 3199 length 16320
CNF 3199 vars 16320 clauses
last 9336 length 60469
last 5343 length 29632
last 3209 length 16317
CNF 9336 vars 60469 clauses
CNF 5343 vars 29632 clauses
CNF 3209 vars 16317 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6631, clauses: 23992
last 6631 length 23992
CNF 6631 vars 23992 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6631, clauses: 23992, status: Satisfied, time: 0.102649225s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6955, clauses: 25300
last 6955 length 25300
CNF 6955 vars 25300 clauses
**************************************************
summary
**************************************************
SRS with 9 rules on 8 letters       context
SRS with 16 rules on 8 letters       mirror
SRS with 16 rules on 8 letters       DP
SRS with 33 strict rules and 16 weak rules on 10 letters       weights
SRS with 10 strict rules and 16 weak rules on 10 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 16 weak rules on 9 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 16 weak rules on 8 letters       EDG

  2 SRS with 1 strict rules and 16 weak rules on 9 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [p, 0] -> [0, s, s, p] {- Input 0 -}
  [p, s] -> [] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [p, s, g, p, s, s] {- Input 3 -}
  [g, s] -> [p, p, s, s, s, j, s, p, s, p, s] {- Input 4 -}
  [j, s] -> [p, s, s, p, s, f, p, s, p, p, s] {- Input 5 -}
  [half, 0] -> [0, s, s, half, p, s, p, s] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [rd, 0] -> [0, s, 0, 0, 0, 0, s, 0, rd] {- Input 8 -}
reason
  context
   property Termination
has value Just True
for SRS
  [p, 0] -> [0, s, s, p] {- Input 0 -}
  [s, p, s] -> [s] {- Input 1 -}
  [p, p, s] -> [p] {- Input 1 -}
  [g, p, s] -> [g] {- Input 1 -}
  [f, p, s] -> [f] {- Input 1 -}
  [0, p, s] -> [0] {- Input 1 -}
  [half, p, s] -> [half] {- Input 1 -}
  [rd, p, s] -> [rd] {- Input 1 -}
  [j, p, s] -> [j] {- Input 1 -}
  [p, p, s] -> [p] {- Input 2 -}
  [f, s] -> [p, s, g, p, s, s] {- Input 3 -}
  [g, s] -> [p, p, s, s, s, j, s, p, s, p, s] {- Input 4 -}
  [j, s] -> [p, s, s, p, s, f, p, s, p, p, s] {- Input 5 -}
  [half, 0] -> [0, s, s, half, p, s, p, s] {- Input 6 -}
  [half, s, s] -> [s, half, p, p, s, s] {- Input 7 -}
  [rd, 0] -> [0, s, 0, 0, 0, 0, s, 0, rd] {- Input 8 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [0, p] -> [p, s, s, 0] {- Mirror (Input 0) -}
  [s, p, s] -> [s] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 1) -}
  [s, p, g] -> [g] {- Mirror (Input 1) -}
  [s, p, f] -> [f] {- Mirror (Input 1) -}
  [s, p, 0] -> [0] {- Mirror (Input 1) -}
  [s, p, half] -> [half] {- Mirror (Input 1) -}
  [s, p, rd] -> [rd] {- Mirror (Input 1) -}
  [s, p, j] -> [j] {- Mirror (Input 1) -}
  [s, p, p] -> [p] {- Mirror (Input 2) -}
  [s, f] -> [s, s, p, g, s, p] {- Mirror (Input 3) -}
  [s, g] -> [s, p, s, p, s, j, s, s, s, p, p] {- Mirror (Input 4) -}
  [s, j] -> [s, p, p, s, p, f, s, p, s, s, p] {- Mirror (Input 5) -}
  [0, half] -> [s, p, s, p, half, s, s, 0] {- Mirror (Input 6) -}
  [s, s, half] -> [s, s, p, p, half, s] {- Mirror (Input 7) -}
  [0, rd] -> [rd, 0, s, 0, 0, 0, 0, s, 0] {- Mirror (Input 8) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
  [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
  [s#, s, half] |-> [s#] {- DP (Top 5) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, p, p, half, s] {- DP (Top 1) (Mirror (Input 7)) -}
  [s#, g] |-> [s#, s, s, p, p] {- DP (Top 6) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, s, p, p] {- DP (Top 7) (Mirror (Input 4)) -}
  [s#, g] |-> [ s# , p , s , p , s , j , s , s , s , p , p ] {- DP (Top 0) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, p, s, j, s, s, s, p, p] {- DP (Top 2) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, p, p] {- DP (Top 8) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, j, s, s, s, p, p] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, f] |-> [s#, s, p, g, s, p] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [s#, p] {- DP (Top 4) (Mirror (Input 3)) -}
  [s#, f] |-> [s#, p, g, s, p] {- DP (Top 1) (Mirror (Input 3)) -}
  [s#, j] |-> [s#, s, p] {- DP (Top 8) (Mirror (Input 5)) -}
  [s#, j] |-> [s#, p] {- DP (Top 9) (Mirror (Input 5)) -}
  [s#, j] |-> [s#, p, s, s, p] {- DP (Top 6) (Mirror (Input 5)) -}
  [s#, j] |-> [ s# , p , p , s , p , f , s , p , s , s , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, j] |-> [s#, p, f, s, p, s, s, p] {- DP (Top 3) (Mirror (Input 5)) -}
  [0#, p] |-> [s#, s, 0] {- DP (Top 1) (Mirror (Input 0)) -}
  [0#, p] |-> [s#, 0] {- DP (Top 2) (Mirror (Input 0)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0#, half] |-> [s#, s, 0] {- DP (Top 5) (Mirror (Input 6)) -}
  [0#, half] |-> [s#, p, s, p, half, s, s, 0] {- DP (Top 0) (Mirror (Input 6)) -}
  [0#, half] |-> [s#, p, half, s, s, 0] {- DP (Top 2) (Mirror (Input 6)) -}
  [0#, half] |-> [s#, 0] {- DP (Top 6) (Mirror (Input 6)) -}
  [0#, half] |-> [0#] {- DP (Top 7) (Mirror (Input 6)) -}
  [0#, rd] |-> [s#, 0] {- DP (Top 7) (Mirror (Input 8)) -}
  [0#, rd] |-> [s#, 0, 0, 0, 0, s, 0] {- DP (Top 2) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#] {- DP (Top 8) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#, s, 0] {- DP (Top 6) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#, s, 0, 0, 0, 0, s, 0] {- DP (Top 1) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#, 0, s, 0] {- DP (Top 5) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#, 0, 0, s, 0] {- DP (Top 4) (Mirror (Input 8)) -}
  [0#, rd] |-> [0#, 0, 0, 0, s, 0] {- DP (Top 3) (Mirror (Input 8)) -}
reason
  (s, 0/1)
  (p, 0/1)
  (g, 1/1)
  (f, 1/1)
  (0, 0/1)
  (half, 1/1)
  (rd, 1/1)
  (j, 1/1)
  (s#, 0/1)
  (0#, 1/1)
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
  [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, s, half] |-> [s#, p, p, half, s] {- DP (Top 1) (Mirror (Input 7)) -}
  [s#, g] |-> [ s# , p , s , p , s , j , s , s , s , p , p ] {- DP (Top 0) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, p, s, j, s, s, s, p, p] {- DP (Top 2) (Mirror (Input 4)) -}
  [s#, g] |-> [s#, j, s, s, s, p, p] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, f] |-> [s#, s, p, g, s, p] {- DP (Top 0) (Mirror (Input 3)) -}
  [s#, f] |-> [s#, p, g, s, p] {- DP (Top 1) (Mirror (Input 3)) -}
  [s#, j] |-> [ s# , p , p , s , p , f , s , p , s , s , p ] {- DP (Top 0) (Mirror (Input 5)) -}
  [s#, j] |-> [s#, p, f, s, p, s, s, p] {- DP (Top 3) (Mirror (Input 5)) -}
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, half] |-> [s#, s, p, p, half, s] {- DP (Top 0) (Mirror (Input 7)) -}
  [s#, f] |-> [s#, s, p, g, s, p] {- DP (Top 0) (Mirror (Input 3)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
  [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  ( s
  , Wk  / 0A  0A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( p
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( g
  , Wk  / 9A 12A 12A - \
        | 9A 12A 12A - |
        | 9A 12A 12A - |
        \ -  -   -   - / )
  ( f
  , Wk  / 12A 15A 15A - \
        | 9A  12A 12A - |
        | 9A  12A 12A - |
        \ -   -   -   - / )
  ( 0
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( half
  , Wk  / 15A 18A 18A - \
        | 15A 18A 18A - |
        | 15A 18A 18A - |
        \ -   -   -   - / )
  ( rd
  , Wk  / 3A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( j
  , Wk  / 9A 12A 12A - \
        | 9A 12A 12A - |
        | 9A 12A 12A - |
        \ -  -   -   - / )
  ( s#
  , Wk  / 3A 4A 5A - \
        | 3A 4A 5A - |
        | 3A 4A 5A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
  [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
  [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
  [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
  [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
  [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
  [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
  [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
  [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
  [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
  [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
reason
  remove un-usable
    SRS
      [0, p] ->= [p, s, s, 0] {- DP Nontop (Mirror (Input 0)) -}
      [s, p, s] ->= [s] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, g] ->= [g] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, f] ->= [f] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, 0] ->= [0] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, half] ->= [half] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, rd] ->= [rd] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, j] ->= [j] {- DP Nontop (Mirror (Input 1)) -}
      [s, p, p] ->= [p] {- DP Nontop (Mirror (Input 2)) -}
      [s, f] ->= [s, s, p, g, s, p] {- DP Nontop (Mirror (Input 3)) -}
      [s, g] ->= [s, p, s, p, s, j, s, s, s, p, p] {- DP Nontop (Mirror (Input 4)) -}
      [s, j] ->= [s, p, p, s, p, f, s, p, s, s, p] {- DP Nontop (Mirror (Input 5)) -}
      [0, half] ->= [s, p, s, p, half, s, s, 0] {- DP Nontop (Mirror (Input 6)) -}
      [s, s, half] ->= [s, s, p, p, half, s] {- DP Nontop (Mirror (Input 7)) -}
      [0, rd] ->= [rd, 0, s, 0, 0, 0, 0, s, 0] {- DP Nontop (Mirror (Input 8)) -}
   property Termination
has value Just True
for SRS
  [0#, p] |-> [0#] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  (p, 1/1)
  (0#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (9,8)\Context\Mirror(16,8)\Deepee(33/16,10)\Weight(10/16,10)\EDG[(2/16,9)\Matrix{\Arctic}{3}(0/16,8)\EDG[],(1/16,9)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F            = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
F            = 2 , num_top_rules = 2 , num_weak_rules = 16 , alphabet_size = 9 , total_length
F            = 123} , self = 50 , parent = Nothing , duration = 0.228524792000 , status
F            = Fail , start = 2025-09-03 13:36:32.609231832 UTC , finish = 2025-09-03
F            13:36:32.837756624 UTC , thread_cap_info = ("ThreadId 59", 0, False)}
F            
| F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F          = False\n , verbose = False}" , input_size = Size { num_rules = 18 , num_strict_rules
| F          = 2 , num_top_rules = 2 , num_weak_rules = 16 , alphabet_size = 9 , total_length
| F          = 123} , self = 53 , parent = Nothing , duration = 0.353827249000 , status
| F          = Fail , start = 2025-09-03 13:36:32.61696896 UTC , finish = 2025-09-03
| F          13:36:32.970796209 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
| F          
| | S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S        = Size { num_rules = 1589 , num_strict_rules = 1217 , num_top_rules = 1217
| | S        , num_weak_rules = 372 , alphabet_size = 65 , total_length = 15140} , self
| | S        = 54 , parent = Nothing , duration = 0.281746348000 , status = Success
| | S        , start = 2025-09-03 13:36:32.695250556 UTC , finish = 2025-09-03 13:36:32.976996904
| | S        UTC , thread_cap_info = ("ThreadId 81", 3, False)}
| | S        
| | | S      Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | | S      epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | | S      = Size { num_rules = 1591 , num_strict_rules = 1219 , num_top_rules = 1219
| | | S      , num_weak_rules = 372 , alphabet_size = 96 , total_length = 14840} , self
| | | S      = 52 , parent = Nothing , duration = 0.259272255000 , status = Success
| | | S      , start = 2025-09-03 13:36:32.696965352 UTC , finish = 2025-09-03 13:36:32.956237607
| | | S      UTC , thread_cap_info = ("ThreadId 82", 3, False)}
| | | S      
| | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | | | F    = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size = 11 , total_length
| | | | F    = 128} , self = 56 , parent = Nothing , duration = 0.257797924000 , status
| | | | F    = Fail , start = 2025-09-03 13:36:32.737261239 UTC , finish = 2025-09-03
| | | | F    13:36:32.995059163 UTC , thread_cap_info = ("ThreadId 93", 0, False)}
| | | | F    
| | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 19 , num_strict_rules
| | | | | F  = 3 , num_top_rules = 3 , num_weak_rules = 16 , alphabet_size = 11 , total_length
| | | | | F  = 128} , self = 55 , parent = Nothing , duration = 0.221458296000 , status
| | | | | F  = Fail , start = 2025-09-03 13:36:32.757425826 UTC , finish = 2025-09-03
| | | | | F  13:36:32.978884122 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | | | | F  
F | | | | |  
S | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | |  = 18 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 16 ,
S | | | | |  alphabet_size = 9 , total_length = 123} , self = 57 , parent = Nothing
S | | | | |  , duration = 0.225628610000 , status = Success , start = 2025-09-03 13:36:32.857005525
S | | | | |  UTC , finish = 2025-09-03 13:36:33.082634135 UTC , thread_cap_info = ("ThreadId
S | | | | |  97", 0, False)}
S | | | | |  
| | | S | |  
| F |   | |  
| E |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 18
| E |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 16 , alphabet_size
| E |   | |  = 9 , total_length = 123} , self = 59 , parent = Nothing , duration = 0.201899277000
| E |   | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:36:32.975093388
| E |   | |  UTC , finish = 2025-09-03 13:36:33.176992665 UTC , thread_cap_info = ("ThreadId
| E |   | |  101", 0, False)}
| E |   | |  
| | S   | |  
| |     | F  
| |     F    
S |          
  E          
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6955, clauses: 25300, status: Unsatisfied, time: 0.295505872s
