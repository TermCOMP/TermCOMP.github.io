last 505 length 1968
last 723 length 3057
CNF 505 vars 1968 clauses
CNF 723 vars 3057 clauses
last 522 length 2061
last 869 length 3464
CNF 869 vars 3464 clauses
CNF 522 vars 2061 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1967, clauses: 7044
last 1967 length 7044
last 3907 length 17737
CNF 1967 vars 7044 clauses
CNF 3907 vars 17737 clauses
last 4442 length 22247
CNF 4442 vars 22247 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9674
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1967, clauses: 7044, status: Satisfied, time: 0.058408327s
last 2607 length 9674
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6380, clauses: 26443
last 6380 length 26443
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29540
last 7140 length 29540
CNF 6380 vars 26443 clauses
CNF 7140 vars 29540 clauses
CNF 2607 vars 9674 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7140, clauses: 29540, status: Satisfied, time: 0.037794019s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2607, clauses: 9674, status: Satisfied, time: 0.172663991s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 5 rules on 3 letters       mirror
SRS with 5 rules on 3 letters       DP
SRS with 3 strict rules and 5 weak rules on 5 letters       weights
SRS with 2 strict rules and 5 weak rules on 4 letters       EDG
SRS with 2 strict rules and 5 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 5 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [c, b] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [b, c] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a] -> [c, b] {- Mirror (Input 0) -}
  [b, b, a] -> [a, a, b, b] {- Mirror (Input 1) -}
  [a, b, c] -> [a] {- Mirror (Input 2) -}
  [b, b, c] -> [b] {- Mirror (Input 2) -}
  [c, b, c] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [b, c] {- Input 0 -}
  [a, b, b] -> [b, b, a, a] {- Input 1 -}
  [c, b, a] -> [a] {- Input 2 -}
  [c, b, b] -> [b] {- Input 2 -}
  [c, b, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#] |-> [c#] {- DP (Top 1) (Input 0) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 3) (Input 1) -}
  [a#, b, b] |-> [a#, a] {- DP (Top 2) (Input 1) -}
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a] ->= [b, c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, a] {- DP Nontop (Input 1) -}
  [c, b, a] ->= [a] {- DP Nontop (Input 2) -}
  [c, b, b] ->= [b] {- DP Nontop (Input 2) -}
  [c, b, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(5,3)\Deepee(3/5,5)\Weight\EDG(2/5,4)\Matrix{\Arctic}{3}(0/5,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
E                Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
E                , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
E                = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
E                , string_implementation = ByteString Plain\n , tracing = False\n , cpf
E                = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
E                = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
E                = 67 , parent = Nothing , duration = 0.390778214000 , status = Except "AsyncCancelled"
E                , start = 2025-09-03 11:30:14.487569859 UTC , finish = 2025-09-03 11:30:14.878348073
E                UTC , thread_cap_info = ("ThreadId 22", 3, False)}
E                
| F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| F              = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F              = 162} , self = 55 , parent = Nothing , duration = 0.212729326000 , status
| F              = Fail , start = 2025-09-03 11:30:14.48912274 UTC , finish = 2025-09-03
| F              11:30:14.701852066 UTC , thread_cap_info = ("ThreadId 68", 0, False)}
| F              
| | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | F            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F            = 162} , self = 57 , parent = Nothing , duration = 0.226133524000 , status
| | F            = Fail , start = 2025-09-03 11:30:14.499815026 UTC , finish = 2025-09-03
| | F            11:30:14.72594855 UTC , thread_cap_info = ("ThreadId 70", 0, False)}
| | F            
| | | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | F          = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size = 5 , total_length
| | | F          = 46} , self = 47 , parent = Nothing , duration = 0.138882018000 , status
| | | F          = Fail , start = 2025-09-03 11:30:14.503264108 UTC , finish = 2025-09-03
| | | F          11:30:14.642146126 UTC , thread_cap_info = ("ThreadId 78", 3, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F        = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size = 4 , total_length
| | | | F        = 31} , self = 52 , parent = Nothing , duration = 0.152171943000 , status
| | | | F        = Fail , start = 2025-09-03 11:30:14.519068141 UTC , finish = 2025-09-03
| | | | F        11:30:14.671240084 UTC , thread_cap_info = ("ThreadId 77", 3, False)}
| | | | F        
| | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S      = 7 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | | S      = 4 , total_length = 31} , self = 59 , parent = Nothing , duration = 0.227570253000
| | | | | S      , status = Success , start = 2025-09-03 11:30:14.592634214 UTC , finish
| | | | | S      = 2025-09-03 11:30:14.820204467 UTC , thread_cap_info = ("ThreadId 88",
| | | | | S      3, False)}
| | | | | S      
| | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | E    , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | E    = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | | | E    = 12} , self = 68 , parent = Nothing , duration = 0.271888518000 , status
| | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 11:30:14.606498057 UTC ,
| | | | | | E    finish = 2025-09-03 11:30:14.878386575 UTC , thread_cap_info = ("ThreadId
| | | | | | E    92", 1, False)}
| | | | | | E    
| | | | | | | S  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S  = 10 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 ,
| | | | | | | S  alphabet_size = 5 , total_length = 46} , self = 69 , parent = Nothing ,
| | | | | | | S  duration = 0.296671892000 , status = Success , start = 2025-09-03 11:30:14.606502972
| | | | | | | S  UTC , finish = 2025-09-03 11:30:14.903174864 UTC , thread_cap_info = ("ThreadId
| | | | | | | S  91", 3, False)}
| | | | | | | S  
| | | F | | | |  
| | |   F | | |  
| | | S   | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | S   | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | S   | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | S   | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | S   | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | S   | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | S   | | |  , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 5 , alphabet_size
| | | S   | | |  = 5 , total_length = 46} , self = 65 , parent = Nothing , duration = 0.199377076000
| | | S   | | |  , status = Success , start = 2025-09-03 11:30:14.676086109 UTC , finish
| | | S   | | |  = 2025-09-03 11:30:14.875463185 UTC , thread_cap_info = ("ThreadId 101",
| | | S   | | |  3, False)}
| | | S   | | |  
| | | | E | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 5 , alphabet_size
| | | | E | | |  = 4 , total_length = 31} , self = 62 , parent = Nothing , duration = 0.169816803000
| | | | E | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 11:30:14.698343224
| | | | E | | |  UTC , finish = 2025-09-03 11:30:14.868160027 UTC , thread_cap_info = ("ThreadId
| | | | E | | |  103", 3, False)}
| | | | E | | |  
| F | | | | | |  
|   F | | | | |  
|     | | S | |  
|     | E   | |  
|     S     | |  
E           | |  
            E |  
              S  
