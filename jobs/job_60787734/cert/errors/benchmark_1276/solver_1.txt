last 796 length 3335
CNF 796 vars 3335 clauses
last 883 length 3700
last 577 length 2471
CNF 883 vars 3700 clauses
last 745 length 3369
CNF 577 vars 2471 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7437
CNF 745 vars 3369 clauses
last 5323 length 25769
last 5233 length 25643
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5505, clauses: 22659
last 2039 length 7437
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1736, clauses: 6309
[Info] pool sizes (success) 50065 seen 26079 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 9800 length 42460
last 5505 length 22659
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5379, clauses: 22260
**************************************************last 1736 length 6309
last 18156 length 84492
CNF 2039 vars 7437 clauses

CNF 9800 vars 42460 clauses
last 5379 length 22260
CNF 1736 vars 6309 clauses
CNF 5505 vars 22659 clauses
summaryCNF 18156 vars 84492 clauses
CNF 5379 vars 22260 clauses

Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7437, status: Unsatisfied, time: 0.63782608s
**************************************************
SRS with 2 rules on 3 letters       looping derivation
from
  [b, a, b, a, b, a, b, a, b, c]
to
  [b, c, c, b, c, c, b, b, c, c, b, c, c, b, a, b, a, b, a, b, a, b, c, b, b, b]
via 24 steps

**************************************************
proof
**************************************************
property Termination
has value Just False
for SRS
  [a] -> [b] {- Input 0 -}
  [b, a, b, c] -> [b, c, c, a, a, a] {- Input 1 -}
reason
  Nontermination
    Derive   { from = [b, a, b, a, b, a, b, a, b, c], via = [(Step   { rule = 1, position = 6}, [b, a, b, a, b, a, b, c, c, a, a, a]), (Step   { rule = 0, position = 11}, [b, a, b, a, b, a, b, c, c, a, a, b]), (Step   { rule = 0, position = 10}, [b, a, b, a, b, a, b, c, c, a, b, b]), (Step   { rule = 0, position = 9}, [b, a, b, a, b, a, b, c, c, b, b, b]), (Step   { rule = 1, position = 4}, [b, a, b, a, b, c, c, a, a, a, c, b, b, b]), (Step   { rule = 0, position = 9}, [b, a, b, a, b, c, c, a, a, b, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, a, b, a, b, c, c, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 2}, [b, a, b, c, c, a, a, a, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, a, b, c, c, a, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 5}, [b, a, b, c, c, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 0}, [b, c, c, a, a, a, c, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 5}, [b, c, c, a, a, b, c, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 3}, [b, c, c, b, a, b, c, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 3}, [b, c, c, b, c, c, a, a, a, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 7}, [b, c, c, b, c, c, a, b, a, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 6}, [b, c, c, b, c, c, b, b, a, b, a, b, c, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 9}, [b, c, c, b, c, c, b, b, a, b, c, c, a, a, a, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 13}, [b, c, c, b, c, c, b, b, a, b, c, c, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 7}, [b, c, c, b, c, c, b, b, c, c, a, a, a, c, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 12}, [b, c, c, b, c, c, b, b, c, c, a, a, b, c, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 10}, [b, c, c, b, c, c, b, b, c, c, b, a, b, c, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 1, position = 10}, [b, c, c, b, c, c, b, b, c, c, b, c, c, a, a, a, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 15}, [b, c, c, b, c, c, b, b, c, c, b, c, c, a, a, b, a, b, a, b, a, b, c, b, b, b]), (Step   { rule = 0, position = 13}, [b, c, c, b, c, c, b, b, c, c, b, c, c, b, a, b, a, b, a, b, a, b, c, b, b, b])], to = [b, c, c, b, c, c, b, b, c, c, b, c, c, b, a, b, a, b, a, b, a, b, c, b, b, b]}

**************************************************
skeleton: (2,3)\Loop{24}[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F      = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F      = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
F      = 25} , self = 59 , parent = Nothing , duration = 0.230713670000 , status
F      = Fail , start = 2025-09-03 11:24:16.892056001 UTC , finish = 2025-09-03
F      11:24:17.122769671 UTC , thread_cap_info = ("ThreadId 84", 0, False)}
F      
| F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F    = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F    = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| F    = 25} , self = 60 , parent = Nothing , duration = 0.536875471000 , status
| F    = Fail , start = 2025-09-03 11:24:16.904744963 UTC , finish = 2025-09-03
| F    11:24:17.441620434 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| F    
| | S  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | S  , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | S  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | S  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | S  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | S  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | S  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | S  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | S  = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | S  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | S  = 12} , self = 61 , parent = Nothing , duration = 0.658718662000 , status
| | S  = Success , start = 2025-09-03 11:24:16.906392356 UTC , finish = 2025-09-03
| | S  11:24:17.565111018 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| | S  
F | |  
  F |  
    S  
