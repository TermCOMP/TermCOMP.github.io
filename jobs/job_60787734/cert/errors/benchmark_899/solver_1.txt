last 653 length 2724
CNF 653 vars 2724 clauses
last 800 length 3442
last 800 length 3442
last 1908 length 8242
CNF 800 vars 3442 clauses
last 653 length 2724
CNF 800 vars 3442 clauses
last 2052 length 8885
CNF 1908 vars 8242 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419
CNF 653 vars 2724 clauses
last 3144 length 13748
CNF 2052 vars 8885 clauses
last 3144 length 13748
last 3400 length 15238
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419
last 3400 length 15238
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6810, clauses: 28427
last 2039 length 7419
CNF 3144 vars 13748 clauses
CNF 3144 vars 13748 clauses
CNF 3400 vars 15238 clauses
last 2039 length 7419
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6810, clauses: 28427
CNF 3400 vars 15238 clauses
last 6810 length 28427
CNF 2039 vars 7419 clauses
CNF 2039 vars 7419 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5184, clauses: 19526
last 6810 length 28427
CNF 6810 vars 28427 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5184, clauses: 19526
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419, status: Satisfied, time: 0.342887758s
last 5184 length 19526
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2039, clauses: 7419, status: Satisfied, time: 0.398487089s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18993, clauses: 80080
CNF 6810 vars 28427 clauses
last 5184 length 19526
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 18993, clauses: 80080
last 18993 length 80080
last 18993 length 80080
**************************************************
summary
**************************************************
SRS with 2 rules on 2 letters       mirror
SRS with 2 rules on 2 letters       DP
SRS with 7 strict rules and 2 weak rules on 4 letters       weights
SRS with 2 strict rules and 2 weak rules on 4 letters       EDG
SRS with 2 strict rules and 2 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 2 weak rules on 4 letters       weights
SRS with 0 strict rules and 2 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, a, a] -> [b, a, a, b] {- Input 0 -}
  [b, a, b] -> [a, b, a] {- Input 1 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a, a, a] -> [b, a, a, b] {- Mirror (Input 0) -}
CNF 5184 vars 19526 clauses
CNF 5184 vars 19526 clauses
  [b, a, b] -> [a, b, a] {- Mirror (Input 1) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [a#, a, b] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, a, a, a] |-> [a#, b] {- DP (Top 2) (Mirror (Input 0)) -}
  [a#, a, a, a] |-> [b#] {- DP (Top 3) (Mirror (Input 0)) -}
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, b] |-> [b#, a] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, a, a] |-> [b#, a, a, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  ( a
  , Wk  / 0A 3A 3A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 0A 3A 3A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 6A 7A 8A - \
        | 6A 7A 8A - |
        | 6A 7A 8A - |
        \ -  -  -  - / )
  ( b#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [b#, a, b] |-> [a#, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a, a, a] ->= [b, a, a, b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, b] ->= [a, b, a] {- DP Nontop (Mirror (Input 1)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(2,2)\Deepee(7/2,4)\Weight\EDG(2/2,4)\Matrix{\Arctic}{3}(1/2,4)\Weight(0/2,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply CNF 18993 vars 80080 clauses
(tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))CNF 18993 vars 80080 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5184, clauses: 19526, status: Satisfied, time: 0.065563676s
**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 2
  max duration 0.659179362000
  min duration 0.535980322000
  total durat. 1.195159684000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.689112995000
  min duration 0.617783737000
  total durat. 1.306896732000
**************************************************
F                        Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                        , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                        = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                        , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                        = True}" , input_size = Size { num_rules = 2 , num_strict_rules = 2 , num_top_rules
F                        = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 14} , self
F                        = 59 , parent = Nothing , duration = 0.111058134000 , status = Fail , start
F                        = 2025-09-03 13:26:55.191979241 UTC , finish = 2025-09-03 13:26:55.303037375
F                        UTC , thread_cap_info = ("ThreadId 22", 2, False)}
F                        
| F                      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                      = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F                      = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                      = 72} , self = 60 , parent = Nothing , duration = 0.208217323000 , status
| F                      = Fail , start = 2025-09-03 13:26:55.196870599 UTC , finish = 2025-09-03
| F                      13:26:55.405087922 UTC , thread_cap_info = ("ThreadId 81", 1, False)}
| F                      
| | F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | F                    = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | F                    = 108} , self = 63 , parent = Nothing , duration = 0.271941038000 , status
| | F                    = Fail , start = 2025-09-03 13:26:55.202981368 UTC , finish = 2025-09-03
| | F                    13:26:55.474922406 UTC , thread_cap_info = ("ThreadId 94", 0, False)}
| | F                    
| | | F                  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | F                  = 8 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | F                  = 72} , self = 62 , parent = Nothing , duration = 0.204082891000 , status
| | | F                  = Fail , start = 2025-09-03 13:26:55.215994332 UTC , finish = 2025-09-03
| | | F                  13:26:55.420077223 UTC , thread_cap_info = ("ThreadId 83", 1, False)}
| | | F                  
| | | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F                = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | F                = 108} , self = 65 , parent = Nothing , duration = 0.308054283000 , status
| | | | F                = Fail , start = 2025-09-03 13:26:55.216003351 UTC , finish = 2025-09-03
| | | | F                13:26:55.524057634 UTC , thread_cap_info = ("ThreadId 95", 0, False)}
| | | | F                
| | | | | F              Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | | | | F              = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size = 4 , total_length
| | | | | F              = 28} , self = 61 , parent = Nothing , duration = 0.194951446000 , status
| | | | | F              = Fail , start = 2025-09-03 13:26:55.22172003 UTC , finish = 2025-09-03
| | | | | F              13:26:55.416671476 UTC , thread_cap_info = ("ThreadId 99", 3, False)}
| | | | | F              
| | | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | F            = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | F            = 108} , self = 64 , parent = Nothing , duration = 0.285780684000 , status
| | | | | | F            = Fail , start = 2025-09-03 13:26:55.236480116 UTC , finish = 2025-09-03
| | | | | | F            13:26:55.5222608 UTC , thread_cap_info = ("ThreadId 96", 0, False)}
| | | | | | F            
| | | | | | | S          Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S          [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S          , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S          = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | | | S          = 4 , total_length = 28} , self = 67 , parent = Nothing , duration = 0.689112995000
| | | | | | | S          , status = Success , start = 2025-09-03 13:26:55.247039337 UTC , finish
| | | | | | | S          = 2025-09-03 13:26:55.936152332 UTC , thread_cap_info = ("ThreadId 103",
| | | | | | | S          3, False)}
| | | | | | | S          
| | | | | | | | E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | E        , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | E        = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | E        , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | E        max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | E        [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | E        string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | E        , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | E        = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | | | | | E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | E        = 14} , self = 75 , parent = Nothing , duration = 0.700022263000 , status
| | | | | | | | E        = Except "AsyncCancelled" , start = 2025-09-03 13:26:55.255445021 UTC ,
| | | | | | | | E        finish = 2025-09-03 13:26:55.955467284 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E        104", 2, False)}
| | | | | | | | E        
| | | | | | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | | | | | | F      = 4 , num_top_rules = 4 , num_weak_rules = 8 , alphabet_size = 6 , total_length
| | | | | | | | | F      = 108} , self = 66 , parent = Nothing , duration = 0.311281628000 , status
| | | | | | | | | F      = Fail , start = 2025-09-03 13:26:55.274238827 UTC , finish = 2025-09-03
| | | | | | | | | F      13:26:55.585520455 UTC , thread_cap_info = ("ThreadId 105", 0, False)}
| | | | | | | | | F      
| | | | | | | | | | E    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | | | | | | | | | E    , closure = Backward\n , start_strict_only = True\n , max_closure_length
| | | | | | | | | | E    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | | | | | | | | | E    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | | | | | | | | | E    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | | | | | | | | | E    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | | | | | | | | | E    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | | | | | | | | | E    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | | | | | | | | | E    = True})" , input_size = Size { num_rules = 2 , num_strict_rules = 2 ,
| | | | | | | | | | E    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
| | | | | | | | | | E    = 14} , self = 76 , parent = Nothing , duration = 0.678938193000 , status
| | | | | | | | | | E    = Except "AsyncCancelled" , start = 2025-09-03 13:26:55.276688064 UTC ,
| | | | | | | | | | E    finish = 2025-09-03 13:26:55.955626257 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | E    106", 2, False)}
| | | | | | | | | | E    
| | | | | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | | | | | | | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| | | | | | | | | | | E  = 4 , total_length = 28} , self = 74 , parent = Nothing , duration = 0.659179362000
| | | | | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:26:55.295933483
| | | | | | | | | | | E  UTC , finish = 2025-09-03 13:26:55.955112845 UTC , thread_cap_info = ("ThreadId
| | | | | | | | | | | E  109", 3, False)}
| | | | | | | | | | | E  
F | | | | | | | | | | |  
S | | | | | | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S | | | | | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S | | | | | | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S | | | | | | | | | | |  = 4 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
S | | | | | | | | | | |  = 4 , total_length = 28} , self = 69 , parent = Nothing , duration = 0.617783737000
S | | | | | | | | | | |  , status = Success , start = 2025-09-03 13:26:55.318871705 UTC , finish
S | | | | | | | | | | |  = 2025-09-03 13:26:55.936655442 UTC , thread_cap_info = ("ThreadId 110",
S | | | | | | | | | | |  3, False)}
S | | | | | | | | | | |  
| F | | | | | | | | | |  
|   | | | F | | | | | |  
| E | | |   | | | | | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| E | | |   | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | |   | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | |   | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | |   | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | |   | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E | | |   | | | | | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 2 , alphabet_size
| E | | |   | | | | | |  = 4 , total_length = 28} , self = 71 , parent = Nothing , duration = 0.535980322000
| E | | |   | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-03 13:26:55.416693975
| E | | |   | | | | | |  UTC , finish = 2025-09-03 13:26:55.952674297 UTC , thread_cap_info = ("ThreadId
| E | | |   | | | | | |  113", 3, False)}
| E | | |   | | | | | |  
| | | F |   | | | | | |  
| | F   |   | | | | | |  
| |     |   F | | | | |  
| |     F     | | | | |  
| |           | | F | |  
| |           S |   | |  
S |             |   | |  
  E             |   | |  
                |   | E  
                E   |    
                    E    
