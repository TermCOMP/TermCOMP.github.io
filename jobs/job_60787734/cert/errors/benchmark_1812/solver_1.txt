last 1412 length 6955
last 1557 length 7240
last 1960 length 10244
CNF 1557 vars 7240 clauses
CNF 1412 vars 6955 clauses
CNF 1960 vars 10244 clauses
last 3123 length 15716
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1709, clauses: 6420
CNF 3123 vars 15716 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5342, clauses: 22167
last 1709 length 6420
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1712, clauses: 6600
last 1712 length 6600
last 5342 length 22167
CNF 1709 vars 6420 clauses
CNF 5342 vars 22167 clauses
CNF 1712 vars 6600 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5339, clauses: 22174
last 5339 length 22174
CNF 5339 vars 22174 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5342, clauses: 22167, status: Satisfied, time: 0.11899139s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5339, clauses: 22174, status: Satisfied, time: 0.053586793s
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
**************************************************
summary
**************************************************
SRS with 1 rules on 3 letters       mirror
SRS with 1 rules on 3 letters       DP
SRS with 4 strict rules and 1 weak rules on 4 letters       EDG
SRS with 2 strict rules and 1 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 1 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [b, a, b, a, c, b, a] -> [a, b, a, c, b, b, a, b, a, c] {- Input 0 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, b, c, a, b, a, b] -> [c, a, b, a, b, b, c, a, b, a] {- Mirror (Input 0) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, b, c, a, b, a, b] ->= [ c , a , b , a , b , b , c , a , b , a ] {- DP Nontop (Mirror (Input 0)) -}
  [a#, b, c, a, b, a, b] |-> [a#] {- DP (Top 9) (Mirror (Input 0)) -}
  [a#, b, c, a, b, a, b] |-> [a#, b, a] {- DP (Top 7) (Mirror (Input 0)) -}
  [a#, b, c, a, b, a, b] |-> [ a# , b , a , b , b , c , a , b , a ] {- DP (Top 1) (Mirror (Input 0)) -}
  [a#, b, c, a, b, a, b] |-> [ a# , b , b , c , a , b , a ] {- DP (Top 3) (Mirror (Input 0)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, c, a, b, a, b] |-> [a#] {- DP (Top 9) (Mirror (Input 0)) -}
  [a#, b, c, a, b, a, b] |-> [a#, b, a] {- DP (Top 7) (Mirror (Input 0)) -}
  [a, b, c, a, b, a, b] ->= [ c , a , b , a , b , b , c , a , b , a ] {- DP Nontop (Mirror (Input 0)) -}
reason
  ( a
  , Wk  / 0A -   0A \
        | -  -2A -  |
        \ -  -   0A / )
  ( b
  , Wk  / 1A - 1A \
        | 2A - -  |
        \ -  - 0A / )
  ( c
  , Wk  / -2A 0A 0A \
        | -   -  -  |
        \ -   -  0A / )
  ( a#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a, b, c, a, b, a, b] ->= [ c , a , b , a , b , b , c , a , b , a ] {- DP Nontop (Mirror (Input 0)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(1,3)\Deepee(4/1,4)\EDG(2/1,4)\Matrix{\ArcticBZ}{3}(0/1,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F        = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
F        = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
F        = 35} , self = 50 , parent = Nothing , duration = 0.158548454000 , status
F        = Fail , start = 2025-09-03 13:38:08.508531023 UTC , finish = 2025-09-03
F        13:38:08.667079477 UTC , thread_cap_info = ("ThreadId 59", 0, False)}
F        
| F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F      = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| F      = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| F      = 35} , self = 51 , parent = Nothing , duration = 0.138191965000 , status
| F      = Fail , start = 2025-09-03 13:38:08.528935999 UTC , finish = 2025-09-03
| F      13:38:08.667127964 UTC , thread_cap_info = ("ThreadId 60", 0, False)}
| F      
| | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F    = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | F    = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | F    = 42} , self = 57 , parent = Nothing , duration = 0.205042198000 , status
| | F    = Fail , start = 2025-09-03 13:38:08.564422289 UTC , finish = 2025-09-03
| | F    13:38:08.769464487 UTC , thread_cap_info = ("ThreadId 82", 0, False)}
| | F    
| | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 3 , num_strict_rules
| | | F  = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size = 4 , total_length
| | | F  = 42} , self = 56 , parent = Nothing , duration = 0.181759731000 , status
| | | F  = Fail , start = 2025-09-03 13:38:08.566662315 UTC , finish = 2025-09-03
| | | F  13:38:08.748422046 UTC , thread_cap_info = ("ThreadId 83", 0, False)}
| | | F  
F | | |  
  F | |  
F   | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
F   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
F   | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
F   | |  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
F   | |  = 4 , total_length = 35} , self = 63 , parent = Nothing , duration = 0.246599065000
F   | |  , status = Fail , start = 2025-09-03 13:38:08.667145249 UTC , finish =
F   | |  2025-09-03 13:38:08.913744314 UTC , thread_cap_info = ("ThreadId 99", 0,
F   | |  False)}
F   | |  
| S | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| S | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| S | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| S | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| S | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| S | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| S | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| S | |  = 4 , total_length = 35} , self = 60 , parent = Nothing , duration = 0.212866947000
| S | |  , status = Success , start = 2025-09-03 13:38:08.695339435 UTC , finish
| S | |  = 2025-09-03 13:38:08.908206382 UTC , thread_cap_info = ("ThreadId 101",
| S | |  0, False)}
| S | |  
| | | F  
| | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F  = 3 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | | F  = 4 , total_length = 42} , self = 68 , parent = Nothing , duration = 0.175543960000
| | | F  , status = Fail , start = 2025-09-03 13:38:08.749188611 UTC , finish =
| | | F  2025-09-03 13:38:08.924732571 UTC , thread_cap_info = ("ThreadId 105",
| | | F  0, False)}
| | | F  
| | F |  
| | S |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 3
| | S |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 1 , alphabet_size
| | S |  = 4 , total_length = 42} , self = 65 , parent = Nothing , duration = 0.155077046000
| | S |  , status = Success , start = 2025-09-03 13:38:08.769485128 UTC , finish
| | S |  = 2025-09-03 13:38:08.924562174 UTC , thread_cap_info = ("ThreadId 109",
| | S |  0, False)}
| | S |  
| S | |  
F   | |  
    S |  
      F  
