last 1005 length 4515
last 892 length 3676
CNF 1005 vars 4515 clauses
last 990 length 4466
last 1109 length 5430
CNF 892 vars 3676 clauses
CNF 1109 vars 5430 clauses
CNF 990 vars 4466 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3110, clauses: 11262
last 3110 length 11262
CNF 3110 vars 11262 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8946, clauses: 36972
last 8946 length 36972
CNF 8946 vars 36972 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2714, clauses: 9900
last 2714 length 9900
CNF 2714 vars 9900 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3110, clauses: 11262, status: Unsatisfied, time: 0.323051887s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2714, clauses: 9900, status: Satisfied, time: 0.200472089s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8526, clauses: 35317
last 8526 length 35317
CNF 8526 vars 35317 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5515, clauses: 22068
last 5515 length 22068
CNF 5515 vars 22068 clauses
last 1004 length 4893
CNF 1004 vars 4893 clauses
last 792 length 3666
CNF 792 vars 3666 clauses
last 14056 length 70617
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2503, clauses: 8953
last 2503 length 8953
CNF 2503 vars 8953 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8188, clauses: 33891
last 8188 length 33891
CNF 14056 vars 70617 clauses
last 14875 length 94108
CNF 8188 vars 33891 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2503, clauses: 8953, status: Unsatisfied, time: 0.242420741s
CNF 14875 vars 94108 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8188, clauses: 33891, status: Satisfied, time: 0.198741207s
**************************************************
summary
**************************************************
SRS with 4 rules on 4 letters       mirror
SRS with 4 rules on 4 letters       DP
SRS with 12 strict rules and 4 weak rules on 8 letters       weights
SRS with 3 strict rules and 4 weak rules on 6 letters       EDG
SRS with 3 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 2 strict rules and 4 weak rules on 6 letters       EDG
SRS with 2 strict rules and 4 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 4 weak rules on 6 letters       weights
SRS with 0 strict rules and 4 weak rules on 4 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [d, a] -> [b, d] {- Input 0 -}
  [b] -> [a, a, a] {- Input 1 -}
  [c, d, c] -> [a, d] {- Input 2 -}
  [b, d, d] -> [c, c, d, d, c] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, d] -> [d, b] {- Mirror (Input 0) -}
  [b] -> [a, a, a] {- Mirror (Input 1) -}
  [c, d, c] -> [d, a] {- Mirror (Input 2) -}
  [d, d, b] -> [c, d, d, c, c] {- Mirror (Input 3) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [d#, d, b] |-> [d#, d, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [d#, d, b] |-> [d#, c, c] {- DP (Top 2) (Mirror (Input 3)) -}
  [d#, d, b] |-> [c#] {- DP (Top 4) (Mirror (Input 3)) -}
  [d#, d, b] |-> [c#, d, d, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [d#, d, b] |-> [c#, c] {- DP (Top 3) (Mirror (Input 3)) -}
  [a#, d] |-> [d#, b] {- DP (Top 0) (Mirror (Input 0)) -}
  [a#, d] |-> [b#] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#] |-> [a#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#] |-> [a#, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#] |-> [a#, a, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, d, c] |-> [a#] {- DP (Top 1) (Mirror (Input 2)) -}
reason
  (d, 2/1)
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (d#, 2/1)
  (a#, 1/1)
  (b#, 2/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
  [d#, d, b] |-> [d#, d, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [d#, d, b] |-> [c#, d, d, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [d#, d, b] |-> [d#, d, c, c] {- DP (Top 1) (Mirror (Input 3)) -}
  [d#, d, b] |-> [c#, d, d, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( d
  , Wk  / 0A  0A  0A  - \
        | -3A -3A 0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( a
  , Wk  / 0A  0A  0A  - \
        | 0A  0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( b
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  0A  - \
        | -3A 0A  0A  - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( d#
  , Wk  / 6A 7A 9A - \
        | 6A 7A 9A - |
        | 6A 7A 9A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [d#, d, b] |-> [c#, d, d, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [d#, d, b] |-> [c#, d, d, c, c] {- DP (Top 0) (Mirror (Input 3)) -}
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  ( d
  , Wk  / -   0A 0A \
        | -1A -  -  |
        \ -   -  0A / )
  ( a
  , Wk  / - - 1A \
        | - - 1A |
        \ - - 0A / )
  ( b
  , Wk  / - - 2A \
        | - - 1A |
        \ - - 0A / )
  ( c
  , Wk  / -   - 1A \
        | -2A - 0A |
        \ -   - 0A / )
  ( d#
  , Wk  / - - 2A \
        | - - -  |
        \ - - 0A / )
  ( c#
  , Wk  / - 2A 1A \
        | - -  -  |
        \ - -  0A / )
   property Termination
has value Just True
for SRS
  [c#, d, c] |-> [d#, a] {- DP (Top 0) (Mirror (Input 2)) -}
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  (d, 1/1)
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (d#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a, d] ->= [d, b] {- DP Nontop (Mirror (Input 0)) -}
  [b] ->= [a, a, a] {- DP Nontop (Mirror (Input 1)) -}
  [c, d, c] ->= [d, a] {- DP Nontop (Mirror (Input 2)) -}
  [d, d, b] ->= [c, d, d, c, c] {- DP Nontop (Mirror (Input 3)) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,4)\Deepee(12/4,8)\Weight\EDG(3/4,6)\Matrix{\Arctic}{3}\EDG(2/4,6)\Matrix{\ArcticBZ}{3}(1/4,6)\Weight(0/4,4)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.095875962000
  min duration 0.040652624000
  total durat. 1.366380480000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 64
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 16
      , total_length = 464}
    , self = 71
    , parent = Nothing
    , duration = 1.095875962000
    , status = Fail
    , start = 2025-09-03 13:30:53.791364826 UTC
    , finish = 2025-09-03 13:30:54.887240788 UTC
    , thread_cap_info = ("ThreadId 59", 3, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 4
  max duration 1.417812733000
  min duration 0.036038143000
  total durat. 1.628308263000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 64
      , num_strict_rules = 64
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 16
      , total_length = 464}
    , self = 78
    , parent = Nothing
    , duration = 1.417812733000
    , status = Fail
    , start = 2025-09-03 13:30:53.807728904 UTC
    , finish = 2025-09-03 13:30:55.225541637 UTC
    , thread_cap_info = ("ThreadId 79", 3, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.315906353000
  min duration 1.315906353000
  total durat. 1.315906353000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = Nothing\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = Nothing\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 4
      , total_length = 21}
    , self = 79
    , parent = Nothing
    , duration = 1.315906353000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 13:30:53.950080053 UTC
    , finish = 2025-09-03 13:30:55.265986406 UTC
    , thread_cap_info = ("ThreadId 101", 0, False)}
**************************************************
F              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F              , closure = Forward\n , start_strict_only = True\n , max_closure_length
F              = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F              Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F              8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F              = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F              ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F              1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F              = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
F              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F              = 21} , self = 52 , parent = Nothing , duration = 0.169399902000 , status
F              = Fail , start = 2025-09-03 13:30:53.780670038 UTC , finish = 2025-09-03
F              13:30:53.95006994 UTC , thread_cap_info = ("ThreadId 45", 0, False)}
F              
| F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F            = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| F            = 64 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 16 , total_length
| F            = 464} , self = 71 , parent = Nothing , duration = 1.095875962000 , status
| F            = Fail , start = 2025-09-03 13:30:53.791364826 UTC , finish = 2025-09-03
| F            13:30:54.887240788 UTC , thread_cap_info = ("ThreadId 59", 3, False)}
| F            
| | F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F          = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F          = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | F          = 41} , self = 51 , parent = Nothing , duration = 0.149115248000 , status
| | F          = Fail , start = 2025-09-03 13:30:53.796725617 UTC , finish = 2025-09-03
| | F          13:30:53.945840865 UTC , thread_cap_info = ("ThreadId 73", 2, False)}
| | F          
| | | F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 64 , num_strict_rules
| | | F        = 64 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 16 , total_length
| | | F        = 464} , self = 78 , parent = Nothing , duration = 1.417812733000 , status
| | | F        = Fail , start = 2025-09-03 13:30:53.807728904 UTC , finish = 2025-09-03
| | | F        13:30:55.225541637 UTC , thread_cap_info = ("ThreadId 79", 3, False)}
| | | F        
| | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | | F      = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size = 6 , total_length
| | | | F      = 41} , self = 48 , parent = Nothing , duration = 0.113944510000 , status
| | | | F      = Fail , start = 2025-09-03 13:30:53.81324881 UTC , finish = 2025-09-03
| | | | F      13:30:53.92719332 UTC , thread_cap_info = ("ThreadId 76", 2, False)}
| | | | F      
| | | | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | F    = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | | | F    = 7 , total_length = 45} , self = 57 , parent = Nothing , duration = 0.435136839000
| | | | | F    , status = Fail , start = 2025-09-03 13:30:53.842693875 UTC , finish =
| | | | | F    2025-09-03 13:30:54.277830714 UTC , thread_cap_info = ("ThreadId 88", 2,
| | | | | F    False)}
| | | | | F    
| | | | F |    
| | | | S |    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | S |    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | S |    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | S |    = 7 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | | | S |    = 6 , total_length = 41} , self = 59 , parent = Nothing , duration = 0.349435185000
| | | | S |    , status = Success , start = 2025-09-03 13:30:53.945817428 UTC , finish
| | | | S |    = 2025-09-03 13:30:54.295252613 UTC , thread_cap_info = ("ThreadId 100",
| | | | S |    2, False)}
| | | | S |    
| | F | | |    
F |   | | |    
E |   | | |    Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E |   | | |    , closure = Forward\n , start_strict_only = True\n , max_closure_length
E |   | | |    = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E |   | | |    , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E |   | | |    max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E |   | | |    [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E |   | | |    string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E |   | | |    , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E |   | | |    = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E |   | | |    num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
E |   | | |    = 21} , self = 79 , parent = Nothing , duration = 1.315906353000 , status
E |   | | |    = Except "AsyncCancelled" , start = 2025-09-03 13:30:53.950080053 UTC ,
E |   | | |    finish = 2025-09-03 13:30:55.265986406 UTC , thread_cap_info = ("ThreadId
E |   | | |    101", 0, False)}
E |   | | |    
| | S | | |    Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| | S | | |    epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| | S | | |    = Size { num_rules = 320 , num_strict_rules = 256 , num_top_rules = 256
| | S | | |    , num_weak_rules = 64 , alphabet_size = 32 , total_length = 2000} , self
| | S | | |    = 54 , parent = Nothing , duration = 0.112248822000 , status = Success
| | S | | |    , start = 2025-09-03 13:30:53.954261819 UTC , finish = 2025-09-03 13:30:54.066510641
| | S | | |    UTC , thread_cap_info = ("ThreadId 99", 1, False)}
| | S | | |    
| | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | | | E  , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 4 , alphabet_size
| | | | | | E  = 6 , total_length = 41} , self = 62 , parent = Nothing , duration = 0.365776480000
| | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 13:30:54.001789703
| | | | | | E  UTC , finish = 2025-09-03 13:30:54.367566183 UTC , thread_cap_info = ("ThreadId
| | | | | | E  103", 2, False)}
| | | | | | E  
| | S | | | |  
| | S | | | |  Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S | | | |  verbose = False}" , input_size = Size { num_rules = 101 , num_strict_rules
| | S | | | |  = 37 , num_top_rules = 37 , num_weak_rules = 64 , alphabet_size = 25 ,
| | S | | | |  total_length = 775} , self = 61 , parent = Nothing , duration = 0.261020602000
| | S | | | |  , status = Success , start = 2025-09-03 13:30:54.087579741 UTC , finish
| | S | | | |  = 2025-09-03 13:30:54.348600343 UTC , thread_cap_info = ("ThreadId 96",
| | S | | | |  1, False)}
| | S | | | |  
| | | | | F |  
| | | | S   |  
| | S |     |  
| |   |     E  
| | F |        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F |        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F |        = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | F |        = 6 , total_length = 34} , self = 72 , parent = Nothing , duration = 0.415751311000
| | F |        , status = Fail , start = 2025-09-03 13:30:54.475235828 UTC , finish =
| | F |        2025-09-03 13:30:54.890987139 UTC , thread_cap_info = ("ThreadId 122",
| | F |        2, False)}
| | F |        
| | | | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | S      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | S      = 6 , total_length = 34} , self = 73 , parent = Nothing , duration = 0.494769063000
| | | | S      , status = Success , start = 2025-09-03 13:30:54.505365019 UTC , finish
| | | | S      = 2025-09-03 13:30:55.000134082 UTC , thread_cap_info = ("ThreadId 124",
| | | | S      2, False)}
| | | | S      
| F | | |      
|   F | |      
| E   | |      Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E   | |      = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E   | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E   | |      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E   | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E   | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| E   | |      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| E   | |      = 6 , total_length = 34} , self = 75 , parent = Nothing , duration = 0.304239072000
| E   | |      , status = Except "AsyncCancelled" , start = 2025-09-03 13:30:54.914414002
| E   | |      UTC , finish = 2025-09-03 13:30:55.218653074 UTC , thread_cap_info = ("ThreadId
| E   | |      131", 2, False)}
| E   | |      
| |   | S      
| E   |        
|     F        
E              
