last 3251 length 13455
CNF 3251 vars 13455 clauses
last 3575 length 15330
CNF 3575 vars 15330 clauses
last 282 length 1059
last 445 length 1722
last 329 length 1269
last 427 length 1674
CNF 329 vars 1269 clauses
CNF 445 vars 1722 clauses
CNF 427 vars 1674 clauses
CNF 282 vars 1059 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2018, clauses: 7098
last 2018 length 7098
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2531, clauses: 9051
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5249, clauses: 21467
CNF 2018 vars 7098 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5960, clauses: 24375
last 2531 length 9051
last 5249 length 21467
last 5960 length 24375
CNF 2531 vars 9051 clauses
CNF 5960 vars 24375 clauses
CNF 5249 vars 21467 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2018, clauses: 7098, status: Satisfied, time: 0.146933104s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2531, clauses: 9051, status: Satisfied, time: 0.027850527s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5960, clauses: 24375, status: Satisfied, time: 0.041851562s
last 291 length 1129
last 212 length 797
CNF 291 vars 1129 clauses
last 258 length 1010
last 186 length 705
CNF 258 vars 1010 clauses
CNF 186 vars 705 clauses
CNF 212 vars 797 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1713, clauses: 5936
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1421, clauses: 4920
last 1713 length 5936
last 1421 length 4920
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4865, clauses: 19881
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4490, clauses: 18401
CNF 1713 vars 5936 clauses
last 4865 length 19881
last 4490 length 18401
CNF 1421 vars 4920 clauses
last 5770 length 22464
last 9085 length 37205
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1713, clauses: 5936, status: Satisfied, time: 0.168623204s
last 7484 length 29953
CNF 4865 vars 19881 clauses
CNF 4490 vars 18401 clauses
CNF 7484 vars 29953 clauses
CNF 5770 vars 22464 clauses
CNF 9085 vars 37205 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1421, clauses: 4920, status: Unsatisfied, time: 0.122158102s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       DP
SRS with 6 strict rules and 3 weak rules on 6 letters       EDG
SRS with 6 strict rules and 3 weak rules on 6 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 5 strict rules and 3 weak rules on 6 letters       weights
SRS with 3 strict rules and 3 weak rules on 6 letters       EDG
2 sub-proofs
  1 SRS with 2 strict rules and 3 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
last 12269 length 49408
  SRS with 0 strict rules and 3 weak rules on 3 letters       EDG

  2 SRS with 1 strict rules and 3 weak rules on 4 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a] -> [b] {- Input 0 -}
  [a, b] -> [c, a] {- Input 1 -}
  [b, c] -> [c, b, a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [b] {- Mirror (Input 0) -}
  [b, a] -> [a, c] {- Mirror (Input 1) -}
  [c, b] -> [a, b, c] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a] |-> [c#] {- DP (Top 1) (Mirror (Input 1)) -}
  [c#, b] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A 0A  1A  \
        | 1A -1A -1A |
        \ -  -   0A  / )
  ( b
  , Wk  / 1A 0A 1A \
        | -  0A 1A |
        \ -  -  0A / )
  ( c
  , Wk  / 0A -2A -  \
        | 1A -2A 1A |
        \ -  -   0A / )
  ( a#
  , Wk  / - 0A 1A \
        | - -  -  |
        \ - -  0A / )
  ( b#
  , Wk  / 1A - -  \
        | -  - -  |
        \ -  - 0A / )
  ( c#
  , Wk  / 0A - 1A \
        | -  - -  |
        \ -  - 0A / )
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [a#, b, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, b] |-> [b#, c] {- DP (Top 1) (Mirror (Input 2)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 0/1)
  (b#, 0/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a] |-> [b#] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, a] |-> [a#, c] {- DP (Top 0) (Mirror (Input 1)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 3A 3A 6A - \
        | 0A 0A 3A - |
        | 0A 0A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | 0A  0A  3A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 20A 20A 23A - \
        | 20A 20A 23A - |
        | 20A 20A 23A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 18A 21A 21A - \
        | 18A 21A 21A - |
        | 18A 21A 21A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
  [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
  [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
reason
  remove un-usable
    SRS
      [a, a] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
      [b, a] ->= [a, c] {- DP Nontop (Mirror (Input 1)) -}
      [c, b] ->= [a, b, c] {- DP Nontop (Mirror (Input 2)) -}
   property Termination
has value Just True
for SRS
  [c#, b] |-> [c#] {- DP (Top 2) (Mirror (Input 2)) -}
reason
  (b, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Deepee\EDG(6/3,6)\Matrix{\ArcticBZ}{3}(5/3,6)\Weight(3/3,6)\EDG[(2/3,5)\Matrix{\Arctic}{3}(0/3,3)\EDG[],(1/3,4)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************CNF 12269 vars 49408 clauses


**************************************************
E          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E          , closure = Forward\n , start_strict_only = True\n , max_closure_length
E          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E          = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E          = 12} , self = 89 , parent = Nothing , duration = 0.638968674000 , status
E          = Except "AsyncCancelled" , start = 2025-09-03 11:39:41.834667914 UTC ,
E          finish = 2025-09-03 11:39:42.473636588 UTC , thread_cap_info = ("ThreadId
E          37", 3, False)}
E          
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 9 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| S        = 6 , total_length = 34} , self = 65 , parent = Nothing , duration = 0.218132017000
| S        , status = Success , start = 2025-09-03 11:39:41.957462381 UTC , finish
| S        = 2025-09-03 11:39:42.175594398 UTC , thread_cap_info = ("ThreadId 109",
| S        0, False)}
| S        
| | S      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | S      , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 3 , alphabet_size
| | S      = 6 , total_length = 34} , self = 63 , parent = Nothing , duration = 0.199728224000
| | S      , status = Success , start = 2025-09-03 11:39:41.974103303 UTC , finish
| | S      = 2025-09-03 11:39:42.173831527 UTC , thread_cap_info = ("ThreadId 110",
| | S      0, False)}
| | S      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | S    = 5 , total_length = 25} , self = 61 , parent = Nothing , duration = 0.179675216000
| | | S    , status = Success , start = 2025-09-03 11:39:41.993741035 UTC , finish
| | | S    = 2025-09-03 11:39:42.173416251 UTC , thread_cap_info = ("ThreadId 111",
| | | S    0, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | E  , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | | E  = 5 , total_length = 25} , self = 71 , parent = Nothing , duration = 0.162041777000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:39:42.013915745
| | | | E  UTC , finish = 2025-09-03 11:39:42.175957522 UTC , thread_cap_info = ("ThreadId
| | | | E  112", 0, False)}
| | | | E  
| | | S |  
| | S   |  
| S     |  
|       E  
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 5 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| S        = 5 , total_length = 19} , self = 82 , parent = Nothing , duration = 0.221219611000
| S        , status = Success , start = 2025-09-03 11:39:42.185570324 UTC , finish
| S        = 2025-09-03 11:39:42.406789935 UTC , thread_cap_info = ("ThreadId 134",
| S        0, False)}
| S        
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 5
| | E      , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 3 , alphabet_size
| | E      = 5 , total_length = 19} , self = 84 , parent = Nothing , duration = 0.254519584000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 11:39:42.213985254
| | E      UTC , finish = 2025-09-03 11:39:42.468504838 UTC , thread_cap_info = ("ThreadId
| | E      138", 0, False)}
| | E      
| S |      
|   E      
E          
