last 614 length 2451
last 490 length 1908
last 597 length 2370
CNF 614 vars 2451 clauses
CNF 597 vars 2370 clauses
last 633 length 2507
CNF 490 vars 1908 clauses
last 1845 length 7678
CNF 633 vars 2507 clauses
last 1809 length 7538
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2393, clauses: 8778
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6404, clauses: 26595
last 4625 length 18774
CNF 1845 vars 7678 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1975, clauses: 7234
last 6906 length 28316
last 3983 length 15753
CNF 1809 vars 7538 clauses
last 2393 length 8778
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5480, clauses: 22685
last 6404 length 26595
CNF 4625 vars 18774 clauses
last 1975 length 7234
CNF 3983 vars 15753 clauses
CNF 6906 vars 28316 clauses
last 5480 length 22685
CNF 2393 vars 8778 clauses
last 5870 length 24094
CNF 6404 vars 26595 clauses
CNF 1975 vars 7234 clauses
CNF 5480 vars 22685 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2393, clauses: 8778, status: Satisfied, time: 0.115811261s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6404, clauses: 26595, status: Satisfied, time: 0.18447766s
CNF 5870 vars 24094 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8781, clauses: 35048
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1975, clauses: 7234, status: Satisfied, time: 0.220519614s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10839, clauses: 43583
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 5480, clauses: 22685, status: Satisfied, time: 0.36424482s
last 8781 length 35048
**************************************************
last 10839 length 43583
CNF 8781 vars 35048 clauses
summary
CNF 10839 vars 43583 clauses
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 5 strict rules and 3 weak rules on 4 letters       EDG
SRS with 5 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 3 weak rules on 3 letters       EDG
SRS with 1 strict rules and 3 weak rules on 3 letters       Usable
SRS with 1 rules on 3 letters       weights
SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [a] {- Input 0 -}
  [a, b, a] -> [b, b, a] {- Input 1 -}
  [b, b] -> [a, a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 2) -}
  [a#, a, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Input 2) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Input 2) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [a#, b, a] |-> [b#, b, a] {- DP (Top 0) (Input 1) -}
  [b#, b] |-> [a#] {- DP (Top 2) (Input 2) -}
  [b#, b] |-> [a#, a] {- DP (Top 1) (Input 2) -}
  [b#, b] |-> [a#, a, a] {- DP (Top 0) (Input 2) -}
  [a, a, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A 0A 0A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 11A 11A 11A - \
        | 11A 11A 11A - |
        | 11A 11A 11A - |
        \ -   -   -   - / )
  ( b#
  , Wk  / 10A 11A 13A - \
        | 10A 11A 13A - |
        | 10A 11A 13A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [a, a, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 2) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 0) (Input 0) -}
  [a, a, b] ->= [a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
  [b, b] ->= [a, a, a] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a, b] ->= [a] {- DP Nontop (Input 0) -}
      [a, b, a] ->= [b, b, a] {- DP Nontop (Input 1) -}
      [b, b] ->= [a, a, a] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [a#, a, b] |-> [a#] {- DP (Top 0) (Input 0) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee\EDG(5/3,4)\Matrix{\Arctic}{3}\EDG(1/3,3)\Usable(1,3)\Weight(0,0)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.539762205000
  min duration 0.030331018000
  total durat. 1.277489175000
Success : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 2
  max duration 0.571663373000
  min duration 0.521056058000
  total durat. 1.092719431000
**************************************************
E                      Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                      , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                      = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                      Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                      8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                      = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                      ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                      1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                      = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
E                      num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length
E                      = 15} , self = 72 , parent = Nothing , duration = 0.649261231000 , status
E                      = Except "AsyncCancelled" , start = 2025-09-03 10:45:22.053275632 UTC ,
E                      finish = 2025-09-03 10:45:22.702536863 UTC , thread_cap_info = ("ThreadId
E                      45", 3, False)}
E                      
| F                    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                    = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F                    = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F                    = 84} , self = 60 , parent = Nothing , duration = 0.240444307000 , status
| F                    = Fail , start = 2025-09-03 10:45:22.05860347 UTC , finish = 2025-09-03
| F                    10:45:22.299047777 UTC , thread_cap_info = ("ThreadId 77", 2, False)}
| F                    
| | F                  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F                  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F                  = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | F                  = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | F                  = 33} , self = 58 , parent = Nothing , duration = 0.138031574000 , status
| | F                  = Fail , start = 2025-09-03 10:45:22.062529364 UTC , finish = 2025-09-03
| | F                  10:45:22.200560938 UTC , thread_cap_info = ("ThreadId 85", 0, False)}
| | F                  
| | | F                Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F                = False\n , verbose = False}" , input_size = Size { num_rules = 7 , num_strict_rules
| | | F                = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| | | F                = 33} , self = 57 , parent = Nothing , duration = 0.101620710000 , status
| | | F                = Fail , start = 2025-09-03 10:45:22.062662669 UTC , finish = 2025-09-03
| | | F                10:45:22.164283379 UTC , thread_cap_info = ("ThreadId 86", 0, False)}
| | | F                
| | | | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F              = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| | | | F              = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| | | | F              = 84} , self = 59 , parent = Nothing , duration = 0.227973693000 , status
| | | | F              = Fail , start = 2025-09-03 10:45:22.062666877 UTC , finish = 2025-09-03
| | | | F              10:45:22.29064057 UTC , thread_cap_info = ("ThreadId 79", 2, False)}
| | | | F              
| | | | | F            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 44 , num_strict_rules
| | | | | F            = 32 , num_top_rules = 32 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | | | F            = 276} , self = 63 , parent = Nothing , duration = 0.328920071000 , status
| | | | | F            = Fail , start = 2025-09-03 10:45:22.065740405 UTC , finish = 2025-09-03
| | | | | F            10:45:22.394660476 UTC , thread_cap_info = ("ThreadId 92", 1, False)}
| | | | | F            
| | | | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 44 , num_strict_rules
| | | | | | F          = 32 , num_top_rules = 32 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | | | | F          = 276} , self = 62 , parent = Nothing , duration = 0.260010637000 , status
| | | | | | F          = Fail , start = 2025-09-03 10:45:22.084581403 UTC , finish = 2025-09-03
| | | | | | F          10:45:22.34459204 UTC , thread_cap_info = ("ThreadId 93", 1, False)}
| | | | | | F          
| | | | | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | S        = 8 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | | | | S        = 4 , total_length = 37} , self = 64 , parent = Nothing , duration = 0.571663373000
| | | | | | | S        , status = Success , start = 2025-09-03 10:45:22.091336467 UTC , finish
| | | | | | | S        = 2025-09-03 10:45:22.66299984 UTC , thread_cap_info = ("ThreadId 98",
| | | | | | | S        0, False)}
| | | | | | | S        
| | | | | | | | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 8
| | | | | | | | E      , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 3 , alphabet_size
| | | | | | | | E      = 4 , total_length = 37} , self = 66 , parent = Nothing , duration = 0.559995568000
| | | | | | | | E      , status = Except "AsyncCancelled" , start = 2025-09-03 10:45:22.103185089
| | | | | | | | E      UTC , finish = 2025-09-03 10:45:22.663180657 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E      99", 0, False)}
| | | | | | | | E      
| | | | | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 35 , num_strict_rules
| | | | | | | | | F    = 23 , num_top_rules = 23 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | | | | | | | F    = 220} , self = 71 , parent = Nothing , duration = 0.539762205000 , status
| | | | | | | | | F    = Fail , start = 2025-09-03 10:45:22.142593629 UTC , finish = 2025-09-03
| | | | | | | | | F    10:45:22.682355834 UTC , thread_cap_info = ("ThreadId 105", 1, False)}
| | | | | | | | | F    
| | | | | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 35 , num_strict_rules
| | | | | | | | | | F  = 23 , num_top_rules = 23 , num_weak_rules = 12 , alphabet_size = 8 , total_length
| | | | | | | | | | F  = 220} , self = 61 , parent = Nothing , duration = 0.176625012000 , status
| | | | | | | | | | F  = Fail , start = 2025-09-03 10:45:22.162537703 UTC , finish = 2025-09-03
| | | | | | | | | | F  10:45:22.339162715 UTC , thread_cap_info = ("ThreadId 106", 1, False)}
| | | | | | | | | | F  
| | | F | | | | | | |  
| | | S | | | | | | |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S | | | | | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S | | | | | | |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S | | | | | | |  = 7 , num_strict_rules = 4 , num_top_rules = 4 , num_weak_rules = 3 , alphabet_size
| | | S | | | | | | |  = 4 , total_length = 33} , self = 73 , parent = Nothing , duration = 0.521056058000
| | | S | | | | | | |  , status = Success , start = 2025-09-03 10:45:22.181816069 UTC , finish
| | | S | | | | | | |  = 2025-09-03 10:45:22.702872127 UTC , thread_cap_info = ("ThreadId 107",
| | | S | | | | | | |  0, False)}
| | | S | | | | | | |  
| | F | | | | | | | |  
| |   | F | | | | | |  
| F   |   | | | | | |  
|     |   | | | | | F  
|     |   | F | | |    
|     |   F   | | |    
|     |       S | |    
|     |         E |    
|     |           F    
E     |                
      S                
