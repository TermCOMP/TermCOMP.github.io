last 493 length 1954
last 499 length 1982
CNF 493 vars 1954 clauses
CNF 499 vars 1982 clauses
last 804 length 3217
last 694 length 2754
CNF 694 vars 2754 clauses
CNF 804 vars 3217 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6637
last 1837 length 6637
last 1768 length 7428
CNF 1768 vars 7428 clauses
last 1733 length 7331
CNF 1733 vars 7331 clauses
CNF 1837 vars 6637 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2456, clauses: 9129
last 2456 length 9129
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1837, clauses: 6637, status: Satisfied, time: 0.125739548s
CNF 2456 vars 9129 clauses
last 3539 length 14932
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2456, clauses: 9129, status: Satisfied, time: 0.060721903s
CNF 3539 vars 14932 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6738, clauses: 28011
last 6738 length 28011
CNF 6738 vars 28011 clauses
last 6170 length 25507
**************************************************
summary
**************************************************
SRS with 3 rules on 2 letters       context
SRS with 4 rules on 2 letters       mirror
SRS with 4 rules on 2 letters       DP
SRS with 4 strict rules and 4 weak rules on 4 letters       weights
SRS with 2 strict rules and 4 weak rules on 3 letters       EDG
SRS with 2 strict rules and 4 weak rules on 3 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 4 weak rules on 2 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, a, b] -> [a, b, b, a] {- Input 1 -}
  [b, b, b] -> [a] {- Input 2 -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [b, a] -> [b] {- Input 0 -}
  [a, a, b] -> [a, b, b, a] {- Input 1 -}
  [b, b, b] -> [a] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [a, b] -> [b] {- Mirror (Input 0) -}
  [b, a, a] -> [a, b, b, a] {- Mirror (Input 1) -}
  [b, b, b] -> [a] {- Mirror (Input 2) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [a#, b, b, a] {- DP (Top 0) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, b, b] |-> [a#] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (a, 0/1)
  (b, 0/1)
  (a#, 0/1)
  (b#, 1/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
  [b#, a, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, a] {- DP (Top 1) (Mirror (Input 1)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [b#, a, a] |-> [b#, a] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, a, a] |-> [b#, b, a] {- DP (Top 1) (Mirror (Input 1)) -}
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  ( a
  , Wk  / 0A  3A 3A - \
        | 0A  3A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b
  , Wk  / 0A  0A 3A - \
        | 0A  0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( b#
  , Wk  / 8A 8A 10A - \
        | 8A 8A 10A - |
        | 8A 8A 10A - |
        \ -  -  -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Mirror (Input 0)) -}
  [a, b] ->= [b] {- DP Nontop (Mirror (Input 0)) -}
  [b, a, a] ->= [a, b, b, a] {- DP Nontop (Mirror (Input 1)) -}
  [b, b, b] ->= [a] {- DP Nontop (Mirror (Input 2)) -}
reason
  EDG

**************************************************
skeleton: (3,2)\Context\Mirror(4,2)\Deepee(4/4,4)\Weight\EDG(2/4,3)\Matrix{\Arctic}{3}(0/4,2)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
F          = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
F          = 72} , self = 47 , parent = Nothing , duration = 0.124902188000 , status
F          = Fail , start = 2025-09-03 10:57:59.915393475 UTC , finish = 2025-09-03
F          10:58:00.040295663 UTC , thread_cap_info = ("ThreadId 62", 3, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F        = 12 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 4 , total_length
| F        = 72} , self = 45 , parent = Nothing , duration = 0.120083560000 , status
| F        = Fail , start = 2025-09-03 10:57:59.915396409 UTC , finish = 2025-09-03
| F        10:58:00.035479969 UTC , thread_cap_info = ("ThreadId 64", 3, False)}
| F        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 6 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | S      = 3 , total_length = 28} , self = 60 , parent = Nothing , duration = 0.145458769000
| | S      , status = Success , start = 2025-09-03 10:57:59.967995833 UTC , finish
| | S      = 2025-09-03 10:58:00.113454602 UTC , thread_cap_info = ("ThreadId 79",
| | S      1, False)}
| | S      
| | | S    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | S    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | S    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | S    = 9 , num_strict_rules = 5 , num_top_rules = 5 , num_weak_rules = 4 , alphabet_size
| | | S    = 4 , total_length = 43} , self = 63 , parent = Nothing , duration = 0.179919130000
| | | S    , status = Success , start = 2025-09-03 10:57:59.99414731 UTC , finish
| | | S    = 2025-09-03 10:58:00.17406644 UTC , thread_cap_info = ("ThreadId 83",
| | | S    1, False)}
| | | S    
| | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 6
| | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 4 , alphabet_size
| | | | E  = 3 , total_length = 28} , self = 65 , parent = Nothing , duration = 0.155909558000
| | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 10:58:00.03536069
| | | | E  UTC , finish = 2025-09-03 10:58:00.191270248 UTC , thread_cap_info = ("ThreadId
| | | | E  85", 1, False)}
| | | | E  
| F | | |  
F   | | |  
F   | | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F   | | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F   | | |  = False\n , verbose = False}" , input_size = Size { num_rules = 32 , num_strict_rules
F   | | |  = 20 , num_top_rules = 20 , num_weak_rules = 12 , alphabet_size = 7 , total_length
F   | | |  = 202} , self = 68 , parent = Nothing , duration = 0.149382953000 , status
F   | | |  = Fail , start = 2025-09-03 10:58:00.069542797 UTC , finish = 2025-09-03
F   | | |  10:58:00.21892575 UTC , thread_cap_info = ("ThreadId 109", 2, False)}
F   | | |  
|   S | |  
|     S |  
|       E  
F          
CNF 6170 vars 25507 clauses
