last 831 length 3508
CNF 831 vars 3508 clauses
last 811 length 3451
CNF 811 vars 3451 clauses
last 3388 length 15859
CNF 3388 vars 15859 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1594, clauses: 5911
last 1594 length 5911
last 993 length 4123
[Info] AsyncCancelled @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.QPI.Top src/Matchbox/QPI/Top.hs:136:6)
last 1141 length 4906
last 2672 length 12038
CNF 993 vars 4123 clauses
last 4590 length 19723
**************************************************CNF 1141 vars 4906 clauses

summary
**************************************************
SRS with 3 rules on 2 letters       DP
SRS with 9 strict rules and 3 weak rules on 4 letters       weights
SRS with 2 strict rules and 3 weak rules on 4 letters       EDG
2 sub-proofs
  1 SRS with 1 strict rules and 3 weak rules on 3 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 rules on 0 letters       EDG

  2 SRS with 1 strict rules and 3 weak rules on 3 letters       Usable
  SRS with 1 strict rules and 1 weak rules on 3 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, b] -> [b, b, b, b] {- Input 0 -}
  [b, a, a, b] -> [b, b, b, b] {- Input 1 -}
  [a, a, b, b] -> [a, b, a, a] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a, b, b] ->= [b, b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 1) -}
  [a, a, b, b] ->= [a, b, a, a] {- DP Nontop (Input 2) -}
  [a#, a, b, b] |-> [a#] {- DP (Top 3) (Input 2) -}
  [a#, a, b, b] |-> [a#, a] {- DP (Top 2) (Input 2) -}
  [a#, a, b, b] |-> [a#, b, a, a] {- DP (Top 0) (Input 2) -}
  [a#, a, b, b] |-> [b#, a, a] {- DP (Top 1) (Input 2) -}
  [a#, a, b, b] |-> [b#, b, b] {- DP (Top 1) (Input 0) -}
  [a#, a, b, b] |-> [b#, b, b, b] {- DP (Top 0) (Input 0) -}
  [b#, a, a, b] |-> [b#, b] {- DP (Top 2) (Input 1) -}
  [b#, a, a, b] |-> [b#, b, b] {- DP (Top 1) (Input 1) -}
  [b#, a, a, b] |-> [b#, b, b, b] {- DP (Top 0) (Input 1) -}
reason
  (a, 1/1)
  (b, 1/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a, b, b] ->= [b, b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 1) -}
  [a, a, b, b] ->= [a, b, a, a] {- DP Nontop (Input 2) -}
  [a#, a, b, b] |-> [a#, b, a, a] {- DP (Top 0) (Input 2) -}
  [b#, a, a, b] |-> [b#, b, b, b] {- DP (Top 0) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, b, b] |-> [a#, b, a, a] {- DP (Top 0) (Input 2) -}
  [a, a, b, b] ->= [b, b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 1) -}
  [a, a, b, b] ->= [a, b, a, a] {- DP Nontop (Input 2) -}
reason
  ( a
  , Ek 2  / 1 1 \
          \ 0 2 / )
  ( b
  , Ek 2  / 1 0 \
          \ 0 2 / )
  ( a#
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  
reason
  EDG

property Termination
has value Just True
for SRS
  [b#, a, a, b] |-> [b#, b, b, b] {- DP (Top 0) (Input 1) -}
  [a, a, b, b] ->= [b, b, b, b] {- DP Nontop (Input 0) -}
  [b, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 1) -}
  [a, a, b, b] ->= [a, b, a, a] {- DP Nontop (Input 2) -}
reason
  remove un-usable
    SRS
      [a, a, b, b] ->= [b, b, b, b] {- DP Nontop (Input 0) -}
      [a, a, b, b] ->= [a, b, a, a] {- DP Nontop (Input 2) -}
   property Termination
has value Just True
for SRS
  [b#, a, a, b] |-> [b#, b, b, b] {- DP (Top 0) (Input 1) -}
  [b, a, a, b] ->= [b, b, b, b] {- DP Nontop (Input 1) -}
reason
  (a, 1/1)
  (b, 0/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (3,2)\Deepee(9/3,4)\Weight(2/3,4)\EDG[(1/3,3)\Matrix{\Natural}{2}(0,0)\EDG[],(1/3,3)\Usable(1/1,3)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F      Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F      , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F      = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F      , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F      = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F      = 0 , num_weak_rules = 0 , alphabet_size = 2 , total_length = 24} , self
F      = 54 , parent = Nothing , duration = 0.134260528000 , status = Fail , start
F      = 2025-09-03 11:53:57.054356612 UTC , finish = 2025-09-03 11:53:57.18861714
F      UTC , thread_cap_info = ("ThreadId 22", 0, False)}
F      
| S    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| S    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| S    = False\n , verbose = False}" , input_size = Size { num_rules = 14 , num_strict_rules
| S    = 2 , num_top_rules = 2 , num_weak_rules = 12 , alphabet_size = 5 , total_length
| S    = 140} , self = 61 , parent = Nothing , duration = 0.187321248000 , status
| S    = Success , start = 2025-09-03 11:53:57.078590676 UTC , finish = 2025-09-03
| S    11:53:57.265911924 UTC , thread_cap_info = ("ThreadId 91", 3, False)}
| S    
| | S  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | S  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | S  = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| | S  = 1 , num_top_rules = 1 , num_weak_rules = 3 , alphabet_size = 3 , total_length
| | S  = 32} , self = 56 , parent = Nothing , duration = 0.122448965000 , status
| | S  = Success , start = 2025-09-03 11:53:57.092077099 UTC , finish = 2025-09-03
| | S  11:53:57.214526064 UTC , thread_cap_info = ("ThreadId 86", 1, False)}
| | S  
F | |  
  | S  
  S    
