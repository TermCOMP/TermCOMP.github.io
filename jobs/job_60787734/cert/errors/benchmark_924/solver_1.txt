last 936 length 3974
CNF 936 vars 3974 clauses
last 1027 length 4237
CNF 1027 vars 4237 clauses
last 1537 length 6449
CNF 1537 vars 6449 clauses
last 1272 length 5183
CNF 1272 vars 5183 clauses
last 892 length 3800
last 969 length 4005
CNF 892 vars 3800 clauses
last 1493 length 6275
CNF 969 vars 4005 clauses
CNF 1493 vars 6275 clauses
last 1214 length 4951
CNF 1214 vars 4951 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3416, clauses: 12048
last 3416 length 12048
CNF 3416 vars 12048 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3416, clauses: 12048, status: Unsatisfied, time: 0.115938731s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3558, clauses: 12998
last 3558 length 12998
CNF 3558 vars 12998 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3558, clauses: 12998, status: Satisfied, time: 0.174772865s
last 13816 length 61257
CNF 13816 vars 61257 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7678, clauses: 30624
last 7678 length 30624
CNF 7678 vars 30624 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12581, clauses: 52235
last 12581 length 52235
CNF 12581 vars 52235 clauses
**************************************************
summary
**************************************************
SRS with 8 rules on 6 letters       weights
SRS with 6 rules on 6 letters       context
SRS with 11 rules on 6 letters       mirror
SRS with 11 rules on 6 letters       DP
SRS with 11 strict rules and 11 weak rules on 9 letters       weights
SRS with 10 strict rules and 11 weak rules on 8 letters       EDG
2 sub-proofs
  1 SRS with 3 strict rules and 11 weak rules on 7 letters       Matrix   { monotone = Strict, domain = Natural, method = KBO, shape = Full, bits = 1, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 2, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 3 strict rules and 10 weak rules on 7 letters       EDG
  SRS with 3 strict rules and 10 weak rules on 7 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
  SRS with 0 strict rules and 10 weak rules on 6 letters       EDG

  2 SRS with 1 strict rules and 11 weak rules on 7 letters       Usable
  SRS with 1 rules on 2 letters       weights
  SRS with 0 rules on 0 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [g, h] -> [g, f, s] {- Input 0 -}
  [f, s, s, s] -> [h, f, s, h] {- Input 1 -}
  [f, h] -> [h, f, s, h] {- Input 2 -}
  [h] -> [] {- Input 3 -}
  [f, f, s, s] -> [s, s, s, f, f] {- Input 4 -}
  [b, a] -> [a, b] {- Input 5 -}
  [a, a, a] -> [b, a, a, b] {- Input 6 -}
  [b, b, b, b] -> [a] {- Input 7 -}
reason
  (s, 0/1)
  (g, 0/1)
  (a, 3/1)
  (f, 0/1)
  (b, 1/1)
  (h, 0/1)
   property Termination
has value Just True
for SRS
  [g, h] -> [g, f, s] {- Input 0 -}
  [f, s, s, s] -> [h, f, s, h] {- Input 1 -}
  [f, h] -> [h, f, s, h] {- Input 2 -}
  [h] -> [] {- Input 3 -}
  [f, f, s, s] -> [s, s, s, f, f] {- Input 4 -}
  [b, a] -> [a, b] {- Input 5 -}
reason
  context
   property Termination
has value Just True
for SRS
  [g, h] -> [g, f, s] {- Input 0 -}
  [f, s, s, s] -> [h, f, s, h] {- Input 1 -}
  [f, h] -> [h, f, s, h] {- Input 2 -}
  [s, h] -> [s] {- Input 3 -}
  [g, h] -> [g] {- Input 3 -}
  [a, h] -> [a] {- Input 3 -}
  [f, h] -> [f] {- Input 3 -}
  [b, h] -> [b] {- Input 3 -}
  [h, h] -> [h] {- Input 3 -}
  [f, f, s, s] -> [s, s, s, f, f] {- Input 4 -}
  [b, a] -> [a, b] {- Input 5 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [h, g] -> [s, f, g] {- Mirror (Input 0) -}
  [s, s, s, f] -> [h, s, f, h] {- Mirror (Input 1) -}
  [h, f] -> [h, s, f, h] {- Mirror (Input 2) -}
  [h, s] -> [s] {- Mirror (Input 3) -}
  [h, g] -> [g] {- Mirror (Input 3) -}
  [h, a] -> [a] {- Mirror (Input 3) -}
  [h, f] -> [f] {- Mirror (Input 3) -}
  [h, b] -> [b] {- Mirror (Input 3) -}
  [h, h] -> [h] {- Mirror (Input 3) -}
  [s, s, f, f] -> [f, f, s, s, s] {- Mirror (Input 4) -}
  [a, b] -> [b, a] {- Mirror (Input 5) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 5)) -}
  [s#, s, s, f] |-> [s#, f, h] {- DP (Top 1) (Mirror (Input 1)) -}
  [s#, s, s, f] |-> [h#] {- DP (Top 3) (Mirror (Input 1)) -}
  [s#, s, s, f] |-> [h#, s, f, h] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, s, f, f] |-> [s#] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s] {- DP (Top 3) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s, s] {- DP (Top 2) (Mirror (Input 4)) -}
  [a#, b] |-> [a#] {- DP (Top 1) (Mirror (Input 5)) -}
  [h#, g] |-> [s#, f, g] {- DP (Top 0) (Mirror (Input 0)) -}
  [h#, f] |-> [s#, f, h] {- DP (Top 1) (Mirror (Input 2)) -}
  [h#, f] |-> [h#] {- DP (Top 3) (Mirror (Input 2)) -}
  [h#, f] |-> [h#, s, f, h] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  (s, 0/1)
  (g, 0/1)
  (a, 0/1)
  (f, 0/1)
  (b, 1/1)
  (h, 0/1)
  (s#, 0/1)
  (a#, 0/1)
  (h#, 0/1)
   property Termination
has value Just True
for SRS
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 5)) -}
  [s#, s, s, f] |-> [s#, f, h] {- DP (Top 1) (Mirror (Input 1)) -}
  [s#, s, s, f] |-> [h#] {- DP (Top 3) (Mirror (Input 1)) -}
  [s#, s, s, f] |-> [h#, s, f, h] {- DP (Top 0) (Mirror (Input 1)) -}
  [s#, s, f, f] |-> [s#] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s] {- DP (Top 3) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s, s] {- DP (Top 2) (Mirror (Input 4)) -}
  [h#, g] |-> [s#, f, g] {- DP (Top 0) (Mirror (Input 0)) -}
  [h#, f] |-> [s#, f, h] {- DP (Top 1) (Mirror (Input 2)) -}
  [h#, f] |-> [h#] {- DP (Top 3) (Mirror (Input 2)) -}
  [h#, f] |-> [h#, s, f, h] {- DP (Top 0) (Mirror (Input 2)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, f, f] |-> [s#, s, s] {- DP (Top 2) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s] {- DP (Top 3) (Mirror (Input 4)) -}
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 5)) -}
reason
  ( s
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( g
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( a
  , Ek 2  / 2 0 \
          \ 0 1 / )
  ( f
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( b
  , Ek 2  / 2 1 \
          \ 0 1 / )
  ( h
  , Ek 2  / 1 0 \
          \ 0 1 / )
  ( s#
  , Ek 2  / 1 1 \
          \ 0 1 / )
   property Termination
has value Just True
for SRS
  [s#, s, f, f] |-> [s#, s, s] {- DP (Top 2) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s] {- DP (Top 3) (Mirror (Input 4)) -}
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [s#, s, f, f] |-> [s#, s, s] {- DP (Top 2) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#] {- DP (Top 4) (Mirror (Input 4)) -}
  [s#, s, f, f] |-> [s#, s] {- DP (Top 3) (Mirror (Input 4)) -}
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
reason
  ( s
  , Wk  / 0A  0A  0A  - \
        | -3A -3A -3A - |
        | -3A -3A -3A - |
        \ -   -   -   - / )
  ( g
  , Wk  / 6A 9A 9A - \
        | 3A 6A 6A - |
        | 3A 6A 6A - |
        \ -  -  -  - / )
  ( a
  , Wk  / 21A 21A 21A - \
        | 18A 18A 18A - |
        | 18A 18A 18A - |
        \ -   -   -   - / )
  ( f
  , Wk  / 0A 3A 3A - \
        | 0A 0A 0A - |
        | 0A 0A 0A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 21A 21A 21A - \
        | 18A 18A 18A - |
        | 18A 18A 18A - |
        \ -   -   -   - / )
  ( h
  , Wk  / 0A  3A 3A - \
        | -3A 0A 0A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( s#
  , Wk  / 10A 10A 10A - \
        | 10A 10A 10A - |
        | 10A 10A 10A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
reason
  EDG

property Termination
has value Just True
for SRS
  [h#, f] |-> [h#] {- DP (Top 3) (Mirror (Input 2)) -}
  [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
  [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
  [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
  [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
  [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
  [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
  [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
  [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
  [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
  [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
  [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 5)) -}
reason
  remove un-usable
    SRS
      [h, g] ->= [s, f, g] {- DP Nontop (Mirror (Input 0)) -}
      [s, s, s, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 1)) -}
      [h, f] ->= [h, s, f, h] {- DP Nontop (Mirror (Input 2)) -}
      [h, s] ->= [s] {- DP Nontop (Mirror (Input 3)) -}
      [h, g] ->= [g] {- DP Nontop (Mirror (Input 3)) -}
      [h, a] ->= [a] {- DP Nontop (Mirror (Input 3)) -}
      [h, f] ->= [f] {- DP Nontop (Mirror (Input 3)) -}
      [h, b] ->= [b] {- DP Nontop (Mirror (Input 3)) -}
      [h, h] ->= [h] {- DP Nontop (Mirror (Input 3)) -}
      [s, s, f, f] ->= [f, f, s, s, s] {- DP Nontop (Mirror (Input 4)) -}
      [a, b] ->= [b, a] {- DP Nontop (Mirror (Input 5)) -}
   property Termination
has value Just True
for SRS
  [h#, f] |-> [h#] {- DP (Top 3) (Mirror (Input 2)) -}
reason
  (f, 1/1)
  (h#, 0/1)
   property Termination
has value Just True
for SRS
  
reason
  EDG

**************************************************
skeleton: (8,6)\Weight(6,6)\Context\Mirror(11,6)\Deepee(11/11,9)\Weight(10/11,8)\EDG[(3/11,7)\Matrix{\Natural}{2}\EDG(3/10,7)\Matrix{\Arctic}{3}(0/10,6)\EDG[],(1/11,7)\Usable(1,2)\Weight(0,0)\EDG[]]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************last 26594 length 125461

Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 3
  max duration 0.882132225000
  min duration 0.113085970000
  total durat. 1.167496505000
**************************************************
F          Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F          , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F          = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F          , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F          = True}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules
F          = 0 , num_weak_rules = 0 , alphabet_size = 6 , total_length = 33} , self
F          = 50 , parent = Nothing , duration = 0.250807739000 , status = Fail , start
F          = 2025-09-03 13:32:07.875419335 UTC , finish = 2025-09-03 13:32:08.126227074
F          UTC , thread_cap_info = ("ThreadId 22", 1, False)}
F          
| S        Info { what = "Weight\n { modus = Pre (Or_Else Count (GLPK { goal = Optimize,
| S        epsilon_digits = 6}))\n , verbose = False\n , tracing = False}" , input_size
| S        = Size { num_rules = 507 , num_strict_rules = 365 , num_top_rules = 365
| S        , num_weak_rules = 142 , alphabet_size = 49 , total_length = 3622} , self
| S        = 46 , parent = Nothing , duration = 0.142634963000 , status = Success
| S        , start = 2025-09-03 13:32:07.914457877 UTC , finish = 2025-09-03 13:32:08.05709284
| S        UTC , thread_cap_info = ("ThreadId 61", 3, False)}
| S        
| | S      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| | S      verbose = False}" , input_size = Size { num_rules = 377 , num_strict_rules
| | S      = 235 , num_top_rules = 235 , num_weak_rules = 142 , alphabet_size = 41
| | S      , total_length = 2832} , self = 57 , parent = Nothing , duration = 0.177550095000
| | S      , status = Success , start = 2025-09-03 13:32:07.997719794 UTC , finish
| | S      = 2025-09-03 13:32:08.175269889 UTC , thread_cap_info = ("ThreadId 60",
| | S      3, False)}
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 12581, clauses: 52235, status: Satisfied, time: 0.433659352s
CNF 26594 vars 125461 clauses
| | S      
| S |      
| S |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| S |      verbose = False}" , input_size = Size { num_rules = 347 , num_strict_rules
| S |      = 205 , num_top_rules = 205 , num_weak_rules = 142 , alphabet_size = 46
| S |      , total_length = 2601} , self = 64 , parent = Nothing , duration = 0.171765784000
| S |      , status = Success , start = 2025-09-03 13:32:08.076482357 UTC , finish
| S |      = 2025-09-03 13:32:08.248248141 UTC , thread_cap_info = ("ThreadId 58",
| S |      3, False)}
| S |      
F | |      
  | S      
F |        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
F |        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F |        = False\n , verbose = False}" , input_size = Size { num_rules = 11 , num_strict_rules
F |        = 1 , num_top_rules = 1 , num_weak_rules = 10 , alphabet_size = 7 , total_length
F |        = 51} , self = 72 , parent = Nothing , duration = 0.172278310000 , status
F |        = Fail , start = 2025-09-03 13:32:08.245553675 UTC , finish = 2025-09-03
F |        13:32:08.417831985 UTC , thread_cap_info = ("ThreadId 108", 2, False)}
F |        
| S        
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 90 , num_strict_rules
| F        = 4 , num_top_rules = 4 , num_weak_rules = 86 , alphabet_size = 18 , total_length
| F        = 694} , self = 81 , parent = Nothing , duration = 0.882132225000 , status
| F        = Fail , start = 2025-09-03 13:32:08.25647313 UTC , finish = 2025-09-03
| F        13:32:09.138605355 UTC , thread_cap_info = ("ThreadId 114", 1, False)}
| F        
| | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F      = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | F      = 3 , num_top_rules = 3 , num_weak_rules = 10 , alphabet_size = 7 , total_length
| | F      = 64} , self = 73 , parent = Nothing , duration = 0.121504094000 , status
| | F      = Fail , start = 2025-09-03 13:32:08.296341232 UTC , finish = 2025-09-03
| | F      13:32:08.417845326 UTC , thread_cap_info = ("ThreadId 119", 2, False)}
| | F      
| | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 13 , num_strict_rules
| | | F    = 3 , num_top_rules = 3 , num_weak_rules = 10 , alphabet_size = 7 , total_length
| | | F    = 64} , self = 75 , parent = Nothing , duration = 0.113085970000 , status
| | | F    = Fail , start = 2025-09-03 13:32:08.310919884 UTC , finish = 2025-09-03
| | | F    13:32:08.424005854 UTC , thread_cap_info = ("ThreadId 120", 2, False)}
| | | F    
| | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | F  = 11 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 10 ,
| | | | F  alphabet_size = 7 , total_length = 51} , self = 76 , parent = Nothing ,
| | | | F  duration = 0.230345526000 , status = Fail , start = 2025-09-03 13:32:08.313852232
| | | | F  UTC , finish = 2025-09-03 13:32:08.544197758 UTC , thread_cap_info = ("ThreadId
| | | | F  121", 2, False)}
| | | | F  
F | | | |  
  | F | |  
  |   F |  
S |     |  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
S |     |  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
S |     |  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
S |     |  = 13 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 10 ,
S |     |  alphabet_size = 7 , total_length = 64} , self = 77 , parent = Nothing ,
S |     |  duration = 0.287335671000 , status = Success , start = 2025-09-03 13:32:08.456314989
S |     |  UTC , finish = 2025-09-03 13:32:08.74365066 UTC , thread_cap_info = ("ThreadId
S |     |  127", 2, False)}
S |     |  
| |     F  
| | E      Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | E      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | E      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | E      , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | E      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | E      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 13
| | E      , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 10 , alphabet_size
| | E      = 7 , total_length = 64} , self = 79 , parent = Nothing , duration = 0.394574365000
| | E      , status = Except "AsyncCancelled" , start = 2025-09-03 13:32:08.562025057
| | E      UTC , finish = 2025-09-03 13:32:08.956599422 UTC , thread_cap_info = ("ThreadId
| | E      128", 2, False)}
| | E      
S | |      
  | E      
  F        
