last 776 length 3213
last 918 length 3807
CNF 776 vars 3213 clauses
last 861 length 3677
last 891 length 4044
CNF 918 vars 3807 clauses
CNF 861 vars 3677 clauses
CNF 891 vars 4044 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2294, clauses: 8343
last 2294 length 8343
CNF 2294 vars 8343 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2685, clauses: 9746
last 2685 length 9746
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7634, clauses: 31751
CNF 2685 vars 9746 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2294, clauses: 8343, status: Satisfied, time: 0.180626338s
last 7634 length 31751
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9134, clauses: 38105
last 9134 length 38105
CNF 9134 vars 38105 clauses
CNF 7634 vars 31751 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2685, clauses: 9746, status: Satisfied, time: 0.121537993s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 9134, clauses: 38105, status: Satisfied, time: 0.083107855s
**************************************************
summary
**************************************************
SRS with 3 rules on 3 letters       mirror
SRS with 3 rules on 3 letters       context
SRS with 7 rules on 3 letters       mirror
SRS with 7 rules on 3 letters       DP
SRS with 5 strict rules and 7 weak rules on 5 letters       weights
SRS with 2 strict rules and 7 weak rules on 4 letters       EDG
SRS with 2 strict rules and 7 weak rules on 4 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 7 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b, b] -> [b, b, a, b, c, a] {- Input 1 -}
  [b, c] -> [] {- Input 2 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, b, a] -> [a, c, b, a, b, b] {- Mirror (Input 1) -}
  [c, b] -> [] {- Mirror (Input 2) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, b, a] -> [a, c, b, a, b, b] {- Mirror (Input 1) -}
  [a, c, b] -> [a] {- Mirror (Input 2) -}
  [b, c, b] -> [b] {- Mirror (Input 2) -}
  [c, c, b] -> [c] {- Mirror (Input 2) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b, b] -> [b, b, a, b, c, a] {- Input 1 -}
  [b, c, a] -> [a] {- Input 2 -}
  [b, c, b] -> [b] {- Input 2 -}
  [b, c, c] -> [c] {- Input 2 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, b, c, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, b, c, a] {- DP (Top 2) (Input 1) -}
  [a#, b, b] |-> [b#, a, b, c, a] {- DP (Top 1) (Input 1) -}
  [a#, b, b] |-> [b#, b, a, b, c, a] {- DP (Top 0) (Input 1) -}
  [a#, b, b] |-> [b#, c, a] {- DP (Top 3) (Input 1) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (b#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, b, c, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, b, c, a] {- DP (Top 2) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, b] |-> [a#] {- DP (Top 5) (Input 1) -}
  [a#, b, b] |-> [a#, b, c, a] {- DP (Top 2) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, b, c, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  ( a
  , Wk  / 0A  0A  0A - \
        | 0A  0A  0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( b
  , Wk  / 0A  3A 3A - \
        | 0A  0A 3A - |
        | -3A 0A 0A - |
        \ -   -  -  - / )
  ( c
  , Wk  / 0A  0A  3A - \
        | -3A -3A 0A - |
        | -3A -3A 0A - |
        \ -   -   -  - / )
  ( a#
  , Wk  / 16A 16A 16A - \
        | 16A 16A 16A - |
        | 16A 16A 16A - |
        \ -   -   -   - / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b, b] ->= [b, b, a, b, c, a] {- DP Nontop (Input 1) -}
  [b, c, a] ->= [a] {- DP Nontop (Input 2) -}
  [b, c, b] ->= [b] {- DP Nontop (Input 2) -}
  [b, c, c] ->= [c] {- DP Nontop (Input 2) -}
reason
  EDG

**************************************************
skeleton: \Mirror(3,3)\Context\Mirror(7,3)\Deepee(5/7,5)\Weight\EDG(2/7,4)\Matrix{\Arctic}{3}(0/7,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************

**************************************************
F                  Info { what = "Transport\n { mode = Standard\n , output_as = Transport_System\n
F                  , direction = Forward_Backward\n , max_derivation_length = Just 2\n , max_expansion_width
F                  = Nothing\n , max_tiers = Just 33\n , max_overlap_closures = Nothing\n
F                  , string_implementation = ByteString Plain\n , tracing = False\n , cpf
F                  = True}" , input_size = Size { num_rules = 3 , num_strict_rules = 3 , num_top_rules
F                  = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length = 12} , self
F                  = 52 , parent = Nothing , duration = 0.184129276000 , status = Fail , start
F                  = 2025-09-03 11:15:50.884720492 UTC , finish = 2025-09-03 11:15:51.068849768
F                  UTC , thread_cap_info = ("ThreadId 22", 3, False)}
F                  
| E                Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E                , closure = Backward\n , start_strict_only = True\n , max_closure_length
| E                = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E                Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E                8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E                = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E                ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E                1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E                = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| E                num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E                = 12} , self = 72 , parent = Nothing , duration = 0.470873046000 , status
| E                = Except "AsyncCancelled" , start = 2025-09-03 11:15:50.884755526 UTC ,
| E                finish = 2025-09-03 11:15:51.355628572 UTC , thread_cap_info = ("ThreadId
| E                34", 1, False)}
| E                
| | E              Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| | E              , closure = Forward\n , start_strict_only = True\n , max_closure_length
| | E              = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
| | E              , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
| | E              max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
| | E              [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
| | E              string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
| | E              , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| | E              = True})" , input_size = Size { num_rules = 3 , num_strict_rules = 3 ,
| | E              num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | E              = 12} , self = 66 , parent = Nothing , duration = 0.419013726000 , status
| | E              = Except "AsyncCancelled" , start = 2025-09-03 11:15:50.917543652 UTC ,
| | E              finish = 2025-09-03 11:15:51.336557378 UTC , thread_cap_info = ("ThreadId
| | E              73", 2, False)}
| | E              
| | | E            Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | E            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | E            = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | E            = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | E            = 162} , self = 65 , parent = Nothing , duration = 0.418167151000 , status
| | | E            = Except "AsyncCancelled" , start = 2025-09-03 11:15:50.917546829 UTC ,
| | | E            finish = 2025-09-03 11:15:51.33571398 UTC , thread_cap_info = ("ThreadId
| | | E            74", 2, False)}
| | | E            
| | | | E          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | E          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | E          = False\n , verbose = False}" , input_size = Size { num_rules = 27 , num_strict_rules
| | | | E          = 27 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | | | E          = 162} , self = 67 , parent = Nothing , duration = 0.399896469000 , status
| | | | E          = Except "AsyncCancelled" , start = 2025-09-03 11:15:50.936714419 UTC ,
| | | | E          finish = 2025-09-03 11:15:51.336610888 UTC , thread_cap_info = ("ThreadId
| | | | E          76", 2, False)}
| | | | E          
| | | | | S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | S        = 9 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | | S        = 4 , total_length = 41} , self = 58 , parent = Nothing , duration = 0.290930191000
| | | | | S        , status = Success , start = 2025-09-03 11:15:50.94476724 UTC , finish
| | | | | S        = 2025-09-03 11:15:51.235697431 UTC , thread_cap_info = ("ThreadId 81",
| | | | | S        0, False)}
| | | | | S        
| | | | | | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | S      = 10 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 ,
| | | | | | S      alphabet_size = 4 , total_length = 46} , self = 68 , parent = Nothing ,
| | | | | | S      duration = 0.374677235000 , status = Success , start = 2025-09-03 11:15:50.962435969
| | | | | | S      UTC , finish = 2025-09-03 11:15:51.337113204 UTC , thread_cap_info = ("ThreadId
| | | | | | S      85", 0, False)}
| | | | | | S      
| | | | | | | S    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | S    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | S    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | S    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | S    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | S    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | | | | | | S    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 7 , alphabet_size
| | | | | | | S    = 4 , total_length = 46} , self = 70 , parent = Nothing , duration = 0.360793756000
| | | | | | | S    , status = Success , start = 2025-09-03 11:15:50.977149639 UTC , finish
| | | | | | | S    = 2025-09-03 11:15:51.337943395 UTC , thread_cap_info = ("ThreadId 88",
| | | | | | | S    0, False)}
| | | | | | | S    
| | | | | | | | E  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | | | | | E  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | | | | | E  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | | | | | E  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | | | | | E  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | | | | | E  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | | | | | | E  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 7 , alphabet_size
| | | | | | | | E  = 4 , total_length = 41} , self = 61 , parent = Nothing , duration = 0.304480548000
| | | | | | | | E  , status = Except "AsyncCancelled" , start = 2025-09-03 11:15:51.014398422
| | | | | | | | E  UTC , finish = 2025-09-03 11:15:51.31887897 UTC , thread_cap_info = ("ThreadId
| | | | | | | | E  89", 0, False)}
| | | | | | | | E  
F | | | | | | | |  
  | | | | S | | |  
  | | | |   | | E  
  | | E |   | |    
  | E   |   | |    
  |     E   | |    
  |         S |    
  |           S    
  E                
