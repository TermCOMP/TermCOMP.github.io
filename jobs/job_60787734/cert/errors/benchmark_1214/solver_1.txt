last 4011 length 20109
last 3490 length 15679
CNF 4011 vars 20109 clauses
CNF 3490 vars 15679 clauses
last 520 length 2142
CNF 520 vars 2142 clauses
last 702 length 3137
last 12810 length 62203
CNF 702 vars 3137 clauses
CNF 12810 vars 62203 clauses
last 544 length 2208
last 11075 length 66988
last 588 length 2408
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2234, clauses: 7953
CNF 544 vars 2208 clauses
last 12695 length 79376
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29405
CNF 11075 vars 66988 clauses
last 16761 length 82313
CNF 588 vars 2408 clauses
last 2234 length 7953
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20737, clauses: 80422
CNF 12695 vars 79376 clauses
last 7092 length 29405
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2444, clauses: 8736
CNF 16761 vars 82313 clauses
CNF 2234 vars 7953 clauses
last 20737 length 80422
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7968, clauses: 33123
last 2444 length 8736
CNF 7092 vars 29405 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2234, clauses: 7953, status: Unsatisfied, time: 0.574156052s
last 7968 length 33123
CNF 20737 vars 80422 clauses
CNF 2444 vars 8736 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 7092, clauses: 29405, status: Satisfied, time: 0.834933607s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 23076, clauses: 91448
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 53650, clauses: 224495
CNF 7968 vars 33123 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2444, clauses: 8736, status: Unsatisfied, time: 0.96487926s
**************************************************last 23076 length 91448

last 53650 length 224495
summary
**************************************************
SRS with 4 rules on 3 letters       mirror
SRS with 4 rules on 3 letters       context
SRS with 8 rules on 3 letters       mirror
SRS with 8 rules on 3 letters       DP
SRS with 6 strict rules and 8 weak rules on 6 letters       weights
SRS with 2 strict rules and 8 weak rules on 4 letters       EDG
SRS with 2 strict rules and 8 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 8 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a] -> [] {- Input 0 -}
  [a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b] -> [c] {- Input 2 -}
  [c, c] -> [] {- Input 3 -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a] -> [] {- Mirror (Input 0) -}
  [b, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [b] -> [c] {- Mirror (Input 2) -}
  [c, c] -> [] {- Mirror (Input 3) -}
reason
  context
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Mirror (Input 0) -}
  [b, a] -> [b] {- Mirror (Input 0) -}
  [c, a] -> [c] {- Mirror (Input 0) -}
  [b, a] -> [a, a, b, b, c] {- Mirror (Input 1) -}
  [b] -> [c] {- Mirror (Input 2) -}
  [a, c, c] -> [a] {- Mirror (Input 3) -}
  [b, c, c] -> [b] {- Mirror (Input 3) -}
  [c, c, c] -> [c] {- Mirror (Input 3) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [a, a] -> [a] {- Input 0 -}
  [a, b] -> [b] {- Input 0 -}
  [a, c] -> [c] {- Input 0 -}
  [a, b] -> [c, b, b, a, a] {- Input 1 -}
  [b] -> [c] {- Input 2 -}
  [c, c, a] -> [a] {- Input 3 -}
  [c, c, b] -> [b] {- Input 3 -}
  [c, c, c] -> [c] {- Input 3 -}
reason
  DP
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a#, b] |-> [b#, a, a] {- DP (Top 2) (Input 1) -}
  [a#, b] |-> [b#, b, a, a] {- DP (Top 1) (Input 1) -}
  [a#, b] |-> [c#, b, b, a, a] {- DP (Top 0) (Input 1) -}
  [b#] |-> [c#] {- DP (Top 0) (Input 2) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 2/1)
  (b#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b] |-> [a#] {- DP (Top 4) (Input 1) -}
  [a#, b] |-> [a#, a] {- DP (Top 3) (Input 1) -}
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  ( a
  , Wk  / 0A  1A 1A  \
        | -1A 0A -2A |
        \ -   -  0A  / )
  ( b
  , Wk  / 1A  2A 2A  \
        | -2A -  -2A |
        \ -   -  0A  / )
  ( c
  , Wk  / -   2A 1A \
        | -2A -  -  |
        \ -   -  0A / )
  ( a#
  , Wk  / -1A - 0A \
        | -   - -  |
        \ -   - 0A / )
   property Termination
has value Just True
for SRS
  [a, a] ->= [a] {- DP Nontop (Input 0) -}
  [a, b] ->= [b] {- DP Nontop (Input 0) -}
  [a, c] ->= [c] {- DP Nontop (Input 0) -}
  [a, b] ->= [c, b, b, a, a] {- DP Nontop (Input 1) -}
  [b] ->= [c] {- DP Nontop (Input 2) -}
  [c, c, a] ->= [a] {- DP Nontop (Input 3) -}
  [c, c, b] ->= [b] {- DP Nontop (Input 3) -}
  [c, c, c] ->= [c] {- DP Nontop (Input 3) -}
reason
  EDG

**************************************************
skeleton: \Mirror(4,3)\Context\Mirror(8,3)\Deepee(6/8,6)\Weight\EDG(2/8,4)\Matrix{\ArcticBZ}{3}(0/8,3)\EDG[]
**************************************************
let {cpf = True;slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 20737, clauses: 80422, status: Satisfied, time: 1.12056466s

Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.403143932000
  min duration 0.041344087000
  total durat. 2.574398402000
  Info
    { what = "KBO\n  { direction = LR\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 110
      , num_strict_rules = 74
      , num_top_rules = 74
      , num_weak_rules = 36
      , alphabet_size = 17
      , total_length = 585}
    , self = 64
    , parent = Nothing
    , duration = 1.403143932000
    , status = Fail
    , start = 2025-09-03 11:12:48.551815953 UTC
    , finish = 2025-09-03 11:12:49.954959885 UTC
    , thread_cap_info = ("ThreadId 79", 2, False)}
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 1.068556478000
  min duration 0.136091543000
  total durat. 2.747659339000
  Info
    { what = "KBO\n  { direction = RL\n  , bits = 1\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , compress = True\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 110
      , num_strict_rules = 74
      , num_top_rules = 74
      , num_weak_rules = 36
      , alphabet_size = 17
      , total_length = 585}
    , self = 63
    , parent = Nothing
    , duration = 1.068556478000
    , status = Fail
    , start = 2025-09-03 11:12:48.549496468 UTC
    , finish = 2025-09-03 11:12:49.618052946 UTC
    , thread_cap_info = ("ThreadId 80", 2, False)}
Success : "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n , log_level = 1\n , draw = False}"
  total number 1
  max duration 1.464007960000
  min duration 1.464007960000
  total durat. 1.464007960000
  Info
    { what = "Matrix\n  { monotone = Weak\n  , domain = ArcticBZ\n  , method = Direct\n  , shape = Cornered\n  , bits = 4\n  , compress = True\n  , remove = Any\n  , constraint = And []\n  , minimize = Nothing\n  , encoding = Ersatz_Unary\n  , dim = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , verbose = False\n  , tracing = False\n  , briefing = False\n  , log_level = 1\n  , draw = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 8
      , alphabet_size = 4
      , total_length = 37}
    , self = 66
    , parent = Nothing
    , duration = 1.464007960000
    , status = Success
    , start = 2025-09-03 11:12:49.132819339 UTC
    , finish = 2025-09-03 11:12:50.596827299 UTC
    , thread_cap_info = ("ThreadId 111", 2, False)}
Fail : "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n , tracing = False\n , verbose = False}"
  total number 1
  max duration 1.351444082000
  min duration 1.351444082000
  total durat. 1.351444082000
  Info
    { what = "QPI\n  { dim = 3\n  , bits = 3\n  , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n  , encoding = Ersatz_Binary\n  , tracing = False\n  , verbose = False}"
    , input_size = Size
      { num_rules = 10
      , num_strict_rules = 2
      , num_top_rules = 2
      , num_weak_rules = 8
      , alphabet_size = 4
      , total_length = 37}
    , self = 65
    , parent = Nothing
    , duration = 1.351444082000
    , status = Fail
    , start = 2025-09-03 11:12:49.041762527 UTC
    , finish = 2025-09-03 11:12:50.393206609 UTC
    , thread_cap_info = ("ThreadId 108", 2, False)}
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 2.101351711000
  min duration 2.101351711000
  total durat. 2.101351711000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 4
      , num_strict_rules = 4
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 12}
    , self = 71
    , parent = Nothing
    , duration = 2.101351711000
    , status = Except "AsyncCancelled"
    , start = 2025-09-03 11:12:48.500854255 UTC
    , finish = 2025-09-03 11:12:50.602205966 UTC
    , thread_cap_info = ("ThreadId 35", 3, False)}
**************************************************
E                  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E                  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E                  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E                  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E                  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E                  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E                  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E                  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E                  = True})" , input_size = Size { num_rules = 4 , num_strict_rules = 4 ,
E                  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E                  = 12} , self = 71 , parent = Nothing , duration = 2.101351711000 , status
E                  = Except "AsyncCancelled" , start = 2025-09-03 11:12:48.500854255 UTC ,
E                  finish = 2025-09-03 11:12:50.602205966 UTC , thread_cap_info = ("ThreadId
E                  35", 3, False)}
E                  
| F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F                = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| F                = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F                = 180} , self = 50 , parent = Nothing , duration = 0.259477113000 , status
| F                = Fail , start = 2025-09-03 11:12:48.515129263 UTC , finish = 2025-09-03
| F                11:12:48.774606376 UTC , thread_cap_info = ("ThreadId 66", 3, False)}
| F                
| | F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F              = False\n , verbose = False}" , input_size = Size { num_rules = 36 , num_strict_rules
| | F              = 36 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F              = 180} , self = 48 , parent = Nothing , duration = 0.202889450000 , status
| | F              = Fail , start = 2025-09-03 11:12:48.531820682 UTC , finish = 2025-09-03
| | F              11:12:48.734710132 UTC , thread_cap_info = ("ThreadId 68", 3, False)}
| | F              
| | | F            Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | F            [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | F            = False\n , verbose = False}" , input_size = Size { num_rules = 97 , num_strict_rules
| | | F            = 61 , num_top_rules = 61 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | F            total_length = 497} , self = 62 , parent = Nothing , duration = 0.923985709000
| | | F            , status = Fail , start = 2025-09-03 11:12:48.541594906 UTC , finish =
| | | F            2025-09-03 11:12:49.465580615 UTC , thread_cap_info = ("ThreadId 76", 0,
| | | F            False)}
| | | F            
| | | | F          Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F          = False\n , verbose = False}" , input_size = Size { num_rules = 110 , num_strict_rules
| | | | F          = 74 , num_top_rules = 74 , num_weak_rules = 36 , alphabet_size = 17 ,
| | | | F          total_length = 585} , self = 63 , parent = Nothing , duration = 1.068556478000
| | | | F          , status = Fail , start = 2025-09-03 11:12:48.549496468 UTC , finish =
| | | | F          2025-09-03 11:12:49.618052946 UTC , thread_cap_info = ("ThreadId 80", 2,
| | | | F          False)}
| | | | F          
| | | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 110 , num_strict_rules
| | | | | F        = 74 , num_top_rules = 74 , num_weak_rules = 36 , alphabet_size = 17 ,
| | | | | F        total_length = 585} , self = 64 , parent = Nothing , duration = 1.403143932000
| | | | | F        , status = Fail , start = 2025-09-03 11:12:48.551815953 UTC , finish =
| | | | | F        2025-09-03 11:12:49.954959885 UTC , thread_cap_info = ("ThreadId 79", 2,
| | | | | F        False)}
| | | | | F        
| | | | | | F      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 97 , num_strict_rules
| | | | | | F      = 61 , num_top_rules = 61 , num_weak_rules = 36 , alphabet_size = 16 ,
| | | | | | F      total_length = 497} , self = 58 , parent = Nothing , duration = 0.504118102000
| | | | | | F      , status = Fail , start = 2025-09-03 11:12:48.551821919 UTC , finish =
| | | | | | F      2025-09-03 11:12:49.055940021 UTC , thread_cap_info = ("ThreadId 75", 0,
| | | | | | F      False)}
| | | | | | F      
| | F | | | |      
| F   | | | |      
| S   | | | |      Info { what = "EDG { usable = True, tcap_inverse = True, tracing = False,
| S   | | | |      verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| S   | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| S   | | | |      = 39} , self = 54 , parent = Nothing , duration = 0.105392939000 , status
| S   | | | |      = Success , start = 2025-09-03 11:12:48.831834931 UTC , finish = 2025-09-03
| S   | | | |      11:12:48.93722787 UTC , thread_cap_info = ("ThreadId 90", 2, False)}
| S   | | | |      
| | F | | | |      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | F | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | F | | | |      = 37} , self = 59 , parent = Nothing , duration = 0.136091543000 , status
| | F | | | |      = Fail , start = 2025-09-03 11:12:48.937172949 UTC , finish = 2025-09-03
| | F | | | |      11:12:49.073264492 UTC , thread_cap_info = ("ThreadId 100", 2, False)}
| | F | | | |      
| S | | | | |      
| F | | | | |      Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F | | | | |      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F | | | | |      = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| F | | | | |      = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| F | | | | |      = 39} , self = 60 , parent = Nothing , duration = 0.366315168000 , status
| F | | | | |      = Fail , start = 2025-09-03 11:12:49.032665884 UTC , finish = 2025-09-03
| F | | | | |      11:12:49.398981052 UTC , thread_cap_info = ("ThreadId 106", 2, False)}
| F | | | | |      
| | | | | | | F    Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 10 , num_strict_rules
| | | | | | | F    = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size = 4 , total_length
| | | | | | | F    = 39} , self = 61 , parent = Nothing , duration = 0.416136159000 , status
| | | | | | | F    = Fail , start = 2025-09-03 11:12:49.037928889 UTC , finish = 2025-09-03
| | | | | | | F    11:12:49.454065048 UTC , thread_cap_info = ("ThreadId 107", 2, False)}
| | | | | | | F    
| | | | | | | | F  Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | | | | | | F  , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | | | | | | F  = 10 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 ,
| | | | | | | | F  alphabet_size = 4 , total_length = 37} , self = 65 , parent = Nothing ,
| | | | | | | | F  duration = 1.351444082000 , status = Fail , start = 2025-09-03 11:12:49.041762527
| | | | | | | | F  UTC , finish = 2025-09-03 11:12:50.393206609 UTC , thread_cap_info = ("ThreadId
| | | | | | | | F  108", 2, False)}
| | | | | | | | F  
| | | | | | F | |  
| | F | | |   | |  
| | S | | |   | |  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | S | | |   | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S | | |   | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S | | |   | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S | | |   | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S | | |   | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| | S | | |   | |  , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| | S | | |   | |  = 4 , total_length = 37} , self = 66 , parent = Nothing , duration = 1.464007960000
| | S | | |   | |  , status = Success , start = 2025-09-03 11:12:49.132819339 UTC , finish
| | S | | |   | |  = 2025-09-03 11:12:50.596827299 UTC , thread_cap_info = ("ThreadId 111",
| | S | | |   | |  2, False)}
| | S | | |   | |  
| F | | | |   | |  
|   | | | |   F |  
|   | F | |     |  
|   |   F |     |  
|   |     F     |  
|   |           F  
| E |              Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E |              = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E |              = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E |              , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |              \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |              , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 10
| E |              , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 8 , alphabet_size
| E |              = 4 , total_length = 37} , self = 68 , parent = Nothing , duration = 0.185828965000
| E |              , status = Except "AsyncCancelled" , start = 2025-09-03 11:12:50.411858842
| E |              UTC , finish = 2025-09-03 11:12:50.597687807 UTC , thread_cap_info = ("ThreadId
| E |              125", 2, False)}
| E |              
| | S              
| E                
E                  
