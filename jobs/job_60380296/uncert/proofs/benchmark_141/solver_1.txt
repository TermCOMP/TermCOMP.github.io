NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/slTs3.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 136 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class WhileNested {

    public static void increase_aux(int j) {
	if (j > 0) increase_aux(j + 1);
    }

    public static void increase(int i) {
	if (i < 10) {
	    increase_aux(i);
	    increase(i + 1);
	}
    }

    public static void main(String[] args) {
	increase(args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class WhileNested {

    public static void increase_aux(int j) {
	if (j > 0) increase_aux(j + 1);
    }

    public static void increase(int i) {
	if (i < 10) {
	    increase_aux(i);
	    increase(i + 1);
	}
    }

    public static void main(String[] args) {
	increase(args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<WhileNested.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<WhileNested.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<WhileNested.main||2: WhileNested.increase(I)V|| - ||1>
YES:  (JL1)
3:<WhileNested.increase||0: load INT #0||#0: 1|| ->
YES:  (JL1)
4:<WhileNested.increase||1: push 10||#0: 1||1>
YES:  (JL1)
5:<WhileNested.increase||3: GE||#0: 1||1, 10>
YES:  (JL1)
6:<WhileNested.increase||6: load INT #0||#0: 1|| ->
YES:  (JL1)
7:<WhileNested.increase||7: WhileNested.increase_aux(I)V||#0: 1||1>
YES:  (JL1)
8:<WhileNested.increase_aux||0: load INT #0||#0: 1|| ->
YES:  (JL1)
Start state of loop: 

[i158(lv_0_0)]
<WhileNested.increase_aux||0: load INT #0||#0: i158|| ->
	i158: [0,+inf)(l3)
YES:  (JL1)


In the loop head node, references [i158] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i158 and (((path1_i158 = path1_i159 and path1_i161 = (path1_i159 + 1) and path1_i161 = res_i158 and path1_i158 = initial_i158) and path1_i159 > 0) and ((res1_i158 = res1_i159 and res1_i161 = (res1_i159 + 1) and res_i158 = res1_i158) and !res1_i159 > 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
