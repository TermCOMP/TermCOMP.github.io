NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/zOFj2.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 108 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class TrueDiv {
	
    public static void loop(int i) {
	if (i <= 0) i--;
	else i++;
	loop(i);
    }
	
    public static void main(String[] args) {
	loop(args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class TrueDiv {
	
    public static void loop(int i) {
	if (i <= 0) i--;
	else i++;
	loop(i);
    }
	
    public static void main(String[] args) {
	loop(args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<TrueDiv.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<TrueDiv.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<TrueDiv.main||2: TrueDiv.loop(I)V|| - ||1>
YES:  (JL1)
3:<TrueDiv.loop||0: load INT #0||#0: 1|| ->
YES:  (JL1)
Start state of loop: 

[i227(lv_0_0)]
<TrueDiv.loop||0: load INT #0||#0: i227|| ->
	i227: #
YES:  (JL1)


In the loop head node, references [i227] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and ((((path1_i227 = path1_i250 and path1_i253 = (path1_i250 + 1) and path1_i253 = res_i227 and path1_i227 = initial_i227) and path1_i250 > 0) or ((path2_i227 = path2_i249 and path2_i252 = (path2_i249 + -1) and path2_i252 = res_i227 and path2_i227 = initial_i227) and path2_i249 <= 0)) and (((res1_i227 = res1_i250 and res1_i253 = (res1_i250 + 1) and res_i227 = res1_i227) and !res1_i250 > 0) and ((res2_i227 = res2_i249 and res2_i252 = (res2_i249 + -1) and res_i227 = res2_i227) and !res2_i249 <= 0))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
