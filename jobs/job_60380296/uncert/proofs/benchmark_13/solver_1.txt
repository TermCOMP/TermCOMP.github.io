YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/83esX.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 281 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 60 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
        (13) AND
            (14) IRSwT
                (15) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (16) IRSwT
                (17) TempFilterProof [SOUND, 15 ms]
                (18) IRSwT
                (19) IRSwTToQDPProof [SOUND, 4 ms]
                (20) QDP
                (21) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (22) YES
            (23) IRSwT
                (24) IntTRSCompressionProof [EQUIVALENT, 0 ms]
                (25) IRSwT
                (26) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
                (27) IRSwT
                (28) TempFilterProof [SOUND, 4 ms]
                (29) IntTRS
                (30) RankingReductionPairProof [EQUIVALENT, 0 ms]
                (31) YES
    (32) JBCTerminationSCC
        (33) SCCToIRSProof [SOUND, 42 ms]
        (34) IRSwT
        (35) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (36) IRSwT
        (37) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
        (38) IRSwT
        (39) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (40) IRSwT
        (41) TempFilterProof [SOUND, 19 ms]
        (42) IntTRS
        (43) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
        (44) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AppE {
	AppE next;

	public static void main(String[] args) {
		Random.args = args;
		AppE list = createList();
		list.appE(Random.random());
	}

	public void appE(int i) {
		if (next == null) {
			if (i <= 0) {
				return;
			} else {
				next = new AppE();
			}
			i--;
	 	}
		next.appE(i);
	}

	public static AppE createList() {
		AppE result = null;
		int length = Random.random();
		while (length > 0) {
			result = new AppE(result);
			length--;
		}
		return result;
	}

	public AppE() {
		this.next = null;
	}

	public AppE(AppE n) {
		this.next = n;
	}
}

class Random {
	static String[] args;
	static int index = 0;

	public static int random() {
		String string = args[index];
		index++;
		return string.length();
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AppE {
	AppE next;

	public static void main(String[] args) {
		Random.args = args;
		AppE list = createList();
		list.appE(Random.random());
	}

	public void appE(int i) {
		if (next == null) {
			if (i <= 0) {
				return;
			} else {
				next = new AppE();
			}
			i--;
	 	}
		next.appE(i);
	}

	public static AppE createList() {
		AppE result = null;
		int length = Random.random();
		while (length > 0) {
			result = new AppE(result);
			length--;
		}
		return result;
	}

	public AppE() {
		this.next = null;
	}

	public AppE(AppE n) {
		this.next = n;
	}
}

class Random {
	static String[] args;
	static int index = 0;

	public static int random() {
		String string = args[index];
		index++;
		return string.length();
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
AppE.main([Ljava/lang/String;)V: Graph of 121 nodes with 0 SCCs.



AppE.createList()LAppE;: Graph of 139 nodes with 1 SCC.



AppE.appE(I)V: Graph of 50 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: AppE.appE(I)V
SCC calls the following helper methods: AppE.appE(I)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*AppE: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 36 IRulesP rules:
f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266, java.lang.Object(AppE(EOC, o329)), i266, java.lang.Object(AppE(EOC, o329))) -> f3121_0_appE_FieldAccess(EOS(STATIC_3121), i266, java.lang.Object(AppE(EOC, o329)), i266, java.lang.Object(AppE(EOC, o329))) :|: TRUE
f3121_0_appE_FieldAccess(EOS(STATIC_3121), i266, java.lang.Object(AppE(EOC, o329)), i266, java.lang.Object(AppE(EOC, o329))) -> f3125_0_appE_NONNULL(EOS(STATIC_3125), i266, java.lang.Object(AppE(EOC, o329)), i266, o329) :|: TRUE
f3125_0_appE_NONNULL(EOS(STATIC_3125), i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub))), i266, java.lang.Object(o330sub)) -> f3128_0_appE_NONNULL(EOS(STATIC_3128), i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub))), i266, java.lang.Object(o330sub)) :|: TRUE
f3125_0_appE_NONNULL(EOS(STATIC_3125), i266, java.lang.Object(AppE(EOC, NULL)), i266, NULL) -> f3129_0_appE_NONNULL(EOS(STATIC_3129), i266, java.lang.Object(AppE(EOC, NULL)), i266, NULL) :|: TRUE
f3128_0_appE_NONNULL(EOS(STATIC_3128), i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub))), i266, java.lang.Object(o330sub)) -> f3133_0_appE_Load(EOS(STATIC_3133), i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub))), i266) :|: TRUE
f3133_0_appE_Load(EOS(STATIC_3133), i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub))), i266) -> f3138_0_appE_FieldAccess(EOS(STATIC_3138), i266, i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub)))) :|: TRUE
f3138_0_appE_FieldAccess(EOS(STATIC_3138), i266, i266, java.lang.Object(AppE(EOC, java.lang.Object(o330sub)))) -> f3142_0_appE_Load(EOS(STATIC_3142), i266, i266, java.lang.Object(o330sub)) :|: TRUE
f3142_0_appE_Load(EOS(STATIC_3142), i266, i266, java.lang.Object(o330sub)) -> f3164_0_appE_InvokeMethod(EOS(STATIC_3164), i266, java.lang.Object(o330sub), i266) :|: TRUE
f3164_0_appE_InvokeMethod(EOS(STATIC_3164), i266, java.lang.Object(o330sub), i266) -> f3178_0_appE_Load(EOS(STATIC_3178), i266, java.lang.Object(o330sub), i266) :|: i238 > 1
f3164_0_appE_InvokeMethod(EOS(STATIC_3164), i266, java.lang.Object(o330sub), i266) -> f3178_1_appE_Load(EOS(STATIC_3178), i266, java.lang.Object(o330sub), i266) :|: i238 > 1
f3178_0_appE_Load(EOS(STATIC_3178), i266, java.lang.Object(o330sub), i266) -> f3197_0_appE_Load(EOS(STATIC_3197), i266, java.lang.Object(o330sub), i266) :|: TRUE
f3197_0_appE_Load(EOS(STATIC_3197), i266, java.lang.Object(o330sub), i266) -> f3099_0_appE_Load(EOS(STATIC_3099), i266, java.lang.Object(o330sub), i266) :|: TRUE
f3099_0_appE_Load(EOS(STATIC_3099), i266, java.lang.Object(o326sub), i266) -> f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266, java.lang.Object(o326sub), i266, java.lang.Object(o326sub)) :|: TRUE
f3129_0_appE_NONNULL(EOS(STATIC_3129), i266, java.lang.Object(AppE(EOC, NULL)), i266, NULL) -> f3134_0_appE_Load(EOS(STATIC_3134), i266, java.lang.Object(AppE(EOC, NULL)), i266) :|: TRUE
f3134_0_appE_Load(EOS(STATIC_3134), i266, java.lang.Object(AppE(EOC, NULL)), i266) -> f3139_0_appE_GT(EOS(STATIC_3139), i266, java.lang.Object(AppE(EOC, NULL)), i266, i266) :|: TRUE
f3139_0_appE_GT(EOS(STATIC_3139), i283, java.lang.Object(AppE(EOC, NULL)), i283, i283) -> f3144_0_appE_GT(EOS(STATIC_3144), i283, java.lang.Object(AppE(EOC, NULL)), i283, i283) :|: TRUE
f3144_0_appE_GT(EOS(STATIC_3144), i283, java.lang.Object(AppE(EOC, NULL)), i283, i283) -> f3169_0_appE_Load(EOS(STATIC_3169), i283, java.lang.Object(AppE(EOC, NULL)), i283) :|: i283 > 0
f3169_0_appE_Load(EOS(STATIC_3169), i283, java.lang.Object(AppE(EOC, NULL)), i283) -> f3182_0_appE_New(EOS(STATIC_3182), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f3182_0_appE_New(EOS(STATIC_3182), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL))) -> f3227_0_appE_Duplicate(EOS(STATIC_3227), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f3227_0_appE_Duplicate(EOS(STATIC_3227), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f3243_0_appE_InvokeMethod(EOS(STATIC_3243), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f3243_0_appE_InvokeMethod(EOS(STATIC_3243), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f3263_0__init__Load(EOS(STATIC_3263), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f3263_0__init__Load(EOS(STATIC_3263), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6402_0__init__InvokeMethod(EOS(STATIC_6402), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6402_0__init__InvokeMethod(EOS(STATIC_6402), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6411_0__init__Load(EOS(STATIC_6411), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6411_0__init__Load(EOS(STATIC_6411), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6415_0__init__ConstantStackPush(EOS(STATIC_6415), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6415_0__init__ConstantStackPush(EOS(STATIC_6415), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6445_0__init__FieldAccess(EOS(STATIC_6445), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), NULL) :|: TRUE
f6445_0__init__FieldAccess(EOS(STATIC_6445), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL)), NULL) -> f6450_0__init__Return(EOS(STATIC_6450), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6450_0__init__Return(EOS(STATIC_6450), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6470_0_appE_FieldAccess(EOS(STATIC_6470), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6470_0_appE_FieldAccess(EOS(STATIC_6470), i283, java.lang.Object(AppE(EOC, NULL)), i283, java.lang.Object(AppE(EOC, NULL)), java.lang.Object(AppE(EOC, NULL))) -> f6479_0_appE_Inc(EOS(STATIC_6479), i283, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL)))), i283) :|: TRUE
f6479_0_appE_Inc(EOS(STATIC_6479), i283, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL)))), i283) -> f6485_0_appE_Load(EOS(STATIC_6485), i283, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL)))), i283 + -1) :|: TRUE
f6485_0_appE_Load(EOS(STATIC_6485), i283, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL)))), i483) -> f6489_0_appE_FieldAccess(EOS(STATIC_6489), i283, i483, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL))))) :|: TRUE
f6489_0_appE_FieldAccess(EOS(STATIC_6489), i283, i483, java.lang.Object(AppE(EOC, java.lang.Object(AppE(EOC, NULL))))) -> f6493_0_appE_Load(EOS(STATIC_6493), i283, i483, java.lang.Object(AppE(EOC, NULL))) :|: TRUE
f6493_0_appE_Load(EOS(STATIC_6493), i283, i483, java.lang.Object(AppE(EOC, NULL))) -> f6498_0_appE_InvokeMethod(EOS(STATIC_6498), i283, java.lang.Object(AppE(EOC, NULL)), i483) :|: TRUE
f6498_0_appE_InvokeMethod(EOS(STATIC_6498), i283, java.lang.Object(AppE(EOC, NULL)), i483) -> f6499_0_appE_Load(EOS(STATIC_6499), i483, java.lang.Object(AppE(EOC, NULL)), i483) :|: i283 >= 1 && i238 > 1 && i483 < i283
f6498_0_appE_InvokeMethod(EOS(STATIC_6498), i283, java.lang.Object(AppE(EOC, NULL)), i483) -> f6499_1_appE_Load(EOS(STATIC_6499), i283, java.lang.Object(AppE(EOC, NULL)), i483) :|: i283 >= 1 && i238 > 1 && i483 < i283
f6499_0_appE_Load(EOS(STATIC_6499), i483, java.lang.Object(AppE(EOC, NULL)), i483) -> f6506_0_appE_Load(EOS(STATIC_6506), i483, java.lang.Object(AppE(EOC, NULL)), i483) :|: TRUE
f6506_0_appE_Load(EOS(STATIC_6506), i483, java.lang.Object(AppE(EOC, NULL)), i483) -> f3099_0_appE_Load(EOS(STATIC_3099), i483, java.lang.Object(AppE(EOC, NULL)), i483) :|: TRUE
Combined rules. Obtained 4 IRulesP rules:
f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0, java.lang.Object(AppE(EOC, java.lang.Object(o330sub:0))), i266:0, java.lang.Object(AppE(EOC, java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0, java.lang.Object(o330sub:0), i266:0, java.lang.Object(o330sub:0)) :|: TRUE
f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0, java.lang.Object(AppE(EOC, NULL)), i266:0, java.lang.Object(AppE(EOC, NULL))) -> f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0 - 1, java.lang.Object(AppE(EOC, NULL)), i266:0 - 1, java.lang.Object(AppE(EOC, NULL))) :|: i266:0 > 0 && i238:0 > 1 && i266:0 - 1 < i266:0
Removed following non-SCC rules:
f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0, java.lang.Object(AppE(EOC, NULL)), i266:0, java.lang.Object(AppE(EOC, NULL))) -> f6499_1_appE_Load(EOS(STATIC_6499), i266:0, java.lang.Object(AppE(EOC, NULL)), i266:0 - 1) :|: i266:0 > 0 && i238:0 > 1 && i266:0 - 1 < i266:0
f3109_0_appE_FieldAccess(EOS(STATIC_3109), i266:0, java.lang.Object(AppE(EOC, java.lang.Object(o330sub:0))), i266:0, java.lang.Object(AppE(EOC, java.lang.Object(o330sub:0)))) -> f3178_1_appE_Load(EOS(STATIC_3178), i266:0, java.lang.Object(o330sub:0), i266:0) :|: TRUE
Filtered constant ground arguments:
   f3109_0_appE_FieldAccess(x1, x2, x3, x4, x5) -> f3109_0_appE_FieldAccess(x2, x3, x4, x5)
   EOS(x1) -> EOS
   AppE(x1, x2) -> AppE(x2)
Filtered duplicate arguments:
   f3109_0_appE_FieldAccess(x1, x2, x3, x4) -> f3109_0_appE_FieldAccess(x3, x4)
Finished conversion. Obtained 2 rules.P rules:
f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(i266:0, java.lang.Object(o330sub:0)) :|: TRUE
f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(i266:0 - 1, java.lang.Object(AppE(NULL))) :|: i238:0 > 1 && i266:0 - 1 < i266:0 && i266:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(i266:0, java.lang.Object(o330sub:0)) :|: TRUE
f3109_0_appE_FieldAccess(x, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(x - 1, java.lang.Object(AppE(NULL))) :|: x1 > 1 && x - 1 < x && x > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(i266:0, java.lang.Object(o330sub:0)) :|: TRUE
f3109_0_appE_FieldAccess(x, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(arith, java.lang.Object(AppE(NULL))) :|: x1 > 1 && x - 1 < x && x > 0 && arith = x - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(i266:0, java.lang.Object(o330sub:0)) :|: TRUE
(2) f3109_0_appE_FieldAccess(x, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(arith, java.lang.Object(AppE(NULL))) :|: x1 > 1 && x - 1 < x && x > 0 && arith = x - 1

Arcs:
(1) -> (1), (2)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(13)
Complex Obligation (AND)

----------------------------------------

(14)
Obligation:

Termination digraph:
Nodes:
(1) f3109_0_appE_FieldAccess(i266:0, java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(i266:0, java.lang.Object(o330sub:0)) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(15) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f3109_0_appE_FieldAccess(x1, x2) -> f3109_0_appE_FieldAccess(x2)

----------------------------------------

(16)
Obligation:
Rules:
f3109_0_appE_FieldAccess(java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(java.lang.Object(o330sub:0)) :|: TRUE

----------------------------------------

(17) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3109_0_appE_FieldAccess(VARIABLE)
java.lang.Object(VARIABLE)
AppE(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(18)
Obligation:
Rules:
f3109_0_appE_FieldAccess(java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(java.lang.Object(o330sub:0))

----------------------------------------

(19) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f3109_0_appE_FieldAccess(java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(java.lang.Object(o330sub:0))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f3109_0_appE_FieldAccess(java.lang.Object(AppE(java.lang.Object(o330sub:0)))) -> f3109_0_appE_FieldAccess(java.lang.Object(o330sub:0))
The graph contains the following edges 1 > 1


----------------------------------------

(22)
YES

----------------------------------------

(23)
Obligation:

Termination digraph:
Nodes:
(1) f3109_0_appE_FieldAccess(x, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(arith, java.lang.Object(AppE(NULL))) :|: x1 > 1 && x - 1 < x && x > 0 && arith = x - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(24) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(25)
Obligation:
Rules:
f3109_0_appE_FieldAccess(x:0, java.lang.Object(AppE(NULL))) -> f3109_0_appE_FieldAccess(x:0 - 1, java.lang.Object(AppE(NULL))) :|: x1:0 > 1 && x:0 - 1 < x:0 && x:0 > 0

----------------------------------------

(26) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f3109_0_appE_FieldAccess(x1, x2) -> f3109_0_appE_FieldAccess(x1)

----------------------------------------

(27)
Obligation:
Rules:
f3109_0_appE_FieldAccess(x:0) -> f3109_0_appE_FieldAccess(x:0 - 1) :|: x1:0 > 1 && x:0 - 1 < x:0 && x:0 > 0

----------------------------------------

(28) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f3109_0_appE_FieldAccess(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(29)
Obligation:
Rules:
f3109_0_appE_FieldAccess(x:0) -> f3109_0_appE_FieldAccess(c) :|: c = x:0 - 1 && (x1:0 > 1 && x:0 - 1 < x:0 && x:0 > 0)

----------------------------------------

(30) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f3109_0_appE_FieldAccess ] = f3109_0_appE_FieldAccess_1

The following rules are decreasing:
f3109_0_appE_FieldAccess(x:0) -> f3109_0_appE_FieldAccess(c) :|: c = x:0 - 1 && (x1:0 > 1 && x:0 - 1 < x:0 && x:0 > 0)

The following rules are bounded:
f3109_0_appE_FieldAccess(x:0) -> f3109_0_appE_FieldAccess(c) :|: c = x:0 - 1 && (x1:0 > 1 && x:0 - 1 < x:0 && x:0 > 0)


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: AppE.createList()LAppE;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(33) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f2509_0_createList_LE(EOS(STATIC_2509), i237, i237) -> f2518_0_createList_LE(EOS(STATIC_2518), i237, i237) :|: TRUE
f2518_0_createList_LE(EOS(STATIC_2518), i237, i237) -> f2527_0_createList_New(EOS(STATIC_2527), i237) :|: i237 > 0
f2527_0_createList_New(EOS(STATIC_2527), i237) -> f2629_0_createList_Duplicate(EOS(STATIC_2629), i237) :|: TRUE
f2629_0_createList_Duplicate(EOS(STATIC_2629), i237) -> f2651_0_createList_Load(EOS(STATIC_2651), i237) :|: TRUE
f2651_0_createList_Load(EOS(STATIC_2651), i237) -> f2685_0_createList_InvokeMethod(EOS(STATIC_2685), i237) :|: TRUE
f2685_0_createList_InvokeMethod(EOS(STATIC_2685), i237) -> f2717_0__init__Load(EOS(STATIC_2717), i237) :|: TRUE
f2717_0__init__Load(EOS(STATIC_2717), i237) -> f2896_0__init__InvokeMethod(EOS(STATIC_2896), i237) :|: TRUE
f2896_0__init__InvokeMethod(EOS(STATIC_2896), i237) -> f2901_0__init__Load(EOS(STATIC_2901), i237) :|: TRUE
f2901_0__init__Load(EOS(STATIC_2901), i237) -> f2914_0__init__Load(EOS(STATIC_2914), i237) :|: TRUE
f2914_0__init__Load(EOS(STATIC_2914), i237) -> f2924_0__init__FieldAccess(EOS(STATIC_2924), i237) :|: TRUE
f2924_0__init__FieldAccess(EOS(STATIC_2924), i237) -> f2938_0__init__Return(EOS(STATIC_2938), i237) :|: TRUE
f2938_0__init__Return(EOS(STATIC_2938), i237) -> f2991_0_createList_Store(EOS(STATIC_2991), i237) :|: TRUE
f2991_0_createList_Store(EOS(STATIC_2991), i237) -> f3004_0_createList_Inc(EOS(STATIC_3004), i237) :|: TRUE
f3004_0_createList_Inc(EOS(STATIC_3004), i237) -> f3017_0_createList_JMP(EOS(STATIC_3017), i237 + -1) :|: TRUE
f3017_0_createList_JMP(EOS(STATIC_3017), i278) -> f3055_0_createList_Load(EOS(STATIC_3055), i278) :|: TRUE
f3055_0_createList_Load(EOS(STATIC_3055), i278) -> f2500_0_createList_Load(EOS(STATIC_2500), i278) :|: TRUE
f2500_0_createList_Load(EOS(STATIC_2500), i232) -> f2509_0_createList_LE(EOS(STATIC_2509), i232, i232) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f2509_0_createList_LE(EOS(STATIC_2509), i237:0, i237:0) -> f2509_0_createList_LE(EOS(STATIC_2509), i237:0 - 1, i237:0 - 1) :|: i237:0 > 0
Filtered constant ground arguments:
   f2509_0_createList_LE(x1, x2, x3) -> f2509_0_createList_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2509_0_createList_LE(x1, x2) -> f2509_0_createList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f2509_0_createList_LE(i237:0) -> f2509_0_createList_LE(i237:0 - 1) :|: i237:0 > 0

----------------------------------------

(34)
Obligation:
Rules:
f2509_0_createList_LE(i237:0) -> f2509_0_createList_LE(i237:0 - 1) :|: i237:0 > 0

----------------------------------------

(35) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(36)
Obligation:
Rules:
f2509_0_createList_LE(i237:0) -> f2509_0_createList_LE(arith) :|: i237:0 > 0 && arith = i237:0 - 1

----------------------------------------

(37) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2509_0_createList_LE(i237:0) -> f2509_0_createList_LE(arith) :|: i237:0 > 0 && arith = i237:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(38)
Obligation:

Termination digraph:
Nodes:
(1) f2509_0_createList_LE(i237:0) -> f2509_0_createList_LE(arith) :|: i237:0 > 0 && arith = i237:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(39) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(40)
Obligation:
Rules:
f2509_0_createList_LE(i237:0:0) -> f2509_0_createList_LE(i237:0:0 - 1) :|: i237:0:0 > 0

----------------------------------------

(41) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2509_0_createList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(42)
Obligation:
Rules:
f2509_0_createList_LE(i237:0:0) -> f2509_0_createList_LE(c) :|: c = i237:0:0 - 1 && i237:0:0 > 0

----------------------------------------

(43) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2509_0_createList_LE(x)] = x

The following rules are decreasing:
f2509_0_createList_LE(i237:0:0) -> f2509_0_createList_LE(c) :|: c = i237:0:0 - 1 && i237:0:0 > 0
The following rules are bounded:
f2509_0_createList_LE(i237:0:0) -> f2509_0_createList_LE(c) :|: c = i237:0:0 - 1 && i237:0:0 > 0

----------------------------------------

(44)
YES
