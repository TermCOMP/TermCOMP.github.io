YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IHUbD.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 175 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 62 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 25 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 32 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 1 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Avg {
	public static void main(String[] args) {
		int x, y;
		x = args[0].length();
		y = args[1].length();
		average(x,y);
	}

	public static int average(int x, int y) {
		if (x > 0) {
			return average(x-1, y+1);
		} else if (y > 2) {
			return 1 + average(x+1, y-2);
		} else {
			return 1;
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Avg {
	public static void main(String[] args) {
		int x, y;
		x = args[0].length();
		y = args[1].length();
		average(x,y);
	}

	public static int average(int x, int y) {
		if (x > 0) {
			return average(x-1, y+1);
		} else if (y > 2) {
			return 1 + average(x+1, y-2);
		} else {
			return 1;
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Avg.main([Ljava/lang/String;)V: Graph of 136 nodes with 0 SCCs.



Avg.average(II)I: Graph of 56 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Avg.average(II)I
SCC calls the following helper methods: Avg.average(II)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 30 IRulesP rules:
f216_0_average_LE(EOS(STATIC_216), matching1, i30, matching2, i30, matching3) -> f219_0_average_LE(EOS(STATIC_219), 0, i30, 0, i30, 0) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 0
f216_0_average_LE(EOS(STATIC_216), i34, i30, i34, i30, i34) -> f220_0_average_LE(EOS(STATIC_220), i34, i30, i34, i30, i34) :|: TRUE
f219_0_average_LE(EOS(STATIC_219), matching1, i30, matching2, i30, matching3) -> f223_0_average_Load(EOS(STATIC_223), 0, i30, 0, i30) :|: 0 <= 0 && matching1 = 0 && matching2 = 0 && matching3 = 0
f223_0_average_Load(EOS(STATIC_223), matching1, i30, matching2, i30) -> f227_0_average_ConstantStackPush(EOS(STATIC_227), 0, i30, 0, i30, i30) :|: TRUE && matching1 = 0 && matching2 = 0
f227_0_average_ConstantStackPush(EOS(STATIC_227), matching1, i30, matching2, i30, i30) -> f231_0_average_LE(EOS(STATIC_231), 0, i30, 0, i30, i30, 2) :|: TRUE && matching1 = 0 && matching2 = 0
f231_0_average_LE(EOS(STATIC_231), matching1, i37, matching2, i37, i37, matching3) -> f238_0_average_LE(EOS(STATIC_238), 0, i37, 0, i37, i37, 2) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 2
f238_0_average_LE(EOS(STATIC_238), matching1, i37, matching2, i37, i37, matching3) -> f248_0_average_ConstantStackPush(EOS(STATIC_248), 0, i37, 0, i37) :|: i37 > 2 && matching1 = 0 && matching2 = 0 && matching3 = 2
f248_0_average_ConstantStackPush(EOS(STATIC_248), matching1, i37, matching2, i37) -> f261_0_average_Load(EOS(STATIC_261), 0, i37, 0, i37, 1) :|: TRUE && matching1 = 0 && matching2 = 0
f261_0_average_Load(EOS(STATIC_261), matching1, i37, matching2, i37, matching3) -> f282_0_average_ConstantStackPush(EOS(STATIC_282), 0, i37, i37, 1, 0) :|: TRUE && matching1 = 0 && matching2 = 0 && matching3 = 1
f282_0_average_ConstantStackPush(EOS(STATIC_282), matching1, i37, i37, matching2, matching3) -> f327_0_average_IntArithmetic(EOS(STATIC_327), 0, i37, i37, 1, 0, 1) :|: TRUE && matching1 = 0 && matching2 = 1 && matching3 = 0
f327_0_average_IntArithmetic(EOS(STATIC_327), matching1, i37, i37, matching2, matching3, matching4) -> f333_0_average_Load(EOS(STATIC_333), 0, i37, i37, 1, 1) :|: TRUE && matching1 = 0 && matching2 = 1 && matching3 = 0 && matching4 = 1
f333_0_average_Load(EOS(STATIC_333), matching1, i37, i37, matching2, matching3) -> f341_0_average_ConstantStackPush(EOS(STATIC_341), 0, i37, 1, 1, i37) :|: TRUE && matching1 = 0 && matching2 = 1 && matching3 = 1
f341_0_average_ConstantStackPush(EOS(STATIC_341), matching1, i37, matching2, matching3, i37) -> f345_0_average_IntArithmetic(EOS(STATIC_345), 0, i37, 1, 1, i37, 2) :|: TRUE && matching1 = 0 && matching2 = 1 && matching3 = 1
f345_0_average_IntArithmetic(EOS(STATIC_345), matching1, i37, matching2, matching3, i37, matching4) -> f356_0_average_InvokeMethod(EOS(STATIC_356), 0, i37, 1, 1, i37 - 2) :|: i37 > 0 && matching1 = 0 && matching2 = 1 && matching3 = 1 && matching4 = 2
f356_0_average_InvokeMethod(EOS(STATIC_356), matching1, i37, matching2, matching3, i56) -> f407_0_average_Load(EOS(STATIC_407), 1, i56, 1, i56) :|: i37 > 1 && i56 >= 1 && i56 < i37 && matching1 = 0 && matching2 = 1 && matching3 = 1
f356_0_average_InvokeMethod(EOS(STATIC_356), matching1, i37, matching2, matching3, i56) -> f407_1_average_Load(EOS(STATIC_407), 0, i37, 1, 1, i56) :|: i37 > 1 && i56 >= 1 && i56 < i37 && matching1 = 0 && matching2 = 1 && matching3 = 1
f407_0_average_Load(EOS(STATIC_407), matching1, i56, matching2, i56) -> f4121_0_average_Load(EOS(STATIC_4121), 1, i56, 1, i56) :|: TRUE && matching1 = 1 && matching2 = 1
f4121_0_average_Load(EOS(STATIC_4121), matching1, i56, matching2, i56) -> f213_0_average_Load(EOS(STATIC_213), 1, i56, 1, i56) :|: TRUE && matching1 = 1 && matching2 = 1
f213_0_average_Load(EOS(STATIC_213), i14, i30, i14, i30) -> f216_0_average_LE(EOS(STATIC_216), i14, i30, i14, i30, i14) :|: TRUE
f220_0_average_LE(EOS(STATIC_220), i34, i30, i34, i30, i34) -> f224_0_average_Load(EOS(STATIC_224), i34, i30, i34, i30) :|: i34 > 0
f224_0_average_Load(EOS(STATIC_224), i34, i30, i34, i30) -> f228_0_average_ConstantStackPush(EOS(STATIC_228), i34, i30, i30, i34) :|: TRUE
f228_0_average_ConstantStackPush(EOS(STATIC_228), i34, i30, i30, i34) -> f232_0_average_IntArithmetic(EOS(STATIC_232), i34, i30, i30, i34, 1) :|: TRUE
f232_0_average_IntArithmetic(EOS(STATIC_232), i34, i30, i30, i34, matching1) -> f240_0_average_Load(EOS(STATIC_240), i34, i30, i30, i34 - 1) :|: i34 > 0 && matching1 = 1
f240_0_average_Load(EOS(STATIC_240), i34, i30, i30, i40) -> f250_0_average_ConstantStackPush(EOS(STATIC_250), i34, i30, i40, i30) :|: TRUE
f250_0_average_ConstantStackPush(EOS(STATIC_250), i34, i30, i40, i30) -> f264_0_average_IntArithmetic(EOS(STATIC_264), i34, i30, i40, i30, 1) :|: TRUE
f264_0_average_IntArithmetic(EOS(STATIC_264), i34, i30, i40, i30, matching1) -> f285_0_average_InvokeMethod(EOS(STATIC_285), i34, i30, i40, i30 + 1) :|: i30 >= 0 && matching1 = 1
f285_0_average_InvokeMethod(EOS(STATIC_285), i34, i30, i40, i42) -> f328_0_average_Load(EOS(STATIC_328), i40, i42, i40, i42) :|: i34 >= 1 && i42 >= 1 && i40 < i34 && i42 > i30
f285_0_average_InvokeMethod(EOS(STATIC_285), i34, i30, i40, i42) -> f328_1_average_Load(EOS(STATIC_328), i34, i30, i40, i42) :|: i34 >= 1 && i42 >= 1 && i40 < i34 && i42 > i30
f328_0_average_Load(EOS(STATIC_328), i40, i42, i40, i42) -> f337_0_average_Load(EOS(STATIC_337), i40, i42, i40, i42) :|: TRUE
f337_0_average_Load(EOS(STATIC_337), i40, i42, i40, i42) -> f213_0_average_Load(EOS(STATIC_213), i40, i42, i40, i42) :|: TRUE
Combined rules. Obtained 4 IRulesP rules:
f216_0_average_LE(EOS(STATIC_216), 0, i30:0, 0, i30:0, 0) -> f216_0_average_LE(EOS(STATIC_216), 1, i30:0 - 2, 1, i30:0 - 2, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0
f216_0_average_LE(EOS(STATIC_216), i34:0, i30:0, i34:0, i30:0, i34:0) -> f216_0_average_LE(EOS(STATIC_216), i34:0 - 1, i30:0 + 1, i34:0 - 1, i30:0 + 1, i34:0 - 1) :|: i34:0 > 0 && i30:0 > -1 && i34:0 - 1 < i34:0 && i30:0 + 1 > i30:0
Removed following non-SCC rules:
f216_0_average_LE(EOS(STATIC_216), 0, i30:0, 0, i30:0, 0) -> f407_1_average_Load(EOS(STATIC_407), 0, i30:0, 1, 1, i30:0 - 2) :|: i30:0 > 2 && i30:0 - 2 < i30:0
f216_0_average_LE(EOS(STATIC_216), i34:0, i30:0, i34:0, i30:0, i34:0) -> f328_1_average_Load(EOS(STATIC_328), i34:0, i30:0, i34:0 - 1, i30:0 + 1) :|: i34:0 > 0 && i30:0 > -1 && i34:0 - 1 < i34:0 && i30:0 + 1 > i30:0
Filtered constant ground arguments:
   f216_0_average_LE(x1, x2, x3, x4, x5, x6) -> f216_0_average_LE(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f216_0_average_LE(x1, x2, x3, x4, x5) -> f216_0_average_LE(x4, x5)
Finished conversion. Obtained 2 rules.P rules:
f216_0_average_LE(i30:0, cons_0) -> f216_0_average_LE(i30:0 - 2, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0 && cons_0 = 0
f216_0_average_LE(i30:0, i34:0) -> f216_0_average_LE(i30:0 + 1, i34:0 - 1) :|: i30:0 > -1 && i34:0 > 0 && i30:0 + 1 > i30:0 && i34:0 - 1 < i34:0

----------------------------------------

(8)
Obligation:
Rules:
f216_0_average_LE(i30:0, cons_0) -> f216_0_average_LE(i30:0 - 2, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0 && cons_0 = 0
f216_0_average_LE(x, x1) -> f216_0_average_LE(x + 1, x1 - 1) :|: x > -1 && x1 > 0 && x + 1 > x && x1 - 1 < x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f216_0_average_LE(i30:0, cons_0) -> f216_0_average_LE(arith, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0 && cons_0 = 0 && arith = i30:0 - 2
f216_0_average_LE(x2, x3) -> f216_0_average_LE(x4, x5) :|: x2 > -1 && x3 > 0 && x2 + 1 > x2 && x3 - 1 < x3 && x4 = x2 + 1 && x5 = x3 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f216_0_average_LE(i30:0, cons_0) -> f216_0_average_LE(arith, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0 && cons_0 = 0 && arith = i30:0 - 2
(2) f216_0_average_LE(x2, x3) -> f216_0_average_LE(x4, x5) :|: x2 > -1 && x3 > 0 && x2 + 1 > x2 && x3 - 1 < x3 && x4 = x2 + 1 && x5 = x3 - 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f216_0_average_LE(i30:0, cons_0) -> f216_0_average_LE(arith, 1) :|: i30:0 > 2 && i30:0 - 2 < i30:0 && cons_0 = 0 && arith = i30:0 - 2
(2) f216_0_average_LE(x2, x3) -> f216_0_average_LE(x4, x5) :|: x2 > -1 && x3 > 0 && x2 + 1 > x2 && x3 - 1 < x3 && x4 = x2 + 1 && x5 = x3 - 1

Arcs:
(1) -> (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f216_0_average_LE(i30:0:0, cons_0) -> f216_0_average_LE(i30:0:0 - 2, 1) :|: i30:0:0 > 2 && i30:0:0 - 2 < i30:0:0 && cons_0 = 0
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(x2:0 + 1, x3:0 - 1) :|: x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f216_0_average_LE(INTEGER, VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f216_0_average_LE(i30:0:0, c) -> f216_0_average_LE(c1, c2) :|: c2 = 1 && (c1 = i30:0:0 - 2 && c = 0) && (i30:0:0 > 2 && i30:0:0 - 2 < i30:0:0 && cons_0 = 0)
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(c3, c4) :|: c4 = x3:0 - 1 && c3 = x2:0 + 1 && (x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f216_0_average_LE(x, x1)] = x + x1

The following rules are decreasing:
f216_0_average_LE(i30:0:0, c) -> f216_0_average_LE(c1, c2) :|: c2 = 1 && (c1 = i30:0:0 - 2 && c = 0) && (i30:0:0 > 2 && i30:0:0 - 2 < i30:0:0 && cons_0 = 0)
The following rules are bounded:
f216_0_average_LE(i30:0:0, c) -> f216_0_average_LE(c1, c2) :|: c2 = 1 && (c1 = i30:0:0 - 2 && c = 0) && (i30:0:0 > 2 && i30:0:0 - 2 < i30:0:0 && cons_0 = 0)
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(c3, c4) :|: c4 = x3:0 - 1 && c3 = x2:0 + 1 && (x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1)

----------------------------------------

(18)
Obligation:
Rules:
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(c3, c4) :|: c4 = x3:0 - 1 && c3 = x2:0 + 1 && (x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f216_0_average_LE(x, x1)] = x1

The following rules are decreasing:
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(c3, c4) :|: c4 = x3:0 - 1 && c3 = x2:0 + 1 && (x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1)
The following rules are bounded:
f216_0_average_LE(x2:0, x3:0) -> f216_0_average_LE(c3, c4) :|: c4 = x3:0 - 1 && c3 = x2:0 + 1 && (x2:0 + 1 > x2:0 && x3:0 - 1 < x3:0 && x3:0 > 0 && x2:0 > -1)

----------------------------------------

(20)
YES
