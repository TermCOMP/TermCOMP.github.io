NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/0u1X6.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 132 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Even {
	
    public static boolean even(int i) {
	if (i == 0) return true;
	else if (i == 1) return false;
	else return even(i - 2);
    }

    public static void main(String[] args) {
	even(-1 * args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Even {
	
    public static boolean even(int i) {
	if (i == 0) return true;
	else if (i == 1) return false;
	else return even(i - 2);
    }

    public static void main(String[] args) {
	even(-1 * args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Even.main||0: push -1||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<Even.main||1: load ADDR #0||#0: a2||-1>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<Even.main||2: arraylength|| - ||-1, a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
3:<Even.main||3: MUL|| - ||-1, 1>
YES:  (JL1)
4:<Even.main||4: Even.even(I)Z|| - ||-1>
YES:  (JL1)
5:<Even.even||0: load INT #0||#0: -1|| ->
YES:  (JL1)
Start state of loop: 

[i7(lv_0_0)]
<Even.even||0: load INT #0||#0: i7|| ->
	i7: (-inf,0]{-inf,+inf}
YES:  (JL1)


In the loop head node, references [i7] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(initial_i7 <= 0 and (((path1_i7 = path1_i14 and path1_i22 = (path1_i14 - 2) and path1_i22 = res_i7 and path1_i7 = initial_i7) and (path1_i14 < 0 and path1_i14 < 1)) and ((res1_i7 = res1_i14 and res1_i22 = (res1_i14 - 2) and res_i7 = res1_i7) and !(res1_i14 < 0 and res1_i14 < 1))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
