NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/IROEP.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 185 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 24 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class TerminatorRec04 {
	public static void main(String[] args) {
		int x = args.length;
		while (x > 0) {
			f(x);
			x = x + 1;
		}
	}

	public static void f(int x) {
		if (x > 0) {
			f(x - 1);
		}
		return;
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class TerminatorRec04 {
	public static void main(String[] args) {
		int x = args.length;
		while (x > 0) {
			f(x);
			x = x + 1;
		}
	}

	public static void f(int x) {
		if (x > 0) {
			f(x - 1);
		}
		return;
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
TerminatorRec04.main([Ljava/lang/String;)V: Graph of 22 nodes with 1 SCC.



TerminatorRec04.f(I)V: Graph of 16 nodes with 0 SCCs.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<TerminatorRec04.main||0: load ADDR args||args: a10|| ->
	a10([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<TerminatorRec04.main||1: arraylength|| - ||a10>
	a10([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<TerminatorRec04.main||2: store INT to x|| - ||1>
YES:  (JL1)
3:<TerminatorRec04.main||3: load INT x||x: 1|| ->
YES:  (JL1)
Start state of loop: 

[a4(lv_0_0)]
<TerminatorRec04.main||3: load INT x||x: i772|| ->
	i770: [0,+inf)(l1)
	a4([java.lang.String...]): length i770 -->{java.lang.Object...}
	i772: [0,+inf)(l1)
YES:  (JL1)


In the loop head node, references [i772] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i772 and 0 <= initial_i770) and (((path1_i772 = path1_i1270 and path1_i1270 = path1_i1283 and path1_i1495 = (path1_i1283 + 1) and path1_i1495 = res_i772 and path1_i772 = initial_i772) and path1_i1270 > 0) and ((res1_i772 = res1_i1270 and res1_i1270 = res1_i1283 and res1_i1495 = (res1_i1283 + 1) and res_i772 = res1_i772) and !res1_i1270 > 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
