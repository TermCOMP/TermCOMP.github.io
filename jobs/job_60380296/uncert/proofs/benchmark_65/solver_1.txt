YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ljNm0.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 27 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class FactSumList {
    static int factorial(int n){
	int fact = 1;
	for (int i=1; i <= n; i++) fact = fact * i;
	return fact;	  
    }

    public static int doSum(ListReverse x){
	if (x==null) return 0;
	else return factorial(x.data) + doSum(x.next);	
    }

    public static void main(String [] args) {
	ListReverse l = new ListReverse();
	l.next = new ListReverse();
	doSum(l);
    }
}


class ListReverse {
    ListReverse next;
    int  data;
    int length;

    public ListReverse listReverse(ListReverse x) {
	ListReverse result = null;
	ListReverse tmp = null;

	while ( x != null ) {
	    tmp = x.next;
	    x.next = result;
	    result = x;
	    x = tmp;
	}

	return result;
    }
   
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class FactSumList {
    static int factorial(int n){
	int fact = 1;
	for (int i=1; i <= n; i++) fact = fact * i;
	return fact;	  
    }

    public static int doSum(ListReverse x){
	if (x==null) return 0;
	else return factorial(x.data) + doSum(x.next);	
    }

    public static void main(String [] args) {
	ListReverse l = new ListReverse();
	l.next = new ListReverse();
	doSum(l);
    }
}


class ListReverse {
    ListReverse next;
    int  data;
    int length;

    public ListReverse listReverse(ListReverse x) {
	ListReverse result = null;
	ListReverse tmp = null;

	while ( x != null ) {
	    tmp = x.next;
	    x.next = result;
	    result = x;
	    x = tmp;
	}

	return result;
    }
   
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
FactSumList.main([Ljava/lang/String;)V: Graph of 62 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
