YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3WFPB.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 321 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 108 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 90 ms]
(12) AND
    (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 17 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (19) IntTRS
        (20) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (21) IntTRS
        (22) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (23) YES
    (24) IRSwT
        (25) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) TempFilterProof [SOUND, 27 ms]
        (28) IntTRS
        (29) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (30) IntTRS
        (31) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (32) IntTRS
        (33) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
        (34) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AProVEMathRecursive {
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    power(x, y);
  }

  public static int power(int base, int exponent) {           
    if (exponent <= 0) {
      return 1;
    } else if (exponent == 1) {
      return base;
    } else if (base == 2) {
      return base << (exponent-1);
    } else if (exponent % 2 == 1) {
      return base * power(base, exponent-1);
    } else {
      int halfPower = power(base, exponent/2);
      return halfPower * halfPower;
    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    if (args.length <= index) {
      return 0;
    }
    String string = args[index];
    index++;
    if (string == null) {
      return 0;
    }
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AProVEMathRecursive {
  public static void main(String[] args) {
    Random.args = args;
    int x = Random.random();
    int y = Random.random();
    power(x, y);
  }

  public static int power(int base, int exponent) {           
    if (exponent <= 0) {
      return 1;
    } else if (exponent == 1) {
      return base;
    } else if (base == 2) {
      return base << (exponent-1);
    } else if (exponent % 2 == 1) {
      return base * power(base, exponent-1);
    } else {
      int halfPower = power(base, exponent/2);
      return halfPower * halfPower;
    }
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    if (args.length <= index) {
      return 0;
    }
    String string = args[index];
    index++;
    if (string == null) {
      return 0;
    }
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
AProVEMathRecursive.main([Ljava/lang/String;)V: Graph of 321 nodes with 0 SCCs.



AProVEMathRecursive.power(II)I: Graph of 125 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: AProVEMathRecursive.power(II)I
SCC calls the following helper methods: AProVEMathRecursive.power(II)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 63 IRulesP rules:
f4839_0_power_GT(EOS(STATIC_4839), i604, i752, i604, i752, i752) -> f4856_0_power_GT(EOS(STATIC_4856), i604, i752, i604, i752, i752) :|: TRUE
f4856_0_power_GT(EOS(STATIC_4856), i604, i752, i604, i752, i752) -> f4868_0_power_Load(EOS(STATIC_4868), i604, i752, i604, i752) :|: i752 > 0
f4868_0_power_Load(EOS(STATIC_4868), i604, i752, i604, i752) -> f4879_0_power_ConstantStackPush(EOS(STATIC_4879), i604, i752, i604, i752, i752) :|: TRUE
f4879_0_power_ConstantStackPush(EOS(STATIC_4879), i604, i752, i604, i752, i752) -> f4894_0_power_NE(EOS(STATIC_4894), i604, i752, i604, i752, i752, 1) :|: TRUE
f4894_0_power_NE(EOS(STATIC_4894), i604, i806, i604, i806, i806, matching1) -> f4974_0_power_NE(EOS(STATIC_4974), i604, i806, i604, i806, i806, 1) :|: TRUE && matching1 = 1
f4974_0_power_NE(EOS(STATIC_4974), i604, i806, i604, i806, i806, matching1) -> f5255_0_power_Load(EOS(STATIC_5255), i604, i806, i604, i806) :|: i806 > 1 && matching1 = 1
f5255_0_power_Load(EOS(STATIC_5255), i604, i806, i604, i806) -> f5962_0_power_ConstantStackPush(EOS(STATIC_5962), i604, i806, i604, i806, i604) :|: TRUE
f5962_0_power_ConstantStackPush(EOS(STATIC_5962), i604, i806, i604, i806, i604) -> f5978_0_power_NE(EOS(STATIC_5978), i604, i806, i604, i806, i604, 2) :|: TRUE
f5978_0_power_NE(EOS(STATIC_5978), i976, i806, i976, i806, i976, matching1) -> f6081_0_power_NE(EOS(STATIC_6081), i976, i806, i976, i806, i976, 2) :|: TRUE && matching1 = 2
f5978_0_power_NE(EOS(STATIC_5978), i977, i806, i977, i806, i977, matching1) -> f6083_0_power_NE(EOS(STATIC_6083), i977, i806, i977, i806, i977, 2) :|: TRUE && matching1 = 2
f6081_0_power_NE(EOS(STATIC_6081), i976, i806, i976, i806, i976, matching1) -> f6136_0_power_Load(EOS(STATIC_6136), i976, i806, i976, i806) :|: i976 < 2 && matching1 = 2
f6136_0_power_Load(EOS(STATIC_6136), i976, i806, i976, i806) -> f6151_0_power_ConstantStackPush(EOS(STATIC_6151), i976, i806, i976, i806, i806) :|: TRUE
f6151_0_power_ConstantStackPush(EOS(STATIC_6151), i976, i806, i976, i806, i806) -> f6168_0_power_IntArithmetic(EOS(STATIC_6168), i976, i806, i976, i806, i806, 2) :|: TRUE
f6168_0_power_IntArithmetic(EOS(STATIC_6168), i976, i806, i976, i806, i806, matching1) -> f6175_0_power_ConstantStackPush(EOS(STATIC_6175), i976, i806, i976, i806, i806 % 2) :|: TRUE && matching1 = 2
f6175_0_power_ConstantStackPush(EOS(STATIC_6175), i976, i806, i976, i806, i997) -> f6182_0_power_NE(EOS(STATIC_6182), i976, i806, i976, i806, i997, 1) :|: TRUE
f6182_0_power_NE(EOS(STATIC_6182), i976, i806, i976, i806, matching1, matching2) -> f6206_0_power_NE(EOS(STATIC_6206), i976, i806, i976, i806, 0, 1) :|: i997 = 0 && matching1 = 0 && matching2 = 1
f6182_0_power_NE(EOS(STATIC_6182), i976, i806, i976, i806, matching1, matching2) -> f6207_0_power_NE(EOS(STATIC_6207), i976, i806, i976, i806, 1, 1) :|: i997 = 1 && matching1 = 1 && matching2 = 1
f6206_0_power_NE(EOS(STATIC_6206), i976, i806, i976, i806, matching1, matching2) -> f6215_0_power_Load(EOS(STATIC_6215), i976, i806, i976, i806) :|: TRUE && matching1 = 0 && matching2 = 1
f6215_0_power_Load(EOS(STATIC_6215), i976, i806, i976, i806) -> f6230_0_power_Load(EOS(STATIC_6230), i976, i806, i806, i976) :|: TRUE
f6230_0_power_Load(EOS(STATIC_6230), i976, i806, i806, i976) -> f6310_0_power_ConstantStackPush(EOS(STATIC_6310), i976, i806, i976, i806) :|: TRUE
f6310_0_power_ConstantStackPush(EOS(STATIC_6310), i976, i806, i976, i806) -> f6323_0_power_IntArithmetic(EOS(STATIC_6323), i976, i806, i976, i806, 2) :|: TRUE
f6323_0_power_IntArithmetic(EOS(STATIC_6323), i976, i806, i976, i806, matching1) -> f6328_0_power_InvokeMethod(EOS(STATIC_6328), i976, i806, i976, i1053) :|: i1053 = i806 / 2 && i806 > 1 && i1053 < i806 && matching1 = 2
f6328_0_power_InvokeMethod(EOS(STATIC_6328), i976, i806, i976, i1053) -> f6333_0_power_Load(EOS(STATIC_6333), i976, i1053, i976, i1053) :|: i976 <= 1 && i806 > 1 && i1053 >= 1
f6328_0_power_InvokeMethod(EOS(STATIC_6328), i976, i806, i976, i1053) -> f6333_1_power_Load(EOS(STATIC_6333), i976, i806, i976, i1053) :|: i976 <= 1 && i806 > 1 && i1053 >= 1
f6333_0_power_Load(EOS(STATIC_6333), i976, i1053, i976, i1053) -> f6338_0_power_Load(EOS(STATIC_6338), i976, i1053, i976, i1053) :|: TRUE
f6338_0_power_Load(EOS(STATIC_6338), i976, i1053, i976, i1053) -> f3907_0_power_Load(EOS(STATIC_3907), i976, i1053, i976, i1053) :|: TRUE
f3907_0_power_Load(EOS(STATIC_3907), i604, i605, i604, i605) -> f4839_0_power_GT(EOS(STATIC_4839), i604, i605, i604, i605, i605) :|: TRUE
f6207_0_power_NE(EOS(STATIC_6207), i976, i806, i976, i806, matching1, matching2) -> f6221_0_power_Load(EOS(STATIC_6221), i976, i806, i976, i806) :|: TRUE && matching1 = 1 && matching2 = 1
f6221_0_power_Load(EOS(STATIC_6221), i976, i806, i976, i806) -> f6233_0_power_Load(EOS(STATIC_6233), i976, i806, i976, i806, i976) :|: TRUE
f6233_0_power_Load(EOS(STATIC_6233), i976, i806, i976, i806, i976) -> f6313_0_power_Load(EOS(STATIC_6313), i976, i806, i806, i976, i976) :|: TRUE
f6313_0_power_Load(EOS(STATIC_6313), i976, i806, i806, i976, i976) -> f6324_0_power_ConstantStackPush(EOS(STATIC_6324), i976, i806, i976, i976, i806) :|: TRUE
f6324_0_power_ConstantStackPush(EOS(STATIC_6324), i976, i806, i976, i976, i806) -> f6329_0_power_IntArithmetic(EOS(STATIC_6329), i976, i806, i976, i976, i806, 1) :|: TRUE
f6329_0_power_IntArithmetic(EOS(STATIC_6329), i976, i806, i976, i976, i806, matching1) -> f6334_0_power_InvokeMethod(EOS(STATIC_6334), i976, i806, i976, i976, i806 - 1) :|: i806 > 0 && matching1 = 1
f6334_0_power_InvokeMethod(EOS(STATIC_6334), i976, i806, i976, i976, i1060) -> f6339_0_power_Load(EOS(STATIC_6339), i976, i1060, i976, i1060) :|: i976 <= 1 && i806 > 1 && i1060 >= 1 && i1060 < i806
f6334_0_power_InvokeMethod(EOS(STATIC_6334), i976, i806, i976, i976, i1060) -> f6339_1_power_Load(EOS(STATIC_6339), i976, i806, i976, i976, i1060) :|: i976 <= 1 && i806 > 1 && i1060 >= 1 && i1060 < i806
f6339_0_power_Load(EOS(STATIC_6339), i976, i1060, i976, i1060) -> f6342_0_power_Load(EOS(STATIC_6342), i976, i1060, i976, i1060) :|: TRUE
f6342_0_power_Load(EOS(STATIC_6342), i976, i1060, i976, i1060) -> f3907_0_power_Load(EOS(STATIC_3907), i976, i1060, i976, i1060) :|: TRUE
f6083_0_power_NE(EOS(STATIC_6083), i977, i806, i977, i806, i977, matching1) -> f6145_0_power_Load(EOS(STATIC_6145), i977, i806, i977, i806) :|: i977 > 2 && matching1 = 2
f6145_0_power_Load(EOS(STATIC_6145), i977, i806, i977, i806) -> f6159_0_power_ConstantStackPush(EOS(STATIC_6159), i977, i806, i977, i806, i806) :|: TRUE
f6159_0_power_ConstantStackPush(EOS(STATIC_6159), i977, i806, i977, i806, i806) -> f6171_0_power_IntArithmetic(EOS(STATIC_6171), i977, i806, i977, i806, i806, 2) :|: TRUE
f6171_0_power_IntArithmetic(EOS(STATIC_6171), i977, i806, i977, i806, i806, matching1) -> f6181_0_power_ConstantStackPush(EOS(STATIC_6181), i977, i806, i977, i806, i806 % 2) :|: TRUE && matching1 = 2
f6181_0_power_ConstantStackPush(EOS(STATIC_6181), i977, i806, i977, i806, i999) -> f6197_0_power_NE(EOS(STATIC_6197), i977, i806, i977, i806, i999, 1) :|: TRUE
f6197_0_power_NE(EOS(STATIC_6197), i977, i806, i977, i806, matching1, matching2) -> f6212_0_power_NE(EOS(STATIC_6212), i977, i806, i977, i806, 0, 1) :|: i999 = 0 && matching1 = 0 && matching2 = 1
f6197_0_power_NE(EOS(STATIC_6197), i977, i806, i977, i806, matching1, matching2) -> f6213_0_power_NE(EOS(STATIC_6213), i977, i806, i977, i806, 1, 1) :|: i999 = 1 && matching1 = 1 && matching2 = 1
f6212_0_power_NE(EOS(STATIC_6212), i977, i806, i977, i806, matching1, matching2) -> f6226_0_power_Load(EOS(STATIC_6226), i977, i806, i977, i806) :|: TRUE && matching1 = 0 && matching2 = 1
f6226_0_power_Load(EOS(STATIC_6226), i977, i806, i977, i806) -> f6300_0_power_Load(EOS(STATIC_6300), i977, i806, i806, i977) :|: TRUE
f6300_0_power_Load(EOS(STATIC_6300), i977, i806, i806, i977) -> f6321_0_power_ConstantStackPush(EOS(STATIC_6321), i977, i806, i977, i806) :|: TRUE
f6321_0_power_ConstantStackPush(EOS(STATIC_6321), i977, i806, i977, i806) -> f6326_0_power_IntArithmetic(EOS(STATIC_6326), i977, i806, i977, i806, 2) :|: TRUE
f6326_0_power_IntArithmetic(EOS(STATIC_6326), i977, i806, i977, i806, matching1) -> f6331_0_power_InvokeMethod(EOS(STATIC_6331), i977, i806, i977, i1059) :|: i1059 = i806 / 2 && i806 > 1 && i1059 < i806 && matching1 = 2
f6331_0_power_InvokeMethod(EOS(STATIC_6331), i977, i806, i977, i1059) -> f6336_0_power_Load(EOS(STATIC_6336), i977, i1059, i977, i1059) :|: i977 > 1 && i806 > 1 && i1059 >= 1
f6331_0_power_InvokeMethod(EOS(STATIC_6331), i977, i806, i977, i1059) -> f6336_1_power_Load(EOS(STATIC_6336), i977, i806, i977, i1059) :|: i977 > 1 && i806 > 1 && i1059 >= 1
f6336_0_power_Load(EOS(STATIC_6336), i977, i1059, i977, i1059) -> f6340_0_power_Load(EOS(STATIC_6340), i977, i1059, i977, i1059) :|: TRUE
f6340_0_power_Load(EOS(STATIC_6340), i977, i1059, i977, i1059) -> f3907_0_power_Load(EOS(STATIC_3907), i977, i1059, i977, i1059) :|: TRUE
f6213_0_power_NE(EOS(STATIC_6213), i977, i806, i977, i806, matching1, matching2) -> f6229_0_power_Load(EOS(STATIC_6229), i977, i806, i977, i806) :|: TRUE && matching1 = 1 && matching2 = 1
f6229_0_power_Load(EOS(STATIC_6229), i977, i806, i977, i806) -> f6306_0_power_Load(EOS(STATIC_6306), i977, i806, i977, i806, i977) :|: TRUE
f6306_0_power_Load(EOS(STATIC_6306), i977, i806, i977, i806, i977) -> f6322_0_power_Load(EOS(STATIC_6322), i977, i806, i806, i977, i977) :|: TRUE
f6322_0_power_Load(EOS(STATIC_6322), i977, i806, i806, i977, i977) -> f6327_0_power_ConstantStackPush(EOS(STATIC_6327), i977, i806, i977, i977, i806) :|: TRUE
f6327_0_power_ConstantStackPush(EOS(STATIC_6327), i977, i806, i977, i977, i806) -> f6332_0_power_IntArithmetic(EOS(STATIC_6332), i977, i806, i977, i977, i806, 1) :|: TRUE
f6332_0_power_IntArithmetic(EOS(STATIC_6332), i977, i806, i977, i977, i806, matching1) -> f6337_0_power_InvokeMethod(EOS(STATIC_6337), i977, i806, i977, i977, i806 - 1) :|: i806 > 0 && matching1 = 1
f6337_0_power_InvokeMethod(EOS(STATIC_6337), i977, i806, i977, i977, i1061) -> f6341_0_power_Load(EOS(STATIC_6341), i977, i1061, i977, i1061) :|: i977 > 1 && i806 > 1 && i1061 >= 1 && i1061 < i806
f6337_0_power_InvokeMethod(EOS(STATIC_6337), i977, i806, i977, i977, i1061) -> f6341_1_power_Load(EOS(STATIC_6341), i977, i806, i977, i977, i1061) :|: i977 > 1 && i806 > 1 && i1061 >= 1 && i1061 < i806
f6341_0_power_Load(EOS(STATIC_6341), i977, i1061, i977, i1061) -> f6343_0_power_Load(EOS(STATIC_6343), i977, i1061, i977, i1061) :|: TRUE
f6343_0_power_Load(EOS(STATIC_6343), i977, i1061, i977, i1061) -> f3907_0_power_Load(EOS(STATIC_3907), i977, i1061, i977, i1061) :|: TRUE
Combined rules. Obtained 12 IRulesP rules:
f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT(EOS(STATIC_4839), i604:0, div1, i604:0, div1, div1) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 < 2 && i752:0 - 2 * div1 > -2
f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 1 < i752:0 && i752:0 - 2 * div = 1
f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0 - 1, i604:0, i752:0 - 1, i752:0 - 1) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div < 2 && i752:0 - 2 * div > -2
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0 - 1, i604:0, i752:0 - 1, i752:0 - 1) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div < 2 && i752:0 - 2 * div > -2
f4839_0_power_GT(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 2 * div = 0 && div1 > 0 && i752:0 > div1
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f4839_0_power_GT(EOS(STATIC_4839), i604:0, div1, i604:0, div1, div1) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 < 2 && i752:0 - 2 * div1 > -2
Removed following non-SCC rules:
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f6341_1_power_Load(EOS(STATIC_6341), i604:0, i752:0, i604:0, i604:0, i752:0 - 1) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div < 2 && i752:0 - 2 * div > -2
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f6333_1_power_Load(EOS(STATIC_6333), i604:0, i752:0, i604:0, div1) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 < 2 && i752:0 - 2 * div1 > -2
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f6339_1_power_Load(EOS(STATIC_6339), i604:0, i752:0, i604:0, i604:0, i752:0 - 1) :|: i752:0 > 1 && i604:0 < 2 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div < 2 && i752:0 - 2 * div > -2
f4839_0_power_GT'(EOS(STATIC_4839), i604:0, i752:0, i604:0, i752:0, i752:0) -> f6336_1_power_Load(EOS(STATIC_6336), i604:0, i752:0, i604:0, div1) :|: i752:0 > 1 && i604:0 > 2 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 < 2 && i752:0 - 2 * div1 > -2
Filtered constant ground arguments:
   f4839_0_power_GT(x1, x2, x3, x4, x5, x6) -> f4839_0_power_GT(x2, x3, x4, x5, x6)
   f4839_0_power_GT'(x1, x2, x3, x4, x5, x6) -> f4839_0_power_GT'(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f4839_0_power_GT(x1, x2, x3, x4, x5) -> f4839_0_power_GT(x3, x5)
   f4839_0_power_GT'(x1, x2, x3, x4, x5) -> f4839_0_power_GT'(x3, x5)
Finished conversion. Obtained 8 rules.P rules:
f4839_0_power_GT(i604:0, i752:0) -> f4839_0_power_GT'(i604:0, i752:0) :|: i604:0 < 2 && i752:0 > 1 && i752:0 - 2 * div = 0 && div1 > 0 && i752:0 > div1
f4839_0_power_GT'(i604:0, i752:0) -> f4839_0_power_GT(i604:0, div1) :|: i604:0 < 2 && i752:0 > 1 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 > -2 && i752:0 - 2 * div1 < 2
f4839_0_power_GT(i604:0, i752:0) -> f4839_0_power_GT'(i604:0, i752:0) :|: i604:0 > 2 && i752:0 > 1 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0
f4839_0_power_GT(i604:0, i752:0) -> f4839_0_power_GT'(i604:0, i752:0) :|: i604:0 < 2 && i752:0 > 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div = 1
f4839_0_power_GT'(i604:0, i752:0) -> f4839_0_power_GT(i604:0, i752:0 - 1) :|: i604:0 < 2 && i752:0 > 1 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2
f4839_0_power_GT'(i604:0, i752:0) -> f4839_0_power_GT(i604:0, i752:0 - 1) :|: i604:0 > 2 && i752:0 > 1 && i752:0 - 2 * div = 1 && i752:0 - 1 < i752:0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2
f4839_0_power_GT(i604:0, i752:0) -> f4839_0_power_GT'(i604:0, i752:0) :|: i604:0 > 2 && i752:0 > 1 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0
f4839_0_power_GT'(i604:0, i752:0) -> f4839_0_power_GT(i604:0, div1) :|: i604:0 > 2 && i752:0 > 1 && i752:0 - 2 * div = 0 && i752:0 > div1 && div1 > 0 && i752:0 - 2 * div > -2 && i752:0 - 2 * div < 2 && i752:0 - 2 * div1 > -2 && i752:0 - 2 * div1 < 2

----------------------------------------

(8)
Obligation:
Rules:
f4839_0_power_GT(x, x1) -> f4839_0_power_GT'(x, x1) :|: x < 2 && x1 > 1 && x1 - 2 * x2 = 0 && x3 > 0 && x1 > x3
f4839_0_power_GT'(x4, x5) -> f4839_0_power_GT(x4, x6) :|: x4 < 2 && x5 > 1 && x5 - 2 * x7 = 0 && x5 > x6 && x6 > 0 && x5 - 2 * x7 > -2 && x5 - 2 * x7 < 2 && x5 - 2 * x6 > -2 && x5 - 2 * x6 < 2
f4839_0_power_GT(x8, x9) -> f4839_0_power_GT'(x8, x9) :|: x8 > 2 && x9 > 1 && x9 - 2 * x10 = 1 && x9 - 1 < x9
f4839_0_power_GT(x11, x12) -> f4839_0_power_GT'(x11, x12) :|: x11 < 2 && x12 > 1 && x12 - 1 < x12 && x12 - 2 * x13 = 1
f4839_0_power_GT'(x14, x15) -> f4839_0_power_GT(x14, x15 - 1) :|: x14 < 2 && x15 > 1 && x15 - 2 * x16 = 1 && x15 - 1 < x15 && x15 - 2 * x16 > -2 && x15 - 2 * x16 < 2
f4839_0_power_GT'(x17, x18) -> f4839_0_power_GT(x17, x18 - 1) :|: x17 > 2 && x18 > 1 && x18 - 2 * x19 = 1 && x18 - 1 < x18 && x18 - 2 * x19 > -2 && x18 - 2 * x19 < 2
f4839_0_power_GT(x20, x21) -> f4839_0_power_GT'(x20, x21) :|: x20 > 2 && x21 > 1 && x21 - 2 * x22 = 0 && x21 > x23 && x23 > 0
f4839_0_power_GT'(x24, x25) -> f4839_0_power_GT(x24, x26) :|: x24 > 2 && x25 > 1 && x25 - 2 * x27 = 0 && x25 > x26 && x26 > 0 && x25 - 2 * x27 > -2 && x25 - 2 * x27 < 2 && x25 - 2 * x26 > -2 && x25 - 2 * x26 < 2

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f4839_0_power_GT(x, x1) -> f4839_0_power_GT'(x, x1) :|: x < 2 && x1 > 1 && x1 - 2 * x2 = 0 && x3 > 0 && x1 > x3
f4839_0_power_GT'(x4, x5) -> f4839_0_power_GT(x4, x6) :|: x4 < 2 && x5 > 1 && x5 - 2 * x7 = 0 && x5 > x6 && x6 > 0 && x5 - 2 * x7 > -2 && x5 - 2 * x7 < 2 && x5 - 2 * x6 > -2 && x5 - 2 * x6 < 2
f4839_0_power_GT(x8, x9) -> f4839_0_power_GT'(x8, x9) :|: x8 > 2 && x9 > 1 && x9 - 2 * x10 = 1 && x9 - 1 < x9
f4839_0_power_GT(x11, x12) -> f4839_0_power_GT'(x11, x12) :|: x11 < 2 && x12 > 1 && x12 - 1 < x12 && x12 - 2 * x13 = 1
f4839_0_power_GT'(x14, x15) -> f4839_0_power_GT(x14, arith) :|: x14 < 2 && x15 > 1 && x15 - 2 * x16 = 1 && x15 - 1 < x15 && x15 - 2 * x16 > -2 && x15 - 2 * x16 < 2 && arith = x15 - 1
f4839_0_power_GT'(x28, x29) -> f4839_0_power_GT(x28, x30) :|: x28 > 2 && x29 > 1 && x29 - 2 * x31 = 1 && x29 - 1 < x29 && x29 - 2 * x31 > -2 && x29 - 2 * x31 < 2 && x30 = x29 - 1
f4839_0_power_GT(x20, x21) -> f4839_0_power_GT'(x20, x21) :|: x20 > 2 && x21 > 1 && x21 - 2 * x22 = 0 && x21 > x23 && x23 > 0
f4839_0_power_GT'(x24, x25) -> f4839_0_power_GT(x24, x26) :|: x24 > 2 && x25 > 1 && x25 - 2 * x27 = 0 && x25 > x26 && x26 > 0 && x25 - 2 * x27 > -2 && x25 - 2 * x27 < 2 && x25 - 2 * x26 > -2 && x25 - 2 * x26 < 2

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f4839_0_power_GT(x, x1) -> f4839_0_power_GT'(x, x1) :|: x < 2 && x1 > 1 && x1 - 2 * x2 = 0 && x3 > 0 && x1 > x3
(2) f4839_0_power_GT'(x4, x5) -> f4839_0_power_GT(x4, x6) :|: x4 < 2 && x5 > 1 && x5 - 2 * x7 = 0 && x5 > x6 && x6 > 0 && x5 - 2 * x7 > -2 && x5 - 2 * x7 < 2 && x5 - 2 * x6 > -2 && x5 - 2 * x6 < 2
(3) f4839_0_power_GT(x8, x9) -> f4839_0_power_GT'(x8, x9) :|: x8 > 2 && x9 > 1 && x9 - 2 * x10 = 1 && x9 - 1 < x9
(4) f4839_0_power_GT(x11, x12) -> f4839_0_power_GT'(x11, x12) :|: x11 < 2 && x12 > 1 && x12 - 1 < x12 && x12 - 2 * x13 = 1
(5) f4839_0_power_GT'(x14, x15) -> f4839_0_power_GT(x14, arith) :|: x14 < 2 && x15 > 1 && x15 - 2 * x16 = 1 && x15 - 1 < x15 && x15 - 2 * x16 > -2 && x15 - 2 * x16 < 2 && arith = x15 - 1
(6) f4839_0_power_GT'(x28, x29) -> f4839_0_power_GT(x28, x30) :|: x28 > 2 && x29 > 1 && x29 - 2 * x31 = 1 && x29 - 1 < x29 && x29 - 2 * x31 > -2 && x29 - 2 * x31 < 2 && x30 = x29 - 1
(7) f4839_0_power_GT(x20, x21) -> f4839_0_power_GT'(x20, x21) :|: x20 > 2 && x21 > 1 && x21 - 2 * x22 = 0 && x21 > x23 && x23 > 0
(8) f4839_0_power_GT'(x24, x25) -> f4839_0_power_GT(x24, x26) :|: x24 > 2 && x25 > 1 && x25 - 2 * x27 = 0 && x25 > x26 && x26 > 0 && x25 - 2 * x27 > -2 && x25 - 2 * x27 < 2 && x25 - 2 * x26 > -2 && x25 - 2 * x26 < 2

Arcs:
(1) -> (2)
(2) -> (1), (4)
(3) -> (6)
(4) -> (5)
(5) -> (1)
(6) -> (7)
(7) -> (8)
(8) -> (3), (7)

This digraph is fully evaluated!
----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f4839_0_power_GT(x8, x9) -> f4839_0_power_GT'(x8, x9) :|: x8 > 2 && x9 > 1 && x9 - 2 * x10 = 1 && x9 - 1 < x9
(2) f4839_0_power_GT'(x24, x25) -> f4839_0_power_GT(x24, x26) :|: x24 > 2 && x25 > 1 && x25 - 2 * x27 = 0 && x25 > x26 && x26 > 0 && x25 - 2 * x27 > -2 && x25 - 2 * x27 < 2 && x25 - 2 * x26 > -2 && x25 - 2 * x26 < 2
(3) f4839_0_power_GT(x20, x21) -> f4839_0_power_GT'(x20, x21) :|: x20 > 2 && x21 > 1 && x21 - 2 * x22 = 0 && x21 > x23 && x23 > 0
(4) f4839_0_power_GT'(x28, x29) -> f4839_0_power_GT(x28, x30) :|: x28 > 2 && x29 > 1 && x29 - 2 * x31 = 1 && x29 - 1 < x29 && x29 - 2 * x31 > -2 && x29 - 2 * x31 < 2 && x30 = x29 - 1

Arcs:
(1) -> (4)
(2) -> (1), (3)
(3) -> (2)
(4) -> (3)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT'(x28:0, x29:0) -> f4839_0_power_GT(x28:0, x29:0 - 1) :|: x29:0 - 2 * x31:0 > -2 && x29:0 - 2 * x31:0 < 2 && x29:0 - 1 < x29:0 && x29:0 - 2 * x31:0 = 1 && x29:0 > 1 && x28:0 > 2
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f4839_0_power_GT(INTEGER, INTEGER)
f4839_0_power_GT'(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT'(x28:0, x29:0) -> f4839_0_power_GT(x28:0, c) :|: c = x29:0 - 1 && (x29:0 - 2 * x31:0 > -2 && x29:0 - 2 * x31:0 < 2 && x29:0 - 1 < x29:0 && x29:0 - 2 * x31:0 = 1 && x29:0 > 1 && x28:0 > 2)
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT(x, x1)] = x1
[f4839_0_power_GT'(x2, x3)] = x3

The following rules are decreasing:
f4839_0_power_GT'(x28:0, x29:0) -> f4839_0_power_GT(x28:0, c) :|: c = x29:0 - 1 && (x29:0 - 2 * x31:0 > -2 && x29:0 - 2 * x31:0 < 2 && x29:0 - 1 < x29:0 && x29:0 - 2 * x31:0 = 1 && x29:0 > 1 && x28:0 > 2)
The following rules are bounded:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT'(x28:0, x29:0) -> f4839_0_power_GT(x28:0, c) :|: c = x29:0 - 1 && (x29:0 - 2 * x31:0 > -2 && x29:0 - 2 * x31:0 < 2 && x29:0 - 1 < x29:0 && x29:0 - 2 * x31:0 = 1 && x29:0 > 1 && x28:0 > 2)
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2

----------------------------------------

(19)
Obligation:
Rules:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2

----------------------------------------

(20) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT(x, x1)] = -1 + 2*x1
[f4839_0_power_GT'(x2, x3)] = x3

The following rules are decreasing:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2
The following rules are bounded:
f4839_0_power_GT(x20:0, x21:0) -> f4839_0_power_GT'(x20:0, x21:0) :|: x23:0 < x21:0 && x23:0 > 0 && x21:0 - 2 * x22:0 = 0 && x21:0 > 1 && x20:0 > 2
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
f4839_0_power_GT(x8:0, x9:0) -> f4839_0_power_GT'(x8:0, x9:0) :|: x9:0 - 2 * x10:0 = 1 && x9:0 - 1 < x9:0 && x9:0 > 1 && x8:0 > 2

----------------------------------------

(21)
Obligation:
Rules:
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2

----------------------------------------

(22) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT'(x, x1)] = 1
[f4839_0_power_GT(x2, x3)] = 0

The following rules are decreasing:
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2
The following rules are bounded:
f4839_0_power_GT'(x24:0, x25:0) -> f4839_0_power_GT(x24:0, x26:0) :|: x25:0 - 2 * x26:0 > -2 && x25:0 - 2 * x26:0 < 2 && x25:0 - 2 * x27:0 < 2 && x25:0 - 2 * x27:0 > -2 && x26:0 > 0 && x26:0 < x25:0 && x25:0 - 2 * x27:0 = 0 && x25:0 > 1 && x24:0 > 2

----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:

Termination digraph:
Nodes:
(1) f4839_0_power_GT(x, x1) -> f4839_0_power_GT'(x, x1) :|: x < 2 && x1 > 1 && x1 - 2 * x2 = 0 && x3 > 0 && x1 > x3
(2) f4839_0_power_GT'(x14, x15) -> f4839_0_power_GT(x14, arith) :|: x14 < 2 && x15 > 1 && x15 - 2 * x16 = 1 && x15 - 1 < x15 && x15 - 2 * x16 > -2 && x15 - 2 * x16 < 2 && arith = x15 - 1
(3) f4839_0_power_GT(x11, x12) -> f4839_0_power_GT'(x11, x12) :|: x11 < 2 && x12 > 1 && x12 - 1 < x12 && x12 - 2 * x13 = 1
(4) f4839_0_power_GT'(x4, x5) -> f4839_0_power_GT(x4, x6) :|: x4 < 2 && x5 > 1 && x5 - 2 * x7 = 0 && x5 > x6 && x6 > 0 && x5 - 2 * x7 > -2 && x5 - 2 * x7 < 2 && x5 - 2 * x6 > -2 && x5 - 2 * x6 < 2

Arcs:
(1) -> (4)
(2) -> (1)
(3) -> (2)
(4) -> (1), (3)

This digraph is fully evaluated!

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
f4839_0_power_GT'(x14:0, x15:0) -> f4839_0_power_GT(x14:0, x15:0 - 1) :|: x15:0 - 2 * x16:0 > -2 && x15:0 - 2 * x16:0 < 2 && x15:0 - 1 < x15:0 && x15:0 - 2 * x16:0 = 1 && x15:0 > 1 && x14:0 < 2
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(27) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f4839_0_power_GT(INTEGER, INTEGER)
f4839_0_power_GT'(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(28)
Obligation:
Rules:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
f4839_0_power_GT'(x14:0, x15:0) -> f4839_0_power_GT(x14:0, c) :|: c = x15:0 - 1 && (x15:0 - 2 * x16:0 > -2 && x15:0 - 2 * x16:0 < 2 && x15:0 - 1 < x15:0 && x15:0 - 2 * x16:0 = 1 && x15:0 > 1 && x14:0 < 2)
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(29) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT(x, x1)] = x1
[f4839_0_power_GT'(x2, x3)] = x3

The following rules are decreasing:
f4839_0_power_GT'(x14:0, x15:0) -> f4839_0_power_GT(x14:0, c) :|: c = x15:0 - 1 && (x15:0 - 2 * x16:0 > -2 && x15:0 - 2 * x16:0 < 2 && x15:0 - 1 < x15:0 && x15:0 - 2 * x16:0 = 1 && x15:0 > 1 && x14:0 < 2)
The following rules are bounded:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
f4839_0_power_GT'(x14:0, x15:0) -> f4839_0_power_GT(x14:0, c) :|: c = x15:0 - 1 && (x15:0 - 2 * x16:0 > -2 && x15:0 - 2 * x16:0 < 2 && x15:0 - 1 < x15:0 && x15:0 - 2 * x16:0 = 1 && x15:0 > 1 && x14:0 < 2)
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(30)
Obligation:
Rules:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(31) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT(x, x1)] = -1 + 2*x1
[f4839_0_power_GT'(x2, x3)] = x3

The following rules are decreasing:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
The following rules are bounded:
f4839_0_power_GT(x11:0, x12:0) -> f4839_0_power_GT'(x11:0, x12:0) :|: x12:0 - 1 < x12:0 && x12:0 - 2 * x13:0 = 1 && x12:0 > 1 && x11:0 < 2
f4839_0_power_GT(x:0, x1:0) -> f4839_0_power_GT'(x:0, x1:0) :|: x3:0 > 0 && x3:0 < x1:0 && x1:0 - 2 * x2:0 = 0 && x1:0 > 1 && x:0 < 2
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(32)
Obligation:
Rules:
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(33) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f4839_0_power_GT'(x, x1)] = 1
[f4839_0_power_GT(x2, x3)] = 0

The following rules are decreasing:
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2
The following rules are bounded:
f4839_0_power_GT'(x4:0, x5:0) -> f4839_0_power_GT(x4:0, x6:0) :|: x5:0 - 2 * x6:0 > -2 && x5:0 - 2 * x6:0 < 2 && x5:0 - 2 * x7:0 < 2 && x5:0 - 2 * x7:0 > -2 && x6:0 > 0 && x6:0 < x5:0 && x5:0 - 2 * x7:0 = 0 && x5:0 > 1 && x4:0 < 2

----------------------------------------

(34)
YES
