YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/xqwrN.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 481 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 24 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package ClassAnalysisRec;

public class ClassAnalysisRec {
	A field;

	public static void main(String[] args) {
		Random.args = args;
		ClassAnalysisRec t = new ClassAnalysisRec();
		t.field = new A();
		t.field = new B();
		t.eval();
	}

	public void eval() {
		int x = Random.random() % 100;
		this.field.test(x);
	}
}

class A {
	public boolean test(int x) {
		return this.test(x-1);
	}
}

class B extends A {
	public boolean test(int x) {
		if (x <= 0) return true;
		return test(x - 1);
	}
}


package ClassAnalysisRec;

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    final String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package ClassAnalysisRec;

public class ClassAnalysisRec {
	A field;

	public static void main(String[] args) {
		Random.args = args;
		ClassAnalysisRec t = new ClassAnalysisRec();
		t.field = new A();
		t.field = new B();
		t.eval();
	}

	public void eval() {
		int x = Random.random() % 100;
		this.field.test(x);
	}
}

class A {
	public boolean test(int x) {
		return this.test(x-1);
	}
}

class B extends A {
	public boolean test(int x) {
		if (x <= 0) return true;
		return test(x - 1);
	}
}


package ClassAnalysisRec;

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    final String string = args[index];
    index++;
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
ClassAnalysisRec.ClassAnalysisRec.main([Ljava/lang/String;)V: Graph of 6577 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
