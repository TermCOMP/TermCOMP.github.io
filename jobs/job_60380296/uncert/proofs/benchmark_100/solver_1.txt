NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/Z7a0q.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 360 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AlternDivWidening {
    
    public static void loop(int i, int w) {
	if (i != 0) {
	    if (i < -w) loop(-1 * (i - 1), w + 1);
	    else {
		if (i > w) loop(-1 * (i + 1), w + 1);
		else loop(0, w + 1);
	    }
	}
    }

    public static void main(String args[]) {
	loop(args.length, 1);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AlternDivWidening {
    
    public static void loop(int i, int w) {
	if (i != 0) {
	    if (i < -w) loop(-1 * (i - 1), w + 1);
	    else {
		if (i > w) loop(-1 * (i + 1), w + 1);
		else loop(0, w + 1);
	    }
	}
    }

    public static void main(String args[]) {
	loop(args.length, 1);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<AlternDivWidening.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
1:<AlternDivWidening.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
2:<AlternDivWidening.main||2: push 1|| - ||2>
YES:  (JL1)
3:<AlternDivWidening.main||3: AlternDivWidening.loop(II)V|| - ||2, 1>
YES:  (JL1)
4:<AlternDivWidening.loop||0: load INT #0||#0: 2, #1: 1|| ->
YES:  (JL1)
Start state of loop: 

[i389(lv_0_0), i390(lv_0_1)]
<AlternDivWidening.loop||0: load INT #0||#0: i389, #1: i391|| ->
	i389: #
	i390: [1,+inf)(l4)
	i391: [1,+inf)(l4)
YES:  (JL1)


In the loop head node, references [i389, i391, i390] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((1 <= initial_i390 and 1 <= initial_i391) and ((((path2_i389 = path2_i398 and path2_i400 = (-1 * path2_i391) and path2_i406 = (path2_i398 - 1) and path2_i407 = (-1 * path2_i406) and path2_i410 = (path2_i391 + 1) and path2_i407 = res_i389 and path2_i410 = res_i390 and path2_i410 = res_i391 and path2_i389 = initial_i389 and path2_i390 = initial_i390 and path2_i391 = initial_i391) and (path2_i398 != 0 and path2_i398 < path2_i400 and path2_i398 < path2_i400)) or ((path3_i389 = path3_i398 and path3_i400 = (-1 * path3_i391) and path3_i409 = (path3_i398 + 1) and path3_i411 = (-1 * path3_i409) and path3_i414 = (path3_i391 + 1) and path3_i411 = res_i389 and path3_i414 = res_i390 and path3_i414 = res_i391 and path3_i389 = initial_i389 and path3_i390 = initial_i390 and path3_i391 = initial_i391) and (path3_i398 != 0 and path3_i398 >= path3_i400 and path3_i398 >= path3_i400 and path3_i398 > path3_i391 and path3_i398 > path3_i391)) or ((path2_i389 = path2_i398 and path2_i400 = (-1 * path2_i391) and path2_i406 = (path2_i398 - 1) and path2_i407 = (-1 * path2_i406) and path2_i410 = (path2_i391 + 1) and path2_i407 = res_i389 and path2_i410 = res_i390 and path2_i410 = res_i391 and path2_i389 = initial_i389 and path2_i390 = initial_i390 and path2_i391 = initial_i391) and (path2_i398 < path2_i400 and path2_i398 < path2_i400 and path2_i398 < 0)) or ((path2_i389 = path2_i398 and path2_i400 = (-1 * path2_i391) and path2_i406 = (path2_i398 - 1) and path2_i407 = (-1 * path2_i406) and path2_i410 = (path2_i391 + 1) and path2_i407 = res_i389 and path2_i410 = res_i390 and path2_i410 = res_i391 and path2_i389 = initial_i389 and path2_i390 = initial_i390 and path2_i391 = initial_i391) and (path2_i398 < path2_i400 and path2_i398 < path2_i400 and path2_i398 > 0))) and (((res2_i389 = res2_i398 and res2_i400 = (-1 * res2_i391) and res2_i406 = (res2_i398 - 1) and res2_i407 = (-1 * res2_i406) and res2_i410 = (res2_i391 + 1) and res_i389 = res2_i389 and res_i390 = res2_i390 and res_i391 = res2_i391) and !(res2_i398 != 0 and res2_i398 < res2_i400 and res2_i398 < res2_i400)) and ((res3_i389 = res3_i398 and res3_i400 = (-1 * res3_i391) and res3_i409 = (res3_i398 + 1) and res3_i411 = (-1 * res3_i409) and res3_i414 = (res3_i391 + 1) and res_i389 = res3_i389 and res_i390 = res3_i390 and res_i391 = res3_i391) and !(res3_i398 != 0 and res3_i398 >= res3_i400 and res3_i398 >= res3_i400 and res3_i398 > res3_i391 and res3_i398 > res3_i391)) and ((res2_i389 = res2_i398 and res2_i400 = (-1 * res2_i391) and res2_i406 = (res2_i398 - 1) and res2_i407 = (-1 * res2_i406) and res2_i410 = (res2_i391 + 1) and res_i389 = res2_i389 and res_i390 = res2_i390 and res_i391 = res2_i391) and !(res2_i398 < res2_i400 and res2_i398 < res2_i400 and res2_i398 < 0)) and ((res2_i389 = res2_i398 and res2_i400 = (-1 * res2_i391) and res2_i406 = (res2_i398 - 1) and res2_i407 = (-1 * res2_i406) and res2_i410 = (res2_i391 + 1) and res_i389 = res2_i389 and res_i390 = res2_i390 and res_i391 = res2_i391) and !(res2_i398 < res2_i400 and res2_i398 < res2_i400 and res2_i398 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
