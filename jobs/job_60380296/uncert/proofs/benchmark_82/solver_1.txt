MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/HMuqz.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class MergeSort {
    
    static void merge(int g, int d, int m, int T[]) {
	int TT[] = new int[T.length];
	int i, j;
	for (i = g; i <= m; i++) TT[i] = T[i];
	for (i = m+1; i <= d; i++) TT[d+m+1-i] = T[i];
	i = g; j = d;
	for (int k = g; k <= d; k++)
	    if (TT[i] < TT[j]) { T[k] = TT[i]; i++; }
	    else { T[k] = TT[j]; j--; }
    }
    

    static void sort(int g, int d, int T[]) {
	if (g < d) {
	    int m = (g+d)/2;
	    if (m-g < d-g) sort(g, m, T);
	    if (d - (m+1) < d-g) sort(m+1, d, T);
	    merge(g,d,m,T);
	}
    }

    public static void main(String args[]) {	
	int n = args.length;

	int T[] = new int[n];
	for (int i = 0; i < n; i++)
	    T[i] = args[i].length();

	/*
	for (int i = 0; i < n; i++)
	    System.out.print(T[i] + " ");
	System.out.println();
	*/

	sort(0, n-1, T);
	
	/*
	for (int i = 0; i < n; i++)
	    System.out.print(T[i] + " ");
	System.out.println();
	*/
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class MergeSort {
    
    static void merge(int g, int d, int m, int T[]) {
	int TT[] = new int[T.length];
	int i, j;
	for (i = g; i <= m; i++) TT[i] = T[i];
	for (i = m+1; i <= d; i++) TT[d+m+1-i] = T[i];
	i = g; j = d;
	for (int k = g; k <= d; k++)
	    if (TT[i] < TT[j]) { T[k] = TT[i]; i++; }
	    else { T[k] = TT[j]; j--; }
    }
    

    static void sort(int g, int d, int T[]) {
	if (g < d) {
	    int m = (g+d)/2;
	    if (m-g < d-g) sort(g, m, T);
	    if (d - (m+1) < d-g) sort(m+1, d, T);
	    merge(g,d,m,T);
	}
    }

    public static void main(String args[]) {	
	int n = args.length;

	int T[] = new int[n];
	for (int i = 0; i < n; i++)
	    T[i] = args[i].length();

	/*
	for (int i = 0; i < n; i++)
	    System.out.print(T[i] + " ");
	System.out.println();
	*/

	sort(0, n-1, T);
	
	/*
	for (int i = 0; i < n; i++)
	    System.out.print(T[i] + " ");
	System.out.println();
	*/
    }
}

