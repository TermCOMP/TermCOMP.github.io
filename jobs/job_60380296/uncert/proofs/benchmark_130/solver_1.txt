NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/D0V4J.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 617 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 50 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Narrowing {

    public static void loop_aux(int i, int range, boolean up) {
	if (0 <= i && i <= range) {
	    if (i == 0) up = true;
	    if (i == range) up = false;
	    if (up) i++;
	    if (!up) i--;
	    if (i == range - 2) range--;
	    loop_aux(i, range, up);
	}
    }

    public static void loop(int i) {
	loop_aux(i, 20, false);
    }

    public static void main(String[] args) {
	loop(args.length + 15);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Narrowing {

    public static void loop_aux(int i, int range, boolean up) {
	if (0 <= i && i <= range) {
	    if (i == 0) up = true;
	    if (i == range) up = false;
	    if (up) i++;
	    if (!up) i--;
	    if (i == range - 2) range--;
	    loop_aux(i, range, up);
	}
    }

    public static void loop(int i) {
	loop_aux(i, 20, false);
    }

    public static void main(String[] args) {
	loop(args.length + 15);
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Narrowing.main([Ljava/lang/String;)V: Graph of 18 nodes with 0 SCCs.



Narrowing.loop_aux(IIZ)V: Graph of 165 nodes with 0 SCCs.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Narrowing.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 4 -->{java.lang.Object...}
YES:  (JL1)
1:<Narrowing.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 4 -->{java.lang.Object...}
YES:  (JL1)
2:<Narrowing.main||2: push 15|| - ||4>
YES:  (JL1)
3:<Narrowing.main||4: ADD|| - ||4, 15>
YES:  (JL1)
4:<Narrowing.main||5: Narrowing.loop(I)V|| - ||19>
YES:  (JL1)
5:<Narrowing.loop||0: load INT #0||#0: 19|| ->
<Narrowing.main||5: Narrowing.loop|| - || ->
YES:  (JL1)
6:<Narrowing.loop||1: push 20|| - ||19>
<Narrowing.main||5: Narrowing.loop|| - || ->
YES:  (JL1)
7:<Narrowing.loop||3: push 0|| - ||19, 20>
<Narrowing.main||5: Narrowing.loop|| - || ->
YES:  (JL1)
8:<Narrowing.loop||4: Narrowing.loop_aux(IIZ)V|| - ||19, 20, 0>
<Narrowing.main||5: Narrowing.loop|| - || ->
YES:  (JL1)
9:<Narrowing.loop_aux||0: push 0||#0: 19, #1: 20, #2: 0|| ->
YES:  (JL1)
Start state of loop: 

[i564(lv_0_0), i565(lv_0_1), i566(lv_0_2)]
<Narrowing.loop_aux||0: push 0||#0: i564, #1: i567, #2: i568|| ->
	i564: #
	i565: #
	i566: #
	i567: #
	i568: #
YES:  (JL1)


In the loop head node, references [i564, i567, i565, i566, i568] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and ((((path1_i564 = path1_i570 and path1_i567 = path1_i582 and path1_i570 = path1_i581 and path1_i568 = path1_i585 and path1_i588 = (path1_i581 + 1) and path1_i614 = (path1_i582 - 2) and path1_i588 = path1_i614 and path1_i582 = path1_i646 and path1_i614 = res_i564 and path1_i646 = res_i565 and path1_i646 = res_i567 and path1_i585 = res_i566 and path1_i585 = res_i568 and path1_i564 = initial_i564 and path1_i565 = initial_i565 and path1_i566 = initial_i566 and path1_i567 = initial_i567 and path1_i568 = initial_i568) and (T and 0 = 0 and 0 <= path1_i570 and path1_i570 <= path1_i567 and path1_i570 <= path1_i567 and path1_i581 > 0 and path1_i581 != path1_i582 and path1_i581 < path1_i582 and path1_i585 != 0 and path1_i585 != 0 and path1_i588 != path1_i614 and path1_i588 != path1_i614)) or ((path2_i564 = path2_i570 and path2_i567 = path2_i582 and path2_i570 = path2_i581 and path2_i568 = path2_i585 and path2_i588 = (path2_i581 + 1) and path2_i614 = (path2_i582 - 2) and path2_i646 = (path2_i582 + -1) and path2_i614 = res_i564 and path2_i646 = res_i565 and path2_i646 = res_i567 and path2_i585 = res_i566 and path2_i585 = res_i568 and path2_i564 = initial_i564 and path2_i565 = initial_i565 and path2_i566 = initial_i566 and path2_i567 = initial_i567 and path2_i568 = initial_i568) and (T and 0 = 0 and 0 <= path2_i570 and path2_i570 <= path2_i567 and path2_i570 <= path2_i567 and path2_i581 > 0 and path2_i581 != path2_i582 and path2_i581 < path2_i582 and path2_i585 != 0 and path2_i585 != 0 and path2_i588 = path2_i614 and path2_i614 = path2_i614)) or ((path3_i564 = path3_i570 and path3_i567 = path3_i582 and path3_i570 = path3_i581 and path3_i595 = (path3_i581 + -1) and path3_i615 = (path3_i582 - 2) and path3_i595 = path3_i615 and path3_i582 = path3_i651 and path3_i615 = res_i564 and path3_i651 = res_i565 and path3_i651 = res_i567 and 0 = res_i566 and 0 = res_i568 and path3_i564 = initial_i564 and path3_i565 = initial_i565 and path3_i566 = initial_i566 and path3_i567 = initial_i567 and path3_i568 = initial_i568) and (T and 0 = 0 and 0 <= path3_i570 and path3_i570 <= path3_i567 and path3_i570 <= path3_i567 and path3_i581 > 0 and path3_i581 != path3_i582 and path3_i581 < path3_i582 and path3_i568 = 0 and T and T and path3_i595 != path3_i615 and path3_i595 != path3_i615)) or ((path4_i564 = path4_i570 and path4_i567 = path4_i582 and path4_i570 = path4_i581 and path4_i595 = (path4_i581 + -1) and path4_i615 = (path4_i582 - 2) and path4_i651 = (path4_i582 + -1) and path4_i615 = res_i564 and path4_i651 = res_i565 and path4_i651 = res_i567 and 0 = res_i566 and 0 = res_i568 and path4_i564 = initial_i564 and path4_i565 = initial_i565 and path4_i566 = initial_i566 and path4_i567 = initial_i567 and path4_i568 = initial_i568) and (T and 0 = 0 and 0 <= path4_i570 and path4_i570 <= path4_i567 and path4_i570 <= path4_i567 and path4_i581 > 0 and path4_i581 != path4_i582 and path4_i581 < path4_i582 and path4_i568 = 0 and T and T and path4_i595 = path4_i615 and path4_i615 = path4_i615)) or ((path5_i564 = path5_i570 and path5_i567 = path5_i582 and path5_i570 = path5_i581 and path5_i599 = (path5_i582 + -1) and path5_i622 = (path5_i582 - 2) and path5_i599 = res_i564 and path5_i582 = res_i565 and path5_i582 = res_i567 and 0 = res_i566 and 0 = res_i568 and path5_i564 = initial_i564 and path5_i565 = initial_i565 and path5_i566 = initial_i566 and path5_i567 = initial_i567 and path5_i568 = initial_i568) and (T and 0 = 0 and 0 <= path5_i570 and path5_i570 <= path5_i567 and path5_i570 <= path5_i567 and path5_i581 > 0 and path5_i581 = path5_i582 and path5_i582 = path5_i582 and T and T and path5_i599 != path5_i622 and path5_i599 != path5_i622)) or ((path6_i564 = path6_i570 and path6_i567 = path6_i582 and path6_i570 = path6_i581 and path6_i599 = (path6_i582 + -1) and path6_i622 = (path6_i582 - 2) and path6_i665 = (path6_i582 + -1) and path6_i622 = res_i564 and path6_i665 = res_i565 and path6_i665 = res_i567 and 0 = res_i566 and 0 = res_i568 and path6_i564 = initial_i564 and path6_i565 = initial_i565 and path6_i566 = initial_i566 and path6_i567 = initial_i567 and path6_i568 = initial_i568) and (T and 0 = 0 and 0 <= path6_i570 and path6_i570 <= path6_i567 and path6_i570 <= path6_i567 and path6_i581 > 0 and path6_i581 = path6_i582 and path6_i582 = path6_i582 and T and T and path6_i599 = path6_i622 and path6_i622 = path6_i622)) or ((path7_i564 = path7_i570 and path7_i567 = path7_i584 and path7_i637 = (path7_i584 - 2) and path7_i637 = path7_i643 and path7_i584 = path7_i674 and 1 = res_i564 and 1 = res_i566 and 1 = res_i568 and path7_i674 = res_i565 and path7_i674 = res_i567 and path7_i564 = initial_i564 and path7_i565 = initial_i565 and path7_i566 = initial_i566 and path7_i567 = initial_i567 and path7_i568 = initial_i568) and (T and 0 = 0 and 0 <= path7_i570 and path7_i570 <= path7_i567 and path7_i570 <= path7_i567 and path7_i570 = 0 and T and T and 0 = 0 and 0 < path7_i584 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 > path7_i643)) or ((path8_i564 = path8_i570 and path8_i567 = path8_i584 and path8_i637 = (path8_i584 - 2) and path8_i674 = (path8_i584 + -1) and 1 = res_i564 and 1 = res_i566 and 1 = res_i568 and path8_i674 = res_i565 and path8_i674 = res_i567 and path8_i564 = initial_i564 and path8_i565 = initial_i565 and path8_i566 = initial_i566 and path8_i567 = initial_i567 and path8_i568 = initial_i568) and (T and 0 = 0 and 0 <= path8_i570 and path8_i570 <= path8_i567 and path8_i570 <= path8_i567 and path8_i570 = 0 and T and T and 0 = 0 and 0 < path8_i584 and 1 > 0 and 1 > 0 and T and path8_i637 = 1)) or ((path9_i564 = path9_i570 and path9_i567 = path9_i584 and path9_i637 = (path9_i584 - 2) and path9_i584 = path9_i645 and path9_i637 = path9_i644 and path9_i645 = path9_i674 and 1 = res_i564 and 1 = res_i566 and 1 = res_i568 and path9_i674 = res_i565 and path9_i674 = res_i567 and path9_i564 = initial_i564 and path9_i565 = initial_i565 and path9_i566 = initial_i566 and path9_i567 = initial_i567 and path9_i568 = initial_i568) and (T and 0 = 0 and 0 <= path9_i570 and path9_i570 <= path9_i567 and path9_i570 <= path9_i567 and path9_i570 = 0 and T and T and 0 = 0 and 0 < path9_i584 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 < path9_i644)) or ((path10_i564 = path10_i570 and -1 = res_i564 and 0 = res_i565 and 0 = res_i566 and 0 = res_i567 and 0 = res_i568 and path10_i564 = initial_i564 and path10_i565 = initial_i565 and path10_i566 = initial_i566 and path10_i567 = initial_i567 and path10_i568 = initial_i568) and (T and 0 = 0 and 0 <= path10_i570 and path10_i570 <= path10_i567 and path10_i570 <= path10_i567 and path10_i570 = 0 and T and T and path10_i567 = 0 and T and T)) or ((path1_i564 = path1_i570 and path1_i567 = path1_i582 and path1_i570 = path1_i581 and path1_i568 = path1_i585 and path1_i588 = (path1_i581 + 1) and path1_i614 = (path1_i582 - 2) and path1_i588 = path1_i614 and path1_i582 = path1_i646 and path1_i614 = res_i564 and path1_i646 = res_i565 and path1_i646 = res_i567 and path1_i585 = res_i566 and path1_i585 = res_i568 and path1_i564 = initial_i564 and path1_i565 = initial_i565 and path1_i566 = initial_i566 and path1_i567 = initial_i567 and path1_i568 = initial_i568) and (T and 0 = 0 and 0 <= path1_i570 and path1_i570 <= path1_i567 and path1_i570 <= path1_i567 and path1_i581 > 0 and path1_i581 < path1_i582 and path1_i585 != 0 and path1_i585 != 0 and path1_i588 != path1_i614 and path1_i588 != path1_i614 and path1_i581 < path1_i582)) or ((path1_i564 = path1_i570 and path1_i567 = path1_i582 and path1_i570 = path1_i581 and path1_i568 = path1_i585 and path1_i588 = (path1_i581 + 1) and path1_i614 = (path1_i582 - 2) and path1_i588 = path1_i614 and path1_i582 = path1_i646 and path1_i614 = res_i564 and path1_i646 = res_i565 and path1_i646 = res_i567 and path1_i585 = res_i566 and path1_i585 = res_i568 and path1_i564 = initial_i564 and path1_i565 = initial_i565 and path1_i566 = initial_i566 and path1_i567 = initial_i567 and path1_i568 = initial_i568) and (T and 0 = 0 and 0 <= path1_i570 and path1_i570 <= path1_i567 and path1_i570 <= path1_i567 and path1_i581 > 0 and path1_i581 < path1_i582 and path1_i585 != 0 and path1_i585 != 0 and path1_i588 != path1_i614 and path1_i588 != path1_i614 and path1_i581 > path1_i582)) or ((path1_i564 = path1_i570 and path1_i567 = path1_i582 and path1_i570 = path1_i581 and path1_i568 = path1_i585 and path1_i588 = (path1_i581 + 1) and path1_i614 = (path1_i582 - 2) and path1_i588 = path1_i614 and path1_i582 = path1_i646 and path1_i614 = res_i564 and path1_i646 = res_i565 and path1_i646 = res_i567 and path1_i585 = res_i566 and path1_i585 = res_i568 and path1_i564 = initial_i564 and path1_i565 = initial_i565 and path1_i566 = initial_i566 and path1_i567 = initial_i567 and path1_i568 = initial_i568) and (T and 0 = 0 and 0 <= path1_i570 and path1_i570 <= path1_i567 and path1_i570 <= path1_i567 and path1_i581 > 0 and path1_i581 != path1_i582 and path1_i581 < path1_i582 and path1_i585 != 0 and path1_i588 != path1_i614 and path1_i588 != path1_i614 and path1_i585 < 0)) or ((path1_i564 = path1_i570 and path1_i567 = path1_i582 and path1_i570 = path1_i581 and path1_i568 = path1_i585 and path1_i588 = (path1_i581 + 1) and path1_i614 = (path1_i582 - 2) and path1_i588 = path1_i614 and path1_i582 = path1_i646 and path1_i614 = res_i564 and path1_i646 = res_i565 and path1_i646 = res_i567 and path1_i585 = res_i566 and path1_i585 = res_i568 and path1_i564 = initial_i564 and path1_i565 = initial_i565 and path1_i566 = initial_i566 and path1_i567 = initial_i567 and path1_i568 = initial_i568) and (T and 0 = 0 and 0 <= path1_i570 and path1_i570 <= path1_i567 and path1_i570 <= path1_i567 and path1_i581 > 0 and path1_i581 != path1_i582 and path1_i581 < path1_i582 and path1_i585 != 0 and path1_i588 != path1_i614 and path1_i588 != path1_i614 and path1_i585 > 0))) and (((res1_i564 = res1_i570 and res1_i567 = res1_i582 and res1_i570 = res1_i581 and res1_i568 = res1_i585 and res1_i588 = (res1_i581 + 1) and res1_i614 = (res1_i582 - 2) and res1_i588 = res1_i614 and res1_i582 = res1_i646 and res_i564 = res1_i564 and res_i565 = res1_i565 and res_i566 = res1_i566 and res_i567 = res1_i567 and res_i568 = res1_i568) and !(T and 0 = 0 and 0 <= res1_i570 and res1_i570 <= res1_i567 and res1_i570 <= res1_i567 and res1_i581 > 0 and res1_i581 != res1_i582 and res1_i581 < res1_i582 and res1_i585 != 0 and res1_i585 != 0 and res1_i588 != res1_i614 and res1_i588 != res1_i614)) and ((res2_i564 = res2_i570 and res2_i567 = res2_i582 and res2_i570 = res2_i581 and res2_i568 = res2_i585 and res2_i588 = (res2_i581 + 1) and res2_i614 = (res2_i582 - 2) and res2_i646 = (res2_i582 + -1) and res_i564 = res2_i564 and res_i565 = res2_i565 and res_i566 = res2_i566 and res_i567 = res2_i567 and res_i568 = res2_i568) and !(T and 0 = 0 and 0 <= res2_i570 and res2_i570 <= res2_i567 and res2_i570 <= res2_i567 and res2_i581 > 0 and res2_i581 != res2_i582 and res2_i581 < res2_i582 and res2_i585 != 0 and res2_i585 != 0 and res2_i588 = res2_i614 and res2_i614 = res2_i614)) and ((res3_i564 = res3_i570 and res3_i567 = res3_i582 and res3_i570 = res3_i581 and res3_i595 = (res3_i581 + -1) and res3_i615 = (res3_i582 - 2) and res3_i595 = res3_i615 and res3_i582 = res3_i651 and res_i564 = res3_i564 and res_i565 = res3_i565 and res_i566 = res3_i566 and res_i567 = res3_i567 and res_i568 = res3_i568) and !(T and 0 = 0 and 0 <= res3_i570 and res3_i570 <= res3_i567 and res3_i570 <= res3_i567 and res3_i581 > 0 and res3_i581 != res3_i582 and res3_i581 < res3_i582 and res3_i568 = 0 and T and T and res3_i595 != res3_i615 and res3_i595 != res3_i615)) and ((res4_i564 = res4_i570 and res4_i567 = res4_i582 and res4_i570 = res4_i581 and res4_i595 = (res4_i581 + -1) and res4_i615 = (res4_i582 - 2) and res4_i651 = (res4_i582 + -1) and res_i564 = res4_i564 and res_i565 = res4_i565 and res_i566 = res4_i566 and res_i567 = res4_i567 and res_i568 = res4_i568) and !(T and 0 = 0 and 0 <= res4_i570 and res4_i570 <= res4_i567 and res4_i570 <= res4_i567 and res4_i581 > 0 and res4_i581 != res4_i582 and res4_i581 < res4_i582 and res4_i568 = 0 and T and T and res4_i595 = res4_i615 and res4_i615 = res4_i615)) and ((res5_i564 = res5_i570 and res5_i567 = res5_i582 and res5_i570 = res5_i581 and res5_i599 = (res5_i582 + -1) and res5_i622 = (res5_i582 - 2) and res_i564 = res5_i564 and res_i565 = res5_i565 and res_i566 = res5_i566 and res_i567 = res5_i567 and res_i568 = res5_i568) and !(T and 0 = 0 and 0 <= res5_i570 and res5_i570 <= res5_i567 and res5_i570 <= res5_i567 and res5_i581 > 0 and res5_i581 = res5_i582 and res5_i582 = res5_i582 and T and T and res5_i599 != res5_i622 and res5_i599 != res5_i622)) and ((res6_i564 = res6_i570 and res6_i567 = res6_i582 and res6_i570 = res6_i581 and res6_i599 = (res6_i582 + -1) and res6_i622 = (res6_i582 - 2) and res6_i665 = (res6_i582 + -1) and res_i564 = res6_i564 and res_i565 = res6_i565 and res_i566 = res6_i566 and res_i567 = res6_i567 and res_i568 = res6_i568) and !(T and 0 = 0 and 0 <= res6_i570 and res6_i570 <= res6_i567 and res6_i570 <= res6_i567 and res6_i581 > 0 and res6_i581 = res6_i582 and res6_i582 = res6_i582 and T and T and res6_i599 = res6_i622 and res6_i622 = res6_i622)) and ((res7_i564 = res7_i570 and res7_i567 = res7_i584 and res7_i637 = (res7_i584 - 2) and res7_i637 = res7_i643 and res7_i584 = res7_i674 and res_i564 = res7_i564 and res_i565 = res7_i565 and res_i566 = res7_i566 and res_i567 = res7_i567 and res_i568 = res7_i568) and !(T and 0 = 0 and 0 <= res7_i570 and res7_i570 <= res7_i567 and res7_i570 <= res7_i567 and res7_i570 = 0 and T and T and 0 = 0 and 0 < res7_i584 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 > res7_i643)) and ((res8_i564 = res8_i570 and res8_i567 = res8_i584 and res8_i637 = (res8_i584 - 2) and res8_i674 = (res8_i584 + -1) and res_i564 = res8_i564 and res_i565 = res8_i565 and res_i566 = res8_i566 and res_i567 = res8_i567 and res_i568 = res8_i568) and !(T and 0 = 0 and 0 <= res8_i570 and res8_i570 <= res8_i567 and res8_i570 <= res8_i567 and res8_i570 = 0 and T and T and 0 = 0 and 0 < res8_i584 and 1 > 0 and 1 > 0 and T and res8_i637 = 1)) and ((res9_i564 = res9_i570 and res9_i567 = res9_i584 and res9_i637 = (res9_i584 - 2) and res9_i584 = res9_i645 and res9_i637 = res9_i644 and res9_i645 = res9_i674 and res_i564 = res9_i564 and res_i565 = res9_i565 and res_i566 = res9_i566 and res_i567 = res9_i567 and res_i568 = res9_i568) and !(T and 0 = 0 and 0 <= res9_i570 and res9_i570 <= res9_i567 and res9_i570 <= res9_i567 and res9_i570 = 0 and T and T and 0 = 0 and 0 < res9_i584 and 1 > 0 and 1 > 0 and T and 1 = 1 and 1 < res9_i644)) and ((res10_i564 = res10_i570 and res_i564 = res10_i564 and res_i565 = res10_i565 and res_i566 = res10_i566 and res_i567 = res10_i567 and res_i568 = res10_i568) and !(T and 0 = 0 and 0 <= res10_i570 and res10_i570 <= res10_i567 and res10_i570 <= res10_i567 and res10_i570 = 0 and T and T and res10_i567 = 0 and T and T)) and ((res1_i564 = res1_i570 and res1_i567 = res1_i582 and res1_i570 = res1_i581 and res1_i568 = res1_i585 and res1_i588 = (res1_i581 + 1) and res1_i614 = (res1_i582 - 2) and res1_i588 = res1_i614 and res1_i582 = res1_i646 and res_i564 = res1_i564 and res_i565 = res1_i565 and res_i566 = res1_i566 and res_i567 = res1_i567 and res_i568 = res1_i568) and !(T and 0 = 0 and 0 <= res1_i570 and res1_i570 <= res1_i567 and res1_i570 <= res1_i567 and res1_i581 > 0 and res1_i581 < res1_i582 and res1_i585 != 0 and res1_i585 != 0 and res1_i588 != res1_i614 and res1_i588 != res1_i614 and res1_i581 < res1_i582)) and ((res1_i564 = res1_i570 and res1_i567 = res1_i582 and res1_i570 = res1_i581 and res1_i568 = res1_i585 and res1_i588 = (res1_i581 + 1) and res1_i614 = (res1_i582 - 2) and res1_i588 = res1_i614 and res1_i582 = res1_i646 and res_i564 = res1_i564 and res_i565 = res1_i565 and res_i566 = res1_i566 and res_i567 = res1_i567 and res_i568 = res1_i568) and !(T and 0 = 0 and 0 <= res1_i570 and res1_i570 <= res1_i567 and res1_i570 <= res1_i567 and res1_i581 > 0 and res1_i581 < res1_i582 and res1_i585 != 0 and res1_i585 != 0 and res1_i588 != res1_i614 and res1_i588 != res1_i614 and res1_i581 > res1_i582)) and ((res1_i564 = res1_i570 and res1_i567 = res1_i582 and res1_i570 = res1_i581 and res1_i568 = res1_i585 and res1_i588 = (res1_i581 + 1) and res1_i614 = (res1_i582 - 2) and res1_i588 = res1_i614 and res1_i582 = res1_i646 and res_i564 = res1_i564 and res_i565 = res1_i565 and res_i566 = res1_i566 and res_i567 = res1_i567 and res_i568 = res1_i568) and !(T and 0 = 0 and 0 <= res1_i570 and res1_i570 <= res1_i567 and res1_i570 <= res1_i567 and res1_i581 > 0 and res1_i581 != res1_i582 and res1_i581 < res1_i582 and res1_i585 != 0 and res1_i588 != res1_i614 and res1_i588 != res1_i614 and res1_i585 < 0)) and ((res1_i564 = res1_i570 and res1_i567 = res1_i582 and res1_i570 = res1_i581 and res1_i568 = res1_i585 and res1_i588 = (res1_i581 + 1) and res1_i614 = (res1_i582 - 2) and res1_i588 = res1_i614 and res1_i582 = res1_i646 and res_i564 = res1_i564 and res_i565 = res1_i565 and res_i566 = res1_i566 and res_i567 = res1_i567 and res_i568 = res1_i568) and !(T and 0 = 0 and 0 <= res1_i570 and res1_i570 <= res1_i567 and res1_i570 <= res1_i567 and res1_i581 > 0 and res1_i581 != res1_i582 and res1_i581 < res1_i582 and res1_i585 != 0 and res1_i588 != res1_i614 and res1_i588 != res1_i614 and res1_i585 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
