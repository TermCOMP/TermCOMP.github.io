YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dZesy.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 512 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AProVERec01 {
	public static void main(String[] args){
		List a = new List(args[0].length(), null);
		rec(args[1].length(), a);
	}

	public static void rec(int y, List res){
		int x = 3 * y;
		if(x < 100000){
			rec(x+1, res);
		}
		x = x*2;
		res.add(x);
	}
}

class List {
	int val = 0;
	List next = null;
	
	List (int v,List n){
		val = v;
		next = n;
	}

	public void add(int newVal){
		if (next == null) {
			next = new List(newVal, null);
		} else {
			next.add(newVal);
		}
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AProVERec01 {
	public static void main(String[] args){
		List a = new List(args[0].length(), null);
		rec(args[1].length(), a);
	}

	public static void rec(int y, List res){
		int x = 3 * y;
		if(x < 100000){
			rec(x+1, res);
		}
		x = x*2;
		res.add(x);
	}
}

class List {
	int val = 0;
	List next = null;
	
	List (int v,List n){
		val = v;
		next = n;
	}

	public void add(int newVal){
		if (next == null) {
			next = new List(newVal, null);
		} else {
			next.add(newVal);
		}
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
AProVERec01.main([Ljava/lang/String;)V: Graph of 5338 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
