NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/BFhNV.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 196 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Cousot {

    public static void loop(int i, int j) {
	if (i < j) i = i+4;
	else {
	    j = j+1;
	    i = i+2;
	}
	loop(i, j);
    }

    public static void main(String[] args) {
	loop(2, 0);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Cousot {

    public static void loop(int i, int j) {
	if (i < j) i = i+4;
	else {
	    j = j+1;
	    i = i+2;
	}
	loop(i, j);
    }

    public static void main(String[] args) {
	loop(2, 0);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Cousot.main||0: push 2|| - || ->
YES:  (JL1)
1:<Cousot.main||1: push 0|| - ||2>
YES:  (JL1)
2:<Cousot.main||2: Cousot.loop(II)V|| - ||2, 0>
YES:  (JL1)
3:<Cousot.loop||0: load INT #0||#0: 2, #1: 0|| ->
YES:  (JL1)
Start state of loop: 

[i19(lv_0_0), i20(lv_0_1)]
<Cousot.loop||0: load INT #0||#0: i21, #1: i22|| ->
	i19: [2,+inf)(l3)
	i20: [0,+inf)(l3)
	i21: [2,+inf)(l3)
	i22: [0,+inf)(l3)
YES:  (JL1)


In the loop head node, references [i21, i22, i19, i20] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((2 <= initial_i19 and 0 <= initial_i20 and 2 <= initial_i21 and 0 <= initial_i22) and (((path1_i23 = (path1_i22 + 1) and path1_i24 = (path1_i21 + 2) and path1_i24 = res_i19 and path1_i24 = res_i21 and path1_i23 = res_i20 and path1_i23 = res_i22 and path1_i19 = initial_i19 and path1_i20 = initial_i20 and path1_i21 = initial_i21 and path1_i22 = initial_i22) and (path1_i21 >= path1_i22 and path1_i21 > path1_i22)) and ((res1_i23 = (res1_i22 + 1) and res1_i24 = (res1_i21 + 2) and res_i19 = res1_i19 and res_i20 = res1_i20 and res_i21 = res1_i21 and res_i22 = res1_i22) and !(res1_i21 >= res1_i22 and res1_i21 > res1_i22))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
