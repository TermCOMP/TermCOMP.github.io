MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/ajqSs.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
class BubbleSortR {
    public static void main(String[] args) {
	Random.args = args;
	int dim = Random.random()*Random.random();
	int[] t = new int[dim] ;
	for(int i = 0; i < t.length; i++)
	    t[i] = Random.random();
	sort(t);
    }

    public static void sort(int[] x) {
	int n = x.length;
	for (int pass=1; pass < n; pass++)  // count how many times
	    // This next loop becomes shorter and shorter
	    aux(0,n-pass,x);
	//for (int i = 0; i < x.length; i++)
	//    System.out.print(x[i]+ " ");
		}

    private static void aux(int min, int max, int[] x) {
	if (min >= max) return;
	int i = min;
	if (x[i] > x[i+1]) {
	    // exchange elements
	    int temp = x[i]; x[i] = x[i+1];  x[i+1] = temp;
	}
	aux(min+1,max,x);
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
class BubbleSortR {
    public static void main(String[] args) {
	Random.args = args;
	int dim = Random.random()*Random.random();
	int[] t = new int[dim] ;
	for(int i = 0; i < t.length; i++)
	    t[i] = Random.random();
	sort(t);
    }

    public static void sort(int[] x) {
	int n = x.length;
	for (int pass=1; pass < n; pass++)  // count how many times
	    // This next loop becomes shorter and shorter
	    aux(0,n-pass,x);
	//for (int i = 0; i < x.length; i++)
	//    System.out.print(x[i]+ " ");
		}

    private static void aux(int min, int max, int[] x) {
	if (min >= max) return;
	int i = min;
	if (x[i] > x[i+1]) {
	    // exchange elements
	    int temp = x[i]; x[i] = x[i+1];  x[i+1] = temp;
	}
	aux(min+1,max,x);
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}


