YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/eOK0a.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 220 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 82 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 37 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 29 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) IntTRS
(19) RankingReductionPairProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * The classical Ackermann function.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * Note that we have to express the basic cases as m <= 0 and n <= 0
 * in order to prove termination.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Ackermann {

    public static int ack(int m, int n) {
	if (m <= 0) return n + 1;
	else if (n <= 0) return ack(m - 1,1);
	else return ack(m - 1,ack(m,n - 1));
    }

    public static void main(String[] args) {
	ack(10,12);
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * The classical Ackermann function.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * Note that we have to express the basic cases as m <= 0 and n <= 0
 * in order to prove termination.
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class Ackermann {

    public static int ack(int m, int n) {
	if (m <= 0) return n + 1;
	else if (n <= 0) return ack(m - 1,1);
	else return ack(m - 1,ack(m,n - 1));
    }

    public static void main(String[] args) {
	ack(10,12);
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Ackermann.main([Ljava/lang/String;)V: Graph of 13 nodes with 0 SCCs.



Ackermann.ack(II)I: Graph of 52 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Ackermann.ack(II)I
SCC calls the following helper methods: Ackermann.ack(II)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 39 IRulesP rules:
f2317_0_ack_GT(EOS(STATIC_2317), i39, i40, i44, i42, i44) -> f2323_0_ack_GT(EOS(STATIC_2323), i39, i40, i44, i42, i44) :|: TRUE
f2323_0_ack_GT(EOS(STATIC_2323), i39, i40, i44, i42, i44) -> f2327_0_ack_Load(EOS(STATIC_2327), i39, i40, i44, i42) :|: i44 > 0
f2327_0_ack_Load(EOS(STATIC_2327), i39, i40, i44, i42) -> f2331_0_ack_GT(EOS(STATIC_2331), i39, i40, i44, i42, i42) :|: TRUE
f2331_0_ack_GT(EOS(STATIC_2331), i39, i40, i44, i45, i45) -> f2336_0_ack_GT(EOS(STATIC_2336), i39, i40, i44, i45, i45) :|: TRUE
f2331_0_ack_GT(EOS(STATIC_2331), i39, i40, i44, i46, i46) -> f2337_0_ack_GT(EOS(STATIC_2337), i39, i40, i44, i46, i46) :|: TRUE
f2336_0_ack_GT(EOS(STATIC_2336), i39, i40, i44, i45, i45) -> f2343_0_ack_Load(EOS(STATIC_2343), i39, i40, i44) :|: i45 <= 0
f2343_0_ack_Load(EOS(STATIC_2343), i39, i40, i44) -> f2357_0_ack_ConstantStackPush(EOS(STATIC_2357), i39, i40, i44) :|: TRUE
f2357_0_ack_ConstantStackPush(EOS(STATIC_2357), i39, i40, i44) -> f2524_0_ack_IntArithmetic(EOS(STATIC_2524), i39, i40, i44, 1) :|: TRUE
f2524_0_ack_IntArithmetic(EOS(STATIC_2524), i39, i40, i44, matching1) -> f2532_0_ack_ConstantStackPush(EOS(STATIC_2532), i39, i40, i44 - 1) :|: i44 > 0 && matching1 = 1
f2532_0_ack_ConstantStackPush(EOS(STATIC_2532), i39, i40, i51) -> f2540_0_ack_InvokeMethod(EOS(STATIC_2540), i39, i40, i51, 1) :|: TRUE
f2540_0_ack_InvokeMethod(EOS(STATIC_2540), i39, i40, i51, matching1) -> f2546_0_ack_Load(EOS(STATIC_2546), i51, 1, i51, 1) :|: TRUE && matching1 = 1
f2540_0_ack_InvokeMethod(EOS(STATIC_2540), i39, i40, i51, matching1) -> f2546_1_ack_Load(EOS(STATIC_2546), i39, i40, i51, 1) :|: TRUE && matching1 = 1
f2546_0_ack_Load(EOS(STATIC_2546), i51, matching1, i51, matching2) -> f2554_0_ack_Load(EOS(STATIC_2554), i51, 1, i51, 1) :|: TRUE && matching1 = 1 && matching2 = 1
f2554_0_ack_Load(EOS(STATIC_2554), i51, matching1, i51, matching2) -> f2311_0_ack_Load(EOS(STATIC_2311), i51, 1, i51, 1) :|: TRUE && matching1 = 1 && matching2 = 1
f2311_0_ack_Load(EOS(STATIC_2311), i39, i40, i41, i42) -> f2317_0_ack_GT(EOS(STATIC_2317), i39, i40, i41, i42, i41) :|: TRUE
f2337_0_ack_GT(EOS(STATIC_2337), i39, i40, i44, i46, i46) -> f2345_0_ack_Load(EOS(STATIC_2345), i39, i40, i44, i46) :|: i46 > 0
f2345_0_ack_Load(EOS(STATIC_2345), i39, i40, i44, i46) -> f2358_0_ack_ConstantStackPush(EOS(STATIC_2358), i39, i40, i44, i46, i44) :|: TRUE
f2358_0_ack_ConstantStackPush(EOS(STATIC_2358), i39, i40, i44, i46, i44) -> f2527_0_ack_IntArithmetic(EOS(STATIC_2527), i39, i40, i44, i46, i44, 1) :|: TRUE
f2527_0_ack_IntArithmetic(EOS(STATIC_2527), i39, i40, i44, i46, i44, matching1) -> f2535_0_ack_Load(EOS(STATIC_2535), i39, i40, i44, i46, i44 - 1) :|: i44 > 0 && matching1 = 1
f2535_0_ack_Load(EOS(STATIC_2535), i39, i40, i44, i46, i52) -> f2542_0_ack_Load(EOS(STATIC_2542), i39, i40, i46, i52, i44) :|: TRUE
f2542_0_ack_Load(EOS(STATIC_2542), i39, i40, i46, i52, i44) -> f2549_0_ack_ConstantStackPush(EOS(STATIC_2549), i39, i40, i52, i44, i46) :|: TRUE
f2549_0_ack_ConstantStackPush(EOS(STATIC_2549), i39, i40, i52, i44, i46) -> f2556_0_ack_IntArithmetic(EOS(STATIC_2556), i39, i40, i52, i44, i46, 1) :|: TRUE
f2556_0_ack_IntArithmetic(EOS(STATIC_2556), i39, i40, i52, i44, i46, matching1) -> f2560_0_ack_InvokeMethod(EOS(STATIC_2560), i39, i40, i52, i44, i46 - 1) :|: i46 > 0 && matching1 = 1
f2560_0_ack_InvokeMethod(EOS(STATIC_2560), i39, i40, i52, i44, i53) -> f2562_0_ack_Load(EOS(STATIC_2562), i44, i53, i44, i53) :|: i44 >= 1 && i52 < i44
f2560_0_ack_InvokeMethod(EOS(STATIC_2560), i39, i40, i52, i44, i53) -> f2562_1_ack_Load(EOS(STATIC_2562), i39, i40, i52, i44, i53) :|: i44 >= 1 && i52 < i44
f2562_0_ack_Load(EOS(STATIC_2562), i44, i53, i44, i53) -> f2667_0_ack_Load(EOS(STATIC_2667), i44, i53, i44, i53) :|: TRUE
f2667_0_ack_Load(EOS(STATIC_2667), i44, i53, i44, i53) -> f2311_0_ack_Load(EOS(STATIC_2311), i44, i53, i44, i53) :|: TRUE
f12639_0_ack_Return(EOS(STATIC_12639), i39, i40, i52, i73) -> f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39, i40, i52, i73) :|: TRUE
f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39, i40, i52, i73) -> f12700_0_ack_Load(EOS(STATIC_12700), i52, i73, i52, i73) :|: TRUE
f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39, i40, i52, i73) -> f12700_1_ack_Load(EOS(STATIC_12700), i39, i40, i52, i73) :|: TRUE
f12700_0_ack_Load(EOS(STATIC_12700), i52, i73, i52, i73) -> f12701_0_ack_Load(EOS(STATIC_12701), i52, i73, i52, i73) :|: TRUE
f12701_0_ack_Load(EOS(STATIC_12701), i52, i73, i52, i73) -> f2311_0_ack_Load(EOS(STATIC_2311), i52, i73, i52, i73) :|: TRUE
f12642_0_ack_Return(EOS(STATIC_12642), i39, i40, i52, i80) -> f12674_0_ack_InvokeMethod(EOS(STATIC_12674), i39, i40, i52, i80) :|: TRUE
f12674_0_ack_InvokeMethod(EOS(STATIC_12674), i39, i40, i52, i80) -> f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39, i40, i52, i80) :|: TRUE
f24091_0_ack_Return(EOS(STATIC_24091), i39, i40, i52, i127) -> f24120_0_ack_InvokeMethod(EOS(STATIC_24120), i39, i40, i52, i127) :|: TRUE
f24120_0_ack_InvokeMethod(EOS(STATIC_24120), i39, i40, i52, i127) -> f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39, i40, i52, i127) :|: TRUE
f2562_1_ack_Load(EOS(STATIC_2562), i39, i40, i52, i44, i53) -> f12639_0_ack_Return(EOS(STATIC_12639), i39, i40, i52, i73) :|: TRUE
f2562_1_ack_Load(EOS(STATIC_2562), i39, i40, i52, i44, i53) -> f12642_0_ack_Return(EOS(STATIC_12642), i39, i40, i52, i80) :|: TRUE
f2562_1_ack_Load(EOS(STATIC_2562), i39, i40, i52, i44, i53) -> f24091_0_ack_Return(EOS(STATIC_24091), i39, i40, i52, i127) :|: TRUE
Combined rules. Obtained 6 IRulesP rules:
f2317_0_ack_GT(EOS(STATIC_2317), i39:0, i40:0, i44:0, i42:0, i44:0) -> f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39:0, i40:0, i44:0 - 1, i80:0) :|: i44:0 > 0 && i42:0 > 0 && i44:0 - 1 < i44:0
f2317_0_ack_GT(EOS(STATIC_2317), i39:0, i40:0, i44:0, i42:0, i44:0) -> f2317_0_ack_GT(EOS(STATIC_2317), i44:0, i42:0 - 1, i44:0, i42:0 - 1, i44:0) :|: i44:0 > 0 && i42:0 > 0 && i44:0 - 1 < i44:0
f2317_0_ack_GT(EOS(STATIC_2317), i39:0, i40:0, i44:0, i42:0, i44:0) -> f2317_0_ack_GT(EOS(STATIC_2317), i44:0 - 1, 1, i44:0 - 1, 1, i44:0 - 1) :|: i44:0 > 0 && i42:0 < 1
f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39:0, i40:0, i52:0, i73:0) -> f2317_0_ack_GT(EOS(STATIC_2317), i52:0, i73:0, i52:0, i73:0, i52:0) :|: TRUE
Removed following non-SCC rules:
f12651_0_ack_InvokeMethod(EOS(STATIC_12651), i39:0, i40:0, i52:0, i73:0) -> f12700_1_ack_Load(EOS(STATIC_12700), i39:0, i40:0, i52:0, i73:0) :|: TRUE
f2317_0_ack_GT(EOS(STATIC_2317), i39:0, i40:0, i44:0, i42:0, i44:0) -> f2546_1_ack_Load(EOS(STATIC_2546), i39:0, i40:0, i44:0 - 1, 1) :|: i44:0 > 0 && i42:0 < 1
Filtered constant ground arguments:
   f2317_0_ack_GT(x1, x2, x3, x4, x5, x6) -> f2317_0_ack_GT(x2, x3, x4, x5, x6)
   f12651_0_ack_InvokeMethod(x1, x2, x3, x4, x5) -> f12651_0_ack_InvokeMethod(x2, x3, x4, x5)
Filtered duplicate arguments:
   f2317_0_ack_GT(x1, x2, x3, x4, x5) -> f2317_0_ack_GT(x1, x2, x4, x5)
Filtered unneeded arguments:
   f2317_0_ack_GT(x1, x2, x3, x4) -> f2317_0_ack_GT(x3, x4)
   f12651_0_ack_InvokeMethod(x1, x2, x3, x4) -> f12651_0_ack_InvokeMethod(x3, x4)
Finished conversion. Obtained 4 rules.P rules:
f2317_0_ack_GT(i42:0, i44:0) -> f12651_0_ack_InvokeMethod(i44:0 - 1, i80:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0
f2317_0_ack_GT(i42:0, i44:0) -> f2317_0_ack_GT(i42:0 - 1, i44:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0
f2317_0_ack_GT(i42:0, i44:0) -> f2317_0_ack_GT(1, i44:0 - 1) :|: i44:0 > 0 && i42:0 < 1
f12651_0_ack_InvokeMethod(i52:0, i73:0) -> f2317_0_ack_GT(i73:0, i52:0) :|: TRUE

----------------------------------------

(8)
Obligation:
Rules:
f2317_0_ack_GT(i42:0, i44:0) -> f12651_0_ack_InvokeMethod(i44:0 - 1, i80:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0
f2317_0_ack_GT(x, x1) -> f2317_0_ack_GT(x - 1, x1) :|: x > 0 && x1 - 1 < x1 && x1 > 0
f2317_0_ack_GT(x2, x3) -> f2317_0_ack_GT(1, x3 - 1) :|: x3 > 0 && x2 < 1
f12651_0_ack_InvokeMethod(i52:0, i73:0) -> f2317_0_ack_GT(i73:0, i52:0) :|: TRUE

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2317_0_ack_GT(i42:0, i44:0) -> f12651_0_ack_InvokeMethod(arith, i80:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0 && arith = i44:0 - 1
f2317_0_ack_GT(x4, x5) -> f2317_0_ack_GT(x6, x5) :|: x4 > 0 && x5 - 1 < x5 && x5 > 0 && x6 = x4 - 1
f2317_0_ack_GT(x7, x8) -> f2317_0_ack_GT(1, x9) :|: x8 > 0 && x7 < 1 && x9 = x8 - 1
f12651_0_ack_InvokeMethod(i52:0, i73:0) -> f2317_0_ack_GT(i73:0, i52:0) :|: TRUE

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2317_0_ack_GT(i42:0, i44:0) -> f12651_0_ack_InvokeMethod(arith, i80:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0 && arith = i44:0 - 1
(2) f2317_0_ack_GT(x4, x5) -> f2317_0_ack_GT(x6, x5) :|: x4 > 0 && x5 - 1 < x5 && x5 > 0 && x6 = x4 - 1
(3) f2317_0_ack_GT(x7, x8) -> f2317_0_ack_GT(1, x9) :|: x8 > 0 && x7 < 1 && x9 = x8 - 1
(4) f12651_0_ack_InvokeMethod(i52:0, i73:0) -> f2317_0_ack_GT(i73:0, i52:0) :|: TRUE

Arcs:
(1) -> (4)
(2) -> (1), (2), (3)
(3) -> (1), (2)
(4) -> (1), (2), (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2317_0_ack_GT(i42:0, i44:0) -> f12651_0_ack_InvokeMethod(arith, i80:0) :|: i42:0 > 0 && i44:0 - 1 < i44:0 && i44:0 > 0 && arith = i44:0 - 1
(2) f2317_0_ack_GT(x4, x5) -> f2317_0_ack_GT(x6, x5) :|: x4 > 0 && x5 - 1 < x5 && x5 > 0 && x6 = x4 - 1
(3) f2317_0_ack_GT(x7, x8) -> f2317_0_ack_GT(1, x9) :|: x8 > 0 && x7 < 1 && x9 = x8 - 1
(4) f12651_0_ack_InvokeMethod(i52:0, i73:0) -> f2317_0_ack_GT(i73:0, i52:0) :|: TRUE

Arcs:
(1) -> (4)
(2) -> (1), (2), (3)
(3) -> (1), (2)
(4) -> (1), (2), (3)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(x4:0 - 1, x5:0) :|: x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0
f2317_0_ack_GT(x7:0, x8:0) -> f2317_0_ack_GT(1, x8:0 - 1) :|: x8:0 > 0 && x7:0 < 1
f2317_0_ack_GT(i42:0:0, i44:0:0) -> f2317_0_ack_GT(i80:0:0, i44:0:0 - 1) :|: i42:0:0 > 0 && i44:0:0 - 1 < i44:0:0 && i44:0:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2317_0_ack_GT(VARIABLE, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(c, x5:0) :|: c = x4:0 - 1 && (x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0)
f2317_0_ack_GT(x7:0, x8:0) -> f2317_0_ack_GT(c1, c2) :|: c2 = x8:0 - 1 && c1 = 1 && (x8:0 > 0 && x7:0 < 1)
f2317_0_ack_GT(i42:0:0, i44:0:0) -> f2317_0_ack_GT(i80:0:0, c3) :|: c3 = i44:0:0 - 1 && (i42:0:0 > 0 && i44:0:0 - 1 < i44:0:0 && i44:0:0 > 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2317_0_ack_GT(x, x1)] = x1

The following rules are decreasing:
f2317_0_ack_GT(x7:0, x8:0) -> f2317_0_ack_GT(c1, c2) :|: c2 = x8:0 - 1 && c1 = 1 && (x8:0 > 0 && x7:0 < 1)
f2317_0_ack_GT(i42:0:0, i44:0:0) -> f2317_0_ack_GT(i80:0:0, c3) :|: c3 = i44:0:0 - 1 && (i42:0:0 > 0 && i44:0:0 - 1 < i44:0:0 && i44:0:0 > 0)
The following rules are bounded:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(c, x5:0) :|: c = x4:0 - 1 && (x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0)
f2317_0_ack_GT(x7:0, x8:0) -> f2317_0_ack_GT(c1, c2) :|: c2 = x8:0 - 1 && c1 = 1 && (x8:0 > 0 && x7:0 < 1)
f2317_0_ack_GT(i42:0:0, i44:0:0) -> f2317_0_ack_GT(i80:0:0, c3) :|: c3 = i44:0:0 - 1 && (i42:0:0 > 0 && i44:0:0 - 1 < i44:0:0 && i44:0:0 > 0)

----------------------------------------

(18)
Obligation:
Rules:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(c, x5:0) :|: c = x4:0 - 1 && (x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0)

----------------------------------------

(19) RankingReductionPairProof (EQUIVALENT)
Interpretation:
[ f2317_0_ack_GT ] = f2317_0_ack_GT_1

The following rules are decreasing:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(c, x5:0) :|: c = x4:0 - 1 && (x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0)

The following rules are bounded:
f2317_0_ack_GT(x4:0, x5:0) -> f2317_0_ack_GT(c, x5:0) :|: c = x4:0 - 1 && (x4:0 > 0 && x5:0 - 1 < x5:0 && x5:0 > 0)


----------------------------------------

(20)
YES
