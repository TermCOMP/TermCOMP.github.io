YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/1e0x0.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 417 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Et4 {
    public static void main(String[] args) {
		Random.args = args;
	    int a =  Random.random(); 
	   	int b =  Random.random();	
	    int c =  Random.random();
	    loop(a,b,c);
	}
	public static void loop(int a, int b, int c) {	
	   	if ( (b - c >= 1) && (a == c)) {
	   		int r =  Random.random();
	   		b = 10;
	   		c = c + 1 + r;		
	   	    a = c;
	   	    loop(a,b,c);
	   	}
    }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Et4 {
    public static void main(String[] args) {
		Random.args = args;
	    int a =  Random.random(); 
	   	int b =  Random.random();	
	    int c =  Random.random();
	    loop(a,b,c);
	}
	public static void loop(int a, int b, int c) {	
	   	if ( (b - c >= 1) && (a == c)) {
	   		int r =  Random.random();
	   		b = 10;
	   		c = c + 1 + r;		
	   	    a = c;
	   	    loop(a,b,c);
	   	}
    }
}



public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Et4.main([Ljava/lang/String;)V: Graph of 4088 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
