YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/y2Cav.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 62 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 119 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class FactSum {
    public static int factorial(int n){
	if (n <=0) return 1;
	else return n*factorial(n-1);    
    }

    public static int doSum(int n){
	int s=0;
	while (n >= 0) {
	    s = s + factorial(n);
	    n=n-1;
	}
	return s;
    }

    public static void main(String[] args) {
	doSum(10);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class FactSum {
    public static int factorial(int n){
	if (n <=0) return 1;
	else return n*factorial(n-1);    
    }

    public static int doSum(int n){
	int s=0;
	while (n >= 0) {
	    s = s + factorial(n);
	    n=n-1;
	}
	return s;
    }

    public static void main(String[] args) {
	doSum(10);
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
FactSum.main([Ljava/lang/String;)V: Graph of 682 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
