YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/04QSC.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 106 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 31 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 11 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 19 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class TerminatorRec02 {
	public static void main(String[] args) {
		fact(args.length);
	}

	public static int fact(int x) {
		if (x > 1) {
			int y = fact(x - 1);
			return y * x;
		}
		return 1;
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class TerminatorRec02 {
	public static void main(String[] args) {
		fact(args.length);
	}

	public static int fact(int x) {
		if (x > 1) {
			int y = fact(x - 1);
			return y * x;
		}
		return 1;
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
TerminatorRec02.main([Ljava/lang/String;)V: Graph of 15 nodes with 0 SCCs.



TerminatorRec02.fact(I)I: Graph of 29 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: TerminatorRec02.fact(I)I
SCC calls the following helper methods: TerminatorRec02.fact(I)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 11 IRulesP rules:
f15_0_fact_ConstantStackPush(EOS(STATIC_15), i2, i2, i2) -> f16_0_fact_LE(EOS(STATIC_16), i2, i2, i2, 1) :|: TRUE
f16_0_fact_LE(EOS(STATIC_16), i5, i5, i5, matching1) -> f18_0_fact_LE(EOS(STATIC_18), i5, i5, i5, 1) :|: TRUE && matching1 = 1
f18_0_fact_LE(EOS(STATIC_18), i5, i5, i5, matching1) -> f23_0_fact_Load(EOS(STATIC_23), i5, i5) :|: i5 > 1 && matching1 = 1
f23_0_fact_Load(EOS(STATIC_23), i5, i5) -> f26_0_fact_ConstantStackPush(EOS(STATIC_26), i5, i5, i5) :|: TRUE
f26_0_fact_ConstantStackPush(EOS(STATIC_26), i5, i5, i5) -> f32_0_fact_IntArithmetic(EOS(STATIC_32), i5, i5, i5, 1) :|: TRUE
f32_0_fact_IntArithmetic(EOS(STATIC_32), i5, i5, i5, matching1) -> f41_0_fact_InvokeMethod(EOS(STATIC_41), i5, i5, i5 - 1) :|: i5 > 0 && matching1 = 1
f41_0_fact_InvokeMethod(EOS(STATIC_41), i5, i5, i13) -> f43_0_fact_Load(EOS(STATIC_43), i13, i13) :|: i5 > 1 && i13 >= 1 && i13 < i5
f41_0_fact_InvokeMethod(EOS(STATIC_41), i5, i5, i13) -> f43_1_fact_Load(EOS(STATIC_43), i5, i5, i13) :|: i5 > 1 && i13 >= 1 && i13 < i5
f43_0_fact_Load(EOS(STATIC_43), i13, i13) -> f46_0_fact_Load(EOS(STATIC_46), i13, i13) :|: TRUE
f46_0_fact_Load(EOS(STATIC_46), i13, i13) -> f14_0_fact_Load(EOS(STATIC_14), i13, i13) :|: TRUE
f14_0_fact_Load(EOS(STATIC_14), i2, i2) -> f15_0_fact_ConstantStackPush(EOS(STATIC_15), i2, i2, i2) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f15_0_fact_ConstantStackPush(EOS(STATIC_15), i2:0, i2:0, i2:0) -> f15_0_fact_ConstantStackPush(EOS(STATIC_15), i2:0 - 1, i2:0 - 1, i2:0 - 1) :|: i2:0 > 1 && i2:0 - 1 < i2:0
Removed following non-SCC rules:
f15_0_fact_ConstantStackPush(EOS(STATIC_15), i2:0, i2:0, i2:0) -> f43_1_fact_Load(EOS(STATIC_43), i2:0, i2:0, i2:0 - 1) :|: i2:0 > 1 && i2:0 - 1 < i2:0
Filtered constant ground arguments:
   f15_0_fact_ConstantStackPush(x1, x2, x3, x4) -> f15_0_fact_ConstantStackPush(x2, x3, x4)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f15_0_fact_ConstantStackPush(x1, x2, x3) -> f15_0_fact_ConstantStackPush(x3)
Finished conversion. Obtained 1 rules.P rules:
f15_0_fact_ConstantStackPush(i2:0) -> f15_0_fact_ConstantStackPush(i2:0 - 1) :|: i2:0 > 1 && i2:0 - 1 < i2:0

----------------------------------------

(8)
Obligation:
Rules:
f15_0_fact_ConstantStackPush(i2:0) -> f15_0_fact_ConstantStackPush(i2:0 - 1) :|: i2:0 > 1 && i2:0 - 1 < i2:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f15_0_fact_ConstantStackPush(i2:0) -> f15_0_fact_ConstantStackPush(arith) :|: i2:0 > 1 && i2:0 - 1 < i2:0 && arith = i2:0 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f15_0_fact_ConstantStackPush(i2:0) -> f15_0_fact_ConstantStackPush(arith) :|: i2:0 > 1 && i2:0 - 1 < i2:0 && arith = i2:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f15_0_fact_ConstantStackPush(i2:0) -> f15_0_fact_ConstantStackPush(arith) :|: i2:0 > 1 && i2:0 - 1 < i2:0 && arith = i2:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f15_0_fact_ConstantStackPush(i2:0:0) -> f15_0_fact_ConstantStackPush(i2:0:0 - 1) :|: i2:0:0 > 1 && i2:0:0 - 1 < i2:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f15_0_fact_ConstantStackPush(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f15_0_fact_ConstantStackPush(i2:0:0) -> f15_0_fact_ConstantStackPush(c) :|: c = i2:0:0 - 1 && (i2:0:0 > 1 && i2:0:0 - 1 < i2:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f15_0_fact_ConstantStackPush(x)] = x

The following rules are decreasing:
f15_0_fact_ConstantStackPush(i2:0:0) -> f15_0_fact_ConstantStackPush(c) :|: c = i2:0:0 - 1 && (i2:0:0 > 1 && i2:0:0 - 1 < i2:0:0)
The following rules are bounded:
f15_0_fact_ConstantStackPush(i2:0:0) -> f15_0_fact_ConstantStackPush(c) :|: c = i2:0:0 - 1 && (i2:0:0 > 1 && i2:0:0 - 1 < i2:0:0)

----------------------------------------

(18)
YES
