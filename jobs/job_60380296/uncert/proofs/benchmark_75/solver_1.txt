YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VTZRn.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 275 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 79 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 20 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 25 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AckermannR {

    public static int ack(int m, int n) {
	if (m <= 0) return n + 1;
	else if (n <= 0) return ack(m - 1,1);
	else return ack(m - 1,ack(m,n - 1));
    }

    public static void main(String[] args) {
	Random.args = args;
	ack(Random.random(),Random.random());
    }
}

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AckermannR {

    public static int ack(int m, int n) {
	if (m <= 0) return n + 1;
	else if (n <= 0) return ack(m - 1,1);
	else return ack(m - 1,ack(m,n - 1));
    }

    public static void main(String[] args) {
	Random.args = args;
	ack(Random.random(),Random.random());
    }
}

public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
AckermannR.main([Ljava/lang/String;)V: Graph of 241 nodes with 0 SCCs.



AckermannR.ack(II)I: Graph of 50 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: AckermannR.ack(II)I
SCC calls the following helper methods: AckermannR.ack(II)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 36 IRulesP rules:
f963_0_ack_GT(EOS(STATIC_963), i149, i146, i149, i147, i149) -> f975_0_ack_GT(EOS(STATIC_975), i149, i146, i149, i147, i149) :|: TRUE
f975_0_ack_GT(EOS(STATIC_975), i149, i146, i149, i147, i149) -> f987_0_ack_Load(EOS(STATIC_987), i149, i146, i149, i147) :|: i149 > 0
f987_0_ack_Load(EOS(STATIC_987), i149, i146, i149, i147) -> f991_0_ack_GT(EOS(STATIC_991), i149, i146, i149, i147, i147) :|: TRUE
f991_0_ack_GT(EOS(STATIC_991), i149, i146, i149, matching1, matching2) -> f995_0_ack_GT(EOS(STATIC_995), i149, i146, i149, 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f991_0_ack_GT(EOS(STATIC_991), i149, i146, i149, i151, i151) -> f996_0_ack_GT(EOS(STATIC_996), i149, i146, i149, i151, i151) :|: TRUE
f995_0_ack_GT(EOS(STATIC_995), i149, i146, i149, matching1, matching2) -> f1001_0_ack_Load(EOS(STATIC_1001), i149, i146, i149) :|: 0 <= 0 && matching1 = 0 && matching2 = 0
f1001_0_ack_Load(EOS(STATIC_1001), i149, i146, i149) -> f1011_0_ack_ConstantStackPush(EOS(STATIC_1011), i149, i146, i149) :|: TRUE
f1011_0_ack_ConstantStackPush(EOS(STATIC_1011), i149, i146, i149) -> f1026_0_ack_IntArithmetic(EOS(STATIC_1026), i149, i146, i149, 1) :|: TRUE
f1026_0_ack_IntArithmetic(EOS(STATIC_1026), i149, i146, i149, matching1) -> f1216_0_ack_ConstantStackPush(EOS(STATIC_1216), i149, i146, i149 - 1) :|: i149 > 0 && matching1 = 1
f1216_0_ack_ConstantStackPush(EOS(STATIC_1216), i149, i146, i202) -> f1234_0_ack_InvokeMethod(EOS(STATIC_1234), i149, i146, i202, 1) :|: TRUE
f1234_0_ack_InvokeMethod(EOS(STATIC_1234), i149, i146, i202, matching1) -> f1250_0_ack_Load(EOS(STATIC_1250), i202, 1, i202, 1) :|: i149 >= 1 && i202 < i149 && matching1 = 1
f1234_0_ack_InvokeMethod(EOS(STATIC_1234), i149, i146, i202, matching1) -> f1250_1_ack_Load(EOS(STATIC_1250), i149, i146, i202, 1) :|: i149 >= 1 && i202 < i149 && matching1 = 1
f1250_0_ack_Load(EOS(STATIC_1250), i202, matching1, i202, matching2) -> f1264_0_ack_Load(EOS(STATIC_1264), i202, 1, i202, 1) :|: TRUE && matching1 = 1 && matching2 = 1
f1264_0_ack_Load(EOS(STATIC_1264), i202, matching1, i202, matching2) -> f948_0_ack_Load(EOS(STATIC_948), i202, 1, i202, 1) :|: TRUE && matching1 = 1 && matching2 = 1
f948_0_ack_Load(EOS(STATIC_948), i145, i146, i145, i147) -> f963_0_ack_GT(EOS(STATIC_963), i145, i146, i145, i147, i145) :|: TRUE
f996_0_ack_GT(EOS(STATIC_996), i149, i146, i149, i151, i151) -> f1002_0_ack_Load(EOS(STATIC_1002), i149, i146, i149, i151) :|: i151 > 0
f1002_0_ack_Load(EOS(STATIC_1002), i149, i146, i149, i151) -> f1012_0_ack_ConstantStackPush(EOS(STATIC_1012), i149, i146, i149, i151, i149) :|: TRUE
f1012_0_ack_ConstantStackPush(EOS(STATIC_1012), i149, i146, i149, i151, i149) -> f1027_0_ack_IntArithmetic(EOS(STATIC_1027), i149, i146, i149, i151, i149, 1) :|: TRUE
f1027_0_ack_IntArithmetic(EOS(STATIC_1027), i149, i146, i149, i151, i149, matching1) -> f1219_0_ack_Load(EOS(STATIC_1219), i149, i146, i149, i151, i149 - 1) :|: i149 > 0 && matching1 = 1
f1219_0_ack_Load(EOS(STATIC_1219), i149, i146, i149, i151, i203) -> f1236_0_ack_Load(EOS(STATIC_1236), i149, i146, i151, i203, i149) :|: TRUE
f1236_0_ack_Load(EOS(STATIC_1236), i149, i146, i151, i203, i149) -> f1252_0_ack_ConstantStackPush(EOS(STATIC_1252), i149, i146, i203, i149, i151) :|: TRUE
f1252_0_ack_ConstantStackPush(EOS(STATIC_1252), i149, i146, i203, i149, i151) -> f1265_0_ack_IntArithmetic(EOS(STATIC_1265), i149, i146, i203, i149, i151, 1) :|: TRUE
f1265_0_ack_IntArithmetic(EOS(STATIC_1265), i149, i146, i203, i149, i151, matching1) -> f1270_0_ack_InvokeMethod(EOS(STATIC_1270), i149, i146, i203, i149, i151 - 1) :|: i151 > 0 && matching1 = 1
f1270_0_ack_InvokeMethod(EOS(STATIC_1270), i149, i146, i203, i149, i208) -> f1274_0_ack_Load(EOS(STATIC_1274), i149, i208, i149, i208) :|: i149 >= 1 && i203 < i149
f1270_0_ack_InvokeMethod(EOS(STATIC_1270), i149, i146, i203, i149, i208) -> f1274_1_ack_Load(EOS(STATIC_1274), i149, i146, i203, i149, i208) :|: i149 >= 1 && i203 < i149
f1274_0_ack_Load(EOS(STATIC_1274), i149, i208, i149, i208) -> f1372_0_ack_Load(EOS(STATIC_1372), i149, i208, i149, i208) :|: TRUE
f1372_0_ack_Load(EOS(STATIC_1372), i149, i208, i149, i208) -> f948_0_ack_Load(EOS(STATIC_948), i149, i208, i149, i208) :|: TRUE
f11055_0_ack_Return(EOS(STATIC_11055), i875, i146, i203, i870) -> f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i875, i146, i203, i870) :|: TRUE
f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i875, i146, i203, i870) -> f11065_0_ack_Load(EOS(STATIC_11065), i203, i870, i203, i870) :|: i875 >= 1 && i870 >= 1 && i203 < i875
f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i875, i146, i203, i870) -> f11065_1_ack_Load(EOS(STATIC_11065), i875, i146, i203, i870) :|: i875 >= 1 && i870 >= 1 && i203 < i875
f11065_0_ack_Load(EOS(STATIC_11065), i203, i870, i203, i870) -> f11069_0_ack_Load(EOS(STATIC_11069), i203, i870, i203, i870) :|: TRUE
f11069_0_ack_Load(EOS(STATIC_11069), i203, i870, i203, i870) -> f948_0_ack_Load(EOS(STATIC_948), i203, i870, i203, i870) :|: TRUE
f14967_0_ack_Return(EOS(STATIC_14967), i1645, i146, i203, i1639) -> f15194_0_ack_InvokeMethod(EOS(STATIC_15194), i1645, i146, i203, i1639) :|: TRUE
f15194_0_ack_InvokeMethod(EOS(STATIC_15194), i1645, i146, i203, i1639) -> f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i1645, i146, i203, i1639) :|: TRUE
f1274_1_ack_Load(EOS(STATIC_1274), i875, i146, i203, i875, i208) -> f11055_0_ack_Return(EOS(STATIC_11055), i875, i146, i203, i870) :|: TRUE
f1274_1_ack_Load(EOS(STATIC_1274), i1645, i146, i203, i1645, i208) -> f14967_0_ack_Return(EOS(STATIC_14967), i1645, i146, i203, i1639) :|: TRUE
Combined rules. Obtained 6 IRulesP rules:
f963_0_ack_GT(EOS(STATIC_963), i149:0, i146:0, i149:0, i147:0, i149:0) -> f963_0_ack_GT(EOS(STATIC_963), i149:0, i147:0 - 1, i149:0, i147:0 - 1, i149:0) :|: i149:0 > 0 && i147:0 > 0 && i149:0 - 1 < i149:0
f963_0_ack_GT(EOS(STATIC_963), i149:0, i146:0, i149:0, 0, i149:0) -> f963_0_ack_GT(EOS(STATIC_963), i149:0 - 1, 1, i149:0 - 1, 1, i149:0 - 1) :|: i149:0 > 0 && i149:0 - 1 < i149:0
f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i875:0, i146:0, i203:0, i870:0) -> f963_0_ack_GT(EOS(STATIC_963), i203:0, i870:0, i203:0, i870:0, i203:0) :|: i870:0 > 0 && i875:0 > i203:0 && i875:0 > 0
f963_0_ack_GT(EOS(STATIC_963), i149:0, i146:0, i149:0, i147:0, i149:0) -> f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i149:0, i146:0, i149:0 - 1, i870:0) :|: i149:0 > 0 && i147:0 > 0 && i149:0 - 1 < i149:0
Removed following non-SCC rules:
f11060_0_ack_InvokeMethod(EOS(STATIC_11060), i875:0, i146:0, i203:0, i870:0) -> f11065_1_ack_Load(EOS(STATIC_11065), i875:0, i146:0, i203:0, i870:0) :|: i870:0 > 0 && i875:0 > i203:0 && i875:0 > 0
f963_0_ack_GT(EOS(STATIC_963), i149:0, i146:0, i149:0, 0, i149:0) -> f1250_1_ack_Load(EOS(STATIC_1250), i149:0, i146:0, i149:0 - 1, 1) :|: i149:0 > 0 && i149:0 - 1 < i149:0
Filtered constant ground arguments:
   f963_0_ack_GT(x1, x2, x3, x4, x5, x6) -> f963_0_ack_GT(x2, x3, x4, x5, x6)
   f11060_0_ack_InvokeMethod(x1, x2, x3, x4, x5) -> f11060_0_ack_InvokeMethod(x2, x3, x4, x5)
Filtered duplicate arguments:
   f963_0_ack_GT(x1, x2, x3, x4, x5) -> f963_0_ack_GT(x2, x4, x5)
Filtered unneeded arguments:
   f963_0_ack_GT(x1, x2, x3) -> f963_0_ack_GT(x2, x3)
   f11060_0_ack_InvokeMethod(x1, x2, x3, x4) -> f11060_0_ack_InvokeMethod(x1, x3, x4)
Finished conversion. Obtained 4 rules.P rules:
f963_0_ack_GT(i147:0, i149:0) -> f963_0_ack_GT(i147:0 - 1, i149:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0
f963_0_ack_GT(cons_0, i149:0) -> f963_0_ack_GT(1, i149:0 - 1) :|: i149:0 > 0 && i149:0 - 1 < i149:0 && cons_0 = 0
f11060_0_ack_InvokeMethod(i875:0, i203:0, i870:0) -> f963_0_ack_GT(i870:0, i203:0) :|: i875:0 > i203:0 && i875:0 > 0 && i870:0 > 0
f963_0_ack_GT(i147:0, i149:0) -> f11060_0_ack_InvokeMethod(i149:0, i149:0 - 1, i870:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0

----------------------------------------

(8)
Obligation:
Rules:
f963_0_ack_GT(i147:0, i149:0) -> f963_0_ack_GT(i147:0 - 1, i149:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0
f963_0_ack_GT(x, x1) -> f963_0_ack_GT(1, x1 - 1) :|: x1 > 0 && x1 - 1 < x1 && x = 0
f11060_0_ack_InvokeMethod(i875:0, i203:0, i870:0) -> f963_0_ack_GT(i870:0, i203:0) :|: i875:0 > i203:0 && i875:0 > 0 && i870:0 > 0
f963_0_ack_GT(x2, x3) -> f11060_0_ack_InvokeMethod(x3, x3 - 1, x4) :|: x2 > 0 && x3 - 1 < x3 && x3 > 0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f963_0_ack_GT(i147:0, i149:0) -> f963_0_ack_GT(arith, i149:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0 && arith = i147:0 - 1
f963_0_ack_GT(x5, x6) -> f963_0_ack_GT(1, x7) :|: x6 > 0 && x6 - 1 < x6 && x5 = 0 && x7 = x6 - 1
f11060_0_ack_InvokeMethod(i875:0, i203:0, i870:0) -> f963_0_ack_GT(i870:0, i203:0) :|: i875:0 > i203:0 && i875:0 > 0 && i870:0 > 0
f963_0_ack_GT(x8, x9) -> f11060_0_ack_InvokeMethod(x9, x10, x11) :|: x8 > 0 && x9 - 1 < x9 && x9 > 0 && x10 = x9 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f963_0_ack_GT(i147:0, i149:0) -> f963_0_ack_GT(arith, i149:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0 && arith = i147:0 - 1
(2) f963_0_ack_GT(x5, x6) -> f963_0_ack_GT(1, x7) :|: x6 > 0 && x6 - 1 < x6 && x5 = 0 && x7 = x6 - 1
(3) f11060_0_ack_InvokeMethod(i875:0, i203:0, i870:0) -> f963_0_ack_GT(i870:0, i203:0) :|: i875:0 > i203:0 && i875:0 > 0 && i870:0 > 0
(4) f963_0_ack_GT(x8, x9) -> f11060_0_ack_InvokeMethod(x9, x10, x11) :|: x8 > 0 && x9 - 1 < x9 && x9 > 0 && x10 = x9 - 1

Arcs:
(1) -> (1), (2), (4)
(2) -> (1), (4)
(3) -> (1), (4)
(4) -> (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f963_0_ack_GT(i147:0, i149:0) -> f963_0_ack_GT(arith, i149:0) :|: i147:0 > 0 && i149:0 - 1 < i149:0 && i149:0 > 0 && arith = i147:0 - 1
(2) f11060_0_ack_InvokeMethod(i875:0, i203:0, i870:0) -> f963_0_ack_GT(i870:0, i203:0) :|: i875:0 > i203:0 && i875:0 > 0 && i870:0 > 0
(3) f963_0_ack_GT(x8, x9) -> f11060_0_ack_InvokeMethod(x9, x10, x11) :|: x8 > 0 && x9 - 1 < x9 && x9 > 0 && x10 = x9 - 1
(4) f963_0_ack_GT(x5, x6) -> f963_0_ack_GT(1, x7) :|: x6 > 0 && x6 - 1 < x6 && x5 = 0 && x7 = x6 - 1

Arcs:
(1) -> (1), (3), (4)
(2) -> (1), (3)
(3) -> (2)
(4) -> (1), (3)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(i147:0:0 - 1, i149:0:0) :|: i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0
f963_0_ack_GT(cons_0, x6:0) -> f963_0_ack_GT(1, x6:0 - 1) :|: x6:0 > 0 && x6:0 - 1 < x6:0 && cons_0 = 0
f963_0_ack_GT(x8:0, x9:0) -> f963_0_ack_GT(x11:0, x9:0 - 1) :|: x11:0 > 0 && x9:0 > 0 && x9:0 - 1 < x9:0 && x8:0 > 0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f963_0_ack_GT(VARIABLE, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(c, i149:0:0) :|: c = i147:0:0 - 1 && (i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0)
f963_0_ack_GT(c1, x6:0) -> f963_0_ack_GT(c2, c3) :|: c3 = x6:0 - 1 && (c2 = 1 && c1 = 0) && (x6:0 > 0 && x6:0 - 1 < x6:0 && cons_0 = 0)
f963_0_ack_GT(x8:0, x9:0) -> f963_0_ack_GT(x11:0, c4) :|: c4 = x9:0 - 1 && (x11:0 > 0 && x9:0 > 0 && x9:0 - 1 < x9:0 && x8:0 > 0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f963_0_ack_GT(x, x1)] = -1 + x1

The following rules are decreasing:
f963_0_ack_GT(c1, x6:0) -> f963_0_ack_GT(c2, c3) :|: c3 = x6:0 - 1 && (c2 = 1 && c1 = 0) && (x6:0 > 0 && x6:0 - 1 < x6:0 && cons_0 = 0)
f963_0_ack_GT(x8:0, x9:0) -> f963_0_ack_GT(x11:0, c4) :|: c4 = x9:0 - 1 && (x11:0 > 0 && x9:0 > 0 && x9:0 - 1 < x9:0 && x8:0 > 0)
The following rules are bounded:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(c, i149:0:0) :|: c = i147:0:0 - 1 && (i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0)
f963_0_ack_GT(c1, x6:0) -> f963_0_ack_GT(c2, c3) :|: c3 = x6:0 - 1 && (c2 = 1 && c1 = 0) && (x6:0 > 0 && x6:0 - 1 < x6:0 && cons_0 = 0)
f963_0_ack_GT(x8:0, x9:0) -> f963_0_ack_GT(x11:0, c4) :|: c4 = x9:0 - 1 && (x11:0 > 0 && x9:0 > 0 && x9:0 - 1 < x9:0 && x8:0 > 0)

----------------------------------------

(18)
Obligation:
Rules:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(c, i149:0:0) :|: c = i147:0:0 - 1 && (i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f963_0_ack_GT(x, x1)] = x

The following rules are decreasing:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(c, i149:0:0) :|: c = i147:0:0 - 1 && (i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0)
The following rules are bounded:
f963_0_ack_GT(i147:0:0, i149:0:0) -> f963_0_ack_GT(c, i149:0:0) :|: c = i147:0:0 - 1 && (i147:0:0 > 0 && i149:0:0 - 1 < i149:0:0 && i149:0:0 > 0)

----------------------------------------

(20)
YES
