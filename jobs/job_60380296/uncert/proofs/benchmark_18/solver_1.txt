YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Lvfk6.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 259 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) AND
    (7) JBCTerminationSCC
        (8) SCCToIRSProof [SOUND, 41 ms]
        (9) IRSwT
        (10) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (11) IRSwT
        (12) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (13) IRSwT
        (14) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (15) IRSwT
        (16) TempFilterProof [SOUND, 8 ms]
        (17) IntTRS
        (18) PolynomialOrderProcessor [EQUIVALENT, 2 ms]
        (19) YES
    (20) JBCTerminationSCC
        (21) SCCToIRSProof [SOUND, 44 ms]
        (22) IRSwT
        (23) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (24) IRSwT
        (25) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (26) IRSwT
        (27) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (28) IRSwT
        (29) TempFilterProof [SOUND, 9 ms]
        (30) IntTRS
        (31) PolynomialOrderProcessor [EQUIVALENT, 3 ms]
        (32) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class CAppE {
	CAppE next;

	public static void main(String[] args) {
		Random.args = args;
		CAppE list = createList();
		cappE(Random.random());
	}

	public static void cappE(int j) {
		CAppE a = new CAppE();
		if (j > 0) {
			a.appE(j);
			while (a.next == null) {}
		}
	}

	public void appE(int i) {
		if (next == null) {
			if (i <= 0) {
				return;
			} else {
				next = new CAppE();
			}
			i--;
	 	}
		next.appE(i);
	}

	public static CAppE createList() {
		CAppE result = null;
		int length = Random.random();
		while (length > 0) {
			result = new CAppE(result);
			length--;
		}
		return result;
	}

	public CAppE() {
		this.next = null;
	}

	public CAppE(CAppE n) {
		this.next = n;
	}
}

class Random {
	static String[] args;
	static int index = 0;

	public static int random() {
		String string = args[index];
		index++;
		return string.length();
	}
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class CAppE {
	CAppE next;

	public static void main(String[] args) {
		Random.args = args;
		CAppE list = createList();
		cappE(Random.random());
	}

	public static void cappE(int j) {
		CAppE a = new CAppE();
		if (j > 0) {
			a.appE(j);
			while (a.next == null) {}
		}
	}

	public void appE(int i) {
		if (next == null) {
			if (i <= 0) {
				return;
			} else {
				next = new CAppE();
			}
			i--;
	 	}
		next.appE(i);
	}

	public static CAppE createList() {
		CAppE result = null;
		int length = Random.random();
		while (length > 0) {
			result = new CAppE(result);
			length--;
		}
		return result;
	}

	public CAppE() {
		this.next = null;
	}

	public CAppE(CAppE n) {
		this.next = n;
	}
}

class Random {
	static String[] args;
	static int index = 0;

	public static int random() {
		String string = args[index];
		index++;
		return string.length();
	}
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
CAppE.main([Ljava/lang/String;)V: Graph of 119 nodes with 0 SCCs.



CAppE.createList()LCAppE;: Graph of 139 nodes with 1 SCC.



CAppE.appE(I)V: Graph of 36 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 2 SCCss.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: CAppE.appE(I)V
SCC calls the following helper methods: CAppE.appE(I)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*CAppE: [next]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(8) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 25 IRulesP rules:
f2186_0_appE_FieldAccess(EOS(STATIC_2186), i224, i224) -> f2315_0_appE_NONNULL(EOS(STATIC_2315), i224, i224) :|: TRUE
f2315_0_appE_NONNULL(EOS(STATIC_2315), i224, i224) -> f2318_0_appE_Load(EOS(STATIC_2318), i224, i224) :|: TRUE
f2318_0_appE_Load(EOS(STATIC_2318), i224, i224) -> f2320_0_appE_GT(EOS(STATIC_2320), i224, i224, i224) :|: TRUE
f2320_0_appE_GT(EOS(STATIC_2320), i240, i240, i240) -> f2325_0_appE_GT(EOS(STATIC_2325), i240, i240, i240) :|: TRUE
f2325_0_appE_GT(EOS(STATIC_2325), i240, i240, i240) -> f2330_0_appE_Load(EOS(STATIC_2330), i240, i240) :|: i240 > 0
f2330_0_appE_Load(EOS(STATIC_2330), i240, i240) -> f2334_0_appE_New(EOS(STATIC_2334), i240, i240) :|: TRUE
f2334_0_appE_New(EOS(STATIC_2334), i240, i240) -> f2361_0_appE_Duplicate(EOS(STATIC_2361), i240, i240) :|: TRUE
f2361_0_appE_Duplicate(EOS(STATIC_2361), i240, i240) -> f2366_0_appE_InvokeMethod(EOS(STATIC_2366), i240, i240) :|: TRUE
f2366_0_appE_InvokeMethod(EOS(STATIC_2366), i240, i240) -> f2368_0__init__Load(EOS(STATIC_2368), i240, i240) :|: TRUE
f2368_0__init__Load(EOS(STATIC_2368), i240, i240) -> f2372_0__init__InvokeMethod(EOS(STATIC_2372), i240, i240) :|: TRUE
f2372_0__init__InvokeMethod(EOS(STATIC_2372), i240, i240) -> f2374_0__init__Load(EOS(STATIC_2374), i240, i240) :|: TRUE
f2374_0__init__Load(EOS(STATIC_2374), i240, i240) -> f2377_0__init__ConstantStackPush(EOS(STATIC_2377), i240, i240) :|: TRUE
f2377_0__init__ConstantStackPush(EOS(STATIC_2377), i240, i240) -> f2379_0__init__FieldAccess(EOS(STATIC_2379), i240, i240) :|: TRUE
f2379_0__init__FieldAccess(EOS(STATIC_2379), i240, i240) -> f2380_0__init__Return(EOS(STATIC_2380), i240, i240) :|: TRUE
f2380_0__init__Return(EOS(STATIC_2380), i240, i240) -> f2383_0_appE_FieldAccess(EOS(STATIC_2383), i240, i240) :|: TRUE
f2383_0_appE_FieldAccess(EOS(STATIC_2383), i240, i240) -> f2391_0_appE_Inc(EOS(STATIC_2391), i240, i240) :|: TRUE
f2391_0_appE_Inc(EOS(STATIC_2391), i240, i240) -> f2395_0_appE_Load(EOS(STATIC_2395), i240, i240 + -1) :|: TRUE
f2395_0_appE_Load(EOS(STATIC_2395), i240, i248) -> f2396_0_appE_FieldAccess(EOS(STATIC_2396), i240, i248) :|: TRUE
f2396_0_appE_FieldAccess(EOS(STATIC_2396), i240, i248) -> f2397_0_appE_Load(EOS(STATIC_2397), i240, i248) :|: TRUE
f2397_0_appE_Load(EOS(STATIC_2397), i240, i248) -> f2398_0_appE_InvokeMethod(EOS(STATIC_2398), i240, i248) :|: TRUE
f2398_0_appE_InvokeMethod(EOS(STATIC_2398), i240, i248) -> f2399_0_appE_Load(EOS(STATIC_2399), i248, i248) :|: i240 >= 1 && i180 > 1 && i248 < i240
f2398_0_appE_InvokeMethod(EOS(STATIC_2398), i240, i248) -> f2399_1_appE_Load(EOS(STATIC_2399), i240, i248) :|: i240 >= 1 && i180 > 1 && i248 < i240
f2399_0_appE_Load(EOS(STATIC_2399), i248, i248) -> f2403_0_appE_Load(EOS(STATIC_2403), i248, i248) :|: TRUE
f2403_0_appE_Load(EOS(STATIC_2403), i248, i248) -> f2115_0_appE_Load(EOS(STATIC_2115), i248, i248) :|: TRUE
f2115_0_appE_Load(EOS(STATIC_2115), i224, i224) -> f2186_0_appE_FieldAccess(EOS(STATIC_2186), i224, i224) :|: TRUE
Combined rules. Obtained 2 IRulesP rules:
f2186_0_appE_FieldAccess(EOS(STATIC_2186), i224:0, i224:0) -> f2186_0_appE_FieldAccess(EOS(STATIC_2186), i224:0 - 1, i224:0 - 1) :|: i224:0 > 0 && i180:0 > 1 && i224:0 - 1 < i224:0
Removed following non-SCC rules:
f2186_0_appE_FieldAccess(EOS(STATIC_2186), i224:0, i224:0) -> f2399_1_appE_Load(EOS(STATIC_2399), i224:0, i224:0 - 1) :|: i224:0 > 0 && i180:0 > 1 && i224:0 - 1 < i224:0
Filtered constant ground arguments:
   f2186_0_appE_FieldAccess(x1, x2, x3) -> f2186_0_appE_FieldAccess(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f2186_0_appE_FieldAccess(x1, x2) -> f2186_0_appE_FieldAccess(x2)
Finished conversion. Obtained 1 rules.P rules:
f2186_0_appE_FieldAccess(i224:0) -> f2186_0_appE_FieldAccess(i224:0 - 1) :|: i180:0 > 1 && i224:0 - 1 < i224:0 && i224:0 > 0

----------------------------------------

(9)
Obligation:
Rules:
f2186_0_appE_FieldAccess(i224:0) -> f2186_0_appE_FieldAccess(i224:0 - 1) :|: i180:0 > 1 && i224:0 - 1 < i224:0 && i224:0 > 0

----------------------------------------

(10) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(11)
Obligation:
Rules:
f2186_0_appE_FieldAccess(i224:0) -> f2186_0_appE_FieldAccess(arith) :|: i180:0 > 1 && i224:0 - 1 < i224:0 && i224:0 > 0 && arith = i224:0 - 1

----------------------------------------

(12) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2186_0_appE_FieldAccess(i224:0) -> f2186_0_appE_FieldAccess(arith) :|: i180:0 > 1 && i224:0 - 1 < i224:0 && i224:0 > 0 && arith = i224:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(13)
Obligation:

Termination digraph:
Nodes:
(1) f2186_0_appE_FieldAccess(i224:0) -> f2186_0_appE_FieldAccess(arith) :|: i180:0 > 1 && i224:0 - 1 < i224:0 && i224:0 > 0 && arith = i224:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(14) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(15)
Obligation:
Rules:
f2186_0_appE_FieldAccess(i224:0:0) -> f2186_0_appE_FieldAccess(i224:0:0 - 1) :|: i180:0:0 > 1 && i224:0:0 - 1 < i224:0:0 && i224:0:0 > 0

----------------------------------------

(16) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2186_0_appE_FieldAccess(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(17)
Obligation:
Rules:
f2186_0_appE_FieldAccess(i224:0:0) -> f2186_0_appE_FieldAccess(c) :|: c = i224:0:0 - 1 && (i180:0:0 > 1 && i224:0:0 - 1 < i224:0:0 && i224:0:0 > 0)

----------------------------------------

(18) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2186_0_appE_FieldAccess(x)] = x

The following rules are decreasing:
f2186_0_appE_FieldAccess(i224:0:0) -> f2186_0_appE_FieldAccess(c) :|: c = i224:0:0 - 1 && (i180:0:0 > 1 && i224:0:0 - 1 < i224:0:0 && i224:0:0 > 0)
The following rules are bounded:
f2186_0_appE_FieldAccess(i224:0:0) -> f2186_0_appE_FieldAccess(c) :|: c = i224:0:0 - 1 && (i180:0:0 > 1 && i224:0:0 - 1 < i224:0:0 && i224:0:0 > 0)

----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: CAppE.createList()LCAppE;
SCC calls the following helper methods: 
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(21) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f1625_0_createList_LE(EOS(STATIC_1625), i181, i181) -> f1628_0_createList_LE(EOS(STATIC_1628), i181, i181) :|: TRUE
f1628_0_createList_LE(EOS(STATIC_1628), i181, i181) -> f1633_0_createList_New(EOS(STATIC_1633), i181) :|: i181 > 0
f1633_0_createList_New(EOS(STATIC_1633), i181) -> f1637_0_createList_Duplicate(EOS(STATIC_1637), i181) :|: TRUE
f1637_0_createList_Duplicate(EOS(STATIC_1637), i181) -> f1665_0_createList_Load(EOS(STATIC_1665), i181) :|: TRUE
f1665_0_createList_Load(EOS(STATIC_1665), i181) -> f1692_0_createList_InvokeMethod(EOS(STATIC_1692), i181) :|: TRUE
f1692_0_createList_InvokeMethod(EOS(STATIC_1692), i181) -> f1754_0__init__Load(EOS(STATIC_1754), i181) :|: TRUE
f1754_0__init__Load(EOS(STATIC_1754), i181) -> f1770_0__init__InvokeMethod(EOS(STATIC_1770), i181) :|: TRUE
f1770_0__init__InvokeMethod(EOS(STATIC_1770), i181) -> f1787_0__init__Load(EOS(STATIC_1787), i181) :|: TRUE
f1787_0__init__Load(EOS(STATIC_1787), i181) -> f1802_0__init__Load(EOS(STATIC_1802), i181) :|: TRUE
f1802_0__init__Load(EOS(STATIC_1802), i181) -> f1815_0__init__FieldAccess(EOS(STATIC_1815), i181) :|: TRUE
f1815_0__init__FieldAccess(EOS(STATIC_1815), i181) -> f1823_0__init__Return(EOS(STATIC_1823), i181) :|: TRUE
f1823_0__init__Return(EOS(STATIC_1823), i181) -> f1833_0_createList_Store(EOS(STATIC_1833), i181) :|: TRUE
f1833_0_createList_Store(EOS(STATIC_1833), i181) -> f1843_0_createList_Inc(EOS(STATIC_1843), i181) :|: TRUE
f1843_0_createList_Inc(EOS(STATIC_1843), i181) -> f1865_0_createList_JMP(EOS(STATIC_1865), i181 + -1) :|: TRUE
f1865_0_createList_JMP(EOS(STATIC_1865), i210) -> f1890_0_createList_Load(EOS(STATIC_1890), i210) :|: TRUE
f1890_0_createList_Load(EOS(STATIC_1890), i210) -> f1622_0_createList_Load(EOS(STATIC_1622), i210) :|: TRUE
f1622_0_createList_Load(EOS(STATIC_1622), i176) -> f1625_0_createList_LE(EOS(STATIC_1625), i176, i176) :|: TRUE
Combined rules. Obtained 1 IRulesP rules:
f1625_0_createList_LE(EOS(STATIC_1625), i181:0, i181:0) -> f1625_0_createList_LE(EOS(STATIC_1625), i181:0 - 1, i181:0 - 1) :|: i181:0 > 0
Filtered constant ground arguments:
   f1625_0_createList_LE(x1, x2, x3) -> f1625_0_createList_LE(x2, x3)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f1625_0_createList_LE(x1, x2) -> f1625_0_createList_LE(x2)
Finished conversion. Obtained 1 rules.P rules:
f1625_0_createList_LE(i181:0) -> f1625_0_createList_LE(i181:0 - 1) :|: i181:0 > 0

----------------------------------------

(22)
Obligation:
Rules:
f1625_0_createList_LE(i181:0) -> f1625_0_createList_LE(i181:0 - 1) :|: i181:0 > 0

----------------------------------------

(23) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(24)
Obligation:
Rules:
f1625_0_createList_LE(i181:0) -> f1625_0_createList_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

----------------------------------------

(25) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1625_0_createList_LE(i181:0) -> f1625_0_createList_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(26)
Obligation:

Termination digraph:
Nodes:
(1) f1625_0_createList_LE(i181:0) -> f1625_0_createList_LE(arith) :|: i181:0 > 0 && arith = i181:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f1625_0_createList_LE(i181:0:0) -> f1625_0_createList_LE(i181:0:0 - 1) :|: i181:0:0 > 0

----------------------------------------

(29) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f1625_0_createList_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(30)
Obligation:
Rules:
f1625_0_createList_LE(i181:0:0) -> f1625_0_createList_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0

----------------------------------------

(31) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f1625_0_createList_LE(x)] = x

The following rules are decreasing:
f1625_0_createList_LE(i181:0:0) -> f1625_0_createList_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0
The following rules are bounded:
f1625_0_createList_LE(i181:0:0) -> f1625_0_createList_LE(c) :|: c = i181:0:0 - 1 && i181:0:0 > 0

----------------------------------------

(32)
YES
