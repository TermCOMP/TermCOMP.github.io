NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/pZrLM.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 219 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class UpAndDownIneq {
	
    public static void upAndDown(int i, int up) {
	while (0 <= i && i <= 10) {
	    if (i >= 10) up = 0;
	    if (i <= 0) up = 1;
	    if (up >= 1) i++;
	    else i--;
	    upAndDown(i, up);
	}
    }

    public static void main(String[] args) {
	upAndDown(args.length, 0);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class UpAndDownIneq {
	
    public static void upAndDown(int i, int up) {
	while (0 <= i && i <= 10) {
	    if (i >= 10) up = 0;
	    if (i <= 0) up = 1;
	    if (up >= 1) i++;
	    else i--;
	    upAndDown(i, up);
	}
    }

    public static void main(String[] args) {
	upAndDown(args.length, 0);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<UpAndDownIneq.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<UpAndDownIneq.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<UpAndDownIneq.main||2: push 0|| - ||1>
YES:  (JL1)
3:<UpAndDownIneq.main||3: UpAndDownIneq.upAndDown(II)V|| - ||1, 0>
YES:  (JL1)
4:<UpAndDownIneq.upAndDown||0: push 0||#0: 1, #1: 0|| ->
YES:  (JL1)
Start state of loop: 

[i47(lv_0_0), i48(lv_0_1)]
<UpAndDownIneq.upAndDown||0: push 0||#0: i47, #1: i49|| ->
	i47: [0,+inf)(l1)
	i48: [0,1](1,1)
	i49: [0,1](1,1)
YES:  (JL1)


In the loop head node, references [i47, i48, i49] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i47 and 0 <= initial_i48 and initial_i48 <= 1 and 0 <= initial_i49 and initial_i49 <= 1) and ((((path1_i47 = path1_i50 and path1_i50 = path1_i56 and path1_i56 = path1_i58 and path1_i59 = (path1_i58 + -1) and path1_i59 = res_i47 and 0 = res_i48 and 0 = res_i49 and path1_i47 = initial_i47 and path1_i48 = initial_i48 and path1_i49 = initial_i49) and (0 <= path1_i47 and T and 10 = 10 and path1_i50 <= 10 and T and 10 = 10 and path1_i56 < 10 and path1_i58 > 0 and path1_i49 = 0 and path1_i49 = 0 and 1 = 1)) or ((path2_i47 = path2_i50 and 9 = res_i47 and 0 = res_i48 and 0 = res_i49 and path2_i47 = initial_i47 and path2_i48 = initial_i48 and path2_i49 = initial_i49) and (0 <= path2_i47 and T and 10 = 10 and path2_i50 <= 10 and path2_i50 = 10 and path2_i50 = 10 and 10 = 10 and 10 > 0)) or ((path3_i47 = path3_i50 and path3_i50 = path3_i56 and path3_i56 = path3_i58 and path3_i60 = (path3_i58 + 1) and path3_i60 = res_i47 and 1 = res_i48 and 1 = res_i49 and path3_i47 = initial_i47 and path3_i48 = initial_i48 and path3_i49 = initial_i49) and (0 <= path3_i47 and T and 10 = 10 and path3_i50 <= 10 and T and 10 = 10 and path3_i56 < 10 and path3_i58 > 0 and path3_i49 = 1 and path3_i49 = 1 and 1 = 1)) or ((path4_i47 = path4_i50 and path4_i50 = path4_i56 and 1 = res_i47 and 1 = res_i48 and 1 = res_i49 and path4_i47 = initial_i47 and path4_i48 = initial_i48 and path4_i49 = initial_i49) and (0 <= path4_i47 and T and 10 = 10 and path4_i50 <= 10 and T and 10 = 10 and path4_i56 < 10 and path4_i56 = 0 and 0 <= 0))) and (((res1_i47 = res1_i50 and res1_i50 = res1_i56 and res1_i56 = res1_i58 and res1_i59 = (res1_i58 + -1) and res_i47 = res1_i47 and res_i48 = res1_i48 and res_i49 = res1_i49) and !(0 <= res1_i47 and T and 10 = 10 and res1_i50 <= 10 and T and 10 = 10 and res1_i56 < 10 and res1_i58 > 0 and res1_i49 = 0 and res1_i49 = 0 and 1 = 1)) and ((res2_i47 = res2_i50 and res_i47 = res2_i47 and res_i48 = res2_i48 and res_i49 = res2_i49) and !(0 <= res2_i47 and T and 10 = 10 and res2_i50 <= 10 and res2_i50 = 10 and res2_i50 = 10 and 10 = 10 and 10 > 0)) and ((res3_i47 = res3_i50 and res3_i50 = res3_i56 and res3_i56 = res3_i58 and res3_i60 = (res3_i58 + 1) and res_i47 = res3_i47 and res_i48 = res3_i48 and res_i49 = res3_i49) and !(0 <= res3_i47 and T and 10 = 10 and res3_i50 <= 10 and T and 10 = 10 and res3_i56 < 10 and res3_i58 > 0 and res3_i49 = 1 and res3_i49 = 1 and 1 = 1)) and ((res4_i47 = res4_i50 and res4_i50 = res4_i56 and res_i47 = res4_i47 and res_i48 = res4_i48 and res_i49 = res4_i49) and !(0 <= res4_i47 and T and 10 = 10 and res4_i50 <= 10 and T and 10 = 10 and res4_i56 < 10 and res4_i56 = 0 and 0 <= 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
