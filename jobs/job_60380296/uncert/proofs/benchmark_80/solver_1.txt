YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zS4Vm.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 356 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 31 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 8 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class HanoiR {
    private void solve(int h, int from, int to, int support) {
	if (h < 1) return;
	else if (h == 1) {
	    //System.out.println("from " + from + " to " + to + "\n");
	}
	else {
	    solve(h - 1, from, support, to);
	    //System.out.println("from " + from + " to " + to + "\n");
	    solve(h - 1, support, to, from);
	}
    }

    public static void main(String[] args) {
	Random.args = args;
	new HanoiR().solve(Random.random(),1,2,3);
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class HanoiR {
    private void solve(int h, int from, int to, int support) {
	if (h < 1) return;
	else if (h == 1) {
	    //System.out.println("from " + from + " to " + to + "\n");
	}
	else {
	    solve(h - 1, from, support, to);
	    //System.out.println("from " + from + " to " + to + "\n");
	    solve(h - 1, support, to, from);
	}
    }

    public static void main(String[] args) {
	Random.args = args;
	new HanoiR().solve(Random.random(),1,2,3);
    }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
      if (index >= args.length)
	  return 0;

      String string = args[index];
      index++;
      return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
HanoiR.main([Ljava/lang/String;)V: Graph of 139 nodes with 0 SCCs.



HanoiR.solve(IIII)V: Graph of 43 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: HanoiR.solve(IIII)V
SCC calls the following helper methods: HanoiR.solve(IIII)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 36 IRulesP rules:
f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i562, i562, i562) -> f2667_0_solve_GE(EOS(STATIC_2667), i562, i562, i562, 1) :|: TRUE
f2667_0_solve_GE(EOS(STATIC_2667), i572, i572, i572, matching1) -> f2674_0_solve_GE(EOS(STATIC_2674), i572, i572, i572, 1) :|: TRUE && matching1 = 1
f2674_0_solve_GE(EOS(STATIC_2674), i572, i572, i572, matching1) -> f2679_0_solve_Load(EOS(STATIC_2679), i572, i572) :|: i572 >= 1 && matching1 = 1
f2679_0_solve_Load(EOS(STATIC_2679), i572, i572) -> f2681_0_solve_ConstantStackPush(EOS(STATIC_2681), i572, i572, i572) :|: TRUE
f2681_0_solve_ConstantStackPush(EOS(STATIC_2681), i572, i572, i572) -> f2690_0_solve_NE(EOS(STATIC_2690), i572, i572, i572, 1) :|: TRUE
f2690_0_solve_NE(EOS(STATIC_2690), i599, i599, i599, matching1) -> f2710_0_solve_NE(EOS(STATIC_2710), i599, i599, i599, 1) :|: TRUE && matching1 = 1
f2710_0_solve_NE(EOS(STATIC_2710), i599, i599, i599, matching1) -> f2714_0_solve_Load(EOS(STATIC_2714), i599, i599) :|: i599 > 1 && matching1 = 1
f2714_0_solve_Load(EOS(STATIC_2714), i599, i599) -> f2716_0_solve_Load(EOS(STATIC_2716), i599, i599) :|: TRUE
f2716_0_solve_Load(EOS(STATIC_2716), i599, i599) -> f2718_0_solve_ConstantStackPush(EOS(STATIC_2718), i599, i599, i599) :|: TRUE
f2718_0_solve_ConstantStackPush(EOS(STATIC_2718), i599, i599, i599) -> f2731_0_solve_IntArithmetic(EOS(STATIC_2731), i599, i599, i599, 1) :|: TRUE
f2731_0_solve_IntArithmetic(EOS(STATIC_2731), i599, i599, i599, matching1) -> f2736_0_solve_Load(EOS(STATIC_2736), i599, i599, i599 - 1) :|: i599 > 0 && matching1 = 1
f2736_0_solve_Load(EOS(STATIC_2736), i599, i599, i613) -> f2737_0_solve_Load(EOS(STATIC_2737), i599, i599, i613) :|: TRUE
f2737_0_solve_Load(EOS(STATIC_2737), i599, i599, i613) -> f2739_0_solve_Load(EOS(STATIC_2739), i599, i599, i613) :|: TRUE
f2739_0_solve_Load(EOS(STATIC_2739), i599, i599, i613) -> f2741_0_solve_InvokeMethod(EOS(STATIC_2741), i599, i599, i613) :|: TRUE
f2741_0_solve_InvokeMethod(EOS(STATIC_2741), i599, i599, i613) -> f2744_0_solve_Load(EOS(STATIC_2744), i613, i613) :|: i599 > 1 && i613 >= 1 && i613 < i599
f2741_0_solve_InvokeMethod(EOS(STATIC_2741), i599, i599, i613) -> f2744_1_solve_Load(EOS(STATIC_2744), i599, i599, i613) :|: i599 > 1 && i613 >= 1 && i613 < i599
f2744_0_solve_Load(EOS(STATIC_2744), i613, i613) -> f2745_0_solve_Load(EOS(STATIC_2745), i613, i613) :|: TRUE
f2745_0_solve_Load(EOS(STATIC_2745), i613, i613) -> f2764_0_solve_Load(EOS(STATIC_2764), i613, i613) :|: TRUE
f2764_0_solve_Load(EOS(STATIC_2764), i613, i613) -> f2665_0_solve_Load(EOS(STATIC_2665), i613, i613) :|: TRUE
f2665_0_solve_Load(EOS(STATIC_2665), i562, i562) -> f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i562, i562, i562) :|: TRUE
f3694_0_solve_Return(EOS(STATIC_3694), i599, i599) -> f3702_0_solve_Load(EOS(STATIC_3702), i599, i599) :|: TRUE
f3702_0_solve_Load(EOS(STATIC_3702), i599, i599) -> f3705_0_solve_Load(EOS(STATIC_3705), i599, i599) :|: TRUE
f3705_0_solve_Load(EOS(STATIC_3705), i599, i599) -> f3707_0_solve_ConstantStackPush(EOS(STATIC_3707), i599, i599) :|: TRUE
f3707_0_solve_ConstantStackPush(EOS(STATIC_3707), i599, i599) -> f3708_0_solve_IntArithmetic(EOS(STATIC_3708), i599, i599, 1) :|: TRUE
f3708_0_solve_IntArithmetic(EOS(STATIC_3708), i599, i599, matching1) -> f3709_0_solve_Load(EOS(STATIC_3709), i599, i599 - 1) :|: i599 > 0 && matching1 = 1
f3709_0_solve_Load(EOS(STATIC_3709), i599, i781) -> f3710_0_solve_Load(EOS(STATIC_3710), i599, i781) :|: TRUE
f3710_0_solve_Load(EOS(STATIC_3710), i599, i781) -> f3711_0_solve_Load(EOS(STATIC_3711), i599, i781) :|: TRUE
f3711_0_solve_Load(EOS(STATIC_3711), i599, i781) -> f3712_0_solve_InvokeMethod(EOS(STATIC_3712), i599, i781) :|: TRUE
f3712_0_solve_InvokeMethod(EOS(STATIC_3712), i599, i781) -> f3713_0_solve_Load(EOS(STATIC_3713), i781, i781) :|: i599 > 1 && i781 >= 1 && i781 < i599
f3712_0_solve_InvokeMethod(EOS(STATIC_3712), i599, i781) -> f3713_1_solve_Load(EOS(STATIC_3713), i599, i781) :|: i599 > 1 && i781 >= 1 && i781 < i599
f3713_0_solve_Load(EOS(STATIC_3713), i781, i781) -> f3714_0_solve_Load(EOS(STATIC_3714), i781, i781) :|: TRUE
f3714_0_solve_Load(EOS(STATIC_3714), i781, i781) -> f3715_0_solve_Load(EOS(STATIC_3715), i781, i781) :|: TRUE
f3715_0_solve_Load(EOS(STATIC_3715), i781, i781) -> f2665_0_solve_Load(EOS(STATIC_2665), i781, i781) :|: TRUE
f4283_0_solve_Return(EOS(STATIC_4283), i599, i599) -> f3694_0_solve_Return(EOS(STATIC_3694), i599, i599) :|: TRUE
f2744_1_solve_Load(EOS(STATIC_2744), i599, i599, i613) -> f3694_0_solve_Return(EOS(STATIC_3694), i599, i599) :|: TRUE
f2744_1_solve_Load(EOS(STATIC_2744), i599, i599, i613) -> f4283_0_solve_Return(EOS(STATIC_4283), i599, i599) :|: TRUE
Combined rules. Obtained 4 IRulesP rules:
f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i562:0, i562:0, i562:0) -> f3694_0_solve_Return(EOS(STATIC_3694), i562:0, i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i562:0, i562:0, i562:0) -> f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i562:0 - 1, i562:0 - 1, i562:0 - 1) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f3694_0_solve_Return(EOS(STATIC_3694), i599:0, i599:0) -> f2666_0_solve_ConstantStackPush(EOS(STATIC_2666), i599:0 - 1, i599:0 - 1, i599:0 - 1) :|: i599:0 > 1 && i599:0 - 1 < i599:0
Removed following non-SCC rules:
f3694_0_solve_Return(EOS(STATIC_3694), i599:0, i599:0) -> f3713_1_solve_Load(EOS(STATIC_3713), i599:0, i599:0 - 1) :|: i599:0 > 1 && i599:0 - 1 < i599:0
Filtered constant ground arguments:
   f2666_0_solve_ConstantStackPush(x1, x2, x3, x4) -> f2666_0_solve_ConstantStackPush(x2, x3, x4)
   f3694_0_solve_Return(x1, x2, x3) -> f3694_0_solve_Return(x2, x3)
Filtered duplicate arguments:
   f2666_0_solve_ConstantStackPush(x1, x2, x3) -> f2666_0_solve_ConstantStackPush(x3)
   f3694_0_solve_Return(x1, x2) -> f3694_0_solve_Return(x2)
Finished conversion. Obtained 3 rules.P rules:
f2666_0_solve_ConstantStackPush(i562:0) -> f3694_0_solve_Return(i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f2666_0_solve_ConstantStackPush(i562:0) -> f2666_0_solve_ConstantStackPush(i562:0 - 1) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f3694_0_solve_Return(i599:0) -> f2666_0_solve_ConstantStackPush(i599:0 - 1) :|: i599:0 > 1 && i599:0 - 1 < i599:0

----------------------------------------

(8)
Obligation:
Rules:
f2666_0_solve_ConstantStackPush(i562:0) -> f3694_0_solve_Return(i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f2666_0_solve_ConstantStackPush(x) -> f2666_0_solve_ConstantStackPush(x - 1) :|: x > 1 && x - 1 < x
f3694_0_solve_Return(i599:0) -> f2666_0_solve_ConstantStackPush(i599:0 - 1) :|: i599:0 > 1 && i599:0 - 1 < i599:0

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f2666_0_solve_ConstantStackPush(i562:0) -> f3694_0_solve_Return(i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
f2666_0_solve_ConstantStackPush(x) -> f2666_0_solve_ConstantStackPush(arith) :|: x > 1 && x - 1 < x && arith = x - 1
f3694_0_solve_Return(x1) -> f2666_0_solve_ConstantStackPush(x2) :|: x1 > 1 && x1 - 1 < x1 && x2 = x1 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2666_0_solve_ConstantStackPush(i562:0) -> f3694_0_solve_Return(i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
(2) f2666_0_solve_ConstantStackPush(x) -> f2666_0_solve_ConstantStackPush(arith) :|: x > 1 && x - 1 < x && arith = x - 1
(3) f3694_0_solve_Return(x1) -> f2666_0_solve_ConstantStackPush(x2) :|: x1 > 1 && x1 - 1 < x1 && x2 = x1 - 1

Arcs:
(1) -> (3)
(2) -> (1), (2)
(3) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f2666_0_solve_ConstantStackPush(i562:0) -> f3694_0_solve_Return(i562:0) :|: i562:0 > 1 && i562:0 - 1 < i562:0
(2) f2666_0_solve_ConstantStackPush(x) -> f2666_0_solve_ConstantStackPush(arith) :|: x > 1 && x - 1 < x && arith = x - 1
(3) f3694_0_solve_Return(x1) -> f2666_0_solve_ConstantStackPush(x2) :|: x1 > 1 && x1 - 1 < x1 && x2 = x1 - 1

Arcs:
(1) -> (3)
(2) -> (1), (2)
(3) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f2666_0_solve_ConstantStackPush(x:0) -> f2666_0_solve_ConstantStackPush(x:0 - 1) :|: x:0 > 1 && x:0 - 1 < x:0
f2666_0_solve_ConstantStackPush(i562:0:0) -> f2666_0_solve_ConstantStackPush(i562:0:0 - 1) :|: i562:0:0 - 1 < i562:0:0 && i562:0:0 > 1

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f2666_0_solve_ConstantStackPush(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f2666_0_solve_ConstantStackPush(x:0) -> f2666_0_solve_ConstantStackPush(c) :|: c = x:0 - 1 && (x:0 > 1 && x:0 - 1 < x:0)
f2666_0_solve_ConstantStackPush(i562:0:0) -> f2666_0_solve_ConstantStackPush(c1) :|: c1 = i562:0:0 - 1 && (i562:0:0 - 1 < i562:0:0 && i562:0:0 > 1)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f2666_0_solve_ConstantStackPush(x)] = x

The following rules are decreasing:
f2666_0_solve_ConstantStackPush(x:0) -> f2666_0_solve_ConstantStackPush(c) :|: c = x:0 - 1 && (x:0 > 1 && x:0 - 1 < x:0)
f2666_0_solve_ConstantStackPush(i562:0:0) -> f2666_0_solve_ConstantStackPush(c1) :|: c1 = i562:0:0 - 1 && (i562:0:0 - 1 < i562:0:0 && i562:0:0 > 1)
The following rules are bounded:
f2666_0_solve_ConstantStackPush(x:0) -> f2666_0_solve_ConstantStackPush(c) :|: c = x:0 - 1 && (x:0 > 1 && x:0 - 1 < x:0)
f2666_0_solve_ConstantStackPush(i562:0:0) -> f2666_0_solve_ConstantStackPush(c1) :|: c1 = i562:0:0 - 1 && (i562:0:0 - 1 < i562:0:0 && i562:0:0 > 1)

----------------------------------------

(18)
YES
