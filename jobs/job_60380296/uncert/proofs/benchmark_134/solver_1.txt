NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/p9Snh.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 98 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Sum {
    public static int sum(int n) {
	if (n == 0) return 0;
	else return n + sum(n - 1);
    }
    
    public static void main(String args[]) {
	sum(-1);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Sum {
    public static int sum(int n) {
	if (n == 0) return 0;
	else return n + sum(n - 1);
    }
    
    public static void main(String args[]) {
	sum(-1);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Sum.main||0: push -1|| - || ->
YES:  (JL1)
1:<Sum.main||1: Sum.sum(I)I|| - ||-1>
YES:  (JL1)
2:<Sum.sum||0: load INT #0||#0: -1|| ->
YES:  (JL1)
Start state of loop: 

[i10(lv_0_0)]
<Sum.sum||0: load INT #0||#0: i11|| ->
	i10: #
	i11: #
YES:  (JL1)


In the loop head node, references [i11, i10] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and (((path1_i11 = path1_i12 and path1_i14 = (path1_i12 - 1) and path1_i14 = res_i10 and path1_i14 = res_i11 and path1_i10 = initial_i10 and path1_i11 = initial_i11) and path1_i12 < 0) and ((res1_i11 = res1_i12 and res1_i14 = (res1_i12 - 1) and res_i10 = res1_i10 and res_i11 = res1_i11) and !res1_i12 < 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
