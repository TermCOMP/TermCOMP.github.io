MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/BDMks.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could not be shown:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class MysteriousProgram {
    public static void display(int[] tab) {
	for (int i = 0; i < tab.length; i++) {}
	    //System.out.print(tab[i] + " ");
	    //System.out.println();
    }
    public static void swap2(int a, int b) {
	int tmp = a;
	a = b;
	b = tmp;
    }
    public static void swap3(int[] tab, int i, int j) {
	int tmp = tab[i];
	tab[i] = tab[j];
	tab[j] = tmp;
    }

    public static void mysterious(int[] tab, int k) {
	for (int j = k; j < tab.length; j++) {
	    swap3(tab, k, j);
	    display(tab);
	    swap3(tab, k, j);
	}
    }

    public static void mysteriousRecursive(int[] tab, int k) {
	if (k == tab.length - 1)
	    display(tab);
	for (int j = k; j < tab.length; j++) {
	    swap3(tab, k, j);
	    mysteriousRecursive(tab, k + 1);
	    swap3(tab, k, j);
	}
    }

    public static void init(int[] tab) {
	for (int i = 0; i < tab.length; i++)
	    tab[i] = i + 1;
    }

    public static void main(String[] args) {
	int n = 2;
	for (int i = 0; i < args.length; i++)
	    n *= 2;
	int[] t = new int[n];
	init(t);
	swap2(t[0], t[n - 1]);
	mysterious(t, 0);
	mysteriousRecursive(t, 0);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class MysteriousProgram {
    public static void display(int[] tab) {
	for (int i = 0; i < tab.length; i++) {}
	    //System.out.print(tab[i] + " ");
	    //System.out.println();
    }
    public static void swap2(int a, int b) {
	int tmp = a;
	a = b;
	b = tmp;
    }
    public static void swap3(int[] tab, int i, int j) {
	int tmp = tab[i];
	tab[i] = tab[j];
	tab[j] = tmp;
    }

    public static void mysterious(int[] tab, int k) {
	for (int j = k; j < tab.length; j++) {
	    swap3(tab, k, j);
	    display(tab);
	    swap3(tab, k, j);
	}
    }

    public static void mysteriousRecursive(int[] tab, int k) {
	if (k == tab.length - 1)
	    display(tab);
	for (int j = k; j < tab.length; j++) {
	    swap3(tab, k, j);
	    mysteriousRecursive(tab, k + 1);
	    swap3(tab, k, j);
	}
    }

    public static void init(int[] tab) {
	for (int i = 0; i < tab.length; i++)
	    tab[i] = i + 1;
    }

    public static void main(String[] args) {
	int n = 2;
	for (int i = 0; i < args.length; i++)
	    n *= 2;
	int[] t = new int[n];
	init(t);
	swap2(t[0], t[n - 1]);
	mysterious(t, 0);
	mysteriousRecursive(t, 0);
    }
}


