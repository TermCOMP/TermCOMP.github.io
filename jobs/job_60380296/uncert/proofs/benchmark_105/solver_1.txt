NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/cHEHa.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 144 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class ComplInterv3 {

    public static void loop(int i) {
	if (i != 0) {
	    if (i > 5) i++;
	    else {
		if (i < -5) i--;
		else i = 0;
	    }
	    loop(i);
	}
    }

    public static void main(String[] args) {
	ComplInterv3.loop(args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class ComplInterv3 {

    public static void loop(int i) {
	if (i != 0) {
	    if (i > 5) i++;
	    else {
		if (i < -5) i--;
		else i = 0;
	    }
	    loop(i);
	}
    }

    public static void main(String[] args) {
	ComplInterv3.loop(args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<ComplInterv3.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<ComplInterv3.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<ComplInterv3.main||2: ComplInterv3.loop(I)V|| - ||6>
YES:  (JL1)
3:<ComplInterv3.loop||0: load INT #0||#0: 6|| ->
YES:  (JL1)
Start state of loop: 

[i2(lv_0_0)]
<ComplInterv3.loop||0: load INT #0||#0: i2|| ->
	i2: [0,+inf)
YES:  (JL1)


In the loop head node, references [i2] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(0 <= initial_i2 and (((path1_i2 = path1_i4 and path1_i4 = path1_i8 and path1_i10 = (path1_i8 + 1) and path1_i10 = res_i2 and path1_i2 = initial_i2) and (path1_i4 > 0 and T and 5 = 5 and path1_i8 > 5)) and ((res1_i2 = res1_i4 and res1_i4 = res1_i8 and res1_i10 = (res1_i8 + 1) and res_i2 = res1_i2) and !(res1_i4 > 0 and T and 5 = 5 and res1_i8 > 5))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
