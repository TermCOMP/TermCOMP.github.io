NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/oMCEa.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 341 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class TwoFloatInterv {

    public static void loop(int i) {
	if (i > 0 & i < 50) {
	    if (i < 20) i--;
	    if (i > 10) i++;
	    if (30 <= i && i <= 40) i--;
	    loop(i);
	}
    }

    public static void main(String[] args) {
	loop(args.length + 10);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class TwoFloatInterv {

    public static void loop(int i) {
	if (i > 0 & i < 50) {
	    if (i < 20) i--;
	    if (i > 10) i++;
	    if (30 <= i && i <= 40) i--;
	    loop(i);
	}
    }

    public static void main(String[] args) {
	loop(args.length + 10);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<TwoFloatInterv.main||0: load ADDR #0||#0: a1|| ->
	a1([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
1:<TwoFloatInterv.main||1: arraylength|| - ||a1>
	a1([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
2:<TwoFloatInterv.main||2: push 10|| - ||2>
YES:  (JL1)
3:<TwoFloatInterv.main||4: ADD|| - ||2, 10>
YES:  (JL1)
4:<TwoFloatInterv.main||5: TwoFloatInterv.loop(I)V|| - ||12>
YES:  (JL1)
5:<TwoFloatInterv.loop||0: load INT #0||#0: 12|| ->
YES:  (JL1)
Start state of loop: 

[i172(lv_0_0)]
<TwoFloatInterv.loop||0: load INT #0||#0: i172|| ->
	i172: #
YES:  (JL1)


In the loop head node, references [i172] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and (((path3_i172 = path3_i174 and path3_i174 = path3_i178 and path3_i178 = path3_i190 and path3_i192 = (path3_i190 + -1) and path3_i190 = path3_i198 and path3_i192 = path3_i197 and path3_i200 = (path3_i197 + 1) and path3_i200 = res_i172 and path3_i172 = initial_i172) and (path3_i174 > 0 and T and 50 = 50 and path3_i178 < 50 and T and 20 = 20 and path3_i190 < 20 and T and 10 = 10 and path3_i197 > 10 and 30 > path3_i200)) and ((res3_i172 = res3_i174 and res3_i174 = res3_i178 and res3_i178 = res3_i190 and res3_i192 = (res3_i190 + -1) and res3_i190 = res3_i198 and res3_i192 = res3_i197 and res3_i200 = (res3_i197 + 1) and res_i172 = res3_i172) and !(res3_i174 > 0 and T and 50 = 50 and res3_i178 < 50 and T and 20 = 20 and res3_i190 < 20 and T and 10 = 10 and res3_i197 > 10 and 30 > res3_i200))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
