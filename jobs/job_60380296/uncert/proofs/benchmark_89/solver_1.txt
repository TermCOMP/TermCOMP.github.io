YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HhijJ.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 52 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 240 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 61 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 30 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 34 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 8 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(20) IntTRS
(21) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(22) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Test1 {
    public static void main(String[] args) {
	rec(args.length, args.length % 5, args.length % 4);
    }

    private static void rec(int x, int y, int z) {
	if (x + y + 3 * z < 0)
	    return;
	else if (x > y)
	    rec(x - 1, y, z);
	else if (y > z)
	    rec (x, y - 2, z);
	else
	    rec (x, y, z - 1);
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Test1 {
    public static void main(String[] args) {
	rec(args.length, args.length % 5, args.length % 4);
    }

    private static void rec(int x, int y, int z) {
	if (x + y + 3 * z < 0)
	    return;
	else if (x > y)
	    rec(x - 1, y, z);
	else if (y > z)
	    rec (x, y - 2, z);
	else
	    rec (x, y, z - 1);
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Test1.main([Ljava/lang/String;)V: Graph of 22 nodes with 0 SCCs.



Test1.rec(III)V: Graph of 69 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Test1.rec(III)V
SCC calls the following helper methods: Test1.rec(III)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 48 IRulesP rules:
f6250_0_rec_Load(EOS(STATIC_6250), i1310, i1357, i1199, i1310, i1357, i1199, i1310) -> f6252_0_rec_IntArithmetic(EOS(STATIC_6252), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) :|: TRUE
f6252_0_rec_IntArithmetic(EOS(STATIC_6252), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) -> f6254_0_rec_ConstantStackPush(EOS(STATIC_6254), i1310, i1357, i1199, i1310, i1357, i1199, i1310 + i1357) :|: TRUE
f6254_0_rec_ConstantStackPush(EOS(STATIC_6254), i1310, i1357, i1199, i1310, i1357, i1199, i1358) -> f6257_0_rec_Load(EOS(STATIC_6257), i1310, i1357, i1199, i1310, i1357, i1199, i1358, 3) :|: TRUE
f6257_0_rec_Load(EOS(STATIC_6257), i1310, i1357, i1199, i1310, i1357, i1199, i1358, matching1) -> f6259_0_rec_IntArithmetic(EOS(STATIC_6259), i1310, i1357, i1199, i1310, i1357, i1199, i1358, 3, i1199) :|: TRUE && matching1 = 3
f6259_0_rec_IntArithmetic(EOS(STATIC_6259), i1310, i1357, i1199, i1310, i1357, i1199, i1358, matching1, i1199) -> f6261_0_rec_IntArithmetic(EOS(STATIC_6261), i1310, i1357, i1199, i1310, i1357, i1199, i1358, 3 * i1199) :|: TRUE && matching1 = 3
f6261_0_rec_IntArithmetic(EOS(STATIC_6261), i1310, i1357, i1199, i1310, i1357, i1199, i1358, i1359) -> f6263_0_rec_GE(EOS(STATIC_6263), i1310, i1357, i1199, i1310, i1357, i1199, i1358 + i1359) :|: TRUE
f6263_0_rec_GE(EOS(STATIC_6263), i1310, i1357, i1199, i1310, i1357, i1199, i1362) -> f6265_0_rec_GE(EOS(STATIC_6265), i1310, i1357, i1199, i1310, i1357, i1199, i1362) :|: TRUE
f6265_0_rec_GE(EOS(STATIC_6265), i1310, i1357, i1199, i1310, i1357, i1199, i1362) -> f6267_0_rec_Load(EOS(STATIC_6267), i1310, i1357, i1199, i1310, i1357, i1199) :|: i1362 >= 0
f6267_0_rec_Load(EOS(STATIC_6267), i1310, i1357, i1199, i1310, i1357, i1199) -> f6270_0_rec_Load(EOS(STATIC_6270), i1310, i1357, i1199, i1310, i1357, i1199, i1310) :|: TRUE
f6270_0_rec_Load(EOS(STATIC_6270), i1310, i1357, i1199, i1310, i1357, i1199, i1310) -> f6281_0_rec_LE(EOS(STATIC_6281), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) :|: TRUE
f6281_0_rec_LE(EOS(STATIC_6281), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) -> f6311_0_rec_LE(EOS(STATIC_6311), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) :|: i1310 <= i1357
f6281_0_rec_LE(EOS(STATIC_6281), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) -> f6312_0_rec_LE(EOS(STATIC_6312), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) :|: i1310 > i1357
f6311_0_rec_LE(EOS(STATIC_6311), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) -> f6320_0_rec_Load(EOS(STATIC_6320), i1310, i1357, i1199, i1310, i1357, i1199) :|: i1310 <= i1357
f6320_0_rec_Load(EOS(STATIC_6320), i1310, i1357, i1199, i1310, i1357, i1199) -> f6331_0_rec_Load(EOS(STATIC_6331), i1310, i1357, i1199, i1310, i1357, i1199, i1357) :|: TRUE
f6331_0_rec_Load(EOS(STATIC_6331), i1310, i1357, i1199, i1310, i1357, i1199, i1357) -> f6335_0_rec_LE(EOS(STATIC_6335), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) :|: TRUE
f6335_0_rec_LE(EOS(STATIC_6335), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) -> f6351_0_rec_LE(EOS(STATIC_6351), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) :|: i1357 <= i1199
f6335_0_rec_LE(EOS(STATIC_6335), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) -> f6352_0_rec_LE(EOS(STATIC_6352), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) :|: i1357 > i1199
f6351_0_rec_LE(EOS(STATIC_6351), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) -> f6364_0_rec_Load(EOS(STATIC_6364), i1310, i1357, i1199, i1310, i1357, i1199) :|: i1357 <= i1199
f6364_0_rec_Load(EOS(STATIC_6364), i1310, i1357, i1199, i1310, i1357, i1199) -> f6377_0_rec_Load(EOS(STATIC_6377), i1310, i1357, i1199, i1357, i1199, i1310) :|: TRUE
f6377_0_rec_Load(EOS(STATIC_6377), i1310, i1357, i1199, i1357, i1199, i1310) -> f6383_0_rec_Load(EOS(STATIC_6383), i1310, i1357, i1199, i1199, i1310, i1357) :|: TRUE
f6383_0_rec_Load(EOS(STATIC_6383), i1310, i1357, i1199, i1199, i1310, i1357) -> f6389_0_rec_ConstantStackPush(EOS(STATIC_6389), i1310, i1357, i1199, i1310, i1357, i1199) :|: TRUE
f6389_0_rec_ConstantStackPush(EOS(STATIC_6389), i1310, i1357, i1199, i1310, i1357, i1199) -> f6396_0_rec_IntArithmetic(EOS(STATIC_6396), i1310, i1357, i1199, i1310, i1357, i1199, 1) :|: TRUE
f6396_0_rec_IntArithmetic(EOS(STATIC_6396), i1310, i1357, i1199, i1310, i1357, i1199, matching1) -> f6398_0_rec_InvokeMethod(EOS(STATIC_6398), i1310, i1357, i1199, i1310, i1357, i1199 - 1) :|: TRUE && matching1 = 1
f6398_0_rec_InvokeMethod(EOS(STATIC_6398), i1310, i1357, i1199, i1310, i1357, i1377) -> f6402_0_rec_Load(EOS(STATIC_6402), i1310, i1357, i1377, i1310, i1357, i1377) :|: i1310 <= i1357 && i1357 <= i1199 && i1377 < i1199
f6398_0_rec_InvokeMethod(EOS(STATIC_6398), i1310, i1357, i1199, i1310, i1357, i1377) -> f6402_1_rec_Load(EOS(STATIC_6402), i1310, i1357, i1199, i1310, i1357, i1377) :|: i1310 <= i1357 && i1357 <= i1199 && i1377 < i1199
f6402_0_rec_Load(EOS(STATIC_6402), i1310, i1357, i1377, i1310, i1357, i1377) -> f6445_0_rec_Load(EOS(STATIC_6445), i1310, i1357, i1377, i1310, i1357, i1377) :|: TRUE
f6445_0_rec_Load(EOS(STATIC_6445), i1310, i1357, i1377, i1310, i1357, i1377) -> f6246_0_rec_Load(EOS(STATIC_6246), i1310, i1357, i1377, i1310, i1357, i1377) :|: TRUE
f6246_0_rec_Load(EOS(STATIC_6246), i1310, i1357, i1199, i1310, i1357, i1199) -> f6250_0_rec_Load(EOS(STATIC_6250), i1310, i1357, i1199, i1310, i1357, i1199, i1310) :|: TRUE
f6352_0_rec_LE(EOS(STATIC_6352), i1310, i1357, i1199, i1310, i1357, i1199, i1357, i1199) -> f6372_0_rec_Load(EOS(STATIC_6372), i1310, i1357, i1199, i1310, i1357, i1199) :|: i1357 > i1199
f6372_0_rec_Load(EOS(STATIC_6372), i1310, i1357, i1199, i1310, i1357, i1199) -> f6379_0_rec_Load(EOS(STATIC_6379), i1310, i1357, i1199, i1357, i1199, i1310) :|: TRUE
f6379_0_rec_Load(EOS(STATIC_6379), i1310, i1357, i1199, i1357, i1199, i1310) -> f6384_0_rec_ConstantStackPush(EOS(STATIC_6384), i1310, i1357, i1199, i1199, i1310, i1357) :|: TRUE
f6384_0_rec_ConstantStackPush(EOS(STATIC_6384), i1310, i1357, i1199, i1199, i1310, i1357) -> f6392_0_rec_IntArithmetic(EOS(STATIC_6392), i1310, i1357, i1199, i1199, i1310, i1357, 2) :|: TRUE
f6392_0_rec_IntArithmetic(EOS(STATIC_6392), i1310, i1357, i1199, i1199, i1310, i1357, matching1) -> f6397_0_rec_Load(EOS(STATIC_6397), i1310, i1357, i1199, i1199, i1310, i1357 - 2) :|: TRUE && matching1 = 2
f6397_0_rec_Load(EOS(STATIC_6397), i1310, i1357, i1199, i1199, i1310, i1376) -> f6399_0_rec_InvokeMethod(EOS(STATIC_6399), i1310, i1357, i1199, i1310, i1376, i1199) :|: TRUE
f6399_0_rec_InvokeMethod(EOS(STATIC_6399), i1310, i1357, i1199, i1310, i1376, i1199) -> f6404_0_rec_Load(EOS(STATIC_6404), i1310, i1376, i1199, i1310, i1376, i1199) :|: i1310 <= i1357 && i1357 > i1199 && i1376 < i1357
f6399_0_rec_InvokeMethod(EOS(STATIC_6399), i1310, i1357, i1199, i1310, i1376, i1199) -> f6404_1_rec_Load(EOS(STATIC_6404), i1310, i1357, i1199, i1310, i1376, i1199) :|: i1310 <= i1357 && i1357 > i1199 && i1376 < i1357
f6404_0_rec_Load(EOS(STATIC_6404), i1310, i1376, i1199, i1310, i1376, i1199) -> f6448_0_rec_Load(EOS(STATIC_6448), i1310, i1376, i1199, i1310, i1376, i1199) :|: TRUE
f6448_0_rec_Load(EOS(STATIC_6448), i1310, i1376, i1199, i1310, i1376, i1199) -> f6246_0_rec_Load(EOS(STATIC_6246), i1310, i1376, i1199, i1310, i1376, i1199) :|: TRUE
f6312_0_rec_LE(EOS(STATIC_6312), i1310, i1357, i1199, i1310, i1357, i1199, i1310, i1357) -> f6328_0_rec_Load(EOS(STATIC_6328), i1310, i1357, i1199, i1310, i1357, i1199) :|: i1310 > i1357
f6328_0_rec_Load(EOS(STATIC_6328), i1310, i1357, i1199, i1310, i1357, i1199) -> f6333_0_rec_ConstantStackPush(EOS(STATIC_6333), i1310, i1357, i1199, i1357, i1199, i1310) :|: TRUE
f6333_0_rec_ConstantStackPush(EOS(STATIC_6333), i1310, i1357, i1199, i1357, i1199, i1310) -> f6338_0_rec_IntArithmetic(EOS(STATIC_6338), i1310, i1357, i1199, i1357, i1199, i1310, 1) :|: TRUE
f6338_0_rec_IntArithmetic(EOS(STATIC_6338), i1310, i1357, i1199, i1357, i1199, i1310, matching1) -> f6357_0_rec_Load(EOS(STATIC_6357), i1310, i1357, i1199, i1357, i1199, i1310 - 1) :|: TRUE && matching1 = 1
f6357_0_rec_Load(EOS(STATIC_6357), i1310, i1357, i1199, i1357, i1199, i1374) -> f6375_0_rec_Load(EOS(STATIC_6375), i1310, i1357, i1199, i1199, i1374, i1357) :|: TRUE
f6375_0_rec_Load(EOS(STATIC_6375), i1310, i1357, i1199, i1199, i1374, i1357) -> f6381_0_rec_InvokeMethod(EOS(STATIC_6381), i1310, i1357, i1199, i1374, i1357, i1199) :|: TRUE
f6381_0_rec_InvokeMethod(EOS(STATIC_6381), i1310, i1357, i1199, i1374, i1357, i1199) -> f6387_0_rec_Load(EOS(STATIC_6387), i1374, i1357, i1199, i1374, i1357, i1199) :|: i1310 > i1357 && i1374 < i1310 && i1374 >= i1357
f6381_0_rec_InvokeMethod(EOS(STATIC_6381), i1310, i1357, i1199, i1374, i1357, i1199) -> f6387_1_rec_Load(EOS(STATIC_6387), i1310, i1357, i1199, i1374, i1357, i1199) :|: i1310 > i1357 && i1374 < i1310 && i1374 >= i1357
f6387_0_rec_Load(EOS(STATIC_6387), i1374, i1357, i1199, i1374, i1357, i1199) -> f6395_0_rec_Load(EOS(STATIC_6395), i1374, i1357, i1199, i1374, i1357, i1199) :|: TRUE
f6395_0_rec_Load(EOS(STATIC_6395), i1374, i1357, i1199, i1374, i1357, i1199) -> f6246_0_rec_Load(EOS(STATIC_6246), i1374, i1357, i1199, i1374, i1357, i1199) :|: TRUE
Combined rules. Obtained 6 IRulesP rules:
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(EOS(STATIC_6250), i1310:0 - 1, i1357:0, i1199:0, i1310:0 - 1, i1357:0, i1199:0, i1310:0 - 1) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 < i1310:0 && i1310:0 - 1 < i1310:0 && i1357:0 <= i1310:0 - 1
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0 - 2, i1199:0, i1310:0, i1357:0 - 2, i1199:0, i1310:0) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 >= i1310:0 && i1357:0 > i1199:0 && i1357:0 - 2 < i1357:0
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0 - 1, i1310:0, i1357:0, i1199:0 - 1, i1310:0) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 >= i1310:0 && i1357:0 <= i1199:0 && i1199:0 - 1 < i1199:0
Removed following non-SCC rules:
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6402_1_rec_Load(EOS(STATIC_6402), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0 - 1) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 >= i1310:0 && i1357:0 <= i1199:0 && i1199:0 - 1 < i1199:0
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6404_1_rec_Load(EOS(STATIC_6404), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0 - 2, i1199:0) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 >= i1310:0 && i1357:0 > i1199:0 && i1357:0 - 2 < i1357:0
f6250_0_rec_Load(EOS(STATIC_6250), i1310:0, i1357:0, i1199:0, i1310:0, i1357:0, i1199:0, i1310:0) -> f6387_1_rec_Load(EOS(STATIC_6387), i1310:0, i1357:0, i1199:0, i1310:0 - 1, i1357:0, i1199:0) :|: i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 < i1310:0 && i1310:0 - 1 < i1310:0 && i1357:0 <= i1310:0 - 1
Filtered constant ground arguments:
   f6250_0_rec_Load(x1, x2, x3, x4, x5, x6, x7, x8) -> f6250_0_rec_Load(x2, x3, x4, x5, x6, x7, x8)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f6250_0_rec_Load(x1, x2, x3, x4, x5, x6, x7) -> f6250_0_rec_Load(x5, x6, x7)
Finished conversion. Obtained 3 rules.P rules:
f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0, i1310:0 - 1) :|: i1357:0 < i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 <= i1310:0 - 1 && i1310:0 - 1 < i1310:0
f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0 - 2, i1199:0, i1310:0) :|: i1357:0 >= i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 - 2 < i1357:0 && i1357:0 > i1199:0
f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0 - 1, i1310:0) :|: i1357:0 >= i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1199:0 - 1 < i1199:0 && i1357:0 <= i1199:0

----------------------------------------

(8)
Obligation:
Rules:
f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0, i1310:0 - 1) :|: i1357:0 < i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 <= i1310:0 - 1 && i1310:0 - 1 < i1310:0
f6250_0_rec_Load(x, x1, x2) -> f6250_0_rec_Load(x - 2, x1, x2) :|: x >= x2 && x2 + x + 3 * x1 >= 0 && x - 2 < x && x > x1
f6250_0_rec_Load(x3, x4, x5) -> f6250_0_rec_Load(x3, x4 - 1, x5) :|: x3 >= x5 && x5 + x3 + 3 * x4 >= 0 && x4 - 1 < x4 && x3 <= x4

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0, arith) :|: i1357:0 < i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 <= i1310:0 - 1 && i1310:0 - 1 < i1310:0 && arith = i1310:0 - 1
f6250_0_rec_Load(x6, x7, x8) -> f6250_0_rec_Load(x9, x7, x8) :|: x6 >= x8 && x8 + x6 + 3 * x7 >= 0 && x6 - 2 < x6 && x6 > x7 && x9 = x6 - 2
f6250_0_rec_Load(x10, x11, x12) -> f6250_0_rec_Load(x10, x13, x12) :|: x10 >= x12 && x12 + x10 + 3 * x11 >= 0 && x11 - 1 < x11 && x10 <= x11 && x13 = x11 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0, arith) :|: i1357:0 < i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 <= i1310:0 - 1 && i1310:0 - 1 < i1310:0 && arith = i1310:0 - 1
(2) f6250_0_rec_Load(x6, x7, x8) -> f6250_0_rec_Load(x9, x7, x8) :|: x6 >= x8 && x8 + x6 + 3 * x7 >= 0 && x6 - 2 < x6 && x6 > x7 && x9 = x6 - 2
(3) f6250_0_rec_Load(x10, x11, x12) -> f6250_0_rec_Load(x10, x13, x12) :|: x10 >= x12 && x12 + x10 + 3 * x11 >= 0 && x11 - 1 < x11 && x10 <= x11 && x13 = x11 - 1

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (2), (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f6250_0_rec_Load(i1357:0, i1199:0, i1310:0) -> f6250_0_rec_Load(i1357:0, i1199:0, arith) :|: i1357:0 < i1310:0 && i1310:0 + i1357:0 + 3 * i1199:0 >= 0 && i1357:0 <= i1310:0 - 1 && i1310:0 - 1 < i1310:0 && arith = i1310:0 - 1
(2) f6250_0_rec_Load(x6, x7, x8) -> f6250_0_rec_Load(x9, x7, x8) :|: x6 >= x8 && x8 + x6 + 3 * x7 >= 0 && x6 - 2 < x6 && x6 > x7 && x9 = x6 - 2
(3) f6250_0_rec_Load(x10, x11, x12) -> f6250_0_rec_Load(x10, x13, x12) :|: x10 >= x12 && x12 + x10 + 3 * x11 >= 0 && x11 - 1 < x11 && x10 <= x11 && x13 = x11 - 1

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (2), (3)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, x11:0 - 1, x12:0) :|: x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0
f6250_0_rec_Load(i1357:0:0, i1199:0:0, i1310:0:0) -> f6250_0_rec_Load(i1357:0:0, i1199:0:0, i1310:0:0 - 1) :|: i1357:0:0 <= i1310:0:0 - 1 && i1310:0:0 - 1 < i1310:0:0 && i1310:0:0 + i1357:0:0 + 3 * i1199:0:0 >= 0 && i1357:0:0 < i1310:0:0
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(x6:0 - 2, x7:0, x8:0) :|: x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f6250_0_rec_Load(INTEGER, INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)
f6250_0_rec_Load(i1357:0:0, i1199:0:0, i1310:0:0) -> f6250_0_rec_Load(i1357:0:0, i1199:0:0, c1) :|: c1 = i1310:0:0 - 1 && (i1357:0:0 <= i1310:0:0 - 1 && i1310:0:0 - 1 < i1310:0:0 && i1310:0:0 + i1357:0:0 + 3 * i1199:0:0 >= 0 && i1357:0:0 < i1310:0:0)
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(c2, x7:0, x8:0) :|: c2 = x6:0 - 2 && (x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f6250_0_rec_Load(x, x1, x2)] = x + 3*x1 + x2

The following rules are decreasing:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)
f6250_0_rec_Load(i1357:0:0, i1199:0:0, i1310:0:0) -> f6250_0_rec_Load(i1357:0:0, i1199:0:0, c1) :|: c1 = i1310:0:0 - 1 && (i1357:0:0 <= i1310:0:0 - 1 && i1310:0:0 - 1 < i1310:0:0 && i1310:0:0 + i1357:0:0 + 3 * i1199:0:0 >= 0 && i1357:0:0 < i1310:0:0)
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(c2, x7:0, x8:0) :|: c2 = x6:0 - 2 && (x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0)
The following rules are bounded:
f6250_0_rec_Load(i1357:0:0, i1199:0:0, i1310:0:0) -> f6250_0_rec_Load(i1357:0:0, i1199:0:0, c1) :|: c1 = i1310:0:0 - 1 && (i1357:0:0 <= i1310:0:0 - 1 && i1310:0:0 - 1 < i1310:0:0 && i1310:0:0 + i1357:0:0 + 3 * i1199:0:0 >= 0 && i1357:0:0 < i1310:0:0)

----------------------------------------

(18)
Obligation:
Rules:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(c2, x7:0, x8:0) :|: c2 = x6:0 - 2 && (x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0)

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f6250_0_rec_Load(x, x1, x2)] = x - x2

The following rules are decreasing:
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(c2, x7:0, x8:0) :|: c2 = x6:0 - 2 && (x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0)
The following rules are bounded:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)
f6250_0_rec_Load(x6:0, x7:0, x8:0) -> f6250_0_rec_Load(c2, x7:0, x8:0) :|: c2 = x6:0 - 2 && (x6:0 - 2 < x6:0 && x7:0 < x6:0 && x8:0 + x6:0 + 3 * x7:0 >= 0 && x8:0 <= x6:0)

----------------------------------------

(20)
Obligation:
Rules:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)

----------------------------------------

(21) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f6250_0_rec_Load(x, x1, x2)] = -x + x1

The following rules are decreasing:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)
The following rules are bounded:
f6250_0_rec_Load(x10:0, x11:0, x12:0) -> f6250_0_rec_Load(x10:0, c, x12:0) :|: c = x11:0 - 1 && (x11:0 - 1 < x11:0 && x11:0 >= x10:0 && x12:0 + x10:0 + 3 * x11:0 >= 0 && x12:0 <= x10:0)

----------------------------------------

(22)
YES
