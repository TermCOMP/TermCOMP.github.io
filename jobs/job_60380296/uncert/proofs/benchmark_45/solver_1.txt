YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bDp2j.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 122 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 23 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 24 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 20 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 7 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
package Nest;

public class Nest{
    public static int nest(int x){
		if (x == 0) return 0;
		else return nest(nest(x-1));
    }

    
    public static void main(final String[] args) {
        final int x = args[0].length();
        final int y = nest(x);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
package Nest;

public class Nest{
    public static int nest(int x){
		if (x == 0) return 0;
		else return nest(nest(x-1));
    }

    
    public static void main(final String[] args) {
        final int x = args[0].length();
        final int y = nest(x);
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Nest.Nest.main([Ljava/lang/String;)V: Graph of 68 nodes with 0 SCCs.



Nest.Nest.nest(I)I: Graph of 22 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Nest.Nest.nest(I)I
SCC calls the following helper methods: Nest.Nest.nest(I)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 19 IRulesP rules:
f94_0_nest_NE(EOS(STATIC_94), i16, i16, i16) -> f97_0_nest_NE(EOS(STATIC_97), i16, i16, i16) :|: TRUE
f97_0_nest_NE(EOS(STATIC_97), i16, i16, i16) -> f103_0_nest_Load(EOS(STATIC_103), i16, i16) :|: i16 > 0
f103_0_nest_Load(EOS(STATIC_103), i16, i16) -> f109_0_nest_ConstantStackPush(EOS(STATIC_109), i16, i16) :|: TRUE
f109_0_nest_ConstantStackPush(EOS(STATIC_109), i16, i16) -> f118_0_nest_IntArithmetic(EOS(STATIC_118), i16, i16, 1) :|: TRUE
f118_0_nest_IntArithmetic(EOS(STATIC_118), i16, i16, matching1) -> f123_0_nest_InvokeMethod(EOS(STATIC_123), i16, i16 - 1) :|: i16 > 0 && matching1 = 1
f123_0_nest_InvokeMethod(EOS(STATIC_123), i16, i18) -> f153_0_nest_Load(EOS(STATIC_153), i18, i18) :|: i16 >= 1 && i18 < i16
f123_0_nest_InvokeMethod(EOS(STATIC_123), i16, i18) -> f153_1_nest_Load(EOS(STATIC_153), i16, i18) :|: i16 >= 1 && i18 < i16
f153_0_nest_Load(EOS(STATIC_153), i18, i18) -> f157_0_nest_Load(EOS(STATIC_157), i18, i18) :|: TRUE
f157_0_nest_Load(EOS(STATIC_157), i18, i18) -> f91_0_nest_Load(EOS(STATIC_91), i18, i18) :|: TRUE
f91_0_nest_Load(EOS(STATIC_91), i11, i11) -> f94_0_nest_NE(EOS(STATIC_94), i11, i11, i11) :|: TRUE
f5438_0_nest_Return(EOS(STATIC_5438), i16, matching1) -> f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16, 0) :|: TRUE && matching1 = 0
f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16, matching1) -> f5440_0_nest_Load(EOS(STATIC_5440), 0, 0) :|: i16 >= 1 && matching1 = 0
f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16, matching1) -> f5440_1_nest_Load(EOS(STATIC_5440), i16, 0) :|: i16 >= 1 && matching1 = 0
f5440_0_nest_Load(EOS(STATIC_5440), matching1, matching2) -> f5441_0_nest_Load(EOS(STATIC_5441), 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f5441_0_nest_Load(EOS(STATIC_5441), matching1, matching2) -> f91_0_nest_Load(EOS(STATIC_91), 0, 0) :|: TRUE && matching1 = 0 && matching2 = 0
f10131_0_nest_Return(EOS(STATIC_10131), i16, matching1) -> f10352_0_nest_InvokeMethod(EOS(STATIC_10352), i16, 0) :|: TRUE && matching1 = 0
f10352_0_nest_InvokeMethod(EOS(STATIC_10352), i16, matching1) -> f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16, 0) :|: TRUE && matching1 = 0
f153_1_nest_Load(EOS(STATIC_153), i16, matching1) -> f5438_0_nest_Return(EOS(STATIC_5438), i16, 0) :|: TRUE && matching1 = 0
f153_1_nest_Load(EOS(STATIC_153), i16, i18) -> f10131_0_nest_Return(EOS(STATIC_10131), i16, 0) :|: TRUE
Combined rules. Obtained 5 IRulesP rules:
f94_0_nest_NE(EOS(STATIC_94), 1, 1, 1) -> f5439_0_nest_InvokeMethod(EOS(STATIC_5439), 1, 0) :|: TRUE
f94_0_nest_NE(EOS(STATIC_94), i16:0, i16:0, i16:0) -> f94_0_nest_NE(EOS(STATIC_94), i16:0 - 1, i16:0 - 1, i16:0 - 1) :|: i16:0 > 0 && i16:0 - 1 < i16:0
f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16:0, 0) -> f94_0_nest_NE(EOS(STATIC_94), 0, 0, 0) :|: i16:0 > 0
f94_0_nest_NE(EOS(STATIC_94), i16:0, i16:0, i16:0) -> f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16:0, 0) :|: i16:0 > 0 && i16:0 - 1 < i16:0
Removed following non-SCC rules:
f5439_0_nest_InvokeMethod(EOS(STATIC_5439), i16:0, 0) -> f5440_1_nest_Load(EOS(STATIC_5440), i16:0, 0) :|: i16:0 > 0
Filtered constant ground arguments:
   f94_0_nest_NE(x1, x2, x3, x4) -> f94_0_nest_NE(x2, x3, x4)
   f5439_0_nest_InvokeMethod(x1, x2, x3) -> f5439_0_nest_InvokeMethod(x2)
Filtered duplicate arguments:
   f94_0_nest_NE(x1, x2, x3) -> f94_0_nest_NE(x3)
Finished conversion. Obtained 4 rules.P rules:
f94_0_nest_NE(cons_1) -> f5439_0_nest_InvokeMethod(1) :|: TRUE && cons_1 = 1
f94_0_nest_NE(i16:0) -> f94_0_nest_NE(i16:0 - 1) :|: i16:0 > 0 && i16:0 - 1 < i16:0
f5439_0_nest_InvokeMethod(i16:0) -> f94_0_nest_NE(0) :|: i16:0 > 0
f94_0_nest_NE(i16:0) -> f5439_0_nest_InvokeMethod(i16:0) :|: i16:0 > 0 && i16:0 - 1 < i16:0

----------------------------------------

(8)
Obligation:
Rules:
f94_0_nest_NE(cons_1) -> f5439_0_nest_InvokeMethod(1) :|: TRUE && cons_1 = 1
f94_0_nest_NE(i16:0) -> f94_0_nest_NE(i16:0 - 1) :|: i16:0 > 0 && i16:0 - 1 < i16:0
f5439_0_nest_InvokeMethod(x) -> f94_0_nest_NE(0) :|: x > 0
f94_0_nest_NE(x1) -> f5439_0_nest_InvokeMethod(x1) :|: x1 > 0 && x1 - 1 < x1

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f94_0_nest_NE(cons_1) -> f5439_0_nest_InvokeMethod(1) :|: TRUE && cons_1 = 1
f94_0_nest_NE(i16:0) -> f94_0_nest_NE(arith) :|: i16:0 > 0 && i16:0 - 1 < i16:0 && arith = i16:0 - 1
f5439_0_nest_InvokeMethod(x) -> f94_0_nest_NE(0) :|: x > 0
f94_0_nest_NE(x1) -> f5439_0_nest_InvokeMethod(x1) :|: x1 > 0 && x1 - 1 < x1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f94_0_nest_NE(cons_1) -> f5439_0_nest_InvokeMethod(1) :|: TRUE && cons_1 = 1
(2) f94_0_nest_NE(i16:0) -> f94_0_nest_NE(arith) :|: i16:0 > 0 && i16:0 - 1 < i16:0 && arith = i16:0 - 1
(3) f5439_0_nest_InvokeMethod(x) -> f94_0_nest_NE(0) :|: x > 0
(4) f94_0_nest_NE(x1) -> f5439_0_nest_InvokeMethod(x1) :|: x1 > 0 && x1 - 1 < x1

Arcs:
(1) -> (3)
(2) -> (1), (2), (4)
(4) -> (3)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f94_0_nest_NE(i16:0) -> f94_0_nest_NE(arith) :|: i16:0 > 0 && i16:0 - 1 < i16:0 && arith = i16:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f94_0_nest_NE(i16:0:0) -> f94_0_nest_NE(i16:0:0 - 1) :|: i16:0:0 > 0 && i16:0:0 - 1 < i16:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f94_0_nest_NE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f94_0_nest_NE(i16:0:0) -> f94_0_nest_NE(c) :|: c = i16:0:0 - 1 && (i16:0:0 > 0 && i16:0:0 - 1 < i16:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f94_0_nest_NE(x)] = x

The following rules are decreasing:
f94_0_nest_NE(i16:0:0) -> f94_0_nest_NE(c) :|: c = i16:0:0 - 1 && (i16:0:0 > 0 && i16:0:0 - 1 < i16:0:0)
The following rules are bounded:
f94_0_nest_NE(i16:0:0) -> f94_0_nest_NE(c) :|: c = i16:0:0 - 1 && (i16:0:0 > 0 && i16:0:0 - 1 < i16:0:0)

----------------------------------------

(18)
YES
