NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/22E2m.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 263 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Sunset {

    public static void loop(int i) {
	if (i > 10) {
	    if (i == 25) i = 30;
	    if (i <= 30) i--;
	    else i = 20;
	    loop(i);
	}
    }

    public static void main(String[] args) {
	loop(args.length + 20);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Sunset {

    public static void loop(int i) {
	if (i > 10) {
	    if (i == 25) i = 30;
	    if (i <= 30) i--;
	    else i = 20;
	    loop(i);
	}
    }

    public static void main(String[] args) {
	loop(args.length + 20);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Sunset.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
1:<Sunset.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 6 -->{java.lang.Object...}
YES:  (JL1)
2:<Sunset.main||2: push 20|| - ||6>
YES:  (JL1)
3:<Sunset.main||4: ADD|| - ||6, 20>
YES:  (JL1)
4:<Sunset.main||5: Sunset.loop(I)V|| - ||26>
YES:  (JL1)
5:<Sunset.loop||0: load INT #0||#0: 26|| ->
YES:  (JL1)
Start state of loop: 

[i53(lv_0_0)]
<Sunset.loop||0: load INT #0||#0: i53|| ->
	i53: #\{0}
YES:  (JL1)


In the loop head node, references [i53] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and ((((path2_i53 = path2_i55 and path2_i55 = path2_i60 and path2_i60 = path2_i63 and path2_i67 = (path2_i63 + -1) and path2_i67 = res_i53 and path2_i53 = initial_i53) and (T and 10 = 10 and path2_i55 > 10 and T and 25 = 25 and path2_i60 > 25 and T and 30 = 30 and path2_i63 <= 30)) or ((path4_i53 = path4_i55 and 29 = res_i53 and path4_i53 = initial_i53) and (T and 10 = 10 and path4_i55 > 10 and path4_i55 = 25 and path4_i55 = 25 and 25 = 25))) and (((res2_i53 = res2_i55 and res2_i55 = res2_i60 and res2_i60 = res2_i63 and res2_i67 = (res2_i63 + -1) and res_i53 = res2_i53) and !(T and 10 = 10 and res2_i55 > 10 and T and 25 = 25 and res2_i60 > 25 and T and 30 = 30 and res2_i63 <= 30)) and ((res4_i53 = res4_i55 and res_i53 = res4_i53) and !(T and 10 = 10 and res4_i55 > 10 and res4_i55 = 25 and res4_i55 = 25 and 25 = 25)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
