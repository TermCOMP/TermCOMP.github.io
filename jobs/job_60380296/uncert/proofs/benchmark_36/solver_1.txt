YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LJLt6.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 49 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 316 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 25 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 17 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) FilterProof [EQUIVALENT, 0 ms]
(16) IntTRS
(17) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(18) IntTRS
(19) PolynomialOrderProcessor [EQUIVALENT, 6 ms]
(20) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class LogRecursive {
  public static void main(String[] args) {
    Random.args = args;
    log(Random.random(), Random.random());
  }

  public static int log(int x, int y) {
    if (x >= y && y > 1) {
      return 1 + log(x/y, y);
    }
    return 0;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    if (args.length <= index) {
      return 0;
    }
    String string = args[index];
    index++;
    if (string == null) {
      return 0;
    }
    return string.length();
  }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class LogRecursive {
  public static void main(String[] args) {
    Random.args = args;
    log(Random.random(), Random.random());
  }

  public static int log(int x, int y) {
    if (x >= y && y > 1) {
      return 1 + log(x/y, y);
    }
    return 0;
  }
}


public class Random {
  static String[] args;
  static int index = 0;

  public static int random() {
    if (args.length <= index) {
      return 0;
    }
    String string = args[index];
    index++;
    if (string == null) {
      return 0;
    }
    return string.length();
  }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
LogRecursive.main([Ljava/lang/String;)V: Graph of 278 nodes with 0 SCCs.



LogRecursive.log(II)I: Graph of 31 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: LogRecursive.log(II)I
SCC calls the following helper methods: LogRecursive.log(II)I
Performed SCC analyses:
*Used field analysis yielded the following read fields:

*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 17 IRulesP rules:
f5303_0_log_Load(EOS(STATIC_5303), i231, i232, i231, i232, i231) -> f5337_0_log_LT(EOS(STATIC_5337), i231, i232, i231, i232, i231, i232) :|: TRUE
f5337_0_log_LT(EOS(STATIC_5337), i231, i232, i231, i232, i231, i232) -> f5374_0_log_LT(EOS(STATIC_5374), i231, i232, i231, i232, i231, i232) :|: i231 >= i232
f5374_0_log_LT(EOS(STATIC_5374), i231, i232, i231, i232, i231, i232) -> f5416_0_log_Load(EOS(STATIC_5416), i231, i232, i231, i232) :|: i231 >= i232
f5416_0_log_Load(EOS(STATIC_5416), i231, i232, i231, i232) -> f5456_0_log_ConstantStackPush(EOS(STATIC_5456), i231, i232, i231, i232, i232) :|: TRUE
f5456_0_log_ConstantStackPush(EOS(STATIC_5456), i231, i232, i231, i232, i232) -> f5569_0_log_LE(EOS(STATIC_5569), i231, i232, i231, i232, i232, 1) :|: TRUE
f5569_0_log_LE(EOS(STATIC_5569), i302, i301, i302, i301, i301, matching1) -> f5804_0_log_LE(EOS(STATIC_5804), i302, i301, i302, i301, i301, 1) :|: TRUE && matching1 = 1
f5804_0_log_LE(EOS(STATIC_5804), i302, i301, i302, i301, i301, matching1) -> f6410_0_log_ConstantStackPush(EOS(STATIC_6410), i302, i301, i302, i301) :|: i301 > 1 && matching1 = 1
f6410_0_log_ConstantStackPush(EOS(STATIC_6410), i302, i301, i302, i301) -> f6447_0_log_Load(EOS(STATIC_6447), i302, i301, i302, i301) :|: TRUE
f6447_0_log_Load(EOS(STATIC_6447), i302, i301, i302, i301) -> f6470_0_log_Load(EOS(STATIC_6470), i302, i301, i301, i302) :|: TRUE
f6470_0_log_Load(EOS(STATIC_6470), i302, i301, i301, i302) -> f6482_0_log_IntArithmetic(EOS(STATIC_6482), i302, i301, i301, i302, i301) :|: TRUE
f6482_0_log_IntArithmetic(EOS(STATIC_6482), i302, i301, i301, i302, i301) -> f6670_0_log_Load(EOS(STATIC_6670), i302, i301, i301, i385) :|: i385 = i302 / i301 && i302 > 1 && i301 > 1 && i385 < i302
f6670_0_log_Load(EOS(STATIC_6670), i302, i301, i301, i385) -> f6676_0_log_InvokeMethod(EOS(STATIC_6676), i302, i301, i385, i301) :|: TRUE
f6676_0_log_InvokeMethod(EOS(STATIC_6676), i302, i301, i385, i301) -> f6682_0_log_Load(EOS(STATIC_6682), i385, i301, i385, i301) :|: i302 > 1 && i301 > 1 && i302 >= i301
f6676_0_log_InvokeMethod(EOS(STATIC_6676), i302, i301, i385, i301) -> f6682_1_log_Load(EOS(STATIC_6682), i302, i301, i385, i301) :|: i302 > 1 && i301 > 1 && i302 >= i301
f6682_0_log_Load(EOS(STATIC_6682), i385, i301, i385, i301) -> f6690_0_log_Load(EOS(STATIC_6690), i385, i301, i385, i301) :|: TRUE
f6690_0_log_Load(EOS(STATIC_6690), i385, i301, i385, i301) -> f4425_0_log_Load(EOS(STATIC_4425), i385, i301, i385, i301) :|: TRUE
f4425_0_log_Load(EOS(STATIC_4425), i231, i232, i231, i232) -> f5303_0_log_Load(EOS(STATIC_5303), i231, i232, i231, i232, i231) :|: TRUE
Combined rules. Obtained 3 IRulesP rules:
f5303_0_log_Load(EOS(STATIC_5303), i231:0, i232:0, i231:0, i232:0, i231:0) -> f5303_0_log_Load'(EOS(STATIC_5303), i231:0, i232:0, i231:0, i232:0, i231:0) :|: i232:0 <= i231:0 && i232:0 > 1 && i231:0 > 1 && i231:0 > div
f5303_0_log_Load'(EOS(STATIC_5303), i231:0, i232:0, i231:0, i232:0, i231:0) -> f5303_0_log_Load(EOS(STATIC_5303), div, i232:0, div, i232:0, div) :|: i232:0 <= i231:0 && i232:0 > 1 && i231:0 > 1 && i231:0 > div && i232:0 > i231:0 - i232:0 * div && i231:0 - i232:0 * div + i232:0 > 0
Removed following non-SCC rules:
f5303_0_log_Load'(EOS(STATIC_5303), i231:0, i232:0, i231:0, i232:0, i231:0) -> f6682_1_log_Load(EOS(STATIC_6682), i231:0, i232:0, div, i232:0) :|: i232:0 <= i231:0 && i232:0 > 1 && i231:0 > 1 && i231:0 > div && i232:0 > i231:0 - i232:0 * div && i231:0 - i232:0 * div + i232:0 > 0
Filtered constant ground arguments:
   f5303_0_log_Load(x1, x2, x3, x4, x5, x6) -> f5303_0_log_Load(x2, x3, x4, x5, x6)
   f5303_0_log_Load'(x1, x2, x3, x4, x5, x6) -> f5303_0_log_Load'(x2, x3, x4, x5, x6)
   EOS(x1) -> EOS
Filtered duplicate arguments:
   f5303_0_log_Load(x1, x2, x3, x4, x5) -> f5303_0_log_Load(x4, x5)
   f5303_0_log_Load'(x1, x2, x3, x4, x5) -> f5303_0_log_Load'(x4, x5)
Finished conversion. Obtained 2 rules.P rules:
f5303_0_log_Load(i232:0, i231:0) -> f5303_0_log_Load'(i232:0, i231:0) :|: i232:0 > 1 && i232:0 <= i231:0 && i231:0 > div && i231:0 > 1
f5303_0_log_Load'(i232:0, i231:0) -> f5303_0_log_Load(i232:0, div) :|: i232:0 > 1 && i232:0 <= i231:0 && i231:0 > 1 && i231:0 > div && i231:0 - i232:0 * div + i232:0 > 0 && i232:0 > i231:0 - i232:0 * div

----------------------------------------

(8)
Obligation:
Rules:
f5303_0_log_Load(x, x1) -> f5303_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
f5303_0_log_Load'(x3, x4) -> f5303_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f5303_0_log_Load(x, x1) -> f5303_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
f5303_0_log_Load'(x3, x4) -> f5303_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5303_0_log_Load(x, x1) -> f5303_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
(2) f5303_0_log_Load'(x3, x4) -> f5303_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f5303_0_log_Load(x, x1) -> f5303_0_log_Load'(x, x1) :|: x > 1 && x <= x1 && x1 > x2 && x1 > 1
(2) f5303_0_log_Load'(x3, x4) -> f5303_0_log_Load(x3, x5) :|: x3 > 1 && x3 <= x4 && x4 > 1 && x4 > x5 && x4 - x3 * x5 + x3 > 0 && x3 > x4 - x3 * x5

Arcs:
(1) -> (2)
(2) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f5303_0_log_Load(x:0, x1:0) -> f5303_0_log_Load(x:0, x5:0) :|: x:0 > x1:0 - x:0 * x5:0 && x2:0 < x1:0 && x1:0 - x:0 * x5:0 + x:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && x:0 <= x1:0 && x:0 > 1

----------------------------------------

(15) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f5303_0_log_Load(INTEGER, INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f5303_0_log_Load(x:0, x1:0) -> f5303_0_log_Load(x:0, x5:0) :|: x:0 > x1:0 - x:0 * x5:0 && x2:0 < x1:0 && x1:0 - x:0 * x5:0 + x:0 > 0 && x5:0 < x1:0 && x1:0 > 1 && x:0 <= x1:0 && x:0 > 1

----------------------------------------

(17) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(18)
Obligation:
Rules:
f5303_0_log_Load(x:0:0, x1:0:0) -> f5303_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0

----------------------------------------

(19) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f5303_0_log_Load(x, x1)] = x1

The following rules are decreasing:
f5303_0_log_Load(x:0:0, x1:0:0) -> f5303_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0
The following rules are bounded:
f5303_0_log_Load(x:0:0, x1:0:0) -> f5303_0_log_Load(x:0:0, x5:0:0) :|: x:0:0 <= x1:0:0 && x:0:0 > 1 && x1:0:0 > 1 && x5:0:0 < x1:0:0 && x1:0:0 - x:0:0 * x5:0:0 + x:0:0 > 0 && x2:0:0 < x1:0:0 && x:0:0 > x1:0:0 - x:0:0 * x5:0:0

----------------------------------------

(20)
YES
