YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a7Yrz.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 257 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) JBCTerminationSCC
(7) SCCToIRSProof [SOUND, 88 ms]
(8) IRSwT
(9) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(10) IRSwT
(11) IRSwTTerminationDigraphProof [EQUIVALENT, 31 ms]
(12) IRSwT
(13) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(14) IRSwT
(15) TempFilterProof [SOUND, 19 ms]
(16) IntTRS
(17) PolynomialOrderProcessor [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Fractale1 {
    public static void fractale(int i, Point p1, Point p2) {
	if (i > 0) {
	    int x3 = (p1.x + p1.y + p2.x - p2.y) / 2;
	    int y3 = (p2.x + p2.y + p1.y - p1.x) / 2;
	    Point p3 = new Point(x3, y3);
	    fractale(i-1, p1, p3);
	    fractale(i-1, p3, p2);
	}
    }

    public static void main(String args[]) {
	fractale(args.length, new Point(0, 0), new Point(200, 200));
    }
}

public class Point {
    
    public int x;
    public int y;

    public Point(int x, int y) {
	this.x = x;
	this.y = y;
    }
}


----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Fractale1 {
    public static void fractale(int i, Point p1, Point p2) {
	if (i > 0) {
	    int x3 = (p1.x + p1.y + p2.x - p2.y) / 2;
	    int y3 = (p2.x + p2.y + p1.y - p1.x) / 2;
	    Point p3 = new Point(x3, y3);
	    fractale(i-1, p1, p3);
	    fractale(i-1, p3, p2);
	}
    }

    public static void main(String args[]) {
	fractale(args.length, new Point(0, 0), new Point(200, 200));
    }
}

public class Point {
    
    public int x;
    public int y;

    public Point(int x, int y) {
	this.x = x;
	this.y = y;
    }
}


----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
Fractale1.main([Ljava/lang/String;)V: Graph of 40 nodes with 0 SCCs.



Fractale1.fractale(ILPoint;LPoint;)V: Graph of 73 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Splitted TerminationGraph to 1 SCCs.
----------------------------------------

(6)
Obligation:
SCC of termination graph based on JBC Program.
SCC contains nodes from the following methods: Fractale1.fractale(ILPoint;LPoint;)V
SCC calls the following helper methods: Fractale1.fractale(ILPoint;LPoint;)V
Performed SCC analyses:
*Used field analysis yielded the following read fields:
*Point: [x, y]
*Marker field analysis yielded the following relations that could be markers:

----------------------------------------

(7) SCCToIRSProof (SOUND)
Transformed FIGraph SCCs to intTRSs. Log: 
Generated rules. Obtained 70 IRulesP rules:
f7813_0_fractale_LE(EOS(STATIC_7813), i425, i425, i425) -> f7820_0_fractale_LE(EOS(STATIC_7820), i425, i425, i425) :|: TRUE
f7820_0_fractale_LE(EOS(STATIC_7820), i425, i425, i425) -> f7826_0_fractale_Load(EOS(STATIC_7826), i425, i425) :|: i425 > 0
f7826_0_fractale_Load(EOS(STATIC_7826), i425, i425) -> f7830_0_fractale_FieldAccess(EOS(STATIC_7830), i425, i425) :|: TRUE
f7830_0_fractale_FieldAccess(EOS(STATIC_7830), i425, i425) -> f7855_0_fractale_Load(EOS(STATIC_7855), i425, i425) :|: TRUE
f7855_0_fractale_Load(EOS(STATIC_7855), i425, i425) -> f7870_0_fractale_FieldAccess(EOS(STATIC_7870), i425, i425) :|: TRUE
f7870_0_fractale_FieldAccess(EOS(STATIC_7870), i425, i425) -> f7873_0_fractale_IntArithmetic(EOS(STATIC_7873), i425, i425) :|: TRUE
f7873_0_fractale_IntArithmetic(EOS(STATIC_7873), i425, i425) -> f7878_0_fractale_Load(EOS(STATIC_7878), i425, i425) :|: TRUE
f7878_0_fractale_Load(EOS(STATIC_7878), i425, i425) -> f7881_0_fractale_FieldAccess(EOS(STATIC_7881), i425, i425) :|: TRUE
f7881_0_fractale_FieldAccess(EOS(STATIC_7881), i425, i425) -> f7883_0_fractale_IntArithmetic(EOS(STATIC_7883), i425, i425) :|: TRUE
f7883_0_fractale_IntArithmetic(EOS(STATIC_7883), i425, i425) -> f7885_0_fractale_Load(EOS(STATIC_7885), i425, i425) :|: TRUE
f7885_0_fractale_Load(EOS(STATIC_7885), i425, i425) -> f7888_0_fractale_FieldAccess(EOS(STATIC_7888), i425, i425) :|: TRUE
f7888_0_fractale_FieldAccess(EOS(STATIC_7888), i425, i425) -> f7891_0_fractale_IntArithmetic(EOS(STATIC_7891), i425, i425) :|: TRUE
f7891_0_fractale_IntArithmetic(EOS(STATIC_7891), i425, i425) -> f7894_0_fractale_ConstantStackPush(EOS(STATIC_7894), i425, i425) :|: TRUE
f7894_0_fractale_ConstantStackPush(EOS(STATIC_7894), i425, i425) -> f7897_0_fractale_IntArithmetic(EOS(STATIC_7897), i425, i425) :|: TRUE
f7897_0_fractale_IntArithmetic(EOS(STATIC_7897), i425, i425) -> f7900_0_fractale_Store(EOS(STATIC_7900), i425, i425) :|: i429 = i428 / 2
f7900_0_fractale_Store(EOS(STATIC_7900), i425, i425) -> f7901_0_fractale_Load(EOS(STATIC_7901), i425, i425) :|: TRUE
f7901_0_fractale_Load(EOS(STATIC_7901), i425, i425) -> f7903_0_fractale_FieldAccess(EOS(STATIC_7903), i425, i425) :|: TRUE
f7903_0_fractale_FieldAccess(EOS(STATIC_7903), i425, i425) -> f7905_0_fractale_Load(EOS(STATIC_7905), i425, i425) :|: TRUE
f7905_0_fractale_Load(EOS(STATIC_7905), i425, i425) -> f7907_0_fractale_FieldAccess(EOS(STATIC_7907), i425, i425) :|: TRUE
f7907_0_fractale_FieldAccess(EOS(STATIC_7907), i425, i425) -> f7909_0_fractale_IntArithmetic(EOS(STATIC_7909), i425, i425) :|: TRUE
f7909_0_fractale_IntArithmetic(EOS(STATIC_7909), i425, i425) -> f7911_0_fractale_Load(EOS(STATIC_7911), i425, i425) :|: TRUE
f7911_0_fractale_Load(EOS(STATIC_7911), i425, i425) -> f7913_0_fractale_FieldAccess(EOS(STATIC_7913), i425, i425) :|: TRUE
f7913_0_fractale_FieldAccess(EOS(STATIC_7913), i425, i425) -> f7915_0_fractale_IntArithmetic(EOS(STATIC_7915), i425, i425) :|: TRUE
f7915_0_fractale_IntArithmetic(EOS(STATIC_7915), i425, i425) -> f7917_0_fractale_Load(EOS(STATIC_7917), i425, i425) :|: TRUE
f7917_0_fractale_Load(EOS(STATIC_7917), i425, i425) -> f7919_0_fractale_FieldAccess(EOS(STATIC_7919), i425, i425) :|: TRUE
f7919_0_fractale_FieldAccess(EOS(STATIC_7919), i425, i425) -> f7921_0_fractale_IntArithmetic(EOS(STATIC_7921), i425, i425) :|: TRUE
f7921_0_fractale_IntArithmetic(EOS(STATIC_7921), i425, i425) -> f7923_0_fractale_ConstantStackPush(EOS(STATIC_7923), i425, i425) :|: TRUE
f7923_0_fractale_ConstantStackPush(EOS(STATIC_7923), i425, i425) -> f7925_0_fractale_IntArithmetic(EOS(STATIC_7925), i425, i425) :|: TRUE
f7925_0_fractale_IntArithmetic(EOS(STATIC_7925), i425, i425) -> f7928_0_fractale_Store(EOS(STATIC_7928), i425, i425) :|: i433 = i432 / 2
f7928_0_fractale_Store(EOS(STATIC_7928), i425, i425) -> f7931_0_fractale_New(EOS(STATIC_7931), i425, i425) :|: TRUE
f7931_0_fractale_New(EOS(STATIC_7931), i425, i425) -> f7934_0_fractale_Duplicate(EOS(STATIC_7934), i425, i425) :|: TRUE
f7934_0_fractale_Duplicate(EOS(STATIC_7934), i425, i425) -> f7937_0_fractale_Load(EOS(STATIC_7937), i425, i425) :|: TRUE
f7937_0_fractale_Load(EOS(STATIC_7937), i425, i425) -> f7940_0_fractale_Load(EOS(STATIC_7940), i425, i425) :|: TRUE
f7940_0_fractale_Load(EOS(STATIC_7940), i425, i425) -> f7942_0_fractale_InvokeMethod(EOS(STATIC_7942), i425, i425) :|: TRUE
f7942_0_fractale_InvokeMethod(EOS(STATIC_7942), i425, i425) -> f7946_0__init__Load(EOS(STATIC_7946), i425, i425) :|: TRUE
f7946_0__init__Load(EOS(STATIC_7946), i425, i425) -> f7950_0__init__InvokeMethod(EOS(STATIC_7950), i425, i425) :|: TRUE
f7950_0__init__InvokeMethod(EOS(STATIC_7950), i425, i425) -> f7953_0__init__Load(EOS(STATIC_7953), i425, i425) :|: TRUE
f7953_0__init__Load(EOS(STATIC_7953), i425, i425) -> f7955_0__init__Load(EOS(STATIC_7955), i425, i425) :|: TRUE
f7955_0__init__Load(EOS(STATIC_7955), i425, i425) -> f7958_0__init__FieldAccess(EOS(STATIC_7958), i425, i425) :|: TRUE
f7958_0__init__FieldAccess(EOS(STATIC_7958), i425, i425) -> f7964_0__init__Load(EOS(STATIC_7964), i425, i425) :|: TRUE
f7964_0__init__Load(EOS(STATIC_7964), i425, i425) -> f7967_0__init__Load(EOS(STATIC_7967), i425, i425) :|: TRUE
f7967_0__init__Load(EOS(STATIC_7967), i425, i425) -> f7969_0__init__FieldAccess(EOS(STATIC_7969), i425, i425) :|: TRUE
f7969_0__init__FieldAccess(EOS(STATIC_7969), i425, i425) -> f7974_0__init__Return(EOS(STATIC_7974), i425, i425) :|: TRUE
f7974_0__init__Return(EOS(STATIC_7974), i425, i425) -> f7976_0_fractale_Store(EOS(STATIC_7976), i425, i425) :|: TRUE
f7976_0_fractale_Store(EOS(STATIC_7976), i425, i425) -> f7979_0_fractale_Load(EOS(STATIC_7979), i425, i425) :|: TRUE
f7979_0_fractale_Load(EOS(STATIC_7979), i425, i425) -> f7981_0_fractale_ConstantStackPush(EOS(STATIC_7981), i425, i425, i425) :|: TRUE
f7981_0_fractale_ConstantStackPush(EOS(STATIC_7981), i425, i425, i425) -> f7984_0_fractale_IntArithmetic(EOS(STATIC_7984), i425, i425, i425, 1) :|: TRUE
f7984_0_fractale_IntArithmetic(EOS(STATIC_7984), i425, i425, i425, matching1) -> f7988_0_fractale_Load(EOS(STATIC_7988), i425, i425, i425 - 1) :|: i425 > 0 && matching1 = 1
f7988_0_fractale_Load(EOS(STATIC_7988), i425, i425, i434) -> f7991_0_fractale_Load(EOS(STATIC_7991), i425, i425, i434) :|: TRUE
f7991_0_fractale_Load(EOS(STATIC_7991), i425, i425, i434) -> f7994_0_fractale_InvokeMethod(EOS(STATIC_7994), i425, i425, i434) :|: TRUE
f7994_0_fractale_InvokeMethod(EOS(STATIC_7994), i425, i425, i434) -> f7996_0_fractale_Load(EOS(STATIC_7996), i434, i434) :|: i425 >= 1 && i434 < i425
f7994_0_fractale_InvokeMethod(EOS(STATIC_7994), i425, i425, i434) -> f7996_1_fractale_Load(EOS(STATIC_7996), i425, i425, i434) :|: i425 >= 1 && i434 < i425
f7996_0_fractale_Load(EOS(STATIC_7996), i434, i434) -> f8003_0_fractale_Load(EOS(STATIC_8003), i434, i434) :|: TRUE
f8003_0_fractale_Load(EOS(STATIC_8003), i434, i434) -> f8093_0_fractale_Load(EOS(STATIC_8093), i434, i434) :|: TRUE
f8093_0_fractale_Load(EOS(STATIC_8093), i434, i434) -> f7799_0_fractale_Load(EOS(STATIC_7799), i434, i434) :|: TRUE
f7799_0_fractale_Load(EOS(STATIC_7799), i422, i422) -> f7813_0_fractale_LE(EOS(STATIC_7813), i422, i422, i422) :|: TRUE
f9406_0_fractale_Return(EOS(STATIC_9406), i425, i425) -> f9409_0_fractale_Load(EOS(STATIC_9409), i425, i425) :|: TRUE
f9409_0_fractale_Load(EOS(STATIC_9409), i425, i425) -> f9410_0_fractale_ConstantStackPush(EOS(STATIC_9410), i425, i425) :|: TRUE
f9410_0_fractale_ConstantStackPush(EOS(STATIC_9410), i425, i425) -> f9411_0_fractale_IntArithmetic(EOS(STATIC_9411), i425, i425, 1) :|: TRUE
f9411_0_fractale_IntArithmetic(EOS(STATIC_9411), i425, i425, matching1) -> f9412_0_fractale_Load(EOS(STATIC_9412), i425, i425 - 1) :|: i425 > 0 && matching1 = 1
f9412_0_fractale_Load(EOS(STATIC_9412), i425, i549) -> f9413_0_fractale_Load(EOS(STATIC_9413), i425, i549) :|: TRUE
f9413_0_fractale_Load(EOS(STATIC_9413), i425, i549) -> f9414_0_fractale_InvokeMethod(EOS(STATIC_9414), i425, i549) :|: TRUE
f9414_0_fractale_InvokeMethod(EOS(STATIC_9414), i425, i549) -> f9415_0_fractale_Load(EOS(STATIC_9415), i549, i549) :|: i425 >= 1 && i549 < i425
f9414_0_fractale_InvokeMethod(EOS(STATIC_9414), i425, i549) -> f9415_1_fractale_Load(EOS(STATIC_9415), i425, i549) :|: i425 >= 1 && i549 < i425
f9415_0_fractale_Load(EOS(STATIC_9415), i549, i549) -> f9416_0_fractale_Load(EOS(STATIC_9416), i549, i549) :|: TRUE
f9416_0_fractale_Load(EOS(STATIC_9416), i549, i549) -> f9445_0_fractale_Load(EOS(STATIC_9445), i549, i549) :|: TRUE
f9445_0_fractale_Load(EOS(STATIC_9445), i549, i549) -> f7799_0_fractale_Load(EOS(STATIC_7799), i549, i549) :|: TRUE
f12861_0_fractale_Return(EOS(STATIC_12861), i425, i425) -> f9406_0_fractale_Return(EOS(STATIC_9406), i425, i425) :|: TRUE
f7996_1_fractale_Load(EOS(STATIC_7996), i425, i425, i434) -> f9406_0_fractale_Return(EOS(STATIC_9406), i425, i425) :|: TRUE
f7996_1_fractale_Load(EOS(STATIC_7996), i425, i425, i434) -> f12861_0_fractale_Return(EOS(STATIC_12861), i425, i425) :|: TRUE
Combined rules. Obtained 5 IRulesP rules:
f7813_0_fractale_LE(EOS(STATIC_7813), i425:0, i425:0, i425:0) -> f7813_0_fractale_LE'(EOS(STATIC_7813), i425:0, i425:0, i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
f7813_0_fractale_LE'(EOS(STATIC_7813), i425:0, i425:0, i425:0) -> f7813_0_fractale_LE(EOS(STATIC_7813), i425:0 - 1, i425:0 - 1, i425:0 - 1) :|: i425:0 > 0 && i425:0 - 1 < i425:0 && i428:0 - 2 * div > -2 && i428:0 - 2 * div < 2 && i432:0 - 2 * div1 < 2 && i432:0 - 2 * div1 > -2
f7813_0_fractale_LE'(EOS(STATIC_7813), i425:0, i425:0, i425:0) -> f9406_0_fractale_Return(EOS(STATIC_9406), i425:0, i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0 && i428:0 - 2 * div > -2 && i428:0 - 2 * div < 2 && i432:0 - 2 * div1 < 2 && i432:0 - 2 * div1 > -2
f9406_0_fractale_Return(EOS(STATIC_9406), i425:0, i425:0) -> f7813_0_fractale_LE(EOS(STATIC_7813), i425:0 - 1, i425:0 - 1, i425:0 - 1) :|: i425:0 > 0 && i425:0 - 1 < i425:0
Removed following non-SCC rules:
f9406_0_fractale_Return(EOS(STATIC_9406), i425:0, i425:0) -> f9415_1_fractale_Load(EOS(STATIC_9415), i425:0, i425:0 - 1) :|: i425:0 > 0 && i425:0 - 1 < i425:0
Filtered constant ground arguments:
   f7813_0_fractale_LE(x1, x2, x3, x4) -> f7813_0_fractale_LE(x2, x3, x4)
   f7813_0_fractale_LE'(x1, x2, x3, x4) -> f7813_0_fractale_LE'(x2, x3, x4)
   f9406_0_fractale_Return(x1, x2, x3) -> f9406_0_fractale_Return(x2, x3)
Filtered duplicate arguments:
   f7813_0_fractale_LE(x1, x2, x3) -> f7813_0_fractale_LE(x3)
   f7813_0_fractale_LE'(x1, x2, x3) -> f7813_0_fractale_LE'(x3)
   f9406_0_fractale_Return(x1, x2) -> f9406_0_fractale_Return(x2)
Finished conversion. Obtained 4 rules.P rules:
f7813_0_fractale_LE(i425:0) -> f7813_0_fractale_LE'(i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
f7813_0_fractale_LE'(i425:0) -> f7813_0_fractale_LE(i425:0 - 1) :|: i425:0 - 1 < i425:0 && i425:0 > 0 && i428:0 - 2 * div > -2 && i428:0 - 2 * div < 2 && i432:0 - 2 * div1 > -2 && i432:0 - 2 * div1 < 2
f7813_0_fractale_LE'(i425:0) -> f9406_0_fractale_Return(i425:0) :|: i425:0 - 1 < i425:0 && i425:0 > 0 && i428:0 - 2 * div > -2 && i428:0 - 2 * div < 2 && i432:0 - 2 * div1 > -2 && i432:0 - 2 * div1 < 2
f9406_0_fractale_Return(i425:0) -> f7813_0_fractale_LE(i425:0 - 1) :|: i425:0 > 0 && i425:0 - 1 < i425:0

----------------------------------------

(8)
Obligation:
Rules:
f7813_0_fractale_LE(i425:0) -> f7813_0_fractale_LE'(i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
f7813_0_fractale_LE'(x) -> f7813_0_fractale_LE(x - 1) :|: x - 1 < x && x > 0 && x1 - 2 * x2 > -2 && x1 - 2 * x2 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2
f7813_0_fractale_LE'(x5) -> f9406_0_fractale_Return(x5) :|: x5 - 1 < x5 && x5 > 0 && x6 - 2 * x7 > -2 && x6 - 2 * x7 < 2 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2
f9406_0_fractale_Return(x10) -> f7813_0_fractale_LE(x10 - 1) :|: x10 > 0 && x10 - 1 < x10

----------------------------------------

(9) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(10)
Obligation:
Rules:
f7813_0_fractale_LE(i425:0) -> f7813_0_fractale_LE'(i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
f7813_0_fractale_LE'(x) -> f7813_0_fractale_LE(arith) :|: x - 1 < x && x > 0 && x1 - 2 * x2 > -2 && x1 - 2 * x2 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2 && arith = x - 1
f7813_0_fractale_LE'(x5) -> f9406_0_fractale_Return(x5) :|: x5 - 1 < x5 && x5 > 0 && x6 - 2 * x7 > -2 && x6 - 2 * x7 < 2 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2
f9406_0_fractale_Return(x11) -> f7813_0_fractale_LE(x12) :|: x11 > 0 && x11 - 1 < x11 && x12 = x11 - 1

----------------------------------------

(11) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f7813_0_fractale_LE(i425:0) -> f7813_0_fractale_LE'(i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
(2) f7813_0_fractale_LE'(x) -> f7813_0_fractale_LE(arith) :|: x - 1 < x && x > 0 && x1 - 2 * x2 > -2 && x1 - 2 * x2 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2 && arith = x - 1
(3) f7813_0_fractale_LE'(x5) -> f9406_0_fractale_Return(x5) :|: x5 - 1 < x5 && x5 > 0 && x6 - 2 * x7 > -2 && x6 - 2 * x7 < 2 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2
(4) f9406_0_fractale_Return(x11) -> f7813_0_fractale_LE(x12) :|: x11 > 0 && x11 - 1 < x11 && x12 = x11 - 1

Arcs:
(1) -> (2), (3)
(2) -> (1)
(3) -> (4)
(4) -> (1)

This digraph is fully evaluated!
----------------------------------------

(12)
Obligation:

Termination digraph:
Nodes:
(1) f7813_0_fractale_LE(i425:0) -> f7813_0_fractale_LE'(i425:0) :|: i425:0 > 0 && i425:0 - 1 < i425:0
(2) f9406_0_fractale_Return(x11) -> f7813_0_fractale_LE(x12) :|: x11 > 0 && x11 - 1 < x11 && x12 = x11 - 1
(3) f7813_0_fractale_LE'(x5) -> f9406_0_fractale_Return(x5) :|: x5 - 1 < x5 && x5 > 0 && x6 - 2 * x7 > -2 && x6 - 2 * x7 < 2 && x8 - 2 * x9 > -2 && x8 - 2 * x9 < 2
(4) f7813_0_fractale_LE'(x) -> f7813_0_fractale_LE(arith) :|: x - 1 < x && x > 0 && x1 - 2 * x2 > -2 && x1 - 2 * x2 < 2 && x3 - 2 * x4 > -2 && x3 - 2 * x4 < 2 && arith = x - 1

Arcs:
(1) -> (3), (4)
(2) -> (1)
(3) -> (2)
(4) -> (1)

This digraph is fully evaluated!

----------------------------------------

(13) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(14)
Obligation:
Rules:
f7813_0_fractale_LE(i425:0:0) -> f7813_0_fractale_LE(i425:0:0 - 1) :|: x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x4:0 > -2 && x1:0 - 2 * x2:0 < 2 && x1:0 - 2 * x2:0 > -2 && i425:0:0 > 0 && i425:0:0 - 1 < i425:0:0

----------------------------------------

(15) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f7813_0_fractale_LE(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(16)
Obligation:
Rules:
f7813_0_fractale_LE(i425:0:0) -> f7813_0_fractale_LE(c) :|: c = i425:0:0 - 1 && (x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x4:0 > -2 && x1:0 - 2 * x2:0 < 2 && x1:0 - 2 * x2:0 > -2 && i425:0:0 > 0 && i425:0:0 - 1 < i425:0:0)

----------------------------------------

(17) PolynomialOrderProcessor (EQUIVALENT)
Found the following polynomial interpretation:
[f7813_0_fractale_LE(x)] = x

The following rules are decreasing:
f7813_0_fractale_LE(i425:0:0) -> f7813_0_fractale_LE(c) :|: c = i425:0:0 - 1 && (x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x4:0 > -2 && x1:0 - 2 * x2:0 < 2 && x1:0 - 2 * x2:0 > -2 && i425:0:0 > 0 && i425:0:0 - 1 < i425:0:0)
The following rules are bounded:
f7813_0_fractale_LE(i425:0:0) -> f7813_0_fractale_LE(c) :|: c = i425:0:0 - 1 && (x3:0 - 2 * x4:0 < 2 && x3:0 - 2 * x4:0 > -2 && x1:0 - 2 * x2:0 < 2 && x1:0 - 2 * x2:0 > -2 && i425:0:0 > 0 && i425:0:0 - 1 < i425:0:0)

----------------------------------------

(18)
YES
