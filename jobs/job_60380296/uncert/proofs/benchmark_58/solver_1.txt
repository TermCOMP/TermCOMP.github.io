YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZblWz.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be proven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 189 ms]
(4) JBCTerminationGraph
(5) TerminationGraphToSCCProof [SOUND, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
/**
 * A program that creates a binary tree of arbitrary height and then
 * computes that height with a recursive descent on the tree.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class BTree {
    private BTree left, right;

    public BTree(int height) {
	if (height > 1) {
	    this.left = new BTree(height - 1);
	    this.right = new BTree(height - 1);
	}
    }

    public int height() {
	if (left == null && right == null) return 1;
	else if (left == null) return 1 + right.height();
	else return 1 + left.height();
    }

    public static void main(String[] args) {
	BTree bt = new BTree(5);
  bt.height();
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
/**
 * A program that creates a binary tree of arbitrary height and then
 * computes that height with a recursive descent on the tree.
 *
 * All calls terminate.
 *
 * Julia + BinTerm prove that all calls terminate
 *
 * @author <A HREF="mailto:fausto.spoto@univr.it">Fausto Spoto</A>
 */

public class BTree {
    private BTree left, right;

    public BTree(int height) {
	if (height > 1) {
	    this.left = new BTree(height - 1);
	    this.right = new BTree(height - 1);
	}
    }

    public int height() {
	if (left == null && right == null) return 1;
	else if (left == null) return 1 + right.height();
	else return 1 + left.height();
    }

    public static void main(String[] args) {
	BTree bt = new BTree(5);
  bt.height();
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
BTree.main([Ljava/lang/String;)V: Graph of 492 nodes with 0 SCCs.





----------------------------------------

(5) TerminationGraphToSCCProof (SOUND)
Proven termination by absence of SCCs
----------------------------------------

(6)
TRUE
