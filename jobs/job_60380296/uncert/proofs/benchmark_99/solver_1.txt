NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/sL3wx.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 91 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class AlternDiv {
    public static void loop(int i) {
	if (i != 0) {
	    if (i < 0) loop(-1 * (i - 1));
	    else loop(-1 * (i + 1));
	}
    }

    public static void main(String args[]) {
	loop(args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class AlternDiv {
    public static void loop(int i) {
	if (i != 0) {
	    if (i < 0) loop(-1 * (i - 1));
	    else loop(-1 * (i + 1));
	}
    }

    public static void main(String args[]) {
	loop(args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<AlternDiv.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<AlternDiv.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<AlternDiv.main||2: AlternDiv.loop(I)V|| - ||1>
YES:  (JL1)
3:<AlternDiv.loop||0: load INT #0||#0: 1|| ->
YES:  (JL1)
Start state of loop: 

[i16(lv_0_0)]
<AlternDiv.loop||0: load INT #0||#0: i16|| ->
	i16: #
YES:  (JL1)


In the loop head node, references [i16] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and ((((path1_i16 = path1_i22 and path1_i22 = path1_i23 and path1_i28 = (path1_i23 - 1) and path1_i32 = (-1 * path1_i28) and path1_i32 = res_i16 and path1_i16 = initial_i16) and (path1_i22 != 0 and path1_i23 < 0)) or ((path2_i16 = path2_i22 and path2_i22 = path2_i24 and path2_i30 = (path2_i24 + 1) and path2_i33 = (-1 * path2_i30) and path2_i33 = res_i16 and path2_i16 = initial_i16) and (path2_i22 != 0 and path2_i24 >= 0)) or ((path1_i16 = path1_i22 and path1_i22 = path1_i23 and path1_i28 = (path1_i23 - 1) and path1_i32 = (-1 * path1_i28) and path1_i32 = res_i16 and path1_i16 = initial_i16) and (path1_i23 < 0 and path1_i22 < 0)) or ((path1_i16 = path1_i22 and path1_i22 = path1_i23 and path1_i28 = (path1_i23 - 1) and path1_i32 = (-1 * path1_i28) and path1_i32 = res_i16 and path1_i16 = initial_i16) and (path1_i23 < 0 and path1_i22 > 0)) or ((path2_i16 = path2_i22 and path2_i22 = path2_i24 and path2_i30 = (path2_i24 + 1) and path2_i33 = (-1 * path2_i30) and path2_i33 = res_i16 and path2_i16 = initial_i16) and (path2_i24 >= 0 and path2_i22 < 0)) or ((path2_i16 = path2_i22 and path2_i22 = path2_i24 and path2_i30 = (path2_i24 + 1) and path2_i33 = (-1 * path2_i30) and path2_i33 = res_i16 and path2_i16 = initial_i16) and (path2_i24 >= 0 and path2_i22 > 0))) and (((res1_i16 = res1_i22 and res1_i22 = res1_i23 and res1_i28 = (res1_i23 - 1) and res1_i32 = (-1 * res1_i28) and res_i16 = res1_i16) and !(res1_i22 != 0 and res1_i23 < 0)) and ((res2_i16 = res2_i22 and res2_i22 = res2_i24 and res2_i30 = (res2_i24 + 1) and res2_i33 = (-1 * res2_i30) and res_i16 = res2_i16) and !(res2_i22 != 0 and res2_i24 >= 0)) and ((res1_i16 = res1_i22 and res1_i22 = res1_i23 and res1_i28 = (res1_i23 - 1) and res1_i32 = (-1 * res1_i28) and res_i16 = res1_i16) and !(res1_i23 < 0 and res1_i22 < 0)) and ((res1_i16 = res1_i22 and res1_i22 = res1_i23 and res1_i28 = (res1_i23 - 1) and res1_i32 = (-1 * res1_i28) and res_i16 = res1_i16) and !(res1_i23 < 0 and res1_i22 > 0)) and ((res2_i16 = res2_i22 and res2_i22 = res2_i24 and res2_i30 = (res2_i24 + 1) and res2_i33 = (-1 * res2_i30) and res_i16 = res2_i16) and !(res2_i24 >= 0 and res2_i22 < 0)) and ((res2_i16 = res2_i22 and res2_i22 = res2_i24 and res2_i30 = (res2_i24 + 1) and res2_i33 = (-1 * res2_i30) and res_i16 = res2_i16) and !(res2_i24 >= 0 and res2_i22 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
