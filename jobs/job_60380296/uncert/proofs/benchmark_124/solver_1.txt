NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/UgRLe.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 231 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Ex08 {

    public static void loop_aux(int i, boolean up) {
	if (i > 0) {
	    if (i == 1) up = true;
	    if (i == 10) up = false;
	    if (up) i++;
	    else i--;
	    loop_aux(i, up);
	}
    }
    
    public static void loop(int i) {
	loop_aux(i, false);
    }
	
    public static void main(String[] args) {
	loop(10 * args.length);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Ex08 {

    public static void loop_aux(int i, boolean up) {
	if (i > 0) {
	    if (i == 1) up = true;
	    if (i == 10) up = false;
	    if (up) i++;
	    else i--;
	    loop_aux(i, up);
	}
    }
    
    public static void loop(int i) {
	loop_aux(i, false);
    }
	
    public static void main(String[] args) {
	loop(10 * args.length);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Ex08.main||0: push 10||#0: a2|| ->
	a2([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
1:<Ex08.main||2: load ADDR #0||#0: a2||10>
	a2([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
2:<Ex08.main||3: arraylength|| - ||10, a2>
	a2([java.lang.String...]): length 2 -->{java.lang.Object...}
YES:  (JL1)
3:<Ex08.main||4: MUL|| - ||10, 2>
YES:  (JL1)
4:<Ex08.main||5: Ex08.loop(I)V|| - ||20>
YES:  (JL1)
5:<Ex08.loop||0: load INT #0||#0: 20|| ->
<Ex08.main||5: Ex08.loop|| - || ->
YES:  (JL1)
6:<Ex08.loop||1: push 0|| - ||20>
<Ex08.main||5: Ex08.loop|| - || ->
YES:  (JL1)
7:<Ex08.loop||2: Ex08.loop_aux(IZ)V|| - ||20, 0>
<Ex08.main||5: Ex08.loop|| - || ->
YES:  (JL1)
8:<Ex08.loop_aux||0: load INT #0||#0: 20, #1: 0|| ->
YES:  (JL1)
Start state of loop: 

[i85(lv_0_0), i86(lv_0_1)]
<Ex08.loop_aux||0: load INT #0||#0: i85, #1: i87|| ->
	i85: [0,+inf)(l1)
	i86: [0,1](1,1)
	i87: [0,1](1,1)
YES:  (JL1)


In the loop head node, references [i85, i87, i86] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i85 and 0 <= initial_i86 and initial_i86 <= 1 and 0 <= initial_i87 and initial_i87 <= 1) and ((((path1_i85 = path1_i88 and path1_i88 = path1_i91 and path1_i91 = path1_i93 and path1_i93 = path1_i95 and path1_i98 = (path1_i95 + -1) and path1_i98 = res_i85 and 0 = res_i86 and 0 = res_i87 and path1_i85 = initial_i85 and path1_i86 = initial_i86 and path1_i87 = initial_i87) and (path1_i88 > 0 and T and 1 = 1 and path1_i91 > 1 and T and 10 = 10 and path1_i93 < 10 and path1_i87 = 0 and T)) or ((path2_i85 = path2_i88 and path2_i88 = path2_i91 and path2_i91 = path2_i94 and path2_i94 = path2_i95 and path2_i98 = (path2_i95 + -1) and path2_i98 = res_i85 and 0 = res_i86 and 0 = res_i87 and path2_i85 = initial_i85 and path2_i86 = initial_i86 and path2_i87 = initial_i87) and (path2_i88 > 0 and T and 1 = 1 and path2_i91 > 1 and T and 10 = 10 and path2_i94 > 10 and path2_i87 = 0 and T)) or ((path3_i85 = path3_i88 and 2 = res_i85 and 1 = res_i86 and 1 = res_i87 and path3_i85 = initial_i85 and path3_i86 = initial_i86 and path3_i87 = initial_i87) and (path3_i88 > 0 and path3_i88 = 1 and path3_i88 = 1 and 1 = 1 and 1 > 0)) or ((path4_i85 = path4_i88 and path4_i88 = path4_i91 and 9 = res_i85 and 0 = res_i86 and 0 = res_i87 and path4_i85 = initial_i85 and path4_i86 = initial_i86 and path4_i87 = initial_i87) and (path4_i88 > 0 and T and 1 = 1 and path4_i91 > 1 and path4_i91 = 10 and path4_i91 = 10 and 10 = 10 and T)) or ((path5_i85 = path5_i88 and path5_i88 = path5_i91 and path5_i91 = path5_i93 and path5_i93 = path5_i95 and path5_i97 = (path5_i95 + 1) and path5_i97 = res_i85 and 1 = res_i86 and 1 = res_i87 and path5_i85 = initial_i85 and path5_i86 = initial_i86 and path5_i87 = initial_i87) and (path5_i88 > 0 and T and 1 = 1 and path5_i91 > 1 and T and 10 = 10 and path5_i93 < 10 and path5_i87 = 1 and 1 > 0)) or ((path6_i85 = path6_i88 and path6_i88 = path6_i91 and path6_i91 = path6_i94 and path6_i94 = path6_i95 and path6_i97 = (path6_i95 + 1) and path6_i97 = res_i85 and 1 = res_i86 and 1 = res_i87 and path6_i85 = initial_i85 and path6_i86 = initial_i86 and path6_i87 = initial_i87) and (path6_i88 > 0 and T and 1 = 1 and path6_i91 > 1 and T and 10 = 10 and path6_i94 > 10 and path6_i87 = 1 and 1 > 0))) and (((res1_i85 = res1_i88 and res1_i88 = res1_i91 and res1_i91 = res1_i93 and res1_i93 = res1_i95 and res1_i98 = (res1_i95 + -1) and res_i85 = res1_i85 and res_i86 = res1_i86 and res_i87 = res1_i87) and !(res1_i88 > 0 and T and 1 = 1 and res1_i91 > 1 and T and 10 = 10 and res1_i93 < 10 and res1_i87 = 0 and T)) and ((res2_i85 = res2_i88 and res2_i88 = res2_i91 and res2_i91 = res2_i94 and res2_i94 = res2_i95 and res2_i98 = (res2_i95 + -1) and res_i85 = res2_i85 and res_i86 = res2_i86 and res_i87 = res2_i87) and !(res2_i88 > 0 and T and 1 = 1 and res2_i91 > 1 and T and 10 = 10 and res2_i94 > 10 and res2_i87 = 0 and T)) and ((res3_i85 = res3_i88 and res_i85 = res3_i85 and res_i86 = res3_i86 and res_i87 = res3_i87) and !(res3_i88 > 0 and res3_i88 = 1 and res3_i88 = 1 and 1 = 1 and 1 > 0)) and ((res4_i85 = res4_i88 and res4_i88 = res4_i91 and res_i85 = res4_i85 and res_i86 = res4_i86 and res_i87 = res4_i87) and !(res4_i88 > 0 and T and 1 = 1 and res4_i91 > 1 and res4_i91 = 10 and res4_i91 = 10 and 10 = 10 and T)) and ((res5_i85 = res5_i88 and res5_i88 = res5_i91 and res5_i91 = res5_i93 and res5_i93 = res5_i95 and res5_i97 = (res5_i95 + 1) and res_i85 = res5_i85 and res_i86 = res5_i86 and res_i87 = res5_i87) and !(res5_i88 > 0 and T and 1 = 1 and res5_i91 > 1 and T and 10 = 10 and res5_i93 < 10 and res5_i87 = 1 and 1 > 0)) and ((res6_i85 = res6_i88 and res6_i88 = res6_i91 and res6_i91 = res6_i94 and res6_i94 = res6_i95 and res6_i97 = (res6_i95 + 1) and res_i85 = res6_i85 and res_i86 = res6_i86 and res_i87 = res6_i87) and !(res6_i88 > 0 and T and 1 = 1 and res6_i91 > 1 and T and 10 = 10 and res6_i94 > 10 and res6_i87 = 1 and 1 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
