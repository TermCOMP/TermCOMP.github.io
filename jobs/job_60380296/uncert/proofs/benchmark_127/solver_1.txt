NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/jaLsW.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 50 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 193 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Middle {

    public static int middle(int i, int j) {
	if (i != j) {
	    i--;
	    j++;
	    return middle(i, j);
	}
	return i;
    }

    public static void main(String[] args) {
	middle(args.length, args.length + 5);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Middle {

    public static int middle(int i, int j) {
	if (i != j) {
	    i--;
	    j++;
	    return middle(i, j);
	}
	return i;
    }

    public static void main(String[] args) {
	middle(args.length, args.length + 5);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Middle.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
1:<Middle.main||1: arraylength||#0: a2||a2>
	a2([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
2:<Middle.main||2: load ADDR #0||#0: a2||0>
	a2([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
3:<Middle.main||3: arraylength|| - ||0, a2>
	a2([java.lang.String...]): length 0 -->{java.lang.Object...}
YES:  (JL1)
4:<Middle.main||4: push 5|| - ||0, 0>
YES:  (JL1)
5:<Middle.main||5: ADD|| - ||0, 0, 5>
YES:  (JL1)
6:<Middle.main||6: Middle.middle(II)I|| - ||0, 5>
YES:  (JL1)
7:<Middle.middle||0: load INT #0||#0: 0, #1: 5|| ->
YES:  (JL1)
Start state of loop: 

[i33(lv_0_0), i34(lv_0_1)]
<Middle.middle||0: load INT #0||#0: i33, #1: i34|| ->
	i33: #
	i34: #
YES:  (JL1)


In the loop head node, references [i33, i34] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and ((((path1_i39 = (path1_i33 + -1) and path1_i40 = (path1_i34 + 1) and path1_i39 = res_i33 and path1_i40 = res_i34 and path1_i33 = initial_i33 and path1_i34 = initial_i34) and (path1_i33 != path1_i34 and path1_i33 < path1_i34)) or ((path1_i39 = (path1_i33 + -1) and path1_i40 = (path1_i34 + 1) and path1_i39 = res_i33 and path1_i40 = res_i34 and path1_i33 = initial_i33 and path1_i34 = initial_i34) and (path1_i33 < path1_i34 and path1_i33 < path1_i34)) or ((path1_i39 = (path1_i33 + -1) and path1_i40 = (path1_i34 + 1) and path1_i39 = res_i33 and path1_i40 = res_i34 and path1_i33 = initial_i33 and path1_i34 = initial_i34) and (path1_i33 < path1_i34 and path1_i33 > path1_i34))) and (((res1_i39 = (res1_i33 + -1) and res1_i40 = (res1_i34 + 1) and res_i33 = res1_i33 and res_i34 = res1_i34) and !(res1_i33 != res1_i34 and res1_i33 < res1_i34)) and ((res1_i39 = (res1_i33 + -1) and res1_i40 = (res1_i34 + 1) and res_i33 = res1_i33 and res_i34 = res1_i34) and !(res1_i33 < res1_i34 and res1_i33 < res1_i34)) and ((res1_i39 = (res1_i33 + -1) and res1_i40 = (res1_i34 + 1) and res_i33 = res1_i33 and res_i34 = res1_i34) and !(res1_i33 < res1_i34 and res1_i33 > res1_i34)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
