NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/ckBQg.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 60 ms]
(2) JBC problem
(3) JBCNonTerm [COMPLETE, 194 ms]
(4) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class Sum {
    public static int sum(int n) {
	if (n == 0) return 0;
	else return n + sum(n - 1);
    }
    
    public static void main(String args[]) {
	int n = args.length;
	if (args.length < 5)  n *= -1;
	sum(n);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class Sum {
    public static int sum(int n) {
	if (n == 0) return 0;
	else return n + sum(n - 1);
    }
    
    public static void main(String args[]) {
	int n = args.length;
	if (args.length < 5)  n *= -1;
	sum(n);
    }
}



----------------------------------------

(3) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<Sum.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<Sum.main||1: arraylength||#0: a2||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<Sum.main||2: store INT to #1||#0: a2||1>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
3:<Sum.main||3: load ADDR #0||#0: a2, #1: 1|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
4:<Sum.main||4: arraylength||#1: 1||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
5:<Sum.main||5: push 5||#1: 1||1>
YES:  (JL1)
6:<Sum.main||6: GE||#1: 1||1, 5>
YES:  (JL1)
7:<Sum.main||9: load INT #1||#1: 1|| ->
YES:  (JL1)
8:<Sum.main||10: push -1|| - ||1>
YES:  (JL1)
9:<Sum.main||11: MUL|| - ||1, -1>
YES:  (JL1)
10:<Sum.main||12: store INT to #1|| - ||-1>
YES:  (JL1)
11:<Sum.main||13: load INT #1||#1: -1|| ->
YES:  (JL1)
12:<Sum.main||14: Sum.sum(I)I|| - ||-1>
YES:  (JL1)
13:<Sum.sum||0: load INT #0||#0: -1|| ->
YES:  (JL1)
Start state of loop: 

[i48(lv_0_0)]
<Sum.sum||0: load INT #0||#0: i48|| ->
	i48: #
YES:  (JL1)


In the loop head node, references [i48] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

(T and (((path1_i48 = path1_i50 and path1_i56 = (path1_i50 - 1) and path1_i56 = res_i48 and path1_i48 = initial_i48) and path1_i50 < 0) and ((res1_i48 = res1_i50 and res1_i56 = (res1_i50 - 1) and res_i48 = res1_i48) and !res1_i50 < 0)))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(4)
NO
