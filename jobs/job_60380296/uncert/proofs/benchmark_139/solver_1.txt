NO
proof of /hpcwork/ff862203/termcomp25/benchmarks/4lMjr.jar
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


termination of the given Bare JBC problem could be disproven:

(0) Bare JBC problem
(1) BareJBCToJBCProof [EQUIVALENT, 0 ms]
(2) JBC problem
(3) JBCToGraph [EQUIVALENT, 237 ms]
(4) JBCTerminationGraph
(5) JBCNonTerm [COMPLETE, 19 ms]
(6) NO


----------------------------------------

(0)
Obligation:
need to prove termination of the following program:
public class UpAndDown {

    public static void upAndDown(int i, boolean up) {
	if (0 <= i && i <= 10) {
	    if (i == 10) up = false;
	    if (i == 0) up = true;
	    if (up) i++;
	    else i--;
	    upAndDown(i, up);
	}
    }

    public static void main(String[] args) {
	upAndDown(args.length, false);
    }
}



----------------------------------------

(1) BareJBCToJBCProof (EQUIVALENT)
initialized classpath
----------------------------------------

(2)
Obligation:
need to prove termination of the following program:
public class UpAndDown {

    public static void upAndDown(int i, boolean up) {
	if (0 <= i && i <= 10) {
	    if (i == 10) up = false;
	    if (i == 0) up = true;
	    if (up) i++;
	    else i--;
	    upAndDown(i, up);
	}
    }

    public static void main(String[] args) {
	upAndDown(args.length, false);
    }
}



----------------------------------------

(3) JBCToGraph (EQUIVALENT)
Constructed TerminationGraph.
----------------------------------------

(4)
Obligation:
Termination Graph based on JBC Program:
UpAndDown.main([Ljava/lang/String;)V: Graph of 15 nodes with 0 SCCs.



UpAndDown.upAndDown(IZ)V: Graph of 75 nodes with 0 SCCs.





----------------------------------------

(5) JBCNonTerm (COMPLETE)
Reached a loop using the following run: 

0:<UpAndDown.main||0: load ADDR #0||#0: a2|| ->
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
1:<UpAndDown.main||1: arraylength|| - ||a2>
	a2([java.lang.String...]): length 1 -->{java.lang.Object...}
YES:  (JL1)
2:<UpAndDown.main||2: push 0|| - ||1>
YES:  (JL1)
3:<UpAndDown.main||3: UpAndDown.upAndDown(IZ)V|| - ||1, 0>
YES:  (JL1)
4:<UpAndDown.upAndDown||0: push 0||#0: 1, #1: 0|| ->
YES:  (JL1)
Start state of loop: 

[i41(lv_0_0), i42(lv_0_1)]
<UpAndDown.upAndDown||0: push 0||#0: i41, #1: i43|| ->
	i41: [0,+inf)(l1)
	i42: [0,1](1,1)
	i43: [0,1](1,1)
YES:  (JL1)


In the loop head node, references [i41, i42, i43] were interesting.

All methods calls in the loop body are side-effect free, hence they can be ignored.

By SMT, we could prove

((0 <= initial_i41 and 0 <= initial_i42 and initial_i42 <= 1 and 0 <= initial_i43 and initial_i43 <= 1) and ((((path1_i41 = path1_i44 and path1_i44 = path1_i50 and path1_i50 = path1_i52 and path1_i54 = (path1_i52 + -1) and path1_i54 = res_i41 and 0 = res_i42 and 0 = res_i43 and path1_i41 = initial_i41 and path1_i42 = initial_i42 and path1_i43 = initial_i43) and (0 <= path1_i41 and T and 10 = 10 and path1_i44 <= 10 and T and 10 = 10 and path1_i50 < 10 and path1_i52 > 0 and path1_i43 = 0 and T)) or ((path2_i41 = path2_i44 and 9 = res_i41 and 0 = res_i42 and 0 = res_i43 and path2_i41 = initial_i41 and path2_i42 = initial_i42 and path2_i43 = initial_i43) and (0 <= path2_i41 and T and 10 = 10 and path2_i44 <= 10 and path2_i44 = 10 and path2_i44 = 10 and 10 = 10 and 10 > 0 and T)) or ((path3_i41 = path3_i44 and path3_i44 = path3_i50 and path3_i50 = path3_i52 and path3_i53 = (path3_i52 + 1) and path3_i53 = res_i41 and 1 = res_i42 and 1 = res_i43 and path3_i41 = initial_i41 and path3_i42 = initial_i42 and path3_i43 = initial_i43) and (0 <= path3_i41 and T and 10 = 10 and path3_i44 <= 10 and T and 10 = 10 and path3_i50 < 10 and path3_i52 > 0 and path3_i43 = 1 and 1 > 0)) or ((path4_i41 = path4_i44 and path4_i44 = path4_i50 and 1 = res_i41 and 1 = res_i42 and 1 = res_i43 and path4_i41 = initial_i41 and path4_i42 = initial_i42 and path4_i43 = initial_i43) and (0 <= path4_i41 and T and 10 = 10 and path4_i44 <= 10 and T and 10 = 10 and path4_i50 < 10 and path4_i50 = 0 and T and 1 > 0))) and (((res1_i41 = res1_i44 and res1_i44 = res1_i50 and res1_i50 = res1_i52 and res1_i54 = (res1_i52 + -1) and res_i41 = res1_i41 and res_i42 = res1_i42 and res_i43 = res1_i43) and !(0 <= res1_i41 and T and 10 = 10 and res1_i44 <= 10 and T and 10 = 10 and res1_i50 < 10 and res1_i52 > 0 and res1_i43 = 0 and T)) and ((res2_i41 = res2_i44 and res_i41 = res2_i41 and res_i42 = res2_i42 and res_i43 = res2_i43) and !(0 <= res2_i41 and T and 10 = 10 and res2_i44 <= 10 and res2_i44 = 10 and res2_i44 = 10 and 10 = 10 and 10 > 0 and T)) and ((res3_i41 = res3_i44 and res3_i44 = res3_i50 and res3_i50 = res3_i52 and res3_i53 = (res3_i52 + 1) and res_i41 = res3_i41 and res_i42 = res3_i42 and res_i43 = res3_i43) and !(0 <= res3_i41 and T and 10 = 10 and res3_i44 <= 10 and T and 10 = 10 and res3_i50 < 10 and res3_i52 > 0 and res3_i43 = 1 and 1 > 0)) and ((res4_i41 = res4_i44 and res4_i44 = res4_i50 and res_i41 = res4_i41 and res_i42 = res4_i42 and res_i43 = res4_i43) and !(0 <= res4_i41 and T and 10 = 10 and res4_i44 <= 10 and T and 10 = 10 and res4_i50 < 10 and res4_i50 = 0 and T and 1 > 0)))))

to be UNSAT. Consequently, the loop will not terminate.
----------------------------------------

(6)
NO
