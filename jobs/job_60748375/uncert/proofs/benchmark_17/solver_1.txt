AST
proof of /home/ff862203/input_ctclfo52Kx.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) ToInnermostProof [EQUIVALENT, 0 ms]
(2) PTRS
(3) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(4) PQTRS
(5) PQTRStoADPProblemProof [EQUIVALENT, 4 ms]
(6) ADP
(7) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) ADP
        (10) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (11) ADP
        (12) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (13) ADP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) ADP
        (17) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (18) ADP
        (19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
        (20) ADP
        (21) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
        (22) ADP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

and uses the full rewrite strategy.

----------------------------------------

(1) ToInnermostProof (EQUIVALENT)
Switched from non-innermost to innermost rewriting[FoSSaCS24].

The system is non-overlapping, left-linear and right-linear, so it is AST iff it is innermost AST.


----------------------------------------

(2)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

and uses the innermost rewrite strategy.

----------------------------------------

(3) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   createT, numR
----------------------------------------

(4)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

And Q contains the following terms:
   createT, numR

----------------------------------------

(5) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 2 : Leaf || 1 / 2 : Node(CREATET, NUMR, CREATET)
   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(7) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(10) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(11)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)


----------------------------------------

(12) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   NUMR -> 1 / 2 : 0 || 1 / 2 : s(NUMR)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(NUMR) = 2
   POL(s(x_1)) = 0

----------------------------------------

(13)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 2 : Leaf || 1 / 2 : Node(CREATET, NUMR, CREATET)


----------------------------------------

(17) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[NUMR]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT -> 1 / 2 : Leaf || 1 / 2 : Node(createT, numR, createT)
   numR -> 1 / 2 : 0 || 1 / 2 : s(numR)

The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 2 : Leaf || 1 / 2 : Node(CREATET, numR, CREATET)


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The ADP Problem has the following rules with annotations:

   CREATET -> 1 / 2 : Leaf || 1 / 2 : Node(CREATET, numR, CREATET)


----------------------------------------

(21) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   CREATET -> 1 / 2 : Leaf || 1 / 2 : Node(CREATET, numR, CREATET)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CREATET) = 2
   POL(Leaf) = 0
   POL(Node(x_1, x_2, x_3)) = 0
   POL(numR) = 0

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The set of rules with active return value flag is empty.
The set of rules with annotations is empty.

----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(24)
YES
