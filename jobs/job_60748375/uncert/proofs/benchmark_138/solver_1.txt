AST
proof of /home/ff862203/input_MVRJXeD4oM.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPReductionPairProof [EQUIVALENT, 18 ms]
        (9) ADP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) ADP
        (13) AST_ADPReductionPairProof [EQUIVALENT, 19 ms]
        (14) ADP
        (15) PisEmptyProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) ADP
        (18) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) AST_ADPReductionPairProof [EQUIVALENT, 17 ms]
        (21) ADP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

and uses the full rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
none
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

And Q contains the following terms:
none

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A non-duplicating PQTRS (R,Q) is AST iff ADP(R) is AST (Chain-Criterion) (!PROTOTYPE!) .
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The ADP Problem has the following rules with annotations:

   LOOP1(y) -> 1 / 2 : LOOP1(DOUBLE(y)) || 1 / 2 : LOOP2(DOUBLE(y))
   LOOP1(y) -> 2 / 3 : LOOP1(TRIPLE(y)) || 1 / 3 : LOOP2(TRIPLE(y))
   DOUBLE(0) -> 1 : 0
   LOOP2(s(y)) -> 1 : LOOP2(y)
   TRIPLE(s(y)) -> 1 : s(s(s(DOUBLE(y))))
   TRIPLE(0) -> 1 : 0
   DOUBLE(s(y)) -> 1 : s(s(DOUBLE(y)))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The ADP Problem has the following rules with annotations:

   LOOP2(s(y)) -> 1 : LOOP2(y)


----------------------------------------

(8) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   LOOP2(s(y)) -> 1 : LOOP2(y)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LOOP2(x_1)) = 2*x_1
   POL(double(x_1)) = 2*x_1
   POL(loop1(x_1)) = 1
   POL(loop2(x_1)) = 0
   POL(s(x_1)) = 2 + x_1
   POL(triple(x_1)) = 2 + 2*x_1

----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The set of rules with annotations is empty.

----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The ADP Problem has the following rules with annotations:

   DOUBLE(s(y)) -> 1 : s(s(DOUBLE(y)))


----------------------------------------

(13) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   DOUBLE(s(y)) -> 1 : s(s(DOUBLE(y)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(DOUBLE(x_1)) = 2*x_1
   POL(double(x_1)) = 2*x_1
   POL(loop1(x_1)) = 1
   POL(loop2(x_1)) = 0
   POL(s(x_1)) = 2 + x_1
   POL(triple(x_1)) = 2 + 2*x_1

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The set of rules with annotations is empty.

----------------------------------------

(15) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The ADP Problem has the following rules with annotations:

   LOOP1(y) -> 2 / 3 : LOOP1(TRIPLE(y)) || 1 / 3 : LOOP2(TRIPLE(y))
   LOOP1(y) -> 1 / 2 : LOOP1(DOUBLE(y)) || 1 / 2 : LOOP2(DOUBLE(y))


----------------------------------------

(18) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[LOOP2(triple(y)), DOUBLE(y), TRIPLE(y), LOOP2(double(y))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The ADP Problem has the following rules with annotations:

   LOOP1(y) -> 2 / 3 : LOOP1(triple(y)) || 1 / 3 : loop2(triple(y))
   LOOP1(y) -> 1 / 2 : LOOP1(double(y)) || 1 / 2 : loop2(double(y))


----------------------------------------

(20) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   LOOP1(y) -> 2 / 3 : LOOP1(triple(y)) || 1 / 3 : loop2(triple(y))
   LOOP1(y) -> 1 / 2 : LOOP1(double(y)) || 1 / 2 : loop2(double(y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LOOP1(x_1)) = 1 + 2*x_1
   POL(double(x_1)) = 0
   POL(loop1(x_1)) = 2
   POL(loop2(x_1)) = 1
   POL(s(x_1)) = 0
   POL(triple(x_1)) = x_1

----------------------------------------

(21)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop1(y) -> 1 / 2 : loop1(double(y)) || 1 / 2 : loop2(double(y))
   loop1(y) -> 2 / 3 : loop1(triple(y)) || 1 / 3 : loop2(triple(y))
   double(0) -> 1 : 0
   loop2(s(y)) -> 1 : loop2(y)
   triple(s(y)) -> 1 : s(s(s(double(y))))
   triple(0) -> 1 : 0
   double(s(y)) -> 1 : s(s(double(y)))

The set of rules with annotations is empty.

----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(23)
YES
