AST
proof of /home/ff862203/input_aSU6dRWKTH.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPReductionPairProof [EQUIVALENT, 80 ms]
        (9) ADP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) ADP
        (13) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (14) ADP
        (15) AST_ADPReductionPairProof [EQUIVALENT, 51 ms]
        (16) ADP
        (17) PisEmptyProof [EQUIVALENT, 0 ms]
        (18) YES
    (19) ADP
        (20) AST_ADPReductionPairProof [EQUIVALENT, 67 ms]
        (21) ADP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

and uses the full rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
none
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

And Q contains the following terms:
none

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A non-duplicating PQTRS (R,Q) is AST iff ADP(R) is AST (Chain-Criterion) (!PROTOTYPE!) .
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))
   CREATET(xs) -> 1 : xs
   LESS_LEAVES(x, leaf) -> 1 : false
   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))
   CONCAT(leaf, y) -> 1 : y
   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(CONCAT(u, v), CONCAT(x, y))
   INIT -> 1 : LESS_LEAVES(CREATET(leaf), CREATET(leaf))
   LESS_LEAVES(leaf, tree(x, y)) -> 1 : true


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))


----------------------------------------

(8) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   CONCAT(tree(u, v), y) -> 1 : tree(u, CONCAT(v, y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CONCAT(x_1, x_2)) = x_1 + 2*x_1*x_2
   POL(concat(x_1, x_2)) = x_1 + x_1*x_2 + x_2
   POL(createT(x_1)) = 2 + x_1
   POL(false) = 0
   POL(init) = 1
   POL(leaf) = 0
   POL(less_leaves(x_1, x_2)) = 0
   POL(tree(x_1, x_2)) = 1 + 2*x_2
   POL(true) = 0

----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The set of rules with annotations is empty.

----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(CONCAT(u, v), CONCAT(x, y))


----------------------------------------

(13) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[CONCAT(u, v), CONCAT(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(concat(u, v), concat(x, y))


----------------------------------------

(15) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   LESS_LEAVES(tree(u, v), tree(x, y)) -> 1 : LESS_LEAVES(concat(u, v), concat(x, y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(LESS_LEAVES(x_1, x_2)) = x_1
   POL(concat(x_1, x_2)) = x_1 + x_2
   POL(createT(x_1)) = 2 + x_1
   POL(false) = 0
   POL(init) = 1
   POL(leaf) = 0
   POL(less_leaves(x_1, x_2)) = 0
   POL(tree(x_1, x_2)) = 1 + x_1 + x_2
   POL(true) = 0

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The set of rules with annotations is empty.

----------------------------------------

(17) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(18)
YES

----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The ADP Problem has the following rules with annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))


----------------------------------------

(20) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   CREATET(xs) -> 1 / 3 : xs || 1 / 3 : CREATET(tree(xs, leaf)) || 1 / 3 : CREATET(tree(leaf, xs))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(CREATET(x_1)) = 1
   POL(concat(x_1, x_2)) = x_2
   POL(createT(x_1)) = 2*x_1
   POL(false) = 0
   POL(init) = 1
   POL(leaf) = 0
   POL(less_leaves(x_1, x_2)) = 0
   POL(tree(x_1, x_2)) = 0
   POL(true) = 0

----------------------------------------

(21)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   createT(xs) -> 1 / 3 : xs || 1 / 3 : createT(tree(xs, leaf)) || 1 / 3 : createT(tree(leaf, xs))
   createT(xs) -> 1 : xs
   less_leaves(x, leaf) -> 1 : false
   concat(tree(u, v), y) -> 1 : tree(u, concat(v, y))
   concat(leaf, y) -> 1 : y
   less_leaves(tree(u, v), tree(x, y)) -> 1 : less_leaves(concat(u, v), concat(x, y))
   init -> 1 : less_leaves(createT(leaf), createT(leaf))
   less_leaves(leaf, tree(x, y)) -> 1 : true

The set of rules with annotations is empty.

----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(23)
YES
