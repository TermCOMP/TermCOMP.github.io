AST
proof of /home/ff862203/input_Ge9vlf2rUI.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) ToInnermostProof [EQUIVALENT, 0 ms]
(2) PTRS
(3) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(4) PQTRS
(5) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(18) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

and uses the full rewrite strategy.

----------------------------------------

(1) ToInnermostProof (EQUIVALENT)
Switched from non-innermost to innermost rewriting[FoSSaCS24].

The system is non-overlapping, left-linear and right-linear, so it is AST iff it is innermost AST.


----------------------------------------

(2)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

and uses the innermost rewrite strategy.

----------------------------------------

(3) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   f(x, b2), g, h(b1), a
----------------------------------------

(4)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

And Q contains the following terms:
   f(x0, b2), g, h(b1), a

----------------------------------------

(5) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   F(x, b2) -> 1 : A
   G -> 1 / 2 : b1 || 1 / 2 : b2
   H(b1) -> 1 : A
   A -> 1 : F(H(G), G)


----------------------------------------

(7) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   A -> 1 : F(H(G), G)
   F(x, b2) -> 1 : A
   H(b1) -> 1 : A


----------------------------------------

(9) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[G]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   A -> 1 : F(H(g), g)
   F(x, b2) -> 1 : A
   H(b1) -> 1 : A


----------------------------------------

(11) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule A -> 1 : F(H(g), g) at position [0,0] we obtained the following new ADPs :

   A -> 1 / 2 : F(H(b1), g) || 1 / 2 : F(H(b2), g)

and we added the following new probabilistic rules with active return value flag:

   a -> 1 / 2 : f(h(b1), g) || 1 / 2 : f(h(b2), g)

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : f(h(b1), g) || 1 / 2 : f(h(b2), g)
   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   F(x, b2) -> 1 : A
   H(b1) -> 1 : A
   A -> 1 / 2 : F(H(b1), g) || 1 / 2 : F(H(b2), g)


----------------------------------------

(13) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[H(b2)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : f(h(b1), g) || 1 / 2 : f(h(b2), g)
   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   F(x, b2) -> 1 : A
   A -> 1 / 2 : F(H(b1), g) || 1 / 2 : F(h(b2), g)
   H(b1) -> 1 : A


----------------------------------------

(15) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   A -> 1 / 2 : F(H(b1), g) || 1 / 2 : F(h(b2), g)

The remaining pairs can at least be oriented weakly:

   F(x, b2) -> 1 : A
   H(b1) -> 1 : A

Used ordering:  Polynomial interpretation [POLO]:

   POL(A) = 2
   POL(F(x_1, x_2)) = x_2
   POL(H(x_1)) = 2 + 2*x_1
   POL(a) = 0
   POL(b1) = 0
   POL(b2) = 2
   POL(f(x_1, x_2)) = 0
   POL(g) = 1
   POL(h(x_1)) = 0

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   a -> 1 / 2 : f(h(b1), g) || 1 / 2 : f(h(b2), g)
   f(x, b2) -> 1 : a
   g -> 1 / 2 : b1 || 1 / 2 : b2
   h(b1) -> 1 : a
   a -> 1 : f(h(g), g)

The ADP Problem has the following rules with annotations:

   F(x, b2) -> 1 : A
   H(b1) -> 1 : A


----------------------------------------

(17) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(18)
TRUE
