AST
proof of /home/ff862203/input_r3ePilbW10.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoQTRSProof [SOUND, 0 ms]
(2) QTRS
(3) AAECC Innermost [EQUIVALENT, 0 ms]
(4) QTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) QDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) AND
    (9) QDP
        (10) UsableRulesProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QReductionProof [EQUIVALENT, 0 ms]
        (13) QDP
        (14) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) NonInfProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   leq(0, x) -> 1 : true
   leq(s(x), s(y)) -> 1 : leq(x, y)
   leq(s(x), 0) -> 1 : false
   ifLoop(false, x, y) -> 1 : stop
   ifLoop(true, x, y) -> 1 : loop(s(x), y)
   loop(x, y) -> 1 : ifLoop(leq(x, y), x, y)

and uses the full rewrite strategy.

----------------------------------------

(1) PTRStoQTRSProof (SOUND)
A PTRS R is terminating if the TRS NonProb(R) is terminating
----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   leq(0, x) -> true
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   leq(s(x), 0) -> false
   ifLoop(false, x, y) -> stop
   leq(s(x), s(y)) -> leq(x, y)
   ifLoop(true, x, y) -> loop(s(x), y)

Q is empty.

----------------------------------------

(3) AAECC Innermost (EQUIVALENT)
We have applied [NOC,AAECCNOC] to switch to innermost. The TRS R 1 is 
   leq(s(x), 0) -> false
   leq(s(x), s(y)) -> leq(x, y)
   leq(0, x) -> true

The TRS R 2 is 
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   ifLoop(false, x, y) -> stop
   ifLoop(true, x, y) -> loop(s(x), y)

The signature Sigma is {loop_2, ifLoop_3, stop}
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   leq(0, x) -> true
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   leq(s(x), 0) -> false
   ifLoop(false, x, y) -> stop
   leq(s(x), s(y)) -> leq(x, y)
   ifLoop(true, x, y) -> loop(s(x), y)

The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, y) -> IFLOOP(leq(x, y), x, y)
   LOOP(x, y) -> LEQ(x, y)
   LEQ(s(x), s(y)) -> LEQ(x, y)
   IFLOOP(true, x, y) -> LOOP(s(x), y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   leq(s(x), 0) -> false
   ifLoop(false, x, y) -> stop
   leq(s(x), s(y)) -> leq(x, y)
   ifLoop(true, x, y) -> loop(s(x), y)

The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 1 less node.
----------------------------------------

(8)
Complex Obligation (AND)

----------------------------------------

(9)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   leq(s(x), 0) -> false
   ifLoop(false, x, y) -> stop
   leq(s(x), s(y)) -> leq(x, y)
   ifLoop(true, x, y) -> loop(s(x), y)

The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(10) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

R is empty.
The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(12) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)


----------------------------------------

(13)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEQ(s(x), s(y)) -> LEQ(x, y)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(14) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEQ(s(x), s(y)) -> LEQ(x, y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFLOOP(true, x, y) -> LOOP(s(x), y)
   LOOP(x, y) -> IFLOOP(leq(x, y), x, y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   loop(x, y) -> ifLoop(leq(x, y), x, y)
   leq(s(x), 0) -> false
   ifLoop(false, x, y) -> stop
   leq(s(x), s(y)) -> leq(x, y)
   ifLoop(true, x, y) -> loop(s(x), y)

The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFLOOP(true, x, y) -> LOOP(s(x), y)
   LOOP(x, y) -> IFLOOP(leq(x, y), x, y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   leq(s(x), 0) -> false
   leq(s(x), s(y)) -> leq(x, y)

The set Q consists of the following terms:

   leq(0, x0)
   loop(x0, x1)
   leq(s(x0), 0)
   ifLoop(false, x0, x1)
   leq(s(x0), s(x1))
   ifLoop(true, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   loop(x0, x1)
   ifLoop(false, x0, x1)
   ifLoop(true, x0, x1)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   IFLOOP(true, x, y) -> LOOP(s(x), y)
   LOOP(x, y) -> IFLOOP(leq(x, y), x, y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   leq(s(x), 0) -> false
   leq(s(x), s(y)) -> leq(x, y)

The set Q consists of the following terms:

   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(21) NonInfProof (EQUIVALENT)
The DP Problem is simplified using the Induction Calculus [NONINF] with the following steps:

Note that final constraints are written in bold face.



For Pair IFLOOP(true, x, y) -> LOOP(s(x), y) the following chains were created:
*We consider the chain LOOP(x2, x3) -> IFLOOP(leq(x2, x3), x2, x3), IFLOOP(true, x4, x5) -> LOOP(s(x4), x5) which results in the following constraint:

(1)    (IFLOOP(leq(x2, x3), x2, x3)=IFLOOP(true, x4, x5)  ==>  IFLOOP(true, x4, x5)_>=_LOOP(s(x4), x5))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (leq(x2, x3)=true  ==>  IFLOOP(true, x2, x3)_>=_LOOP(s(x2), x3))



We simplified constraint (2) using rule (V) (with possible (I) afterwards) using induction on leq(x2, x3)=true which results in the following new constraints:

(3)    (true=true  ==>  IFLOOP(true, 0, x12)_>=_LOOP(s(0), x12))

(4)    (leq(x15, x14)=true & (leq(x15, x14)=true  ==>  IFLOOP(true, x15, x14)_>=_LOOP(s(x15), x14))  ==>  IFLOOP(true, s(x15), s(x14))_>=_LOOP(s(s(x15)), s(x14)))



We simplified constraint (3) using rules (I), (II) which results in the following new constraint:

(5)    (IFLOOP(true, 0, x12)_>=_LOOP(s(0), x12))



We simplified constraint (4) using rule (VI) where we applied the induction hypothesis (leq(x15, x14)=true  ==>  IFLOOP(true, x15, x14)_>=_LOOP(s(x15), x14)) with sigma = [ ] which results in the following new constraint:

(6)    (IFLOOP(true, x15, x14)_>=_LOOP(s(x15), x14)  ==>  IFLOOP(true, s(x15), s(x14))_>=_LOOP(s(s(x15)), s(x14)))








For Pair LOOP(x, y) -> IFLOOP(leq(x, y), x, y) the following chains were created:
*We consider the chain IFLOOP(true, x6, x7) -> LOOP(s(x6), x7), LOOP(x8, x9) -> IFLOOP(leq(x8, x9), x8, x9) which results in the following constraint:

(1)    (LOOP(s(x6), x7)=LOOP(x8, x9)  ==>  LOOP(x8, x9)_>=_IFLOOP(leq(x8, x9), x8, x9))



We simplified constraint (1) using rules (I), (II), (III) which results in the following new constraint:

(2)    (LOOP(s(x6), x7)_>=_IFLOOP(leq(s(x6), x7), s(x6), x7))








To summarize, we get the following constraints P__>=_ for the following pairs.

*IFLOOP(true, x, y) -> LOOP(s(x), y)

*(IFLOOP(true, 0, x12)_>=_LOOP(s(0), x12))


*(IFLOOP(true, x15, x14)_>=_LOOP(s(x15), x14)  ==>  IFLOOP(true, s(x15), s(x14))_>=_LOOP(s(s(x15)), s(x14)))




*LOOP(x, y) -> IFLOOP(leq(x, y), x, y)

*(LOOP(s(x6), x7)_>=_IFLOOP(leq(s(x6), x7), s(x6), x7))








The constraints for P_> respective P_bound are constructed from P__>=_ where we just replace every occurence of "t _>=_ s" in P__>=_ by  "t > s" respective "t _>=_ c". Here c stands for the fresh constant used for P_bound. 

Using the following integer polynomial ordering the  resulting constraints can be solved 

Polynomial interpretation [NONINF]:

   POL(0) = 0
   POL(IFLOOP(x_1, x_2, x_3)) = -x_1 - x_2 + x_3
   POL(LOOP(x_1, x_2)) = -1 - x_1 + x_2
   POL(c) = -2
   POL(false) = 1
   POL(leq(x_1, x_2)) = 1
   POL(s(x_1)) = 1 + x_1
   POL(true) = 1


The following pairs  are in P_>:
   IFLOOP(true, x, y) -> LOOP(s(x), y)
The following pairs are in P_bound:
   IFLOOP(true, x, y) -> LOOP(s(x), y)
The following rules are usable:
   true -> leq(0, x)
   false -> leq(s(x), 0)
   leq(x, y) -> leq(s(x), s(y))

----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LOOP(x, y) -> IFLOOP(leq(x, y), x, y)

The TRS R consists of the following rules:

   leq(0, x) -> true
   leq(s(x), 0) -> false
   leq(s(x), s(y)) -> leq(x, y)

The set Q consists of the following terms:

   leq(0, x0)
   leq(s(x0), 0)
   leq(s(x0), s(x1))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
