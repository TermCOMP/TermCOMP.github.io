AST
proof of /home/ff862203/input_9J1sEribuV.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPReductionPairProof [EQUIVALENT, 46 ms]
(8) ADP
(9) PisEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   rw(x, 0) -> 1 : 0
   rw(0, y) -> 1 : 0
   rw(s(x), s(y)) -> 1 / 6 : rw(x, s(y)) || 1 / 6 : rw(s(x), y) || 1 / 2 : rw(s(s(x)), s(y)) || 1 / 6 : rw(s(x), s(s(y)))

and uses the full rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
none
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   rw(x, 0) -> 1 : 0
   rw(0, y) -> 1 : 0
   rw(s(x), s(y)) -> 1 / 6 : rw(x, s(y)) || 1 / 6 : rw(s(x), y) || 1 / 2 : rw(s(s(x)), s(y)) || 1 / 6 : rw(s(x), s(s(y)))

And Q contains the following terms:
none

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A non-duplicating PQTRS (R,Q) is AST iff ADP(R) is AST (Chain-Criterion) (!PROTOTYPE!) .
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rw(x, 0) -> 1 : 0
   rw(0, y) -> 1 : 0
   rw(s(x), s(y)) -> 1 / 6 : rw(x, s(y)) || 1 / 6 : rw(s(x), y) || 1 / 2 : rw(s(s(x)), s(y)) || 1 / 6 : rw(s(x), s(s(y)))

The ADP Problem has the following rules with annotations:

   RW(x, 0) -> 1 : 0
   RW(0, y) -> 1 : 0
   RW(s(x), s(y)) -> 1 / 6 : RW(x, s(y)) || 1 / 6 : RW(s(x), y) || 1 / 2 : RW(s(s(x)), s(y)) || 1 / 6 : RW(s(x), s(s(y)))


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rw(x, 0) -> 1 : 0
   rw(0, y) -> 1 : 0
   rw(s(x), s(y)) -> 1 / 6 : rw(x, s(y)) || 1 / 6 : rw(s(x), y) || 1 / 2 : rw(s(s(x)), s(y)) || 1 / 6 : rw(s(x), s(s(y)))

The ADP Problem has the following rules with annotations:

   RW(s(x), s(y)) -> 1 / 6 : RW(x, s(y)) || 1 / 6 : RW(s(x), y) || 1 / 2 : RW(s(s(x)), s(y)) || 1 / 6 : RW(s(x), s(s(y)))


----------------------------------------

(7) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   RW(s(x), s(y)) -> 1 / 6 : RW(x, s(y)) || 1 / 6 : RW(s(x), y) || 1 / 2 : RW(s(s(x)), s(y)) || 1 / 6 : RW(s(x), s(s(y)))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(RW(x_1, x_2)) = x_2
   POL(rw(x_1, x_2)) = 0
   POL(s(x_1)) = 2 + x_1

----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   rw(x, 0) -> 1 : 0
   rw(0, y) -> 1 : 0
   rw(s(x), s(y)) -> 1 / 6 : rw(x, s(y)) || 1 / 6 : rw(s(x), y) || 1 / 2 : rw(s(s(x)), s(y)) || 1 / 6 : rw(s(x), s(s(y)))

The set of rules with annotations is empty.

----------------------------------------

(9) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(10)
YES
