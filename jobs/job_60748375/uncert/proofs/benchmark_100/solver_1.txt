AST
proof of /home/ff862203/input_kV8AjrEftc.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) ToInnermostProof [EQUIVALENT, 0 ms]
(2) PTRS
(3) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(4) PQTRS
(5) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(6) ADP
(7) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(8) ADP
(9) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
(10) ADP
(11) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(12) ADP
(13) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(14) ADP
(15) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(16) ADP
(17) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(18) ADP
(19) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(20) ADP
(21) AST_ADPTransformationProof [EQUIVALENT, 0 ms]
(22) ADP
(23) AST_ADPUsableRulesProof [EQUIVALENT, 0 ms]
(24) ADP
(25) AST_ADPReductionPairProof [EQUIVALENT, 0 ms]
(26) ADP
(27) PisEmptyProof [EQUIVALENT, 0 ms]
(28) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

and uses the full rewrite strategy.

----------------------------------------

(1) ToInnermostProof (EQUIVALENT)
Switched from non-innermost to innermost rewriting[FoSSaCS24].

The system is non-overlapping, left-linear and right-linear, so it is AST iff it is innermost AST.


----------------------------------------

(2)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

and uses the innermost rewrite strategy.

----------------------------------------

(3) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
   loop(true), coin, eq(head, head), eq(tail, head), eq(head, tail), eq(tail, tail)
----------------------------------------

(4)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

And Q contains the following terms:
   loop(true), coin, eq(head, head), eq(tail, head), eq(head, tail), eq(tail, tail)

----------------------------------------

(5) PQTRStoADPProblemProof (EQUIVALENT)


A PQTRS (R,Q) is innermost AST iff ADP(R) is innermost AST (Chain-Criterion)[FLOPS24].
----------------------------------------

(6)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 : LOOP(EQ(COIN, COIN))
   COIN -> 1 / 2 : head || 1 / 2 : tail
   EQ(head, head) -> 1 : true
   EQ(tail, head) -> 1 : false
   EQ(head, tail) -> 1 : false
   EQ(tail, tail) -> 1 : true


----------------------------------------

(7) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 5 less nodes.
----------------------------------------

(8)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 : LOOP(EQ(COIN, COIN))


----------------------------------------

(9) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor [FLOPS24].
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[EQ(coin, coin), COIN]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(10)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   loop(true) -> 1 : loop(eq(coin, coin))
   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 : LOOP(eq(coin, coin))


----------------------------------------

(11) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 : LOOP(eq(coin, coin))


----------------------------------------

(13) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule LOOP(true) -> 1 : LOOP(eq(coin, coin)) at position [0,0] we obtained the following new ADPs :

   LOOP(true) -> 1 / 2 : LOOP(eq(head, coin)) || 1 / 2 : LOOP(eq(tail, coin))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 2 : LOOP(eq(head, coin)) || 1 / 2 : LOOP(eq(tail, coin))


----------------------------------------

(15) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule LOOP(true) -> 1 / 2 : LOOP(eq(head, coin)) || 1 / 2 : LOOP(eq(tail, coin)) at position [0,1] we obtained the following new ADPs :

   LOOP(true) -> 1 / 2 : LOOP(eq(tail, coin)) || 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(16)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 2 : LOOP(eq(tail, coin)) || 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail))


----------------------------------------

(17) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule LOOP(true) -> 1 / 2 : LOOP(eq(tail, coin)) || 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail)) at position [0,1] we obtained the following new ADPs :

   LOOP(true) -> 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail))

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(18)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   coin -> 1 / 2 : head || 1 / 2 : tail
   eq(head, head) -> 1 : true
   eq(tail, head) -> 1 : false
   eq(head, tail) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail))


----------------------------------------

(19) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(20)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(head, head) -> 1 : true
   eq(head, tail) -> 1 : false
   eq(tail, head) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail))


----------------------------------------

(21) AST_ADPTransformationProof (EQUIVALENT)
By rewriting [FLOPS24] for the rule LOOP(true) -> 1 / 4 : LOOP(eq(head, head)) || 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail)) at position [0] we obtained the following new ADPs :

   LOOP(true) -> 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail)) || 1 / 4 : LOOP(true)

and we added the following new probabilistic rules with active return value flag:
none

----------------------------------------

(22)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(head, head) -> 1 : true
   eq(head, tail) -> 1 : false
   eq(tail, head) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail)) || 1 / 4 : LOOP(true)


----------------------------------------

(23) AST_ADPUsableRulesProof (EQUIVALENT)


We use the usable rules processor [FLOPS24].
Hence, by the usable rules processor [FLOPS24] we can deactivate the flags for all non-usable rules [FROCOS05]
----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(head, tail) -> 1 : false
   eq(tail, head) -> 1 : false
   eq(tail, tail) -> 1 : true

The ADP Problem has the following rules with annotations:

   LOOP(true) -> 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail)) || 1 / 4 : LOOP(true)


----------------------------------------

(25) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor [FLOPS24].
The following pairs can be oriented strictly and we delete all annotations:

   LOOP(true) -> 1 / 4 : LOOP(eq(head, tail)) || 1 / 4 : LOOP(eq(tail, head)) || 1 / 4 : LOOP(eq(tail, tail)) || 1 / 4 : LOOP(true)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(LOOP(x_1)) = x_1
   POL(eq(x_1, x_2)) = x_1
   POL(false) = 0
   POL(head) = 0
   POL(tail) = 1
   POL(true) = 1

----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   eq(head, tail) -> 1 : false
   eq(tail, head) -> 1 : false
   eq(tail, tail) -> 1 : true

The set of rules with annotations is empty.

----------------------------------------

(27) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(28)
YES
