AST
proof of /home/ff862203/input_8Ck6ae1bCD.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


AST of the given PTRS could be proven:

(0) PTRS
(1) PTRStoPQTRSProof [EQUIVALENT, 0 ms]
(2) PQTRS
(3) PQTRStoADPProblemProof [EQUIVALENT, 0 ms]
(4) ADP
(5) AST_ADPDependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) ADP
        (8) AST_ADPReductionPairProof [EQUIVALENT, 65 ms]
        (9) ADP
        (10) PisEmptyProof [EQUIVALENT, 0 ms]
        (11) YES
    (12) ADP
        (13) AST_ADPReductionPairProof [EQUIVALENT, 63 ms]
        (14) ADP
        (15) PisEmptyProof [EQUIVALENT, 0 ms]
        (16) YES
    (17) ADP
        (18) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (19) ADP
        (20) AST_ADPReductionPairProof [EQUIVALENT, 76 ms]
        (21) ADP
        (22) PisEmptyProof [EQUIVALENT, 0 ms]
        (23) YES
    (24) ADP
        (25) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (26) ADP
        (27) AST_ADPReductionPairProof [EQUIVALENT, 64 ms]
        (28) ADP
        (29) PisEmptyProof [EQUIVALENT, 0 ms]
        (30) YES
    (31) ADP
        (32) AST_ADPReductionPairProof [EQUIVALENT, 70 ms]
        (33) ADP
        (34) PisEmptyProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) ADP
        (37) AST_ADPUsableTermsProof [EQUIVALENT, 0 ms]
        (38) ADP
        (39) AST_ADPReductionPairProof [EQUIVALENT, 69 ms]
        (40) ADP
        (41) PisEmptyProof [EQUIVALENT, 0 ms]
        (42) YES


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

and uses the full rewrite strategy.

----------------------------------------

(1) PTRStoPQTRSProof (EQUIVALENT)
Transformed PTRS into PQTRS. Q is:
none
----------------------------------------

(2)
Obligation:
Probabilistic Q term rewrite system:
The PQTRS has the following probabilistic rules:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

And Q contains the following terms:
none

----------------------------------------

(3) PQTRStoADPProblemProof (EQUIVALENT)


A non-duplicating PQTRS (R,Q) is AST iff ADP(R) is AST (Chain-Criterion) (!PROTOTYPE!) .
----------------------------------------

(4)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))
   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))
   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(PLUS(x, y), l))
   PLUS(0, y) -> 1 : y
   INIT -> 1 : SUM(CREATEL(nil))
   PLUS(s(x), y) -> 1 : s(PLUS(x, y))
   APP(nil, k) -> 1 : k
   APP(l, nil) -> 1 : l
   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)
   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(APP(l, SUM(cons(x, cons(y, k)))))
   SUM(cons(x, nil)) -> 1 : cons(x, nil)


----------------------------------------

(5) AST_ADPDependencyGraphProof (EQUIVALENT)


We use the dependency graph processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 6 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)


----------------------------------------

(8) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   ADDNUM(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : ADDNUM(s(x), xs)

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ADDNUM(x_1, x_2)) = 1 + 2*x_1 + 2*x_1*x_2 + 2*x_2
   POL(addNum(x_1, x_2)) = 0
   POL(app(x_1, x_2)) = x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(createL(x_1)) = 0
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = 2*x_2
   POL(s(x_1)) = 0
   POL(sum(x_1)) = 0

----------------------------------------

(9)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(10) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(11)
YES

----------------------------------------

(12)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))


----------------------------------------

(13) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   PLUS(s(x), y) -> 1 : s(PLUS(x, y))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(PLUS(x_1, x_2)) = 2*x_1 + 2*x_1*x_2
   POL(addNum(x_1, x_2)) = 0
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(createL(x_1)) = 0
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 1 + x_1
   POL(sum(x_1)) = 1

----------------------------------------

(14)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(15) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(16)
YES

----------------------------------------

(17)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(PLUS(x, y), l))


----------------------------------------

(18) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[PLUS(x, y)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(19)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(plus(x, y), l))


----------------------------------------

(20) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   SUM(cons(x, cons(y, l))) -> 1 : SUM(cons(plus(x, y), l))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1)) = 2*x_1
   POL(addNum(x_1, x_2)) = 1 + x_2
   POL(app(x_1, x_2)) = 2*x_1 + x_2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(createL(x_1)) = 2 + x_1
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 0
   POL(sum(x_1)) = 1

----------------------------------------

(21)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(22) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(23)
YES

----------------------------------------

(24)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : ADDNUM(0, xs) || 1 / 2 : CREATEL(ADDNUM(0, xs))


----------------------------------------

(25) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[ADDNUM(0, xs)]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(26)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))


----------------------------------------

(27) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   CREATEL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : CREATEL(addNum(0, xs))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(CREATEL(x_1)) = 1
   POL(addNum(x_1, x_2)) = 0
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 0
   POL(createL(x_1)) = 0
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 0
   POL(sum(x_1)) = 0

----------------------------------------

(28)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(29) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(30)
YES

----------------------------------------

(31)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))


----------------------------------------

(32) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   APP(cons(x, l), k) -> 1 : cons(x, APP(l, k))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(APP(x_1, x_2)) = 2*x_1 + 2*x_1*x_2
   POL(addNum(x_1, x_2)) = 1 + x_2
   POL(app(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(createL(x_1)) = 2 + x_1
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 0
   POL(sum(x_1)) = 1

----------------------------------------

(33)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(34) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(APP(l, SUM(cons(x, cons(y, k)))))


----------------------------------------

(37) AST_ADPUsableTermsProof (EQUIVALENT)


We use the usable terms processor  (!PROTOTYPE!) .
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] gives us the following unusable Terms: 
[APP(l, sum(cons(x, cons(y, k)))), SUM(cons(x, cons(y, k)))]
Hence, we can remove the annotations from these terms from every RHS of every ADP
----------------------------------------

(38)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The ADP Problem has the following rules with annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(app(l, sum(cons(x, cons(y, k)))))


----------------------------------------

(39) AST_ADPReductionPairProof (EQUIVALENT)


We use the reduction pair processor  (!PROTOTYPE!) .
The following pairs can be oriented strictly and we delete all annotations:

   SUM(app(l, cons(x, cons(y, k)))) -> 1 : SUM(app(l, sum(cons(x, cons(y, k)))))

The remaining pairs can at least be oriented weakly:
none

Used ordering:  Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(SUM(x_1)) = x_1
   POL(addNum(x_1, x_2)) = 1 + x_2
   POL(app(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(cons(x_1, x_2)) = 1 + x_2
   POL(createL(x_1)) = 2 + x_1
   POL(init) = 2
   POL(nil) = 0
   POL(plus(x_1, x_2)) = x_2
   POL(s(x_1)) = 0
   POL(sum(x_1)) = 1

----------------------------------------

(40)
Obligation:
Probabilistic ADP Problem:
The ADP Problem has the following rules with active return value flag:

   app(cons(x, l), k) -> 1 : cons(x, app(l, k))
   createL(xs) -> 1 / 2 : addNum(0, xs) || 1 / 2 : createL(addNum(0, xs))
   sum(cons(x, cons(y, l))) -> 1 : sum(cons(plus(x, y), l))
   plus(0, y) -> 1 : y
   init -> 1 : sum(createL(nil))
   plus(s(x), y) -> 1 : s(plus(x, y))
   app(nil, k) -> 1 : k
   app(l, nil) -> 1 : l
   addNum(x, xs) -> 1 / 2 : cons(x, xs) || 1 / 2 : addNum(s(x), xs)
   sum(app(l, cons(x, cons(y, k)))) -> 1 : sum(app(l, sum(cons(x, cons(y, k)))))
   sum(cons(x, nil)) -> 1 : cons(x, nil)

The set of rules with annotations is empty.

----------------------------------------

(41) PisEmptyProof (EQUIVALENT)
P contains no annotations anymore. Hence, there exists no infinite P-CT.
----------------------------------------

(42)
YES
