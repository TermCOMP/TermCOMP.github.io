SAST
proof of /home/ff862203/input_Z6V0hiM9Pl.ari
# AProVE Commit ID: 1c9e2a6453f9f0dca490585733f1cff3767d3e54 jan-christoph 20250828 unpublished


Complexity of the given CpxPTRS could be proven:

(0) CpxPTRS
(1) CpxPTRS_ToInnermostProof [BOTH BOUNDS(ID, ID), 0 ms]
(2) CpxPTRS
(3) CpxPTRS_DerivationToRuntimeComplexityProof [UNSOUND LOWER BOUND(ID)SOUND UPPER BOUND(ID), 0 ms]
(4) CpxPTRS
(5) CpxPTRS_DirectPoloProof [FINISHED, 0 ms]
(6) BOUNDS(1, EXP)


----------------------------------------

(0)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   walk(a) -> 1 : walk(b)
   walk(b) -> 1 / 2 : walk(a) || 1 / 2 : walk(c)

and uses the full rewrite strategy.

----------------------------------------

(1) CpxPTRS_ToInnermostProof (BOTH BOUNDS(ID, ID))
Switched from non-innermost to innermost rewriting[FoSSaCS24].

The system is non-overlapping, left-linear and right-linear, so its complexity is the same as its innermost complexity.


----------------------------------------

(2)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   walk(a) -> 1 : walk(b)
   walk(b) -> 1 / 2 : walk(a) || 1 / 2 : walk(c)

and uses the innermost rewrite strategy.

----------------------------------------

(3) CpxPTRS_DerivationToRuntimeComplexityProof (UNSOUND LOWER BOUND(ID)SOUND UPPER BOUND(ID))
The following rules have been added to R to convert the given derivational complexity problem to a runtime complexity problem:

   encArg(b) -> 1 : b
   encArg(c) -> 1 : c
   encArg(a) -> 1 : a
   encArg(cons_walk(x_1)) -> 1 : walk(encArg(x_1))
   encode_walk(x_1) -> 1 : walk(encArg(x_1))
   encode_b -> 1 : b
   encode_c -> 1 : c
   encode_a -> 1 : a


----------------------------------------

(4)
Obligation:
Probabilistic term rewrite system:
The TRS has the following probabilistic rules:

   encArg(b) -> 1 : b
   encArg(c) -> 1 : c
   encArg(a) -> 1 : a
   encArg(cons_walk(x_1)) -> 1 : walk(encArg(x_1))
   encode_walk(x_1) -> 1 : walk(encArg(x_1))
   encode_b -> 1 : b
   encode_c -> 1 : c
   encode_a -> 1 : a
   walk(a) -> 1 : walk(b)
   walk(b) -> 1 / 2 : walk(a) || 1 / 2 : walk(c)

and uses the innermost rewrite strategy.

----------------------------------------

(5) CpxPTRS_DirectPoloProof (FINISHED)


We use the direct application of polynomial interpretations [ADY19].
Using the following Interpretation: 
Resulting in the following upper complexity bound: EXPPolynomial interpretation [POLO]:

   POL(a) = 4
   POL(b) = 3
   POL(c) = 0
   POL(cons_walk(x_1)) = 10 + 8*x_1
   POL(encArg(x_1)) = 1 + x_1
   POL(encode_a) = 5
   POL(encode_b) = 9
   POL(encode_c) = 5
   POL(encode_walk(x_1)) = 10 + 8*x_1
   POL(walk(x_1)) = 8*x_1

----------------------------------------

(6)
BOUNDS(1, EXP)
