[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
[Info] pool sizes (success) 1 seen 1 todo
 @(pure-matchbox-1.1-76efd0ca7ed81445e0700c76a09ee684727edfd56408cc0b27b65ea5a40ad6b4:Matchbox.Closure.Simple src/Matchbox/Closure/Simple.hs:236:10)
last 478 length 2137
last 529 length 2554
CNF 529 vars 2554 clauses
last 752 length 3549
CNF 478 vars 2137 clauses
last 516 length 2369
CNF 516 vars 2369 clauses
CNF 752 vars 3549 clauses
last 516 length 2369
last 529 length 2554
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1516, clauses: 6083
CNF 516 vars 2369 clauses
last 1835 length 9301
last 1287 length 6088
CNF 529 vars 2554 clauses
last 1516 length 6083
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10808, clauses: 45113
CNF 1835 vars 9301 clauses
last 11560 length 71693
CNF 1287 vars 6088 clauses
last 13694 length 103871
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 7100
CNF 1516 vars 6083 clauses
last 10808 length 45113
last 1835 length 7100
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1516, clauses: 6083, status: Unsatisfied, time: 0.364352628s
CNF 11560 vars 71693 clauses
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13510, clauses: 56024
CNF 13694 vars 103871 clauses
CNF 10808 vars 45113 clauses
CNF 1835 vars 7100 clauses
last 13510 length 56024
Matrix {monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 1835, clauses: 7100, status: Satisfied, time: 0.23993911s
Matrix {monotone = Strict, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10808, clauses: 45113, status: Satisfied, time: 0.28429696s
CNF 13510 vars 56024 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 1 weak rules on 2 letters       tile all, by Config   { method = All,width = 2,unlabel = Never}
SRS with 4 strict rules and 4 weak rules on 4 letters       weights
SRS with 1 strict rules and 3 weak rules on 4 letters       Matrix   { monotone = Strict, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 3 weak rules on 3 letters       no strict rules

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b, b, a] -> [] {- Input 0 -}
  [] ->= [a, a, b, a] {- Input 1 -}
reason
  Tiling   { method = All, width = 2, state_type = Bit64, map_type = Enum, unlabel = Never, print_completion_steps = False, print_tiles = False, max_num_tiles = Just 10000, max_num_rules = Just 100000, verbose = False, tracing = False, draw = False, cpf = False}
  steps 2
  using all tiles
  tile all rules
  steps: 2

   property Termination
has value Just True
for SRS
  [[a, a], [a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ a , a ] ] {- Semlab 0 (Concon 0 (Input 0)) -}
  [[a, a], [a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ a , b ] ] {- Semlab 0 (Concon 1 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b], [b, a], [a, a]] -> [ [ b , a ] ] {- Semlab 1 (Concon 0 (Input 0)) -}
  [[b, a], [a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
  [[b, b]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 1 (Concon 1 (Input 1)) -}
reason
  ([a, a], 0/1)
  ([a, b], 0/1)
  ([b, a], 0/1)
  ([b, b], 1/1)
   property Termination
has value Just True
for SRS
  [[b, a], [a, a], [a, b], [b, b], [b, a], [a, b]] -> [ [ b , b ] ] {- Semlab 1 (Concon 1 (Input 0)) -}
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
reason
  ( [a, a]
  , St (Corner  / 1 0 0 \
                | 0 0 0 |
                \ 0 0 1 /) )
  ( [a, b]
  , St (Corner  / 1 0 0 \
                | 0 1 4 |
                \ 0 0 1 /) )
  ( [b, a]
  , St (Corner  / 1 0 0 \
                | 0 1 0 |
                \ 0 0 1 /) )
  ( [b, b]
  , St (Corner  / 1 1 7 \
                | 0 0 0 |
                \ 0 0 1 /) )
   property Termination
has value Just True
for SRS
  [[a, a]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 0 (Concon 0 (Input 1)) -}
  [[a, b]] ->= [ [a, a] , [a, a] , [a, b] , [b, a] , [a, b] ] {- Semlab 0 (Concon 1 (Input 1)) -}
  [[b, a]] ->= [ [b, a] , [a, a] , [a, b] , [b, a] , [a, a] ] {- Semlab 1 (Concon 0 (Input 1)) -}
reason
  no strict rules

**************************************************
skeleton: (1/1,2)\TileAllAll{2}(4/4,4)\Weight(1/3,4)\Matrix{\Natural}{3}(0/3,3)[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.745703545000
  min duration 0.014214605000
  total durat. 1.752084790000
Fail : "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing = False\n , verbose = False}"
  total number 5
  max duration 0.765196627000
  min duration 0.016208670000
  total durat. 1.550241626000
**************************************************
F                Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F                [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F                = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
F                = 1 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 4 , total_length
F                = 25} , self = 82 , parent = Nothing , duration = 0.487258182000 , status
F                = Fail , start = 2025-09-04 08:27:27.35448049 UTC , finish = 2025-09-04
F                08:27:27.841738672 UTC , thread_cap_info = ("ThreadId 142", 3, False)}
F                
| F              Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F              [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F              = False\n , verbose = False}" , input_size = Size { num_rules = 4 , num_strict_rules
| F              = 1 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size = 4 , total_length
| F              = 25} , self = 81 , parent = Nothing , duration = 0.288409927000 , status
| F              = Fail , start = 2025-09-04 08:27:27.354481905 UTC , finish = 2025-09-04
| F              08:27:27.642891832 UTC , thread_cap_info = ("ThreadId 143", 3, False)}
| F              
| | S            Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | S            = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | S            = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | S            , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | S            \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | S            , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | S            , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | S            = 2 , total_length = 26} , self = 89 , parent = Nothing , duration = 0.809173647000
| | S            , status = Success , start = 2025-09-04 08:27:27.356862744 UTC , finish
| | S            = 2025-09-04 08:27:28.166036391 UTC , thread_cap_info = ("ThreadId 146",
| | S            1, False)}
| | S            
| | | F          Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
| | | F          = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| | | F          = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| | | F          , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | F          \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | F          , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | F          , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | F          = 2 , total_length = 26} , self = 85 , parent = Nothing , duration = 0.610645796000
| | | F          , status = Fail , start = 2025-09-04 08:27:27.361868715 UTC , finish =
| | | F          2025-09-04 08:27:27.972514511 UTC , thread_cap_info = ("ThreadId 148",
| | | F          1, False)}
| | | F          
| | | | F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | F        = False\n , verbose = False}" , input_size = Size { num_rules = 33 , num_strict_rules
| | | | F        = 1 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 13 , total_length
| | | | F        = 265} , self = 86 , parent = Nothing , duration = 0.745703545000 , status
| | | | F        = Fail , start = 2025-09-04 08:27:27.376212334 UTC , finish = 2025-09-04
| | | | F        08:27:28.121915879 UTC , thread_cap_info = ("ThreadId 155", 3, False)}
| | | | F        
| | | | | F      Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | F      = False\n , verbose = False}" , input_size = Size { num_rules = 33 , num_strict_rules
| | | | | F      = 1 , num_top_rules = 0 , num_weak_rules = 32 , alphabet_size = 13 , total_length
| | | | | F      = 265} , self = 87 , parent = Nothing , duration = 0.765196627000 , status
| | | | | F      = Fail , start = 2025-09-04 08:27:27.376216429 UTC , finish = 2025-09-04
| | | | | F      08:27:28.141413056 UTC , thread_cap_info = ("ThreadId 157", 3, False)}
| | | | | F      
| | | | | | F    Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | F    = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | F    = 2 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | F    = 66} , self = 83 , parent = Nothing , duration = 0.479633264000 , status
| | | | | | F    = Fail , start = 2025-09-04 08:27:27.440289111 UTC , finish = 2025-09-04
| | | | | | F    08:27:27.919922375 UTC , thread_cap_info = ("ThreadId 161", 1, False)}
| | | | | | F    
| | | | | | | F  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | | | | | | F  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | | | | | | F  = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| | | | | | | F  = 2 , num_top_rules = 0 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| | | | | | | F  = 66} , self = 84 , parent = Nothing , duration = 0.459430425000 , status
| | | | | | | F  = Fail , start = 2025-09-04 08:27:27.462709419 UTC , finish = 2025-09-04
| | | | | | | F  08:27:27.922139844 UTC , thread_cap_info = ("ThreadId 163", 1, False)}
| | | | | | | F  
| F | | | | | |  
| E | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| E | | | | | |  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| E | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| E | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| E | | | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size
| E | | | | | |  = 4 , total_length = 25} , self = 92 , parent = Nothing , duration = 0.536052337000
| E | | | | | |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:27.659898339
| E | | | | | |  UTC , finish = 2025-09-04 08:27:28.195950676 UTC , thread_cap_info = ("ThreadId
| E | | | | | |  166", 3, False)}
| E | | | | | |  
F | | | | | | |  
S | | | | | | |  Info { what = "Matrix\n { monotone = Strict\n , domain = Natural\n , method
S | | | | | | |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
S | | | | | | |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
S | | | | | | |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
S | | | | | | |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
S | | | | | | |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
S | | | | | | |  , num_strict_rules = 1 , num_top_rules = 0 , num_weak_rules = 3 , alphabet_size
S | | | | | | |  = 4 , total_length = 25} , self = 88 , parent = Nothing , duration = 0.320877930000
S | | | | | | |  , status = Success , start = 2025-09-04 08:27:27.841783385 UTC , finish
S | | | | | | |  = 2025-09-04 08:27:28.162661315 UTC , thread_cap_info = ("ThreadId 169",
S | | | | | | |  3, False)}
S | | | | | | |  
| | | | | | F |  
| | | | | |   F  
| | | F | |      
| | | E | |      Info { what = "Matrix\n { monotone = Strict\n , domain = ArcticBZ\n , method
| | | E | |      = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E | |      = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E | |      , dim = 4\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E | |      \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E | |      , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 4
| | | E | |      , num_strict_rules = 2 , num_top_rules = 0 , num_weak_rules = 2 , alphabet_size
| | | E | |      = 2 , total_length = 26} , self = 95 , parent = Nothing , duration = 0.223553399000
| | | E | |      , status = Except "AsyncCancelled" , start = 2025-09-04 08:27:27.972544954
| | | E | |      UTC , finish = 2025-09-04 08:27:28.196098353 UTC , thread_cap_info = ("ThreadId
| | | E | |      175", 1, False)}
| | | E | |      
| | | | F |      
| | | |   F      
S | | |          
  | S |          
  E   |          
      E          
