last 10594 length 45051
CNF 10594 vars 45051 clauses
last 13158 length 56471
CNF 13158 vars 56471 clauses
last 995 length 4001
CNF 995 vars 4001 clauses
last 1197 length 4911
last 1043 length 4299
last 1057 length 4239
CNF 1197 vars 4911 clauses
CNF 1043 vars 4299 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2840, clauses: 10347
CNF 1057 vars 4239 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3145, clauses: 11524
last 2840 length 10347
last 3145 length 11524
CNF 3145 vars 11524 clauses
CNF 2840 vars 10347 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 3145, clauses: 11524, status: Satisfied, time: 0.082881602s
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2840, clauses: 10347, status: Satisfied, time: 0.087481534s
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10512, clauses: 44039
last 10512 length 44039
**************************************************
summary
**************************************************
SRS with 3 strict rules and 4 weak rules on 3 letters       cleaner
SRS with 3 strict rules and 3 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       mirror
SRS with 6 rules on 3 letters       DP
SRS with 11 strict rules and 6 weak rules on 6 letters       weights
SRS with 4 strict rules and 6 weak rules on 5 letters       EDG
SRS with 3 strict rules and 6 weak rules on 5 letters       Matrix   { monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 1 strict rules and 6 weak rules on 5 letters       weights
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, c] {- Input 0 -}
  [c, c, b] -> [b, b, c] {- Input 1 -}
  [c, a, a] -> [c, a, c] {- Input 2 -}
  [b, b, c] ->= [b, a, c] {- Input 3 -}
  [a, b, a] ->= [a, b, c] {- Input 4 -}
  [c, a, c] ->= [c, b, a] {- Input 5 -}
  [a, a, b] ->= [a, a, b] {- Input 6 -}
reason
  cleaner
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, c] {- Input 0 -}
  [c, c, b] -> [b, b, c] {- Input 1 -}
  [c, a, a] -> [c, a, c] {- Input 2 -}
  [b, b, c] ->= [b, a, c] {- Input 3 -}
  [a, b, a] ->= [a, b, c] {- Input 4 -}
  [c, a, c] ->= [c, b, a] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [a, a, b] -> [a, c, c] {- Input 0 -}
  [c, c, b] -> [b, b, c] {- Input 1 -}
  [c, a, a] -> [c, a, c] {- Input 2 -}
  [b, b, c] -> [b, a, c] {- Strictified (Input 3) -}
  [a, b, a] -> [a, b, c] {- Strictified (Input 4) -}
  [c, a, c] -> [c, b, a] {- Strictified (Input 5) -}
reason
  mirror
   property Termination
has value Just True
for SRS
  [b, a, a] -> [c, c, a] {- Mirror (Input 0) -}
  [b, c, c] -> [c, b, b] {- Mirror (Input 1) -}
  [a, a, c] -> [c, a, c] {- Mirror (Input 2) -}
  [c, b, b] -> [c, a, b] {- Mirror (Strictified (Input 3)) -}
  [a, b, a] -> [c, b, a] {- Mirror (Strictified (Input 4)) -}
  [c, a, c] -> [a, b, c] {- Mirror (Strictified (Input 5)) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, b, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, a, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b#, a, a] |-> [c#, a] {- DP (Top 1) (Mirror (Input 0)) -}
  [b#, a, a] |-> [c#, c, a] {- DP (Top 0) (Mirror (Input 0)) -}
  [b#, c, c] |-> [b#] {- DP (Top 2) (Mirror (Input 1)) -}
  [b#, c, c] |-> [b#, b] {- DP (Top 1) (Mirror (Input 1)) -}
  [b#, c, c] |-> [c#, b, b] {- DP (Top 0) (Mirror (Input 1)) -}
  [c#, a, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, a, c] |-> [b#, c] {- DP (Top 1) (Mirror (Strictified (Input 5))) -}
  [c#, b, b] |-> [a#, b] {- DP (Top 1) (Mirror (Strictified (Input 3))) -}
  [c#, b, b] |-> [c#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
reason
  (a, 3/1)
  (b, 3/1)
  (c, 3/1)
  (a#, 1/1)
  (b#, 2/1)
  (c#, 1/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, b, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
  [a#, a, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [a#, b, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [c#, a, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [c#, b, b] |-> [c#, a, b] {- DP (Top 0) (Mirror (Strictified (Input 3))) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, a, c] |-> [c#, a, c] {- DP (Top 0) (Mirror (Input 2)) -}
  [c#, a, c] |-> [a#, b, c] {- DP (Top 0) (Mirror (Strictified (Input 5))) -}
  [a#, b, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b, a, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, b, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  ( a
  , Wk  / 6A 6A 6A - \
        | 3A 3A 3A - |
        | 3A 3A 3A - |
        \ -  -  -  - / )
  ( b
  , Wk  / 3A 3A 3A - \
        | 3A 3A 3A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( c
  , Wk  / 3A 6A 6A - \
        | 3A 3A 6A - |
        | 0A 3A 3A - |
        \ -  -  -  - / )
  ( a#
  , Wk  / 7A 7A 7A - \
        | 7A 7A 7A - |
        | 7A 7A 7A - |
        \ -  -  -  - / )
  ( c#
  , Wk  / 5A 7A 7A - \
        | 5A 7A 7A - |
        | 5A 7A 7A - |
        \ -  -  -  - / )
   property Termination
has value Just True
for SRS
  [a#, b, a] |-> [c#, b, a] {- DP (Top 0) (Mirror (Strictified (Input 4))) -}
  [b, a, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, b, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  (a, 0/1)
  (b, 0/1)
  (c, 0/1)
  (a#, 1/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [b, a, a] ->= [c, c, a] {- DP Nontop (Mirror (Input 0)) -}
  [b, c, c] ->= [c, b, b] {- DP Nontop (Mirror (Input 1)) -}
  [a, a, c] ->= [c, a, c] {- DP Nontop (Mirror (Input 2)) -}
  [c, b, b] ->= [c, a, b] {- DP Nontop (Mirror (Strictified (Input 3))) -}
  [a, b, a] ->= [c, b, a] {- DP Nontop (Mirror (Strictified (Input 4))) -}
  [c, a, c] ->= [a, b, c] {- DP Nontop (Mirror (Strictified (Input 5))) -}
reason
  EDG

**************************************************
skeleton: (3/4,3)\Cleaner(3/3,3)\Strictify\Mirror(6,3)\Deepee(11/6,6)\Weight(4/6,5)\EDG(3/6,5)\Matrix{\Arctic}{3}(1/6,5)\Weight(0/6,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Fail : "Matchbound\n { method = RFC\n , implementation = Exact\n , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf = False}"
  total number 3
  max duration 1.011430420000
  min duration 0.027261674000
  total durat. 1.439406182000
  Info
    { what = "Matchbound\n  { method = RFC\n  , implementation = Exact\n  , cpf_state_encoding = Encoding   { base = 10, order = MSB_First}\n  , max_size = Just 10000\n  , max_height = Just 5\n  , initial = Paths\n  , verbose = False\n  , tracing = False\n  , draw = False\n  , cpf = False}"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 70
    , parent = Nothing
    , duration = 1.011430420000
    , status = Fail
    , start = 2025-09-04 08:20:47.349202958 UTC
    , finish = 2025-09-04 08:20:48.360633378 UTC
    , thread_cap_info = ("ThreadId 108", 0, False)}
**************************************************
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
F          = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
F          = 432} , self = 69 , parent = Nothing , duration = 0.569990546000 , status
F          = Fail , start = 2025-09-04 08:20:47.33450402 UTC , finish = 2025-09-04
F          08:20:47.904494566 UTC , thread_cap_info = ("ThreadId 98", 1, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F        = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F        = 432} , self = 66 , parent = Nothing , duration = 0.362160880000 , status
| F        = Fail , start = 2025-09-04 08:20:47.348555075 UTC , finish = 2025-09-04
| F        08:20:47.710715955 UTC , thread_cap_info = ("ThreadId 100", 1, False)}
| F        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 6 , num_strict_rules = 6 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 36} , self = 70 , parent = Nothing
| | F      , duration = 1.011430420000 , status = Fail , start = 2025-09-04 08:20:47.349202958
| | F      UTC , finish = 2025-09-04 08:20:48.360633378 UTC , thread_cap_info = ("ThreadId
| | F      108", 0, False)}
| | F      
| | | F    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | F    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | F    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | F    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | F    = Size { num_rules = 54 , num_strict_rules = 54 , num_top_rules = 0 , num_weak_rules
| | | F    = 0 , alphabet_size = 9 , total_length = 432} , self = 67 , parent = Nothing
| | | F    , duration = 0.400714088000 , status = Fail , start = 2025-09-04 08:20:47.428524788
| | | F    UTC , finish = 2025-09-04 08:20:47.829238876 UTC , thread_cap_info = ("ThreadId
| | | F    118", 0, False)}
| | | F    
| | | | F  Info { what = "Matchbound\n { method = RFC\n , implementation = Approximate
| | | | F  { at_bound = Merge}\n , cpf_state_encoding = Encoding { base = 10, order
| | | | F  = MSB_First}\n , max_size = Nothing\n , max_height = Just 6\n , initial
| | | | F  = Paths\n , verbose = False\n , tracing = False\n , draw = False\n , cpf
| | | | F  = False}" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
| | | | F  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| | | | F  = 36} , self = 68 , parent = Nothing , duration = 0.149287338000 , status
| | | | F  = Fail , start = 2025-09-04 08:20:47.708552556 UTC , finish = 2025-09-04
| | | | F  08:20:47.857839894 UTC , thread_cap_info = ("ThreadId 124", 1, False)}
| | | | F  
| F | | |  
|   | F |  
|   |   F  
F   |      
    F      
F          Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
F          [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
F          = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
F          = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
CNF 10512 vars 44039 clauses
F          = 48} , self = 87 , parent = Nothing , duration = 0.205912990000 , status
F          = Fail , start = 2025-09-04 08:20:48.363103567 UTC , finish = 2025-09-04
F          08:20:48.569016557 UTC , thread_cap_info = ("ThreadId 139", 0, False)}
F          
| F        Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 8 , num_strict_rules
| F        = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size = 4 , total_length
| F        = 48} , self = 84 , parent = Nothing , duration = 0.141037272000 , status
| F        = Fail , start = 2025-09-04 08:20:48.369005556 UTC , finish = 2025-09-04
| F        08:20:48.510042828 UTC , thread_cap_info = ("ThreadId 140", 0, False)}
| F        
| F        
| S        Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| S        [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| S        , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| S        = 8 , num_strict_rules = 2 , num_top_rules = 2 , num_weak_rules = 6 , alphabet_size
| S        = 4 , total_length = 48} , self = 89 , parent = Nothing , duration = 0.137684945000
| S        , status = Success , start = 2025-09-04 08:20:48.515792192 UTC , finish
| S        = 2025-09-04 08:20:48.653477137 UTC , thread_cap_info = ("ThreadId 147",
| S        0, False)}
| S        
| | S      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | S      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | S      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | S      = 9 , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | S      = 5 , total_length = 54} , self = 88 , parent = Nothing , duration = 0.109934628000
| | S      , status = Success , start = 2025-09-04 08:20:48.539614866 UTC , finish
| | S      = 2025-09-04 08:20:48.649549494 UTC , thread_cap_info = ("ThreadId 149",
| | S      0, False)}
| | S      
| | | E    Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | E    = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | E    = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | E    , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | E    \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | E    , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 9
| | | E    , num_strict_rules = 3 , num_top_rules = 3 , num_weak_rules = 6 , alphabet_size
| | | E    = 5 , total_length = 54} , self = 92 , parent = Nothing , duration = 0.168995961000
| | | E    , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:48.566202731
| | | E    UTC , finish = 2025-09-04 08:20:48.735198692 UTC , thread_cap_info = ("ThreadId
| | | E    150", 0, False)}
| | | E    
F | | |    
  | S |    
  S   |    
      E    
