last 9651 length 41181
CNF 9651 vars 41181 clauses
last 11700 length 49948
CNF 11700 vars 49948 clauses
last 888 length 3593
CNF 888 vars 3593 clauses
last 848 length 3373
last 1418 length 5691
CNF 848 vars 3373 clauses
CNF 1418 vars 5691 clauses
last 1554 length 6301
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2651, clauses: 9519
last 2651 length 9519
CNF 1554 vars 6301 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4274, clauses: 15825
CNF 2651 vars 9519 clauses
last 4274 length 15825
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10464, clauses: 43833
last 10464 length 43833
CNF 4274 vars 15825 clauses
CNF 10464 vars 43833 clauses
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 13686, clauses: 57299
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 2651, clauses: 9519, status: Unsatisfied, time: 0.265142376s
last 13686 length 57299
CNF 13686 vars 57299 clauses
Matrix {monotone = Weak, domain = Arctic, method = QPI, shape = Full, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 4274, clauses: 15825, status: Unsatisfied, time: 0.492161933s
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 6336, clauses: 25750
last 6336 length 25750
Matrix {monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 10464, clauses: 43833, status: Satisfied, time: 0.320156347s
CNF 6336 vars 25750 clauses
Matrix {monotone = Weak, domain = Natural, method = Direct, shape = Cornered, bits = 3, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Binary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1,Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False} vars: 8431, clauses: 34404
last 8431 length 34404
CNF 8431 vars 34404 clauses
**************************************************
summary
**************************************************
SRS with 1 strict rules and 5 weak rules on 3 letters       strictify
SRS with 6 rules on 3 letters       DP
SRS with 10 strict rules and 6 weak rules on 5 letters       weights
SRS with 3 strict rules and 6 weak rules on 5 letters       EDG
SRS with 1 strict rules and 6 weak rules on 4 letters       Matrix   { monotone = Weak, domain = ArcticBZ, method = Direct, shape = Cornered, bits = 4, compress = True, remove = Any, constraint = And [], minimize = Nothing, encoding = Ersatz_Unary, dim = 3, solver = Stats (Kissatapi [Option "quiet" 1, Configuration "sat"]), verbose = False, tracing = False, briefing = False, log_level = 1, draw = False}
SRS with 0 strict rules and 6 weak rules on 3 letters       EDG

**************************************************
proof
**************************************************
property Termination
has value Just True
for SRS
  [c, a, a] -> [a, c, a] {- Input 0 -}
  [a, b, a] ->= [b, c, c] {- Input 1 -}
  [a, b, b] ->= [b, b, a] {- Input 2 -}
  [a, b, c] ->= [a, a, a] {- Input 3 -}
  [a, c, a] ->= [b, b, b] {- Input 4 -}
  [a, b, b] ->= [c, c, b] {- Input 5 -}
reason
  strictify
   property Termination
has value Just True
for SRS
  [c, a, a] -> [a, c, a] {- Input 0 -}
  [a, b, a] -> [b, c, c] {- Strictified (Input 1) -}
  [a, b, b] -> [b, b, a] {- Strictified (Input 2) -}
  [a, b, c] -> [a, a, a] {- Strictified (Input 3) -}
  [a, c, a] -> [b, b, b] {- Strictified (Input 4) -}
  [a, b, b] -> [c, c, b] {- Strictified (Input 5) -}
reason
  DP
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, c, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, c, c] {- DP Nontop (Strictified (Input 1)) -}
  [a, b, b] ->= [b, b, a] {- DP Nontop (Strictified (Input 2)) -}
  [a, b, c] ->= [a, a, a] {- DP Nontop (Strictified (Input 3)) -}
  [a, c, a] ->= [b, b, b] {- DP Nontop (Strictified (Input 4)) -}
  [a, b, b] ->= [c, c, b] {- DP Nontop (Strictified (Input 5)) -}
  [a#, b, a] |-> [c#] {- DP (Top 2) (Strictified (Input 1)) -}
  [a#, b, a] |-> [c#, c] {- DP (Top 1) (Strictified (Input 1)) -}
  [a#, b, b] |-> [a#] {- DP (Top 2) (Strictified (Input 2)) -}
  [a#, b, b] |-> [c#, b] {- DP (Top 1) (Strictified (Input 5)) -}
  [a#, b, b] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 5)) -}
  [a#, b, c] |-> [a#] {- DP (Top 2) (Strictified (Input 3)) -}
  [a#, b, c] |-> [a#, a] {- DP (Top 1) (Strictified (Input 3)) -}
  [a#, b, c] |-> [a#, a, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [c#, a, a] |-> [a#, c, a] {- DP (Top 0) (Input 0) -}
  [c#, a, a] |-> [c#, a] {- DP (Top 1) (Input 0) -}
reason
  (a, 1/1)
  (b, 1/1)
  (c, 1/1)
  (a#, 0/1)
  (c#, 0/1)
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, c, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, c, c] {- DP Nontop (Strictified (Input 1)) -}
  [a, b, b] ->= [b, b, a] {- DP Nontop (Strictified (Input 2)) -}
  [a, b, c] ->= [a, a, a] {- DP Nontop (Strictified (Input 3)) -}
  [a, c, a] ->= [b, b, b] {- DP Nontop (Strictified (Input 4)) -}
  [a, b, b] ->= [c, c, b] {- DP Nontop (Strictified (Input 5)) -}
  [a#, b, b] |-> [c#, c, b] {- DP (Top 0) (Strictified (Input 5)) -}
  [a#, b, c] |-> [a#, a, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [c#, a, a] |-> [a#, c, a] {- DP (Top 0) (Input 0) -}
reason
  EDG
   property Termination
has value Just True
for SRS
  [a#, b, c] |-> [a#, a, a] {- DP (Top 0) (Strictified (Input 3)) -}
  [c, a, a] ->= [a, c, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, c, c] {- DP Nontop (Strictified (Input 1)) -}
  [a, b, b] ->= [b, b, a] {- DP Nontop (Strictified (Input 2)) -}
  [a, b, c] ->= [a, a, a] {- DP Nontop (Strictified (Input 3)) -}
  [a, c, a] ->= [b, b, b] {- DP Nontop (Strictified (Input 4)) -}
  [a, b, b] ->= [c, c, b] {- DP Nontop (Strictified (Input 5)) -}
reason
  ( a
  , Wk  / 0A - 1A \
        | -  - 1A |
        \ -  - 0A / )
  ( b
  , Wk  / - 1A 1A \
        | - -  0A |
        \ - -  0A / )
  ( c
  , Wk  / -  - 1A \
        | 0A - 1A |
        \ -  - 0A / )
  ( a#
  , Wk  / 0A 0A 1A \
        | -  -  -  |
        \ -  -  0A / )
   property Termination
has value Just True
for SRS
  [c, a, a] ->= [a, c, a] {- DP Nontop (Input 0) -}
  [a, b, a] ->= [b, c, c] {- DP Nontop (Strictified (Input 1)) -}
  [a, b, b] ->= [b, b, a] {- DP Nontop (Strictified (Input 2)) -}
  [a, b, c] ->= [a, a, a] {- DP Nontop (Strictified (Input 3)) -}
  [a, c, a] ->= [b, b, b] {- DP Nontop (Strictified (Input 4)) -}
  [a, b, b] ->= [c, c, b] {- DP Nontop (Strictified (Input 5)) -}
reason
  EDG

**************************************************
skeleton: (1/5,3)\Strictify(6,3)\Deepee(10/6,5)\Weight(3/6,5)\EDG(1/6,4)\Matrix{\ArcticBZ}{3}(0/6,3)\EDG[]
**************************************************
let {slowdown = 1.0}
in let {verb ?= False;trac ?= False;cpf ?= False;slowdown = 3;uncertified = \ p -> Apply (Guard_Not cpf) p;uncertified_T = \ t -> And_Then (Guard_Not cpf) t;do = \ x -> x;dont = \ x -> Fail;done = Worker No_Strict_Rules;when_small = \ m -> And_Then (Worker (SizeAtmost 10000)) m;solver = Stats (Kissatapi [ Option "quiet" 1, Configuration "sat"]);mo = Pre (Or_Else Count GLPK);weight = Worker (Weight {modus = mo});wop = Or_Else weight Pass;weighted = \ m -> And_Then m wop;mirror = Worker Mirror;mirrored = \ m -> And_Then mirror m;cleaner = Or_Else (Worker (Cleaner {tracing = trac})) Pass;tiling = \ m w u -> weighted (Worker (Tiling {method = m,width = w,state_type = Best,map_type = Enum,unlabel = u,max_num_tiles = Just 10000,max_num_rules = Just 100000,cpf = cpf}));kbo = \ b -> weighted (Worker (KBO {direction = LR,bits = b,encoding = Ersatz_Bits,solver = solver}));okb = \ b -> weighted (Worker (KBO {direction = RL,bits = b,encoding = Ersatz_Bits,solver = solver}));kbom = \ b -> First_Of [ kbo b, okb b];qpi = \ dim bits -> weighted (Worker (QPI {tracing = trac,dim = dim,bits = bits,solver = solver,encoding = Ersatz_Binary}));matrix = \ mon dom dim bits enc -> weighted (Worker (Matrix {monotone = mon,domain = dom,dim = dim,bits = bits,shape = Cornered,encoding = enc,tracing = trac,verbose = verb,solver = solver}));ctx = Worker (Context {when = When_Empty,side = Right,close = Empty});simple = Seq [ weight, Timeout slowdown (when_small (kbom 1))];unlab = Worker (Unlabel {accept_null_strict = True,produce_null_strict = False});tileun = \ w -> And_Then (tiling All w Never) (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple (Or_Else unlab (And_Then simple unlab))))));tileuns = Seq ([2..2] >>= (\ w -> [ tileun w]));preprocess = While_Fail_T (Worker No_Strict_Rules_T) tileuns;bin = Ersatz_Binary;una = Ersatz_Unary;tp = Worker (Transport {max_derivation_length = Just 2,max_tiers = Just 33,direction = Forward_Backward,tracing = False,cpf = cpf});nohs = let {noh = \ c w m -> Worker (Simple (Config {closure = c,max_closure_width = w,max_seen_size = m,max_inner_children = Just 8,max_outer_children = Just 2,intermediates = All,priority = Linear [ ( -7, Width_lhs), ( -1, Width_rhs), ( 7, Log2 Steps)],start_strict_only = True,print_sizes_finally = True}));f1w = 15;f1s = 1000000;nohs = [ tp, Seq [ noh Forward (Just f1w) (Just f1s), noh Forward Nothing Nothing], Seq [ noh Backward (Just f1w) (Just f1s), noh Backward Nothing Nothing]]}in nohs;relative = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_strict_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Strict dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ matrix_strict_timeout ArcticBZ 3 4 una, matrix_strict_timeout Natural 3 3 bin, matrix_strict_timeout ArcticBZ 4 4 una, matrix_strict_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ matrix_strict_timeout Arctic dim 3 una, matrix_strict_timeout Natural dim 2 bin]))));barr = \ h -> Worker (Matchbound {method = ROC,implementation = Approximate {at_bound = Merge},max_height = Just h});remove = Seq [ weight, First_Of [ when_small (weighted matrices), tileuns]];yeah = While_Fail done remove}in First_Of ([ ] <> ([ Apply ctx yeah, Apply preprocess (Apply ctx yeah)] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)])));standard = let {matrices = First_Of_Pool (Config {workers = 2,advice = Nothing,tracing = trac}) let {s = slowdown;matrix_weak_timeout = \ dom dim bits enc -> TimeoutSlowdown s dim (matrix Weak dom dim bits enc);kbobits = 1}in [ ] <> ([ Timeout s (kbo kbobits), Timeout s (okb kbobits)] <> ([ TimeoutSlowdown s 3 (qpi 3 3), matrix_weak_timeout ArcticBZ 3 4 una, matrix_weak_timeout Natural 3 3 bin, TimeoutSlowdown s 4 (qpi 4 3), matrix_weak_timeout Natural 4 3 bin] <> ([5..10] >>= (\ dim -> [ do (TimeoutSlowdown s dim (qpi dim 4)), do (matrix_weak_timeout Arctic dim 3 una), do (matrix_weak_timeout Natural dim 2 bin)]))));remove = Seq [ weight, when_small (weighted matrices)];dp = Apply ctx (Apply (Worker (DP {tracing = False})) (Apply wop (Branch (Worker (EDG {usable = True,tcap_inverse = True})) remove)));mbe = \ ms -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Exact,max_size = ms}));mbeh = Apply (mbe (Just 100000)) done;mba = \ h -> uncertified_T (Worker (Matchbound {method = RFC,implementation = Approximate {at_bound = Merge},max_height = Just h}));mb_trans = Worker (Matchbound {method = RFC,max_size = Just 10000,max_height = Just 5});mb_proof = Apply mb_trans done;when_onerule = \ m -> Apply (Worker (Assert (Atmost 1 Rules))) m;dropped = \ y -> Or_Else (when_onerule (Dropped_Par (First_Of (nohs <> [ y])))) y;simple_yeah = Seq [ done, uncertified (Worker KKST01), uncertified (dropped (First_Of [ mb_proof, Apply (Worker Mirror) mb_proof]))];yeah = Seq [ done, simple_yeah, First_Of [ dp, Apply (Worker Mirror) dp]];preprocess = While_Fail_T (Worker No_Strict_Rules_T) (First_Of [ tileuns, Seq ([2..6] >>= (\ h -> [ mba h, And_Then (Worker Mirror) (mba h)]))])}in Apply wop (Or_Else done (First_Of ([ Apply preprocess yeah, yeah] <> (nohs <> [ do (Apply (tiling All 2 Never) yeah), dont (Apply (tiling All 3 Never) yeah), dont (Apply (tiling All 4 Never) yeah)]))));strictify = Worker (Strictify {});dropstrict = Worker (Dropstrict {})}
  in Apply cleaner (Or_Else done (Apply wop (Or_Else done (Or_Else (Apply (When_True (Apply dropstrict (Apply strictify standard))) (Apply strictify standard)) relative))))**************************************************
statistics on proof search (nodes types that (together) took more than 1.000000000000)
**************************************************
Except "AsyncCancelled" : "Simple (Config\n { tracing = False\n , verbose = False\n , closure = Forward\n , start_strict_only = True\n , max_closure_length = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs = Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just 1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally = True})"
  total number 1
  max duration 1.173215046000
  min duration 1.173215046000
  total durat. 1.173215046000
  Info
    { what = "Simple (Config\n  { tracing = False\n  , verbose = False\n  , closure = Forward\n  , start_strict_only = True\n  , max_closure_length = Nothing\n  , max_closure_width = (Just 15)\n  , max_closure_width_lhs = Nothing\n  , max_closure_width_rhs = Nothing\n  , max_inner_children = (Just 8)\n  , max_outer_children = (Just 2)\n  , intermediates = All\n  , priority = (Linear [ (-7.0, Width_lhs)\n                       , (-1.0, Width_rhs)\n                       , (7.0, Log2 Steps) ])\n  , string_implementation = (ByteString Plain)\n  , max_seen_size = (Just 1000000)\n  , max_todo_size = Nothing\n  , print_sizes = False\n  , print_sizes_finally = True})"
    , input_size = Size
      { num_rules = 6
      , num_strict_rules = 6
      , num_top_rules = 0
      , num_weak_rules = 0
      , alphabet_size = 3
      , total_length = 36}
    , self = 116
    , parent = Nothing
    , duration = 1.173215046000
    , status = Except "AsyncCancelled"
    , start = 2025-09-04 08:20:47.557761016 UTC
    , finish = 2025-09-04 08:20:48.730976062 UTC
    , thread_cap_info = ("ThreadId 114", 0, False)}
**************************************************
F          Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
F          , closure = Forward\n , start_strict_only = True\n , max_closure_length
F          = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
F          Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
F          8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
F          = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
F          ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
F          1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
F          = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
F          num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
F          = 30} , self = 32 , parent = Nothing , duration = 0.102040437000 , status
F          = Fail , start = 2025-09-04 08:20:47.27968782 UTC , finish = 2025-09-04
F          08:20:47.381728257 UTC , thread_cap_info = ("ThreadId 33", 1, False)}
F          
| E        Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
| E        , closure = Backward\n , start_strict_only = True\n , max_closure_length
| E        = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
| E        Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
| E        8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
| E        = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
| E        ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
| E        1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
| E        = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
| E        num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
| E        = 30} , self = 51 , parent = Nothing , duration = 0.273404482000 , status
| E        = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.279721199 UTC ,
| E        finish = 2025-09-04 08:20:47.553125681 UTC , thread_cap_info = ("ThreadId
| E        35", 0, False)}
| E        
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 5 , num_strict_rules = 5 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 3 , total_length = 30} , self = 36 , parent = Nothing
| | F      , duration = 0.130119089000 , status = Fail , start = 2025-09-04 08:20:47.279778731
| | F      UTC , finish = 2025-09-04 08:20:47.40989782 UTC , thread_cap_info = ("ThreadId
| | F      41", 0, False)}
| | F      
| | | E    Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | E    , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | E    = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | E    False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | E    = Size { num_rules = 45 , num_strict_rules = 45 , num_top_rules = 0 , num_weak_rules
| | | E    = 0 , alphabet_size = 9 , total_length = 360} , self = 68 , parent = Nothing
| | | E    , duration = 0.415465903000 , status = Except "AsyncCancelled" , start
| | | E    = 2025-09-04 08:20:47.281911428 UTC , finish = 2025-09-04 08:20:47.697377331
| | | E    UTC , thread_cap_info = ("ThreadId 52", 3, False)}
| | | E    
| | | | E  Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | | | E  , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | | | E  = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | | | E  False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | | | E  = Size { num_rules = 45 , num_strict_rules = 45 , num_top_rules = 0 , num_weak_rules
| | | | E  = 0 , alphabet_size = 9 , total_length = 360} , self = 70 , parent = Nothing
| | | | E  , duration = 0.435897667000 , status = Except "AsyncCancelled" , start
| | | | E  = 2025-09-04 08:20:47.281916332 UTC , finish = 2025-09-04 08:20:47.717813999
| | | | E  UTC , thread_cap_info = ("ThreadId 54", 3, False)}
| | | | E  
F | | | |  
E | | | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E | | | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E | | | |  = Nothing\n , max_closure_width = Nothing\n , max_closure_width_lhs = Nothing\n
E | | | |  , max_closure_width_rhs = Nothing\n , max_inner_children = (Just 8)\n ,
E | | | |  max_outer_children = (Just 2)\n , intermediates = All\n , priority = (Linear
E | | | |  [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps) ])\n ,
E | | | |  string_implementation = (ByteString Plain)\n , max_seen_size = Nothing\n
E | | | |  , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E | | | |  = True})" , input_size = Size { num_rules = 5 , num_strict_rules = 5 ,
E | | | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E | | | |  = 30} , self = 49 , parent = Nothing , duration = 0.155583664000 , status
E | | | |  = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.381772071 UTC ,
E | | | |  finish = 2025-09-04 08:20:47.537355735 UTC , thread_cap_info = ("ThreadId
E | | | |  75", 1, False)}
E | | | |  
| | F | |  
E |   | |  
  E   | |  
E     | |  Info { what = "Simple (Config\n { tracing = False\n , verbose = False\n
E     | |  , closure = Forward\n , start_strict_only = True\n , max_closure_length
E     | |  = Nothing\n , max_closure_width = (Just 15)\n , max_closure_width_lhs =
E     | |  Nothing\n , max_closure_width_rhs = Nothing\n , max_inner_children = (Just
E     | |  8)\n , max_outer_children = (Just 2)\n , intermediates = All\n , priority
E     | |  = (Linear [ (-7.0, Width_lhs)\n , (-1.0, Width_rhs)\n , (7.0, Log2 Steps)
E     | |  ])\n , string_implementation = (ByteString Plain)\n , max_seen_size = (Just
E     | |  1000000)\n , max_todo_size = Nothing\n , print_sizes = False\n , print_sizes_finally
E     | |  = True})" , input_size = Size { num_rules = 6 , num_strict_rules = 6 ,
E     | |  num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 3 , total_length
E     | |  = 36} , self = 116 , parent = Nothing , duration = 1.173215046000 , status
E     | |  = Except "AsyncCancelled" , start = 2025-09-04 08:20:47.557761016 UTC ,
E     | |  finish = 2025-09-04 08:20:48.730976062 UTC , thread_cap_info = ("ThreadId
E     | |  114", 0, False)}
E     | |  
| F   | |  Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F   | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F   | |  = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| F   | |  = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| F   | |  = 432} , self = 86 , parent = Nothing , duration = 0.299039958000 , status
| F   | |  = Fail , start = 2025-09-04 08:20:47.560186708 UTC , finish = 2025-09-04
| F   | |  08:20:47.859226666 UTC , thread_cap_info = ("ThreadId 124", 2, False)}
| F   | |  
| | F | |  Info { what = "KBO\n { direction = RL\n , bits = 1\n , solver = Stats (Kissatapi
| | F | |  [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| | F | |  = False\n , verbose = False}" , input_size = Size { num_rules = 54 , num_strict_rules
| | F | |  = 54 , num_top_rules = 0 , num_weak_rules = 0 , alphabet_size = 9 , total_length
| | F | |  = 432} , self = 78 , parent = Nothing , duration = 0.215080513000 , status
| | F | |  = Fail , start = 2025-09-04 08:20:47.577354279 UTC , finish = 2025-09-04
| | F | |  08:20:47.792434792 UTC , thread_cap_info = ("ThreadId 126", 2, False)}
| | F | |  
| | | E |  
| | |   E  
| | F      
| | F      Info { what = "Matchbound\n { method = RFC\n , implementation = Exact\n
| | F      , cpf_state_encoding = Encoding { base = 10, order = MSB_First}\n , max_size
| | F      = Just 10000\n , max_height = Just 5\n , initial = Paths\n , verbose =
| | F      False\n , tracing = False\n , draw = False\n , cpf = False}" , input_size
| | F      = Size { num_rules = 54 , num_strict_rules = 54 , num_top_rules = 0 , num_weak_rules
| | F      = 0 , alphabet_size = 9 , total_length = 432} , self = 93 , parent = Nothing
| | F      , duration = 0.141231230000 , status = Fail , start = 2025-09-04 08:20:47.797837496
| | F      UTC , finish = 2025-09-04 08:20:47.939068726 UTC , thread_cap_info = ("ThreadId
| | F      147", 1, False)}
| | F      
| F |      
|   F      
| F        Info { what = "KBO\n { direction = LR\n , bits = 1\n , solver = Stats (Kissatapi
| F        [Option \"quiet\" 1, Configuration \"sat\"])\n , compress = True\n , tracing
| F        = False\n , verbose = False}" , input_size = Size { num_rules = 12 , num_strict_rules
| F        = 6 , num_top_rules = 6 , num_weak_rules = 6 , alphabet_size = 6 , total_length
| F        = 72} , self = 108 , parent = Nothing , duration = 0.114999674000 , status
| F        = Fail , start = 2025-09-04 08:20:47.964910999 UTC , finish = 2025-09-04
| F        08:20:48.079910673 UTC , thread_cap_info = ("ThreadId 174", 0, False)}
| F        
| | F      Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | F      [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | F      , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | F      = 12 , num_strict_rules = 6 , num_top_rules = 6 , num_weak_rules = 6 ,
| | F      alphabet_size = 6 , total_length = 72} , self = 110 , parent = Nothing
| | F      , duration = 0.566062008000 , status = Fail , start = 2025-09-04 08:20:48.023505391
| | F      UTC , finish = 2025-09-04 08:20:48.589567399 UTC , thread_cap_info = ("ThreadId
| | F      180", 0, False)}
| | F      
| | | F    Info { what = "QPI\n { dim = 3\n , bits = 3\n , solver = Stats (Kissatapi
| | | F    [Option \"quiet\" 1, Configuration \"sat\"])\n , encoding = Ersatz_Binary\n
| | | F    , tracing = False\n , verbose = False}" , input_size = Size { num_rules
| | | F    = 7 , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | F    = 4 , total_length = 42} , self = 109 , parent = Nothing , duration = 0.299997172000
| | | F    , status = Fail , start = 2025-09-04 08:20:48.037362787 UTC , finish =
| | | F    2025-09-04 08:20:48.337359959 UTC , thread_cap_info = ("ThreadId 181",
| | | F    0, False)}
| | | F    
| | | | S  Info { what = "Matrix\n { monotone = Weak\n , domain = ArcticBZ\n , method
| | | | S  = Direct\n , shape = Cornered\n , bits = 4\n , compress = True\n , remove
| | | | S  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Unary\n
| | | | S  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| | | | S  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| | | | S  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| | | | S  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| | | | S  = 4 , total_length = 42} , self = 111 , parent = Nothing , duration = 0.540047831000
| | | | S  , status = Success , start = 2025-09-04 08:20:48.052252335 UTC , finish
| | | | S  = 2025-09-04 08:20:48.592300166 UTC , thread_cap_info = ("ThreadId 182",
| | | | S  0, False)}
| | | | S  
| F | | |  
|   | F |  
| E |   |  Info { what = "Matrix\n { monotone = Weak\n , domain = Natural\n , method
| E |   |  = Direct\n , shape = Cornered\n , bits = 3\n , compress = True\n , remove
| E |   |  = Any\n , constraint = And []\n , minimize = Nothing\n , encoding = Ersatz_Binary\n
| E |   |  , dim = 3\n , solver = Stats (Kissatapi [Option \"quiet\" 1, Configuration
| E |   |  \"sat\"])\n , verbose = False\n , tracing = False\n , briefing = False\n
| E |   |  , log_level = 1\n , draw = False}" , input_size = Size { num_rules = 7
| E |   |  , num_strict_rules = 1 , num_top_rules = 1 , num_weak_rules = 6 , alphabet_size
| E |   |  = 4 , total_length = 42} , self = 113 , parent = Nothing , duration = 0.344514176000
| E |   |  , status = Except "AsyncCancelled" , start = 2025-09-04 08:20:48.33745475
| E |   |  UTC , finish = 2025-09-04 08:20:48.681968926 UTC , thread_cap_info = ("ThreadId
| E |   |  187", 0, False)}
| E |   |  
| | F   |  
| |     S  
| E        
E          
